<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="853"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="853"> </text>
<g id="frames">
<g>
<title>all (1,101 samples, 100.00%)</title><rect x="10.0" y="819.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="830.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (237 samples, 21.53%)</title><rect x="10.0" y="803.0" width="254.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="814.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (237 samples, 21.53%)</title><rect x="10.0" y="787.0" width="254.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="798.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (237 samples, 21.53%)</title><rect x="10.0" y="771.0" width="254.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="782.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.18%)</title><rect x="10.0" y="755.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="10.0" y="739.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="10.0" y="723.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="11.1" y="739.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="11.1" y="723.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="11.1" y="707.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="11.1" y="691.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="11.1" y="675.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="11.1" y="659.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="11.1" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="11.1" y="627.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$136/595603759.test (1 samples, 0.09%)</title><rect x="11.1" y="611.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.09%)</title><rect x="12.1" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.09%)</title><rect x="12.1" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.27%)</title><rect x="13.2" y="755.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.27%)</title><rect x="13.2" y="739.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.27%)</title><rect x="13.2" y="723.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$135/603329330.accept (2 samples, 0.18%)</title><rect x="14.3" y="707.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.18%)</title><rect x="14.3" y="691.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.18%)</title><rect x="14.3" y="675.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.3" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.18%)</title><rect x="14.3" y="659.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="670.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (190 samples, 17.26%)</title><rect x="16.4" y="755.0" width="203.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="766.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/1720771950.accept (183 samples, 16.62%)</title><rect x="17.5" y="739.0" width="196.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="750.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (183 samples, 16.62%)</title><rect x="17.5" y="723.0" width="196.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.5" y="734.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (164 samples, 14.90%)</title><rect x="17.5" y="707.0" width="175.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.5" y="718.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (164 samples, 14.90%)</title><rect x="17.5" y="691.0" width="175.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.5" y="702.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (164 samples, 14.90%)</title><rect x="17.5" y="675.0" width="175.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.5" y="686.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/910091170.linkToTargetMethod (1 samples, 0.09%)</title><rect x="17.5" y="659.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/263025902.invokeStatic_LL_L (1 samples, 0.09%)</title><rect x="17.5" y="643.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1188216961.get$Lambda (1 samples, 0.09%)</title><rect x="17.5" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="17.5" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="20.5" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="17.5" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="20.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="17.5" y="579.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (163 samples, 14.80%)</title><rect x="18.6" y="659.0" width="174.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="670.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (163 samples, 14.80%)</title><rect x="18.6" y="643.0" width="174.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="654.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (139 samples, 12.62%)</title><rect x="44.3" y="627.0" width="149.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="638.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (105 samples, 9.54%)</title><rect x="79.7" y="611.0" width="112.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.7" y="622.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (24 samples, 2.18%)</title><rect x="86.1" y="595.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="89.1" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (24 samples, 2.18%)</title><rect x="86.1" y="579.0" width="25.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="89.1" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (24 samples, 2.18%)</title><rect x="86.1" y="563.0" width="25.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.1" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (75 samples, 6.81%)</title><rect x="111.8" y="595.0" width="80.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.8" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (75 samples, 6.81%)</title><rect x="111.8" y="579.0" width="80.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="114.8" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (75 samples, 6.81%)</title><rect x="111.8" y="563.0" width="80.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="114.8" y="574.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (75 samples, 6.81%)</title><rect x="111.8" y="547.0" width="80.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.8" y="558.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (75 samples, 6.81%)</title><rect x="111.8" y="531.0" width="80.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="114.8" y="542.0">sun/misc/..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="111.8" y="515.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="114.8" y="526.0"></text>
</g>
<g>
<title>Unsafe_Unpark (66 samples, 5.99%)</title><rect x="112.9" y="515.0" width="70.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="115.9" y="526.0">Unsafe_U..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.09%)</title><rect x="112.9" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="115.9" y="510.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.18%)</title><rect x="114.0" y="499.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="117.0" y="510.0"></text>
</g>
<g>
<title>__pthread_cond_signal (44 samples, 4.00%)</title><rect x="116.1" y="499.0" width="47.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="119.1" y="510.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.18%)</title><rect x="163.3" y="499.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="166.3" y="510.0"></text>
</g>
<g>
<title>pthread_mutex_lock (17 samples, 1.54%)</title><rect x="165.4" y="499.0" width="18.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="168.4" y="510.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.45%)</title><rect x="183.6" y="515.0" width="5.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="186.6" y="526.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.27%)</title><rect x="189.0" y="515.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="192.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.09%)</title><rect x="192.2" y="611.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="195.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.09%)</title><rect x="192.2" y="595.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.09%)</title><rect x="192.2" y="579.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (15 samples, 1.36%)</title><rect x="193.3" y="707.0" width="16.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (15 samples, 1.36%)</title><rect x="193.3" y="691.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.18%)</title><rect x="195.4" y="675.0" width="13.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="198.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.18%)</title><rect x="195.4" y="659.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="207.2" y="643.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="210.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="207.2" y="627.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="207.2" y="611.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.18%)</title><rect x="209.3" y="707.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="209.3" y="691.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="212.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="209.3" y="675.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="212.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="210.4" y="659.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.4" y="670.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.09%)</title><rect x="210.4" y="643.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="211.5" y="707.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.18%)</title><rect x="211.5" y="691.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.18%)</title><rect x="211.5" y="675.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="211.5" y="659.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="214.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="212.6" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="212.6" y="643.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.18%)</title><rect x="213.6" y="739.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="214.7" y="723.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="217.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="214.7" y="707.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="217.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="214.7" y="691.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="217.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="214.7" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="214.7" y="659.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.7" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="214.7" y="643.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="214.7" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.27%)</title><rect x="215.8" y="739.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.27%)</title><rect x="215.8" y="723.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="218.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.27%)</title><rect x="215.8" y="707.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="218.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.27%)</title><rect x="215.8" y="691.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.18%)</title><rect x="216.8" y="675.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="219.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="219.0" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="219.0" y="723.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="222.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (41 samples, 3.72%)</title><rect x="220.1" y="755.0" width="43.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.1" y="766.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (41 samples, 3.72%)</title><rect x="220.1" y="739.0" width="43.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.1" y="750.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 2.91%)</title><rect x="220.1" y="723.0" width="34.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.1" y="734.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (32 samples, 2.91%)</title><rect x="220.1" y="707.0" width="34.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.1" y="718.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (32 samples, 2.91%)</title><rect x="220.1" y="691.0" width="34.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.1" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (27 samples, 2.45%)</title><rect x="220.1" y="675.0" width="28.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.1" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (27 samples, 2.45%)</title><rect x="220.1" y="659.0" width="28.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.1" y="670.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (18 samples, 1.63%)</title><rect x="220.1" y="643.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (11 samples, 1.00%)</title><rect x="220.1" y="627.0" width="11.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (11 samples, 1.00%)</title><rect x="220.1" y="611.0" width="11.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (11 samples, 1.00%)</title><rect x="220.1" y="595.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="223.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (11 samples, 1.00%)</title><rect x="220.1" y="579.0" width="11.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (11 samples, 1.00%)</title><rect x="220.1" y="563.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (11 samples, 1.00%)</title><rect x="220.1" y="547.0" width="11.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="223.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (11 samples, 1.00%)</title><rect x="220.1" y="531.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.54%)</title><rect x="231.9" y="627.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="234.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.54%)</title><rect x="231.9" y="611.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.09%)</title><rect x="238.3" y="627.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.09%)</title><rect x="238.3" y="611.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.09%)</title><rect x="238.3" y="595.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.09%)</title><rect x="238.3" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (9 samples, 0.82%)</title><rect x="239.4" y="643.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 0.82%)</title><rect x="239.4" y="627.0" width="9.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="242.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 0.82%)</title><rect x="239.4" y="611.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="242.4" y="622.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 0.82%)</title><rect x="239.4" y="595.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="242.4" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="246.9" y="579.0" width="2.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="249.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.18%)</title><rect x="249.0" y="675.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.18%)</title><rect x="249.0" y="659.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.18%)</title><rect x="249.0" y="643.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="249.0" y="627.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="249.0" y="611.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.0" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="250.1" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="253.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="250.1" y="611.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="253.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.09%)</title><rect x="251.1" y="675.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="251.1" y="659.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="251.1" y="643.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="254.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="251.1" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="251.1" y="611.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.1" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="251.1" y="595.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="254.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.09%)</title><rect x="252.2" y="675.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.09%)</title><rect x="252.2" y="659.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.09%)</title><rect x="252.2" y="643.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="252.2" y="627.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.09%)</title><rect x="252.2" y="611.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.2" y="622.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.09%)</title><rect x="252.2" y="595.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="252.2" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.09%)</title><rect x="253.3" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="256.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.18%)</title><rect x="254.4" y="723.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.18%)</title><rect x="254.4" y="707.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="257.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.18%)</title><rect x="254.4" y="691.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="254.4" y="675.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.4" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="254.4" y="659.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="257.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="254.4" y="643.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="257.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="254.4" y="627.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="254.4" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="254.4" y="595.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="254.4" y="579.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$75/341796579.get (1 samples, 0.09%)</title><rect x="254.4" y="563.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.09%)</title><rect x="255.4" y="675.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.09%)</title><rect x="255.4" y="659.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="255.4" y="643.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="258.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="255.4" y="627.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="255.4" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="258.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="255.4" y="595.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="255.4" y="579.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="255.4" y="563.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="258.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="255.4" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.4" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$326/472020950.get (1 samples, 0.09%)</title><rect x="255.4" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="258.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.36%)</title><rect x="256.5" y="723.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="259.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.36%)</title><rect x="256.5" y="707.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="259.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.maybeUpdate (1 samples, 0.09%)</title><rect x="256.5" y="691.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.timeToNextUpdate (1 samples, 0.09%)</title><rect x="256.5" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.27%)</title><rect x="257.6" y="691.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="257.6" y="675.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="257.6" y="659.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="260.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="257.6" y="643.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="257.6" y="627.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="257.6" y="611.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="257.6" y="595.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="260.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.09%)</title><rect x="257.6" y="579.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="260.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.18%)</title><rect x="258.6" y="675.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (2 samples, 0.18%)</title><rect x="258.6" y="659.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (2 samples, 0.18%)</title><rect x="258.6" y="643.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="258.6" y="627.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.09%)</title><rect x="258.6" y="611.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="258.6" y="595.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="258.6" y="579.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="261.6" y="590.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="258.6" y="563.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="261.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="258.6" y="547.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.09%)</title><rect x="258.6" y="531.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.6" y="542.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="258.6" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.6" y="526.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.09%)</title><rect x="258.6" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.6" y="510.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.09%)</title><rect x="258.6" y="483.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.6" y="494.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.copyMemory (1 samples, 0.09%)</title><rect x="258.6" y="467.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.6" y="478.0"></text>
</g>
<g>
<title>Unsafe_CopyMemory2 (1 samples, 0.09%)</title><rect x="258.6" y="451.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="261.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.09%)</title><rect x="259.7" y="627.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="259.7" y="611.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="259.7" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="259.7" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="259.7" y="563.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="262.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.09%)</title><rect x="259.7" y="547.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="262.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.09%)</title><rect x="259.7" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="259.7" y="515.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.27%)</title><rect x="260.8" y="723.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.27%)</title><rect x="260.8" y="707.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="261.9" y="691.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="261.9" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="261.9" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="261.9" y="643.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="261.9" y="627.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="262.9" y="691.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="262.9" y="675.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="265.9" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (614 samples, 55.77%)</title><rect x="264.0" y="803.0" width="658.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.0" y="814.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (614 samples, 55.77%)</title><rect x="264.0" y="787.0" width="658.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="267.0" y="798.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (614 samples, 55.77%)</title><rect x="264.0" y="771.0" width="658.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.0" y="782.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1188216961.run (404 samples, 36.69%)</title><rect x="271.5" y="755.0" width="433.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.5" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (404 samples, 36.69%)</title><rect x="271.5" y="739.0" width="433.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.5" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (402 samples, 36.51%)</title><rect x="273.7" y="723.0" width="430.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.7" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (402 samples, 36.51%)</title><rect x="273.7" y="707.0" width="430.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.7" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.09%)</title><rect x="277.9" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.54%)</title><rect x="279.0" y="691.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.54%)</title><rect x="279.0" y="675.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.54%)</title><rect x="279.0" y="659.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="279.0" y="643.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="282.0" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.45%)</title><rect x="280.1" y="643.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.1" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="282.2" y="627.0" width="3.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="285.2" y="638.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.27%)</title><rect x="282.2" y="611.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="285.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (27 samples, 2.45%)</title><rect x="285.4" y="691.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.4" y="702.0">co..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2100961961.linkToTargetMethod (1 samples, 0.09%)</title><rect x="285.4" y="675.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="288.4" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/842326585.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="285.4" y="659.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$373/1874476015.get$Lambda (1 samples, 0.09%)</title><rect x="285.4" y="643.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="285.4" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="288.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="285.4" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="288.4" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="285.4" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="288.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 2.36%)</title><rect x="286.5" y="675.0" width="27.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.5" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 2.36%)</title><rect x="286.5" y="659.0" width="27.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.5" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 1.63%)</title><rect x="295.1" y="643.0" width="19.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="295.1" y="627.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.09%)</title><rect x="295.1" y="611.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="298.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.09%)</title><rect x="295.1" y="595.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="298.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$373/1874476015.accept (1 samples, 0.09%)</title><rect x="295.1" y="579.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.18%)</title><rect x="296.2" y="611.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="299.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.36%)</title><rect x="298.3" y="627.0" width="16.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$373/1874476015.accept (15 samples, 1.36%)</title><rect x="298.3" y="611.0" width="16.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (15 samples, 1.36%)</title><rect x="298.3" y="595.0" width="16.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (15 samples, 1.36%)</title><rect x="298.3" y="579.0" width="16.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (14 samples, 1.27%)</title><rect x="299.4" y="563.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$357/1279149841.accept (1 samples, 0.09%)</title><rect x="303.7" y="547.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.7" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="304.7" y="547.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="307.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.73%)</title><rect x="305.8" y="547.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.73%)</title><rect x="305.8" y="531.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$356/483913701.accept (1 samples, 0.09%)</title><rect x="313.3" y="515.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (138 samples, 12.53%)</title><rect x="314.4" y="691.0" width="147.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.4" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (138 samples, 12.53%)</title><rect x="314.4" y="675.0" width="147.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.4" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (138 samples, 12.53%)</title><rect x="314.4" y="659.0" width="147.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.4" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (138 samples, 12.53%)</title><rect x="314.4" y="643.0" width="147.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.4" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (138 samples, 12.53%)</title><rect x="314.4" y="627.0" width="147.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.4" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (138 samples, 12.53%)</title><rect x="314.4" y="611.0" width="147.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.4" y="622.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (46 samples, 4.18%)</title><rect x="314.4" y="595.0" width="49.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.4" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (23 samples, 2.09%)</title><rect x="314.4" y="579.0" width="24.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.4" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (23 samples, 2.09%)</title><rect x="314.4" y="563.0" width="24.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.4" y="574.0">c..</text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.73%)</title><rect x="329.4" y="547.0" width="8.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="332.4" y="558.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.54%)</title><rect x="331.5" y="531.0" width="6.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="334.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="338.0" y="547.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.45%)</title><rect x="339.0" y="579.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.36%)</title><rect x="339.0" y="563.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="342.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.09%)</title><rect x="340.1" y="547.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.18%)</title><rect x="341.2" y="547.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.2" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="341.2" y="531.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.2" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="341.2" y="515.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="341.2" y="499.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="344.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="341.2" y="483.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="344.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="343.3" y="563.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="346.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="343.3" y="547.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="346.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 1.63%)</title><rect x="344.4" y="579.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (2 samples, 0.18%)</title><rect x="345.5" y="563.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="348.5" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="346.5" y="547.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (15 samples, 1.36%)</title><rect x="347.6" y="563.0" width="16.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="350.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.18%)</title><rect x="347.6" y="547.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.18%)</title><rect x="347.6" y="531.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.09%)</title><rect x="347.6" y="515.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="350.6" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="347.6" y="499.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="350.6" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="347.6" y="483.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="350.6" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="347.6" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="350.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="348.7" y="515.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="351.7" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="348.7" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="351.7" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="348.7" y="483.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="351.7" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="348.7" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="351.7" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="348.7" y="451.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="351.7" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="348.7" y="435.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="351.7" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="348.7" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="351.7" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="348.7" y="403.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="351.7" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.09%)</title><rect x="348.7" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="351.7" y="398.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.09%)</title><rect x="348.7" y="371.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="351.7" y="382.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.09%)</title><rect x="348.7" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="351.7" y="366.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.09%)</title><rect x="348.7" y="339.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="351.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (13 samples, 1.18%)</title><rect x="349.7" y="547.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="352.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (79 samples, 7.18%)</title><rect x="363.7" y="595.0" width="84.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.7" y="606.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (8 samples, 0.73%)</title><rect x="363.7" y="579.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="366.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (8 samples, 0.73%)</title><rect x="363.7" y="563.0" width="8.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="366.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (3 samples, 0.27%)</title><rect x="368.0" y="547.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="371.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.18%)</title><rect x="369.0" y="531.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.09%)</title><rect x="371.2" y="547.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.27%)</title><rect x="372.3" y="579.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="375.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.27%)</title><rect x="372.3" y="563.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="375.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="372.3" y="547.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="375.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.18%)</title><rect x="373.3" y="547.0" width="2.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="376.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.54%)</title><rect x="375.5" y="579.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.45%)</title><rect x="376.5" y="563.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.36%)</title><rect x="376.5" y="547.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.18%)</title><rect x="378.7" y="531.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="381.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="379.8" y="515.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="380.8" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="383.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="380.8" y="531.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.36%)</title><rect x="381.9" y="579.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.36%)</title><rect x="381.9" y="563.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="384.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.27%)</title><rect x="383.0" y="547.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="386.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="383.0" y="531.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="386.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.27%)</title><rect x="383.0" y="515.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (58 samples, 5.27%)</title><rect x="386.2" y="579.0" width="62.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="389.2" y="590.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (4 samples, 0.36%)</title><rect x="386.2" y="563.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="389.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="389.4" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (54 samples, 4.90%)</title><rect x="390.5" y="563.0" width="57.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.5" y="574.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.27%)</title><rect x="392.6" y="547.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.27%)</title><rect x="394.8" y="531.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.27%)</title><rect x="394.8" y="515.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.27%)</title><rect x="394.8" y="499.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.27%)</title><rect x="394.8" y="483.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.27%)</title><rect x="394.8" y="467.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 0.82%)</title><rect x="398.0" y="531.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.27%)</title><rect x="398.0" y="515.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="401.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 0.54%)</title><rect x="401.2" y="515.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="404.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 0.54%)</title><rect x="401.2" y="499.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 0.54%)</title><rect x="401.2" y="483.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 0.54%)</title><rect x="401.2" y="467.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="407.6" y="547.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (37 samples, 3.36%)</title><rect x="408.7" y="547.0" width="39.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.7" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.18%)</title><rect x="408.7" y="531.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 3.18%)</title><rect x="410.8" y="531.0" width="37.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="413.8" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (34 samples, 3.09%)</title><rect x="411.9" y="515.0" width="36.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="414.9" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.00%)</title><rect x="417.3" y="499.0" width="11.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.73%)</title><rect x="419.4" y="483.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.73%)</title><rect x="419.4" y="467.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="422.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.73%)</title><rect x="419.4" y="451.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.36%)</title><rect x="419.4" y="435.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.36%)</title><rect x="423.7" y="435.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="426.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="428.0" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.09%)</title><rect x="428.0" y="467.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="431.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.09%)</title><rect x="428.0" y="451.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.73%)</title><rect x="429.1" y="499.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.73%)</title><rect x="429.1" y="483.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="432.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.73%)</title><rect x="429.1" y="467.0" width="8.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.73%)</title><rect x="429.1" y="451.0" width="8.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="432.1" y="462.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.73%)</title><rect x="429.1" y="435.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.54%)</title><rect x="437.6" y="499.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="440.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.54%)</title><rect x="437.6" y="483.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="440.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.54%)</title><rect x="437.6" y="467.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.54%)</title><rect x="437.6" y="451.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.6" y="462.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.36%)</title><rect x="439.8" y="435.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.8" y="446.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.27%)</title><rect x="440.8" y="419.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="443.8" y="430.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.27%)</title><rect x="440.8" y="403.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.8" y="414.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isVMAnonymousClass (1 samples, 0.09%)</title><rect x="443.0" y="387.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.0" y="398.0"></text>
</g>
<g>
<title>java/lang/Class.getName (1 samples, 0.09%)</title><rect x="443.0" y="371.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="446.0" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="443.0" y="355.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="446.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="443.0" y="339.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="446.0" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="443.0" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="446.0" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="443.0" y="307.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="446.0" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="443.0" y="291.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="446.0" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="443.0" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="446.0" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="443.0" y="259.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="446.0" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="443.0" y="243.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="446.0" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="443.0" y="227.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="446.0" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.18%)</title><rect x="444.1" y="499.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="447.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="444.1" y="483.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="447.1" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="444.1" y="467.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="447.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.18%)</title><rect x="446.2" y="499.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="449.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="446.2" y="483.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="449.2" y="494.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.18%)</title><rect x="446.2" y="467.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="449.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.18%)</title><rect x="448.3" y="595.0" width="14.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="451.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.18%)</title><rect x="448.3" y="579.0" width="14.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.18%)</title><rect x="448.3" y="563.0" width="14.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.27%)</title><rect x="449.4" y="547.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="452.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (3 samples, 0.27%)</title><rect x="452.6" y="547.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="455.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.54%)</title><rect x="455.8" y="547.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.54%)</title><rect x="455.8" y="531.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="458.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (224 samples, 20.35%)</title><rect x="462.3" y="691.0" width="240.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="465.3" y="702.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.27%)</title><rect x="463.4" y="675.0" width="3.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="466.4" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="464.4" y="659.0" width="2.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="467.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (37 samples, 3.36%)</title><rect x="466.6" y="675.0" width="39.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="469.6" y="686.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (37 samples, 3.36%)</title><rect x="466.6" y="659.0" width="39.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="469.6" y="670.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 3.36%)</title><rect x="466.6" y="643.0" width="39.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="469.6" y="654.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.73%)</title><rect x="466.6" y="627.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.73%)</title><rect x="466.6" y="611.0" width="8.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="469.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.73%)</title><rect x="466.6" y="595.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.6" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.73%)</title><rect x="466.6" y="579.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="469.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (29 samples, 2.63%)</title><rect x="475.1" y="627.0" width="31.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.1" y="638.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.82%)</title><rect x="496.6" y="611.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="499.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.36%)</title><rect x="496.6" y="595.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="499.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.45%)</title><rect x="500.9" y="595.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.45%)</title><rect x="506.2" y="675.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="509.2" y="686.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.36%)</title><rect x="507.3" y="659.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="510.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (105 samples, 9.54%)</title><rect x="511.6" y="675.0" width="112.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="514.6" y="686.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (102 samples, 9.26%)</title><rect x="511.6" y="659.0" width="109.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="514.6" y="670.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (34 samples, 3.09%)</title><rect x="525.5" y="643.0" width="36.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="528.5" y="654.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 2.00%)</title><rect x="533.0" y="627.0" width="23.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="536.0" y="638.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 1.91%)</title><rect x="534.1" y="611.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.1" y="622.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.82%)</title><rect x="537.3" y="595.0" width="9.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="540.3" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.82%)</title><rect x="537.3" y="579.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.3" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.82%)</title><rect x="537.3" y="563.0" width="9.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.09%)</title><rect x="537.3" y="547.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="540.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.73%)</title><rect x="538.4" y="547.0" width="8.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="541.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="539.4" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="542.4" y="542.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="539.4" y="515.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="542.4" y="526.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="539.4" y="499.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="542.4" y="510.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="539.4" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="542.4" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (6 samples, 0.54%)</title><rect x="540.5" y="531.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="543.5" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (6 samples, 0.54%)</title><rect x="540.5" y="515.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="543.5" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (5 samples, 0.45%)</title><rect x="540.5" y="499.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="543.5" y="510.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="545.9" y="499.0" width="1.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="548.9" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.27%)</title><rect x="546.9" y="595.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="549.9" y="606.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.54%)</title><rect x="550.2" y="595.0" width="6.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="553.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.09%)</title><rect x="556.6" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="559.6" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="556.6" y="611.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="559.6" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="556.6" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="559.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="556.6" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="559.6" y="590.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="556.6" y="563.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="559.6" y="574.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="556.6" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="559.6" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.36%)</title><rect x="557.7" y="627.0" width="4.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="560.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.36%)</title><rect x="562.0" y="643.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="565.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.36%)</title><rect x="562.0" y="627.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="565.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="562.0" y="611.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.0" y="622.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="562.0" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="565.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="562.0" y="579.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="565.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="562.0" y="563.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="565.0" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.27%)</title><rect x="563.0" y="611.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="566.0" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="566.2" y="643.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="569.2" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (50 samples, 4.54%)</title><rect x="567.3" y="643.0" width="53.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="570.3" y="654.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (47 samples, 4.27%)</title><rect x="570.5" y="627.0" width="50.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.5" y="638.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.18%)</title><rect x="570.5" y="611.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="573.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.18%)</title><rect x="570.5" y="595.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="573.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.18%)</title><rect x="570.5" y="579.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.18%)</title><rect x="570.5" y="563.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (45 samples, 4.09%)</title><rect x="572.7" y="611.0" width="48.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="575.7" y="622.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (42 samples, 3.81%)</title><rect x="575.9" y="595.0" width="45.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.9" y="606.0">java..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.09%)</title><rect x="593.0" y="579.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="596.0" y="590.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.09%)</title><rect x="593.0" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="596.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (25 samples, 2.27%)</title><rect x="594.1" y="579.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="597.1" y="590.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.73%)</title><rect x="611.3" y="563.0" width="8.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="614.3" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.27%)</title><rect x="616.6" y="547.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="619.6" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.27%)</title><rect x="616.6" y="531.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="619.6" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.27%)</title><rect x="616.6" y="515.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="619.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="618.8" y="499.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="621.8" y="510.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="618.8" y="483.0" width="1.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="621.8" y="494.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="619.8" y="563.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="622.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.27%)</title><rect x="620.9" y="659.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.9" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.27%)</title><rect x="620.9" y="643.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="623.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.27%)</title><rect x="620.9" y="627.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="623.9" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.27%)</title><rect x="620.9" y="611.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="623.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (55 samples, 5.00%)</title><rect x="624.1" y="675.0" width="59.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.1" y="686.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (55 samples, 5.00%)</title><rect x="624.1" y="659.0" width="59.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="627.1" y="670.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/428738490.process (30 samples, 2.72%)</title><rect x="625.2" y="643.0" width="32.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="628.2" y="654.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (30 samples, 2.72%)</title><rect x="625.2" y="627.0" width="32.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="628.2" y="638.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 2.36%)</title><rect x="627.3" y="611.0" width="27.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.3" y="622.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="630.5" y="595.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="633.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="630.5" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.5" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="630.5" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.5" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.09%)</title><rect x="630.5" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.09%)</title><rect x="630.5" y="531.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="633.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.09%)</title><rect x="630.5" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 1.09%)</title><rect x="631.6" y="595.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="634.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="635.9" y="579.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="638.9" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="635.9" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="638.9" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.64%)</title><rect x="637.0" y="579.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.0" y="590.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.64%)</title><rect x="637.0" y="563.0" width="7.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="640.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 0.91%)</title><rect x="644.5" y="595.0" width="10.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.18%)</title><rect x="655.2" y="611.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.2" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.18%)</title><rect x="655.2" y="595.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="658.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.18%)</title><rect x="655.2" y="579.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="658.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.18%)</title><rect x="655.2" y="563.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="658.2" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.18%)</title><rect x="655.2" y="547.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 0.36%)</title><rect x="657.3" y="643.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="660.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (4 samples, 0.36%)</title><rect x="657.3" y="627.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="660.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.36%)</title><rect x="657.3" y="611.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="660.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.36%)</title><rect x="661.6" y="643.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="664.6" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="661.6" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="664.6" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="661.6" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="664.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="661.6" y="595.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="664.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.27%)</title><rect x="662.7" y="627.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.18%)</title><rect x="665.9" y="643.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="668.9" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.18%)</title><rect x="665.9" y="627.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="668.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.09%)</title><rect x="667.0" y="611.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.0" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.18%)</title><rect x="668.1" y="643.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.18%)</title><rect x="668.1" y="627.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="671.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.45%)</title><rect x="670.2" y="643.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="673.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.36%)</title><rect x="671.3" y="627.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.64%)</title><rect x="675.6" y="643.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="678.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.64%)</title><rect x="675.6" y="627.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.45%)</title><rect x="677.7" y="611.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="680.7" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="677.7" y="595.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="680.7" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="677.7" y="579.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="680.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="677.7" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="680.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.27%)</title><rect x="678.8" y="595.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.27%)</title><rect x="678.8" y="579.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.27%)</title><rect x="678.8" y="563.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="681.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$368/1185827357.accept (1 samples, 0.09%)</title><rect x="680.9" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="683.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="682.0" y="595.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.54%)</title><rect x="683.1" y="675.0" width="18.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="686.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.54%)</title><rect x="683.1" y="659.0" width="18.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="686.1" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="689.5" y="643.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="692.5" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="689.5" y="627.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="692.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.73%)</title><rect x="690.6" y="643.0" width="8.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="693.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.18%)</title><rect x="690.6" y="627.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="693.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.18%)</title><rect x="690.6" y="611.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="693.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.18%)</title><rect x="690.6" y="595.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.6" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="691.6" y="579.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="694.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.54%)</title><rect x="692.7" y="627.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$370/1122037786.accept (6 samples, 0.54%)</title><rect x="692.7" y="611.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$73 (6 samples, 0.54%)</title><rect x="692.7" y="595.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.54%)</title><rect x="692.7" y="579.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="695.7" y="590.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.54%)</title><rect x="692.7" y="563.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="695.7" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.54%)</title><rect x="692.7" y="547.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="695.7" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.36%)</title><rect x="692.7" y="531.0" width="4.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="695.7" y="542.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.36%)</title><rect x="692.7" y="515.0" width="4.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="695.7" y="526.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.18%)</title><rect x="697.0" y="531.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="700.0" y="542.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.18%)</title><rect x="699.1" y="643.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="702.1" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.09%)</title><rect x="701.3" y="675.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="704.3" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.09%)</title><rect x="701.3" y="659.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="704.3" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.09%)</title><rect x="701.3" y="643.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="704.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.09%)</title><rect x="701.3" y="627.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="704.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.09%)</title><rect x="701.3" y="611.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="704.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.09%)</title><rect x="701.3" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="704.3" y="606.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="702.4" y="691.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="705.4" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.18%)</title><rect x="702.4" y="675.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="705.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (2 samples, 0.18%)</title><rect x="704.5" y="755.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="707.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.18%)</title><rect x="706.6" y="755.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.18%)</title><rect x="706.6" y="739.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="709.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.18%)</title><rect x="706.6" y="723.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.18%)</title><rect x="706.6" y="707.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (199 samples, 18.07%)</title><rect x="708.8" y="755.0" width="213.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="711.8" y="766.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (196 samples, 17.80%)</title><rect x="712.0" y="739.0" width="210.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="715.0" y="750.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (156 samples, 14.17%)</title><rect x="754.9" y="723.0" width="167.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="757.9" y="734.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.09%)</title><rect x="763.4" y="707.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="766.4" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="763.4" y="691.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="766.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (9 samples, 0.82%)</title><rect x="764.5" y="707.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (9 samples, 0.82%)</title><rect x="764.5" y="691.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="767.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (138 samples, 12.53%)</title><rect x="774.2" y="707.0" width="147.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="777.2" y="718.0">java/util/concurren..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (137 samples, 12.44%)</title><rect x="775.2" y="691.0" width="146.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="778.2" y="702.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="780.6" y="675.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="783.6" y="686.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="781.7" y="675.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="784.7" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (129 samples, 11.72%)</title><rect x="782.7" y="675.0" width="138.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="785.7" y="686.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="788.1" y="659.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="791.1" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (25 samples, 2.27%)</title><rect x="789.2" y="659.0" width="26.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="792.2" y="670.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.54%)</title><rect x="801.0" y="643.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="804.0" y="654.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.27%)</title><rect x="802.0" y="627.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="805.0" y="638.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.09%)</title><rect x="804.2" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="807.2" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="805.2" y="627.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="808.2" y="638.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="806.3" y="627.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="809.3" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.09%)</title><rect x="807.4" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="810.4" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (7 samples, 0.64%)</title><rect x="808.5" y="643.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="811.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.09%)</title><rect x="816.0" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="819.0" y="670.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.18%)</title><rect x="817.0" y="659.0" width="2.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="820.0" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 3.18%)</title><rect x="819.2" y="659.0" width="37.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="822.2" y="670.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (46 samples, 4.18%)</title><rect x="856.7" y="659.0" width="49.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="859.7" y="670.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.27%)</title><rect x="906.0" y="659.0" width="3.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="909.0" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.18%)</title><rect x="909.2" y="659.0" width="2.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="912.2" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="911.3" y="659.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="914.3" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.36%)</title><rect x="912.4" y="659.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="915.4" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.18%)</title><rect x="916.7" y="659.0" width="2.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="919.7" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="918.8" y="659.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="921.8" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="919.9" y="659.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="922.9" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="921.0" y="675.0" width="1.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="924.0" y="686.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.09%)</title><rect x="922.1" y="803.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="925.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="923.1" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="923.1" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="923.1" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="926.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="923.1" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="926.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="923.1" y="739.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="926.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="923.1" y="723.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="926.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="923.1" y="707.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="926.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="923.1" y="691.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="923.1" y="675.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.09%)</title><rect x="923.1" y="659.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="926.1" y="670.0"></text>
</g>
<g>
<title>start_thread (248 samples, 22.52%)</title><rect x="924.2" y="803.0" width="265.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="927.2" y="814.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (248 samples, 22.52%)</title><rect x="924.2" y="787.0" width="265.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="927.2" y="798.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (25 samples, 2.27%)</title><rect x="924.2" y="771.0" width="26.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="927.2" y="782.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.09%)</title><rect x="924.2" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="927.2" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="924.2" y="739.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="927.2" y="750.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (5 samples, 0.45%)</title><rect x="925.3" y="755.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.3" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.45%)</title><rect x="925.3" y="739.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.3" y="750.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.18%)</title><rect x="925.3" y="723.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="928.3" y="734.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.27%)</title><rect x="927.4" y="723.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="930.4" y="734.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (19 samples, 1.73%)</title><rect x="930.6" y="755.0" width="20.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="933.6" y="766.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.18%)</title><rect x="930.6" y="739.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.6" y="750.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.09%)</title><rect x="930.6" y="723.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="933.6" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.09%)</title><rect x="931.7" y="723.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="934.7" y="734.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (6 samples, 0.54%)</title><rect x="932.8" y="739.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="935.8" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="932.8" y="723.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="935.8" y="734.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="932.8" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="935.8" y="718.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="932.8" y="691.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="935.8" y="702.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="932.8" y="675.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="935.8" y="686.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.45%)</title><rect x="933.9" y="723.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="936.9" y="734.0"></text>
</g>
<g>
<title>MemoryService::oops_do(OopClosure*) (1 samples, 0.09%)</title><rect x="933.9" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.9" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.36%)</title><rect x="934.9" y="707.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.9" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (11 samples, 1.00%)</title><rect x="939.2" y="739.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.2" y="750.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (11 samples, 1.00%)</title><rect x="939.2" y="723.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.2" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (11 samples, 1.00%)</title><rect x="939.2" y="707.0" width="11.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="942.2" y="718.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (11 samples, 1.00%)</title><rect x="939.2" y="691.0" width="11.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="942.2" y="702.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 1.00%)</title><rect x="939.2" y="675.0" width="11.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="942.2" y="686.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (11 samples, 1.00%)</title><rect x="939.2" y="659.0" width="11.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.2" y="670.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.36%)</title><rect x="946.7" y="643.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="949.7" y="654.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.09%)</title><rect x="947.8" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.8" y="638.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="947.8" y="611.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.8" y="622.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.09%)</title><rect x="948.9" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="951.9" y="638.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.09%)</title><rect x="948.9" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.9" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.09%)</title><rect x="949.9" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.9" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (221 samples, 20.07%)</title><rect x="951.0" y="771.0" width="236.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="954.0" y="782.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (221 samples, 20.07%)</title><rect x="951.0" y="755.0" width="236.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.0" y="766.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (221 samples, 20.07%)</title><rect x="951.0" y="739.0" width="236.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="954.0" y="750.0">CompileBroker::compiler_thread_..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (219 samples, 19.89%)</title><rect x="951.0" y="723.0" width="234.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="954.0" y="734.0">CompileBroker::invoke_compiler_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (219 samples, 19.89%)</title><rect x="951.0" y="707.0" width="234.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="954.0" y="718.0">C2Compiler::compile_method(ciEn..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (219 samples, 19.89%)</title><rect x="951.0" y="691.0" width="234.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="954.0" y="702.0">Compile::Compile(ciEnv*, C2Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 4.54%)</title><rect x="951.0" y="675.0" width="53.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="954.0" y="686.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="951.0" y="659.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="954.0" y="670.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="951.0" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="954.0" y="654.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="951.0" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="954.0" y="638.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.27%)</title><rect x="952.1" y="659.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.1" y="670.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.27%)</title><rect x="952.1" y="643.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="955.1" y="654.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="952.1" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="955.1" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="952.1" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="955.1" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.09%)</title><rect x="953.1" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.1" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="953.1" y="611.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="956.1" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="954.2" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.2" y="638.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.45%)</title><rect x="955.3" y="659.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="958.3" y="670.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="955.3" y="643.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="958.3" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.36%)</title><rect x="956.4" y="643.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="959.4" y="654.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.36%)</title><rect x="956.4" y="627.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="959.4" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.36%)</title><rect x="960.6" y="659.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="963.6" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.09%)</title><rect x="960.6" y="643.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="963.6" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.27%)</title><rect x="961.7" y="643.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="964.7" y="654.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.09%)</title><rect x="961.7" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="964.7" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="962.8" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.8" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.09%)</title><rect x="963.9" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="966.9" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="964.9" y="659.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.9" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 3.27%)</title><rect x="966.0" y="659.0" width="38.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="969.0" y="670.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.18%)</title><rect x="966.0" y="643.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="969.0" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.36%)</title><rect x="968.1" y="643.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.1" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="968.1" y="627.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.1" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.27%)</title><rect x="969.2" y="627.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="972.2" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="971.4" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="974.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.27%)</title><rect x="972.4" y="643.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.4" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="972.4" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="975.4" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.18%)</title><rect x="973.5" y="627.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.5" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.18%)</title><rect x="973.5" y="611.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="976.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.64%)</title><rect x="975.6" y="643.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="978.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.18%)</title><rect x="978.9" y="627.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(Node*, Node*, unsigned int) (2 samples, 0.18%)</title><rect x="978.9" y="611.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="981.9" y="622.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="979.9" y="595.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.9" y="606.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.09%)</title><rect x="979.9" y="579.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.9" y="590.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.09%)</title><rect x="981.0" y="627.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="984.0" y="638.0"></text>
</g>
<g>
<title>loadConI0Node::rule() const (1 samples, 0.09%)</title><rect x="982.1" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="985.1" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.54%)</title><rect x="983.2" y="643.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.2" y="654.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="984.2" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="987.2" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.27%)</title><rect x="985.3" y="627.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="988.3" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="987.4" y="611.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="990.4" y="622.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="988.5" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.27%)</title><rect x="989.6" y="643.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.6" y="654.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="991.7" y="627.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.7" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.27%)</title><rect x="992.8" y="643.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.8" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="993.9" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.09%)</title><rect x="994.9" y="627.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="997.9" y="638.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.09%)</title><rect x="994.9" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="997.9" y="622.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.09%)</title><rect x="994.9" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.9" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.18%)</title><rect x="996.0" y="643.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="999.0" y="654.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="996.0" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.0" y="638.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.09%)</title><rect x="996.0" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="999.0" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::Union(unsigned int, unsigned int) (1 samples, 0.09%)</title><rect x="996.0" y="595.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.0" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="997.1" y="627.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.1" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="997.1" y="611.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.1" y="622.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="997.1" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1000.1" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="998.2" y="643.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1001.2" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="998.2" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1001.2" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="999.2" y="643.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1002.2" y="654.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="999.2" y="627.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1002.2" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="1000.3" y="643.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1003.3" y="654.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="1000.3" y="627.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1003.3" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.27%)</title><rect x="1001.4" y="643.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1004.4" y="654.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.27%)</title><rect x="1001.4" y="627.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1004.4" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1003.5" y="611.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1006.5" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (161 samples, 14.62%)</title><rect x="1004.6" y="675.0" width="172.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1007.6" y="686.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.18%)</title><rect x="1004.6" y="659.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.6" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1005.7" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1008.7" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1005.7" y="627.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1008.7" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1005.7" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1008.7" y="622.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1005.7" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.7" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1005.7" y="579.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.7" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1005.7" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.45%)</title><rect x="1006.7" y="659.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.45%)</title><rect x="1006.7" y="643.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.09%)</title><rect x="1007.8" y="627.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1010.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.09%)</title><rect x="1007.8" y="611.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.8" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.09%)</title><rect x="1007.8" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1010.8" y="606.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="1007.8" y="579.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.8" y="590.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.09%)</title><rect x="1007.8" y="563.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.8" y="574.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.09%)</title><rect x="1007.8" y="547.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.8" y="558.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1007.8" y="531.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.8" y="542.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.09%)</title><rect x="1007.8" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1010.8" y="526.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.09%)</title><rect x="1007.8" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.8" y="510.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.09%)</title><rect x="1007.8" y="483.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1010.8" y="494.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.09%)</title><rect x="1007.8" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1010.8" y="478.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1007.8" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.8" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1007.8" y="435.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1010.8" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1007.8" y="419.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.8" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1007.8" y="403.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.8" y="414.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.09%)</title><rect x="1007.8" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1010.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.27%)</title><rect x="1008.9" y="627.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1011.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.27%)</title><rect x="1008.9" y="611.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.27%)</title><rect x="1008.9" y="595.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1011.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1008.9" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1011.9" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1008.9" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.18%)</title><rect x="1009.9" y="579.0" width="2.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="563.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1012.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="547.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1012.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="531.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="515.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.9" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="499.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.9" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.9" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="467.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.9" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="451.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1012.9" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.9" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="419.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1012.9" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.9" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="387.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1012.9" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.9" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="355.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.9" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="339.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1012.9" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="323.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1012.9" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1009.9" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.9" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1011.0" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1011.0" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1014.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1011.0" y="531.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1011.0" y="515.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1011.0" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.0" y="510.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1011.0" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.0" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.09%)</title><rect x="1012.1" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.1" y="670.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.09%)</title><rect x="1012.1" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1015.1" y="654.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.09%)</title><rect x="1012.1" y="627.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (140 samples, 12.72%)</title><rect x="1013.2" y="659.0" width="150.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.2" y="670.0">PhaseIdealLoop::bui..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1013.2" y="643.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.2" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1013.2" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1016.2" y="638.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1013.2" y="611.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1016.2" y="622.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.09%)</title><rect x="1013.2" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1016.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.09%)</title><rect x="1013.2" y="579.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1016.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1013.2" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1016.2" y="574.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1013.2" y="547.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1016.2" y="558.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.09%)</title><rect x="1014.2" y="643.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.2" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.27%)</title><rect x="1015.3" y="643.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1018.3" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.27%)</title><rect x="1018.5" y="643.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1021.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1019.6" y="627.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.09%)</title><rect x="1019.6" y="611.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1022.6" y="622.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.09%)</title><rect x="1020.7" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (127 samples, 11.53%)</title><rect x="1021.7" y="643.0" width="136.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1024.7" y="654.0">PhaseIdealLoop::b..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (120 samples, 10.90%)</title><rect x="1029.2" y="627.0" width="128.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1032.2" y="638.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.64%)</title><rect x="1031.4" y="611.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.4" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (111 samples, 10.08%)</title><rect x="1038.9" y="611.0" width="118.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1041.9" y="622.0">PhaseIdealLoop..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.09%)</title><rect x="1127.8" y="595.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1127.8" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (26 samples, 2.36%)</title><rect x="1128.9" y="595.0" width="27.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.9" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1156.8" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="1157.8" y="643.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.8" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1158.9" y="643.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1158.9" y="627.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.9" y="638.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1158.9" y="611.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.9" y="622.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.09%)</title><rect x="1158.9" y="595.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="606.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1160.0" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.0" y="622.0"></text>
</g>
<g>
<title>LoopNode::Opcode() const (1 samples, 0.09%)</title><rect x="1160.0" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.0" y="606.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (2 samples, 0.18%)</title><rect x="1161.1" y="643.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (9 samples, 0.82%)</title><rect x="1163.2" y="659.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 0.82%)</title><rect x="1163.2" y="643.0" width="9.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.2" y="654.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1164.3" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="638.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1164.3" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.3" y="622.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1164.3" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.3" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1164.3" y="579.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.27%)</title><rect x="1165.3" y="627.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.3" y="638.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.18%)</title><rect x="1168.6" y="627.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.6" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1169.6" y="611.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.6" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.6" y="595.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.6" y="606.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1170.7" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="638.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.8" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1171.8" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1172.9" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1172.9" y="643.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.9" y="654.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.09%)</title><rect x="1172.9" y="627.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1172.9" y="611.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.18%)</title><rect x="1173.9" y="659.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1173.9" y="643.0" width="2.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1173.9" y="627.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1175.0" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.0" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1175.0" y="595.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="606.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1175.0" y="579.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="590.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="1176.1" y="659.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1179.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.54%)</title><rect x="1177.1" y="675.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.54%)</title><rect x="1177.1" y="659.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.54%)</title><rect x="1177.1" y="643.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.54%)</title><rect x="1177.1" y="627.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.54%)</title><rect x="1177.1" y="611.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.54%)</title><rect x="1177.1" y="595.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.45%)</title><rect x="1177.1" y="579.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.45%)</title><rect x="1177.1" y="563.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.45%)</title><rect x="1177.1" y="547.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.45%)</title><rect x="1177.1" y="531.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.45%)</title><rect x="1177.1" y="515.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.45%)</title><rect x="1177.1" y="499.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.1" y="483.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="494.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.1" y="467.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="478.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1177.1" y="451.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="462.0"></text>
</g>
<g>
<title>InlineTree::should_inline(ciMethod*, ciMethod*, int, ciCallProfile&amp;, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1177.1" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1178.2" y="483.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1178.2" y="467.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1178.2" y="451.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1178.2" y="435.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1178.2" y="419.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1178.2" y="403.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1178.2" y="387.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1178.2" y="371.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1178.2" y="355.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1178.2" y="339.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1178.2" y="323.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.27%)</title><rect x="1178.2" y="307.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.27%)</title><rect x="1178.2" y="291.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.27%)</title><rect x="1178.2" y="275.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.27%)</title><rect x="1178.2" y="259.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.27%)</title><rect x="1178.2" y="243.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.27%)</title><rect x="1178.2" y="227.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1178.2" y="211.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1178.2" y="195.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1178.2" y="179.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.2" y="163.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.2" y="147.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.2" y="131.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1178.2" y="115.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1178.2" y="99.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1178.2" y="83.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1178.2" y="67.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.2" y="78.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.2" y="51.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="62.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.2" y="35.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.09%)</title><rect x="1179.3" y="163.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.4" y="211.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.4" y="195.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1180.4" y="179.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.09%)</title><rect x="1180.4" y="163.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.4" y="147.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.4" y="131.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.4" y="115.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.4" y="126.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.09%)</title><rect x="1180.4" y="99.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="110.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1180.4" y="83.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="94.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1180.4" y="67.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="483.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="467.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="451.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.4" y="435.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.4" y="419.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.4" y="403.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.4" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.4" y="371.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.4" y="355.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1181.4" y="339.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1181.4" y="323.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="1181.4" y="307.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1181.4" y="291.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.5" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.5" y="563.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.5" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.5" y="531.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.5" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.5" y="499.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.5" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.5" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.5" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.5" y="435.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.5" y="419.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.5" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.5" y="387.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.5" y="371.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.5" y="355.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.5" y="339.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.5" y="323.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.5" y="307.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.5" y="291.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.5" y="275.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) (1 samples, 0.09%)</title><rect x="1182.5" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="270.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="1182.5" y="243.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="254.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1182.5" y="227.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="238.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1182.5" y="211.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="222.0"></text>
</g>
<g>
<title>ciKlass::is_subtype_of(ciKlass*) (1 samples, 0.09%)</title><rect x="1182.5" y="195.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.5" y="206.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.18%)</title><rect x="1183.6" y="675.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="686.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.18%)</title><rect x="1183.6" y="659.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="670.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.18%)</title><rect x="1185.7" y="723.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="734.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (2 samples, 0.18%)</title><rect x="1185.7" y="707.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (2 samples, 0.18%)</title><rect x="1185.7" y="691.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.09%)</title><rect x="1185.7" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="686.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.09%)</title><rect x="1185.7" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.09%)</title><rect x="1186.8" y="675.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.8" y="686.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.09%)</title><rect x="1186.8" y="659.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.8" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.18%)</title><rect x="1187.9" y="771.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="782.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.18%)</title><rect x="1187.9" y="755.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.9" y="766.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1187.9" y="739.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="750.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.09%)</title><rect x="1187.9" y="723.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="734.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.09%)</title><rect x="1187.9" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.9" y="718.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="691.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.09%)</title><rect x="1187.9" y="675.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.9" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.9" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.09%)</title><rect x="1187.9" y="643.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.9" y="654.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.09%)</title><rect x="1188.9" y="739.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.9" y="750.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.09%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.09%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.09%)</title><rect x="1188.9" y="691.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.09%)</title><rect x="1188.9" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.09%)</title><rect x="1188.9" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.09%)</title><rect x="1188.9" y="643.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.9" y="654.0"></text>
</g>
</g>
</svg>
