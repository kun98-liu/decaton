<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="789"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="789"> </text>
<g id="frames">
<g>
<title>all (152 samples, 100.00%)</title><rect x="10.0" y="755.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="766.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 10.53%)</title><rect x="10.0" y="739.0" width="124.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="750.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 10.53%)</title><rect x="10.0" y="723.0" width="124.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.66%)</title><rect x="10.0" y="707.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.66%)</title><rect x="10.0" y="691.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.66%)</title><rect x="10.0" y="675.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.66%)</title><rect x="10.0" y="659.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.66%)</title><rect x="10.0" y="643.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.66%)</title><rect x="10.0" y="627.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.handlePendingDisconnects (1 samples, 0.66%)</title><rect x="10.0" y="611.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.66%)</title><rect x="10.0" y="595.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 9.87%)</title><rect x="17.8" y="707.0" width="116.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.8" y="718.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.66%)</title><rect x="17.8" y="691.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.66%)</title><rect x="17.8" y="675.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.32%)</title><rect x="25.5" y="691.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/1720771950.accept (1 samples, 0.66%)</title><rect x="25.5" y="675.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (1 samples, 0.66%)</title><rect x="25.5" y="659.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.66%)</title><rect x="25.5" y="643.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.66%)</title><rect x="25.5" y="627.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.66%)</title><rect x="33.3" y="675.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="36.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.66%)</title><rect x="33.3" y="659.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.66%)</title><rect x="33.3" y="643.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.66%)</title><rect x="33.3" y="627.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 7.89%)</title><rect x="41.1" y="691.0" width="93.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.1" y="702.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 7.89%)</title><rect x="41.1" y="675.0" width="93.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.1" y="686.0">org/apache/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 7.24%)</title><rect x="41.1" y="659.0" width="85.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.1" y="670.0">org/apache..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.97%)</title><rect x="41.1" y="643.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.1" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.97%)</title><rect x="41.1" y="627.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.1" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.66%)</title><rect x="41.1" y="611.0" width="7.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.66%)</title><rect x="41.1" y="595.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.1" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.66%)</title><rect x="41.1" y="579.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$126/262179392.get (1 samples, 0.66%)</title><rect x="41.1" y="563.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.32%)</title><rect x="48.8" y="611.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.32%)</title><rect x="48.8" y="595.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.66%)</title><rect x="48.8" y="579.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.66%)</title><rect x="48.8" y="563.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.66%)</title><rect x="48.8" y="547.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.66%)</title><rect x="48.8" y="531.0" width="7.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.66%)</title><rect x="48.8" y="515.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.66%)</title><rect x="48.8" y="499.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.8" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.66%)</title><rect x="48.8" y="483.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.8" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.66%)</title><rect x="48.8" y="467.0" width="7.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.8" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.66%)</title><rect x="48.8" y="451.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.66%)</title><rect x="48.8" y="435.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.66%)</title><rect x="48.8" y="419.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.8" y="430.0"></text>
</g>
<g>
<title>__read (1 samples, 0.66%)</title><rect x="48.8" y="403.0" width="7.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="51.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.66%)</title><rect x="56.6" y="579.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.66%)</title><rect x="56.6" y="563.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.66%)</title><rect x="56.6" y="547.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.66%)</title><rect x="56.6" y="531.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.66%)</title><rect x="56.6" y="515.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.6" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.66%)</title><rect x="56.6" y="499.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="59.6" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.66%)</title><rect x="56.6" y="483.0" width="7.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="59.6" y="494.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.66%)</title><rect x="56.6" y="467.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="59.6" y="478.0"></text>
</g>
<g>
<title>CompiledIC::set_to_monomorphic(CompiledICInfo&amp;) (1 samples, 0.66%)</title><rect x="56.6" y="451.0" width="7.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="59.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (7 samples, 4.61%)</title><rect x="64.3" y="643.0" width="54.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.3" y="654.0">org/a..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.66%)</title><rect x="64.3" y="627.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.3" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.iterator (1 samples, 0.66%)</title><rect x="64.3" y="611.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="67.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 3.95%)</title><rect x="72.1" y="627.0" width="46.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.1" y="638.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (5 samples, 3.29%)</title><rect x="72.1" y="611.0" width="38.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.1" y="622.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 3.29%)</title><rect x="72.1" y="595.0" width="38.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.1" y="606.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.97%)</title><rect x="72.1" y="579.0" width="23.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.1" y="590.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.66%)</title><rect x="87.6" y="563.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.66%)</title><rect x="87.6" y="547.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="90.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.66%)</title><rect x="87.6" y="531.0" width="7.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.66%)</title><rect x="87.6" y="515.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.66%)</title><rect x="87.6" y="499.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="90.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.66%)</title><rect x="87.6" y="483.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.66%)</title><rect x="87.6" y="467.0" width="7.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (2 samples, 1.32%)</title><rect x="95.4" y="579.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.32%)</title><rect x="95.4" y="563.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.32%)</title><rect x="95.4" y="547.0" width="15.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.4" y="558.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.32%)</title><rect x="95.4" y="531.0" width="15.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.66%)</title><rect x="110.9" y="611.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.66%)</title><rect x="118.7" y="643.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="121.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.66%)</title><rect x="118.7" y="627.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.66%)</title><rect x="118.7" y="611.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="121.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.66%)</title><rect x="118.7" y="595.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="121.7" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.66%)</title><rect x="118.7" y="579.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.66%)</title><rect x="126.4" y="659.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="129.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.66%)</title><rect x="126.4" y="643.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="129.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.66%)</title><rect x="126.4" y="627.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAutoAssignedPartitions (1 samples, 0.66%)</title><rect x="126.4" y="611.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="129.4" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.66%)</title><rect x="126.4" y="595.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="129.4" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.66%)</title><rect x="126.4" y="579.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="129.4" y="590.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.66%)</title><rect x="126.4" y="563.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="129.4" y="574.0"></text>
</g>
<g>
<title>java/lang/Thread.run (92 samples, 60.53%)</title><rect x="134.2" y="739.0" width="714.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="137.2" y="750.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (92 samples, 60.53%)</title><rect x="134.2" y="723.0" width="714.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="137.2" y="734.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (92 samples, 60.53%)</title><rect x="134.2" y="707.0" width="714.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.2" y="718.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/455371101.run (86 samples, 56.58%)</title><rect x="173.0" y="691.0" width="667.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.0" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/455371101.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (86 samples, 56.58%)</title><rect x="173.0" y="675.0" width="667.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.0" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (86 samples, 56.58%)</title><rect x="173.0" y="659.0" width="667.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.0" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (86 samples, 56.58%)</title><rect x="173.0" y="643.0" width="667.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.0" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.66%)</title><rect x="173.0" y="627.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.0" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.66%)</title><rect x="173.0" y="611.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.66%)</title><rect x="173.0" y="595.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.66%)</title><rect x="173.0" y="579.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (6 samples, 3.95%)</title><rect x="180.8" y="627.0" width="46.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.8" y="638.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.63%)</title><rect x="196.3" y="611.0" width="31.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="199.3" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.63%)</title><rect x="196.3" y="595.0" width="31.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.3" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.63%)</title><rect x="196.3" y="579.0" width="31.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="199.3" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.32%)</title><rect x="196.3" y="563.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.32%)</title><rect x="196.3" y="547.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.32%)</title><rect x="211.8" y="563.0" width="15.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="214.8" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$369/463700233.accept (2 samples, 1.32%)</title><rect x="211.8" y="547.0" width="15.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (2 samples, 1.32%)</title><rect x="211.8" y="531.0" width="15.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.32%)</title><rect x="211.8" y="515.0" width="15.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="214.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.32%)</title><rect x="211.8" y="499.0" width="15.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.32%)</title><rect x="211.8" y="483.0" width="15.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="214.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.32%)</title><rect x="211.8" y="467.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (10 samples, 6.58%)</title><rect x="227.4" y="627.0" width="77.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.4" y="638.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (10 samples, 6.58%)</title><rect x="227.4" y="611.0" width="77.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="230.4" y="622.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (10 samples, 6.58%)</title><rect x="227.4" y="595.0" width="77.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.4" y="606.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.58%)</title><rect x="227.4" y="579.0" width="77.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="230.4" y="590.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 6.58%)</title><rect x="227.4" y="563.0" width="77.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.4" y="574.0">com/linec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 6.58%)</title><rect x="227.4" y="547.0" width="77.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.4" y="558.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.95%)</title><rect x="227.4" y="531.0" width="46.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.4" y="542.0">com/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.32%)</title><rect x="235.1" y="515.0" width="15.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="238.1" y="526.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.32%)</title><rect x="235.1" y="499.0" width="15.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="238.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.97%)</title><rect x="250.7" y="515.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.7" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.97%)</title><rect x="250.7" y="499.0" width="23.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.7" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.32%)</title><rect x="258.4" y="483.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="261.4" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 1.32%)</title><rect x="258.4" y="467.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="261.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.66%)</title><rect x="258.4" y="451.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.4" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.66%)</title><rect x="258.4" y="435.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="261.4" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.66%)</title><rect x="258.4" y="419.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="261.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.66%)</title><rect x="266.2" y="451.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.97%)</title><rect x="273.9" y="531.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.9" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.97%)</title><rect x="273.9" y="515.0" width="23.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.9" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.97%)</title><rect x="273.9" y="499.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.9" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.66%)</title><rect x="273.9" y="483.0" width="7.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.32%)</title><rect x="281.7" y="483.0" width="15.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.32%)</title><rect x="281.7" y="467.0" width="15.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.32%)</title><rect x="281.7" y="451.0" width="15.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.66%)</title><rect x="281.7" y="435.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.66%)</title><rect x="289.5" y="435.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.5" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.66%)</title><rect x="289.5" y="419.0" width="7.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.66%)</title><rect x="289.5" y="403.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.66%)</title><rect x="297.2" y="531.0" width="7.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.66%)</title><rect x="297.2" y="515.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.66%)</title><rect x="297.2" y="499.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.66%)</title><rect x="297.2" y="483.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="300.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.66%)</title><rect x="297.2" y="467.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (68 samples, 44.74%)</title><rect x="305.0" y="627.0" width="527.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="308.0" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.32%)</title><rect x="336.1" y="611.0" width="15.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="339.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.32%)</title><rect x="336.1" y="595.0" width="15.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="339.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (4 samples, 2.63%)</title><rect x="351.6" y="611.0" width="31.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.6" y="622.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (2 samples, 1.32%)</title><rect x="367.1" y="595.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="370.1" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (2 samples, 1.32%)</title><rect x="367.1" y="579.0" width="15.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="370.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.32%)</title><rect x="367.1" y="563.0" width="15.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.66%)</title><rect x="374.9" y="547.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.66%)</title><rect x="374.9" y="531.0" width="7.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (16 samples, 10.53%)</title><rect x="382.6" y="611.0" width="124.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.6" y="622.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (16 samples, 10.53%)</title><rect x="382.6" y="595.0" width="124.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.6" y="606.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 3.29%)</title><rect x="390.4" y="579.0" width="38.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.4" y="590.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 2.63%)</title><rect x="390.4" y="563.0" width="31.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.4" y="574.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.66%)</title><rect x="413.7" y="547.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.7" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.66%)</title><rect x="413.7" y="531.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.7" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.66%)</title><rect x="413.7" y="515.0" width="7.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.7" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.66%)</title><rect x="413.7" y="499.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="416.7" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.66%)</title><rect x="413.7" y="483.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="416.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.66%)</title><rect x="413.7" y="467.0" width="7.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="416.7" y="478.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.66%)</title><rect x="413.7" y="451.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="416.7" y="462.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.66%)</title><rect x="413.7" y="435.0" width="7.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="416.7" y="446.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.66%)</title><rect x="413.7" y="419.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="416.7" y="430.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.66%)</title><rect x="413.7" y="403.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="416.7" y="414.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.66%)</title><rect x="421.4" y="563.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.66%)</title><rect x="421.4" y="547.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="424.4" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.66%)</title><rect x="421.4" y="531.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="424.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.66%)</title><rect x="421.4" y="515.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="424.4" y="526.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.66%)</title><rect x="421.4" y="499.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="424.4" y="510.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.66%)</title><rect x="429.2" y="579.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="432.2" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.66%)</title><rect x="429.2" y="563.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="432.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.66%)</title><rect x="429.2" y="547.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.2" y="558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.66%)</title><rect x="437.0" y="579.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="440.0" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 5.26%)</title><rect x="444.7" y="579.0" width="62.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.7" y="590.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 5.26%)</title><rect x="444.7" y="563.0" width="62.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="447.7" y="574.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.66%)</title><rect x="444.7" y="547.0" width="7.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="447.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.66%)</title><rect x="444.7" y="531.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="447.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.66%)</title><rect x="444.7" y="515.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.66%)</title><rect x="444.7" y="499.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="447.7" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 4.61%)</title><rect x="452.5" y="547.0" width="54.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="455.5" y="558.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 4.61%)</title><rect x="452.5" y="531.0" width="54.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.5" y="542.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.63%)</title><rect x="475.8" y="515.0" width="31.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.8" y="526.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 1.32%)</title><rect x="483.6" y="499.0" width="15.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.66%)</title><rect x="499.1" y="499.0" width="7.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (41 samples, 26.97%)</title><rect x="506.8" y="611.0" width="318.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="509.8" y="622.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (41 samples, 26.97%)</title><rect x="506.8" y="595.0" width="318.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.8" y="606.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1014953138.process (34 samples, 22.37%)</title><rect x="522.4" y="579.0" width="263.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="525.4" y="590.0">com/linecorp/decaton/benchmark/Deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (33 samples, 21.71%)</title><rect x="530.1" y="563.0" width="256.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.1" y="574.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (32 samples, 21.05%)</title><rect x="530.1" y="547.0" width="248.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="533.1" y="558.0">com/linecorp/decaton/benchmark/Re..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.97%)</title><rect x="537.9" y="531.0" width="23.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="540.9" y="542.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 1.32%)</title><rect x="545.7" y="515.0" width="15.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="548.7" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.32%)</title><rect x="545.7" y="499.0" width="15.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.7" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.66%)</title><rect x="553.4" y="483.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (27 samples, 17.76%)</title><rect x="561.2" y="531.0" width="209.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="564.2" y="542.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (3 samples, 1.97%)</title><rect x="561.2" y="515.0" width="23.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="564.2" y="526.0">c..</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.97%)</title><rect x="561.2" y="499.0" width="23.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="564.2" y="510.0">o..</text>
</g>
<g>
<title>[vdso] (3 samples, 1.97%)</title><rect x="561.2" y="483.0" width="23.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="564.2" y="494.0">[..</text>
</g>
<g>
<title>java/lang/Thread.sleep (24 samples, 15.79%)</title><rect x="584.5" y="515.0" width="186.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="587.5" y="526.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (23 samples, 15.13%)</title><rect x="584.5" y="499.0" width="178.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="587.5" y="510.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.66%)</title><rect x="600.0" y="483.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="603.0" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.32%)</title><rect x="607.8" y="483.0" width="15.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="610.8" y="494.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (18 samples, 11.84%)</title><rect x="623.3" y="483.0" width="139.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="626.3" y="494.0">os::sleep(Thread*..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.66%)</title><rect x="631.1" y="467.0" width="7.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.1" y="478.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.66%)</title><rect x="631.1" y="451.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="634.1" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.32%)</title><rect x="638.8" y="467.0" width="15.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="641.8" y="478.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.32%)</title><rect x="638.8" y="451.0" width="15.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="641.8" y="462.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.63%)</title><rect x="654.3" y="467.0" width="31.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="657.3" y="478.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 5.26%)</title><rect x="685.4" y="467.0" width="62.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="688.4" y="478.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.66%)</title><rect x="747.5" y="467.0" width="7.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="750.5" y="478.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.66%)</title><rect x="755.3" y="467.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="758.3" y="478.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.66%)</title><rect x="763.0" y="499.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.0" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.66%)</title><rect x="770.8" y="531.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="773.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.66%)</title><rect x="778.6" y="547.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.66%)</title><rect x="786.3" y="579.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.66%)</title><rect x="786.3" y="563.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="789.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.66%)</title><rect x="786.3" y="547.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.66%)</title><rect x="786.3" y="531.0" width="7.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.66%)</title><rect x="786.3" y="515.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.66%)</title><rect x="786.3" y="499.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.3" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.66%)</title><rect x="794.1" y="579.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="797.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.66%)</title><rect x="794.1" y="563.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.97%)</title><rect x="801.8" y="579.0" width="23.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="804.8" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.32%)</title><rect x="809.6" y="563.0" width="15.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.32%)</title><rect x="809.6" y="547.0" width="15.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.32%)</title><rect x="809.6" y="531.0" width="15.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="812.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 1.32%)</title><rect x="809.6" y="515.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="812.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 1.32%)</title><rect x="809.6" y="499.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.6" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.66%)</title><rect x="817.4" y="483.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="820.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.66%)</title><rect x="825.1" y="611.0" width="7.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="828.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.66%)</title><rect x="825.1" y="595.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.66%)</title><rect x="825.1" y="579.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.66%)</title><rect x="825.1" y="563.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="828.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$368/291236473.accept (1 samples, 0.66%)</title><rect x="825.1" y="547.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="828.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$73 (1 samples, 0.66%)</title><rect x="825.1" y="531.0" width="7.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="828.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.66%)</title><rect x="825.1" y="515.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="828.1" y="526.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.66%)</title><rect x="825.1" y="499.0" width="7.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="828.1" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.66%)</title><rect x="825.1" y="483.0" width="7.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="828.1" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.66%)</title><rect x="825.1" y="467.0" width="7.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="828.1" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.66%)</title><rect x="825.1" y="451.0" width="7.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="828.1" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.66%)</title><rect x="832.9" y="627.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="835.9" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.66%)</title><rect x="832.9" y="611.0" width="7.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="835.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.66%)</title><rect x="840.7" y="691.0" width="7.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.66%)</title><rect x="840.7" y="675.0" width="7.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.66%)</title><rect x="840.7" y="659.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.66%)</title><rect x="840.7" y="643.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.66%)</title><rect x="840.7" y="627.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="843.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.66%)</title><rect x="840.7" y="611.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="843.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.66%)</title><rect x="848.4" y="739.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.66%)</title><rect x="848.4" y="723.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.66%)</title><rect x="848.4" y="707.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.66%)</title><rect x="848.4" y="691.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="851.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.66%)</title><rect x="848.4" y="675.0" width="7.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="851.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.66%)</title><rect x="848.4" y="659.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.66%)</title><rect x="848.4" y="643.0" width="7.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.66%)</title><rect x="848.4" y="627.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.66%)</title><rect x="848.4" y="611.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="851.4" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.66%)</title><rect x="848.4" y="595.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.66%)</title><rect x="848.4" y="579.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.66%)</title><rect x="848.4" y="563.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.66%)</title><rect x="848.4" y="547.0" width="7.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.4" y="558.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.66%)</title><rect x="848.4" y="531.0" width="7.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="851.4" y="542.0"></text>
</g>
<g>
<title>start_thread (43 samples, 28.29%)</title><rect x="856.2" y="739.0" width="333.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="859.2" y="750.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (43 samples, 28.29%)</title><rect x="856.2" y="723.0" width="333.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="859.2" y="734.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 7.89%)</title><rect x="856.2" y="707.0" width="93.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="859.2" y="718.0">GangWorker:..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (12 samples, 7.89%)</title><rect x="856.2" y="691.0" width="93.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.2" y="702.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 7.89%)</title><rect x="856.2" y="675.0" width="93.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="859.2" y="686.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 6.58%)</title><rect x="856.2" y="659.0" width="77.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="859.2" y="670.0">G1ParScan..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 2.63%)</title><rect x="895.0" y="643.0" width="31.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="898.0" y="654.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.66%)</title><rect x="918.3" y="627.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.3" y="638.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.66%)</title><rect x="918.3" y="611.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="921.3" y="622.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.66%)</title><rect x="926.1" y="643.0" width="7.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="929.1" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (2 samples, 1.32%)</title><rect x="933.8" y="659.0" width="15.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.8" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (31 samples, 20.39%)</title><rect x="949.3" y="707.0" width="240.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="952.3" y="718.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 20.39%)</title><rect x="949.3" y="691.0" width="240.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.3" y="702.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 20.39%)</title><rect x="949.3" y="675.0" width="240.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="952.3" y="686.0">CompileBroker::compiler_thread_l..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (30 samples, 19.74%)</title><rect x="949.3" y="659.0" width="232.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.3" y="670.0">CompileBroker::invoke_compiler_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (29 samples, 19.08%)</title><rect x="949.3" y="643.0" width="225.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.3" y="654.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (29 samples, 19.08%)</title><rect x="949.3" y="627.0" width="225.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.3" y="638.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 11.84%)</title><rect x="949.3" y="611.0" width="139.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="952.3" y="622.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.66%)</title><rect x="949.3" y="595.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="952.3" y="606.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.66%)</title><rect x="949.3" y="579.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="952.3" y="590.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.66%)</title><rect x="957.1" y="595.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="960.1" y="606.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.66%)</title><rect x="957.1" y="579.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="960.1" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.66%)</title><rect x="964.9" y="595.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.9" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.66%)</title><rect x="964.9" y="579.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.9" y="590.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.66%)</title><rect x="964.9" y="563.0" width="7.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.9" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.66%)</title><rect x="972.6" y="595.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="975.6" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.66%)</title><rect x="972.6" y="579.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="975.6" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.66%)</title><rect x="972.6" y="563.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="975.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 9.21%)</title><rect x="980.4" y="595.0" width="108.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.4" y="606.0">PhaseChaitin:..</text>
</g>
<g>
<title>MachHaltNode::jvms() const (1 samples, 0.66%)</title><rect x="980.4" y="579.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.66%)</title><rect x="988.2" y="579.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.97%)</title><rect x="995.9" y="579.0" width="23.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="998.9" y="590.0">P..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.32%)</title><rect x="1003.7" y="563.0" width="15.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.7" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.66%)</title><rect x="1011.4" y="547.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.4" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.32%)</title><rect x="1019.2" y="579.0" width="15.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.2" y="590.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.66%)</title><rect x="1034.7" y="579.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.7" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.66%)</title><rect x="1034.7" y="563.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1037.7" y="574.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 3.29%)</title><rect x="1042.5" y="579.0" width="38.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.5" y="590.0">Pha..</text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.66%)</title><rect x="1073.6" y="563.0" width="7.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1076.6" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.66%)</title><rect x="1081.3" y="579.0" width="7.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1084.3" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 5.26%)</title><rect x="1089.1" y="611.0" width="62.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1092.1" y="622.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (6 samples, 3.95%)</title><rect x="1089.1" y="595.0" width="46.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.1" y="606.0">Phas..</text>
</g>
<g>
<title>HaltNode::is_CFG() const (1 samples, 0.66%)</title><rect x="1089.1" y="579.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1092.1" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.66%)</title><rect x="1096.8" y="579.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1099.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.66%)</title><rect x="1096.8" y="563.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason) (1 samples, 0.66%)</title><rect x="1096.8" y="547.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1099.8" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.66%)</title><rect x="1096.8" y="531.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1099.8" y="542.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.66%)</title><rect x="1096.8" y="515.0" width="7.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1099.8" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.32%)</title><rect x="1104.6" y="579.0" width="15.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.6" y="590.0"></text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.66%)</title><rect x="1112.4" y="563.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.66%)</title><rect x="1120.1" y="579.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.66%)</title><rect x="1127.9" y="579.0" width="7.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.9" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.66%)</title><rect x="1127.9" y="563.0" width="7.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.9" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.66%)</title><rect x="1127.9" y="547.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.9" y="558.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.66%)</title><rect x="1127.9" y="531.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.9" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.66%)</title><rect x="1135.7" y="595.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.7" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.66%)</title><rect x="1135.7" y="579.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.66%)</title><rect x="1143.4" y="595.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.4" y="606.0"></text>
</g>
<g>
<title>VectorSet::operator&gt;&gt;=(unsigned int) (1 samples, 0.66%)</title><rect x="1143.4" y="579.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.4" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.97%)</title><rect x="1151.2" y="611.0" width="23.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="622.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.97%)</title><rect x="1151.2" y="595.0" width="23.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.97%)</title><rect x="1151.2" y="579.0" width="23.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.97%)</title><rect x="1151.2" y="563.0" width="23.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.2" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.97%)</title><rect x="1151.2" y="547.0" width="23.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.2" y="558.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.97%)</title><rect x="1151.2" y="531.0" width="23.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.2" y="542.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.97%)</title><rect x="1151.2" y="515.0" width="23.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.2" y="526.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.97%)</title><rect x="1151.2" y="499.0" width="23.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.97%)</title><rect x="1151.2" y="483.0" width="23.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.2" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.97%)</title><rect x="1151.2" y="467.0" width="23.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.2" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.97%)</title><rect x="1151.2" y="451.0" width="23.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.2" y="462.0">P..</text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.66%)</title><rect x="1151.2" y="435.0" width="7.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.32%)</title><rect x="1158.9" y="435.0" width="15.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1158.9" y="419.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1158.9" y="403.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1158.9" y="387.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1158.9" y="371.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1158.9" y="355.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1158.9" y="339.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1158.9" y="323.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1158.9" y="307.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1161.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1158.9" y="291.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1158.9" y="275.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1158.9" y="259.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1158.9" y="243.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.9" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.66%)</title><rect x="1158.9" y="227.0" width="7.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.9" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.66%)</title><rect x="1158.9" y="211.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1161.9" y="222.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.66%)</title><rect x="1158.9" y="195.0" width="7.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1161.9" y="206.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.66%)</title><rect x="1158.9" y="179.0" width="7.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.9" y="190.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.66%)</title><rect x="1158.9" y="163.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.9" y="174.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.66%)</title><rect x="1158.9" y="147.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.9" y="158.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.66%)</title><rect x="1158.9" y="131.0" width="7.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.9" y="142.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1166.7" y="419.0" width="7.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1166.7" y="403.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1166.7" y="387.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1166.7" y="371.0" width="7.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1166.7" y="355.0" width="7.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1166.7" y="339.0" width="7.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1166.7" y="323.0" width="7.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1166.7" y="307.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1166.7" y="291.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1166.7" y="275.0" width="7.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1166.7" y="259.0" width="7.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1166.7" y="243.0" width="7.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.66%)</title><rect x="1166.7" y="227.0" width="7.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.7" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.66%)</title><rect x="1166.7" y="211.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.7" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.66%)</title><rect x="1166.7" y="195.0" width="7.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.66%)</title><rect x="1166.7" y="179.0" width="7.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.66%)</title><rect x="1166.7" y="163.0" width="7.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.66%)</title><rect x="1166.7" y="147.0" width="7.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.66%)</title><rect x="1166.7" y="131.0" width="7.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.7" y="142.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.66%)</title><rect x="1166.7" y="115.0" width="7.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.66%)</title><rect x="1166.7" y="99.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.66%)</title><rect x="1166.7" y="83.0" width="7.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.7" y="94.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.66%)</title><rect x="1166.7" y="67.0" width="7.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.7" y="78.0"></text>
</g>
<g>
<title>GraphKit::compute_stack_effects(int&amp;, int&amp;) (1 samples, 0.66%)</title><rect x="1166.7" y="51.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.7" y="62.0"></text>
</g>
<g>
<title>ciMethod::get_field_at_bci(int, bool&amp;) (1 samples, 0.66%)</title><rect x="1166.7" y="35.0" width="7.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.7" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.66%)</title><rect x="1174.5" y="643.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.66%)</title><rect x="1174.5" y="627.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.66%)</title><rect x="1174.5" y="611.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.66%)</title><rect x="1174.5" y="595.0" width="7.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.5" y="606.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.66%)</title><rect x="1174.5" y="579.0" width="7.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.5" y="590.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.66%)</title><rect x="1174.5" y="563.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="574.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.66%)</title><rect x="1174.5" y="547.0" width="7.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.66%)</title><rect x="1174.5" y="531.0" width="7.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.66%)</title><rect x="1174.5" y="515.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.66%)</title><rect x="1174.5" y="499.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.5" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.66%)</title><rect x="1174.5" y="483.0" width="7.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.5" y="494.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.66%)</title><rect x="1174.5" y="467.0" width="7.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="478.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.66%)</title><rect x="1182.2" y="659.0" width="7.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.2" y="670.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.66%)</title><rect x="1182.2" y="643.0" width="7.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.2" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.66%)</title><rect x="1182.2" y="627.0" width="7.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.2" y="638.0"></text>
</g>
<g>
<title>CodeCache::next_nmethod(CodeBlob*) (1 samples, 0.66%)</title><rect x="1182.2" y="611.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="622.0"></text>
</g>
<g>
<title>CodeHeap::block_start(void*) const (1 samples, 0.66%)</title><rect x="1182.2" y="595.0" width="7.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.2" y="606.0"></text>
</g>
</g>
</svg>
