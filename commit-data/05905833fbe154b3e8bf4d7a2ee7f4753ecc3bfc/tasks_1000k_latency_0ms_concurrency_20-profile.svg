<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (1,155 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>__GI___mprotect (1 samples, 0.09%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (187 samples, 16.19%)</title><rect x="11.0" y="1315.0" width="191.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1326.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (187 samples, 16.19%)</title><rect x="11.0" y="1299.0" width="191.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1310.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (187 samples, 16.19%)</title><rect x="11.0" y="1283.0" width="191.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.0" y="1294.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="11.0" y="1267.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="11.0" y="1251.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="11.0" y="1235.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="11.0" y="1219.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.0" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="11.0" y="1203.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.0" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="11.0" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.0" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="11.0" y="1171.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.0" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="11.0" y="1155.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.09%)</title><rect x="11.0" y="1139.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.26%)</title><rect x="12.0" y="1267.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.26%)</title><rect x="12.0" y="1251.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.26%)</title><rect x="12.0" y="1235.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$333/47972235.accept (3 samples, 0.26%)</title><rect x="12.0" y="1219.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.26%)</title><rect x="12.0" y="1203.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.26%)</title><rect x="12.0" y="1187.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.0" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.26%)</title><rect x="12.0" y="1171.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (155 samples, 13.42%)</title><rect x="15.1" y="1267.0" width="158.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.1" y="1278.0">java/lang/Iterable.f..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$332/1004332087.accept (150 samples, 12.99%)</title><rect x="15.1" y="1251.0" width="153.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1262.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (150 samples, 12.99%)</title><rect x="15.1" y="1235.0" width="153.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="18.1" y="1246.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (137 samples, 11.86%)</title><rect x="15.1" y="1219.0" width="140.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.1" y="1230.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (137 samples, 11.86%)</title><rect x="15.1" y="1203.0" width="140.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.1" y="1214.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (136 samples, 11.77%)</title><rect x="16.1" y="1187.0" width="139.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="1198.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (136 samples, 11.77%)</title><rect x="16.1" y="1171.0" width="139.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.1" y="1182.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (122 samples, 10.56%)</title><rect x="30.4" y="1155.0" width="124.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.4" y="1166.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (122 samples, 10.56%)</title><rect x="30.4" y="1139.0" width="124.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.4" y="1150.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (101 samples, 8.74%)</title><rect x="49.8" y="1123.0" width="103.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.8" y="1134.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.21%)</title><rect x="55.0" y="1107.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.21%)</title><rect x="55.0" y="1091.0" width="14.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="58.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.21%)</title><rect x="55.0" y="1075.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="58.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (82 samples, 7.10%)</title><rect x="69.3" y="1107.0" width="83.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="72.3" y="1118.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (82 samples, 7.10%)</title><rect x="69.3" y="1091.0" width="83.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.3" y="1102.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 7.10%)</title><rect x="69.3" y="1075.0" width="83.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.3" y="1086.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 7.10%)</title><rect x="69.3" y="1059.0" width="83.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="72.3" y="1070.0">java/util..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (81 samples, 7.01%)</title><rect x="70.3" y="1043.0" width="82.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.3" y="1054.0">sun/misc/..</text>
</g>
<g>
<title>Unsafe_Unpark (67 samples, 5.80%)</title><rect x="71.3" y="1027.0" width="68.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="74.3" y="1038.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.09%)</title><rect x="72.3" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="75.3" y="1022.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.17%)</title><rect x="73.3" y="1011.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="76.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_cond_signal (54 samples, 4.68%)</title><rect x="75.4" y="1011.0" width="55.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="78.4" y="1022.0">__pth..</text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.78%)</title><rect x="130.6" y="1011.0" width="9.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="133.6" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 0.78%)</title><rect x="139.7" y="1027.0" width="9.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="142.7" y="1038.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.35%)</title><rect x="148.9" y="1027.0" width="4.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="151.9" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.17%)</title><rect x="153.0" y="1123.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="156.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="153.0" y="1107.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="156.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="153.0" y="1091.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="156.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="153.0" y="1075.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (8 samples, 0.69%)</title><rect x="155.1" y="1219.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="158.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 0.69%)</title><rect x="155.1" y="1203.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="158.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetState.&lt;init&gt; (1 samples, 0.09%)</title><rect x="160.2" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.2" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="160.2" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="163.2" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="160.2" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="163.2" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="160.2" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="163.2" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="160.2" y="1123.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="163.2" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="160.2" y="1107.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="163.2" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="161.2" y="1187.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="164.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.17%)</title><rect x="161.2" y="1171.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.17%)</title><rect x="161.2" y="1155.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.17%)</title><rect x="161.2" y="1139.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="161.2" y="1123.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.09%)</title><rect x="163.2" y="1219.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="166.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="163.2" y="1203.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="166.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="163.2" y="1187.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="166.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.35%)</title><rect x="164.3" y="1219.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.3" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.35%)</title><rect x="164.3" y="1203.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="167.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.35%)</title><rect x="164.3" y="1187.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.35%)</title><rect x="164.3" y="1171.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="167.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.35%)</title><rect x="164.3" y="1155.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.09%)</title><rect x="168.4" y="1251.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="171.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.09%)</title><rect x="168.4" y="1235.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="171.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="168.4" y="1219.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.4" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="168.4" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="168.4" y="1187.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="171.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.09%)</title><rect x="168.4" y="1171.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="171.4" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="168.4" y="1155.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="168.4" y="1139.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="171.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.26%)</title><rect x="169.4" y="1251.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="172.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.26%)</title><rect x="169.4" y="1235.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="172.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="169.4" y="1219.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="172.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="169.4" y="1203.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.17%)</title><rect x="170.4" y="1187.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.09%)</title><rect x="172.4" y="1251.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (28 samples, 2.42%)</title><rect x="173.5" y="1267.0" width="28.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="176.5" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (28 samples, 2.42%)</title><rect x="173.5" y="1251.0" width="28.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="176.5" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 1.99%)</title><rect x="173.5" y="1235.0" width="23.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.5" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (23 samples, 1.99%)</title><rect x="173.5" y="1219.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="176.5" y="1230.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.09%)</title><rect x="173.5" y="1203.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.09%)</title><rect x="173.5" y="1187.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.5" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.09%)</title><rect x="173.5" y="1171.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$353/1135734226.accept (1 samples, 0.09%)</title><rect x="173.5" y="1155.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.09%)</title><rect x="173.5" y="1139.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="173.5" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 1.90%)</title><rect x="174.5" y="1203.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.5" y="1214.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.09%)</title><rect x="174.5" y="1187.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="177.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.09%)</title><rect x="174.5" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="174.5" y="1155.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="177.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="174.5" y="1139.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.5" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.09%)</title><rect x="174.5" y="1123.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (19 samples, 1.65%)</title><rect x="175.5" y="1187.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 1.65%)</title><rect x="175.5" y="1171.0" width="19.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.69%)</title><rect x="176.5" y="1155.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.69%)</title><rect x="176.5" y="1139.0" width="8.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="179.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (8 samples, 0.69%)</title><rect x="176.5" y="1123.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (9 samples, 0.78%)</title><rect x="184.7" y="1155.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="187.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.69%)</title><rect x="185.7" y="1139.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="188.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.69%)</title><rect x="185.7" y="1123.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.69%)</title><rect x="185.7" y="1107.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.7" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="190.8" y="1091.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="193.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="193.9" y="1155.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.09%)</title><rect x="194.9" y="1187.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="197.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.09%)</title><rect x="194.9" y="1171.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="194.9" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.9" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="194.9" y="1139.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="197.9" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="194.9" y="1123.0" width="1.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="197.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.09%)</title><rect x="195.9" y="1187.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="198.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.09%)</title><rect x="195.9" y="1171.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="198.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="195.9" y="1155.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="198.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="197.0" y="1235.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="197.0" y="1219.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.09%)</title><rect x="197.0" y="1203.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="200.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.09%)</title><rect x="197.0" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.09%)</title><rect x="197.0" y="1171.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.17%)</title><rect x="198.0" y="1235.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="201.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.17%)</title><rect x="198.0" y="1219.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.17%)</title><rect x="198.0" y="1203.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.09%)</title><rect x="199.0" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.09%)</title><rect x="199.0" y="1171.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.09%)</title><rect x="199.0" y="1155.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.09%)</title><rect x="199.0" y="1139.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.09%)</title><rect x="199.0" y="1123.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.09%)</title><rect x="199.0" y="1107.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.09%)</title><rect x="199.0" y="1091.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.0" y="1102.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.09%)</title><rect x="199.0" y="1075.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="202.0" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.09%)</title><rect x="199.0" y="1059.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.0" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.09%)</title><rect x="199.0" y="1043.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="202.0" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.09%)</title><rect x="199.0" y="1027.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="199.0" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="199.0" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.17%)</title><rect x="200.0" y="1235.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="203.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.09%)</title><rect x="201.0" y="1219.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="201.0" y="1203.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="201.0" y="1187.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="204.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="201.0" y="1171.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (574 samples, 49.70%)</title><rect x="202.1" y="1315.0" width="586.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.1" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (574 samples, 49.70%)</title><rect x="202.1" y="1299.0" width="586.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.1" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (574 samples, 49.70%)</title><rect x="202.1" y="1283.0" width="586.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="205.1" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/1598929076.run (372 samples, 32.21%)</title><rect x="203.1" y="1267.0" width="380.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.1" y="1278.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (371 samples, 32.12%)</title><rect x="204.1" y="1251.0" width="379.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.1" y="1262.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (371 samples, 32.12%)</title><rect x="204.1" y="1235.0" width="379.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.1" y="1246.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (371 samples, 32.12%)</title><rect x="204.1" y="1219.0" width="379.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.1" y="1230.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="211.3" y="1203.0" width="1.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="214.3" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="211.3" y="1187.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="214.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (11 samples, 0.95%)</title><rect x="212.3" y="1203.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.3" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (11 samples, 0.95%)</title><rect x="212.3" y="1187.0" width="11.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.95%)</title><rect x="212.3" y="1171.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="215.3" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 0.95%)</title><rect x="212.3" y="1155.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.3" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="217.4" y="1139.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="220.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="217.4" y="1123.0" width="5.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="220.4" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="222.5" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="225.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (34 samples, 2.94%)</title><rect x="223.5" y="1203.0" width="34.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.5" y="1214.0">co..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.09%)</title><rect x="232.7" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="232.7" y="1171.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="235.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$367/1241148181.get$Lambda (1 samples, 0.09%)</title><rect x="232.7" y="1155.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.7" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="232.7" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="235.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="232.7" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="235.7" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.09%)</title><rect x="232.7" y="1107.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="235.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.08%)</title><rect x="233.7" y="1187.0" width="24.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.7" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.08%)</title><rect x="233.7" y="1171.0" width="24.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.7" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.08%)</title><rect x="233.7" y="1155.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.7" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.09%)</title><rect x="233.7" y="1139.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="236.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.09%)</title><rect x="233.7" y="1123.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.09%)</title><rect x="233.7" y="1107.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 1.99%)</title><rect x="234.8" y="1139.0" width="23.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="237.8" y="1150.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$367/1241148181.accept (23 samples, 1.99%)</title><rect x="234.8" y="1123.0" width="23.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.8" y="1134.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (23 samples, 1.99%)</title><rect x="234.8" y="1107.0" width="23.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.8" y="1118.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (23 samples, 1.99%)</title><rect x="234.8" y="1091.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.8" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (23 samples, 1.99%)</title><rect x="234.8" y="1075.0" width="23.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.8" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (23 samples, 1.99%)</title><rect x="234.8" y="1059.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.8" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (9 samples, 0.78%)</title><rect x="234.8" y="1043.0" width="9.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="237.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (9 samples, 0.78%)</title><rect x="234.8" y="1027.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$355/1615989682.accept (1 samples, 0.09%)</title><rect x="241.9" y="1011.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="244.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$354/388354045.accept (1 samples, 0.09%)</title><rect x="242.9" y="1011.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.21%)</title><rect x="244.0" y="1043.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="247.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$354/388354045.accept (1 samples, 0.09%)</title><rect x="257.2" y="1027.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (103 samples, 8.92%)</title><rect x="258.3" y="1203.0" width="105.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.3" y="1214.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (103 samples, 8.92%)</title><rect x="258.3" y="1187.0" width="105.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.3" y="1198.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (103 samples, 8.92%)</title><rect x="258.3" y="1171.0" width="105.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.3" y="1182.0">com/linecorp/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="258.3" y="1155.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="261.3" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="258.3" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="261.3" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="258.3" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="261.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="258.3" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="261.3" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="258.3" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="261.3" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="258.3" y="1075.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="261.3" y="1086.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="258.3" y="1059.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.3" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.09%)</title><rect x="258.3" y="1043.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="261.3" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.09%)</title><rect x="258.3" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="261.3" y="1038.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.09%)</title><rect x="258.3" y="1011.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (102 samples, 8.83%)</title><rect x="259.3" y="1155.0" width="104.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.3" y="1166.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (102 samples, 8.83%)</title><rect x="259.3" y="1139.0" width="104.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.3" y="1150.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (102 samples, 8.83%)</title><rect x="259.3" y="1123.0" width="104.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="262.3" y="1134.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (36 samples, 3.12%)</title><rect x="259.3" y="1107.0" width="36.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.3" y="1118.0">com..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.52%)</title><rect x="264.4" y="1091.0" width="6.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="267.4" y="1102.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="264.4" y="1075.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="267.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.26%)</title><rect x="270.5" y="1091.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.09%)</title><rect x="272.6" y="1075.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.09%)</title><rect x="272.6" y="1059.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="272.6" y="1043.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="275.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="272.6" y="1027.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="272.6" y="1011.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.6" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.09%)</title><rect x="272.6" y="995.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="275.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.90%)</title><rect x="273.6" y="1091.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.6" y="1102.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 0.52%)</title><rect x="289.9" y="1075.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.35%)</title><rect x="289.9" y="1059.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.35%)</title><rect x="289.9" y="1043.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="292.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.17%)</title><rect x="294.0" y="1059.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.0" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="294.0" y="1043.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="297.0" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="294.0" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="297.0" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="294.0" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.0" y="1022.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="294.0" y="995.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="297.0" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="294.0" y="979.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="297.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.09%)</title><rect x="294.0" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="297.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.09%)</title><rect x="295.0" y="1043.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="298.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.09%)</title><rect x="295.0" y="1027.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="298.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="295.0" y="1011.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="298.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="295.0" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="298.0" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="295.0" y="979.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="298.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="295.0" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="298.0" y="974.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.09%)</title><rect x="295.0" y="947.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="298.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (61 samples, 5.28%)</title><rect x="296.1" y="1107.0" width="62.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="299.1" y="1118.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.09%)</title><rect x="297.1" y="1091.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.09%)</title><rect x="298.1" y="1091.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="301.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.52%)</title><rect x="299.1" y="1091.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.52%)</title><rect x="299.1" y="1075.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="302.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.69%)</title><rect x="305.3" y="1091.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.69%)</title><rect x="305.3" y="1075.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.3" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.35%)</title><rect x="308.3" y="1059.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.26%)</title><rect x="309.3" y="1043.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="312.4" y="1059.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.26%)</title><rect x="313.4" y="1091.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="313.4" y="1075.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="316.4" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="313.4" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="316.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="313.4" y="1043.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="316.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.17%)</title><rect x="314.5" y="1075.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="317.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="314.5" y="1059.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.17%)</title><rect x="314.5" y="1043.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="315.5" y="1027.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="318.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (41 samples, 3.55%)</title><rect x="316.5" y="1091.0" width="41.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.5" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (41 samples, 3.55%)</title><rect x="316.5" y="1075.0" width="41.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.5" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.69%)</title><rect x="316.5" y="1059.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="317.5" y="1043.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="320.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="317.5" y="1027.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="317.5" y="1011.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="320.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.35%)</title><rect x="320.6" y="1043.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (33 samples, 2.86%)</title><rect x="324.7" y="1059.0" width="33.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.7" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (33 samples, 2.86%)</title><rect x="324.7" y="1043.0" width="33.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.7" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (33 samples, 2.86%)</title><rect x="324.7" y="1027.0" width="33.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.7" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.21%)</title><rect x="333.9" y="1011.0" width="14.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.35%)</title><rect x="337.9" y="995.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.35%)</title><rect x="337.9" y="979.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.35%)</title><rect x="337.9" y="963.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="340.0" y="947.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.17%)</title><rect x="342.0" y="995.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="345.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.09%)</title><rect x="344.1" y="995.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.09%)</title><rect x="344.1" y="979.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.09%)</title><rect x="345.1" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.17%)</title><rect x="346.1" y="995.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="349.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.35%)</title><rect x="348.2" y="1011.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.35%)</title><rect x="348.2" y="995.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.35%)</title><rect x="348.2" y="979.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="351.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.35%)</title><rect x="348.2" y="963.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.35%)</title><rect x="348.2" y="947.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.35%)</title><rect x="352.3" y="1011.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="355.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.35%)</title><rect x="352.3" y="995.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.35%)</title><rect x="352.3" y="979.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="355.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.35%)</title><rect x="352.3" y="963.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.3" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.35%)</title><rect x="352.3" y="947.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.3" y="958.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.35%)</title><rect x="352.3" y="931.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="355.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.17%)</title><rect x="356.3" y="1011.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="359.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="356.3" y="995.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="359.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="356.3" y="979.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.43%)</title><rect x="358.4" y="1107.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.43%)</title><rect x="358.4" y="1091.0" width="5.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="361.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.43%)</title><rect x="358.4" y="1075.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="361.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.43%)</title><rect x="358.4" y="1059.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.43%)</title><rect x="358.4" y="1043.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (209 samples, 18.10%)</title><rect x="363.5" y="1203.0" width="213.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.5" y="1214.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="364.5" y="1187.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.5" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.09%)</title><rect x="364.5" y="1171.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="367.5" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.09%)</title><rect x="364.5" y="1155.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (34 samples, 2.94%)</title><rect x="365.5" y="1187.0" width="34.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="368.5" y="1198.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 2.86%)</title><rect x="366.6" y="1171.0" width="33.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="369.6" y="1182.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (26 samples, 2.25%)</title><rect x="373.7" y="1155.0" width="26.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="376.7" y="1166.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.52%)</title><rect x="375.7" y="1139.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="378.7" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="375.7" y="1123.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="378.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.52%)</title><rect x="375.7" y="1107.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="378.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.52%)</title><rect x="375.7" y="1091.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.17%)</title><rect x="381.9" y="1139.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="384.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.17%)</title><rect x="381.9" y="1123.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="384.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.17%)</title><rect x="381.9" y="1107.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.17%)</title><rect x="381.9" y="1091.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.9" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="382.9" y="1075.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="385.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 1.30%)</title><rect x="383.9" y="1139.0" width="15.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.78%)</title><rect x="390.1" y="1123.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="393.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.61%)</title><rect x="392.1" y="1107.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.09%)</title><rect x="399.2" y="1139.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="402.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="400.3" y="1187.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="403.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.43%)</title><rect x="400.3" y="1171.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="403.3" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (97 samples, 8.40%)</title><rect x="405.4" y="1187.0" width="99.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.4" y="1198.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (94 samples, 8.14%)</title><rect x="405.4" y="1171.0" width="96.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="408.4" y="1182.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (31 samples, 2.68%)</title><rect x="410.5" y="1155.0" width="31.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="413.5" y="1166.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (31 samples, 2.68%)</title><rect x="410.5" y="1139.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="413.5" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (17 samples, 1.47%)</title><rect x="417.6" y="1123.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="420.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.61%)</title><rect x="423.8" y="1107.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="426.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.61%)</title><rect x="423.8" y="1091.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.61%)</title><rect x="423.8" y="1075.0" width="7.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="426.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.52%)</title><rect x="424.8" y="1059.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="427.8" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.43%)</title><rect x="424.8" y="1043.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="427.8" y="1054.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.09%)</title><rect x="424.8" y="1027.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="427.8" y="1038.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.09%)</title><rect x="425.8" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="428.8" y="1038.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.26%)</title><rect x="426.8" y="1027.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="429.8" y="1038.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.26%)</title><rect x="426.8" y="1011.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="429.8" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.09%)</title><rect x="426.8" y="995.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="429.8" y="1006.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.09%)</title><rect x="427.9" y="995.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="430.9" y="1006.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="428.9" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="431.9" y="1006.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="429.9" y="1043.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="432.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="430.9" y="1107.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="433.9" y="1118.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="434.0" y="1107.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="437.0" y="1118.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.17%)</title><rect x="435.0" y="1123.0" width="2.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="438.0" y="1134.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="437.0" y="1123.0" width="5.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="440.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.26%)</title><rect x="442.2" y="1155.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.26%)</title><rect x="442.2" y="1139.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="445.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.26%)</title><rect x="442.2" y="1123.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.2" y="1134.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (55 samples, 4.76%)</title><rect x="445.2" y="1155.0" width="56.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.2" y="1166.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (55 samples, 4.76%)</title><rect x="445.2" y="1139.0" width="56.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.2" y="1150.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 1.47%)</title><rect x="452.4" y="1123.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (17 samples, 1.47%)</title><rect x="452.4" y="1107.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (17 samples, 1.47%)</title><rect x="452.4" y="1091.0" width="17.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (17 samples, 1.47%)</title><rect x="452.4" y="1075.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="469.7" y="1123.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="472.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.09%)</title><rect x="469.7" y="1107.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="469.7" y="1091.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="469.7" y="1075.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (30 samples, 2.60%)</title><rect x="470.8" y="1123.0" width="30.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.8" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (28 samples, 2.42%)</title><rect x="472.8" y="1107.0" width="28.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="475.8" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.26%)</title><rect x="472.8" y="1091.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="475.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.26%)</title><rect x="472.8" y="1075.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="475.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (25 samples, 2.16%)</title><rect x="475.9" y="1091.0" width="25.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.9" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="492.2" y="1075.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="495.2" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.69%)</title><rect x="493.2" y="1075.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.2" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="500.4" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="503.4" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="500.4" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="503.4" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="500.4" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="503.4" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="500.4" y="1011.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="503.4" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.09%)</title><rect x="500.4" y="995.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="503.4" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.09%)</title><rect x="500.4" y="979.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="503.4" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.09%)</title><rect x="500.4" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="503.4" y="974.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.09%)</title><rect x="500.4" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="503.4" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.26%)</title><rect x="501.4" y="1171.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.26%)</title><rect x="501.4" y="1155.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="504.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.17%)</title><rect x="501.4" y="1139.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.17%)</title><rect x="501.4" y="1123.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.4" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.09%)</title><rect x="503.5" y="1139.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="506.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="503.5" y="1123.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="506.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (48 samples, 4.16%)</title><rect x="504.5" y="1187.0" width="49.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.5" y="1198.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (47 samples, 4.07%)</title><rect x="505.5" y="1171.0" width="48.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.5" y="1182.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$274/740188340.process (18 samples, 1.56%)</title><rect x="506.5" y="1155.0" width="18.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="509.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (18 samples, 1.56%)</title><rect x="506.5" y="1139.0" width="18.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="509.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 1.04%)</title><rect x="506.5" y="1123.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="509.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.43%)</title><rect x="506.5" y="1107.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="509.5" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.35%)</title><rect x="507.5" y="1091.0" width="4.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="510.5" y="1102.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="507.5" y="1075.0" width="4.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="510.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.09%)</title><rect x="511.6" y="1107.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="514.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="512.6" y="1107.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="515.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.52%)</title><rect x="518.8" y="1123.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="521.8" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.52%)</title><rect x="518.8" y="1107.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="521.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.52%)</title><rect x="518.8" y="1091.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.52%)</title><rect x="518.8" y="1075.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.52%)</title><rect x="518.8" y="1059.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="521.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.43%)</title><rect x="524.9" y="1155.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (6 samples, 0.52%)</title><rect x="530.0" y="1155.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="533.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="530.0" y="1139.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="533.0" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="530.0" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="533.0" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="530.0" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="533.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 0.43%)</title><rect x="531.0" y="1139.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="534.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 0.43%)</title><rect x="531.0" y="1123.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="534.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 0.43%)</title><rect x="531.0" y="1107.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="534.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.43%)</title><rect x="531.0" y="1091.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.43%)</title><rect x="531.0" y="1075.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="534.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.17%)</title><rect x="536.1" y="1155.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.1" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="536.1" y="1139.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="539.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="537.2" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="540.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.09%)</title><rect x="538.2" y="1155.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.09%)</title><rect x="538.2" y="1139.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="541.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$362/310948595.get$Lambda (1 samples, 0.09%)</title><rect x="538.2" y="1123.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="541.2" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="539.2" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="542.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="540.2" y="1155.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="543.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.09%)</title><rect x="540.2" y="1139.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="543.2" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="541.3" y="1155.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.09%)</title><rect x="541.3" y="1139.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.35%)</title><rect x="542.3" y="1155.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.3" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="542.3" y="1139.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="545.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.26%)</title><rect x="543.3" y="1139.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.61%)</title><rect x="546.4" y="1155.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.61%)</title><rect x="546.4" y="1139.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="549.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.61%)</title><rect x="546.4" y="1123.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="549.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.61%)</title><rect x="546.4" y="1107.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.52%)</title><rect x="546.4" y="1091.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.52%)</title><rect x="546.4" y="1075.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$362/310948595.accept (3 samples, 0.26%)</title><rect x="546.4" y="1059.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="549.4" y="1070.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="549.4" y="1059.0" width="3.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="552.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="552.5" y="1091.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="555.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.52%)</title><rect x="553.5" y="1187.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="556.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (6 samples, 0.52%)</title><rect x="553.5" y="1171.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="556.5" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.43%)</title><rect x="554.5" y="1155.0" width="5.1" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="557.5" y="1166.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.35%)</title><rect x="555.6" y="1139.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="558.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (6 samples, 0.52%)</title><rect x="559.6" y="1187.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="562.6" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="559.6" y="1171.0" width="3.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="562.6" y="1182.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="559.6" y="1155.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="562.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="562.7" y="1171.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="565.7" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="564.8" y="1171.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="567.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1754662105.linkToTargetMethod (1 samples, 0.09%)</title><rect x="565.8" y="1187.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="568.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/936580213.invokeStatic_L3_L (1 samples, 0.09%)</title><rect x="565.8" y="1171.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/160177027.get$Lambda (1 samples, 0.09%)</title><rect x="565.8" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="568.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.87%)</title><rect x="566.8" y="1187.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="569.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.87%)</title><rect x="566.8" y="1171.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="569.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 0.87%)</title><rect x="566.8" y="1155.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.26%)</title><rect x="566.8" y="1139.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="569.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.26%)</title><rect x="566.8" y="1123.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.26%)</title><rect x="566.8" y="1107.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="569.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/160177027.accept (1 samples, 0.09%)</title><rect x="567.8" y="1091.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="570.8" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="568.8" y="1091.0" width="1.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="571.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.61%)</title><rect x="569.9" y="1139.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/160177027.accept (7 samples, 0.61%)</title><rect x="569.9" y="1123.0" width="7.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.9" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="569.9" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="572.9" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="569.9" y="1091.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="572.9" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="569.9" y="1075.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="572.9" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.09%)</title><rect x="569.9" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="572.9" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.09%)</title><rect x="569.9" y="1043.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="572.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (6 samples, 0.52%)</title><rect x="570.9" y="1107.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="573.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (6 samples, 0.52%)</title><rect x="570.9" y="1091.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="573.9" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (6 samples, 0.52%)</title><rect x="570.9" y="1075.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="573.9" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (6 samples, 0.52%)</title><rect x="570.9" y="1059.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="573.9" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="573.9" y="1043.0" width="3.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="576.9" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="575.0" y="1027.0" width="2.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="578.0" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.52%)</title><rect x="577.0" y="1203.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="580.0" y="1214.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.52%)</title><rect x="577.0" y="1187.0" width="6.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="580.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="583.1" y="1267.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="583.1" y="1251.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="586.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="583.1" y="1235.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="586.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="583.1" y="1219.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="586.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (199 samples, 17.23%)</title><rect x="585.2" y="1267.0" width="203.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="588.2" y="1278.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (199 samples, 17.23%)</title><rect x="585.2" y="1251.0" width="203.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="588.2" y="1262.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (171 samples, 14.81%)</title><rect x="613.8" y="1235.0" width="174.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="616.8" y="1246.0">java/util/concurrent/l..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.69%)</title><rect x="617.9" y="1219.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.69%)</title><rect x="617.9" y="1203.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="620.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.17%)</title><rect x="624.0" y="1187.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="627.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.17%)</title><rect x="626.1" y="1219.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="629.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.17%)</title><rect x="626.1" y="1203.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="629.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (157 samples, 13.59%)</title><rect x="628.1" y="1219.0" width="160.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.1" y="1230.0">java/util/concurrent..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (157 samples, 13.59%)</title><rect x="628.1" y="1203.0" width="160.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="631.1" y="1214.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.26%)</title><rect x="629.1" y="1187.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="632.1" y="1198.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.09%)</title><rect x="632.2" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="635.2" y="1198.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (5 samples, 0.43%)</title><rect x="633.2" y="1187.0" width="5.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="636.2" y="1198.0"></text>
</g>
<g>
<title>Unsafe_Park (147 samples, 12.73%)</title><rect x="638.3" y="1187.0" width="150.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="641.3" y="1198.0">Unsafe_Park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.09%)</title><rect x="639.3" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="642.3" y="1182.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 1.04%)</title><rect x="640.4" y="1171.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="643.4" y="1182.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.43%)</title><rect x="644.4" y="1155.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="647.4" y="1166.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.17%)</title><rect x="645.5" y="1139.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="648.5" y="1150.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.17%)</title><rect x="645.5" y="1123.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="648.5" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="647.5" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="650.5" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="648.5" y="1139.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="651.5" y="1150.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.26%)</title><rect x="649.5" y="1155.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.5" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.09%)</title><rect x="652.6" y="1171.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="655.6" y="1182.0"></text>
</g>
<g>
<title>__lll_lock_wait (4 samples, 0.35%)</title><rect x="653.6" y="1171.0" width="4.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="656.6" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (48 samples, 4.16%)</title><rect x="657.7" y="1171.0" width="49.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="660.7" y="1182.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (63 samples, 5.45%)</title><rect x="706.8" y="1171.0" width="64.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="709.8" y="1182.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.43%)</title><rect x="771.1" y="1171.0" width="5.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="774.1" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.35%)</title><rect x="776.2" y="1171.0" width="4.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="779.2" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.35%)</title><rect x="780.3" y="1171.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="783.3" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="784.4" y="1171.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="787.4" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.09%)</title><rect x="785.4" y="1171.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="788.4" y="1182.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.09%)</title><rect x="786.5" y="1171.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="789.5" y="1182.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="787.5" y="1171.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="790.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="788.5" y="1315.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="788.5" y="1299.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="791.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="788.5" y="1283.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="788.5" y="1267.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="791.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="788.5" y="1251.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="788.5" y="1235.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="791.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="788.5" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="791.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.09%)</title><rect x="788.5" y="1203.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.09%)</title><rect x="788.5" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.09%)</title><rect x="788.5" y="1171.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatResponseHandler.handle (1 samples, 0.09%)</title><rect x="788.5" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="791.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatResponseHandler.handle (1 samples, 0.09%)</title><rect x="788.5" y="1139.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="788.5" y="1123.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="788.5" y="1107.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.09%)</title><rect x="788.5" y="1091.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.5" y="1102.0"></text>
</g>
<g>
<title>start_thread (392 samples, 33.94%)</title><rect x="789.5" y="1315.0" width="400.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="792.5" y="1326.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (392 samples, 33.94%)</title><rect x="789.5" y="1299.0" width="400.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="792.5" y="1310.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 1.39%)</title><rect x="789.5" y="1283.0" width="16.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="792.5" y="1294.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.17%)</title><rect x="789.5" y="1267.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="792.5" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.17%)</title><rect x="789.5" y="1251.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="792.5" y="1262.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.17%)</title><rect x="789.5" y="1235.0" width="2.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="792.5" y="1246.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.21%)</title><rect x="791.6" y="1267.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="794.6" y="1278.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="791.6" y="1251.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="794.6" y="1262.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="791.6" y="1235.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="794.6" y="1246.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.43%)</title><rect x="792.6" y="1251.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.6" y="1262.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.09%)</title><rect x="792.6" y="1235.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="795.6" y="1246.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.09%)</title><rect x="792.6" y="1219.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="795.6" y="1230.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.09%)</title><rect x="792.6" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="795.6" y="1214.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.09%)</title><rect x="792.6" y="1187.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="795.6" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.35%)</title><rect x="793.6" y="1235.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="796.6" y="1246.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.35%)</title><rect x="793.6" y="1219.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="796.6" y="1230.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.69%)</title><rect x="797.7" y="1251.0" width="8.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="800.7" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.69%)</title><rect x="797.7" y="1235.0" width="8.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="800.7" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.69%)</title><rect x="797.7" y="1219.0" width="8.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="800.7" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.69%)</title><rect x="797.7" y="1203.0" width="8.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="800.7" y="1214.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.69%)</title><rect x="797.7" y="1187.0" width="8.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="800.7" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.61%)</title><rect x="797.7" y="1171.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="800.7" y="1182.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (3 samples, 0.26%)</title><rect x="801.8" y="1155.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.8" y="1166.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.26%)</title><rect x="801.8" y="1139.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="804.8" y="1150.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.09%)</title><rect x="804.8" y="1171.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="807.8" y="1182.0"></text>
</g>
<g>
<title>JavaThread::run() (375 samples, 32.47%)</title><rect x="805.9" y="1283.0" width="383.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.9" y="1294.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (375 samples, 32.47%)</title><rect x="805.9" y="1267.0" width="383.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="808.9" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (374 samples, 32.38%)</title><rect x="805.9" y="1251.0" width="382.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.9" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (374 samples, 32.38%)</title><rect x="805.9" y="1235.0" width="382.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.9" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (372 samples, 32.21%)</title><rect x="805.9" y="1219.0" width="380.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="808.9" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (372 samples, 32.21%)</title><rect x="805.9" y="1203.0" width="380.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="808.9" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int..</text>
</g>
<g>
<title>Compile::Code_Gen() (132 samples, 11.43%)</title><rect x="805.9" y="1187.0" width="134.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.9" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.35%)</title><rect x="805.9" y="1171.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.9" y="1182.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.26%)</title><rect x="805.9" y="1155.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="808.9" y="1166.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.09%)</title><rect x="807.9" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="810.9" y="1150.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="808.9" y="1155.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="811.9" y="1166.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="808.9" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="811.9" y="1150.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="808.9" y="1123.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.9" y="1134.0"></text>
</g>
<g>
<title>MachOper::reg(PhaseRegAlloc*, Node const*, int) const (1 samples, 0.09%)</title><rect x="808.9" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="811.9" y="1118.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.61%)</title><rect x="809.9" y="1171.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="812.9" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (4 samples, 0.35%)</title><rect x="809.9" y="1155.0" width="4.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="812.9" y="1166.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="809.9" y="1139.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="812.9" y="1150.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="809.9" y="1123.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.9" y="1134.0"></text>
</g>
<g>
<title>new_loc_value(PhaseRegAlloc*, int, Location::Type) (1 samples, 0.09%)</title><rect x="809.9" y="1107.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="812.9" y="1118.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="811.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="814.0" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="811.0" y="1123.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="814.0" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.17%)</title><rect x="812.0" y="1139.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="815.0" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="812.0" y="1123.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="815.0" y="1134.0"></text>
</g>
<g>
<title>ObjectValue::write_on(DebugInfoWriteStream*) (1 samples, 0.09%)</title><rect x="813.0" y="1123.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="816.0" y="1134.0"></text>
</g>
<g>
<title>ConstantOopWriteValue::write_on(DebugInfoWriteStream*) (1 samples, 0.09%)</title><rect x="813.0" y="1107.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="816.0" y="1118.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::maybe_find_index(_jobject*) (1 samples, 0.09%)</title><rect x="813.0" y="1091.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="816.0" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.17%)</title><rect x="814.0" y="1155.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="817.0" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 0.17%)</title><rect x="814.0" y="1139.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="817.0" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.09%)</title><rect x="816.1" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="819.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::match() (16 samples, 1.39%)</title><rect x="817.1" y="1171.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="820.1" y="1182.0"></text>
</g>
<g>
<title>ConINode::Opcode() const (2 samples, 0.17%)</title><rect x="817.1" y="1155.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.09%)</title><rect x="819.1" y="1155.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="822.1" y="1166.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (13 samples, 1.13%)</title><rect x="820.2" y="1155.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="823.2" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (10 samples, 0.87%)</title><rect x="820.2" y="1139.0" width="10.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="823.2" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.17%)</title><rect x="830.4" y="1139.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="833.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="830.4" y="1123.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="833.4" y="1134.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.09%)</title><rect x="831.4" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="834.4" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="831.4" y="1107.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="834.4" y="1118.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.09%)</title><rect x="832.4" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="835.4" y="1150.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="833.4" y="1171.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.4" y="1182.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.09%)</title><rect x="833.4" y="1155.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="836.4" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.61%)</title><rect x="834.5" y="1171.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="837.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.09%)</title><rect x="834.5" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="837.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.52%)</title><rect x="835.5" y="1155.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="838.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (5 samples, 0.43%)</title><rect x="835.5" y="1139.0" width="5.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="838.5" y="1150.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.17%)</title><rect x="835.5" y="1123.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="838.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.09%)</title><rect x="837.5" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="840.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="838.6" y="1123.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="841.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="839.6" y="1123.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="842.6" y="1134.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="839.6" y="1107.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="842.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="840.6" y="1139.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="843.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.09%)</title><rect x="841.6" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="844.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (96 samples, 8.31%)</title><rect x="842.6" y="1171.0" width="98.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.6" y="1182.0">PhaseChaitin..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.09%)</title><rect x="843.7" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="846.7" y="1166.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.09%)</title><rect x="844.7" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.7" y="1166.0"></text>
</g>
<g>
<title>Node::cisc_operand() const (1 samples, 0.09%)</title><rect x="845.7" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="848.7" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.26%)</title><rect x="846.7" y="1155.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="849.7" y="1166.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.09%)</title><rect x="848.8" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="851.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.43%)</title><rect x="849.8" y="1155.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="852.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="850.8" y="1139.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.09%)</title><rect x="852.9" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="855.9" y="1150.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.09%)</title><rect x="852.9" y="1123.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="855.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.09%)</title><rect x="853.9" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="856.9" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="853.9" y="1123.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="856.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (7 samples, 0.61%)</title><rect x="854.9" y="1155.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="857.9" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="856.9" y="1139.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="859.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.26%)</title><rect x="859.0" y="1139.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 1.13%)</title><rect x="862.1" y="1155.0" width="13.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="865.1" y="1166.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.09%)</title><rect x="871.2" y="1139.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="872.3" y="1139.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="875.3" y="1150.0"></text>
</g>
<g>
<title>decodeHeapOopNode::rule() const (1 samples, 0.09%)</title><rect x="873.3" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="876.3" y="1150.0"></text>
</g>
<g>
<title>decodeKlass_not_nullNode::rule() const (1 samples, 0.09%)</title><rect x="874.3" y="1139.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="877.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (17 samples, 1.47%)</title><rect x="875.3" y="1155.0" width="17.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="878.3" y="1166.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.09%)</title><rect x="877.4" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="880.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (10 samples, 0.87%)</title><rect x="878.4" y="1139.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="881.4" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="886.6" y="1123.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="889.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="888.6" y="1139.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="891.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 0.26%)</title><rect x="889.6" y="1139.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="892.6" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="892.7" y="1155.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="895.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="893.7" y="1139.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="896.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.09%)</title><rect x="894.7" y="1155.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.61%)</title><rect x="895.8" y="1155.0" width="7.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="898.8" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.17%)</title><rect x="897.8" y="1139.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.8" y="1150.0"></text>
</g>
<g>
<title>decodeHeapOopNode::oper_input_base() const (1 samples, 0.09%)</title><rect x="899.9" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="902.9" y="1150.0"></text>
</g>
<g>
<title>rRegNOper::type() const (1 samples, 0.09%)</title><rect x="900.9" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.9" y="1150.0"></text>
</g>
<g>
<title>rax_RegPOper::type() const (1 samples, 0.09%)</title><rect x="901.9" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="902.9" y="1155.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="905.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.52%)</title><rect x="905.0" y="1155.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="908.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.43%)</title><rect x="906.0" y="1139.0" width="5.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="909.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.09%)</title><rect x="911.1" y="1155.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="914.1" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (8 samples, 0.69%)</title><rect x="912.1" y="1155.0" width="8.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="915.1" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="912.1" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.1" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.61%)</title><rect x="913.1" y="1139.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.1" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (7 samples, 0.61%)</title><rect x="913.1" y="1123.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="916.1" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.09%)</title><rect x="913.1" y="1107.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="916.1" y="1118.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.43%)</title><rect x="914.2" y="1107.0" width="5.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.2" y="1118.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="918.2" y="1091.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="921.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="919.3" y="1107.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="922.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.35%)</title><rect x="920.3" y="1155.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="923.3" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="922.3" y="1139.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="925.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="924.4" y="1155.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="927.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="925.4" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="928.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="926.4" y="1155.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="929.4" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (12 samples, 1.04%)</title><rect x="927.4" y="1155.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="930.4" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.43%)</title><rect x="933.6" y="1139.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.6" y="1150.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="935.6" y="1123.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="938.6" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="936.6" y="1123.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="939.6" y="1134.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.09%)</title><rect x="937.7" y="1123.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="940.7" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="938.7" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.7" y="1150.0"></text>
</g>
<g>
<title>incI_rRegNode::two_adr() const (1 samples, 0.09%)</title><rect x="939.7" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.7" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (225 samples, 19.48%)</title><rect x="940.7" y="1187.0" width="229.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.7" y="1198.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="940.7" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="943.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.52%)</title><rect x="941.7" y="1171.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="944.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.09%)</title><rect x="941.7" y="1155.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="944.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.43%)</title><rect x="942.8" y="1155.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="945.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="942.8" y="1139.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="945.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (2 samples, 0.17%)</title><rect x="942.8" y="1123.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1139.0" width="3.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="947.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1123.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="947.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1107.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="947.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1091.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="947.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1075.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1059.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="947.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="944.8" y="1043.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="947.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="944.8" y="1027.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="947.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="944.8" y="1011.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="947.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="944.8" y="995.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="944.8" y="979.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="947.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="944.8" y="963.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="944.8" y="947.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="944.8" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="947.8" y="942.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="944.8" y="915.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="947.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="931.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="883.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="867.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="948.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="835.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="819.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="803.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="948.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="739.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="948.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="948.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="948.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="948.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="948.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="611.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="595.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="948.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="579.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="948.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="948.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="948.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="515.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="948.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="499.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="948.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="945.8" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="948.8" y="462.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*) (1 samples, 0.09%)</title><rect x="945.8" y="435.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="948.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="946.8" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="946.8" y="1011.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="949.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="946.8" y="995.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="949.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="946.8" y="979.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.8" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="946.8" y="963.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.8" y="974.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.17%)</title><rect x="947.9" y="1171.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="950.9" y="1182.0"></text>
</g>
<g>
<title>CatchNode::Value(PhaseTransform*) const (1 samples, 0.09%)</title><rect x="947.9" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="950.9" y="1166.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="948.9" y="1155.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="951.9" y="1166.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.09%)</title><rect x="948.9" y="1139.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.9" y="1150.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="948.9" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="951.9" y="1134.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="948.9" y="1107.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="951.9" y="1118.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.09%)</title><rect x="948.9" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="951.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (190 samples, 16.45%)</title><rect x="949.9" y="1171.0" width="194.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.9" y="1182.0">PhaseIdealLoop::build_and..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="949.9" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="952.9" y="1166.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.09%)</title><rect x="950.9" y="1155.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="953.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.26%)</title><rect x="952.0" y="1155.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="955.0" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.09%)</title><rect x="953.0" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="956.0" y="1150.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="954.0" y="1139.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.43%)</title><rect x="955.0" y="1155.0" width="5.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="958.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.17%)</title><rect x="958.1" y="1139.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="961.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (164 samples, 14.20%)</title><rect x="960.1" y="1155.0" width="167.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.1" y="1166.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (160 samples, 13.85%)</title><rect x="964.2" y="1139.0" width="163.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.2" y="1150.0">PhaseIdealLoop::build..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (7 samples, 0.61%)</title><rect x="969.3" y="1123.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="972.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (148 samples, 12.81%)</title><rect x="976.5" y="1123.0" width="151.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="979.5" y="1134.0">PhaseIdealLoop::get..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.17%)</title><rect x="1092.9" y="1107.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1094.0" y="1091.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.0" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (29 samples, 2.51%)</title><rect x="1095.0" y="1107.0" width="29.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.0" y="1118.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (3 samples, 0.26%)</title><rect x="1124.6" y="1107.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.17%)</title><rect x="1125.6" y="1091.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (7 samples, 0.61%)</title><rect x="1127.7" y="1155.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="1166.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.09%)</title><rect x="1130.7" y="1139.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (2 samples, 0.17%)</title><rect x="1131.8" y="1139.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.8" y="1150.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1133.8" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (7 samples, 0.61%)</title><rect x="1134.8" y="1155.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.8" y="1166.0"></text>
</g>
<g>
<title>CMoveINode::Opcode() const (1 samples, 0.09%)</title><rect x="1137.9" y="1139.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (2 samples, 0.17%)</title><rect x="1138.9" y="1139.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.17%)</title><rect x="1138.9" y="1123.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.17%)</title><rect x="1138.9" y="1107.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.9" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.17%)</title><rect x="1138.9" y="1091.0" width="2.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1141.0" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1141.0" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.17%)</title><rect x="1142.0" y="1155.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.17%)</title><rect x="1142.0" y="1139.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1142.0" y="1123.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.0" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1143.0" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.0" y="1134.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.09%)</title><rect x="1143.0" y="1107.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (24 samples, 2.08%)</title><rect x="1144.0" y="1171.0" width="24.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.0" y="1182.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (22 samples, 1.90%)</title><rect x="1145.0" y="1155.0" width="22.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.0" y="1166.0">P..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1148.1" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.1" y="1150.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1149.1" y="1139.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.1" y="1150.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1149.1" y="1123.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.1" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1149.1" y="1107.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.1" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1149.1" y="1091.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.1" y="1102.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.17%)</title><rect x="1150.2" y="1123.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.2" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.17%)</title><rect x="1150.2" y="1107.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.2" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1150.2" y="1091.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.2" y="1102.0"></text>
</g>
<g>
<title>Node::find_exact_control(Node*) (1 samples, 0.09%)</title><rect x="1151.2" y="1091.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.2" y="1102.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1152.2" y="1139.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.2" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1154.2" y="1139.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.09%)</title><rect x="1155.3" y="1139.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (3 samples, 0.26%)</title><rect x="1156.3" y="1139.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1158.3" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.3" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1159.4" y="1139.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.4" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (2 samples, 0.17%)</title><rect x="1160.4" y="1123.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.4" y="1134.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1162.4" y="1139.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1162.4" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.4" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1162.4" y="1107.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.4" y="1118.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1163.4" y="1123.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.4" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1164.5" y="1139.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.5" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.17%)</title><rect x="1164.5" y="1123.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.5" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1107.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.5" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1091.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1075.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.5" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1059.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.5" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1043.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1027.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="1011.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1164.5" y="995.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="947.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="899.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="883.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="867.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="851.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="835.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.5" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1164.5" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1167.5" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1164.5" y="787.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.5" y="798.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1165.5" y="979.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1165.5" y="963.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="974.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1166.5" y="1139.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.5" y="1150.0"></text>
</g>
<g>
<title>Type::singleton() const (1 samples, 0.09%)</title><rect x="1167.5" y="1155.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.5" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.09%)</title><rect x="1168.5" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.5" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.09%)</title><rect x="1168.5" y="1155.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.5" y="1166.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1168.5" y="1139.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="1150.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.09%)</title><rect x="1168.5" y="1123.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="1134.0"></text>
</g>
<g>
<title>scan_mem_chain(Node*, int, int, Node*, Node*, PhaseGVN*) (1 samples, 0.09%)</title><rect x="1168.5" y="1107.0" width="1.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1171.5" y="1118.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1168.5" y="1091.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.5" y="1102.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1168.5" y="1075.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.5" y="1086.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1168.5" y="1059.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.5" y="1070.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_interface() (1 samples, 0.09%)</title><rect x="1168.5" y="1043.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="1054.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1169.6" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1169.6" y="1155.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1169.6" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.6" y="1150.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1169.6" y="1123.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.6" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (14 samples, 1.21%)</title><rect x="1170.6" y="1187.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (14 samples, 1.21%)</title><rect x="1170.6" y="1171.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (14 samples, 1.21%)</title><rect x="1170.6" y="1155.0" width="14.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (14 samples, 1.21%)</title><rect x="1170.6" y="1139.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (14 samples, 1.21%)</title><rect x="1170.6" y="1123.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.6" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (14 samples, 1.21%)</title><rect x="1170.6" y="1107.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1173.6" y="1118.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.17%)</title><rect x="1170.6" y="1091.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.6" y="1102.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.17%)</title><rect x="1170.6" y="1075.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.6" y="1086.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.17%)</title><rect x="1170.6" y="1059.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.17%)</title><rect x="1170.6" y="1043.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.17%)</title><rect x="1170.6" y="1027.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1170.6" y="1011.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.6" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.17%)</title><rect x="1170.6" y="995.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.6" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.17%)</title><rect x="1170.6" y="979.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.6" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1170.6" y="963.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.6" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1170.6" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1170.6" y="931.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1170.6" y="915.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.6" y="926.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1170.6" y="899.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.6" y="910.0"></text>
</g>
<g>
<title>ciField::initialize_from(fieldDescriptor*) (1 samples, 0.09%)</title><rect x="1170.6" y="883.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::vm_symbol_at(int) (1 samples, 0.09%)</title><rect x="1170.6" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.6" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.09%)</title><rect x="1171.6" y="963.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.6" y="974.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1171.6" y="947.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1171.6" y="931.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1171.6" y="915.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.6" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1171.6" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.09%)</title><rect x="1171.6" y="883.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.78%)</title><rect x="1172.6" y="1091.0" width="9.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.78%)</title><rect x="1172.6" y="1075.0" width="9.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (9 samples, 0.78%)</title><rect x="1172.6" y="1059.0" width="9.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 0.78%)</title><rect x="1172.6" y="1043.0" width="9.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.6" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.78%)</title><rect x="1172.6" y="1027.0" width="9.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.78%)</title><rect x="1172.6" y="1011.0" width="9.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.6" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1172.6" y="995.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="1006.0"></text>
</g>
<g>
<title>ciMethod::has_balanced_monitors() (1 samples, 0.09%)</title><rect x="1172.6" y="979.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.6" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1173.7" y="995.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1173.7" y="979.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1173.7" y="963.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1173.7" y="947.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1173.7" y="931.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1173.7" y="915.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1173.7" y="899.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.35%)</title><rect x="1173.7" y="883.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.35%)</title><rect x="1173.7" y="867.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.35%)</title><rect x="1173.7" y="851.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.35%)</title><rect x="1173.7" y="835.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1173.7" y="819.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.7" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1173.7" y="803.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1173.7" y="787.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1173.7" y="771.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1173.7" y="755.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1173.7" y="739.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1173.7" y="723.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1173.7" y="707.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1173.7" y="691.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1173.7" y="675.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1173.7" y="659.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1173.7" y="643.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1173.7" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="638.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1173.7" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.09%)</title><rect x="1173.7" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>BranchData::cell_count() const (1 samples, 0.09%)</title><rect x="1173.7" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="611.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.7" y="622.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="595.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1174.7" y="579.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="590.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.7" y="574.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1174.7" y="547.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.7" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.7" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.7" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.7" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.7" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="451.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.7" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="435.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.7" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1174.7" y="419.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="430.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1174.7" y="403.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.7" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.7" y="718.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1175.7" y="691.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.7" y="814.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.09%)</title><rect x="1176.7" y="787.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1176.7" y="771.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.7" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1176.7" y="755.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.7" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1176.7" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.7" y="750.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.09%)</title><rect x="1176.7" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.7" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.09%)</title><rect x="1176.7" y="707.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.7" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.35%)</title><rect x="1177.7" y="995.0" width="4.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.7" y="979.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.7" y="963.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.7" y="947.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.7" y="931.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.7" y="915.0" width="3.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.7" y="899.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.7" y="883.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.7" y="867.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.7" y="851.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.7" y="835.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.7" y="819.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1177.7" y="803.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1177.7" y="787.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1177.7" y="771.0" width="3.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1177.7" y="755.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1177.7" y="739.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1177.7" y="723.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.7" y="707.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.7" y="691.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.7" y="675.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.7" y="659.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.7" y="643.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.7" y="627.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.7" y="611.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.7" y="595.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.7" y="579.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.7" y="563.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.7" y="547.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.7" y="531.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.7" y="515.0" width="2.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1177.7" y="499.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1177.7" y="483.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1177.7" y="467.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1177.7" y="451.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1177.7" y="435.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1177.7" y="419.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*) (1 samples, 0.09%)</title><rect x="1177.7" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1177.7" y="387.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="403.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.8" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1178.8" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1178.8" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1178.8" y="339.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1178.8" y="323.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1178.8" y="307.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="291.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="275.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1178.8" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.09%)</title><rect x="1178.8" y="243.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.09%)</title><rect x="1178.8" y="227.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1179.8" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.8" y="718.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.09%)</title><rect x="1179.8" y="691.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="979.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="963.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="947.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="931.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="915.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="899.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="883.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="867.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="835.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="803.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1180.8" y="787.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1180.8" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1180.8" y="755.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1180.8" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1180.8" y="723.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1180.8" y="707.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="675.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="659.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1180.8" y="643.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.09%)</title><rect x="1180.8" y="611.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1180.8" y="595.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1180.8" y="579.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1180.8" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1180.8" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1181.8" y="1091.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1181.8" y="1075.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1181.8" y="1059.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1181.8" y="1043.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1181.8" y="1027.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1181.8" y="1011.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1181.8" y="995.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1181.8" y="979.0" width="3.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1181.8" y="963.0" width="3.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1181.8" y="947.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1181.8" y="931.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1181.8" y="915.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1181.8" y="899.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1181.8" y="883.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1181.8" y="867.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1181.8" y="851.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1181.8" y="835.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1181.8" y="819.0" width="3.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="830.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1181.8" y="803.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1181.8" y="787.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*) (1 samples, 0.09%)</title><rect x="1181.8" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1181.8" y="755.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1181.8" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1182.8" y="803.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="771.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="739.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="723.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="675.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="643.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="611.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="595.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="579.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="563.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="483.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="435.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="403.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="371.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="355.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="339.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="307.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="275.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="259.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="243.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="227.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="211.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="195.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="179.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="163.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="147.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="131.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="115.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="99.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.09%)</title><rect x="1182.8" y="83.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.8" y="67.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="78.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.8" y="51.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="62.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1182.8" y="35.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.9" y="787.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1183.9" y="771.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1183.9" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1183.9" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1183.9" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1183.9" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.09%)</title><rect x="1183.9" y="691.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.9" y="702.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="675.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="686.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="659.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.9" y="670.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="643.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="654.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.09%)</title><rect x="1183.9" y="627.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="638.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.09%)</title><rect x="1183.9" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="622.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.09%)</title><rect x="1184.9" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="1198.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.09%)</title><rect x="1184.9" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="1182.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="1155.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.9" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="1184.9" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="1150.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.09%)</title><rect x="1185.9" y="1219.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.09%)</title><rect x="1185.9" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.9" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1187.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1185.9" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="1182.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1185.9" y="1155.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="1166.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1185.9" y="1139.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.9" y="1150.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.09%)</title><rect x="1185.9" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="1134.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.09%)</title><rect x="1185.9" y="1107.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.9" y="1118.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="1091.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="1102.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.09%)</title><rect x="1186.9" y="1219.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="1230.0"></text>
</g>
<g>
<title>ciObjectFactory::remove_symbols() (1 samples, 0.09%)</title><rect x="1186.9" y="1203.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.9" y="1214.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1188.0" y="1251.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.0" y="1262.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.09%)</title><rect x="1188.0" y="1235.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.0" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1188.0" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.0" y="1230.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1188.0" y="1203.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1191.0" y="1214.0"></text>
</g>
<g>
<title>nmethod::scope_desc_at(unsigned char*) (1 samples, 0.09%)</title><rect x="1188.0" y="1187.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.0" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::ScopeDesc(nmethod const*, int, int, bool, bool) (1 samples, 0.09%)</title><rect x="1188.0" y="1171.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.0" y="1182.0"></text>
</g>
<g>
<title>ScopeDesc::decode_object_values(int) (1 samples, 0.09%)</title><rect x="1188.0" y="1155.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.0" y="1166.0"></text>
</g>
<g>
<title>DebugInfoReadStream::read_object_value() (1 samples, 0.09%)</title><rect x="1188.0" y="1139.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="1150.0"></text>
</g>
<g>
<title>ObjectValue::read_object(DebugInfoReadStream*) (1 samples, 0.09%)</title><rect x="1188.0" y="1123.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="1134.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1283.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.0" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1278.0"></text>
</g>
<g>
<title>SafepointSynchronize::end() (1 samples, 0.09%)</title><rect x="1189.0" y="1251.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1262.0"></text>
</g>
</g>
</svg>
