<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (186 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 7.53%)</title><rect x="10.0" y="1011.0" width="88.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 7.53%)</title><rect x="10.0" y="995.0" width="88.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (14 samples, 7.53%)</title><rect x="10.0" y="979.0" width="88.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.54%)</title><rect x="10.0" y="963.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.54%)</title><rect x="10.0" y="947.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.54%)</title><rect x="10.0" y="931.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$333/95865826.accept (1 samples, 0.54%)</title><rect x="10.0" y="915.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.54%)</title><rect x="10.0" y="899.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.54%)</title><rect x="10.0" y="883.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.54%)</title><rect x="10.0" y="867.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 2.15%)</title><rect x="16.3" y="963.0" width="25.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="974.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$332/553961340.accept (4 samples, 2.15%)</title><rect x="16.3" y="947.0" width="25.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.3" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 2.15%)</title><rect x="16.3" y="931.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.3" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 1.61%)</title><rect x="16.3" y="915.0" width="19.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 1.61%)</title><rect x="16.3" y="899.0" width="19.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 1.61%)</title><rect x="16.3" y="883.0" width="19.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.61%)</title><rect x="16.3" y="867.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.61%)</title><rect x="16.3" y="851.0" width="19.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.61%)</title><rect x="16.3" y="835.0" width="19.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.54%)</title><rect x="35.4" y="915.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="38.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.54%)</title><rect x="35.4" y="899.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="38.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.84%)</title><rect x="41.7" y="963.0" width="57.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.7" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.84%)</title><rect x="41.7" y="947.0" width="57.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.7" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 3.23%)</title><rect x="41.7" y="931.0" width="38.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.7" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.69%)</title><rect x="41.7" y="915.0" width="31.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.7" y="926.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.69%)</title><rect x="41.7" y="899.0" width="31.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.7" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.61%)</title><rect x="41.7" y="883.0" width="19.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.54%)</title><rect x="41.7" y="867.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="44.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.54%)</title><rect x="41.7" y="851.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="44.7" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.54%)</title><rect x="41.7" y="835.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.54%)</title><rect x="41.7" y="819.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="44.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.54%)</title><rect x="41.7" y="803.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.54%)</title><rect x="41.7" y="787.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.54%)</title><rect x="41.7" y="771.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.54%)</title><rect x="41.7" y="755.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.54%)</title><rect x="41.7" y="739.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="44.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.08%)</title><rect x="48.1" y="867.0" width="12.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 1.08%)</title><rect x="48.1" y="851.0" width="12.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.1" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.54%)</title><rect x="54.4" y="835.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.54%)</title><rect x="54.4" y="819.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.54%)</title><rect x="54.4" y="803.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.4" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.54%)</title><rect x="54.4" y="787.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.4" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.54%)</title><rect x="54.4" y="771.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.4" y="782.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.54%)</title><rect x="54.4" y="755.0" width="6.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="57.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 1.08%)</title><rect x="60.8" y="883.0" width="12.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="63.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.54%)</title><rect x="60.8" y="867.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.54%)</title><rect x="67.1" y="867.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.54%)</title><rect x="67.1" y="851.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.54%)</title><rect x="67.1" y="835.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.54%)</title><rect x="67.1" y="819.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.54%)</title><rect x="67.1" y="803.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (1 samples, 0.54%)</title><rect x="67.1" y="787.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="70.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.54%)</title><rect x="67.1" y="771.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.1" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.54%)</title><rect x="67.1" y="755.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.54%)</title><rect x="73.4" y="915.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.54%)</title><rect x="73.4" y="899.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.54%)</title><rect x="73.4" y="883.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="76.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.54%)</title><rect x="73.4" y="867.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.54%)</title><rect x="73.4" y="851.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="76.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.08%)</title><rect x="79.8" y="931.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="79.8" y="915.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="82.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.54%)</title><rect x="79.8" y="899.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.54%)</title><rect x="79.8" y="883.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.54%)</title><rect x="79.8" y="867.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.54%)</title><rect x="79.8" y="851.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.54%)</title><rect x="86.1" y="915.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.54%)</title><rect x="86.1" y="899.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.54%)</title><rect x="86.1" y="883.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.54%)</title><rect x="86.1" y="867.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.54%)</title><rect x="86.1" y="851.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.54%)</title><rect x="86.1" y="835.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="89.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.54%)</title><rect x="86.1" y="819.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.addSize (1 samples, 0.54%)</title><rect x="86.1" y="803.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.54%)</title><rect x="86.1" y="787.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.54%)</title><rect x="86.1" y="771.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.1" y="782.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.54%)</title><rect x="86.1" y="755.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.1" y="766.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.54%)</title><rect x="86.1" y="739.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.1" y="750.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.54%)</title><rect x="86.1" y="723.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="89.1" y="734.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.54%)</title><rect x="86.1" y="707.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.1" y="718.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.54%)</title><rect x="86.1" y="691.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.1" y="702.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.54%)</title><rect x="86.1" y="675.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.54%)</title><rect x="92.5" y="931.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.54%)</title><rect x="92.5" y="915.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.5" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.54%)</title><rect x="92.5" y="899.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="95.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.54%)</title><rect x="92.5" y="883.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.54%)</title><rect x="92.5" y="867.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="95.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.advance (1 samples, 0.54%)</title><rect x="92.5" y="851.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.54%)</title><rect x="92.5" y="835.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.54%)</title><rect x="92.5" y="819.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.casHead (1 samples, 0.54%)</title><rect x="92.5" y="803.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (89 samples, 47.85%)</title><rect x="98.8" y="1011.0" width="564.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.8" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (89 samples, 47.85%)</title><rect x="98.8" y="995.0" width="564.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.8" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (89 samples, 47.85%)</title><rect x="98.8" y="979.0" width="564.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.8" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/1129871311.run (84 samples, 45.16%)</title><rect x="98.8" y="963.0" width="532.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.8" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (84 samples, 45.16%)</title><rect x="98.8" y="947.0" width="532.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.8" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (84 samples, 45.16%)</title><rect x="98.8" y="931.0" width="532.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="101.8" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="98.8" y="915.0" width="6.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="101.8" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="98.8" y="899.0" width="6.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="101.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (83 samples, 44.62%)</title><rect x="105.2" y="915.0" width="526.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.2" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (9 samples, 4.84%)</title><rect x="111.5" y="899.0" width="57.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="114.5" y="910.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.30%)</title><rect x="117.8" y="883.0" width="50.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.8" y="894.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.30%)</title><rect x="117.8" y="867.0" width="50.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.8" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 4.30%)</title><rect x="117.8" y="851.0" width="50.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.8" y="862.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.54%)</title><rect x="117.8" y="835.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.54%)</title><rect x="117.8" y="819.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.54%)</title><rect x="117.8" y="803.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$366/1373227806.accept (1 samples, 0.54%)</title><rect x="117.8" y="787.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="120.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 3.76%)</title><rect x="124.2" y="835.0" width="44.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="127.2" y="846.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$366/1373227806.accept (7 samples, 3.76%)</title><rect x="124.2" y="819.0" width="44.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.2" y="830.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (7 samples, 3.76%)</title><rect x="124.2" y="803.0" width="44.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="127.2" y="814.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 3.76%)</title><rect x="124.2" y="787.0" width="44.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="127.2" y="798.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 3.76%)</title><rect x="124.2" y="771.0" width="44.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.2" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 3.76%)</title><rect x="124.2" y="755.0" width="44.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.2" y="766.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 2.15%)</title><rect x="124.2" y="739.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="127.2" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 2.15%)</title><rect x="124.2" y="723.0" width="25.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="127.2" y="734.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$355/1801262339.accept (2 samples, 1.08%)</title><rect x="124.2" y="707.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="127.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$354/993793151.accept (2 samples, 1.08%)</title><rect x="136.9" y="707.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="139.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.61%)</title><rect x="149.6" y="739.0" width="19.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="152.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (16 samples, 8.60%)</title><rect x="168.6" y="899.0" width="101.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="171.6" y="910.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (16 samples, 8.60%)</title><rect x="168.6" y="883.0" width="101.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.6" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (16 samples, 8.60%)</title><rect x="168.6" y="867.0" width="101.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.6" y="878.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 8.60%)</title><rect x="168.6" y="851.0" width="101.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="171.6" y="862.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 8.60%)</title><rect x="168.6" y="835.0" width="101.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="171.6" y="846.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 8.60%)</title><rect x="168.6" y="819.0" width="101.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="171.6" y="830.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 2.69%)</title><rect x="168.6" y="803.0" width="31.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="171.6" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 2.69%)</title><rect x="168.6" y="787.0" width="31.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.6" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 2.69%)</title><rect x="168.6" y="771.0" width="31.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="171.6" y="782.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="168.6" y="755.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="171.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.54%)</title><rect x="168.6" y="739.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="171.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.54%)</title><rect x="168.6" y="723.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="171.6" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.54%)</title><rect x="168.6" y="707.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="171.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.54%)</title><rect x="174.9" y="755.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="177.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.54%)</title><rect x="174.9" y="739.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.08%)</title><rect x="181.3" y="755.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.3" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="181.3" y="739.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="184.3" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.54%)</title><rect x="181.3" y="723.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="184.3" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.54%)</title><rect x="181.3" y="707.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="184.3" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.54%)</title><rect x="181.3" y="691.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="184.3" y="702.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.54%)</title><rect x="181.3" y="675.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="184.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.54%)</title><rect x="187.6" y="739.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.54%)</title><rect x="187.6" y="723.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.54%)</title><rect x="194.0" y="755.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.54%)</title><rect x="194.0" y="739.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.getMask (1 samples, 0.54%)</title><rect x="194.0" y="723.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 3.23%)</title><rect x="200.3" y="803.0" width="38.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="203.3" y="814.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.54%)</title><rect x="200.3" y="787.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="203.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.54%)</title><rect x="200.3" y="771.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.54%)</title><rect x="206.7" y="787.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.54%)</title><rect x="206.7" y="771.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.54%)</title><rect x="206.7" y="755.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="209.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.54%)</title><rect x="206.7" y="739.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.54%)</title><rect x="206.7" y="723.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="209.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 2.15%)</title><rect x="213.0" y="787.0" width="25.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.0" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 2.15%)</title><rect x="213.0" y="771.0" width="25.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.0" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.15%)</title><rect x="213.0" y="755.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.0" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.15%)</title><rect x="213.0" y="739.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.0" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.15%)</title><rect x="213.0" y="723.0" width="25.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="216.0" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.54%)</title><rect x="213.0" y="707.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.54%)</title><rect x="213.0" y="691.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.54%)</title><rect x="213.0" y="675.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.54%)</title><rect x="213.0" y="659.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.54%)</title><rect x="213.0" y="643.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="216.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.54%)</title><rect x="213.0" y="627.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.54%)</title><rect x="213.0" y="611.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.54%)</title><rect x="219.4" y="707.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.54%)</title><rect x="219.4" y="691.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.54%)</title><rect x="219.4" y="675.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.54%)</title><rect x="219.4" y="659.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.54%)</title><rect x="219.4" y="643.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.54%)</title><rect x="225.7" y="707.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.54%)</title><rect x="225.7" y="691.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.54%)</title><rect x="225.7" y="675.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="228.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.54%)</title><rect x="225.7" y="659.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.54%)</title><rect x="232.0" y="707.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="235.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.54%)</title><rect x="232.0" y="691.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="235.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.54%)</title><rect x="232.0" y="675.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 2.69%)</title><rect x="238.4" y="803.0" width="31.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.4" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 2.69%)</title><rect x="238.4" y="787.0" width="31.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.4" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 2.69%)</title><rect x="238.4" y="771.0" width="31.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.4" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 2.69%)</title><rect x="238.4" y="755.0" width="31.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.4" y="766.0">co..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 2.69%)</title><rect x="238.4" y="739.0" width="31.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.4" y="750.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (57 samples, 30.65%)</title><rect x="270.1" y="899.0" width="361.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.1" y="910.0">com/linecorp/decaton/processor/runtime/internal/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (5 samples, 2.69%)</title><rect x="282.8" y="883.0" width="31.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.8" y="894.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (5 samples, 2.69%)</title><rect x="282.8" y="867.0" width="31.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.8" y="878.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.69%)</title><rect x="282.8" y="851.0" width="31.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="285.8" y="862.0">ch..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.69%)</title><rect x="282.8" y="835.0" width="31.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.8" y="846.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.61%)</title><rect x="295.5" y="819.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.61%)</title><rect x="295.5" y="803.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (19 samples, 10.22%)</title><rect x="314.5" y="883.0" width="120.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.5" y="894.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (17 samples, 9.14%)</title><rect x="314.5" y="867.0" width="107.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.5" y="878.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 3.23%)</title><rect x="320.9" y="851.0" width="38.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.9" y="862.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 3.23%)</title><rect x="320.9" y="835.0" width="38.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.9" y="846.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.69%)</title><rect x="320.9" y="819.0" width="31.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.9" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.54%)</title><rect x="333.5" y="803.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.5" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.54%)</title><rect x="333.5" y="787.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.5" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.54%)</title><rect x="333.5" y="771.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.54%)</title><rect x="333.5" y="755.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="336.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.54%)</title><rect x="333.5" y="739.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="336.5" y="750.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.54%)</title><rect x="333.5" y="723.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="336.5" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.54%)</title><rect x="339.9" y="803.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.9" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="346.2" y="803.0" width="6.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="349.2" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="352.6" y="819.0" width="6.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="355.6" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 5.38%)</title><rect x="358.9" y="851.0" width="63.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="361.9" y="862.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 5.38%)</title><rect x="358.9" y="835.0" width="63.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="361.9" y="846.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 5.38%)</title><rect x="358.9" y="819.0" width="63.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.9" y="830.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 4.30%)</title><rect x="371.6" y="803.0" width="50.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="374.6" y="814.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.69%)</title><rect x="390.6" y="787.0" width="31.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="393.6" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.54%)</title><rect x="409.7" y="771.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.54%)</title><rect x="416.0" y="771.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 1.08%)</title><rect x="422.4" y="867.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 1.08%)</title><rect x="422.4" y="851.0" width="12.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="425.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.08%)</title><rect x="422.4" y="835.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.08%)</title><rect x="422.4" y="819.0" width="12.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.4" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.08%)</title><rect x="422.4" y="803.0" width="12.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="425.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="428.7" y="787.0" width="6.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="431.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (30 samples, 16.13%)</title><rect x="435.1" y="883.0" width="190.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="438.1" y="894.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (30 samples, 16.13%)</title><rect x="435.1" y="867.0" width="190.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.1" y="878.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$274/949159335.process (22 samples, 11.83%)</title><rect x="435.1" y="851.0" width="139.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="438.1" y="862.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (22 samples, 11.83%)</title><rect x="435.1" y="835.0" width="139.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.1" y="846.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 11.29%)</title><rect x="435.1" y="819.0" width="133.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="438.1" y="830.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (17 samples, 9.14%)</title><rect x="441.4" y="803.0" width="107.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.4" y="814.0">com/linecorp/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (17 samples, 9.14%)</title><rect x="441.4" y="787.0" width="107.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="444.4" y="798.0">java/lang/Thr..</text>
</g>
<g>
<title>JVM_Sleep (16 samples, 8.60%)</title><rect x="447.7" y="771.0" width="101.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="450.7" y="782.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.54%)</title><rect x="460.4" y="755.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="463.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="466.8" y="755.0" width="6.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="469.8" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 2.15%)</title><rect x="473.1" y="755.0" width="25.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="476.1" y="766.0">_..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="492.2" y="739.0" width="6.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="495.2" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.54%)</title><rect x="498.5" y="755.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.5" y="766.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (7 samples, 3.76%)</title><rect x="504.8" y="755.0" width="44.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="507.8" y="766.0">os::..</text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.54%)</title><rect x="504.8" y="739.0" width="6.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="507.8" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (6 samples, 3.23%)</title><rect x="511.2" y="739.0" width="38.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="514.2" y="750.0">__p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.08%)</title><rect x="549.2" y="803.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="552.2" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="561.9" y="803.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="564.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.54%)</title><rect x="568.3" y="819.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="571.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.08%)</title><rect x="574.6" y="851.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="577.6" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 1.08%)</title><rect x="574.6" y="835.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="577.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.15%)</title><rect x="587.3" y="851.0" width="25.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.3" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.61%)</title><rect x="593.7" y="835.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="596.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.61%)</title><rect x="593.7" y="819.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="596.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.61%)</title><rect x="593.7" y="803.0" width="19.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 1.61%)</title><rect x="593.7" y="787.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 1.61%)</title><rect x="593.7" y="771.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="596.7" y="782.0"></text>
</g>
<g>
<title>itable stub (2 samples, 1.08%)</title><rect x="600.0" y="755.0" width="12.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="603.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (2 samples, 1.08%)</title><rect x="612.7" y="851.0" width="12.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.7" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1754662105.linkToTargetMethod (1 samples, 0.54%)</title><rect x="625.4" y="883.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="628.4" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/936580213.invokeStatic_L3_L (1 samples, 0.54%)</title><rect x="625.4" y="867.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="628.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/872593123.get$Lambda (1 samples, 0.54%)</title><rect x="625.4" y="851.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="628.4" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="625.4" y="835.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="628.4" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.54%)</title><rect x="625.4" y="819.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="628.4" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.54%)</title><rect x="625.4" y="803.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="628.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.08%)</title><rect x="631.7" y="963.0" width="12.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.7" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.08%)</title><rect x="631.7" y="947.0" width="12.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="634.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.08%)</title><rect x="631.7" y="931.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.7" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.08%)</title><rect x="631.7" y="915.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="634.7" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="638.1" y="899.0" width="6.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="641.1" y="910.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="638.1" y="883.0" width="6.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="641.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.61%)</title><rect x="644.4" y="963.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.54%)</title><rect x="644.4" y="947.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="647.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.54%)</title><rect x="644.4" y="931.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.54%)</title><rect x="644.4" y="915.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.54%)</title><rect x="644.4" y="899.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.54%)</title><rect x="644.4" y="883.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.54%)</title><rect x="644.4" y="867.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.54%)</title><rect x="650.8" y="947.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="653.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.54%)</title><rect x="657.1" y="947.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.1" y="958.0"></text>
</g>
<g>
<title>start_thread (83 samples, 44.62%)</title><rect x="663.4" y="1011.0" width="526.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="666.4" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (83 samples, 44.62%)</title><rect x="663.4" y="995.0" width="526.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="666.4" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 3.76%)</title><rect x="663.4" y="979.0" width="44.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="666.4" y="990.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 3.23%)</title><rect x="663.4" y="963.0" width="38.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="666.4" y="974.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.23%)</title><rect x="663.4" y="947.0" width="38.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="666.4" y="958.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.15%)</title><rect x="669.8" y="931.0" width="25.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="672.8" y="942.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.08%)</title><rect x="682.5" y="915.0" width="12.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.5" y="926.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.54%)</title><rect x="688.8" y="899.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="691.8" y="910.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.54%)</title><rect x="695.2" y="931.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="698.2" y="942.0"></text>
</g>
<g>
<title>Thread::is_VM_thread() const (1 samples, 0.54%)</title><rect x="701.5" y="963.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="704.5" y="974.0"></text>
</g>
<g>
<title>JavaThread::run() (76 samples, 40.86%)</title><rect x="707.8" y="979.0" width="482.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="710.8" y="990.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (76 samples, 40.86%)</title><rect x="707.8" y="963.0" width="482.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="710.8" y="974.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (76 samples, 40.86%)</title><rect x="707.8" y="947.0" width="482.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="710.8" y="958.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (75 samples, 40.32%)</title><rect x="707.8" y="931.0" width="475.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.8" y="942.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (71 samples, 38.17%)</title><rect x="707.8" y="915.0" width="450.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="710.8" y="926.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (71 samples, 38.17%)</title><rect x="707.8" y="899.0" width="450.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="710.8" y="910.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 23.12%)</title><rect x="707.8" y="883.0" width="272.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="710.8" y="894.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.08%)</title><rect x="707.8" y="867.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="710.8" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.08%)</title><rect x="707.8" y="851.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="710.8" y="862.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.08%)</title><rect x="720.5" y="867.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="723.5" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.54%)</title><rect x="726.9" y="851.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="729.9" y="862.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.54%)</title><rect x="726.9" y="835.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="729.9" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.15%)</title><rect x="733.2" y="867.0" width="25.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="736.2" y="878.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.15%)</title><rect x="733.2" y="851.0" width="25.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.2" y="862.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 2.15%)</title><rect x="733.2" y="835.0" width="25.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="736.2" y="846.0">A..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.61%)</title><rect x="758.6" y="867.0" width="19.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="761.6" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.61%)</title><rect x="758.6" y="851.0" width="19.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="761.6" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.61%)</title><rect x="758.6" y="835.0" width="19.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="761.6" y="846.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 1.08%)</title><rect x="758.6" y="819.0" width="12.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="761.6" y="830.0"></text>
</g>
<g>
<title>Node::needs_anti_dependence_check() const (1 samples, 0.54%)</title><rect x="764.9" y="803.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.9" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.54%)</title><rect x="771.3" y="819.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="774.3" y="830.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.54%)</title><rect x="771.3" y="803.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="774.3" y="814.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.54%)</title><rect x="771.3" y="787.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="774.3" y="798.0"></text>
</g>
<g>
<title>loadPNode::memory_operand() const (1 samples, 0.54%)</title><rect x="771.3" y="771.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="774.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 16.67%)</title><rect x="777.6" y="867.0" width="196.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="780.6" y="878.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.08%)</title><rect x="777.6" y="851.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="780.6" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.08%)</title><rect x="790.3" y="851.0" width="12.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="793.3" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 4.30%)</title><rect x="803.0" y="851.0" width="50.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="806.0" y="862.0">Phase..</text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.54%)</title><rect x="841.1" y="835.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="844.1" y="846.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.54%)</title><rect x="847.4" y="835.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.4" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.30%)</title><rect x="853.8" y="851.0" width="50.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="856.8" y="862.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 2.69%)</title><rect x="872.8" y="835.0" width="31.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="875.8" y="846.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.08%)</title><rect x="891.8" y="819.0" width="12.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="894.8" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.61%)</title><rect x="904.5" y="851.0" width="19.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="907.5" y="862.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.54%)</title><rect x="910.9" y="835.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="913.9" y="846.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.54%)</title><rect x="917.2" y="835.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="920.2" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.54%)</title><rect x="917.2" y="819.0" width="6.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="920.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.08%)</title><rect x="923.5" y="851.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="926.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.08%)</title><rect x="923.5" y="835.0" width="12.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.5" y="846.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.54%)</title><rect x="936.2" y="851.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="939.2" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.54%)</title><rect x="936.2" y="835.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="939.2" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.54%)</title><rect x="936.2" y="819.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.2" y="830.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.54%)</title><rect x="936.2" y="803.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.2" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="936.2" y="787.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="939.2" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.54%)</title><rect x="942.6" y="851.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="945.6" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="942.6" y="835.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="945.6" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.54%)</title><rect x="948.9" y="851.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="951.9" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.61%)</title><rect x="955.3" y="851.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.3" y="862.0"></text>
</g>
<g>
<title>loadLNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;, Compile*) (1 samples, 0.54%)</title><rect x="974.3" y="867.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="977.3" y="878.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 12.90%)</title><rect x="980.6" y="883.0" width="152.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.6" y="894.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.54%)</title><rect x="980.6" y="867.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.54%)</title><rect x="987.0" y="867.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.54%)</title><rect x="987.0" y="851.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="835.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="819.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="803.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="787.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="990.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="771.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="755.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="739.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="990.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="723.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="990.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="707.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="691.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="675.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="659.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="990.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.54%)</title><rect x="987.0" y="643.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="990.0" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 8.60%)</title><rect x="993.3" y="867.0" width="101.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.3" y="878.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.08%)</title><rect x="993.3" y="851.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="996.3" y="862.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.54%)</title><rect x="999.7" y="835.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.08%)</title><rect x="1006.0" y="851.0" width="12.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1009.0" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 4.30%)</title><rect x="1018.7" y="851.0" width="50.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1021.7" y="862.0">Phase..</text>
</g>
<g>
<title>GetAndAddINode::Opcode() const (1 samples, 0.54%)</title><rect x="1025.1" y="835.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 3.23%)</title><rect x="1031.4" y="835.0" width="38.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1034.4" y="846.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 3.23%)</title><rect x="1031.4" y="819.0" width="38.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.4" y="830.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.54%)</title><rect x="1056.8" y="803.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.8" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.54%)</title><rect x="1056.8" y="787.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.54%)</title><rect x="1063.1" y="803.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.54%)</title><rect x="1069.5" y="851.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.08%)</title><rect x="1075.8" y="851.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1078.8" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.54%)</title><rect x="1082.2" y="835.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1085.2" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.54%)</title><rect x="1082.2" y="819.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1085.2" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.54%)</title><rect x="1088.5" y="851.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1091.5" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.54%)</title><rect x="1088.5" y="835.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1091.5" y="846.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1088.5" y="819.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.54%)</title><rect x="1088.5" y="803.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="787.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="771.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1091.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="755.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="739.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1091.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="723.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="707.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="691.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="675.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="659.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1091.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="643.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1091.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="627.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1091.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="611.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.5" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="595.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.5" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="579.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.5" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="563.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.5" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="547.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="531.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="515.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="499.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.5" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.54%)</title><rect x="1088.5" y="483.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.5" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="1088.5" y="467.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.5" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.69%)</title><rect x="1094.8" y="867.0" width="31.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.8" y="878.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.69%)</title><rect x="1094.8" y="851.0" width="31.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.8" y="862.0">Ph..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1101.2" y="835.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.2" y="846.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.54%)</title><rect x="1101.2" y="819.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1104.2" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.54%)</title><rect x="1101.2" y="803.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.2" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="1101.2" y="787.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.2" y="798.0"></text>
</g>
<g>
<title>MemBarAcquireNode::Opcode() const (1 samples, 0.54%)</title><rect x="1107.5" y="835.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.5" y="846.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 1.08%)</title><rect x="1113.9" y="835.0" width="12.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1116.9" y="846.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 1.08%)</title><rect x="1113.9" y="819.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.9" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.08%)</title><rect x="1113.9" y="803.0" width="12.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 1.08%)</title><rect x="1113.9" y="787.0" width="12.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1116.9" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="771.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="755.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="739.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1116.9" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="723.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.9" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="707.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1116.9" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="691.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1116.9" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="675.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1116.9" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="659.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="643.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="627.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="611.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="595.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="579.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.9" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="563.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.9" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="547.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1116.9" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="531.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.9" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="515.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.9" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="499.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="483.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1116.9" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.54%)</title><rect x="1113.9" y="467.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.9" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="1113.9" y="451.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1116.9" y="462.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.54%)</title><rect x="1120.2" y="771.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.2" y="782.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.54%)</title><rect x="1120.2" y="755.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.2" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.54%)</title><rect x="1126.6" y="867.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.54%)</title><rect x="1126.6" y="851.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.6" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.54%)</title><rect x="1126.6" y="835.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.6" y="846.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1126.6" y="819.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.6" y="830.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.54%)</title><rect x="1126.6" y="803.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.6" y="814.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.54%)</title><rect x="1126.6" y="787.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.6" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.15%)</title><rect x="1132.9" y="883.0" width="25.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="894.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.15%)</title><rect x="1132.9" y="867.0" width="25.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.9" y="878.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.15%)</title><rect x="1132.9" y="851.0" width="25.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="862.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.15%)</title><rect x="1132.9" y="835.0" width="25.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.9" y="846.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.15%)</title><rect x="1132.9" y="819.0" width="25.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="830.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.15%)</title><rect x="1132.9" y="803.0" width="25.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="814.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.15%)</title><rect x="1132.9" y="787.0" width="25.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="798.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.15%)</title><rect x="1132.9" y="771.0" width="25.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.9" y="782.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.15%)</title><rect x="1132.9" y="755.0" width="25.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.9" y="766.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.15%)</title><rect x="1132.9" y="739.0" width="25.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="750.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.15%)</title><rect x="1132.9" y="723.0" width="25.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="734.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.15%)</title><rect x="1132.9" y="707.0" width="25.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.9" y="718.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.61%)</title><rect x="1132.9" y="691.0" width="19.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.61%)</title><rect x="1132.9" y="675.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.61%)</title><rect x="1132.9" y="659.0" width="19.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.61%)</title><rect x="1132.9" y="643.0" width="19.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.61%)</title><rect x="1132.9" y="627.0" width="19.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.08%)</title><rect x="1132.9" y="611.0" width="12.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.08%)</title><rect x="1132.9" y="595.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.08%)</title><rect x="1132.9" y="579.0" width="12.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.08%)</title><rect x="1132.9" y="563.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.08%)</title><rect x="1132.9" y="547.0" width="12.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.08%)</title><rect x="1132.9" y="531.0" width="12.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.08%)</title><rect x="1132.9" y="515.0" width="12.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.08%)</title><rect x="1132.9" y="499.0" width="12.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.08%)</title><rect x="1132.9" y="483.0" width="12.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.08%)</title><rect x="1132.9" y="467.0" width="12.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.08%)</title><rect x="1132.9" y="451.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.08%)</title><rect x="1132.9" y="435.0" width="12.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.08%)</title><rect x="1132.9" y="419.0" width="12.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="403.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="387.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="371.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="355.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="339.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1132.9" y="323.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="307.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="291.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="275.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="259.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="243.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1132.9" y="227.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.9" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="211.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1132.9" y="195.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1132.9" y="179.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1132.9" y="163.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1132.9" y="147.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1132.9" y="131.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.9" y="142.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1132.9" y="115.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.9" y="126.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind) (1 samples, 0.54%)</title><rect x="1132.9" y="99.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.54%)</title><rect x="1132.9" y="83.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1132.9" y="67.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.9" y="78.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.54%)</title><rect x="1132.9" y="51.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.9" y="62.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.54%)</title><rect x="1132.9" y="35.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1139.2" y="403.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1139.2" y="387.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1139.2" y="371.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1139.2" y="355.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1139.2" y="339.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1139.2" y="323.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1139.2" y="307.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1139.2" y="291.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1139.2" y="275.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1139.2" y="259.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.2" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1139.2" y="243.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.2" y="254.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1139.2" y="227.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.2" y="238.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.54%)</title><rect x="1139.2" y="211.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.2" y="222.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.54%)</title><rect x="1145.6" y="611.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.6" y="622.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.54%)</title><rect x="1145.6" y="595.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.6" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.54%)</title><rect x="1145.6" y="579.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.6" y="590.0"></text>
</g>
<g>
<title>AndINode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1145.6" y="563.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.6" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="691.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="675.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="659.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="643.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="627.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="611.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1151.9" y="595.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="579.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="563.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="547.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="531.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="515.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1151.9" y="499.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="483.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="467.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="451.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="435.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="419.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1151.9" y="403.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1151.9" y="387.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1151.9" y="371.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1151.9" y="355.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1151.9" y="339.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1151.9" y="323.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1151.9" y="307.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.9" y="318.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.54%)</title><rect x="1151.9" y="291.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="302.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.54%)</title><rect x="1151.9" y="275.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="286.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.54%)</title><rect x="1151.9" y="259.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="270.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::propagate(MethodLiveness*) (1 samples, 0.54%)</title><rect x="1151.9" y="243.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.9" y="254.0"></text>
</g>
<g>
<title>BitMap::set_union_with_result(BitMap) (1 samples, 0.54%)</title><rect x="1151.9" y="227.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.9" y="238.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 2.15%)</title><rect x="1158.3" y="915.0" width="25.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1161.3" y="926.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 2.15%)</title><rect x="1158.3" y="899.0" width="25.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.3" y="910.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 2.15%)</title><rect x="1158.3" y="883.0" width="25.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="894.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 2.15%)</title><rect x="1158.3" y="867.0" width="25.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.3" y="878.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.08%)</title><rect x="1158.3" y="851.0" width="12.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.3" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.08%)</title><rect x="1158.3" y="835.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.08%)</title><rect x="1158.3" y="819.0" width="12.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.08%)</title><rect x="1158.3" y="803.0" width="12.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.3" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.08%)</title><rect x="1158.3" y="787.0" width="12.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.3" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.08%)</title><rect x="1158.3" y="771.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.3" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.54%)</title><rect x="1158.3" y="755.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.3" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.54%)</title><rect x="1158.3" y="739.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1161.3" y="750.0"></text>
</g>
<g>
<title>Canonicalizer::do_If(If*) (1 samples, 0.54%)</title><rect x="1158.3" y="723.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1161.3" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1164.6" y="755.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.54%)</title><rect x="1164.6" y="739.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.54%)</title><rect x="1164.6" y="723.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.54%)</title><rect x="1164.6" y="707.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.54%)</title><rect x="1164.6" y="691.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1164.6" y="675.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.6" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.54%)</title><rect x="1164.6" y="659.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.6" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.54%)</title><rect x="1164.6" y="643.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.6" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.54%)</title><rect x="1164.6" y="627.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.6" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.54%)</title><rect x="1164.6" y="611.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.6" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1164.6" y="595.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.6" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.54%)</title><rect x="1164.6" y="579.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.54%)</title><rect x="1164.6" y="563.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.6" y="574.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.54%)</title><rect x="1164.6" y="547.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="558.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle) (1 samples, 0.54%)</title><rect x="1164.6" y="531.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.6" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1164.6" y="515.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.6" y="526.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1164.6" y="499.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.54%)</title><rect x="1171.0" y="851.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.0" y="862.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.54%)</title><rect x="1171.0" y="835.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="846.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.54%)</title><rect x="1171.0" y="819.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.0" y="830.0"></text>
</g>
<g>
<title>LIR_Assembler::const2reg(LIR_OprDesc*, LIR_OprDesc*, LIR_PatchCode, CodeEmitInfo*) (1 samples, 0.54%)</title><rect x="1171.0" y="803.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.0" y="814.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.54%)</title><rect x="1171.0" y="787.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.0" y="798.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.54%)</title><rect x="1171.0" y="771.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.0" y="782.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.54%)</title><rect x="1171.0" y="755.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.0" y="766.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.54%)</title><rect x="1177.3" y="851.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="862.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.54%)</title><rect x="1177.3" y="835.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.3" y="846.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.54%)</title><rect x="1177.3" y="819.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="830.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.54%)</title><rect x="1183.7" y="931.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="942.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.54%)</title><rect x="1183.7" y="915.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="926.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.54%)</title><rect x="1183.7" y="899.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="910.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.54%)</title><rect x="1183.7" y="883.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1186.7" y="894.0"></text>
</g>
</g>
</svg>
