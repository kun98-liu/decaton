<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (799 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.13%)</title><rect x="10.0" y="755.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (218 samples, 27.28%)</title><rect x="11.5" y="755.0" width="321.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.5" y="766.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (218 samples, 27.28%)</title><rect x="11.5" y="739.0" width="321.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.5" y="750.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (217 samples, 27.16%)</title><rect x="13.0" y="723.0" width="320.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.0" y="734.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.50%)</title><rect x="13.0" y="707.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.50%)</title><rect x="13.0" y="691.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.50%)</title><rect x="13.0" y="675.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.38%)</title><rect x="14.4" y="659.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.4" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.38%)</title><rect x="14.4" y="643.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.38%)</title><rect x="14.4" y="627.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.38%)</title><rect x="14.4" y="611.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.4" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.13%)</title><rect x="14.4" y="595.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.4" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.13%)</title><rect x="14.4" y="579.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="17.4" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.13%)</title><rect x="15.9" y="595.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.13%)</title><rect x="15.9" y="579.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.9" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="17.4" y="595.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="17.4" y="579.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.4" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="17.4" y="563.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.4" y="574.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.13%)</title><rect x="17.4" y="547.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.63%)</title><rect x="18.9" y="707.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.63%)</title><rect x="18.9" y="691.0" width="7.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.63%)</title><rect x="18.9" y="675.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1253559831.accept (4 samples, 0.50%)</title><rect x="18.9" y="659.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.50%)</title><rect x="18.9" y="643.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.9" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.50%)</title><rect x="18.9" y="627.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.9" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.38%)</title><rect x="20.3" y="611.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.13%)</title><rect x="24.8" y="659.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.8" y="670.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (183 samples, 22.90%)</title><rect x="26.2" y="707.0" width="270.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.2" y="718.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1643453308.accept (176 samples, 22.03%)</title><rect x="26.2" y="691.0" width="260.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.2" y="702.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (176 samples, 22.03%)</title><rect x="26.2" y="675.0" width="260.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.2" y="686.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (159 samples, 19.90%)</title><rect x="26.2" y="659.0" width="234.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="29.2" y="670.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (157 samples, 19.65%)</title><rect x="27.7" y="643.0" width="231.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.7" y="654.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (157 samples, 19.65%)</title><rect x="27.7" y="627.0" width="231.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="638.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 19.65%)</title><rect x="27.7" y="611.0" width="231.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.7" y="622.0">java/util/concurrent/Executors$..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 19.65%)</title><rect x="27.7" y="595.0" width="231.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="606.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 19.65%)</title><rect x="27.7" y="579.0" width="231.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="30.7" y="590.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (131 samples, 16.40%)</title><rect x="27.7" y="563.0" width="193.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.7" y="574.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.88%)</title><rect x="27.7" y="547.0" width="22.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.7" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.88%)</title><rect x="27.7" y="531.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="30.7" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.88%)</title><rect x="27.7" y="515.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.13%)</title><rect x="48.4" y="499.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.4" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 2.00%)</title><rect x="49.9" y="547.0" width="23.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 2.00%)</title><rect x="49.9" y="531.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.9" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.25%)</title><rect x="70.6" y="515.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.25%)</title><rect x="70.6" y="499.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (100 samples, 12.52%)</title><rect x="73.5" y="547.0" width="147.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="76.5" y="558.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (100 samples, 12.52%)</title><rect x="73.5" y="531.0" width="147.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.5" y="542.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (100 samples, 12.52%)</title><rect x="73.5" y="515.0" width="147.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.5" y="526.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (100 samples, 12.52%)</title><rect x="73.5" y="499.0" width="147.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="76.5" y="510.0">java/util/concurren..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (99 samples, 12.39%)</title><rect x="75.0" y="483.0" width="146.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="78.0" y="494.0">jdk/internal/misc/..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.13%)</title><rect x="77.9" y="467.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="80.9" y="478.0"></text>
</g>
<g>
<title>Unsafe_Unpark (35 samples, 4.38%)</title><rect x="79.4" y="467.0" width="51.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="82.4" y="478.0">Unsaf..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.50%)</title><rect x="82.4" y="451.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="85.4" y="462.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.38%)</title><rect x="88.3" y="451.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="91.3" y="462.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.63%)</title><rect x="92.7" y="451.0" width="7.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="95.7" y="462.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="98.6" y="435.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="101.6" y="446.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.38%)</title><rect x="100.1" y="451.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="103.1" y="462.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.88%)</title><rect x="104.5" y="451.0" width="10.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="107.5" y="462.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.13%)</title><rect x="114.9" y="451.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="117.9" y="462.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 1.25%)</title><rect x="116.3" y="451.0" width="14.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="119.3" y="462.0"></text>
</g>
<g>
<title>__pthread_cond_signal (61 samples, 7.63%)</title><rect x="131.1" y="467.0" width="90.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="134.1" y="478.0">__pthread_..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (22 samples, 2.75%)</title><rect x="221.2" y="563.0" width="32.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="224.2" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (22 samples, 2.75%)</title><rect x="221.2" y="547.0" width="32.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="224.2" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.50%)</title><rect x="247.8" y="531.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.50%)</title><rect x="247.8" y="515.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="250.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.50%)</title><rect x="253.7" y="563.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.50%)</title><rect x="253.7" y="547.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.50%)</title><rect x="253.7" y="531.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.50%)</title><rect x="253.7" y="515.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (1 samples, 0.13%)</title><rect x="259.6" y="643.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (13 samples, 1.63%)</title><rect x="261.1" y="659.0" width="19.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 1.63%)</title><rect x="261.1" y="643.0" width="19.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.63%)</title><rect x="261.1" y="627.0" width="19.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.63%)</title><rect x="261.1" y="611.0" width="19.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.38%)</title><rect x="275.8" y="595.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="278.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.38%)</title><rect x="275.8" y="579.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.38%)</title><rect x="280.3" y="659.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.38%)</title><rect x="280.3" y="643.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.38%)</title><rect x="280.3" y="627.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="283.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (3 samples, 0.38%)</title><rect x="280.3" y="611.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.3" y="622.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (3 samples, 0.38%)</title><rect x="280.3" y="595.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.3" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.38%)</title><rect x="280.3" y="579.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.3" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.38%)</title><rect x="280.3" y="563.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="283.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.13%)</title><rect x="284.7" y="659.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="287.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.13%)</title><rect x="284.7" y="643.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.13%)</title><rect x="284.7" y="627.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.7" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="284.7" y="611.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="287.7" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="284.7" y="595.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="287.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="284.7" y="579.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="287.7" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="284.7" y="563.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="287.7" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="284.7" y="547.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="287.7" y="558.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.13%)</title><rect x="284.7" y="531.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="287.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.63%)</title><rect x="286.2" y="691.0" width="7.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="289.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.63%)</title><rect x="286.2" y="675.0" width="7.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.63%)</title><rect x="286.2" y="659.0" width="7.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.63%)</title><rect x="286.2" y="643.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.2" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (3 samples, 0.38%)</title><rect x="289.1" y="627.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1643453308.accept (2 samples, 0.25%)</title><rect x="289.1" y="611.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.13%)</title><rect x="292.1" y="611.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.25%)</title><rect x="293.6" y="691.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="296.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.13%)</title><rect x="295.0" y="675.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.13%)</title><rect x="295.0" y="659.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.13%)</title><rect x="295.0" y="643.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (25 samples, 3.13%)</title><rect x="296.5" y="707.0" width="36.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.5" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (25 samples, 3.13%)</title><rect x="296.5" y="691.0" width="36.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.5" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (19 samples, 2.38%)</title><rect x="296.5" y="675.0" width="28.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.5" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (19 samples, 2.38%)</title><rect x="296.5" y="659.0" width="28.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="299.5" y="670.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (18 samples, 2.25%)</title><rect x="298.0" y="643.0" width="26.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="301.0" y="654.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (15 samples, 1.88%)</title><rect x="298.0" y="627.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.0" y="638.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (15 samples, 1.88%)</title><rect x="298.0" y="611.0" width="22.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="301.0" y="622.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 1.00%)</title><rect x="300.9" y="595.0" width="11.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.13%)</title><rect x="302.4" y="579.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="305.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.13%)</title><rect x="302.4" y="563.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.13%)</title><rect x="302.4" y="547.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.13%)</title><rect x="302.4" y="531.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="305.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.13%)</title><rect x="302.4" y="515.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="305.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.13%)</title><rect x="302.4" y="499.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="305.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.13%)</title><rect x="302.4" y="483.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.4" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.13%)</title><rect x="302.4" y="467.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.4" y="478.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.13%)</title><rect x="302.4" y="451.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.4" y="462.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.13%)</title><rect x="302.4" y="435.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="305.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.75%)</title><rect x="303.9" y="579.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.75%)</title><rect x="303.9" y="563.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (6 samples, 0.75%)</title><rect x="303.9" y="547.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.75%)</title><rect x="303.9" y="531.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="306.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.50%)</title><rect x="306.8" y="515.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="309.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.63%)</title><rect x="312.8" y="595.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="315.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.50%)</title><rect x="314.2" y="579.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.50%)</title><rect x="314.2" y="563.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="317.2" y="574.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.50%)</title><rect x="314.2" y="547.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.25%)</title><rect x="320.1" y="627.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.25%)</title><rect x="320.1" y="611.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.13%)</title><rect x="320.1" y="595.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.13%)</title><rect x="320.1" y="579.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.13%)</title><rect x="321.6" y="595.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.13%)</title><rect x="321.6" y="579.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="324.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.13%)</title><rect x="321.6" y="563.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="324.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.13%)</title><rect x="323.1" y="627.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="326.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.13%)</title><rect x="323.1" y="611.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.13%)</title><rect x="323.1" y="595.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.1" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.13%)</title><rect x="323.1" y="579.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="326.1" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.13%)</title><rect x="323.1" y="563.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="326.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.13%)</title><rect x="324.6" y="675.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.13%)</title><rect x="324.6" y="659.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="327.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.13%)</title><rect x="324.6" y="643.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="327.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.13%)</title><rect x="324.6" y="627.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="327.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.13%)</title><rect x="324.6" y="611.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.13%)</title><rect x="324.6" y="595.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.13%)</title><rect x="324.6" y="579.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.50%)</title><rect x="326.0" y="675.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.38%)</title><rect x="326.0" y="659.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.13%)</title><rect x="326.0" y="643.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.13%)</title><rect x="326.0" y="627.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.13%)</title><rect x="326.0" y="611.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="329.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.13%)</title><rect x="326.0" y="595.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.parse (1 samples, 0.13%)</title><rect x="326.0" y="579.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.13%)</title><rect x="326.0" y="563.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.read (1 samples, 0.13%)</title><rect x="326.0" y="547.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.13%)</title><rect x="326.0" y="531.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.read (1 samples, 0.13%)</title><rect x="326.0" y="515.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="329.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Readable.readString (1 samples, 0.13%)</title><rect x="326.0" y="499.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.0" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.13%)</title><rect x="326.0" y="483.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.0" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.13%)</title><rect x="326.0" y="467.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="329.0" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.13%)</title><rect x="326.0" y="451.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.0" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (1 samples, 0.13%)</title><rect x="326.0" y="435.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.0" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.resultCached (1 samples, 0.13%)</title><rect x="326.0" y="419.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.0" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.13%)</title><rect x="326.0" y="403.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="329.0" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.13%)</title><rect x="326.0" y="387.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.0" y="398.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.13%)</title><rect x="326.0" y="371.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="329.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.25%)</title><rect x="327.5" y="643.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.25%)</title><rect x="327.5" y="627.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.25%)</title><rect x="327.5" y="611.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="330.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.25%)</title><rect x="327.5" y="595.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.25%)</title><rect x="327.5" y="579.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.25%)</title><rect x="327.5" y="563.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.25%)</title><rect x="327.5" y="547.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="330.5" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.25%)</title><rect x="327.5" y="531.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="330.5" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.25%)</title><rect x="327.5" y="515.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.25%)</title><rect x="327.5" y="499.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.5" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.25%)</title><rect x="327.5" y="483.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.5" y="494.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.25%)</title><rect x="327.5" y="467.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="330.5" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.25%)</title><rect x="327.5" y="451.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="327.5" y="435.0" width="1.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="330.5" y="446.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="329.0" y="435.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="332.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.13%)</title><rect x="330.5" y="659.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="333.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.pollDelayMs (1 samples, 0.13%)</title><rect x="330.5" y="643.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.pollDelayMs (1 samples, 0.13%)</title><rect x="330.5" y="627.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isConnected (1 samples, 0.13%)</title><rect x="330.5" y="611.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="333.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.throttleDelayMs (1 samples, 0.13%)</title><rect x="330.5" y="595.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.13%)</title><rect x="332.0" y="675.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.13%)</title><rect x="332.0" y="659.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.13%)</title><rect x="332.0" y="643.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.0" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (534 samples, 66.83%)</title><rect x="333.4" y="755.0" width="788.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.4" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (534 samples, 66.83%)</title><rect x="333.4" y="739.0" width="788.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.4" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (534 samples, 66.83%)</title><rect x="333.4" y="723.0" width="788.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.4" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1557535061.run (315 samples, 39.42%)</title><rect x="342.3" y="707.0" width="465.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.3" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (315 samples, 39.42%)</title><rect x="342.3" y="691.0" width="465.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.3" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (315 samples, 39.42%)</title><rect x="342.3" y="675.0" width="465.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.3" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (314 samples, 39.30%)</title><rect x="342.3" y="659.0" width="463.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.3" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline...</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (1 samples, 0.13%)</title><rect x="346.7" y="643.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="349.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (31 samples, 3.88%)</title><rect x="348.2" y="643.0" width="45.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="351.2" y="654.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (31 samples, 3.88%)</title><rect x="348.2" y="627.0" width="45.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.2" y="638.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (31 samples, 3.88%)</title><rect x="348.2" y="611.0" width="45.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.2" y="622.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 2.50%)</title><rect x="364.4" y="595.0" width="29.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="367.4" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.50%)</title><rect x="364.4" y="579.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$485/869428745.accept (1 samples, 0.13%)</title><rect x="367.4" y="563.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.4" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.13%)</title><rect x="368.9" y="563.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="371.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 2.00%)</title><rect x="370.4" y="579.0" width="23.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.4" y="590.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$485/869428745.accept (16 samples, 2.00%)</title><rect x="370.4" y="563.0" width="23.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.4" y="574.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (16 samples, 2.00%)</title><rect x="370.4" y="547.0" width="23.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.4" y="558.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (16 samples, 2.00%)</title><rect x="370.4" y="531.0" width="23.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="373.4" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (16 samples, 2.00%)</title><rect x="370.4" y="515.0" width="23.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.4" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (15 samples, 1.88%)</title><rect x="371.8" y="499.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.8" y="510.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.63%)</title><rect x="371.8" y="483.0" width="7.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.8" y="494.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.25%)</title><rect x="376.3" y="467.0" width="2.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="379.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 1.25%)</title><rect x="379.2" y="483.0" width="14.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (6 samples, 0.75%)</title><rect x="394.0" y="643.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (6 samples, 0.75%)</title><rect x="394.0" y="627.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.0" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.75%)</title><rect x="394.0" y="611.0" width="8.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.75%)</title><rect x="394.0" y="595.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.25%)</title><rect x="394.0" y="579.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.50%)</title><rect x="396.9" y="579.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="399.9" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.50%)</title><rect x="396.9" y="563.0" width="5.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="399.9" y="574.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.50%)</title><rect x="396.9" y="547.0" width="5.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="399.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (84 samples, 10.51%)</title><rect x="402.8" y="643.0" width="124.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="405.8" y="654.0">com/linecorp/de..</text>
</g>
<g>
<title>__clock_gettime (10 samples, 1.25%)</title><rect x="405.8" y="627.0" width="14.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="408.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.75%)</title><rect x="411.7" y="611.0" width="8.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="414.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (72 samples, 9.01%)</title><rect x="420.6" y="627.0" width="106.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.6" y="638.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (72 samples, 9.01%)</title><rect x="420.6" y="611.0" width="106.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.6" y="622.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (72 samples, 9.01%)</title><rect x="420.6" y="595.0" width="106.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.6" y="606.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (72 samples, 9.01%)</title><rect x="420.6" y="579.0" width="106.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.6" y="590.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (72 samples, 9.01%)</title><rect x="420.6" y="563.0" width="106.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.6" y="574.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (22 samples, 2.75%)</title><rect x="420.6" y="547.0" width="32.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="423.6" y="558.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.13%)</title><rect x="436.8" y="531.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.13%)</title><rect x="436.8" y="515.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="439.8" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="436.8" y="499.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="439.8" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="436.8" y="483.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="439.8" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="436.8" y="467.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="439.8" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="436.8" y="451.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="439.8" y="462.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="436.8" y="435.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="439.8" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="436.8" y="419.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.8" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.13%)</title><rect x="436.8" y="403.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.8" y="414.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.13%)</title><rect x="436.8" y="387.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="439.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.38%)</title><rect x="438.3" y="531.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="441.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.38%)</title><rect x="438.3" y="515.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="441.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.38%)</title><rect x="438.3" y="499.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.38%)</title><rect x="438.3" y="483.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.38%)</title><rect x="438.3" y="467.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="441.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.13%)</title><rect x="441.2" y="451.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 0.88%)</title><rect x="442.7" y="531.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="445.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 0.88%)</title><rect x="442.7" y="515.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="445.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (7 samples, 0.88%)</title><rect x="442.7" y="499.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (7 samples, 0.88%)</title><rect x="442.7" y="483.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (44 samples, 5.51%)</title><rect x="453.1" y="547.0" width="64.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.1" y="558.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.25%)</title><rect x="453.1" y="531.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="456.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.25%)</title><rect x="453.1" y="515.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="456.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.75%)</title><rect x="456.0" y="531.0" width="8.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.50%)</title><rect x="459.0" y="515.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.38%)</title><rect x="460.4" y="499.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.38%)</title><rect x="460.4" y="483.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.4" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="461.9" y="467.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="464.9" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="461.9" y="451.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="464.9" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="461.9" y="435.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="464.9" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="461.9" y="419.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="464.9" y="430.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.13%)</title><rect x="461.9" y="403.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="464.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.13%)</title><rect x="463.4" y="467.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="466.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (36 samples, 4.51%)</title><rect x="464.9" y="531.0" width="53.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="467.9" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (36 samples, 4.51%)</title><rect x="464.9" y="515.0" width="53.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="467.9" y="526.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.75%)</title><rect x="464.9" y="499.0" width="20.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="467.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.13%)</title><rect x="466.3" y="483.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="469.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.13%)</title><rect x="466.3" y="467.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.13%)</title><rect x="467.8" y="483.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.13%)</title><rect x="467.8" y="467.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.13%)</title><rect x="467.8" y="451.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="470.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (9 samples, 1.13%)</title><rect x="469.3" y="483.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.25%)</title><rect x="482.6" y="483.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.25%)</title><rect x="482.6" y="467.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="485.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (22 samples, 2.75%)</title><rect x="485.5" y="499.0" width="32.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.5" y="510.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (22 samples, 2.75%)</title><rect x="485.5" y="483.0" width="32.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.5" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (22 samples, 2.75%)</title><rect x="485.5" y="467.0" width="32.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="488.5" y="478.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.38%)</title><rect x="491.5" y="451.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="494.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.25%)</title><rect x="492.9" y="435.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="495.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.25%)</title><rect x="492.9" y="419.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="495.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.25%)</title><rect x="492.9" y="403.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.13%)</title><rect x="494.4" y="387.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.88%)</title><rect x="495.9" y="451.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.75%)</title><rect x="497.4" y="435.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (3 samples, 0.38%)</title><rect x="497.4" y="419.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="500.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (3 samples, 0.38%)</title><rect x="497.4" y="403.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (3 samples, 0.38%)</title><rect x="497.4" y="387.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (3 samples, 0.38%)</title><rect x="497.4" y="371.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="500.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (3 samples, 0.38%)</title><rect x="497.4" y="355.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.38%)</title><rect x="497.4" y="339.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.38%)</title><rect x="501.8" y="419.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="504.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.38%)</title><rect x="501.8" y="403.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.38%)</title><rect x="501.8" y="387.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="504.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.38%)</title><rect x="501.8" y="371.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="504.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.38%)</title><rect x="501.8" y="355.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="504.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.38%)</title><rect x="501.8" y="339.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="504.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.38%)</title><rect x="501.8" y="323.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="504.8" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.75%)</title><rect x="506.2" y="451.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.75%)</title><rect x="506.2" y="435.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.50%)</title><rect x="509.2" y="419.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="512.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.50%)</title><rect x="509.2" y="403.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.2" y="414.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.50%)</title><rect x="509.2" y="387.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="512.2" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.50%)</title><rect x="509.2" y="371.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.2" y="382.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.13%)</title><rect x="509.2" y="355.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.2" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="509.2" y="339.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="512.2" y="350.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="509.2" y="323.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.2" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="509.2" y="307.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="512.2" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="509.2" y="291.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="512.2" y="302.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="509.2" y="275.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.2" y="286.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.13%)</title><rect x="509.2" y="259.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="512.2" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.38%)</title><rect x="510.7" y="355.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.25%)</title><rect x="515.1" y="451.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="518.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (2 samples, 0.25%)</title><rect x="515.1" y="435.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="518.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.75%)</title><rect x="518.0" y="547.0" width="8.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.75%)</title><rect x="518.0" y="531.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.75%)</title><rect x="518.0" y="515.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.75%)</title><rect x="518.0" y="499.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.75%)</title><rect x="518.0" y="483.0" width="8.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (186 samples, 23.28%)</title><rect x="526.9" y="643.0" width="274.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="529.9" y="654.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="526.9" y="627.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="529.9" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="526.9" y="611.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="529.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="526.9" y="595.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="529.9" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="526.9" y="579.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="529.9" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="526.9" y="563.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="529.9" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="526.9" y="547.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="529.9" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.13%)</title><rect x="526.9" y="531.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="529.9" y="542.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.13%)</title><rect x="526.9" y="515.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="529.9" y="526.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.13%)</title><rect x="526.9" y="499.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="529.9" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (35 samples, 4.38%)</title><rect x="528.4" y="627.0" width="51.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.4" y="638.0">com/l..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.13%)</title><rect x="528.4" y="611.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="531.4" y="622.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (34 samples, 4.26%)</title><rect x="529.8" y="611.0" width="50.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.8" y="622.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (34 samples, 4.26%)</title><rect x="529.8" y="595.0" width="50.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.8" y="606.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 2.75%)</title><rect x="534.3" y="579.0" width="32.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="537.3" y="590.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 1.38%)</title><rect x="534.3" y="563.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="537.3" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.13%)</title><rect x="534.3" y="547.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="537.3" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="534.3" y="531.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="537.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 1.00%)</title><rect x="535.8" y="547.0" width="11.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="538.8" y="558.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.50%)</title><rect x="540.2" y="531.0" width="5.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="543.2" y="542.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.38%)</title><rect x="541.7" y="515.0" width="4.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="544.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.13%)</title><rect x="546.1" y="531.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="549.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.13%)</title><rect x="547.6" y="547.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="550.6" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.13%)</title><rect x="547.6" y="531.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="550.6" y="542.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.13%)</title><rect x="549.0" y="547.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="552.0" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 1.25%)</title><rect x="550.5" y="563.0" width="14.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 1.25%)</title><rect x="550.5" y="547.0" width="14.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="553.5" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.13%)</title><rect x="565.3" y="563.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.13%)</title><rect x="566.8" y="579.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.8" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.25%)</title><rect x="568.2" y="579.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="571.2" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (2 samples, 0.25%)</title><rect x="568.2" y="563.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="571.2" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 0.75%)</title><rect x="571.2" y="579.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="574.2" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="572.7" y="563.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.50%)</title><rect x="574.2" y="563.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="577.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.50%)</title><rect x="574.2" y="547.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="577.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (8 samples, 1.00%)</title><rect x="580.1" y="627.0" width="11.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="583.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (8 samples, 1.00%)</title><rect x="580.1" y="611.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="583.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (103 samples, 12.89%)</title><rect x="591.9" y="627.0" width="152.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.9" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (84 samples, 10.51%)</title><rect x="591.9" y="611.0" width="124.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.9" y="622.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (26 samples, 3.25%)</title><rect x="591.9" y="595.0" width="38.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="594.9" y="606.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 3.25%)</title><rect x="591.9" y="579.0" width="38.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.9" y="590.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (6 samples, 0.75%)</title><rect x="615.5" y="563.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.5" y="574.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.63%)</title><rect x="617.0" y="547.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="620.0" y="558.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.63%)</title><rect x="617.0" y="531.0" width="7.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="620.0" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.13%)</title><rect x="621.4" y="515.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="624.4" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.13%)</title><rect x="621.4" y="499.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.13%)</title><rect x="621.4" y="483.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="624.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="621.4" y="467.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.4" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.13%)</title><rect x="622.9" y="515.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.9" y="526.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.50%)</title><rect x="624.4" y="563.0" width="5.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="627.4" y="574.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (58 samples, 7.26%)</title><rect x="630.3" y="595.0" width="85.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.3" y="606.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (58 samples, 7.26%)</title><rect x="630.3" y="579.0" width="85.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.3" y="590.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (27 samples, 3.38%)</title><rect x="631.8" y="563.0" width="39.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.8" y="574.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 1.00%)</title><rect x="656.9" y="547.0" width="11.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 1.00%)</title><rect x="656.9" y="531.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.9" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.25%)</title><rect x="668.7" y="547.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="671.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.13%)</title><rect x="671.6" y="563.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="674.6" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.13%)</title><rect x="671.6" y="547.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.13%)</title><rect x="673.1" y="563.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="676.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (28 samples, 3.50%)</title><rect x="674.6" y="563.0" width="41.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="677.6" y="574.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (28 samples, 3.50%)</title><rect x="674.6" y="547.0" width="41.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.6" y="558.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.25%)</title><rect x="674.6" y="531.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="677.6" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="676.1" y="515.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="676.1" y="499.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 3.25%)</title><rect x="677.5" y="531.0" width="38.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.5" y="542.0">jav..</text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.50%)</title><rect x="710.0" y="515.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="713.0" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (19 samples, 2.38%)</title><rect x="715.9" y="611.0" width="28.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="718.9" y="622.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (19 samples, 2.38%)</title><rect x="715.9" y="595.0" width="28.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="718.9" y="606.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (19 samples, 2.38%)</title><rect x="715.9" y="579.0" width="28.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="718.9" y="590.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.50%)</title><rect x="715.9" y="563.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="718.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.38%)</title><rect x="715.9" y="547.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="718.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="720.4" y="547.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.4" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (15 samples, 1.88%)</title><rect x="721.8" y="563.0" width="22.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.8" y="574.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (15 samples, 1.88%)</title><rect x="721.8" y="547.0" width="22.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="724.8" y="558.0">j..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.88%)</title><rect x="733.7" y="531.0" width="10.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="736.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (31 samples, 3.88%)</title><rect x="744.0" y="627.0" width="45.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="747.0" y="638.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (31 samples, 3.88%)</title><rect x="744.0" y="611.0" width="45.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="747.0" y="622.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="745.5" y="595.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="748.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="745.5" y="579.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="748.5" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/2118789280.process (10 samples, 1.25%)</title><rect x="746.9" y="595.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (10 samples, 1.25%)</title><rect x="746.9" y="579.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="749.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.25%)</title><rect x="746.9" y="563.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.13%)</title><rect x="748.4" y="547.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="751.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.13%)</title><rect x="748.4" y="531.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="751.4" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (8 samples, 1.00%)</title><rect x="749.9" y="563.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="752.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.88%)</title><rect x="751.4" y="547.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="754.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.75%)</title><rect x="751.4" y="531.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.4" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="760.2" y="531.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="763.2" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="760.2" y="515.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="763.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (7 samples, 0.88%)</title><rect x="761.7" y="595.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="764.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.13%)</title><rect x="767.6" y="579.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="770.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="769.1" y="579.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="772.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.38%)</title><rect x="772.1" y="595.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="775.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.38%)</title><rect x="772.1" y="579.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.25%)</title><rect x="776.5" y="595.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.5" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.25%)</title><rect x="776.5" y="579.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="779.4" y="595.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="782.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="779.4" y="579.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.63%)</title><rect x="782.4" y="595.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="785.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.63%)</title><rect x="782.4" y="579.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.63%)</title><rect x="782.4" y="563.0" width="7.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.38%)</title><rect x="782.4" y="547.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="785.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$481/1782353558.accept (1 samples, 0.13%)</title><rect x="782.4" y="531.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.4" y="542.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.25%)</title><rect x="783.9" y="531.0" width="2.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="786.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.13%)</title><rect x="786.8" y="547.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.13%)</title><rect x="788.3" y="547.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="791.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.13%)</title><rect x="789.8" y="627.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (1 samples, 0.13%)</title><rect x="789.8" y="611.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.8" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.13%)</title><rect x="789.8" y="595.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="792.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="789.8" y="579.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="792.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.88%)</title><rect x="791.3" y="627.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="794.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.88%)</title><rect x="791.3" y="611.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.88%)</title><rect x="791.3" y="595.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="794.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.25%)</title><rect x="791.3" y="579.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="794.3" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.13%)</title><rect x="792.7" y="563.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="795.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.63%)</title><rect x="794.2" y="579.0" width="7.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="797.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$482/938339372.accept (5 samples, 0.63%)</title><rect x="794.2" y="563.0" width="7.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="797.2" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.50%)</title><rect x="795.7" y="547.0" width="5.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="798.7" y="558.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.50%)</title><rect x="795.7" y="531.0" width="5.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="798.7" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.38%)</title><rect x="801.6" y="643.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="804.6" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.38%)</title><rect x="801.6" y="627.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="804.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.13%)</title><rect x="806.0" y="659.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="806.0" y="643.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="809.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="806.0" y="627.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="809.0" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="806.0" y="611.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="809.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.13%)</title><rect x="807.5" y="707.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="807.5" y="691.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.13%)</title><rect x="807.5" y="675.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="810.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.13%)</title><rect x="807.5" y="659.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (212 samples, 26.53%)</title><rect x="809.0" y="707.0" width="313.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="812.0" y="718.0">java/util/concurrent/ThreadPoolExecutor.ge..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (212 samples, 26.53%)</title><rect x="809.0" y="691.0" width="313.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="812.0" y="702.0">java/util/concurrent/LinkedBlockingQueue.t..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 22.53%)</title><rect x="834.1" y="675.0" width="265.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.1" y="686.0">java/util/concurrent/locks/Abstract..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.88%)</title><rect x="834.1" y="659.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="837.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.88%)</title><rect x="834.1" y="643.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="837.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.25%)</title><rect x="841.5" y="627.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.63%)</title><rect x="844.4" y="659.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="847.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.63%)</title><rect x="844.4" y="643.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 21.03%)</title><rect x="851.8" y="659.0" width="248.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.8" y="670.0">java/util/concurrent/locks/LockSu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (168 samples, 21.03%)</title><rect x="851.8" y="643.0" width="248.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.8" y="654.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.13%)</title><rect x="851.8" y="627.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="854.8" y="638.0"></text>
</g>
<g>
<title>Unsafe_Park (164 samples, 20.53%)</title><rect x="853.3" y="627.0" width="242.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="856.3" y="638.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.38%)</title><rect x="862.1" y="611.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="865.1" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.13%)</title><rect x="866.6" y="611.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.6" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.13%)</title><rect x="868.0" y="611.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="871.0" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 2.00%)</title><rect x="869.5" y="611.0" width="23.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="872.5" y="622.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.75%)</title><rect x="874.0" y="595.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.0" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (2 samples, 0.25%)</title><rect x="879.9" y="579.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="882.9" y="590.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.13%)</title><rect x="882.8" y="595.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="885.8" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (5 samples, 0.63%)</title><rect x="884.3" y="595.0" width="7.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="887.3" y="606.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="891.7" y="595.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="894.7" y="606.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.13%)</title><rect x="893.2" y="611.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="896.2" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.50%)</title><rect x="894.6" y="611.0" width="5.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="897.6" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (7 samples, 0.88%)</title><rect x="900.5" y="611.0" width="10.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="903.5" y="622.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 4.76%)</title><rect x="910.9" y="611.0" width="56.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="913.9" y="622.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (78 samples, 9.76%)</title><rect x="967.0" y="611.0" width="115.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="970.0" y="622.0">__pthread_cond..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.38%)</title><rect x="1082.2" y="611.0" width="4.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1085.2" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.13%)</title><rect x="1086.6" y="611.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1089.6" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.13%)</title><rect x="1088.1" y="611.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1091.1" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.25%)</title><rect x="1089.6" y="611.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1092.6" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.13%)</title><rect x="1092.5" y="611.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1095.5" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.13%)</title><rect x="1094.0" y="611.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1097.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.38%)</title><rect x="1095.5" y="627.0" width="4.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="1098.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.88%)</title><rect x="1099.9" y="675.0" width="22.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1102.9" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.88%)</title><rect x="1099.9" y="659.0" width="22.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1102.9" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.88%)</title><rect x="1099.9" y="643.0" width="22.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1102.9" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.88%)</title><rect x="1099.9" y="627.0" width="22.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1102.9" y="638.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.13%)</title><rect x="1122.1" y="755.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1125.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.13%)</title><rect x="1122.1" y="739.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1125.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.13%)</title><rect x="1122.1" y="723.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1125.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.13%)</title><rect x="1122.1" y="707.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1125.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.13%)</title><rect x="1122.1" y="691.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.13%)</title><rect x="1122.1" y="675.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1125.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.13%)</title><rect x="1122.1" y="659.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1125.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.13%)</title><rect x="1122.1" y="643.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1125.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.13%)</title><rect x="1122.1" y="627.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1125.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.13%)</title><rect x="1122.1" y="611.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1125.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.13%)</title><rect x="1122.1" y="595.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1125.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.13%)</title><rect x="1122.1" y="579.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1125.1" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.13%)</title><rect x="1122.1" y="563.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1125.1" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.13%)</title><rect x="1122.1" y="547.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.1" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="1122.1" y="531.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1125.1" y="542.0"></text>
</g>
<g>
<title>start_thread (45 samples, 5.63%)</title><rect x="1123.5" y="755.0" width="66.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1126.5" y="766.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (45 samples, 5.63%)</title><rect x="1123.5" y="739.0" width="66.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1126.5" y="750.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (45 samples, 5.63%)</title><rect x="1123.5" y="723.0" width="66.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="734.0">Thread:..</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.13%)</title><rect x="1123.5" y="707.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.5" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.13%)</title><rect x="1123.5" y="691.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="702.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.13%)</title><rect x="1123.5" y="675.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="686.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.13%)</title><rect x="1123.5" y="659.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.13%)</title><rect x="1123.5" y="643.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.5" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.13%)</title><rect x="1123.5" y="627.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="638.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.13%)</title><rect x="1123.5" y="611.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="622.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.13%)</title><rect x="1123.5" y="595.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="606.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (1 samples, 0.13%)</title><rect x="1123.5" y="579.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (43 samples, 5.38%)</title><rect x="1125.0" y="707.0" width="63.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1128.0" y="718.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (43 samples, 5.38%)</title><rect x="1125.0" y="691.0" width="63.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.0" y="702.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (43 samples, 5.38%)</title><rect x="1125.0" y="675.0" width="63.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1128.0" y="686.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (43 samples, 5.38%)</title><rect x="1125.0" y="659.0" width="63.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.0" y="670.0">C2Compi..</text>
</g>
<g>
<title>Arena::~Arena() (1 samples, 0.13%)</title><rect x="1125.0" y="643.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.0" y="654.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (42 samples, 5.26%)</title><rect x="1126.5" y="643.0" width="62.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.5" y="654.0">Compil..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.13%)</title><rect x="1126.5" y="627.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.5" y="638.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.13%)</title><rect x="1126.5" y="611.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.5" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.13%)</title><rect x="1126.5" y="595.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.5" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.13%)</title><rect x="1126.5" y="579.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.5" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.13%)</title><rect x="1126.5" y="563.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.5" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.13%)</title><rect x="1126.5" y="547.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.5" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.13%)</title><rect x="1126.5" y="531.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.5" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.13%)</title><rect x="1126.5" y="515.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.5" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.13%)</title><rect x="1126.5" y="499.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.5" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.13%)</title><rect x="1126.5" y="483.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.5" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1126.5" y="467.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.5" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1126.5" y="451.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.5" y="462.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.13%)</title><rect x="1126.5" y="435.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.5" y="446.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.13%)</title><rect x="1126.5" y="419.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.5" y="430.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.13%)</title><rect x="1126.5" y="403.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.5" y="414.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.13%)</title><rect x="1126.5" y="387.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.5" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.13%)</title><rect x="1126.5" y="371.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.5" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.13%)</title><rect x="1126.5" y="355.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1129.5" y="366.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (29 samples, 3.63%)</title><rect x="1128.0" y="627.0" width="42.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.0" y="638.0">Comp..</text>
</g>
<g>
<title>MachNode::peephole(Block*, int, PhaseRegAlloc*, int&amp;) (1 samples, 0.13%)</title><rect x="1128.0" y="611.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.0" y="622.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.25%)</title><rect x="1129.4" y="611.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.4" y="622.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.13%)</title><rect x="1129.4" y="595.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.4" y="606.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.13%)</title><rect x="1130.9" y="595.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.9" y="606.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.13%)</title><rect x="1130.9" y="579.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.9" y="590.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.13%)</title><rect x="1130.9" y="563.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.9" y="574.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.13%)</title><rect x="1130.9" y="547.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1133.9" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.38%)</title><rect x="1132.4" y="611.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.4" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.38%)</title><rect x="1132.4" y="595.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.4" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.25%)</title><rect x="1132.4" y="579.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.4" y="590.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.13%)</title><rect x="1135.4" y="579.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 2.75%)</title><rect x="1136.8" y="611.0" width="32.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.8" y="622.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaDirectNode::oper_input_base() const (1 samples, 0.13%)</title><rect x="1136.8" y="595.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.13%)</title><rect x="1138.3" y="595.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.13%)</title><rect x="1138.3" y="579.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.3" y="590.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.13%)</title><rect x="1138.3" y="563.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.13%)</title><rect x="1139.8" y="595.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.13%)</title><rect x="1139.8" y="579.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="590.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1139.8" y="563.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.38%)</title><rect x="1141.3" y="595.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.25%)</title><rect x="1145.7" y="595.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.7" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.13%)</title><rect x="1145.7" y="579.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.7" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.13%)</title><rect x="1147.2" y="579.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.2" y="590.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.13%)</title><rect x="1147.2" y="563.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.2" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.25%)</title><rect x="1148.6" y="595.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.6" y="606.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.13%)</title><rect x="1148.6" y="579.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.6" y="590.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.13%)</title><rect x="1150.1" y="579.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.1" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.25%)</title><rect x="1151.6" y="595.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.6" y="606.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.25%)</title><rect x="1151.6" y="579.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.6" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.63%)</title><rect x="1154.6" y="595.0" width="7.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1157.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.25%)</title><rect x="1159.0" y="579.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.0" y="590.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.13%)</title><rect x="1161.9" y="595.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.9" y="606.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.13%)</title><rect x="1161.9" y="579.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.9" y="590.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.13%)</title><rect x="1161.9" y="563.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.9" y="574.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.13%)</title><rect x="1161.9" y="547.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="558.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.13%)</title><rect x="1163.4" y="595.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="606.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.13%)</title><rect x="1163.4" y="579.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.4" y="590.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.13%)</title><rect x="1163.4" y="563.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1166.4" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.13%)</title><rect x="1164.9" y="595.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1167.9" y="606.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.13%)</title><rect x="1164.9" y="579.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.25%)</title><rect x="1166.4" y="595.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.4" y="606.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.13%)</title><rect x="1167.8" y="579.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.8" y="590.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.13%)</title><rect x="1167.8" y="563.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="574.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.13%)</title><rect x="1167.8" y="547.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.8" y="558.0"></text>
</g>
<g>
<title>PhasePeephole::do_transform() (1 samples, 0.13%)</title><rect x="1169.3" y="611.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.3" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.88%)</title><rect x="1170.8" y="627.0" width="10.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.8" y="638.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (2 samples, 0.25%)</title><rect x="1170.8" y="611.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.25%)</title><rect x="1170.8" y="595.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.13%)</title><rect x="1170.8" y="579.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.13%)</title><rect x="1172.3" y="579.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.13%)</title><rect x="1172.3" y="563.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.13%)</title><rect x="1173.8" y="611.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.13%)</title><rect x="1173.8" y="595.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.25%)</title><rect x="1175.2" y="611.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.13%)</title><rect x="1175.2" y="595.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.2" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.13%)</title><rect x="1175.2" y="579.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.13%)</title><rect x="1176.7" y="595.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.25%)</title><rect x="1178.2" y="611.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.25%)</title><rect x="1178.2" y="595.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="606.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1178.2" y="579.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="590.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1178.2" y="563.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1179.7" y="579.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="590.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.13%)</title><rect x="1179.7" y="563.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.38%)</title><rect x="1181.1" y="627.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.38%)</title><rect x="1181.1" y="611.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.38%)</title><rect x="1181.1" y="595.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.38%)</title><rect x="1181.1" y="579.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.38%)</title><rect x="1181.1" y="563.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.38%)</title><rect x="1181.1" y="547.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.38%)</title><rect x="1181.1" y="531.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.38%)</title><rect x="1181.1" y="515.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.38%)</title><rect x="1181.1" y="499.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.38%)</title><rect x="1181.1" y="483.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.38%)</title><rect x="1181.1" y="467.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.38%)</title><rect x="1181.1" y="451.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1181.1" y="435.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1181.1" y="419.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1181.1" y="403.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1181.1" y="387.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1181.1" y="371.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1181.1" y="355.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.1" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.13%)</title><rect x="1181.1" y="339.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.1" y="350.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.13%)</title><rect x="1181.1" y="323.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="334.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.13%)</title><rect x="1181.1" y="307.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="318.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.13%)</title><rect x="1181.1" y="291.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.13%)</title><rect x="1181.1" y="275.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.13%)</title><rect x="1181.1" y="259.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.13%)</title><rect x="1181.1" y="243.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.13%)</title><rect x="1181.1" y="227.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.13%)</title><rect x="1181.1" y="211.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.13%)</title><rect x="1181.1" y="195.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.1" y="206.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.13%)</title><rect x="1181.1" y="179.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1181.1" y="163.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1181.1" y="147.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.1" y="158.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1181.1" y="131.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.1" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1181.1" y="115.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.1" y="126.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.13%)</title><rect x="1181.1" y="99.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.1" y="110.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.13%)</title><rect x="1181.1" y="83.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="94.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.13%)</title><rect x="1181.1" y="67.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.25%)</title><rect x="1182.6" y="435.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1182.6" y="419.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1182.6" y="403.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1182.6" y="387.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1182.6" y="371.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1182.6" y="355.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1182.6" y="339.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1182.6" y="323.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1182.6" y="307.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1182.6" y="291.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1182.6" y="275.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1182.6" y="259.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1182.6" y="243.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1182.6" y="227.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1182.6" y="211.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1182.6" y="195.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1182.6" y="179.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="190.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1184.1" y="419.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1184.1" y="403.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1184.1" y="387.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1184.1" y="371.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1184.1" y="355.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1184.1" y="339.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1184.1" y="323.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1184.1" y="307.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1184.1" y="291.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1184.1" y="275.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1184.1" y="259.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1184.1" y="243.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1184.1" y="227.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1184.1" y="211.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1184.1" y="195.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1184.1" y="179.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1184.1" y="163.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1184.1" y="147.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1184.1" y="131.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.13%)</title><rect x="1184.1" y="115.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const*&amp;) (1 samples, 0.13%)</title><rect x="1184.1" y="99.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.13%)</title><rect x="1184.1" y="83.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.13%)</title><rect x="1184.1" y="67.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1184.1" y="51.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.13%)</title><rect x="1184.1" y="35.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.25%)</title><rect x="1185.6" y="627.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.6" y="638.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.25%)</title><rect x="1185.6" y="611.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.6" y="622.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.13%)</title><rect x="1188.5" y="707.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.5" y="718.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.13%)</title><rect x="1188.5" y="691.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="702.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.13%)</title><rect x="1188.5" y="675.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.5" y="686.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.13%)</title><rect x="1188.5" y="659.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="670.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.13%)</title><rect x="1188.5" y="643.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.5" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.13%)</title><rect x="1188.5" y="627.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.13%)</title><rect x="1188.5" y="611.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.5" y="622.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.13%)</title><rect x="1188.5" y="595.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.5" y="606.0"></text>
</g>
</g>
</svg>
