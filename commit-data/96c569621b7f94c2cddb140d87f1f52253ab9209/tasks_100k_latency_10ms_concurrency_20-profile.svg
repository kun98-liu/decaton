<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (172 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="10.0" y="1251.0" width="6.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.58%)</title><rect x="10.0" y="1235.0" width="6.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 8.14%)</title><rect x="16.9" y="1251.0" width="96.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="1262.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 8.14%)</title><rect x="16.9" y="1235.0" width="96.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="1246.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (14 samples, 8.14%)</title><rect x="16.9" y="1219.0" width="96.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="1230.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.58%)</title><rect x="16.9" y="1203.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.58%)</title><rect x="16.9" y="1187.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.58%)</title><rect x="16.9" y="1171.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1637330367.accept (1 samples, 0.58%)</title><rect x="16.9" y="1155.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.9" y="1139.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.58%)</title><rect x="16.9" y="1123.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.58%)</title><rect x="16.9" y="1107.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.74%)</title><rect x="23.7" y="1203.0" width="20.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1939955380.accept (3 samples, 1.74%)</title><rect x="23.7" y="1187.0" width="20.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.74%)</title><rect x="23.7" y="1171.0" width="20.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 1.16%)</title><rect x="23.7" y="1155.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.16%)</title><rect x="23.7" y="1139.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.16%)</title><rect x="23.7" y="1123.0" width="13.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.16%)</title><rect x="23.7" y="1107.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.16%)</title><rect x="23.7" y="1091.0" width="13.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.16%)</title><rect x="23.7" y="1075.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.58%)</title><rect x="23.7" y="1059.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.58%)</title><rect x="23.7" y="1043.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.58%)</title><rect x="23.7" y="1027.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.58%)</title><rect x="23.7" y="1011.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.58%)</title><rect x="30.6" y="1059.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="30.6" y="1043.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.58%)</title><rect x="30.6" y="1027.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.58%)</title><rect x="30.6" y="1011.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.58%)</title><rect x="37.4" y="1155.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.58%)</title><rect x="37.4" y="1139.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="37.4" y="1123.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="37.4" y="1107.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.58%)</title><rect x="37.4" y="1091.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.58%)</title><rect x="37.4" y="1075.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.81%)</title><rect x="44.3" y="1203.0" width="68.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.3" y="1214.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.81%)</title><rect x="44.3" y="1187.0" width="68.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="1198.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.65%)</title><rect x="44.3" y="1171.0" width="54.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="1182.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.74%)</title><rect x="44.3" y="1155.0" width="20.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.74%)</title><rect x="44.3" y="1139.0" width="20.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.58%)</title><rect x="44.3" y="1123.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleAbortedSends (1 samples, 0.58%)</title><rect x="44.3" y="1107.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.58%)</title><rect x="51.2" y="1123.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.hasNext (1 samples, 0.58%)</title><rect x="51.2" y="1107.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.58%)</title><rect x="58.0" y="1123.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.58%)</title><rect x="58.0" y="1107.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.58%)</title><rect x="58.0" y="1091.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.58%)</title><rect x="58.0" y="1075.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.58%)</title><rect x="58.0" y="1059.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.58%)</title><rect x="58.0" y="1043.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.58%)</title><rect x="58.0" y="1027.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (4 samples, 2.33%)</title><rect x="64.9" y="1155.0" width="27.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.9" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.33%)</title><rect x="64.9" y="1139.0" width="27.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.9" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.58%)</title><rect x="64.9" y="1123.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.58%)</title><rect x="64.9" y="1107.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (3 samples, 1.74%)</title><rect x="71.7" y="1123.0" width="20.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.74%)</title><rect x="71.7" y="1107.0" width="20.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.58%)</title><rect x="71.7" y="1091.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.58%)</title><rect x="71.7" y="1075.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.58%)</title><rect x="71.7" y="1059.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.58%)</title><rect x="71.7" y="1043.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="74.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.58%)</title><rect x="71.7" y="1027.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.58%)</title><rect x="71.7" y="1011.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="74.7" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeRemoval (1 samples, 0.58%)</title><rect x="71.7" y="995.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (2 samples, 1.16%)</title><rect x="78.6" y="1091.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="81.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 1.16%)</title><rect x="78.6" y="1075.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="81.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 1.16%)</title><rect x="78.6" y="1059.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="81.6" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 1.16%)</title><rect x="78.6" y="1043.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.58%)</title><rect x="92.3" y="1155.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.58%)</title><rect x="92.3" y="1139.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="95.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.58%)</title><rect x="92.3" y="1123.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.58%)</title><rect x="92.3" y="1107.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="95.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.58%)</title><rect x="92.3" y="1091.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.58%)</title><rect x="92.3" y="1075.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.3" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.58%)</title><rect x="92.3" y="1059.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.58%)</title><rect x="99.2" y="1171.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="102.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.58%)</title><rect x="99.2" y="1155.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="102.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="99.2" y="1139.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="99.2" y="1123.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="99.2" y="1107.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.58%)</title><rect x="99.2" y="1091.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.58%)</title><rect x="99.2" y="1075.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.58%)</title><rect x="99.2" y="1059.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.write (1 samples, 0.58%)</title><rect x="99.2" y="1043.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.write (1 samples, 0.58%)</title><rect x="99.2" y="1027.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.58%)</title><rect x="106.0" y="1171.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.58%)</title><rect x="106.0" y="1155.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.0" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.58%)</title><rect x="106.0" y="1139.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="109.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="106.0" y="1123.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/Node.hashCode (1 samples, 0.58%)</title><rect x="106.0" y="1107.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/Thread.run (66 samples, 38.37%)</title><rect x="112.9" y="1251.0" width="452.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="115.9" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (66 samples, 38.37%)</title><rect x="112.9" y="1235.0" width="452.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.9" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (66 samples, 38.37%)</title><rect x="112.9" y="1219.0" width="452.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="115.9" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/382400448.run (63 samples, 36.63%)</title><rect x="112.9" y="1203.0" width="432.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="115.9" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (63 samples, 36.63%)</title><rect x="112.9" y="1187.0" width="432.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.9" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (63 samples, 36.63%)</title><rect x="112.9" y="1171.0" width="432.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="115.9" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUn..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (63 samples, 36.63%)</title><rect x="112.9" y="1155.0" width="432.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="115.9" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (1 samples, 0.58%)</title><rect x="112.9" y="1139.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="112.9" y="1123.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="112.9" y="1107.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 1.74%)</title><rect x="119.8" y="1139.0" width="20.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 1.74%)</title><rect x="119.8" y="1123.0" width="20.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="122.8" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.74%)</title><rect x="119.8" y="1107.0" width="20.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.74%)</title><rect x="119.8" y="1091.0" width="20.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="119.8" y="1075.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.8" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 1.16%)</title><rect x="126.6" y="1075.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.6" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.58%)</title><rect x="133.5" y="1059.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="136.5" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (12 samples, 6.98%)</title><rect x="140.3" y="1139.0" width="82.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="143.3" y="1150.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (12 samples, 6.98%)</title><rect x="140.3" y="1123.0" width="82.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="143.3" y="1134.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 6.98%)</title><rect x="140.3" y="1107.0" width="82.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="143.3" y="1118.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.81%)</title><rect x="154.1" y="1091.0" width="68.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="157.1" y="1102.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 5.81%)</title><rect x="154.1" y="1075.0" width="68.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.1" y="1086.0">com/lin..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 5.81%)</title><rect x="154.1" y="1059.0" width="68.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="157.1" y="1070.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.07%)</title><rect x="154.1" y="1043.0" width="48.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="157.1" y="1054.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 1.16%)</title><rect x="154.1" y="1027.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.16%)</title><rect x="154.1" y="1011.0" width="13.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="157.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="160.9" y="995.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="163.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.16%)</title><rect x="167.8" y="1027.0" width="13.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="170.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="174.7" y="1011.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.74%)</title><rect x="181.5" y="1027.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.74%)</title><rect x="181.5" y="1011.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="184.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.74%)</title><rect x="181.5" y="995.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="184.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.74%)</title><rect x="181.5" y="979.0" width="20.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.74%)</title><rect x="181.5" y="963.0" width="20.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="184.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="188.4" y="947.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.58%)</title><rect x="188.4" y="931.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.58%)</title><rect x="188.4" y="915.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="191.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.58%)</title><rect x="188.4" y="899.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="191.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.58%)</title><rect x="195.2" y="947.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.58%)</title><rect x="195.2" y="931.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="198.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.58%)</title><rect x="195.2" y="915.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="198.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.58%)</title><rect x="195.2" y="899.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (1 samples, 0.58%)</title><rect x="195.2" y="883.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="198.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (1 samples, 0.58%)</title><rect x="195.2" y="867.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.74%)</title><rect x="202.1" y="1043.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="205.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.74%)</title><rect x="202.1" y="1027.0" width="20.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.74%)</title><rect x="202.1" y="1011.0" width="20.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="205.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.74%)</title><rect x="202.1" y="995.0" width="20.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.74%)</title><rect x="202.1" y="979.0" width="20.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.1" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (45 samples, 26.16%)</title><rect x="222.7" y="1139.0" width="308.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="225.7" y="1150.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (7 samples, 4.07%)</title><rect x="222.7" y="1123.0" width="48.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.7" y="1134.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (7 samples, 4.07%)</title><rect x="222.7" y="1107.0" width="48.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.7" y="1118.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 4.07%)</title><rect x="222.7" y="1091.0" width="48.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.7" y="1102.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="222.7" y="1075.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="222.7" y="1059.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.7" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="222.7" y="1043.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.74%)</title><rect x="229.5" y="1075.0" width="20.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.74%)</title><rect x="250.1" y="1075.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.1" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.74%)</title><rect x="250.1" y="1059.0" width="20.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.1" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.74%)</title><rect x="250.1" y="1043.0" width="20.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (12 samples, 6.98%)</title><rect x="270.7" y="1123.0" width="82.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="1134.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (7 samples, 4.07%)</title><rect x="270.7" y="1107.0" width="48.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="1118.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.33%)</title><rect x="270.7" y="1091.0" width="27.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.7" y="1102.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.58%)</title><rect x="277.6" y="1075.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="277.6" y="1059.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.58%)</title><rect x="284.4" y="1075.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.58%)</title><rect x="284.4" y="1059.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.4" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.58%)</title><rect x="284.4" y="1043.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="287.4" y="1054.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.58%)</title><rect x="291.3" y="1075.0" width="6.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="294.3" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.74%)</title><rect x="298.1" y="1091.0" width="20.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.1" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.74%)</title><rect x="298.1" y="1075.0" width="20.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.1" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="298.1" y="1059.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="298.1" y="1043.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="298.1" y="1027.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.16%)</title><rect x="305.0" y="1059.0" width="13.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.16%)</title><rect x="305.0" y="1043.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.16%)</title><rect x="305.0" y="1027.0" width="13.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="308.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (4 samples, 2.33%)</title><rect x="318.7" y="1107.0" width="27.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.7" y="1118.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (4 samples, 2.33%)</title><rect x="318.7" y="1091.0" width="27.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.7" y="1102.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 2.33%)</title><rect x="318.7" y="1075.0" width="27.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.7" y="1086.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.16%)</title><rect x="318.7" y="1059.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (1 samples, 0.58%)</title><rect x="318.7" y="1043.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.58%)</title><rect x="325.6" y="1043.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.6" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="325.6" y="1027.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="328.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="325.6" y="1011.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="328.6" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 1.16%)</title><rect x="332.4" y="1059.0" width="13.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="335.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.16%)</title><rect x="332.4" y="1043.0" width="13.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="335.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.58%)</title><rect x="346.2" y="1107.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="349.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="346.2" y="1091.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="349.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.58%)</title><rect x="346.2" y="1075.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="349.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="346.2" y="1059.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="349.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (26 samples, 15.12%)</title><rect x="353.0" y="1123.0" width="178.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="356.0" y="1134.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (26 samples, 15.12%)</title><rect x="353.0" y="1107.0" width="178.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="356.0" y="1118.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/349977608.process (24 samples, 13.95%)</title><rect x="353.0" y="1091.0" width="164.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="356.0" y="1102.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (24 samples, 13.95%)</title><rect x="353.0" y="1075.0" width="164.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.0" y="1086.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (23 samples, 13.37%)</title><rect x="353.0" y="1059.0" width="157.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="356.0" y="1070.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (22 samples, 12.79%)</title><rect x="353.0" y="1043.0" width="151.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.0" y="1054.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/lang/Thread.sleep (22 samples, 12.79%)</title><rect x="353.0" y="1027.0" width="151.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.0" y="1038.0">java/lang/Thread.sl..</text>
</g>
<g>
<title>JVM_Sleep (21 samples, 12.21%)</title><rect x="359.9" y="1011.0" width="144.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="362.9" y="1022.0">JVM_Sleep</text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.58%)</title><rect x="366.7" y="995.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="369.7" y="1006.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.58%)</title><rect x="373.6" y="995.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="376.6" y="1006.0"></text>
</g>
<g>
<title>__lll_unlock_wake (6 samples, 3.49%)</title><rect x="380.5" y="995.0" width="41.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="383.5" y="1006.0">__l..</text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 4.07%)</title><rect x="421.6" y="995.0" width="48.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="424.6" y="1006.0">__pt..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (4 samples, 2.33%)</title><rect x="469.7" y="995.0" width="27.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="472.7" y="1006.0">o..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.58%)</title><rect x="469.7" y="979.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="472.7" y="990.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.58%)</title><rect x="469.7" y="963.0" width="6.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="472.7" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.74%)</title><rect x="476.5" y="979.0" width="20.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="479.5" y="990.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.74%)</title><rect x="476.5" y="963.0" width="20.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="479.5" y="974.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.58%)</title><rect x="497.1" y="995.0" width="6.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="500.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.58%)</title><rect x="504.0" y="1043.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="507.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.58%)</title><rect x="504.0" y="1027.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="507.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch$Sync.tryReleaseShared (1 samples, 0.58%)</title><rect x="504.0" y="1011.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.58%)</title><rect x="504.0" y="995.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="507.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.58%)</title><rect x="504.0" y="979.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="507.0" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.58%)</title><rect x="504.0" y="963.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.0" y="974.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.58%)</title><rect x="504.0" y="947.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.58%)</title><rect x="510.8" y="1059.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="513.8" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.58%)</title><rect x="510.8" y="1043.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="513.8" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="510.8" y="1027.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="513.8" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.58%)</title><rect x="517.7" y="1091.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="520.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.58%)</title><rect x="517.7" y="1075.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="520.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.58%)</title><rect x="517.7" y="1059.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="524.5" y="1091.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="527.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="524.5" y="1075.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.58%)</title><rect x="524.5" y="1059.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.58%)</title><rect x="524.5" y="1043.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="527.5" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.58%)</title><rect x="524.5" y="1027.0" width="6.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="527.5" y="1038.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.16%)</title><rect x="531.4" y="1139.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="534.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.16%)</title><rect x="531.4" y="1123.0" width="13.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="534.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.74%)</title><rect x="545.1" y="1203.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="548.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 1.16%)</title><rect x="552.0" y="1187.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.58%)</title><rect x="552.0" y="1171.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="555.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.58%)</title><rect x="552.0" y="1155.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="555.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="552.0" y="1139.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="555.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.58%)</title><rect x="558.8" y="1171.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="561.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="558.8" y="1155.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="561.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.58%)</title><rect x="558.8" y="1139.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="561.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.58%)</title><rect x="558.8" y="1123.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.58%)</title><rect x="565.7" y="1251.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="568.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.58%)</title><rect x="565.7" y="1235.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="568.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.58%)</title><rect x="565.7" y="1219.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="568.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.58%)</title><rect x="565.7" y="1203.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="568.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.58%)</title><rect x="565.7" y="1187.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="568.7" y="1198.0"></text>
</g>
<g>
<title>start_thread (90 samples, 52.33%)</title><rect x="572.6" y="1251.0" width="617.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="575.6" y="1262.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (90 samples, 52.33%)</title><rect x="572.6" y="1235.0" width="617.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="575.6" y="1246.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (90 samples, 52.33%)</title><rect x="572.6" y="1219.0" width="617.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="575.6" y="1230.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 4.07%)</title><rect x="572.6" y="1203.0" width="48.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="575.6" y="1214.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 4.07%)</title><rect x="572.6" y="1187.0" width="48.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="575.6" y="1198.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (6 samples, 3.49%)</title><rect x="572.6" y="1171.0" width="41.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="575.6" y="1182.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 2.33%)</title><rect x="586.3" y="1155.0" width="27.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="589.3" y="1166.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.16%)</title><rect x="600.0" y="1139.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.0" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.58%)</title><rect x="606.9" y="1123.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.9" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.58%)</title><rect x="613.7" y="1171.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="616.7" y="1182.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.58%)</title><rect x="613.7" y="1155.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="616.7" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.58%)</title><rect x="613.7" y="1139.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="616.7" y="1150.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.58%)</title><rect x="613.7" y="1123.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="616.7" y="1134.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.58%)</title><rect x="613.7" y="1107.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="616.7" y="1118.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.58%)</title><rect x="613.7" y="1091.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.7" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.58%)</title><rect x="613.7" y="1075.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="616.7" y="1086.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 48.26%)</title><rect x="620.6" y="1203.0" width="569.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.6" y="1214.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (82 samples, 47.67%)</title><rect x="620.6" y="1187.0" width="562.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.6" y="1198.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (82 samples, 47.67%)</title><rect x="620.6" y="1171.0" width="562.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="623.6" y="1182.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (76 samples, 44.19%)</title><rect x="620.6" y="1155.0" width="521.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.6" y="1166.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (76 samples, 44.19%)</title><rect x="620.6" y="1139.0" width="521.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.6" y="1150.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (47 samples, 27.33%)</title><rect x="620.6" y="1123.0" width="322.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.6" y="1134.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.74%)</title><rect x="620.6" y="1107.0" width="20.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.6" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.16%)</title><rect x="620.6" y="1091.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="623.6" y="1102.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.58%)</title><rect x="620.6" y="1075.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="623.6" y="1086.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.58%)</title><rect x="627.4" y="1075.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="630.4" y="1086.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.58%)</title><rect x="627.4" y="1059.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="630.4" y="1070.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.58%)</title><rect x="634.3" y="1091.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="637.3" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.58%)</title><rect x="634.3" y="1075.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.3" y="1086.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.58%)</title><rect x="634.3" y="1059.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="637.3" y="1070.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.58%)</title><rect x="634.3" y="1043.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="637.3" y="1054.0"></text>
</g>
<g>
<title>MacroAssembler::decode_heap_oop_not_null(RegisterImpl*, RegisterImpl*) (1 samples, 0.58%)</title><rect x="634.3" y="1027.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="637.3" y="1038.0"></text>
</g>
<g>
<title>Assembler::leaq(RegisterImpl*, Address) (1 samples, 0.58%)</title><rect x="634.3" y="1011.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="637.3" y="1022.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.91%)</title><rect x="641.2" y="1107.0" width="34.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="644.2" y="1118.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.33%)</title><rect x="641.2" y="1091.0" width="27.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="644.2" y="1102.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.58%)</title><rect x="641.2" y="1075.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="644.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 1.74%)</title><rect x="648.0" y="1075.0" width="20.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="651.0" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.58%)</title><rect x="654.9" y="1059.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="657.9" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="654.9" y="1043.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="657.9" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.58%)</title><rect x="654.9" y="1027.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="657.9" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.58%)</title><rect x="654.9" y="1011.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="657.9" y="1022.0"></text>
</g>
<g>
<title>Node::match_edge(unsigned int) const (1 samples, 0.58%)</title><rect x="661.7" y="1059.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="664.7" y="1070.0"></text>
</g>
<g>
<title>StoreNNode::Opcode() const (1 samples, 0.58%)</title><rect x="668.6" y="1091.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="671.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 3.49%)</title><rect x="675.5" y="1107.0" width="41.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="678.5" y="1118.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 3.49%)</title><rect x="675.5" y="1091.0" width="41.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="678.5" y="1102.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.16%)</title><rect x="675.5" y="1075.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="678.5" y="1086.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.58%)</title><rect x="675.5" y="1059.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="678.5" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.58%)</title><rect x="682.3" y="1059.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="685.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 1.74%)</title><rect x="689.2" y="1075.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="692.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.58%)</title><rect x="702.9" y="1059.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="705.9" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.58%)</title><rect x="709.8" y="1075.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="712.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 19.19%)</title><rect x="716.6" y="1107.0" width="226.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="719.6" y="1118.0">PhaseChaitin::Register_Allocat..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.58%)</title><rect x="716.6" y="1091.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="719.6" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.58%)</title><rect x="723.5" y="1091.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="726.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.16%)</title><rect x="730.3" y="1091.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="733.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.58%)</title><rect x="737.2" y="1075.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.2" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="737.2" y="1059.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="740.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 4.07%)</title><rect x="744.1" y="1091.0" width="48.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="747.1" y="1102.0">Phas..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.58%)</title><rect x="757.8" y="1075.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="760.8" y="1086.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.58%)</title><rect x="764.7" y="1075.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="767.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.58%)</title><rect x="771.5" y="1075.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="774.5" y="1086.0"></text>
</g>
<g>
<title>indOffset8Oper::in_RegMask(int) const (1 samples, 0.58%)</title><rect x="778.4" y="1075.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="781.4" y="1086.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.58%)</title><rect x="785.2" y="1075.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="788.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.07%)</title><rect x="792.1" y="1091.0" width="48.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="795.1" y="1102.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.33%)</title><rect x="792.1" y="1075.0" width="27.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="795.1" y="1086.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="812.7" y="1059.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="815.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 1.74%)</title><rect x="819.5" y="1075.0" width="20.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="822.5" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="819.5" y="1059.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="822.5" y="1070.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.58%)</title><rect x="826.4" y="1059.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.4" y="1070.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.58%)</title><rect x="833.3" y="1059.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.74%)</title><rect x="840.1" y="1091.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="843.1" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.33%)</title><rect x="860.7" y="1091.0" width="27.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="863.7" y="1102.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.74%)</title><rect x="867.6" y="1075.0" width="20.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="870.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 1.16%)</title><rect x="888.1" y="1091.0" width="13.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="891.1" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.16%)</title><rect x="901.9" y="1091.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.9" y="1102.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.16%)</title><rect x="901.9" y="1075.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.9" y="1086.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 1.16%)</title><rect x="901.9" y="1059.0" width="13.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="904.9" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="908.7" y="1043.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.16%)</title><rect x="915.6" y="1091.0" width="13.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.6" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.16%)</title><rect x="915.6" y="1075.0" width="13.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="918.6" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.16%)</title><rect x="929.3" y="1091.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="932.3" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.58%)</title><rect x="929.3" y="1075.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="932.3" y="1086.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.58%)</title><rect x="929.3" y="1059.0" width="6.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="932.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.58%)</title><rect x="936.2" y="1075.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.2" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="936.2" y="1059.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="939.2" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 12.21%)</title><rect x="943.0" y="1123.0" width="144.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="946.0" y="1134.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 4.07%)</title><rect x="943.0" y="1107.0" width="48.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.0" y="1118.0">Comp..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 4.07%)</title><rect x="943.0" y="1091.0" width="48.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="946.0" y="1102.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.33%)</title><rect x="943.0" y="1075.0" width="27.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="946.0" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.33%)</title><rect x="943.0" y="1059.0" width="27.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="946.0" y="1070.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.74%)</title><rect x="949.9" y="1043.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="952.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.58%)</title><rect x="956.7" y="1027.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="959.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="956.7" y="1011.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.58%)</title><rect x="963.6" y="1027.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="966.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.58%)</title><rect x="970.5" y="1075.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="973.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 1.16%)</title><rect x="977.3" y="1075.0" width="13.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.58%)</title><rect x="977.3" y="1059.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::try_move_store_before_loop(Node*, Node*) (1 samples, 0.58%)</title><rect x="984.2" y="1059.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.58%)</title><rect x="991.0" y="1107.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="994.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.58%)</title><rect x="991.0" y="1091.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="994.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.58%)</title><rect x="991.0" y="1075.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="994.0" y="1086.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.58%)</title><rect x="991.0" y="1059.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="994.0" y="1070.0"></text>
</g>
<g>
<title>CallNode::bottom_type() const (1 samples, 0.58%)</title><rect x="991.0" y="1043.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="994.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 4.07%)</title><rect x="997.9" y="1107.0" width="48.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.9" y="1118.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.58%)</title><rect x="997.9" y="1091.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1000.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.58%)</title><rect x="1004.8" y="1091.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1007.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.33%)</title><rect x="1011.6" y="1091.0" width="27.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1014.6" y="1102.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.74%)</title><rect x="1018.5" y="1075.0" width="20.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1021.5" y="1086.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.58%)</title><rect x="1018.5" y="1059.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1021.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.16%)</title><rect x="1025.3" y="1059.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.58%)</title><rect x="1032.2" y="1043.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1035.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.58%)</title><rect x="1039.1" y="1091.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1042.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 3.49%)</title><rect x="1045.9" y="1107.0" width="41.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.9" y="1118.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 3.49%)</title><rect x="1045.9" y="1091.0" width="41.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1048.9" y="1102.0">Pha..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1045.9" y="1075.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1048.9" y="1086.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1045.9" y="1059.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.9" y="1070.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.58%)</title><rect x="1045.9" y="1043.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.9" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.58%)</title><rect x="1045.9" y="1027.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.9" y="1038.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.58%)</title><rect x="1045.9" y="1011.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.9" y="1022.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.58%)</title><rect x="1045.9" y="995.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1048.9" y="1006.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.58%)</title><rect x="1045.9" y="979.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1048.9" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.58%)</title><rect x="1052.8" y="1075.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.8" y="1086.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.58%)</title><rect x="1052.8" y="1059.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.8" y="1070.0"></text>
</g>
<g>
<title>CastPPNode::Opcode() const (1 samples, 0.58%)</title><rect x="1052.8" y="1043.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.8" y="1054.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.58%)</title><rect x="1059.7" y="1075.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.7" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1066.5" y="1075.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1069.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.58%)</title><rect x="1066.5" y="1059.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1069.5" y="1070.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.58%)</title><rect x="1066.5" y="1043.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1069.5" y="1054.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 1.16%)</title><rect x="1073.4" y="1075.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1076.4" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.58%)</title><rect x="1073.4" y="1059.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.4" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1073.4" y="1043.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1076.4" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1073.4" y="1027.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1076.4" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1073.4" y="1011.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1076.4" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.58%)</title><rect x="1073.4" y="995.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.4" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.58%)</title><rect x="1073.4" y="979.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.4" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1073.4" y="963.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1076.4" y="974.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1080.2" y="1059.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1083.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.07%)</title><rect x="1087.1" y="1123.0" width="48.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.1" y="1134.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.07%)</title><rect x="1087.1" y="1107.0" width="48.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1090.1" y="1118.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.07%)</title><rect x="1087.1" y="1091.0" width="48.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.1" y="1102.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.07%)</title><rect x="1087.1" y="1075.0" width="48.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.1" y="1086.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.07%)</title><rect x="1087.1" y="1059.0" width="48.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1090.1" y="1070.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.49%)</title><rect x="1087.1" y="1043.0" width="41.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.1" y="1054.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1087.1" y="1027.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.1" y="1038.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.58%)</title><rect x="1087.1" y="1011.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1090.1" y="1022.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1087.1" y="995.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.1" y="1006.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.58%)</title><rect x="1087.1" y="979.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1090.1" y="990.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1087.1" y="963.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1090.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.91%)</title><rect x="1094.0" y="1027.0" width="34.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.0" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.91%)</title><rect x="1094.0" y="1011.0" width="34.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1097.0" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.91%)</title><rect x="1094.0" y="995.0" width="34.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.0" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.91%)</title><rect x="1094.0" y="979.0" width="34.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1097.0" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.91%)</title><rect x="1094.0" y="963.0" width="34.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.0" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.91%)</title><rect x="1094.0" y="947.0" width="34.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="958.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1094.0" y="931.0" width="13.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1097.0" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1094.0" y="915.0" width="13.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1094.0" y="899.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1094.0" y="883.0" width="13.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1097.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1094.0" y="867.0" width="13.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1097.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1094.0" y="851.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1097.0" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1094.0" y="835.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.0" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1094.0" y="819.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.0" y="830.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.58%)</title><rect x="1094.0" y="803.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.0" y="814.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.58%)</title><rect x="1094.0" y="787.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1100.8" y="803.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1100.8" y="787.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1100.8" y="771.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1100.8" y="755.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1100.8" y="739.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1100.8" y="723.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.8" y="734.0"></text>
</g>
<g>
<title>GraphKit::GraphKit() (1 samples, 0.58%)</title><rect x="1100.8" y="707.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.8" y="718.0"></text>
</g>
<g>
<title>Phase::Phase(Phase::PhaseNumber) (1 samples, 0.58%)</title><rect x="1100.8" y="691.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.8" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1107.7" y="931.0" width="20.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1107.7" y="915.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1107.7" y="899.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1107.7" y="883.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1107.7" y="867.0" width="20.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1107.7" y="851.0" width="20.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.74%)</title><rect x="1107.7" y="835.0" width="20.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1107.7" y="819.0" width="20.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1107.7" y="803.0" width="20.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1107.7" y="787.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1107.7" y="771.0" width="20.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1107.7" y="755.0" width="20.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.74%)</title><rect x="1107.7" y="739.0" width="20.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1107.7" y="723.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1107.7" y="707.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1107.7" y="691.0" width="20.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1107.7" y="675.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1107.7" y="659.0" width="20.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.74%)</title><rect x="1107.7" y="643.0" width="20.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1107.7" y="627.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1107.7" y="611.0" width="20.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1107.7" y="595.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1107.7" y="579.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1107.7" y="563.0" width="20.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.74%)</title><rect x="1107.7" y="547.0" width="20.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.74%)</title><rect x="1107.7" y="531.0" width="20.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.74%)</title><rect x="1107.7" y="515.0" width="20.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.74%)</title><rect x="1107.7" y="499.0" width="20.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.74%)</title><rect x="1107.7" y="483.0" width="20.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.74%)</title><rect x="1107.7" y="467.0" width="20.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1107.7" y="451.0" width="13.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.7" y="462.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.58%)</title><rect x="1107.7" y="435.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.7" y="446.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.58%)</title><rect x="1107.7" y="419.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.7" y="430.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.58%)</title><rect x="1107.7" y="403.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.7" y="414.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.58%)</title><rect x="1107.7" y="387.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.7" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1114.5" y="435.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.5" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1114.5" y="419.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1114.5" y="403.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1114.5" y="387.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1114.5" y="371.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1114.5" y="355.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.5" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1114.5" y="339.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1114.5" y="323.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1114.5" y="307.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1114.5" y="291.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1114.5" y="275.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1114.5" y="259.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1114.5" y="243.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1114.5" y="227.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1114.5" y="211.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1114.5" y="195.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1114.5" y="179.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="163.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.5" y="174.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="147.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.5" y="158.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.58%)</title><rect x="1114.5" y="131.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.5" y="142.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.58%)</title><rect x="1114.5" y="115.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.5" y="126.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.58%)</title><rect x="1114.5" y="99.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.5" y="110.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.58%)</title><rect x="1114.5" y="83.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.5" y="94.0"></text>
</g>
<g>
<title>G1BarrierSetC2::g1_mark_card(GraphKit*, IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) const (1 samples, 0.58%)</title><rect x="1114.5" y="67.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.5" y="78.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.58%)</title><rect x="1114.5" y="51.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.5" y="62.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.58%)</title><rect x="1114.5" y="35.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.5" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1121.4" y="451.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.4" y="462.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.58%)</title><rect x="1121.4" y="435.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.4" y="446.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.58%)</title><rect x="1121.4" y="419.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.4" y="430.0"></text>
</g>
<g>
<title>HaltNode::HaltNode(Node*, Node*, char const*, bool) (1 samples, 0.58%)</title><rect x="1121.4" y="403.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.4" y="414.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.58%)</title><rect x="1121.4" y="387.0" width="6.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1124.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.58%)</title><rect x="1128.3" y="1043.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.58%)</title><rect x="1128.3" y="1027.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.3" y="1038.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.58%)</title><rect x="1128.3" y="1011.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.3" y="1022.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.58%)</title><rect x="1128.3" y="995.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.3" y="1006.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.58%)</title><rect x="1128.3" y="979.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.3" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1128.3" y="963.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.3" y="974.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.58%)</title><rect x="1128.3" y="947.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.3" y="958.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.58%)</title><rect x="1135.1" y="1123.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.1" y="1134.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.58%)</title><rect x="1135.1" y="1107.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.1" y="1118.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.58%)</title><rect x="1135.1" y="1091.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.1" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.58%)</title><rect x="1135.1" y="1075.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.1" y="1086.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.58%)</title><rect x="1135.1" y="1059.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.1" y="1070.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.58%)</title><rect x="1135.1" y="1043.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.1" y="1054.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (6 samples, 3.49%)</title><rect x="1142.0" y="1155.0" width="41.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.0" y="1166.0">Com..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (6 samples, 3.49%)</title><rect x="1142.0" y="1139.0" width="41.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.0" y="1150.0">Com..</text>
</g>
<g>
<title>Compilation::compile_method() (6 samples, 3.49%)</title><rect x="1142.0" y="1123.0" width="41.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.0" y="1134.0">Com..</text>
</g>
<g>
<title>Compilation::compile_java_method() (6 samples, 3.49%)</title><rect x="1142.0" y="1107.0" width="41.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="1118.0">Com..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (4 samples, 2.33%)</title><rect x="1142.0" y="1091.0" width="27.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.0" y="1102.0">C..</text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 2.33%)</title><rect x="1142.0" y="1075.0" width="27.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="1086.0">I..</text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 2.33%)</title><rect x="1142.0" y="1059.0" width="27.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.0" y="1070.0">I..</text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 2.33%)</title><rect x="1142.0" y="1043.0" width="27.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.0" y="1054.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (4 samples, 2.33%)</title><rect x="1142.0" y="1027.0" width="27.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.0" y="1038.0">G..</text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (4 samples, 2.33%)</title><rect x="1142.0" y="1011.0" width="27.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.0" y="1022.0">G..</text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.58%)</title><rect x="1142.0" y="995.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.0" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.58%)</title><rect x="1142.0" y="979.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.0" y="990.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.58%)</title><rect x="1142.0" y="963.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.0" y="974.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.58%)</title><rect x="1142.0" y="947.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.0" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.58%)</title><rect x="1142.0" y="931.0" width="6.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1145.0" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 1.74%)</title><rect x="1148.8" y="995.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.8" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 1.74%)</title><rect x="1148.8" y="979.0" width="20.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.8" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 1.74%)</title><rect x="1148.8" y="963.0" width="20.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 1.74%)</title><rect x="1148.8" y="947.0" width="20.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.8" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 1.74%)</title><rect x="1148.8" y="931.0" width="20.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.8" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 1.74%)</title><rect x="1148.8" y="915.0" width="20.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.8" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (3 samples, 1.74%)</title><rect x="1148.8" y="899.0" width="20.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.8" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 1.16%)</title><rect x="1148.8" y="883.0" width="13.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.8" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.16%)</title><rect x="1148.8" y="867.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.8" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.16%)</title><rect x="1148.8" y="851.0" width="13.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::ScopeData::add_to_work_list(BlockBegin*) (1 samples, 0.58%)</title><rect x="1148.8" y="835.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.8" y="846.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.58%)</title><rect x="1148.8" y="819.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="830.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.58%)</title><rect x="1148.8" y="803.0" width="6.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1151.8" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1155.7" y="835.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.7" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1155.7" y="819.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1155.7" y="803.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1155.7" y="787.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1155.7" y="771.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::check_cast(int) (1 samples, 0.58%)</title><rect x="1155.7" y="755.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.7" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.58%)</title><rect x="1155.7" y="739.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.7" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1155.7" y="723.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.7" y="734.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.58%)</title><rect x="1155.7" y="707.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.7" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.58%)</title><rect x="1162.6" y="883.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.6" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.6" y="867.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.6" y="851.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.6" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.58%)</title><rect x="1162.6" y="835.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.58%)</title><rect x="1162.6" y="819.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.6" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.58%)</title><rect x="1162.6" y="803.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.6" y="787.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.58%)</title><rect x="1162.6" y="771.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.6" y="755.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.58%)</title><rect x="1162.6" y="739.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.58%)</title><rect x="1162.6" y="723.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="734.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.58%)</title><rect x="1162.6" y="707.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.6" y="718.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.58%)</title><rect x="1162.6" y="691.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.6" y="702.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.58%)</title><rect x="1162.6" y="675.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.6" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.58%)</title><rect x="1162.6" y="659.0" width="6.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1165.6" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.58%)</title><rect x="1169.4" y="1091.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="1102.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.58%)</title><rect x="1169.4" y="1075.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.4" y="1086.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.58%)</title><rect x="1169.4" y="1059.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="1070.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.58%)</title><rect x="1176.3" y="1091.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.58%)</title><rect x="1176.3" y="1075.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1086.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.58%)</title><rect x="1176.3" y="1059.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.58%)</title><rect x="1176.3" y="1043.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.58%)</title><rect x="1176.3" y="1027.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.58%)</title><rect x="1176.3" y="1011.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.58%)</title><rect x="1176.3" y="995.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.58%)</title><rect x="1183.1" y="1187.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="1198.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.58%)</title><rect x="1183.1" y="1171.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="1182.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.58%)</title><rect x="1183.1" y="1155.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="1166.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.58%)</title><rect x="1183.1" y="1139.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="1150.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.58%)</title><rect x="1183.1" y="1123.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="1134.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.58%)</title><rect x="1183.1" y="1107.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="1118.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.58%)</title><rect x="1183.1" y="1091.0" width="6.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1186.1" y="1102.0"></text>
</g>
</g>
</svg>
