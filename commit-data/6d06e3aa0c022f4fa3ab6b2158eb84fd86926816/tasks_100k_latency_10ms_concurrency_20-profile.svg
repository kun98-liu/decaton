<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1637"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1637"> </text>
<g id="frames">
<g>
<title>all (188 samples, 100.00%)</title><rect x="10.0" y="1603.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1614.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.53%)</title><rect x="10.0" y="1587.0" width="6.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int, int) (1 samples, 0.53%)</title><rect x="10.0" y="1571.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.53%)</title><rect x="10.0" y="1555.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>Deoptimization::revoke_biases_of_monitors(JavaThread*, frame, RegisterMap*) (1 samples, 0.53%)</title><rect x="10.0" y="1539.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>vframe::new_vframe(frame const*, RegisterMap const*, JavaThread*) [clone .part.36] (1 samples, 0.53%)</title><rect x="10.0" y="1523.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>compiledVFrame::compiledVFrame(frame const*, RegisterMap const*, JavaThread*, CompiledMethod*) (1 samples, 0.53%)</title><rect x="10.0" y="1507.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.53%)</title><rect x="10.0" y="1491.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.53%)</title><rect x="10.0" y="1475.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="10.0" y="1459.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.53%)</title><rect x="10.0" y="1443.0" width="6.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.53%)</title><rect x="16.3" y="1587.0" width="6.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="19.3" y="1598.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.53%)</title><rect x="16.3" y="1571.0" width="6.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="19.3" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (13 samples, 6.91%)</title><rect x="22.6" y="1587.0" width="81.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.6" y="1598.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (13 samples, 6.91%)</title><rect x="22.6" y="1571.0" width="81.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="25.6" y="1582.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (13 samples, 6.91%)</title><rect x="22.6" y="1555.0" width="81.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.6" y="1566.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.53%)</title><rect x="22.6" y="1539.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.6" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.53%)</title><rect x="22.6" y="1523.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="25.6" y="1534.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.66%)</title><rect x="28.8" y="1539.0" width="31.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="1550.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$239/1712805323.accept (4 samples, 2.13%)</title><rect x="28.8" y="1523.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="1534.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 2.13%)</title><rect x="28.8" y="1507.0" width="25.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.8" y="1518.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 1.06%)</title><rect x="28.8" y="1491.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.8" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.06%)</title><rect x="28.8" y="1475.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.06%)</title><rect x="28.8" y="1459.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.8" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.53%)</title><rect x="28.8" y="1443.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.53%)</title><rect x="28.8" y="1427.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.8" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$468/875417437.get$Lambda (1 samples, 0.53%)</title><rect x="28.8" y="1411.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.8" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.53%)</title><rect x="28.8" y="1395.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="31.8" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.53%)</title><rect x="28.8" y="1379.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="31.8" y="1390.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.53%)</title><rect x="28.8" y="1363.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="31.8" y="1374.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.53%)</title><rect x="28.8" y="1347.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="31.8" y="1358.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.53%)</title><rect x="28.8" y="1331.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="31.8" y="1342.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.53%)</title><rect x="28.8" y="1315.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="31.8" y="1326.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.53%)</title><rect x="28.8" y="1299.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="31.8" y="1310.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.53%)</title><rect x="28.8" y="1283.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="31.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.53%)</title><rect x="35.1" y="1443.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.53%)</title><rect x="35.1" y="1427.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="38.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.53%)</title><rect x="35.1" y="1411.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.53%)</title><rect x="35.1" y="1395.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.53%)</title><rect x="35.1" y="1379.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="38.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 1.06%)</title><rect x="41.4" y="1491.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.4" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 1.06%)</title><rect x="41.4" y="1475.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.4" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.06%)</title><rect x="41.4" y="1459.0" width="12.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.4" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.06%)</title><rect x="41.4" y="1443.0" width="12.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.4" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.06%)</title><rect x="41.4" y="1427.0" width="12.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 1.06%)</title><rect x="41.4" y="1411.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.53%)</title><rect x="53.9" y="1523.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.9" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.53%)</title><rect x="53.9" y="1507.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.9" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.53%)</title><rect x="53.9" y="1491.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.9" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.53%)</title><rect x="53.9" y="1475.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.9" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.53%)</title><rect x="53.9" y="1459.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.72%)</title><rect x="60.2" y="1539.0" width="43.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="63.2" y="1550.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.72%)</title><rect x="60.2" y="1523.0" width="43.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.2" y="1534.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.66%)</title><rect x="60.2" y="1507.0" width="31.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.2" y="1518.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.60%)</title><rect x="60.2" y="1491.0" width="18.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="63.2" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.06%)</title><rect x="66.5" y="1475.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.06%)</title><rect x="66.5" y="1459.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleDisconnections (1 samples, 0.53%)</title><rect x="66.5" y="1443.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="69.5" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.entrySet (1 samples, 0.53%)</title><rect x="66.5" y="1427.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.53%)</title><rect x="72.8" y="1443.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.8" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="72.8" y="1427.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="75.8" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.53%)</title><rect x="72.8" y="1411.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="75.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (2 samples, 1.06%)</title><rect x="79.0" y="1491.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="82.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.06%)</title><rect x="79.0" y="1475.0" width="12.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.53%)</title><rect x="79.0" y="1459.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="82.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.53%)</title><rect x="79.0" y="1443.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="82.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.53%)</title><rect x="79.0" y="1427.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.53%)</title><rect x="85.3" y="1459.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.3" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.53%)</title><rect x="91.6" y="1507.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.6" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.53%)</title><rect x="91.6" y="1491.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.6" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.53%)</title><rect x="91.6" y="1475.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.6" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.53%)</title><rect x="91.6" y="1459.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.6" y="1470.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.53%)</title><rect x="91.6" y="1443.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.6" y="1454.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.53%)</title><rect x="91.6" y="1427.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.6" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.53%)</title><rect x="91.6" y="1411.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.6" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (1 samples, 0.53%)</title><rect x="91.6" y="1395.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.6" y="1406.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.53%)</title><rect x="91.6" y="1379.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="94.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.53%)</title><rect x="97.9" y="1507.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.9" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.metadata (1 samples, 0.53%)</title><rect x="97.9" y="1491.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="100.9" y="1502.0"></text>
</g>
<g>
<title>java/lang/Thread.run (68 samples, 36.17%)</title><rect x="104.1" y="1587.0" width="426.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.1" y="1598.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (68 samples, 36.17%)</title><rect x="104.1" y="1571.0" width="426.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.1" y="1582.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (68 samples, 36.17%)</title><rect x="104.1" y="1555.0" width="426.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.1" y="1566.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$468/875417437.run (60 samples, 31.91%)</title><rect x="104.1" y="1539.0" width="376.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.1" y="1550.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (60 samples, 31.91%)</title><rect x="104.1" y="1523.0" width="376.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.1" y="1534.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (60 samples, 31.91%)</title><rect x="104.1" y="1507.0" width="376.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.1" y="1518.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (59 samples, 31.38%)</title><rect x="104.1" y="1491.0" width="370.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.1" y="1502.0">com/linecorp/decaton/processor/runtime/internal/Pr..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="110.4" y="1475.0" width="6.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="113.4" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.53%)</title><rect x="116.7" y="1475.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="119.7" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.53%)</title><rect x="116.7" y="1459.0" width="6.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="119.7" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.53%)</title><rect x="116.7" y="1443.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="119.7" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.53%)</title><rect x="116.7" y="1427.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="119.7" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 4.26%)</title><rect x="123.0" y="1475.0" width="50.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="126.0" y="1486.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.26%)</title><rect x="123.0" y="1459.0" width="50.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="126.0" y="1470.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.26%)</title><rect x="123.0" y="1443.0" width="50.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.0" y="1454.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.60%)</title><rect x="154.4" y="1427.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="157.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.53%)</title><rect x="154.4" y="1411.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.4" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$479/598494352.accept (1 samples, 0.53%)</title><rect x="154.4" y="1395.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="157.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.06%)</title><rect x="160.6" y="1411.0" width="12.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.6" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$479/598494352.accept (2 samples, 1.06%)</title><rect x="160.6" y="1395.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.6" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (2 samples, 1.06%)</title><rect x="160.6" y="1379.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.53%)</title><rect x="166.9" y="1363.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.53%)</title><rect x="166.9" y="1347.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.53%)</title><rect x="166.9" y="1331.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.53%)</title><rect x="166.9" y="1315.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (8 samples, 4.26%)</title><rect x="173.2" y="1475.0" width="50.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.2" y="1486.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$137/86558824.extract (8 samples, 4.26%)</title><rect x="173.2" y="1459.0" width="50.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="176.2" y="1470.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 4.26%)</title><rect x="173.2" y="1443.0" width="50.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="1454.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.26%)</title><rect x="173.2" y="1427.0" width="50.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="176.2" y="1438.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 4.26%)</title><rect x="173.2" y="1411.0" width="50.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.2" y="1422.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 4.26%)</title><rect x="173.2" y="1395.0" width="50.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.2" y="1406.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.53%)</title><rect x="173.2" y="1379.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.2" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.66%)</title><rect x="179.5" y="1379.0" width="31.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="182.5" y="1390.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.06%)</title><rect x="179.5" y="1363.0" width="12.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.5" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.06%)</title><rect x="179.5" y="1347.0" width="12.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="182.5" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.53%)</title><rect x="179.5" y="1331.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.5" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.53%)</title><rect x="185.7" y="1331.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.7" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.53%)</title><rect x="185.7" y="1315.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="188.7" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.60%)</title><rect x="192.0" y="1363.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="195.0" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.60%)</title><rect x="192.0" y="1347.0" width="18.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.0" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.60%)</title><rect x="192.0" y="1331.0" width="18.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="195.0" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.60%)</title><rect x="192.0" y="1315.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.0" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.60%)</title><rect x="192.0" y="1299.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="195.0" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.53%)</title><rect x="192.0" y="1283.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="195.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.53%)</title><rect x="192.0" y="1267.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.53%)</title><rect x="192.0" y="1251.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.53%)</title><rect x="192.0" y="1235.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.53%)</title><rect x="192.0" y="1219.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="195.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.53%)</title><rect x="198.3" y="1283.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="201.3" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.53%)</title><rect x="204.6" y="1283.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.6" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="204.6" y="1267.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.53%)</title><rect x="204.6" y="1251.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.53%)</title><rect x="204.6" y="1235.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.53%)</title><rect x="204.6" y="1219.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="207.6" y="1230.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.53%)</title><rect x="204.6" y="1203.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.6" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.06%)</title><rect x="210.9" y="1379.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.06%)</title><rect x="210.9" y="1363.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="213.9" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.06%)</title><rect x="210.9" y="1347.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.9" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.06%)</title><rect x="210.9" y="1331.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.06%)</title><rect x="210.9" y="1315.0" width="12.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (39 samples, 20.74%)</title><rect x="223.4" y="1475.0" width="244.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.4" y="1486.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (6 samples, 3.19%)</title><rect x="223.4" y="1459.0" width="37.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.4" y="1470.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.19%)</title><rect x="223.4" y="1443.0" width="37.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.4" y="1454.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (6 samples, 3.19%)</title><rect x="223.4" y="1427.0" width="37.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.4" y="1438.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.06%)</title><rect x="223.4" y="1411.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.06%)</title><rect x="223.4" y="1395.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.06%)</title><rect x="223.4" y="1379.0" width="12.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.4" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.13%)</title><rect x="236.0" y="1411.0" width="25.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.0" y="1422.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.13%)</title><rect x="236.0" y="1395.0" width="25.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.0" y="1406.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 2.13%)</title><rect x="236.0" y="1379.0" width="25.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.0" y="1390.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (9 samples, 4.79%)</title><rect x="261.1" y="1459.0" width="56.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.1" y="1470.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (7 samples, 3.72%)</title><rect x="261.1" y="1443.0" width="43.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="264.1" y="1454.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.60%)</title><rect x="273.6" y="1427.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.6" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.53%)</title><rect x="279.9" y="1411.0" width="6.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="282.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.53%)</title><rect x="279.9" y="1395.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.9" y="1406.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.53%)</title><rect x="279.9" y="1379.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="282.9" y="1390.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.53%)</title><rect x="279.9" y="1363.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.9" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.53%)</title><rect x="279.9" y="1347.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="282.9" y="1358.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.53%)</title><rect x="279.9" y="1331.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="282.9" y="1342.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.53%)</title><rect x="279.9" y="1315.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="282.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.53%)</title><rect x="286.2" y="1411.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.53%)</title><rect x="286.2" y="1395.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.53%)</title><rect x="286.2" y="1379.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.2" y="1390.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.53%)</title><rect x="286.2" y="1363.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.2" y="1374.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.06%)</title><rect x="292.4" y="1427.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.4" y="1438.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.06%)</title><rect x="292.4" y="1411.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.4" y="1422.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.06%)</title><rect x="292.4" y="1395.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.4" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.06%)</title><rect x="292.4" y="1379.0" width="12.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.4" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.06%)</title><rect x="292.4" y="1363.0" width="12.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.4" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.53%)</title><rect x="298.7" y="1347.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.7" y="1358.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.53%)</title><rect x="298.7" y="1331.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="301.7" y="1342.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.53%)</title><rect x="298.7" y="1315.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.7" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 1.06%)</title><rect x="305.0" y="1443.0" width="12.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 1.06%)</title><rect x="305.0" y="1427.0" width="12.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="1438.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 1.06%)</title><rect x="305.0" y="1411.0" width="12.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.06%)</title><rect x="305.0" y="1395.0" width="12.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (23 samples, 12.23%)</title><rect x="317.6" y="1459.0" width="144.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.6" y="1470.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.53%)</title><rect x="317.6" y="1443.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (22 samples, 11.70%)</title><rect x="323.8" y="1443.0" width="138.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="326.8" y="1454.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$395/95568055.process (17 samples, 9.04%)</title><rect x="330.1" y="1427.0" width="106.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.1" y="1438.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (17 samples, 9.04%)</title><rect x="330.1" y="1411.0" width="106.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.1" y="1422.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 9.04%)</title><rect x="330.1" y="1395.0" width="106.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.1" y="1406.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (17 samples, 9.04%)</title><rect x="330.1" y="1379.0" width="106.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="333.1" y="1390.0">com/linecorp/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (17 samples, 9.04%)</title><rect x="330.1" y="1363.0" width="106.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="333.1" y="1374.0">java/lang/Thr..</text>
</g>
<g>
<title>JVM_Sleep (17 samples, 9.04%)</title><rect x="330.1" y="1347.0" width="106.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="333.1" y="1358.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.53%)</title><rect x="336.4" y="1331.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="339.4" y="1342.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.53%)</title><rect x="342.7" y="1331.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="345.7" y="1342.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.53%)</title><rect x="348.9" y="1331.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="351.9" y="1342.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 1.60%)</title><rect x="355.2" y="1331.0" width="18.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="358.2" y="1342.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (9 samples, 4.79%)</title><rect x="374.0" y="1331.0" width="56.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="377.0" y="1342.0">os::sl..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 1.60%)</title><rect x="392.9" y="1315.0" width="18.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="395.9" y="1326.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.53%)</title><rect x="405.4" y="1299.0" width="6.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="408.4" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.60%)</title><rect x="411.7" y="1315.0" width="18.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="414.7" y="1326.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.60%)</title><rect x="411.7" y="1299.0" width="18.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="414.7" y="1310.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.53%)</title><rect x="430.5" y="1331.0" width="6.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="433.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.53%)</title><rect x="436.8" y="1427.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="439.8" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.53%)</title><rect x="436.8" y="1411.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="439.8" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.53%)</title><rect x="436.8" y="1395.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.8" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.53%)</title><rect x="436.8" y="1379.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.53%)</title><rect x="436.8" y="1363.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.8" y="1374.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.53%)</title><rect x="436.8" y="1347.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.8" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.53%)</title><rect x="443.1" y="1427.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="446.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.53%)</title><rect x="449.4" y="1427.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="452.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="455.6" y="1427.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="458.6" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="455.6" y="1411.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="458.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.53%)</title><rect x="455.6" y="1395.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.53%)</title><rect x="455.6" y="1379.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="461.9" y="1459.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="464.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.53%)</title><rect x="461.9" y="1443.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.9" y="1454.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.53%)</title><rect x="461.9" y="1427.0" width="6.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="464.9" y="1438.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="461.9" y="1411.0" width="6.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="464.9" y="1422.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.53%)</title><rect x="468.2" y="1475.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="471.2" y="1486.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.53%)</title><rect x="468.2" y="1459.0" width="6.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="471.2" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.53%)</title><rect x="474.5" y="1491.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.5" y="1502.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.53%)</title><rect x="474.5" y="1475.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="477.5" y="1486.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.53%)</title><rect x="474.5" y="1459.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="477.5" y="1470.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.53%)</title><rect x="474.5" y="1443.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.5" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.53%)</title><rect x="474.5" y="1427.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.5" y="1438.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.53%)</title><rect x="474.5" y="1411.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="477.5" y="1422.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.53%)</title><rect x="474.5" y="1395.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="477.5" y="1406.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.53%)</title><rect x="474.5" y="1379.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="477.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 1.06%)</title><rect x="480.7" y="1539.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.7" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.06%)</title><rect x="480.7" y="1523.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="483.7" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.06%)</title><rect x="480.7" y="1507.0" width="12.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.7" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.06%)</title><rect x="480.7" y="1491.0" width="12.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="483.7" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.53%)</title><rect x="487.0" y="1475.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="490.0" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 3.19%)</title><rect x="493.3" y="1539.0" width="37.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.3" y="1550.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.66%)</title><rect x="499.6" y="1523.0" width="31.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.6" y="1534.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.53%)</title><rect x="499.6" y="1507.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="502.6" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.53%)</title><rect x="499.6" y="1491.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.6" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.53%)</title><rect x="499.6" y="1475.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.6" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 2.13%)</title><rect x="505.9" y="1507.0" width="25.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.9" y="1518.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 2.13%)</title><rect x="505.9" y="1491.0" width="25.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.9" y="1502.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 2.13%)</title><rect x="505.9" y="1475.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.9" y="1486.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 2.13%)</title><rect x="505.9" y="1459.0" width="25.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.9" y="1470.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.53%)</title><rect x="531.0" y="1587.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="534.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.53%)</title><rect x="531.0" y="1571.0" width="6.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="534.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.53%)</title><rect x="531.0" y="1555.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="534.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.53%)</title><rect x="531.0" y="1539.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.53%)</title><rect x="531.0" y="1523.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.53%)</title><rect x="531.0" y="1507.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.53%)</title><rect x="531.0" y="1491.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="534.0" y="1502.0"></text>
</g>
<g>
<title>start_thread (104 samples, 55.32%)</title><rect x="537.2" y="1587.0" width="652.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="540.2" y="1598.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (104 samples, 55.32%)</title><rect x="537.2" y="1571.0" width="652.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="540.2" y="1582.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (104 samples, 55.32%)</title><rect x="537.2" y="1555.0" width="652.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="540.2" y="1566.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 4.26%)</title><rect x="537.2" y="1539.0" width="50.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="540.2" y="1550.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 4.26%)</title><rect x="537.2" y="1523.0" width="50.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="540.2" y="1534.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.72%)</title><rect x="537.2" y="1507.0" width="44.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="540.2" y="1518.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.72%)</title><rect x="537.2" y="1491.0" width="44.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="540.2" y="1502.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.66%)</title><rect x="543.5" y="1475.0" width="31.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="546.5" y="1486.0">G1..</text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.53%)</title><rect x="568.6" y="1459.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="571.6" y="1470.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.53%)</title><rect x="568.6" y="1443.0" width="6.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="571.6" y="1454.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.53%)</title><rect x="574.9" y="1475.0" width="6.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="577.9" y="1486.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="1507.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="584.2" y="1518.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="1491.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="584.2" y="1502.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="1475.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="584.2" y="1486.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="1459.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="584.2" y="1470.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.53%)</title><rect x="581.2" y="1443.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="584.2" y="1454.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.53%)</title><rect x="581.2" y="1427.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="584.2" y="1438.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.53%)</title><rect x="581.2" y="1411.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="584.2" y="1422.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.536] (1 samples, 0.53%)</title><rect x="581.2" y="1395.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="584.2" y="1406.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (96 samples, 51.06%)</title><rect x="587.4" y="1539.0" width="602.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="590.4" y="1550.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (95 samples, 50.53%)</title><rect x="587.4" y="1523.0" width="596.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.4" y="1534.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (95 samples, 50.53%)</title><rect x="587.4" y="1507.0" width="596.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="590.4" y="1518.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (90 samples, 47.87%)</title><rect x="587.4" y="1491.0" width="564.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="590.4" y="1502.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (90 samples, 47.87%)</title><rect x="587.4" y="1475.0" width="564.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="590.4" y="1486.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (59 samples, 31.38%)</title><rect x="587.4" y="1459.0" width="370.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="590.4" y="1470.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.06%)</title><rect x="587.4" y="1443.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="590.4" y="1454.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.53%)</title><rect x="587.4" y="1427.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="590.4" y="1438.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.53%)</title><rect x="587.4" y="1411.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="590.4" y="1422.0"></text>
</g>
<g>
<title>LocationValue::write_on(DebugInfoWriteStream*) (1 samples, 0.53%)</title><rect x="587.4" y="1395.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="590.4" y="1406.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.53%)</title><rect x="587.4" y="1379.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="590.4" y="1390.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.53%)</title><rect x="593.7" y="1427.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="596.7" y="1438.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.13%)</title><rect x="600.0" y="1443.0" width="25.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="1454.0">M..</text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.53%)</title><rect x="600.0" y="1427.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="1438.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.53%)</title><rect x="600.0" y="1411.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="1422.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.60%)</title><rect x="606.3" y="1427.0" width="18.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="609.3" y="1438.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.53%)</title><rect x="606.3" y="1411.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="609.3" y="1422.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.53%)</title><rect x="612.6" y="1411.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="615.6" y="1422.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.53%)</title><rect x="618.8" y="1411.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="621.8" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 5.32%)</title><rect x="625.1" y="1443.0" width="62.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="628.1" y="1454.0">PhaseC..</text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.53%)</title><rect x="625.1" y="1427.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="628.1" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.53%)</title><rect x="625.1" y="1411.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="628.1" y="1422.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.53%)</title><rect x="625.1" y="1395.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="628.1" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 4.79%)</title><rect x="631.4" y="1427.0" width="56.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="634.4" y="1438.0">PhaseC..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.60%)</title><rect x="631.4" y="1411.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="634.4" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 1.06%)</title><rect x="637.7" y="1395.0" width="12.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="640.7" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 1.60%)</title><rect x="650.2" y="1411.0" width="18.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="653.2" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.53%)</title><rect x="656.5" y="1395.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="659.5" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.53%)</title><rect x="662.8" y="1395.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="665.8" y="1406.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.53%)</title><rect x="662.8" y="1379.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="665.8" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.53%)</title><rect x="669.0" y="1411.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="672.0" y="1422.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.06%)</title><rect x="675.3" y="1411.0" width="12.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="678.3" y="1422.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.53%)</title><rect x="675.3" y="1395.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="678.3" y="1406.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.53%)</title><rect x="681.6" y="1395.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="684.6" y="1406.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.53%)</title><rect x="681.6" y="1379.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="684.6" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (43 samples, 22.87%)</title><rect x="687.9" y="1443.0" width="269.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="690.9" y="1454.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.53%)</title><rect x="694.1" y="1427.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="697.1" y="1438.0"></text>
</g>
<g>
<title>MachNode::bottom_type() const (1 samples, 0.53%)</title><rect x="700.4" y="1427.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="703.4" y="1438.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.53%)</title><rect x="706.7" y="1427.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="709.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.60%)</title><rect x="713.0" y="1427.0" width="18.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="716.0" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="719.3" y="1411.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="722.3" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.53%)</title><rect x="725.5" y="1411.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="728.5" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.06%)</title><rect x="731.8" y="1427.0" width="12.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.06%)</title><rect x="731.8" y="1411.0" width="12.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="734.8" y="1422.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="738.1" y="1395.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="741.1" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.66%)</title><rect x="744.4" y="1427.0" width="31.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="747.4" y="1438.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 4.79%)</title><rect x="775.7" y="1427.0" width="56.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="778.7" y="1438.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 1.06%)</title><rect x="782.0" y="1411.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="785.0" y="1422.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.53%)</title><rect x="788.3" y="1395.0" width="6.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="791.3" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.13%)</title><rect x="794.6" y="1411.0" width="25.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="797.6" y="1422.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="813.4" y="1395.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="816.4" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 1.06%)</title><rect x="819.7" y="1411.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="822.7" y="1422.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 1.06%)</title><rect x="819.7" y="1395.0" width="12.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="822.7" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.06%)</title><rect x="832.2" y="1427.0" width="12.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.2" y="1438.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.53%)</title><rect x="838.5" y="1411.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.5" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.53%)</title><rect x="844.8" y="1427.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="847.8" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.53%)</title><rect x="851.1" y="1427.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="854.1" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.13%)</title><rect x="857.3" y="1427.0" width="25.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="860.3" y="1438.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.53%)</title><rect x="876.2" y="1411.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="879.2" y="1422.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.06%)</title><rect x="882.4" y="1427.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="885.4" y="1438.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.06%)</title><rect x="882.4" y="1411.0" width="12.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.4" y="1422.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 1.06%)</title><rect x="882.4" y="1395.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.4" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.53%)</title><rect x="888.7" y="1379.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="891.7" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.06%)</title><rect x="895.0" y="1427.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="898.0" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.06%)</title><rect x="895.0" y="1411.0" width="12.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="898.0" y="1422.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 3.72%)</title><rect x="907.6" y="1427.0" width="43.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="910.6" y="1438.0">Phas..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.53%)</title><rect x="920.1" y="1411.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="923.1" y="1422.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.53%)</title><rect x="920.1" y="1395.0" width="6.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="923.1" y="1406.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 2.13%)</title><rect x="926.4" y="1411.0" width="25.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="929.4" y="1422.0">P..</text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.53%)</title><rect x="951.5" y="1427.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="954.5" y="1438.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 13.30%)</title><rect x="957.8" y="1459.0" width="156.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.8" y="1470.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.53%)</title><rect x="957.8" y="1443.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.8" y="1454.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.53%)</title><rect x="957.8" y="1427.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="960.8" y="1438.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (9 samples, 4.79%)</title><rect x="964.0" y="1443.0" width="56.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.0" y="1454.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (9 samples, 4.79%)</title><rect x="964.0" y="1427.0" width="56.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.0" y="1438.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.06%)</title><rect x="964.0" y="1411.0" width="12.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.0" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.53%)</title><rect x="970.3" y="1395.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="973.3" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.13%)</title><rect x="976.6" y="1411.0" width="25.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.6" y="1422.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.13%)</title><rect x="976.6" y="1395.0" width="25.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="979.6" y="1406.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.60%)</title><rect x="976.6" y="1379.0" width="18.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="979.6" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 1.06%)</title><rect x="976.6" y="1363.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="979.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.53%)</title><rect x="982.9" y="1347.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.53%)</title><rect x="982.9" y="1331.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="985.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.53%)</title><rect x="989.1" y="1363.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.1" y="1374.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.53%)</title><rect x="995.4" y="1379.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.4" y="1390.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.53%)</title><rect x="995.4" y="1363.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.4" y="1374.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.53%)</title><rect x="995.4" y="1347.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 1.06%)</title><rect x="1001.7" y="1411.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1004.7" y="1422.0"></text>
</g>
<g>
<title>LoadKlassNode::Opcode() const (1 samples, 0.53%)</title><rect x="1001.7" y="1395.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1004.7" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.53%)</title><rect x="1008.0" y="1395.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1011.0" y="1406.0"></text>
</g>
<g>
<title>SafePointNode::pinned() const (1 samples, 0.53%)</title><rect x="1014.3" y="1411.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.3" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.06%)</title><rect x="1020.5" y="1443.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1023.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.06%)</title><rect x="1020.5" y="1427.0" width="12.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1023.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1020.5" y="1411.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1023.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.53%)</title><rect x="1020.5" y="1395.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1023.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.53%)</title><rect x="1020.5" y="1379.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.53%)</title><rect x="1020.5" y="1363.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1411.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1395.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1379.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1363.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1347.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1331.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1315.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1299.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1283.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1267.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1251.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1235.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1029.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1219.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1203.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1187.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1171.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1155.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1139.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1123.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1107.0" width="6.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1029.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1091.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1075.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1059.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1043.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1027.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="1011.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1029.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="995.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="979.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="963.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="947.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1029.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="931.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="915.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1029.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="899.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="883.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="867.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="851.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="835.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1029.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="819.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="803.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.53%)</title><rect x="1026.8" y="787.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1029.8" y="798.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.53%)</title><rect x="1026.8" y="771.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.8" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.53%)</title><rect x="1033.1" y="1443.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.1" y="1454.0"></text>
</g>
<g>
<title>HaltNode::Opcode() const (1 samples, 0.53%)</title><rect x="1033.1" y="1427.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1036.1" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 3.19%)</title><rect x="1039.4" y="1443.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1042.4" y="1454.0">Pha..</text>
</g>
<g>
<title>HaltNode::pinned() const (1 samples, 0.53%)</title><rect x="1039.4" y="1427.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1042.4" y="1438.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.53%)</title><rect x="1045.6" y="1427.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.6" y="1438.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.53%)</title><rect x="1045.6" y="1411.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.6" y="1422.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.53%)</title><rect x="1045.6" y="1395.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.6" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.53%)</title><rect x="1045.6" y="1379.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1048.6" y="1390.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.53%)</title><rect x="1045.6" y="1363.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1048.6" y="1374.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="1045.6" y="1347.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1048.6" y="1358.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="1045.6" y="1331.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1048.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.53%)</title><rect x="1051.9" y="1427.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.9" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.53%)</title><rect x="1058.2" y="1427.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.2" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.06%)</title><rect x="1064.5" y="1427.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1067.5" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.06%)</title><rect x="1064.5" y="1411.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1067.5" y="1422.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.53%)</title><rect x="1064.5" y="1395.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.53%)</title><rect x="1070.7" y="1395.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.7" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.53%)</title><rect x="1070.7" y="1379.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1073.7" y="1390.0"></text>
</g>
<g>
<title>Node::has_special_unique_user() const (1 samples, 0.53%)</title><rect x="1070.7" y="1363.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.66%)</title><rect x="1077.0" y="1443.0" width="31.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1080.0" y="1454.0">Ph..</text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.53%)</title><rect x="1077.0" y="1427.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.0" y="1438.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.53%)</title><rect x="1083.3" y="1427.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1086.3" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.60%)</title><rect x="1089.6" y="1427.0" width="18.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.6" y="1438.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 1.06%)</title><rect x="1089.6" y="1411.0" width="12.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.6" y="1422.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.53%)</title><rect x="1089.6" y="1395.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.6" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.53%)</title><rect x="1095.9" y="1395.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.9" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.53%)</title><rect x="1095.9" y="1379.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.9" y="1390.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.53%)</title><rect x="1095.9" y="1363.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.9" y="1374.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.53%)</title><rect x="1102.1" y="1411.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.1" y="1422.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.53%)</title><rect x="1102.1" y="1395.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.1" y="1406.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.53%)</title><rect x="1108.4" y="1443.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1111.4" y="1454.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.53%)</title><rect x="1108.4" y="1427.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.4" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.66%)</title><rect x="1114.7" y="1459.0" width="31.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="1470.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.66%)</title><rect x="1114.7" y="1443.0" width="31.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.7" y="1454.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.66%)</title><rect x="1114.7" y="1427.0" width="31.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="1438.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.66%)</title><rect x="1114.7" y="1411.0" width="31.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="1422.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.66%)</title><rect x="1114.7" y="1395.0" width="31.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="1406.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.66%)</title><rect x="1114.7" y="1379.0" width="31.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="1390.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1114.7" y="1363.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1114.7" y="1347.0" width="18.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1114.7" y="1331.0" width="18.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.7" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1114.7" y="1315.0" width="18.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1114.7" y="1299.0" width="18.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.7" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1114.7" y="1283.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="1294.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1114.7" y="1267.0" width="18.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.60%)</title><rect x="1114.7" y="1251.0" width="18.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.7" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.60%)</title><rect x="1114.7" y="1235.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.60%)</title><rect x="1114.7" y="1219.0" width="18.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.60%)</title><rect x="1114.7" y="1203.0" width="18.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.60%)</title><rect x="1114.7" y="1187.0" width="18.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.60%)</title><rect x="1114.7" y="1171.0" width="18.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="1155.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="1139.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="1123.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="1107.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="1091.0" width="12.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="1075.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="1059.0" width="12.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="1043.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="1027.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="1011.0" width="12.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="995.0" width="12.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="979.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="963.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="947.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="931.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="915.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="899.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="883.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="867.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="851.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="835.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="819.0" width="12.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="803.0" width="12.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="787.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="771.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="755.0" width="12.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="739.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="723.0" width="12.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="707.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="691.0" width="12.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="675.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="659.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="643.0" width="12.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="627.0" width="12.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="611.0" width="12.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="595.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="579.0" width="12.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="563.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="547.0" width="12.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="531.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="515.0" width="12.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1114.7" y="499.0" width="12.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1114.7" y="483.0" width="12.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1114.7" y="467.0" width="12.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1114.7" y="451.0" width="12.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1114.7" y="435.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1114.7" y="419.0" width="12.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1114.7" y="403.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1114.7" y="387.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1114.7" y="371.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1114.7" y="355.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1114.7" y="339.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1114.7" y="323.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1114.7" y="307.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1114.7" y="291.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1114.7" y="275.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1114.7" y="259.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1114.7" y="243.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1114.7" y="227.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1114.7" y="211.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.7" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1114.7" y="195.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1114.7" y="179.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1114.7" y="163.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1114.7" y="147.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1114.7" y="131.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.7" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1114.7" y="115.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.7" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1114.7" y="99.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.7" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1114.7" y="83.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.7" y="94.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.53%)</title><rect x="1114.7" y="67.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1117.7" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.53%)</title><rect x="1114.7" y="51.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.7" y="62.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.53%)</title><rect x="1114.7" y="35.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.53%)</title><rect x="1121.0" y="403.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.0" y="414.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.53%)</title><rect x="1121.0" y="387.0" width="6.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1124.0" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="1155.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.2" y="1166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="1139.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.2" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="1123.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="1107.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="1091.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="1075.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="1059.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1127.2" y="1043.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1127.2" y="1027.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1127.2" y="1011.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1127.2" y="995.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1127.2" y="979.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1127.2" y="963.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="947.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="931.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.2" y="942.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.53%)</title><rect x="1127.2" y="915.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="926.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.53%)</title><rect x="1127.2" y="899.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.2" y="910.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.53%)</title><rect x="1127.2" y="883.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="894.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.53%)</title><rect x="1127.2" y="867.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="878.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.53%)</title><rect x="1127.2" y="851.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="862.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.53%)</title><rect x="1127.2" y="835.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1133.5" y="1363.0" width="12.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.5" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.06%)</title><rect x="1133.5" y="1347.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.5" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.06%)</title><rect x="1133.5" y="1331.0" width="12.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.5" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.06%)</title><rect x="1133.5" y="1315.0" width="12.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.06%)</title><rect x="1133.5" y="1299.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.06%)</title><rect x="1133.5" y="1283.0" width="12.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.06%)</title><rect x="1133.5" y="1267.0" width="12.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="1278.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.53%)</title><rect x="1133.5" y="1251.0" width="6.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.5" y="1262.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.53%)</title><rect x="1133.5" y="1235.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.5" y="1246.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.53%)</title><rect x="1133.5" y="1219.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.5" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.53%)</title><rect x="1133.5" y="1203.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.5" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.53%)</title><rect x="1133.5" y="1187.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.5" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1133.5" y="1171.0" width="6.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.5" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.53%)</title><rect x="1133.5" y="1155.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.5" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.53%)</title><rect x="1133.5" y="1139.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.5" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.53%)</title><rect x="1133.5" y="1123.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.5" y="1134.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.53%)</title><rect x="1133.5" y="1107.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.5" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1133.5" y="1091.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.5" y="1102.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.53%)</title><rect x="1133.5" y="1075.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1136.5" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="1251.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="1235.0" width="6.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="1219.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="1203.0" width="6.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="1187.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="1171.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="1155.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="1139.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="1123.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="1107.0" width="6.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="1091.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="1075.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="1059.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="1043.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="1027.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="1011.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="995.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.53%)</title><rect x="1139.8" y="979.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.53%)</title><rect x="1139.8" y="963.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.53%)</title><rect x="1139.8" y="947.0" width="6.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.53%)</title><rect x="1139.8" y="931.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.53%)</title><rect x="1139.8" y="915.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.53%)</title><rect x="1139.8" y="899.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.53%)</title><rect x="1139.8" y="883.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.53%)</title><rect x="1139.8" y="867.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.8" y="878.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.53%)</title><rect x="1139.8" y="851.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="862.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.53%)</title><rect x="1139.8" y="835.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="846.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.53%)</title><rect x="1139.8" y="819.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="830.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.53%)</title><rect x="1139.8" y="803.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.8" y="814.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.53%)</title><rect x="1139.8" y="787.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="798.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.53%)</title><rect x="1139.8" y="771.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.8" y="782.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.53%)</title><rect x="1146.1" y="1459.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.1" y="1470.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 1.60%)</title><rect x="1152.3" y="1491.0" width="18.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.3" y="1502.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 1.60%)</title><rect x="1152.3" y="1475.0" width="18.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.3" y="1486.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.60%)</title><rect x="1152.3" y="1459.0" width="18.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.3" y="1470.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.60%)</title><rect x="1152.3" y="1443.0" width="18.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="1454.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.53%)</title><rect x="1152.3" y="1427.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.3" y="1438.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.53%)</title><rect x="1152.3" y="1411.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.3" y="1422.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.53%)</title><rect x="1152.3" y="1395.0" width="6.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.3" y="1406.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.53%)</title><rect x="1152.3" y="1379.0" width="6.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.3" y="1390.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.53%)</title><rect x="1152.3" y="1363.0" width="6.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.3" y="1374.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.53%)</title><rect x="1152.3" y="1347.0" width="6.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="1358.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.53%)</title><rect x="1158.6" y="1427.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.6" y="1438.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.53%)</title><rect x="1158.6" y="1411.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.6" y="1422.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.53%)</title><rect x="1158.6" y="1395.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.6" y="1406.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.53%)</title><rect x="1158.6" y="1379.0" width="6.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.6" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::add_non_safepoint(int) (1 samples, 0.53%)</title><rect x="1158.6" y="1363.0" width="6.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1161.6" y="1374.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.53%)</title><rect x="1164.9" y="1427.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.9" y="1438.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.53%)</title><rect x="1164.9" y="1411.0" width="6.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.9" y="1422.0"></text>
</g>
<g>
<title>LinearScan::resolve_data_flow() (1 samples, 0.53%)</title><rect x="1164.9" y="1395.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.9" y="1406.0"></text>
</g>
<g>
<title>LinearScan::resolve_collect_mappings(BlockBegin*, BlockBegin*, MoveResolver&amp;) (1 samples, 0.53%)</title><rect x="1164.9" y="1379.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.9" y="1390.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.53%)</title><rect x="1164.9" y="1363.0" width="6.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.9" y="1374.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*) (1 samples, 0.53%)</title><rect x="1171.2" y="1491.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.2" y="1502.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.53%)</title><rect x="1171.2" y="1475.0" width="6.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.2" y="1486.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1171.2" y="1459.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="1470.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1171.2" y="1443.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.2" y="1454.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.53%)</title><rect x="1171.2" y="1427.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="1438.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.53%)</title><rect x="1177.4" y="1491.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="1502.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1177.4" y="1475.0" width="6.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.4" y="1486.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.53%)</title><rect x="1177.4" y="1459.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.4" y="1470.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.53%)</title><rect x="1177.4" y="1443.0" width="6.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="1454.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.53%)</title><rect x="1177.4" y="1427.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="1438.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.53%)</title><rect x="1177.4" y="1411.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="1422.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.53%)</title><rect x="1177.4" y="1395.0" width="6.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="1406.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.53%)</title><rect x="1177.4" y="1379.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="1390.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.53%)</title><rect x="1183.7" y="1523.0" width="6.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="1534.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.53%)</title><rect x="1183.7" y="1507.0" width="6.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.7" y="1518.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.53%)</title><rect x="1183.7" y="1491.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="1502.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.53%)</title><rect x="1183.7" y="1475.0" width="6.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1186.7" y="1486.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.53%)</title><rect x="1183.7" y="1459.0" width="6.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.7" y="1470.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.53%)</title><rect x="1183.7" y="1443.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.7" y="1454.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.53%)</title><rect x="1183.7" y="1427.0" width="6.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1186.7" y="1438.0"></text>
</g>
</g>
</svg>
