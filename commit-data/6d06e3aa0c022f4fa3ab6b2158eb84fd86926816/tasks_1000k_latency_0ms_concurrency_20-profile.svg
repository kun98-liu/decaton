<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (804 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (4 samples, 0.50%)</title><rect x="10.0" y="1251.0" width="5.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.50%)</title><rect x="10.0" y="1235.0" width="5.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.37%)</title><rect x="11.5" y="1219.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.12%)</title><rect x="11.5" y="1203.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="1214.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.12%)</title><rect x="11.5" y="1187.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="1198.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.25%)</title><rect x="12.9" y="1203.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.9" y="1214.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.12%)</title><rect x="12.9" y="1187.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.9" y="1198.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.12%)</title><rect x="14.4" y="1187.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.4" y="1198.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="14.4" y="1171.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.4" y="1182.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.12%)</title><rect x="14.4" y="1155.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.4" y="1166.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.12%)</title><rect x="15.9" y="1251.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="18.9" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="15.9" y="1235.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.9" y="1246.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="15.9" y="1219.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (209 samples, 26.00%)</title><rect x="17.3" y="1251.0" width="306.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.3" y="1262.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (209 samples, 26.00%)</title><rect x="17.3" y="1235.0" width="306.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.3" y="1246.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="17.3" y="1219.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="20.3" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="17.3" y="1203.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="20.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (208 samples, 25.87%)</title><rect x="18.8" y="1219.0" width="305.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1230.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.25%)</title><rect x="18.8" y="1203.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.25%)</title><rect x="18.8" y="1187.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.25%)</title><rect x="18.8" y="1171.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.25%)</title><rect x="18.8" y="1155.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.25%)</title><rect x="18.8" y="1139.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.25%)</title><rect x="18.8" y="1123.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.25%)</title><rect x="18.8" y="1107.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.12%)</title><rect x="18.8" y="1091.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="18.8" y="1075.0" width="1.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="21.8" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="20.3" y="1091.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.3" y="1102.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="20.3" y="1075.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="23.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.12%)</title><rect x="21.7" y="1203.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.12%)</title><rect x="21.7" y="1187.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.7" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="21.7" y="1171.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.7" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="21.7" y="1155.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="21.7" y="1139.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="21.7" y="1123.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.7" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="21.7" y="1107.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.7" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.12%)</title><rect x="21.7" y="1091.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.7" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.12%)</title><rect x="21.7" y="1075.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.12%)</title><rect x="23.2" y="1203.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.62%)</title><rect x="24.7" y="1203.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.62%)</title><rect x="24.7" y="1187.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.62%)</title><rect x="24.7" y="1171.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.7" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$240/484685136.accept (5 samples, 0.62%)</title><rect x="24.7" y="1155.0" width="7.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.7" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.62%)</title><rect x="24.7" y="1139.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.7" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.62%)</title><rect x="24.7" y="1123.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.7" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.62%)</title><rect x="24.7" y="1107.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.7" y="1118.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (177 samples, 22.01%)</title><rect x="32.0" y="1203.0" width="259.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.0" y="1214.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$239/910465050.accept (175 samples, 21.77%)</title><rect x="32.0" y="1187.0" width="256.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.0" y="1198.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (175 samples, 21.77%)</title><rect x="32.0" y="1171.0" width="256.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.0" y="1182.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (154 samples, 19.15%)</title><rect x="32.0" y="1155.0" width="226.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.0" y="1166.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (154 samples, 19.15%)</title><rect x="32.0" y="1139.0" width="226.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.0" y="1150.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (154 samples, 19.15%)</title><rect x="32.0" y="1123.0" width="226.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.0" y="1134.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (154 samples, 19.15%)</title><rect x="32.0" y="1107.0" width="226.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.0" y="1118.0">java/util/concurrent/Executors..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (154 samples, 19.15%)</title><rect x="32.0" y="1091.0" width="226.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.0" y="1102.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (154 samples, 19.15%)</title><rect x="32.0" y="1075.0" width="226.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.0" y="1086.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (113 samples, 14.05%)</title><rect x="32.0" y="1059.0" width="165.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.0" y="1070.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.99%)</title><rect x="32.0" y="1043.0" width="23.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.0" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.99%)</title><rect x="32.0" y="1027.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="35.0" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.99%)</title><rect x="32.0" y="1011.0" width="23.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.0" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.37%)</title><rect x="55.5" y="1043.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="58.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.37%)</title><rect x="55.5" y="1027.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="58.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.37%)</title><rect x="55.5" y="1011.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.37%)</title><rect x="55.5" y="995.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="58.5" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (94 samples, 11.69%)</title><rect x="59.9" y="1043.0" width="138.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.9" y="1054.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (94 samples, 11.69%)</title><rect x="59.9" y="1027.0" width="138.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="62.9" y="1038.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (94 samples, 11.69%)</title><rect x="59.9" y="1011.0" width="138.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.9" y="1022.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (94 samples, 11.69%)</title><rect x="59.9" y="995.0" width="138.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.9" y="1006.0">java/util/concurr..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (91 samples, 11.32%)</title><rect x="64.3" y="979.0" width="133.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.3" y="990.0">jdk/internal/misc..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.12%)</title><rect x="67.2" y="963.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="70.2" y="974.0"></text>
</g>
<g>
<title>Unsafe_Unpark (42 samples, 5.22%)</title><rect x="68.7" y="963.0" width="61.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="71.7" y="974.0">Unsafe..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.50%)</title><rect x="76.0" y="947.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="79.0" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.12%)</title><rect x="81.9" y="947.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="84.9" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.50%)</title><rect x="83.4" y="947.0" width="5.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="86.4" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.25%)</title><rect x="89.3" y="947.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="92.3" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="90.7" y="931.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="93.7" y="942.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.25%)</title><rect x="92.2" y="947.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="95.2" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.75%)</title><rect x="95.1" y="947.0" width="8.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="98.1" y="958.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.12%)</title><rect x="103.9" y="947.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="106.9" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="105.4" y="947.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="108.4" y="958.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (5 samples, 0.62%)</title><rect x="106.9" y="947.0" width="7.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="109.9" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.37%)</title><rect x="114.2" y="947.0" width="16.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="117.2" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 5.60%)</title><rect x="130.3" y="963.0" width="66.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="133.3" y="974.0">__pthre..</text>
</g>
<g>
<title>_init (1 samples, 0.12%)</title><rect x="196.4" y="963.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="199.4" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (27 samples, 3.36%)</title><rect x="197.9" y="1059.0" width="39.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="200.9" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (27 samples, 3.36%)</title><rect x="197.9" y="1043.0" width="39.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.9" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.62%)</title><rect x="230.1" y="1027.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.62%)</title><rect x="230.1" y="1011.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.1" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.74%)</title><rect x="237.5" y="1059.0" width="20.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.74%)</title><rect x="237.5" y="1043.0" width="20.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.74%)</title><rect x="237.5" y="1027.0" width="20.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.74%)</title><rect x="237.5" y="1011.0" width="20.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (15 samples, 1.87%)</title><rect x="258.0" y="1155.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.0" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (15 samples, 1.87%)</title><rect x="258.0" y="1139.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.0" y="1150.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.87%)</title><rect x="258.0" y="1123.0" width="22.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.0" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.87%)</title><rect x="258.0" y="1107.0" width="22.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.0" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.62%)</title><rect x="272.7" y="1091.0" width="7.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="275.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (5 samples, 0.62%)</title><rect x="272.7" y="1075.0" width="7.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="275.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.25%)</title><rect x="280.0" y="1155.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.0" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.25%)</title><rect x="280.0" y="1139.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="283.0" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="280.0" y="1123.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="283.0" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="281.5" y="1123.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.12%)</title><rect x="281.5" y="1107.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.5" y="1118.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.12%)</title><rect x="281.5" y="1091.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="281.5" y="1075.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="281.5" y="1059.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.50%)</title><rect x="283.0" y="1155.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.50%)</title><rect x="283.0" y="1139.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="286.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.50%)</title><rect x="283.0" y="1123.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.50%)</title><rect x="283.0" y="1107.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.25%)</title><rect x="288.9" y="1187.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.25%)</title><rect x="288.9" y="1171.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.25%)</title><rect x="288.9" y="1155.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.25%)</title><rect x="288.9" y="1139.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.9" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.12%)</title><rect x="288.9" y="1123.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="291.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.12%)</title><rect x="290.3" y="1123.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (22 samples, 2.74%)</title><rect x="291.8" y="1203.0" width="32.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="294.8" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (22 samples, 2.74%)</title><rect x="291.8" y="1187.0" width="32.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="294.8" y="1198.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (2 samples, 0.25%)</title><rect x="291.8" y="1171.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (16 samples, 1.99%)</title><rect x="294.7" y="1171.0" width="23.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.7" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.12%)</title><rect x="294.7" y="1155.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.12%)</title><rect x="294.7" y="1139.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.12%)</title><rect x="294.7" y="1123.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="297.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (15 samples, 1.87%)</title><rect x="296.2" y="1155.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.2" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (15 samples, 1.87%)</title><rect x="296.2" y="1139.0" width="22.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.2" y="1150.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (15 samples, 1.87%)</title><rect x="296.2" y="1123.0" width="22.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="299.2" y="1134.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (15 samples, 1.87%)</title><rect x="296.2" y="1107.0" width="22.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.2" y="1118.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.37%)</title><rect x="297.7" y="1091.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="300.7" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.37%)</title><rect x="297.7" y="1075.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.7" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.37%)</title><rect x="297.7" y="1059.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="300.7" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.37%)</title><rect x="297.7" y="1043.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.7" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.12%)</title><rect x="297.7" y="1027.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.7" y="1038.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="297.7" y="1011.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="300.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.25%)</title><rect x="299.1" y="1027.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="302.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 1.12%)</title><rect x="302.1" y="1091.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.12%)</title><rect x="302.1" y="1075.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="305.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.12%)</title><rect x="302.1" y="1059.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.12%)</title><rect x="302.1" y="1043.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="305.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.12%)</title><rect x="302.1" y="1027.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.12%)</title><rect x="302.1" y="1011.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.12%)</title><rect x="302.1" y="995.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.12%)</title><rect x="302.1" y="979.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="305.1" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.12%)</title><rect x="302.1" y="963.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.1" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.12%)</title><rect x="302.1" y="947.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="305.1" y="958.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.12%)</title><rect x="302.1" y="931.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="305.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.62%)</title><rect x="303.5" y="1075.0" width="7.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.62%)</title><rect x="303.5" y="1059.0" width="7.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="306.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.12%)</title><rect x="310.9" y="1075.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.12%)</title><rect x="310.9" y="1059.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.12%)</title><rect x="310.9" y="1043.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.12%)</title><rect x="310.9" y="1027.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseTimestamp (1 samples, 0.12%)</title><rect x="310.9" y="1011.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="313.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.25%)</title><rect x="312.3" y="1075.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.25%)</title><rect x="312.3" y="1059.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.25%)</title><rect x="312.3" y="1043.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="315.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.25%)</title><rect x="312.3" y="1027.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.12%)</title><rect x="313.8" y="1011.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.12%)</title><rect x="313.8" y="995.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.8" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.12%)</title><rect x="313.8" y="979.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.8" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (2 samples, 0.25%)</title><rect x="315.3" y="1091.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.25%)</title><rect x="315.3" y="1075.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.25%)</title><rect x="315.3" y="1059.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="318.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.25%)</title><rect x="315.3" y="1043.0" width="2.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.3" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="316.7" y="1027.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="319.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.12%)</title><rect x="318.2" y="1171.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.12%)</title><rect x="318.2" y="1155.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="321.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.12%)</title><rect x="318.2" y="1139.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.12%)</title><rect x="318.2" y="1123.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="321.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.12%)</title><rect x="318.2" y="1107.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.12%)</title><rect x="318.2" y="1091.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.12%)</title><rect x="318.2" y="1075.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.12%)</title><rect x="318.2" y="1059.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="321.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.12%)</title><rect x="318.2" y="1043.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.12%)</title><rect x="318.2" y="1027.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="318.2" y="1011.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.2" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="318.2" y="995.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="321.2" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="318.2" y="979.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="321.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="318.2" y="963.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="321.2" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="318.2" y="947.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="321.2" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="318.2" y="931.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="321.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.37%)</title><rect x="319.7" y="1171.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="322.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.25%)</title><rect x="321.1" y="1155.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.12%)</title><rect x="321.1" y="1139.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.1" y="1150.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.12%)</title><rect x="321.1" y="1123.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.12%)</title><rect x="321.1" y="1107.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.1" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.entrySet (1 samples, 0.12%)</title><rect x="321.1" y="1091.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.12%)</title><rect x="322.6" y="1139.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.12%)</title><rect x="322.6" y="1123.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.12%)</title><rect x="322.6" y="1107.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="322.6" y="1091.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="325.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="322.6" y="1075.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/Thread.run (496 samples, 61.69%)</title><rect x="324.1" y="1251.0" width="727.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.1" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (496 samples, 61.69%)</title><rect x="324.1" y="1235.0" width="727.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.1" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (496 samples, 61.69%)</title><rect x="324.1" y="1219.0" width="727.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="327.1" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$468/1647482360.run (297 samples, 36.94%)</title><rect x="324.1" y="1203.0" width="435.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.1" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (297 samples, 36.94%)</title><rect x="324.1" y="1187.0" width="435.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.1" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (297 samples, 36.94%)</title><rect x="324.1" y="1171.0" width="435.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="327.1" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUni..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="325.5" y="1155.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="328.5" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="327.0" y="1155.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="330.0" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="327.0" y="1139.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="330.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (292 samples, 36.32%)</title><rect x="328.5" y="1155.0" width="428.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.5" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.12%)</title><rect x="332.9" y="1139.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.12%)</title><rect x="332.9" y="1123.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.9" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="332.9" y="1107.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.9" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="332.9" y="1091.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="335.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (25 samples, 3.11%)</title><rect x="334.4" y="1139.0" width="36.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="337.4" y="1150.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 3.11%)</title><rect x="334.4" y="1123.0" width="36.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.4" y="1134.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 3.11%)</title><rect x="334.4" y="1107.0" width="36.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="337.4" y="1118.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 2.11%)</title><rect x="346.1" y="1091.0" width="24.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.1" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.12%)</title><rect x="346.1" y="1075.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="349.1" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$478/1904693313.accept (1 samples, 0.12%)</title><rect x="346.1" y="1059.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.99%)</title><rect x="347.6" y="1075.0" width="23.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="350.6" y="1086.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$478/1904693313.accept (16 samples, 1.99%)</title><rect x="347.6" y="1059.0" width="23.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="350.6" y="1070.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (16 samples, 1.99%)</title><rect x="347.6" y="1043.0" width="23.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="350.6" y="1054.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$466/1752830359.accept (1 samples, 0.12%)</title><rect x="354.9" y="1027.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.9" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="356.4" y="1027.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="359.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (9 samples, 1.12%)</title><rect x="357.8" y="1027.0" width="13.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (9 samples, 1.12%)</title><rect x="357.8" y="1011.0" width="13.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (9 samples, 1.12%)</title><rect x="357.8" y="995.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="360.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.25%)</title><rect x="357.8" y="979.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.87%)</title><rect x="360.8" y="979.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (88 samples, 10.95%)</title><rect x="371.0" y="1139.0" width="129.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.0" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$137/86558824.extract (88 samples, 10.95%)</title><rect x="371.0" y="1123.0" width="129.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.0" y="1134.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (88 samples, 10.95%)</title><rect x="371.0" y="1107.0" width="129.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.0" y="1118.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (87 samples, 10.82%)</title><rect x="371.0" y="1091.0" width="127.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.0" y="1102.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (87 samples, 10.82%)</title><rect x="371.0" y="1075.0" width="127.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="374.0" y="1086.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (87 samples, 10.82%)</title><rect x="371.0" y="1059.0" width="127.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="374.0" y="1070.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 0.37%)</title><rect x="371.0" y="1043.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="374.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.12%)</title><rect x="371.0" y="1027.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.0" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="371.0" y="1011.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="374.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="371.0" y="995.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="374.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.25%)</title><rect x="372.5" y="1027.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="375.5" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.25%)</title><rect x="372.5" y="1011.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="375.5" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.25%)</title><rect x="372.5" y="995.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="375.5" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="374.0" y="979.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="377.0" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="374.0" y="963.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="377.0" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="374.0" y="947.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="377.0" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="374.0" y="931.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="377.0" y="942.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="374.0" y="915.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="377.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (49 samples, 6.09%)</title><rect x="375.4" y="1043.0" width="72.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="378.4" y="1054.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.37%)</title><rect x="375.4" y="1027.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.37%)</title><rect x="375.4" y="1011.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="378.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.75%)</title><rect x="379.9" y="1027.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.50%)</title><rect x="382.8" y="1011.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.37%)</title><rect x="382.8" y="995.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="385.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.12%)</title><rect x="385.7" y="979.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="387.2" y="995.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (40 samples, 4.98%)</title><rect x="388.7" y="1027.0" width="58.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="391.7" y="1038.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (40 samples, 4.98%)</title><rect x="388.7" y="1011.0" width="58.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.7" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.24%)</title><rect x="390.1" y="995.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.12%)</title><rect x="390.1" y="979.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="393.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.37%)</title><rect x="391.6" y="979.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="394.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.37%)</title><rect x="391.6" y="963.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.37%)</title><rect x="391.6" y="947.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="394.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.37%)</title><rect x="391.6" y="931.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="394.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.12%)</title><rect x="394.5" y="915.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.75%)</title><rect x="396.0" y="979.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.12%)</title><rect x="400.4" y="963.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="403.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.25%)</title><rect x="401.9" y="963.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.25%)</title><rect x="401.9" y="947.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.25%)</title><rect x="401.9" y="931.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="404.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.25%)</title><rect x="401.9" y="915.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="404.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (29 samples, 3.61%)</title><rect x="404.8" y="995.0" width="42.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.8" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (29 samples, 3.61%)</title><rect x="404.8" y="979.0" width="42.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="407.8" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (29 samples, 3.61%)</title><rect x="404.8" y="963.0" width="42.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="407.8" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.24%)</title><rect x="409.2" y="947.0" width="14.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.12%)</title><rect x="409.2" y="931.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.50%)</title><rect x="410.7" y="931.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.50%)</title><rect x="410.7" y="915.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.50%)</title><rect x="410.7" y="899.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.12%)</title><rect x="410.7" y="883.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="413.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.37%)</title><rect x="412.1" y="883.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.1" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.37%)</title><rect x="416.5" y="931.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.12%)</title><rect x="416.5" y="915.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.25%)</title><rect x="418.0" y="915.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="421.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.25%)</title><rect x="418.0" y="899.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.25%)</title><rect x="420.9" y="931.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.25%)</title><rect x="420.9" y="915.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="423.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.50%)</title><rect x="423.9" y="947.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.50%)</title><rect x="423.9" y="931.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.50%)</title><rect x="423.9" y="915.0" width="5.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="426.9" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.50%)</title><rect x="423.9" y="899.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="426.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (4 samples, 0.50%)</title><rect x="423.9" y="883.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (4 samples, 0.50%)</title><rect x="423.9" y="867.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.9" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (4 samples, 0.50%)</title><rect x="423.9" y="851.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.9" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (4 samples, 0.50%)</title><rect x="423.9" y="835.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (4 samples, 0.50%)</title><rect x="423.9" y="819.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.75%)</title><rect x="429.8" y="947.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="432.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.75%)</title><rect x="429.8" y="931.0" width="8.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="432.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.75%)</title><rect x="429.8" y="915.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.75%)</title><rect x="429.8" y="899.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.8" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.75%)</title><rect x="429.8" y="883.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.8" y="894.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.75%)</title><rect x="429.8" y="867.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="432.8" y="878.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (6 samples, 0.75%)</title><rect x="429.8" y="851.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="432.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.75%)</title><rect x="438.6" y="947.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="441.6" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.75%)</title><rect x="438.6" y="931.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="441.6" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.37%)</title><rect x="438.6" y="915.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.6" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.37%)</title><rect x="443.0" y="915.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.0" y="926.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.37%)</title><rect x="443.0" y="899.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="446.0" y="910.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.37%)</title><rect x="443.0" y="883.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="446.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (35 samples, 4.35%)</title><rect x="447.4" y="1043.0" width="51.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.4" y="1054.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (35 samples, 4.35%)</title><rect x="447.4" y="1027.0" width="51.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.4" y="1038.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (35 samples, 4.35%)</title><rect x="447.4" y="1011.0" width="51.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.4" y="1022.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (35 samples, 4.35%)</title><rect x="447.4" y="995.0" width="51.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="450.4" y="1006.0">com/f..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (35 samples, 4.35%)</title><rect x="447.4" y="979.0" width="51.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.4" y="990.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.12%)</title><rect x="498.7" y="1091.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="501.7" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="498.7" y="1075.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="501.7" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="498.7" y="1059.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="501.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="498.7" y="1043.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="501.7" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="498.7" y="1027.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.7" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="498.7" y="1011.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="501.7" y="1022.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="498.7" y="995.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="501.7" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="498.7" y="979.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="501.7" y="990.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.12%)</title><rect x="498.7" y="963.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="501.7" y="974.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.12%)</title><rect x="498.7" y="947.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="501.7" y="958.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.12%)</title><rect x="498.7" y="931.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="501.7" y="942.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (1 samples, 0.12%)</title><rect x="498.7" y="915.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="501.7" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (170 samples, 21.14%)</title><rect x="500.2" y="1139.0" width="249.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.2" y="1150.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (23 samples, 2.86%)</title><rect x="501.7" y="1123.0" width="33.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="504.7" y="1134.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (23 samples, 2.86%)</title><rect x="501.7" y="1107.0" width="33.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.7" y="1118.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (21 samples, 2.61%)</title><rect x="504.6" y="1091.0" width="30.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="507.6" y="1102.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (13 samples, 1.62%)</title><rect x="507.5" y="1075.0" width="19.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.50%)</title><rect x="507.5" y="1059.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="510.5" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.37%)</title><rect x="509.0" y="1043.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 1.12%)</title><rect x="513.4" y="1059.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="516.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 1.12%)</title><rect x="513.4" y="1043.0" width="13.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="516.4" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (2 samples, 0.25%)</title><rect x="526.6" y="1075.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.37%)</title><rect x="529.6" y="1075.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.6" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.12%)</title><rect x="534.0" y="1075.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.25%)</title><rect x="535.4" y="1123.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.4" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.25%)</title><rect x="535.4" y="1107.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="538.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (77 samples, 9.58%)</title><rect x="538.4" y="1123.0" width="113.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="541.4" y="1134.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (69 samples, 8.58%)</title><rect x="538.4" y="1107.0" width="101.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="541.4" y="1118.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (30 samples, 3.73%)</title><rect x="557.4" y="1091.0" width="44.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.4" y="1102.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="563.3" y="1075.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="566.3" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="563.3" y="1059.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="566.3" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="563.3" y="1043.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="566.3" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="563.3" y="1027.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="566.3" y="1038.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="563.3" y="1011.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="566.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="564.8" y="1075.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.8" y="1086.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="564.8" y="1059.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="567.8" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="564.8" y="1043.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="567.8" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="564.8" y="1027.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="567.8" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="564.8" y="1011.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="567.8" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="564.8" y="995.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="567.8" y="1006.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="564.8" y="979.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="567.8" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (17 samples, 2.11%)</title><rect x="566.2" y="1075.0" width="25.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.2" y="1086.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.99%)</title><rect x="567.7" y="1059.0" width="23.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.7" y="1070.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.87%)</title><rect x="576.5" y="1043.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="579.5" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.87%)</title><rect x="576.5" y="1027.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="579.5" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.25%)</title><rect x="582.4" y="1011.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="585.4" y="1022.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.25%)</title><rect x="582.4" y="995.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="585.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.25%)</title><rect x="582.4" y="979.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="585.4" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.25%)</title><rect x="582.4" y="963.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="585.4" y="974.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="582.4" y="947.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="585.4" y="958.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="582.4" y="931.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="585.4" y="942.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.12%)</title><rect x="583.9" y="947.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="586.9" y="958.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.12%)</title><rect x="585.3" y="1011.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="588.3" y="1022.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.37%)</title><rect x="586.8" y="1043.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="589.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.12%)</title><rect x="591.2" y="1075.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.12%)</title><rect x="591.2" y="1059.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.12%)</title><rect x="591.2" y="1043.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="594.2" y="1054.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="591.2" y="1027.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="594.2" y="1038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="591.2" y="1011.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="594.2" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="591.2" y="995.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.2" y="1006.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="592.7" y="1075.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="595.7" y="1086.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.62%)</title><rect x="594.1" y="1075.0" width="7.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="597.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.12%)</title><rect x="601.5" y="1091.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="604.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.12%)</title><rect x="601.5" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="604.5" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="601.5" y="1059.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="604.5" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="601.5" y="1043.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="604.5" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="601.5" y="1027.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="604.5" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="601.5" y="1011.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="604.5" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="601.5" y="995.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="604.5" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="601.5" y="979.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="604.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.12%)</title><rect x="602.9" y="1091.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="605.9" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (24 samples, 2.99%)</title><rect x="604.4" y="1091.0" width="35.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="607.4" y="1102.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (24 samples, 2.99%)</title><rect x="604.4" y="1075.0" width="35.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="607.4" y="1086.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.99%)</title><rect x="604.4" y="1059.0" width="23.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="607.4" y="1070.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (16 samples, 1.99%)</title><rect x="604.4" y="1043.0" width="23.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="607.4" y="1054.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 1.00%)</title><rect x="616.1" y="1027.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="619.1" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (8 samples, 1.00%)</title><rect x="627.9" y="1059.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="630.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (8 samples, 1.00%)</title><rect x="627.9" y="1043.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="630.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.37%)</title><rect x="629.4" y="1027.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="632.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.37%)</title><rect x="629.4" y="1011.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="632.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.37%)</title><rect x="629.4" y="995.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.12%)</title><rect x="632.3" y="979.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.50%)</title><rect x="633.8" y="1027.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 1.00%)</title><rect x="639.6" y="1107.0" width="11.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="642.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 1.00%)</title><rect x="639.6" y="1091.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="642.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 1.00%)</title><rect x="639.6" y="1075.0" width="11.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.6" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.87%)</title><rect x="639.6" y="1059.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.6" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.62%)</title><rect x="642.6" y="1043.0" width="7.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="645.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.50%)</title><rect x="644.0" y="1027.0" width="5.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="647.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="649.9" y="1059.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (51 samples, 6.34%)</title><rect x="651.4" y="1123.0" width="74.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.4" y="1134.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (50 samples, 6.22%)</title><rect x="652.8" y="1107.0" width="73.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.8" y="1118.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$395/1045097283.process (17 samples, 2.11%)</title><rect x="652.8" y="1091.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="655.8" y="1102.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (17 samples, 2.11%)</title><rect x="652.8" y="1075.0" width="25.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="655.8" y="1086.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.12%)</title><rect x="652.8" y="1059.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="655.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.12%)</title><rect x="652.8" y="1043.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="655.8" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.12%)</title><rect x="652.8" y="1027.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.12%)</title><rect x="652.8" y="1011.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.12%)</title><rect x="652.8" y="995.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="655.8" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (16 samples, 1.99%)</title><rect x="654.3" y="1059.0" width="23.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="657.3" y="1070.0">c..</text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.12%)</title><rect x="660.2" y="1043.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 1.37%)</title><rect x="661.6" y="1043.0" width="16.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="664.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.75%)</title><rect x="661.6" y="1027.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="664.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.62%)</title><rect x="670.4" y="1027.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="673.4" y="1038.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="670.4" y="1011.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="673.4" y="1022.0"></text>
</g>
<g>
<title>_init (1 samples, 0.12%)</title><rect x="671.9" y="1011.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="674.9" y="1022.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.37%)</title><rect x="673.4" y="1011.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="676.4" y="1022.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.37%)</title><rect x="673.4" y="995.0" width="4.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="676.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (8 samples, 1.00%)</title><rect x="677.8" y="1091.0" width="11.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="680.8" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="686.6" y="1075.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="689.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.25%)</title><rect x="689.5" y="1091.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="692.5" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.25%)</title><rect x="689.5" y="1075.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="692.5" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.25%)</title><rect x="689.5" y="1059.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="692.5" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.25%)</title><rect x="689.5" y="1043.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="692.5" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.25%)</title><rect x="689.5" y="1027.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="692.5" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.25%)</title><rect x="689.5" y="1011.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="692.5" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="689.5" y="995.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="692.5" y="1006.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.12%)</title><rect x="689.5" y="979.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="692.5" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.12%)</title><rect x="689.5" y="963.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="692.5" y="974.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="691.0" y="995.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="694.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.12%)</title><rect x="692.5" y="1091.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="695.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.12%)</title><rect x="692.5" y="1075.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="695.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.37%)</title><rect x="693.9" y="1091.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.37%)</title><rect x="693.9" y="1075.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="696.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$470/1755312697.get$Lambda (1 samples, 0.12%)</title><rect x="696.9" y="1059.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.9" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$470/1755312697.&lt;init&gt; (1 samples, 0.12%)</title><rect x="696.9" y="1043.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="699.9" y="1054.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.12%)</title><rect x="696.9" y="1027.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="699.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (10 samples, 1.24%)</title><rect x="698.3" y="1091.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="701.3" y="1102.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (8 samples, 1.00%)</title><rect x="699.8" y="1075.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="702.8" y="1086.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (4 samples, 0.50%)</title><rect x="705.7" y="1059.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="708.7" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="711.5" y="1075.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="714.5" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.37%)</title><rect x="713.0" y="1091.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="716.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="714.5" y="1075.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="717.5" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="715.9" y="1059.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="718.9" y="1070.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.12%)</title><rect x="715.9" y="1043.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.9" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.75%)</title><rect x="717.4" y="1091.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="720.4" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.75%)</title><rect x="717.4" y="1075.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.4" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.75%)</title><rect x="717.4" y="1059.0" width="8.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="720.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.37%)</title><rect x="717.4" y="1043.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.4" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="720.3" y="1027.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="723.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.25%)</title><rect x="721.8" y="1043.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="724.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$471/145755510.accept (1 samples, 0.12%)</title><rect x="723.3" y="1027.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="726.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.12%)</title><rect x="723.3" y="1011.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="726.3" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="724.8" y="1043.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="727.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.12%)</title><rect x="726.2" y="1123.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="729.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.12%)</title><rect x="726.2" y="1107.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="729.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$473/735316804.get$Lambda (1 samples, 0.12%)</title><rect x="726.2" y="1091.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="729.2" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="726.2" y="1075.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.2" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="726.2" y="1059.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="729.2" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="726.2" y="1043.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="729.2" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="726.2" y="1027.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="729.2" y="1038.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="726.2" y="1011.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="729.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.87%)</title><rect x="727.7" y="1123.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.7" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.87%)</title><rect x="727.7" y="1107.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.7" y="1118.0">j..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.25%)</title><rect x="733.6" y="1091.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="736.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.25%)</title><rect x="733.6" y="1075.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="736.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (9 samples, 1.12%)</title><rect x="736.5" y="1091.0" width="13.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="739.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.37%)</title><rect x="736.5" y="1075.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="739.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$473/735316804.accept (2 samples, 0.25%)</title><rect x="738.0" y="1059.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="741.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.75%)</title><rect x="740.9" y="1075.0" width="8.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="743.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$473/735316804.accept (5 samples, 0.62%)</title><rect x="742.4" y="1059.0" width="7.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="745.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (5 samples, 0.62%)</title><rect x="742.4" y="1043.0" width="7.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="745.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.62%)</title><rect x="742.4" y="1027.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="745.4" y="1038.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.62%)</title><rect x="742.4" y="1011.0" width="7.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="745.4" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.62%)</title><rect x="742.4" y="995.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="745.4" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.62%)</title><rect x="742.4" y="979.0" width="7.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="745.4" y="990.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.62%)</title><rect x="742.4" y="963.0" width="7.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="745.4" y="974.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.62%)</title><rect x="749.7" y="1139.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="752.7" y="1150.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.62%)</title><rect x="749.7" y="1123.0" width="7.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="752.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (2 samples, 0.25%)</title><rect x="757.0" y="1155.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.12%)</title><rect x="758.5" y="1139.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="761.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.75%)</title><rect x="760.0" y="1203.0" width="8.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="763.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.75%)</title><rect x="760.0" y="1187.0" width="8.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="763.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.75%)</title><rect x="760.0" y="1171.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="763.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.75%)</title><rect x="760.0" y="1155.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="763.0" y="1166.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="764.4" y="1139.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="767.4" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="764.4" y="1123.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="767.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (2 samples, 0.25%)</title><rect x="765.8" y="1139.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="768.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (193 samples, 24.00%)</title><rect x="768.8" y="1203.0" width="283.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.8" y="1214.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (193 samples, 24.00%)</title><rect x="768.8" y="1187.0" width="283.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.8" y="1198.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (142 samples, 17.66%)</title><rect x="814.3" y="1171.0" width="208.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.3" y="1182.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.50%)</title><rect x="815.7" y="1155.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.50%)</title><rect x="815.7" y="1139.0" width="5.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="818.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.12%)</title><rect x="820.1" y="1123.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="823.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (137 samples, 17.04%)</title><rect x="821.6" y="1155.0" width="201.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="824.6" y="1166.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (137 samples, 17.04%)</title><rect x="821.6" y="1139.0" width="201.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.6" y="1150.0">jdk/internal/misc/Unsafe.p..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.12%)</title><rect x="824.6" y="1123.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="827.6" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (132 samples, 16.42%)</title><rect x="826.0" y="1123.0" width="193.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="829.0" y="1134.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="826.0" y="1107.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="829.0" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (7 samples, 0.87%)</title><rect x="827.5" y="1107.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="830.5" y="1118.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.37%)</title><rect x="830.4" y="1091.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="833.4" y="1102.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.12%)</title><rect x="831.9" y="1075.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="834.9" y="1086.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="833.4" y="1075.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="836.4" y="1086.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="834.8" y="1091.0" width="1.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="837.8" y="1102.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="836.3" y="1091.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="839.3" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (7 samples, 0.87%)</title><rect x="837.8" y="1107.0" width="10.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="840.8" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.25%)</title><rect x="848.0" y="1107.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="851.0" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (42 samples, 5.22%)</title><rect x="851.0" y="1107.0" width="61.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="854.0" y="1118.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 7.46%)</title><rect x="912.6" y="1107.0" width="88.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="915.6" y="1118.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.87%)</title><rect x="1000.7" y="1107.0" width="10.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1003.7" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.12%)</title><rect x="1010.9" y="1107.0" width="1.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1013.9" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1012.4" y="1107.0" width="1.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1015.4" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.37%)</title><rect x="1013.9" y="1107.0" width="4.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1016.9" y="1118.0"></text>
</g>
<g>
<title>_init (1 samples, 0.12%)</title><rect x="1018.3" y="1107.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1021.3" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1019.8" y="1123.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1022.8" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="1021.2" y="1123.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1024.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 2.49%)</title><rect x="1022.7" y="1171.0" width="29.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1025.7" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 2.49%)</title><rect x="1022.7" y="1155.0" width="29.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1025.7" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 2.49%)</title><rect x="1022.7" y="1139.0" width="29.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1025.7" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 2.49%)</title><rect x="1022.7" y="1123.0" width="29.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1025.7" y="1134.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1052.0" y="1251.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1055.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.12%)</title><rect x="1052.0" y="1235.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.12%)</title><rect x="1052.0" y="1219.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.12%)</title><rect x="1052.0" y="1203.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1055.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.12%)</title><rect x="1052.0" y="1187.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1055.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.12%)</title><rect x="1052.0" y="1171.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.12%)</title><rect x="1052.0" y="1155.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1055.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1052.0" y="1139.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1055.0" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1052.0" y="1123.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1055.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.12%)</title><rect x="1052.0" y="1107.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1055.0" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.12%)</title><rect x="1052.0" y="1091.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1055.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.12%)</title><rect x="1052.0" y="1075.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1055.0" y="1086.0"></text>
</g>
<g>
<title>java/util/LinkedHashSet.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1052.0" y="1059.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1055.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1052.0" y="1043.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.0" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1052.0" y="1027.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1055.0" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (1 samples, 0.12%)</title><rect x="1052.0" y="1011.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1055.0" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.tableSizeFor (1 samples, 0.12%)</title><rect x="1052.0" y="995.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1055.0" y="1006.0"></text>
</g>
<g>
<title>start_thread (93 samples, 11.57%)</title><rect x="1053.5" y="1251.0" width="136.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1056.5" y="1262.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (93 samples, 11.57%)</title><rect x="1053.5" y="1235.0" width="136.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1056.5" y="1246.0">thread_native_ent..</text>
</g>
<g>
<title>Thread::call_run() (93 samples, 11.57%)</title><rect x="1053.5" y="1219.0" width="136.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1056.5" y="1230.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.50%)</title><rect x="1053.5" y="1203.0" width="5.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.5" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.50%)</title><rect x="1053.5" y="1187.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1056.5" y="1198.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.25%)</title><rect x="1053.5" y="1171.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1056.5" y="1182.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.25%)</title><rect x="1053.5" y="1155.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.5" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.25%)</title><rect x="1056.4" y="1171.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1059.4" y="1182.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.25%)</title><rect x="1056.4" y="1155.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.4" y="1166.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.25%)</title><rect x="1056.4" y="1139.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.4" y="1150.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.12%)</title><rect x="1057.9" y="1123.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1060.9" y="1134.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (88 samples, 10.95%)</title><rect x="1059.4" y="1203.0" width="129.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.4" y="1214.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (88 samples, 10.95%)</title><rect x="1059.4" y="1187.0" width="129.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.4" y="1198.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (88 samples, 10.95%)</title><rect x="1059.4" y="1171.0" width="129.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.4" y="1182.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (87 samples, 10.82%)</title><rect x="1059.4" y="1155.0" width="127.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.4" y="1166.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (87 samples, 10.82%)</title><rect x="1059.4" y="1139.0" width="127.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.4" y="1150.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 6.84%)</title><rect x="1059.4" y="1123.0" width="80.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.4" y="1134.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.25%)</title><rect x="1059.4" y="1107.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.4" y="1118.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.25%)</title><rect x="1059.4" y="1091.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.4" y="1102.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.12%)</title><rect x="1060.8" y="1075.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.8" y="1086.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.12%)</title><rect x="1060.8" y="1059.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.8" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.12%)</title><rect x="1062.3" y="1107.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.3" y="1118.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.12%)</title><rect x="1062.3" y="1091.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1065.3" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.12%)</title><rect x="1062.3" y="1075.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1065.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.75%)</title><rect x="1063.8" y="1107.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.12%)</title><rect x="1063.8" y="1091.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1066.8" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.62%)</title><rect x="1065.2" y="1091.0" width="7.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1068.2" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.25%)</title><rect x="1065.2" y="1075.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1068.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.37%)</title><rect x="1068.2" y="1075.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.12%)</title><rect x="1069.7" y="1059.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.7" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1069.7" y="1043.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.7" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.12%)</title><rect x="1069.7" y="1027.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1072.7" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.12%)</title><rect x="1069.7" y="1011.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.7" y="1022.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.12%)</title><rect x="1069.7" y="995.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.7" y="1006.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.12%)</title><rect x="1071.1" y="1059.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1074.1" y="1070.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.12%)</title><rect x="1071.1" y="1043.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.1" y="1054.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.12%)</title><rect x="1071.1" y="1027.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.1" y="1038.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.12%)</title><rect x="1071.1" y="1011.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1074.1" y="1022.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.12%)</title><rect x="1071.1" y="995.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1074.1" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.75%)</title><rect x="1072.6" y="1107.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1075.6" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.75%)</title><rect x="1072.6" y="1091.0" width="8.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1072.6" y="1075.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1075.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.12%)</title><rect x="1072.6" y="1059.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1075.6" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.25%)</title><rect x="1074.1" y="1075.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.1" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.12%)</title><rect x="1074.1" y="1059.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.12%)</title><rect x="1074.1" y="1043.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1077.1" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.12%)</title><rect x="1074.1" y="1027.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1077.1" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.12%)</title><rect x="1075.5" y="1059.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.12%)</title><rect x="1075.5" y="1043.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.5" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.12%)</title><rect x="1075.5" y="1027.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1078.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.12%)</title><rect x="1077.0" y="1075.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.0" y="1086.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.12%)</title><rect x="1077.0" y="1059.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1080.0" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.25%)</title><rect x="1078.5" y="1075.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1081.5" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.25%)</title><rect x="1078.5" y="1059.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.5" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.12%)</title><rect x="1079.9" y="1043.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1082.9" y="1054.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="1079.9" y="1027.0" width="1.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1082.9" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 4.98%)</title><rect x="1081.4" y="1107.0" width="58.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1084.4" y="1118.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.25%)</title><rect x="1081.4" y="1091.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1084.4" y="1102.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.12%)</title><rect x="1084.3" y="1091.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1087.3" y="1102.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.12%)</title><rect x="1085.8" y="1091.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.8" y="1102.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.12%)</title><rect x="1087.3" y="1091.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1090.3" y="1102.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.12%)</title><rect x="1088.7" y="1091.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.7" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.50%)</title><rect x="1090.2" y="1091.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.25%)</title><rect x="1091.7" y="1075.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.7" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1093.1" y="1059.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.1" y="1070.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1094.6" y="1075.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1097.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.12%)</title><rect x="1096.1" y="1091.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.12%)</title><rect x="1096.1" y="1075.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.25%)</title><rect x="1097.5" y="1091.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.87%)</title><rect x="1100.5" y="1091.0" width="10.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.5" y="1102.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.12%)</title><rect x="1106.3" y="1075.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.12%)</title><rect x="1107.8" y="1075.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.12%)</title><rect x="1109.3" y="1075.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1109.3" y="1059.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.37%)</title><rect x="1110.7" y="1091.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.7" y="1102.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.12%)</title><rect x="1110.7" y="1075.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.7" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1112.2" y="1075.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1115.2" y="1086.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.12%)</title><rect x="1113.7" y="1075.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (3 samples, 0.37%)</title><rect x="1115.1" y="1091.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.1" y="1102.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.12%)</title><rect x="1115.1" y="1075.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.1" y="1086.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.12%)</title><rect x="1116.6" y="1075.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.6" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1118.1" y="1075.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.25%)</title><rect x="1119.6" y="1091.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.6" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.37%)</title><rect x="1122.5" y="1091.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.25%)</title><rect x="1124.0" y="1075.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.25%)</title><rect x="1126.9" y="1091.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.12%)</title><rect x="1129.8" y="1091.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.8" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.12%)</title><rect x="1129.8" y="1075.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.8" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1131.3" y="1091.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.3" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 0.50%)</title><rect x="1132.8" y="1091.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.8" y="1102.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.12%)</title><rect x="1134.2" y="1075.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.2" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.25%)</title><rect x="1135.7" y="1075.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1138.6" y="1091.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1141.6" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (21 samples, 2.61%)</title><rect x="1140.1" y="1123.0" width="30.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="1134.0">Co..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.12%)</title><rect x="1140.1" y="1107.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.1" y="1118.0"></text>
</g>
<g>
<title>CallNode::has_non_debug_use(Node*) (1 samples, 0.12%)</title><rect x="1140.1" y="1091.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="1102.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (4 samples, 0.50%)</title><rect x="1141.6" y="1107.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.50%)</title><rect x="1141.6" y="1091.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.25%)</title><rect x="1141.6" y="1075.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.12%)</title><rect x="1143.0" y="1059.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.12%)</title><rect x="1143.0" y="1043.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.25%)</title><rect x="1144.5" y="1075.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.12%)</title><rect x="1146.0" y="1059.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.12%)</title><rect x="1146.0" y="1043.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.0" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1146.0" y="1027.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.0" y="1038.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.12%)</title><rect x="1146.0" y="1011.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.0" y="1022.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.12%)</title><rect x="1146.0" y="995.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.0" y="1006.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.12%)</title><rect x="1146.0" y="979.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.0" y="990.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.12%)</title><rect x="1146.0" y="963.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.37%)</title><rect x="1147.4" y="1107.0" width="4.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.37%)</title><rect x="1147.4" y="1091.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (3 samples, 0.37%)</title><rect x="1147.4" y="1075.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.37%)</title><rect x="1147.4" y="1059.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="1043.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="1027.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="1011.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="995.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="979.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="963.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.12%)</title><rect x="1147.4" y="947.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.25%)</title><rect x="1148.9" y="1043.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="1027.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="1011.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="995.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="979.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="963.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="947.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="931.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="915.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="899.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="883.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="867.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="851.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="835.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="819.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="803.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="787.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="771.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="755.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="739.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="723.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="707.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="691.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="675.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="659.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="643.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="627.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="611.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="595.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="579.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="563.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="547.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="531.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="515.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="499.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="483.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="467.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="451.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="435.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="419.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="403.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="387.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="371.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="355.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="339.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="323.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="307.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="291.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.4" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="275.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.4" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="259.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.4" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="243.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.4" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="227.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.4" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="211.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.4" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="195.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.4" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="179.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="163.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="147.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.4" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="131.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="115.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.4" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="99.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1153.4" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="83.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.4" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="67.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.4" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="51.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.4" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1150.4" y="35.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.4" y="46.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.12%)</title><rect x="1151.8" y="1107.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.8" y="1118.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1151.8" y="1091.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="1102.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1151.8" y="1075.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 0.62%)</title><rect x="1153.3" y="1107.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.3" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1153.3" y="1091.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.37%)</title><rect x="1154.8" y="1091.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.12%)</title><rect x="1157.7" y="1075.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.12%)</title><rect x="1159.2" y="1091.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.12%)</title><rect x="1159.2" y="1075.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.12%)</title><rect x="1159.2" y="1059.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.75%)</title><rect x="1160.6" y="1107.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.75%)</title><rect x="1160.6" y="1091.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.6" y="1102.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1162.1" y="1075.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.1" y="1086.0"></text>
</g>
<g>
<title>IfNode::search_identical(int) (1 samples, 0.12%)</title><rect x="1162.1" y="1059.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1163.6" y="1075.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.6" y="1086.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1165.0" y="1075.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.25%)</title><rect x="1166.5" y="1075.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.5" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.25%)</title><rect x="1166.5" y="1059.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="1043.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="1027.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.5" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="1011.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="995.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.5" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="979.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1169.5" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="963.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="947.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="931.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="915.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="899.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.5" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="883.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.5" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="867.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.5" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="851.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.5" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="835.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.5" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.25%)</title><rect x="1166.5" y="819.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.5" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1166.5" y="803.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.5" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1166.5" y="787.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1166.5" y="771.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1166.5" y="755.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1166.5" y="739.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1168.0" y="803.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1168.0" y="787.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="798.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.12%)</title><rect x="1169.5" y="1107.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.5" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.12%)</title><rect x="1169.5" y="1091.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.12%)</title><rect x="1169.5" y="1075.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="1086.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.12%)</title><rect x="1169.5" y="1059.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.5" y="1070.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.12%)</title><rect x="1170.9" y="1123.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.9" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 1.12%)</title><rect x="1172.4" y="1123.0" width="13.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.4" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 1.12%)</title><rect x="1172.4" y="1107.0" width="13.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.4" y="1118.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.12%)</title><rect x="1172.4" y="1091.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 1.00%)</title><rect x="1173.9" y="1091.0" width="11.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 1.00%)</title><rect x="1173.9" y="1075.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 1.00%)</title><rect x="1173.9" y="1059.0" width="11.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.87%)</title><rect x="1173.9" y="1043.0" width="10.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.87%)</title><rect x="1173.9" y="1027.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.87%)</title><rect x="1173.9" y="1011.0" width="10.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.87%)</title><rect x="1173.9" y="995.0" width="10.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.87%)</title><rect x="1173.9" y="979.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.87%)</title><rect x="1173.9" y="963.0" width="10.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.87%)</title><rect x="1173.9" y="947.0" width="10.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.75%)</title><rect x="1173.9" y="931.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.75%)</title><rect x="1173.9" y="915.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.75%)</title><rect x="1173.9" y="899.0" width="8.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.75%)</title><rect x="1173.9" y="883.0" width="8.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.75%)</title><rect x="1173.9" y="867.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.75%)</title><rect x="1173.9" y="851.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.75%)</title><rect x="1173.9" y="835.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.75%)</title><rect x="1173.9" y="819.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.75%)</title><rect x="1173.9" y="803.0" width="8.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.75%)</title><rect x="1173.9" y="787.0" width="8.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.75%)</title><rect x="1173.9" y="771.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.75%)</title><rect x="1173.9" y="755.0" width="8.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.75%)</title><rect x="1173.9" y="739.0" width="8.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.75%)</title><rect x="1173.9" y="723.0" width="8.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.75%)</title><rect x="1173.9" y="707.0" width="8.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicates(int) (1 samples, 0.12%)</title><rect x="1173.9" y="691.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.191] (1 samples, 0.12%)</title><rect x="1173.9" y="675.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.12%)</title><rect x="1173.9" y="659.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.12%)</title><rect x="1173.9" y="643.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.12%)</title><rect x="1173.9" y="627.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.12%)</title><rect x="1173.9" y="611.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.50%)</title><rect x="1175.3" y="691.0" width="5.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.50%)</title><rect x="1175.3" y="675.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1175.3" y="659.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.25%)</title><rect x="1175.3" y="643.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.25%)</title><rect x="1175.3" y="627.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.25%)</title><rect x="1175.3" y="611.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.25%)</title><rect x="1175.3" y="595.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.25%)</title><rect x="1175.3" y="579.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.25%)</title><rect x="1175.3" y="563.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.25%)</title><rect x="1175.3" y="547.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.25%)</title><rect x="1175.3" y="531.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.25%)</title><rect x="1175.3" y="515.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.25%)</title><rect x="1175.3" y="499.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.25%)</title><rect x="1175.3" y="483.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1175.3" y="467.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1175.3" y="451.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1175.3" y="435.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1175.3" y="419.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1175.3" y="403.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1175.3" y="387.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1175.3" y="371.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.3" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1175.3" y="355.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1175.3" y="339.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1175.3" y="323.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1175.3" y="307.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1175.3" y="291.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1175.3" y="275.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1175.3" y="259.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.3" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1175.3" y="243.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1175.3" y="227.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1175.3" y="211.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1175.3" y="195.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.3" y="206.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.12%)</title><rect x="1175.3" y="179.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.3" y="190.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.12%)</title><rect x="1175.3" y="163.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.3" y="174.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.12%)</title><rect x="1175.3" y="147.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.3" y="158.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.12%)</title><rect x="1175.3" y="131.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.3" y="142.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.12%)</title><rect x="1175.3" y="115.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.3" y="126.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.12%)</title><rect x="1175.3" y="99.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.3" y="110.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.12%)</title><rect x="1175.3" y="83.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="94.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.12%)</title><rect x="1175.3" y="67.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.3" y="78.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.12%)</title><rect x="1176.8" y="467.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.8" y="478.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.12%)</title><rect x="1176.8" y="451.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.8" y="462.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.12%)</title><rect x="1176.8" y="435.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.8" y="446.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1176.8" y="419.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.8" y="430.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1176.8" y="403.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.8" y="414.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1176.8" y="387.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.8" y="398.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1176.8" y="371.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.8" y="382.0"></text>
</g>
<g>
<title>TypeFunc::hash() const (1 samples, 0.12%)</title><rect x="1176.8" y="355.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.8" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.3" y="643.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.3" y="627.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.3" y="611.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.3" y="595.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.3" y="579.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.3" y="563.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.3" y="547.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.3" y="531.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.3" y="515.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.3" y="499.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.3" y="483.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.3" y="467.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.3" y="451.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.3" y="435.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.3" y="419.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.3" y="403.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.3" y="387.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.3" y="371.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1178.3" y="355.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1178.3" y="339.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="350.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.12%)</title><rect x="1178.3" y="323.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="334.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.12%)</title><rect x="1178.3" y="307.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="318.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.12%)</title><rect x="1178.3" y="291.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.3" y="302.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.12%)</title><rect x="1178.3" y="275.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="286.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1178.3" y="259.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1181.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.12%)</title><rect x="1179.7" y="659.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.12%)</title><rect x="1179.7" y="643.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.12%)</title><rect x="1179.7" y="627.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="638.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.12%)</title><rect x="1179.7" y="611.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="622.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.12%)</title><rect x="1179.7" y="595.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="606.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.12%)</title><rect x="1181.2" y="691.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="702.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1181.2" y="675.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.2" y="686.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.12%)</title><rect x="1181.2" y="659.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="670.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1182.7" y="931.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1182.7" y="915.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1182.7" y="899.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1182.7" y="883.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1182.7" y="867.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1182.7" y="851.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1182.7" y="835.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1182.7" y="819.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1182.7" y="803.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1182.7" y="787.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1182.7" y="771.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1182.7" y="755.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1182.7" y="739.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1182.7" y="723.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.7" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1182.7" y="707.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.7" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1182.7" y="691.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.7" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1182.7" y="675.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.12%)</title><rect x="1182.7" y="659.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="1043.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="1027.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1184.1" y="1011.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.1" y="1022.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.12%)</title><rect x="1184.1" y="995.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="1006.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1185.6" y="1123.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.6" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1185.6" y="1107.0" width="1.5" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1188.6" y="1118.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.1" y="1155.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.1" y="1139.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.12%)</title><rect x="1187.1" y="1123.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="1134.0"></text>
</g>
<g>
<title>Dependencies::assert_evol_method(ciMethod*) (1 samples, 0.12%)</title><rect x="1187.1" y="1107.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1118.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.12%)</title><rect x="1188.5" y="1203.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.5" y="1214.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.12%)</title><rect x="1188.5" y="1187.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.5" y="1198.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.12%)</title><rect x="1188.5" y="1171.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.5" y="1182.0"></text>
</g>
</g>
</svg>
