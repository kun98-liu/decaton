<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (174 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (13 samples, 7.47%)</title><rect x="10.0" y="963.0" width="88.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (13 samples, 7.47%)</title><rect x="10.0" y="947.0" width="88.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (13 samples, 7.47%)</title><rect x="10.0" y="931.0" width="88.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.57%)</title><rect x="16.8" y="915.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.57%)</title><rect x="16.8" y="899.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.8" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.57%)</title><rect x="16.8" y="883.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.8" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.57%)</title><rect x="16.8" y="867.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.8" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.57%)</title><rect x="16.8" y="851.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.8" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.57%)</title><rect x="16.8" y="835.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.8" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.57%)</title><rect x="16.8" y="819.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.57%)</title><rect x="16.8" y="803.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.8" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.57%)</title><rect x="16.8" y="787.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$245/2051353197.test (1 samples, 0.57%)</title><rect x="16.8" y="771.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsResume$7 (1 samples, 0.57%)</title><rect x="16.8" y="755.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.72%)</title><rect x="23.6" y="915.0" width="20.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$239/1385994889.accept (2 samples, 1.15%)</title><rect x="23.6" y="899.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 1.15%)</title><rect x="23.6" y="883.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 1.15%)</title><rect x="23.6" y="867.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.15%)</title><rect x="23.6" y="851.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.15%)</title><rect x="23.6" y="835.0" width="13.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="26.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.15%)</title><rect x="23.6" y="819.0" width="13.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="26.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.15%)</title><rect x="23.6" y="803.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.15%)</title><rect x="23.6" y="787.0" width="13.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.15%)</title><rect x="23.6" y="771.0" width="13.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.15%)</title><rect x="23.6" y="755.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.57%)</title><rect x="37.1" y="899.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.57%)</title><rect x="37.1" y="883.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.57%)</title><rect x="37.1" y="867.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.57%)</title><rect x="37.1" y="851.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.57%)</title><rect x="37.1" y="835.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.1" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.57%)</title><rect x="37.1" y="819.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.60%)</title><rect x="43.9" y="915.0" width="54.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.9" y="926.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 4.60%)</title><rect x="43.9" y="899.0" width="54.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.9" y="910.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 4.02%)</title><rect x="43.9" y="883.0" width="47.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="46.9" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.57%)</title><rect x="43.9" y="867.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.57%)</title><rect x="43.9" y="851.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.57%)</title><rect x="43.9" y="835.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.57%)</title><rect x="43.9" y="819.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.57%)</title><rect x="43.9" y="803.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.57%)</title><rect x="43.9" y="787.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.9" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.57%)</title><rect x="43.9" y="771.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.57%)</title><rect x="43.9" y="755.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.57%)</title><rect x="43.9" y="739.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="46.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 2.87%)</title><rect x="50.7" y="867.0" width="33.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.7" y="878.0">or..</text>
</g>
<g>
<title>java/util/ArrayDeque.&lt;init&gt; (1 samples, 0.57%)</title><rect x="50.7" y="851.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.57%)</title><rect x="57.5" y="851.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.5" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.iterator (1 samples, 0.57%)</title><rect x="57.5" y="835.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.72%)</title><rect x="64.3" y="851.0" width="20.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (3 samples, 1.72%)</title><rect x="64.3" y="835.0" width="20.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.72%)</title><rect x="64.3" y="819.0" width="20.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.3" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.57%)</title><rect x="64.3" y="803.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.3" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.57%)</title><rect x="64.3" y="787.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="67.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.57%)</title><rect x="64.3" y="771.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.3" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.57%)</title><rect x="64.3" y="755.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.3" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="64.3" y="739.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.57%)</title><rect x="71.0" y="803.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.57%)</title><rect x="77.8" y="803.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="80.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.57%)</title><rect x="77.8" y="787.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.57%)</title><rect x="77.8" y="771.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.8" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.57%)</title><rect x="77.8" y="755.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.57%)</title><rect x="84.6" y="867.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="87.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.57%)</title><rect x="84.6" y="851.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.topicIds (1 samples, 0.57%)</title><rect x="84.6" y="835.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.57%)</title><rect x="91.4" y="883.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="94.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.57%)</title><rect x="91.4" y="867.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="94.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.57%)</title><rect x="91.4" y="851.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="94.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (64 samples, 36.78%)</title><rect x="98.2" y="963.0" width="434.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="101.2" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (64 samples, 36.78%)</title><rect x="98.2" y="947.0" width="434.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="101.2" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (64 samples, 36.78%)</title><rect x="98.2" y="931.0" width="434.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.2" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$468/477956708.run (61 samples, 35.06%)</title><rect x="104.9" y="915.0" width="413.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.9" y="926.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (61 samples, 35.06%)</title><rect x="104.9" y="899.0" width="413.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="107.9" y="910.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (61 samples, 35.06%)</title><rect x="104.9" y="883.0" width="413.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.9" y="894.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (61 samples, 35.06%)</title><rect x="104.9" y="867.0" width="413.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.9" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPi..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (3 samples, 1.72%)</title><rect x="111.7" y="851.0" width="20.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="114.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.72%)</title><rect x="111.7" y="835.0" width="20.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="114.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.72%)</title><rect x="111.7" y="819.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="114.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="125.3" y="803.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.57%)</title><rect x="125.3" y="787.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="128.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$494/447421084.accept (1 samples, 0.57%)</title><rect x="125.3" y="771.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="128.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (1 samples, 0.57%)</title><rect x="125.3" y="755.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="128.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.57%)</title><rect x="125.3" y="739.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="128.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.57%)</title><rect x="125.3" y="723.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="128.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.57%)</title><rect x="125.3" y="707.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.57%)</title><rect x="125.3" y="691.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="128.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (16 samples, 9.20%)</title><rect x="132.1" y="851.0" width="108.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.1" y="862.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$137/86558824.extract (16 samples, 9.20%)</title><rect x="132.1" y="835.0" width="108.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.1" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (16 samples, 9.20%)</title><rect x="132.1" y="819.0" width="108.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.1" y="830.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 9.20%)</title><rect x="132.1" y="803.0" width="108.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="135.1" y="814.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 9.20%)</title><rect x="132.1" y="787.0" width="108.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.1" y="798.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 9.20%)</title><rect x="132.1" y="771.0" width="108.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.1" y="782.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 4.02%)</title><rect x="132.1" y="755.0" width="47.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="135.1" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 1.15%)</title><rect x="132.1" y="739.0" width="13.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="135.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 1.15%)</title><rect x="132.1" y="723.0" width="13.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="135.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.15%)</title><rect x="132.1" y="707.0" width="13.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.15%)</title><rect x="132.1" y="691.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.15%)</title><rect x="132.1" y="675.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.1" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.15%)</title><rect x="132.1" y="659.0" width="13.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="135.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.15%)</title><rect x="132.1" y="643.0" width="13.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="135.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (5 samples, 2.87%)</title><rect x="145.6" y="739.0" width="33.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.6" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (5 samples, 2.87%)</title><rect x="145.6" y="723.0" width="33.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.6" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 2.87%)</title><rect x="145.6" y="707.0" width="33.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="148.6" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 2.87%)</title><rect x="145.6" y="691.0" width="33.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.6" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 2.87%)</title><rect x="145.6" y="675.0" width="33.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.6" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (5 samples, 2.87%)</title><rect x="145.6" y="659.0" width="33.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.6" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 4.02%)</title><rect x="179.5" y="755.0" width="47.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.5" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.57%)</title><rect x="179.5" y="739.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (6 samples, 3.45%)</title><rect x="186.3" y="739.0" width="40.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.3" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.45%)</title><rect x="186.3" y="723.0" width="40.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="189.3" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.15%)</title><rect x="186.3" y="707.0" width="13.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="189.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.57%)</title><rect x="186.3" y="691.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="189.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.57%)</title><rect x="193.1" y="691.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.57%)</title><rect x="193.1" y="675.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.30%)</title><rect x="199.9" y="707.0" width="27.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="202.9" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.30%)</title><rect x="199.9" y="691.0" width="27.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.9" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.30%)</title><rect x="199.9" y="675.0" width="27.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.9" y="686.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.15%)</title><rect x="199.9" y="659.0" width="13.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.15%)</title><rect x="199.9" y="643.0" width="13.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.15%)</title><rect x="199.9" y="627.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.15%)</title><rect x="199.9" y="611.0" width="13.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.57%)</title><rect x="199.9" y="595.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.57%)</title><rect x="206.7" y="595.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.57%)</title><rect x="213.4" y="659.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="216.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.57%)</title><rect x="213.4" y="643.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.57%)</title><rect x="213.4" y="627.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.57%)</title><rect x="213.4" y="611.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="216.4" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.57%)</title><rect x="213.4" y="595.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.57%)</title><rect x="213.4" y="579.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.4" y="590.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.57%)</title><rect x="213.4" y="563.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.57%)</title><rect x="220.2" y="659.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.57%)</title><rect x="220.2" y="643.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.57%)</title><rect x="220.2" y="627.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.2" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.57%)</title><rect x="220.2" y="611.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.2" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.57%)</title><rect x="220.2" y="595.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="223.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.15%)</title><rect x="227.0" y="755.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.0" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.15%)</title><rect x="227.0" y="739.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.15%)</title><rect x="227.0" y="723.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="230.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.15%)</title><rect x="227.0" y="707.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="230.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.15%)</title><rect x="227.0" y="691.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (40 samples, 22.99%)</title><rect x="240.6" y="851.0" width="271.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.6" y="862.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (3 samples, 1.72%)</title><rect x="240.6" y="835.0" width="20.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.6" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.72%)</title><rect x="240.6" y="819.0" width="20.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.72%)</title><rect x="240.6" y="803.0" width="20.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.57%)</title><rect x="240.6" y="787.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.57%)</title><rect x="240.6" y="771.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="243.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="240.6" y="755.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.15%)</title><rect x="247.4" y="787.0" width="13.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.15%)</title><rect x="247.4" y="771.0" width="13.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="260.9" y="835.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.9" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.57%)</title><rect x="260.9" y="819.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (9 samples, 5.17%)</title><rect x="267.7" y="835.0" width="61.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="270.7" y="846.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (8 samples, 4.60%)</title><rect x="267.7" y="819.0" width="54.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="270.7" y="830.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.72%)</title><rect x="267.7" y="803.0" width="20.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.7" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.57%)</title><rect x="281.3" y="787.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.3" y="798.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.57%)</title><rect x="281.3" y="771.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.3" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.57%)</title><rect x="281.3" y="755.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.3" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.57%)</title><rect x="281.3" y="739.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.3" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.57%)</title><rect x="281.3" y="723.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="284.3" y="734.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.57%)</title><rect x="288.0" y="803.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.0" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.57%)</title><rect x="288.0" y="787.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="291.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.57%)</title><rect x="288.0" y="771.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="291.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.57%)</title><rect x="288.0" y="755.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="291.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.57%)</title><rect x="288.0" y="739.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="291.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.57%)</title><rect x="288.0" y="723.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="291.0" y="734.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.57%)</title><rect x="288.0" y="707.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="291.0" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 2.30%)</title><rect x="294.8" y="803.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.8" y="814.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.72%)</title><rect x="301.6" y="787.0" width="20.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.6" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.72%)</title><rect x="301.6" y="771.0" width="20.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.72%)</title><rect x="301.6" y="755.0" width="20.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.6" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.72%)</title><rect x="301.6" y="739.0" width="20.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.57%)</title><rect x="322.0" y="819.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.57%)</title><rect x="322.0" y="803.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.57%)</title><rect x="322.0" y="787.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.57%)</title><rect x="322.0" y="771.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (25 samples, 14.37%)</title><rect x="328.7" y="835.0" width="169.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.7" y="846.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (25 samples, 14.37%)</title><rect x="328.7" y="819.0" width="169.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.7" y="830.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$395/717282671.process (22 samples, 12.64%)</title><rect x="328.7" y="803.0" width="149.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.7" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (22 samples, 12.64%)</title><rect x="328.7" y="787.0" width="149.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="331.7" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 12.07%)</title><rect x="328.7" y="771.0" width="142.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="331.7" y="782.0">com/linecorp/decat..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.57%)</title><rect x="328.7" y="755.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.57%)</title><rect x="328.7" y="739.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.7" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.57%)</title><rect x="328.7" y="723.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="331.7" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.57%)</title><rect x="328.7" y="707.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.7" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.57%)</title><rect x="328.7" y="691.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.7" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.57%)</title><rect x="328.7" y="675.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.7" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.57%)</title><rect x="328.7" y="659.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="331.7" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.57%)</title><rect x="328.7" y="643.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.7" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.57%)</title><rect x="328.7" y="627.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.7" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.prepareForDeferredProcessing (1 samples, 0.57%)</title><rect x="328.7" y="611.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.7" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/spi/LoggingEvent.getFormattedMessage (1 samples, 0.57%)</title><rect x="328.7" y="595.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.7" y="606.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.57%)</title><rect x="328.7" y="579.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.7" y="590.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (1 samples, 0.57%)</title><rect x="328.7" y="563.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="331.7" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.57%)</title><rect x="328.7" y="547.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="331.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (20 samples, 11.49%)</title><rect x="335.5" y="755.0" width="135.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.5" y="766.0">com/linecorp/deca..</text>
</g>
<g>
<title>java/lang/Thread.sleep (20 samples, 11.49%)</title><rect x="335.5" y="739.0" width="135.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="338.5" y="750.0">java/lang/Thread...</text>
</g>
<g>
<title>JVM_Sleep (20 samples, 11.49%)</title><rect x="335.5" y="723.0" width="135.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="338.5" y="734.0">JVM_Sleep</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.87%)</title><rect x="335.5" y="707.0" width="33.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="338.5" y="718.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (5 samples, 2.87%)</title><rect x="369.4" y="707.0" width="33.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="372.4" y="718.0">__..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.57%)</title><rect x="403.3" y="707.0" width="6.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="406.3" y="718.0"></text>
</g>
<g>
<title>_init (2 samples, 1.15%)</title><rect x="410.1" y="707.0" width="13.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="413.1" y="718.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (6 samples, 3.45%)</title><rect x="423.7" y="707.0" width="40.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="426.7" y="718.0">os:..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.57%)</title><rect x="430.5" y="691.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="433.5" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 2.30%)</title><rect x="437.2" y="691.0" width="27.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="440.2" y="702.0">_..</text>
</g>
<g>
<title>[vdso] (2 samples, 1.15%)</title><rect x="450.8" y="675.0" width="13.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="453.8" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.57%)</title><rect x="464.4" y="707.0" width="6.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="467.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.57%)</title><rect x="471.1" y="771.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.57%)</title><rect x="471.1" y="755.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 1.15%)</title><rect x="477.9" y="803.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.57%)</title><rect x="484.7" y="787.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="487.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="491.5" y="803.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="494.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.57%)</title><rect x="491.5" y="787.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.5" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.57%)</title><rect x="491.5" y="771.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="494.5" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.57%)</title><rect x="491.5" y="755.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="494.5" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.57%)</title><rect x="491.5" y="739.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="494.5" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.57%)</title><rect x="491.5" y="723.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="494.5" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.57%)</title><rect x="491.5" y="707.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="494.5" y="718.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.57%)</title><rect x="491.5" y="691.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="494.5" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.57%)</title><rect x="491.5" y="675.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="494.5" y="686.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.57%)</title><rect x="491.5" y="659.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="494.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.15%)</title><rect x="498.3" y="835.0" width="13.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="501.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.15%)</title><rect x="498.3" y="819.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.3" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="498.3" y="803.0" width="6.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="501.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="498.3" y="787.0" width="6.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="501.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="505.1" y="803.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.57%)</title><rect x="505.1" y="787.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$492/1317029077.accept (1 samples, 0.57%)</title><rect x="505.1" y="771.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="508.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (1 samples, 0.57%)</title><rect x="505.1" y="755.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="508.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.57%)</title><rect x="505.1" y="739.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="508.1" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.57%)</title><rect x="505.1" y="723.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.1" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.57%)</title><rect x="505.1" y="707.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.1" y="718.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.57%)</title><rect x="511.8" y="851.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="514.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="511.8" y="835.0" width="6.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="514.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 1.15%)</title><rect x="518.6" y="915.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="521.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 1.15%)</title><rect x="518.6" y="899.0" width="13.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.57%)</title><rect x="525.4" y="883.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="528.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.57%)</title><rect x="525.4" y="867.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.57%)</title><rect x="525.4" y="851.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="528.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.57%)</title><rect x="525.4" y="835.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="528.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.57%)</title><rect x="532.2" y="963.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.57%)</title><rect x="532.2" y="947.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="535.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.57%)</title><rect x="532.2" y="931.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="535.2" y="942.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.57%)</title><rect x="532.2" y="915.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="535.2" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="532.2" y="899.0" width="6.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="535.2" y="910.0"></text>
</g>
<g>
<title>start_thread (96 samples, 55.17%)</title><rect x="539.0" y="963.0" width="651.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="542.0" y="974.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (96 samples, 55.17%)</title><rect x="539.0" y="947.0" width="651.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="542.0" y="958.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (96 samples, 55.17%)</title><rect x="539.0" y="931.0" width="651.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="542.0" y="942.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 5.17%)</title><rect x="539.0" y="915.0" width="61.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.0" y="926.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (9 samples, 5.17%)</title><rect x="539.0" y="899.0" width="61.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="542.0" y="910.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.87%)</title><rect x="539.0" y="883.0" width="33.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="542.0" y="894.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.57%)</title><rect x="552.5" y="867.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="555.5" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.57%)</title><rect x="559.3" y="867.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="562.3" y="878.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.57%)</title><rect x="566.1" y="867.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="569.1" y="878.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 2.30%)</title><rect x="572.9" y="883.0" width="27.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="575.9" y="894.0">G..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 2.30%)</title><rect x="572.9" y="867.0" width="27.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="575.9" y="878.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 2.30%)</title><rect x="572.9" y="851.0" width="27.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.9" y="862.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 2.30%)</title><rect x="572.9" y="835.0" width="27.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="575.9" y="846.0">D..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 2.30%)</title><rect x="572.9" y="819.0" width="27.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="575.9" y="830.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 2.30%)</title><rect x="572.9" y="803.0" width="27.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="575.9" y="814.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 2.30%)</title><rect x="572.9" y="787.0" width="27.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="575.9" y="798.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.57%)</title><rect x="593.2" y="771.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="596.2" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (87 samples, 50.00%)</title><rect x="600.0" y="915.0" width="590.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="603.0" y="926.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (87 samples, 50.00%)</title><rect x="600.0" y="899.0" width="590.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="910.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 49.43%)</title><rect x="600.0" y="883.0" width="583.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="603.0" y="894.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (84 samples, 48.28%)</title><rect x="600.0" y="867.0" width="569.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="603.0" y="878.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (84 samples, 48.28%)</title><rect x="600.0" y="851.0" width="569.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.0" y="862.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, D..</text>
</g>
<g>
<title>Compile::Code_Gen() (58 samples, 33.33%)</title><rect x="600.0" y="835.0" width="393.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="603.0" y="846.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Block::code_alignment() const (1 samples, 0.57%)</title><rect x="600.0" y="819.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="603.0" y="830.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.57%)</title><rect x="606.8" y="819.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="609.8" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.57%)</title><rect x="606.8" y="803.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.8" y="814.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.57%)</title><rect x="606.8" y="787.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="609.8" y="798.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.57%)</title><rect x="606.8" y="771.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="609.8" y="782.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 3.45%)</title><rect x="613.6" y="819.0" width="40.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="616.6" y="830.0">Mat..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.57%)</title><rect x="613.6" y="803.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="616.6" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.87%)</title><rect x="620.3" y="803.0" width="34.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="623.3" y="814.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 1.15%)</title><rect x="620.3" y="787.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.3" y="798.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.57%)</title><rect x="633.9" y="787.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="636.9" y="798.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.57%)</title><rect x="633.9" y="771.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="636.9" y="782.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.15%)</title><rect x="640.7" y="787.0" width="13.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.7" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.57%)</title><rect x="647.5" y="771.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="650.5" y="782.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.57%)</title><rect x="647.5" y="755.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="650.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.72%)</title><rect x="654.3" y="819.0" width="20.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="657.3" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.72%)</title><rect x="654.3" y="803.0" width="20.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="657.3" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="654.3" y="787.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="657.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.57%)</title><rect x="654.3" y="771.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="657.3" y="782.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.57%)</title><rect x="654.3" y="755.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="657.3" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.57%)</title><rect x="661.0" y="787.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="664.0" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::needed_for_next_call(Block*, Node*, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="661.0" y="771.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="664.0" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.57%)</title><rect x="667.8" y="787.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="670.8" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.57%)</title><rect x="667.8" y="771.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="670.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (47 samples, 27.01%)</title><rect x="674.6" y="819.0" width="318.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.6" y="830.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.15%)</title><rect x="674.6" y="803.0" width="13.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="677.6" y="814.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.57%)</title><rect x="681.4" y="787.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="684.4" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (6 samples, 3.45%)</title><rect x="688.2" y="803.0" width="40.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="691.2" y="814.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.15%)</title><rect x="701.7" y="787.0" width="13.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="704.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 1.15%)</title><rect x="715.3" y="787.0" width="13.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="718.3" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="722.1" y="771.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="725.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.15%)</title><rect x="728.9" y="803.0" width="13.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="731.9" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.57%)</title><rect x="735.6" y="787.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="738.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.30%)</title><rect x="742.4" y="803.0" width="27.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="745.4" y="814.0">P..</text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.57%)</title><rect x="762.8" y="787.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="765.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 7.47%)</title><rect x="769.5" y="803.0" width="88.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="772.5" y="814.0">PhaseChait..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.57%)</title><rect x="769.5" y="787.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="772.5" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.57%)</title><rect x="769.5" y="771.0" width="6.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="772.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.57%)</title><rect x="776.3" y="787.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="779.3" y="798.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.57%)</title><rect x="776.3" y="771.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="779.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 5.17%)</title><rect x="783.1" y="787.0" width="61.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="786.1" y="798.0">PhaseC..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 2.30%)</title><rect x="817.0" y="771.0" width="27.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.0" y="782.0">I..</text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.57%)</title><rect x="844.1" y="787.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="847.1" y="798.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.57%)</title><rect x="844.1" y="771.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="847.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_node_if_not_used(Block*, unsigned int, Node*, unsigned int, IndexSet*) (1 samples, 0.57%)</title><rect x="850.9" y="787.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="853.9" y="798.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.57%)</title><rect x="850.9" y="771.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="853.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.57%)</title><rect x="857.7" y="803.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="860.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.57%)</title><rect x="864.5" y="803.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="867.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.30%)</title><rect x="871.3" y="803.0" width="27.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="874.3" y="814.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.15%)</title><rect x="884.8" y="787.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="887.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.47] (1 samples, 0.57%)</title><rect x="891.6" y="771.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="894.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.47] (1 samples, 0.57%)</title><rect x="891.6" y="755.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="894.6" y="766.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.15%)</title><rect x="898.4" y="803.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="901.4" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.15%)</title><rect x="898.4" y="787.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="901.4" y="798.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.57%)</title><rect x="898.4" y="771.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="901.4" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.57%)</title><rect x="905.2" y="771.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="908.2" y="782.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.57%)</title><rect x="905.2" y="755.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="908.2" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 2.30%)</title><rect x="912.0" y="803.0" width="27.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.0" y="814.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.15%)</title><rect x="925.5" y="787.0" width="13.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="928.5" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.57%)</title><rect x="939.1" y="803.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.1" y="814.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.57%)</title><rect x="939.1" y="787.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="942.1" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (7 samples, 4.02%)</title><rect x="945.9" y="803.0" width="47.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.9" y="814.0">Phas..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.57%)</title><rect x="966.2" y="787.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="969.2" y="798.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.57%)</title><rect x="966.2" y="771.0" width="6.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="969.2" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.72%)</title><rect x="973.0" y="787.0" width="20.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.0" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 8.62%)</title><rect x="993.3" y="835.0" width="101.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="846.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (6 samples, 3.45%)</title><rect x="993.3" y="819.0" width="40.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="996.3" y="830.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 3.45%)</title><rect x="993.3" y="803.0" width="40.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="996.3" y="814.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="993.3" y="787.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.72%)</title><rect x="1000.1" y="787.0" width="20.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1003.1" y="798.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.57%)</title><rect x="1006.9" y="771.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1009.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.57%)</title><rect x="1013.7" y="771.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.57%)</title><rect x="1013.7" y="755.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.7" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 1.15%)</title><rect x="1020.5" y="787.0" width="13.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.5" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.15%)</title><rect x="1020.5" y="771.0" width="13.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1023.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.57%)</title><rect x="1020.5" y="755.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1023.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.57%)</title><rect x="1027.2" y="755.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1030.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.57%)</title><rect x="1027.2" y="739.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1030.2" y="750.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.57%)</title><rect x="1027.2" y="723.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1030.2" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.57%)</title><rect x="1034.0" y="819.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.0" y="830.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseGVN*) const (1 samples, 0.57%)</title><rect x="1034.0" y="803.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1037.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 2.30%)</title><rect x="1040.8" y="819.0" width="27.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1043.8" y="830.0">P..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1040.8" y="803.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1043.8" y="814.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1040.8" y="787.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1043.8" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1040.8" y="771.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.8" y="782.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1040.8" y="755.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1043.8" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1040.8" y="739.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1043.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.57%)</title><rect x="1040.8" y="723.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1043.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.57%)</title><rect x="1040.8" y="707.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1043.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason, int, bool) (1 samples, 0.57%)</title><rect x="1040.8" y="691.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1043.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.57%)</title><rect x="1040.8" y="675.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.8" y="686.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.57%)</title><rect x="1040.8" y="659.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1043.8" y="670.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.57%)</title><rect x="1047.6" y="803.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.57%)</title><rect x="1054.4" y="803.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.4" y="814.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.57%)</title><rect x="1054.4" y="787.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.4" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="1061.1" y="803.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.57%)</title><rect x="1061.1" y="787.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.30%)</title><rect x="1067.9" y="819.0" width="27.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1070.9" y="830.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.30%)</title><rect x="1067.9" y="803.0" width="27.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.9" y="814.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1067.9" y="787.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1070.9" y="798.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.57%)</title><rect x="1067.9" y="771.0" width="6.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1070.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.57%)</title><rect x="1067.9" y="755.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.9" y="766.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.57%)</title><rect x="1067.9" y="739.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.9" y="750.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1074.7" y="787.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1077.7" y="798.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.57%)</title><rect x="1074.7" y="771.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1077.7" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1081.5" y="787.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1084.5" y="798.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.57%)</title><rect x="1081.5" y="771.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1084.5" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1088.3" y="787.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.3" y="798.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.57%)</title><rect x="1088.3" y="771.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1091.3" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="755.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.3" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="739.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.3" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="723.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1091.3" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="707.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.3" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="691.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1091.3" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="675.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="659.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1091.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="643.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1091.3" y="654.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.57%)</title><rect x="1088.3" y="627.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1091.3" y="638.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.57%)</title><rect x="1088.3" y="611.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.3" y="622.0"></text>
</g>
<g>
<title>Compile::build_start_state(StartNode*, TypeFunc const*) (1 samples, 0.57%)</title><rect x="1095.1" y="835.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.1" y="846.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.57%)</title><rect x="1095.1" y="819.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1098.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 5.75%)</title><rect x="1101.8" y="835.0" width="67.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.8" y="846.0">ParseGe..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 5.75%)</title><rect x="1101.8" y="819.0" width="67.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.8" y="830.0">Parse::..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 5.75%)</title><rect x="1101.8" y="803.0" width="67.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.8" y="814.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 5.75%)</title><rect x="1101.8" y="787.0" width="67.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.8" y="798.0">Parse::..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.57%)</title><rect x="1101.8" y="771.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.8" y="782.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.57%)</title><rect x="1101.8" y="755.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 5.17%)</title><rect x="1108.6" y="771.0" width="61.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1111.6" y="782.0">Parse:..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 5.17%)</title><rect x="1108.6" y="755.0" width="61.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.6" y="766.0">Parse:..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.45%)</title><rect x="1108.6" y="739.0" width="40.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.6" y="750.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.45%)</title><rect x="1108.6" y="723.0" width="40.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.6" y="734.0">Par..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.57%)</title><rect x="1108.6" y="707.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.6" y="718.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.57%)</title><rect x="1108.6" y="691.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.6" y="702.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.57%)</title><rect x="1108.6" y="675.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.6" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.57%)</title><rect x="1108.6" y="659.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.87%)</title><rect x="1115.4" y="707.0" width="33.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.4" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.87%)</title><rect x="1115.4" y="691.0" width="33.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.4" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.87%)</title><rect x="1115.4" y="675.0" width="33.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.4" y="686.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.87%)</title><rect x="1115.4" y="659.0" width="33.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.4" y="670.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1115.4" y="643.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1115.4" y="627.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1115.4" y="611.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1115.4" y="595.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.4" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 2.30%)</title><rect x="1122.2" y="643.0" width="27.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.2" y="654.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.30%)</title><rect x="1122.2" y="627.0" width="27.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.30%)</title><rect x="1122.2" y="611.0" width="27.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.30%)</title><rect x="1122.2" y="595.0" width="27.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.2" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.30%)</title><rect x="1122.2" y="579.0" width="27.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.30%)</title><rect x="1122.2" y="563.0" width="27.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.72%)</title><rect x="1122.2" y="547.0" width="20.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.72%)</title><rect x="1122.2" y="531.0" width="20.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.72%)</title><rect x="1122.2" y="515.0" width="20.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.72%)</title><rect x="1122.2" y="499.0" width="20.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.72%)</title><rect x="1122.2" y="483.0" width="20.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.72%)</title><rect x="1122.2" y="467.0" width="20.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.72%)</title><rect x="1122.2" y="451.0" width="20.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.72%)</title><rect x="1122.2" y="435.0" width="20.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.72%)</title><rect x="1122.2" y="419.0" width="20.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.72%)</title><rect x="1122.2" y="403.0" width="20.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.72%)</title><rect x="1122.2" y="387.0" width="20.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.72%)</title><rect x="1122.2" y="371.0" width="20.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.72%)</title><rect x="1122.2" y="355.0" width="20.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.72%)</title><rect x="1122.2" y="339.0" width="20.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.72%)</title><rect x="1122.2" y="323.0" width="20.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.72%)</title><rect x="1122.2" y="307.0" width="20.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.72%)</title><rect x="1122.2" y="291.0" width="20.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.72%)</title><rect x="1122.2" y="275.0" width="20.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.72%)</title><rect x="1122.2" y="259.0" width="20.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.72%)</title><rect x="1122.2" y="243.0" width="20.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.2" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.72%)</title><rect x="1122.2" y="227.0" width="20.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.72%)</title><rect x="1122.2" y="211.0" width="20.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="222.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicates(int) (1 samples, 0.57%)</title><rect x="1122.2" y="195.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="206.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.191] (1 samples, 0.57%)</title><rect x="1122.2" y="179.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="190.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.57%)</title><rect x="1122.2" y="163.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="174.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.57%)</title><rect x="1122.2" y="147.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.15%)</title><rect x="1129.0" y="195.0" width="13.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.15%)</title><rect x="1129.0" y="179.0" width="13.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1129.0" y="163.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="174.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1129.0" y="147.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.0" y="158.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1129.0" y="131.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.0" y="142.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1129.0" y="115.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.0" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1129.0" y="99.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.0" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1129.0" y="83.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.0" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::get_start_state() (1 samples, 0.57%)</title><rect x="1129.0" y="67.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.0" y="78.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="1129.0" y="51.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.0" y="62.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.57%)</title><rect x="1129.0" y="35.0" width="6.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1132.0" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.57%)</title><rect x="1135.7" y="163.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.7" y="174.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.57%)</title><rect x="1135.7" y="147.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="158.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="1135.7" y="131.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.7" y="142.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.57%)</title><rect x="1135.7" y="115.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.7" y="126.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.57%)</title><rect x="1142.5" y="547.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="558.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.57%)</title><rect x="1142.5" y="531.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.5" y="542.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.57%)</title><rect x="1142.5" y="515.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.5" y="526.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.183] (1 samples, 0.57%)</title><rect x="1142.5" y="499.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.5" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.57%)</title><rect x="1142.5" y="483.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.5" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="1142.5" y="467.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.5" y="478.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.57%)</title><rect x="1142.5" y="451.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.5" y="462.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.57%)</title><rect x="1142.5" y="435.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.5" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.72%)</title><rect x="1149.3" y="739.0" width="20.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.3" y="723.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.3" y="707.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.3" y="691.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.3" y="675.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.3" y="659.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.3" y="643.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.3" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1149.3" y="627.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.3" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1149.3" y="611.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.3" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1149.3" y="595.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1149.3" y="579.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1149.3" y="563.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1149.3" y="547.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1149.3" y="531.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1149.3" y="515.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.3" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.57%)</title><rect x="1149.3" y="499.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.3" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.57%)</title><rect x="1149.3" y="483.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1149.3" y="467.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.3" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1149.3" y="451.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.3" y="462.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.57%)</title><rect x="1149.3" y="435.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.3" y="446.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.57%)</title><rect x="1149.3" y="419.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.3" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.57%)</title><rect x="1149.3" y="403.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.3" y="414.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.57%)</title><rect x="1149.3" y="387.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.3" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.57%)</title><rect x="1149.3" y="371.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.3" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.57%)</title><rect x="1149.3" y="355.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.3" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.57%)</title><rect x="1156.1" y="723.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.1" y="734.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1162.9" y="723.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1162.9" y="707.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1162.9" y="691.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1162.9" y="675.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1162.9" y="659.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1162.9" y="643.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1162.9" y="627.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1162.9" y="611.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1162.9" y="595.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1162.9" y="579.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1162.9" y="563.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1162.9" y="547.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1162.9" y="531.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1162.9" y="515.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1162.9" y="499.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1162.9" y="483.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1162.9" y="467.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1162.9" y="451.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1162.9" y="435.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1162.9" y="419.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1162.9" y="403.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1162.9" y="387.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1162.9" y="371.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1162.9" y="355.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1162.9" y="339.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1162.9" y="323.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1162.9" y="307.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1162.9" y="291.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1162.9" y="275.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1162.9" y="259.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.9" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.57%)</title><rect x="1162.9" y="243.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.9" y="254.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.57%)</title><rect x="1162.9" y="227.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.9" y="238.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 1.15%)</title><rect x="1169.7" y="867.0" width="13.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1172.7" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 1.15%)</title><rect x="1169.7" y="851.0" width="13.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.7" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.15%)</title><rect x="1169.7" y="835.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.7" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.57%)</title><rect x="1169.7" y="819.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.7" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.57%)</title><rect x="1169.7" y="803.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="814.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.57%)</title><rect x="1169.7" y="787.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.7" y="798.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.57%)</title><rect x="1169.7" y="771.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.7" y="782.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.57%)</title><rect x="1169.7" y="755.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="766.0"></text>
</g>
<g>
<title>MacroAssembler::mov_metadata(RegisterImpl*, Metadata*) (1 samples, 0.57%)</title><rect x="1169.7" y="739.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.7" y="750.0"></text>
</g>
<g>
<title>Assembler::mov_literal64(RegisterImpl*, long, RelocationHolder const&amp;) (1 samples, 0.57%)</title><rect x="1169.7" y="723.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="734.0"></text>
</g>
<g>
<title>CodeSection::relocate(unsigned char*, RelocationHolder const&amp;, int) (1 samples, 0.57%)</title><rect x="1169.7" y="707.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.7" y="718.0"></text>
</g>
<g>
<title>CodeSection::expand_locs(int) (1 samples, 0.57%)</title><rect x="1169.7" y="691.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.7" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.57%)</title><rect x="1169.7" y="675.0" width="6.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1172.7" y="686.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.57%)</title><rect x="1176.4" y="819.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.4" y="830.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.57%)</title><rect x="1176.4" y="803.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.4" y="814.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.57%)</title><rect x="1176.4" y="787.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.57%)</title><rect x="1176.4" y="771.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.57%)</title><rect x="1176.4" y="755.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.4" y="766.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.57%)</title><rect x="1176.4" y="739.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.4" y="750.0"></text>
</g>
<g>
<title>_init (1 samples, 0.57%)</title><rect x="1176.4" y="723.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1179.4" y="734.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.57%)</title><rect x="1183.2" y="883.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="894.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.57%)</title><rect x="1183.2" y="867.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="878.0"></text>
</g>
</g>
</svg>
