<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1205"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1205"> </text>
<g id="frames">
<g>
<title>all (801 samples, 100.00%)</title><rect x="10.0" y="1171.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1182.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.12%)</title><rect x="10.0" y="1155.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="1139.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="1123.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.12%)</title><rect x="10.0" y="1107.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="10.0" y="1091.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (224 samples, 27.97%)</title><rect x="11.5" y="1155.0" width="330.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.5" y="1166.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (224 samples, 27.97%)</title><rect x="11.5" y="1139.0" width="330.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.5" y="1150.0">com/linecorp/decaton/processor/runtime/Proces..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="11.5" y="1123.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (222 samples, 27.72%)</title><rect x="12.9" y="1123.0" width="327.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.9" y="1134.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.50%)</title><rect x="12.9" y="1107.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.50%)</title><rect x="12.9" y="1091.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.50%)</title><rect x="12.9" y="1075.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.50%)</title><rect x="12.9" y="1059.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.50%)</title><rect x="12.9" y="1043.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.50%)</title><rect x="12.9" y="1027.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.25%)</title><rect x="12.9" y="1011.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.25%)</title><rect x="12.9" y="995.0" width="3.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.25%)</title><rect x="12.9" y="979.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/41859411.test (1 samples, 0.12%)</title><rect x="12.9" y="963.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="974.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="14.4" y="963.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="17.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (2 samples, 0.25%)</title><rect x="15.9" y="1011.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.9" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.37%)</title><rect x="18.8" y="1107.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.37%)</title><rect x="18.8" y="1091.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.37%)</title><rect x="18.8" y="1075.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$240/507629791.accept (3 samples, 0.37%)</title><rect x="18.8" y="1059.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.37%)</title><rect x="18.8" y="1043.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.37%)</title><rect x="18.8" y="1027.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.8" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.37%)</title><rect x="18.8" y="1011.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (183 samples, 22.85%)</title><rect x="23.3" y="1107.0" width="269.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.3" y="1118.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$239/954559204.accept (178 samples, 22.22%)</title><rect x="23.3" y="1091.0" width="262.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1102.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (178 samples, 22.22%)</title><rect x="23.3" y="1075.0" width="262.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.3" y="1086.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (160 samples, 19.98%)</title><rect x="23.3" y="1059.0" width="235.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.3" y="1070.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (160 samples, 19.98%)</title><rect x="23.3" y="1043.0" width="235.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.3" y="1054.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (160 samples, 19.98%)</title><rect x="23.3" y="1027.0" width="235.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.3" y="1038.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 19.98%)</title><rect x="23.3" y="1011.0" width="235.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.3" y="1022.0">java/util/concurrent/Executors$..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 19.98%)</title><rect x="23.3" y="995.0" width="235.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.3" y="1006.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (135 samples, 16.85%)</title><rect x="60.1" y="979.0" width="198.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.1" y="990.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (116 samples, 14.48%)</title><rect x="60.1" y="963.0" width="170.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.1" y="974.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (17 samples, 2.12%)</title><rect x="60.1" y="947.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.1" y="958.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (17 samples, 2.12%)</title><rect x="60.1" y="931.0" width="25.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.1" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (17 samples, 2.12%)</title><rect x="60.1" y="915.0" width="25.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.1" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.37%)</title><rect x="85.1" y="947.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.37%)</title><rect x="85.1" y="931.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.37%)</title><rect x="85.1" y="915.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.37%)</title><rect x="85.1" y="899.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (96 samples, 11.99%)</title><rect x="89.6" y="947.0" width="141.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.6" y="958.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (96 samples, 11.99%)</title><rect x="89.6" y="931.0" width="141.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.6" y="942.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (96 samples, 11.99%)</title><rect x="89.6" y="915.0" width="141.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.6" y="926.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (96 samples, 11.99%)</title><rect x="89.6" y="899.0" width="141.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.6" y="910.0">java/util/concurre..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (95 samples, 11.86%)</title><rect x="91.0" y="883.0" width="140.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="94.0" y="894.0">jdk/internal/misc..</text>
</g>
<g>
<title>Unsafe_Unpark (41 samples, 5.12%)</title><rect x="92.5" y="867.0" width="60.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="95.5" y="878.0">Unsafe..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.12%)</title><rect x="98.4" y="851.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="101.4" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.25%)</title><rect x="99.9" y="851.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="102.9" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.25%)</title><rect x="102.8" y="851.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="105.8" y="862.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.12%)</title><rect x="105.8" y="851.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="108.8" y="862.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.50%)</title><rect x="107.2" y="851.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="110.2" y="862.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.25%)</title><rect x="113.1" y="851.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.1" y="862.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.62%)</title><rect x="116.1" y="851.0" width="7.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="119.1" y="862.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.12%)</title><rect x="123.4" y="851.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="126.4" y="862.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.37%)</title><rect x="124.9" y="851.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="127.9" y="862.0"></text>
</g>
<g>
<title>pthread_mutex_lock (16 samples, 2.00%)</title><rect x="129.3" y="851.0" width="23.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="132.3" y="862.0">p..</text>
</g>
<g>
<title>__pthread_cond_signal (53 samples, 6.62%)</title><rect x="152.9" y="867.0" width="78.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="155.9" y="878.0">__pthread..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (8 samples, 1.00%)</title><rect x="231.0" y="963.0" width="11.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="234.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (8 samples, 1.00%)</title><rect x="231.0" y="947.0" width="11.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.50%)</title><rect x="236.9" y="931.0" width="5.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.50%)</title><rect x="236.9" y="915.0" width="5.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 1.37%)</title><rect x="242.8" y="963.0" width="16.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 1.37%)</title><rect x="242.8" y="947.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 1.37%)</title><rect x="242.8" y="931.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 1.37%)</title><rect x="242.8" y="915.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="257.5" y="899.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (8 samples, 1.00%)</title><rect x="259.0" y="1059.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.0" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.87%)</title><rect x="260.4" y="1043.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.87%)</title><rect x="260.4" y="1027.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.87%)</title><rect x="260.4" y="1011.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.4" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.12%)</title><rect x="269.3" y="995.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="272.3" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="269.3" y="979.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.62%)</title><rect x="270.7" y="1059.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.62%)</title><rect x="270.7" y="1043.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="273.7" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.37%)</title><rect x="270.7" y="1027.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.12%)</title><rect x="273.7" y="1011.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.25%)</title><rect x="275.2" y="1027.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.25%)</title><rect x="275.2" y="1011.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="278.2" y="1022.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (2 samples, 0.25%)</title><rect x="275.2" y="995.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="278.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.25%)</title><rect x="275.2" y="979.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="278.2" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.25%)</title><rect x="275.2" y="963.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.62%)</title><rect x="278.1" y="1059.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.62%)</title><rect x="278.1" y="1043.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.12%)</title><rect x="278.1" y="1027.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.50%)</title><rect x="279.6" y="1027.0" width="5.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="282.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.50%)</title><rect x="279.6" y="1011.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.12%)</title><rect x="285.5" y="1091.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="285.5" y="1075.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="288.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.50%)</title><rect x="287.0" y="1091.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.0" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.50%)</title><rect x="287.0" y="1075.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.50%)</title><rect x="287.0" y="1059.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.50%)</title><rect x="287.0" y="1043.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.0" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.25%)</title><rect x="287.0" y="1027.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.0" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.12%)</title><rect x="289.9" y="1027.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.9" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.12%)</title><rect x="289.9" y="1011.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.12%)</title><rect x="289.9" y="995.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.12%)</title><rect x="291.4" y="1027.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.87%)</title><rect x="292.8" y="1107.0" width="45.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.8" y="1118.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.87%)</title><rect x="292.8" y="1091.0" width="45.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.8" y="1102.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (25 samples, 3.12%)</title><rect x="292.8" y="1075.0" width="36.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.8" y="1086.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (25 samples, 3.12%)</title><rect x="292.8" y="1059.0" width="36.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.8" y="1070.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 3.12%)</title><rect x="292.8" y="1043.0" width="36.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="295.8" y="1054.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.12%)</title><rect x="292.8" y="1027.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.12%)</title><rect x="292.8" y="1011.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.8" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="292.8" y="995.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="295.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.12%)</title><rect x="292.8" y="979.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.8" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.12%)</title><rect x="292.8" y="963.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="295.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (19 samples, 2.37%)</title><rect x="294.3" y="1027.0" width="28.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.3" y="1038.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 2.37%)</title><rect x="294.3" y="1011.0" width="28.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.3" y="1022.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.12%)</title><rect x="297.3" y="995.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.3" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.12%)</title><rect x="297.3" y="979.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.3" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.12%)</title><rect x="297.3" y="963.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.3" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.12%)</title><rect x="297.3" y="947.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.3" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.12%)</title><rect x="297.3" y="931.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 1.00%)</title><rect x="298.7" y="995.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.12%)</title><rect x="309.1" y="979.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.movePartitionToEnd (1 samples, 0.12%)</title><rect x="309.1" y="963.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.moveToEnd (1 samples, 0.12%)</title><rect x="309.1" y="947.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="312.1" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="309.1" y="931.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.1" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="309.1" y="915.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (8 samples, 1.00%)</title><rect x="310.5" y="995.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="313.5" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 1.00%)</title><rect x="310.5" y="979.0" width="11.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="313.5" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="310.5" y="963.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="313.5" y="974.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="310.5" y="947.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="313.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="310.5" y="931.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="313.5" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="310.5" y="915.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="313.5" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="310.5" y="899.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="313.5" y="910.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="310.5" y="883.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="313.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.87%)</title><rect x="312.0" y="963.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="315.0" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.87%)</title><rect x="312.0" y="947.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.0" y="958.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.37%)</title><rect x="317.9" y="931.0" width="4.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="320.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (3 samples, 0.37%)</title><rect x="322.3" y="1027.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="325.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.37%)</title><rect x="322.3" y="1011.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.12%)</title><rect x="322.3" y="995.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="322.3" y="979.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.3" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="322.3" y="963.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="325.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.12%)</title><rect x="323.8" y="995.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="326.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="323.8" y="979.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.8" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="323.8" y="963.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="326.8" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="323.8" y="947.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="325.3" y="995.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="328.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="325.3" y="979.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="328.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.12%)</title><rect x="325.3" y="963.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.12%)</title><rect x="326.7" y="1027.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="329.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.12%)</title><rect x="326.7" y="1011.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="326.7" y="995.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="326.7" y="979.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="329.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.12%)</title><rect x="328.2" y="1027.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="331.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.12%)</title><rect x="328.2" y="1011.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.25%)</title><rect x="329.7" y="1075.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.25%)</title><rect x="329.7" y="1059.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.25%)</title><rect x="329.7" y="1043.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.7" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="329.7" y="1027.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.7" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="329.7" y="1011.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.7" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="329.7" y="995.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.7" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="329.7" y="979.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="332.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.12%)</title><rect x="329.7" y="963.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="332.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.12%)</title><rect x="331.1" y="1027.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.12%)</title><rect x="331.1" y="1011.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="334.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.37%)</title><rect x="332.6" y="1075.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.6" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.37%)</title><rect x="332.6" y="1059.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.6" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.37%)</title><rect x="332.6" y="1043.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="335.6" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.37%)</title><rect x="332.6" y="1027.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="335.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.37%)</title><rect x="332.6" y="1011.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.37%)</title><rect x="332.6" y="995.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.37%)</title><rect x="332.6" y="979.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.37%)</title><rect x="332.6" y="963.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="335.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (2 samples, 0.25%)</title><rect x="332.6" y="947.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="335.6" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.25%)</title><rect x="332.6" y="931.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="335.6" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.25%)</title><rect x="332.6" y="915.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="335.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.25%)</title><rect x="332.6" y="899.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="335.6" y="910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.25%)</title><rect x="332.6" y="883.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="335.6" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.25%)</title><rect x="332.6" y="867.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="335.6" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.25%)</title><rect x="332.6" y="851.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="335.6" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.25%)</title><rect x="332.6" y="835.0" width="3.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="335.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.12%)</title><rect x="335.6" y="947.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="338.6" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="335.6" y="931.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.6" y="942.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="335.6" y="915.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="338.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.12%)</title><rect x="337.0" y="1075.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.12%)</title><rect x="337.0" y="1059.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="340.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$234/1060060323.accept (1 samples, 0.12%)</title><rect x="337.0" y="1043.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.12%)</title><rect x="337.0" y="1027.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.0" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.12%)</title><rect x="337.0" y="1011.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.0" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.12%)</title><rect x="337.0" y="995.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.0" y="1006.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.12%)</title><rect x="337.0" y="979.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.0" y="990.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.12%)</title><rect x="337.0" y="963.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="340.0" y="974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.12%)</title><rect x="337.0" y="947.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="340.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="338.5" y="1107.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.12%)</title><rect x="338.5" y="1091.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="341.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="338.5" y="1075.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="341.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.12%)</title><rect x="340.0" y="1123.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="343.0" y="1134.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.12%)</title><rect x="340.0" y="1107.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="343.0" y="1118.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.12%)</title><rect x="340.0" y="1091.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="343.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.run (532 samples, 66.42%)</title><rect x="341.5" y="1155.0" width="783.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.5" y="1166.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (532 samples, 66.42%)</title><rect x="341.5" y="1139.0" width="783.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="344.5" y="1150.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (532 samples, 66.42%)</title><rect x="341.5" y="1123.0" width="783.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="344.5" y="1134.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$468/1011424282.run (319 samples, 39.83%)</title><rect x="345.9" y="1107.0" width="469.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.9" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$La..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (319 samples, 39.83%)</title><rect x="345.9" y="1091.0" width="469.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.9" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (319 samples, 39.83%)</title><rect x="345.9" y="1075.0" width="469.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="348.9" y="1086.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (319 samples, 39.83%)</title><rect x="345.9" y="1059.0" width="469.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="348.9" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.s..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.75%)</title><rect x="350.3" y="1043.0" width="8.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="353.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.50%)</title><rect x="353.2" y="1027.0" width="5.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="356.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.75%)</title><rect x="359.1" y="1043.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="362.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.75%)</title><rect x="359.1" y="1027.0" width="8.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.1" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.75%)</title><rect x="359.1" y="1011.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.1" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="359.1" y="995.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.12%)</title><rect x="359.1" y="979.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.62%)</title><rect x="360.6" y="995.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="363.6" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.50%)</title><rect x="362.1" y="979.0" width="5.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="365.1" y="990.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.50%)</title><rect x="362.1" y="963.0" width="5.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="365.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (32 samples, 4.00%)</title><rect x="368.0" y="1043.0" width="47.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.0" y="1054.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 4.00%)</title><rect x="368.0" y="1027.0" width="47.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.0" y="1038.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 4.00%)</title><rect x="368.0" y="1011.0" width="47.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.0" y="1022.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (19 samples, 2.37%)</title><rect x="387.1" y="995.0" width="28.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.1" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.25%)</title><rect x="387.1" y="979.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.1" y="990.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="388.6" y="963.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="391.6" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (17 samples, 2.12%)</title><rect x="390.1" y="979.0" width="25.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.1" y="990.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$481/1538316772.accept (17 samples, 2.12%)</title><rect x="390.1" y="963.0" width="25.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="393.1" y="974.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (17 samples, 2.12%)</title><rect x="390.1" y="947.0" width="25.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="393.1" y="958.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (17 samples, 2.12%)</title><rect x="390.1" y="931.0" width="25.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="393.1" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (17 samples, 2.12%)</title><rect x="390.1" y="915.0" width="25.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.1" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (16 samples, 2.00%)</title><rect x="391.5" y="899.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="394.5" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.50%)</title><rect x="391.5" y="883.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$466/284691879.accept (1 samples, 0.12%)</title><rect x="393.0" y="867.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="396.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$465/2101786417.accept (1 samples, 0.12%)</title><rect x="394.5" y="867.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="397.5" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="396.0" y="867.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="399.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.50%)</title><rect x="397.4" y="883.0" width="17.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$465/2101786417.accept (1 samples, 0.12%)</title><rect x="413.6" y="867.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="416.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.12%)</title><rect x="415.1" y="1043.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.12%)</title><rect x="415.1" y="1027.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="418.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$389/1707438235.get (1 samples, 0.12%)</title><rect x="415.1" y="1011.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.12%)</title><rect x="415.1" y="995.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.1" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="415.1" y="979.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="418.1" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="415.1" y="963.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="418.1" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="415.1" y="947.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="418.1" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="415.1" y="931.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="418.1" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="415.1" y="915.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="418.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="415.1" y="899.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="418.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (89 samples, 11.11%)</title><rect x="416.6" y="1043.0" width="131.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.6" y="1054.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$137/86558824.extract (89 samples, 11.11%)</title><rect x="416.6" y="1027.0" width="131.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.6" y="1038.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (89 samples, 11.11%)</title><rect x="416.6" y="1011.0" width="131.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.6" y="1022.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (88 samples, 10.99%)</title><rect x="416.6" y="995.0" width="129.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="419.6" y="1006.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (88 samples, 10.99%)</title><rect x="416.6" y="979.0" width="129.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="419.6" y="990.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (88 samples, 10.99%)</title><rect x="416.6" y="963.0" width="129.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.6" y="974.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 0.62%)</title><rect x="416.6" y="947.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.50%)</title><rect x="416.6" y="931.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.50%)</title><rect x="416.6" y="915.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="419.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.50%)</title><rect x="416.6" y="899.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="419.6" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.50%)</title><rect x="416.6" y="883.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.6" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.50%)</title><rect x="416.6" y="867.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.12%)</title><rect x="422.5" y="931.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="425.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.12%)</title><rect x="422.5" y="915.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.12%)</title><rect x="422.5" y="899.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="425.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.12%)</title><rect x="422.5" y="883.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.12%)</title><rect x="422.5" y="867.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="425.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="422.5" y="851.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="425.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="422.5" y="835.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="425.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (57 samples, 7.12%)</title><rect x="424.0" y="947.0" width="83.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.0" y="958.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.75%)</title><rect x="424.0" y="931.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="427.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.75%)</title><rect x="424.0" y="915.0" width="8.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="427.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.75%)</title><rect x="432.8" y="931.0" width="8.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="435.8" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.75%)</title><rect x="432.8" y="915.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.8" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.75%)</title><rect x="432.8" y="899.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.37%)</title><rect x="437.2" y="883.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.37%)</title><rect x="441.6" y="931.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.37%)</title><rect x="441.6" y="915.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (42 samples, 5.24%)</title><rect x="446.1" y="931.0" width="61.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.1" y="942.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (42 samples, 5.24%)</title><rect x="446.1" y="915.0" width="61.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.1" y="926.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.87%)</title><rect x="450.5" y="899.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.50%)</title><rect x="450.5" y="883.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.50%)</title><rect x="450.5" y="867.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="453.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.50%)</title><rect x="450.5" y="851.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="453.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.50%)</title><rect x="450.5" y="835.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="453.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.12%)</title><rect x="454.9" y="819.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="457.9" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.25%)</title><rect x="456.4" y="883.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="459.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.25%)</title><rect x="456.4" y="867.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="459.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.25%)</title><rect x="456.4" y="851.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.25%)</title><rect x="456.4" y="835.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.4" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.25%)</title><rect x="456.4" y="819.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="459.3" y="883.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="462.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.12%)</title><rect x="459.3" y="867.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="462.3" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (32 samples, 4.00%)</title><rect x="460.8" y="899.0" width="47.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="463.8" y="910.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (32 samples, 4.00%)</title><rect x="460.8" y="883.0" width="47.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="463.8" y="894.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (32 samples, 4.00%)</title><rect x="460.8" y="867.0" width="47.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.8" y="878.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 2.00%)</title><rect x="460.8" y="851.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="463.8" y="862.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.50%)</title><rect x="460.8" y="835.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.12%)</title><rect x="466.7" y="835.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.75%)</title><rect x="468.2" y="835.0" width="8.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.75%)</title><rect x="468.2" y="819.0" width="8.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="471.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.75%)</title><rect x="468.2" y="803.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.37%)</title><rect x="468.2" y="787.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="471.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.37%)</title><rect x="472.6" y="787.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.50%)</title><rect x="477.0" y="835.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="480.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.12%)</title><rect x="481.4" y="819.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="484.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.12%)</title><rect x="481.4" y="803.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="484.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.12%)</title><rect x="482.9" y="835.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="485.9" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.62%)</title><rect x="484.4" y="851.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.50%)</title><rect x="485.8" y="835.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="488.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.50%)</title><rect x="485.8" y="819.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.50%)</title><rect x="485.8" y="803.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="488.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (4 samples, 0.50%)</title><rect x="485.8" y="787.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="488.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (4 samples, 0.50%)</title><rect x="485.8" y="771.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (4 samples, 0.50%)</title><rect x="485.8" y="755.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.8" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (4 samples, 0.50%)</title><rect x="485.8" y="739.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="488.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (4 samples, 0.50%)</title><rect x="485.8" y="723.0" width="5.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="488.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.12%)</title><rect x="491.7" y="851.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.50%)</title><rect x="493.2" y="851.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.2" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.50%)</title><rect x="493.2" y="835.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.2" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.50%)</title><rect x="493.2" y="819.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.2" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.50%)</title><rect x="493.2" y="803.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.2" y="814.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.50%)</title><rect x="493.2" y="787.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="496.2" y="798.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.50%)</title><rect x="493.2" y="771.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.50%)</title><rect x="493.2" y="755.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.37%)</title><rect x="499.1" y="851.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="502.1" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.37%)</title><rect x="499.1" y="835.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="502.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="499.1" y="819.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.25%)</title><rect x="500.6" y="819.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.6" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.25%)</title><rect x="500.6" y="803.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.25%)</title><rect x="500.6" y="787.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.37%)</title><rect x="503.5" y="851.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="506.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (26 samples, 3.25%)</title><rect x="507.9" y="947.0" width="38.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.9" y="958.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (26 samples, 3.25%)</title><rect x="507.9" y="931.0" width="38.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="510.9" y="942.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (26 samples, 3.25%)</title><rect x="507.9" y="915.0" width="38.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.9" y="926.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (26 samples, 3.25%)</title><rect x="507.9" y="899.0" width="38.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.9" y="910.0">com..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (26 samples, 3.25%)</title><rect x="507.9" y="883.0" width="38.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="510.9" y="894.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.12%)</title><rect x="546.2" y="995.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.2" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="546.2" y="979.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="549.2" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="546.2" y="963.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="549.2" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="546.2" y="947.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="549.2" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="546.2" y="931.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="549.2" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="546.2" y="915.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="549.2" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="546.2" y="899.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="549.2" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="546.2" y="883.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="549.2" y="894.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="546.2" y="867.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="549.2" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="546.2" y="851.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="549.2" y="862.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="546.2" y="835.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="549.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (179 samples, 22.35%)</title><rect x="547.7" y="1043.0" width="263.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.7" y="1054.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.12%)</title><rect x="550.6" y="1027.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.6" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.12%)</title><rect x="550.6" y="1011.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.6" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.12%)</title><rect x="550.6" y="995.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="553.6" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.12%)</title><rect x="550.6" y="979.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (28 samples, 3.50%)</title><rect x="552.1" y="1027.0" width="41.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="555.1" y="1038.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (28 samples, 3.50%)</title><rect x="552.1" y="1011.0" width="41.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.1" y="1022.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (28 samples, 3.50%)</title><rect x="552.1" y="995.0" width="41.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="555.1" y="1006.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 2.50%)</title><rect x="553.6" y="979.0" width="29.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="556.6" y="990.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 1.37%)</title><rect x="566.9" y="963.0" width="16.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.9" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 1.37%)</title><rect x="566.9" y="947.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="569.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 0.87%)</title><rect x="583.1" y="979.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="586.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.87%)</title><rect x="583.1" y="963.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="586.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.25%)</title><rect x="583.1" y="947.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="586.1" y="958.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.25%)</title><rect x="583.1" y="931.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.1" y="942.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.25%)</title><rect x="583.1" y="915.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.62%)</title><rect x="586.0" y="947.0" width="7.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="589.0" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskData (2 samples, 0.25%)</title><rect x="593.4" y="1027.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.12%)</title><rect x="594.8" y="1011.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="597.8" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.37%)</title><rect x="596.3" y="1027.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="599.3" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.37%)</title><rect x="596.3" y="1011.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="599.3" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (85 samples, 10.61%)</title><rect x="600.7" y="1027.0" width="125.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="603.7" y="1038.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (73 samples, 9.11%)</title><rect x="600.7" y="1011.0" width="107.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="603.7" y="1022.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (18 samples, 2.25%)</title><rect x="618.4" y="995.0" width="26.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="621.4" y="1006.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 0.62%)</title><rect x="631.7" y="979.0" width="7.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="634.7" y="990.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.62%)</title><rect x="631.7" y="963.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.7" y="974.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.62%)</title><rect x="631.7" y="947.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="634.7" y="958.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.62%)</title><rect x="631.7" y="931.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="634.7" y="942.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.12%)</title><rect x="637.6" y="915.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="640.6" y="926.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="639.0" y="979.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="642.0" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.37%)</title><rect x="640.5" y="979.0" width="4.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="643.5" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (43 samples, 5.37%)</title><rect x="644.9" y="995.0" width="63.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.9" y="1006.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (40 samples, 4.99%)</title><rect x="649.4" y="979.0" width="58.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.4" y="990.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 2.75%)</title><rect x="649.4" y="963.0" width="32.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.4" y="974.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.50%)</title><rect x="664.1" y="947.0" width="17.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="667.1" y="958.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.50%)</title><rect x="664.1" y="931.0" width="17.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="667.1" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (18 samples, 2.25%)</title><rect x="681.8" y="963.0" width="26.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="684.8" y="974.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 2.25%)</title><rect x="681.8" y="947.0" width="26.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="684.8" y="958.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 2.25%)</title><rect x="681.8" y="931.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="684.8" y="942.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 1.12%)</title><rect x="693.5" y="915.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="696.5" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="705.3" y="899.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="708.3" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="705.3" y="883.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="708.3" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="705.3" y="867.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="708.3" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="705.3" y="851.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="708.3" y="862.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="705.3" y="835.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="708.3" y="846.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.12%)</title><rect x="706.8" y="915.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="709.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 1.50%)</title><rect x="708.3" y="1011.0" width="17.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="711.3" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 1.50%)</title><rect x="708.3" y="995.0" width="17.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.62%)</title><rect x="708.3" y="979.0" width="7.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.3" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.25%)</title><rect x="708.3" y="963.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="711.3" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.37%)</title><rect x="711.2" y="963.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="714.2" y="974.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (7 samples, 0.87%)</title><rect x="715.6" y="979.0" width="10.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.6" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.87%)</title><rect x="715.6" y="963.0" width="10.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="718.6" y="974.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.50%)</title><rect x="720.1" y="947.0" width="5.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="723.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (34 samples, 4.24%)</title><rect x="726.0" y="1027.0" width="50.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.0" y="1038.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (34 samples, 4.24%)</title><rect x="726.0" y="1011.0" width="50.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="729.0" y="1022.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.62%)</title><rect x="737.7" y="995.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (8 samples, 1.00%)</title><rect x="745.1" y="995.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (8 samples, 1.00%)</title><rect x="745.1" y="979.0" width="11.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="748.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 1.00%)</title><rect x="745.1" y="963.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (8 samples, 1.00%)</title><rect x="745.1" y="947.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.1" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (8 samples, 1.00%)</title><rect x="745.1" y="931.0" width="11.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="748.1" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (8 samples, 1.00%)</title><rect x="745.1" y="915.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="748.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.12%)</title><rect x="756.9" y="995.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="759.9" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.12%)</title><rect x="756.9" y="979.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.9" y="990.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (8 samples, 1.00%)</title><rect x="758.4" y="995.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="761.4" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (7 samples, 0.87%)</title><rect x="759.8" y="979.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="762.8" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.75%)</title><rect x="761.3" y="963.0" width="8.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="764.3" y="974.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.62%)</title><rect x="762.8" y="947.0" width="7.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="765.8" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="770.1" y="995.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="770.1" y="979.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="773.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.25%)</title><rect x="773.1" y="995.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="776.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.25%)</title><rect x="773.1" y="979.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.25%)</title><rect x="773.1" y="963.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="776.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.25%)</title><rect x="773.1" y="947.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="776.1" y="958.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="774.6" y="931.0" width="1.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="777.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.50%)</title><rect x="776.0" y="1027.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (3 samples, 0.37%)</title><rect x="776.0" y="1011.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="779.0" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.37%)</title><rect x="776.0" y="995.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="779.0" y="1006.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.37%)</title><rect x="776.0" y="979.0" width="4.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="779.0" y="990.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.12%)</title><rect x="780.5" y="1011.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="783.5" y="1022.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.12%)</title><rect x="780.5" y="995.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="783.5" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (5 samples, 0.62%)</title><rect x="781.9" y="1027.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="784.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (5 samples, 0.62%)</title><rect x="781.9" y="1011.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="784.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.62%)</title><rect x="781.9" y="995.0" width="7.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="784.9" y="1006.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.62%)</title><rect x="781.9" y="979.0" width="7.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="784.9" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.87%)</title><rect x="789.3" y="1027.0" width="22.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="792.3" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.87%)</title><rect x="789.3" y="1011.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="792.3" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.87%)</title><rect x="789.3" y="995.0" width="22.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="792.3" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.37%)</title><rect x="789.3" y="979.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="792.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/514999382.accept (2 samples, 0.25%)</title><rect x="790.8" y="963.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="793.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.37%)</title><rect x="793.7" y="979.0" width="16.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="796.7" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/514999382.accept (11 samples, 1.37%)</title><rect x="793.7" y="963.0" width="16.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="796.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (11 samples, 1.37%)</title><rect x="793.7" y="947.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="796.7" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (11 samples, 1.37%)</title><rect x="793.7" y="931.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="796.7" y="942.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 1.37%)</title><rect x="793.7" y="915.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.7" y="926.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 1.37%)</title><rect x="793.7" y="899.0" width="16.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="796.7" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.75%)</title><rect x="799.6" y="883.0" width="8.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="802.6" y="894.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.75%)</title><rect x="799.6" y="867.0" width="8.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="802.6" y="878.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="808.5" y="883.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="811.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="809.9" y="979.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.9" y="990.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.37%)</title><rect x="811.4" y="1043.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="814.4" y="1054.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.37%)</title><rect x="811.4" y="1027.0" width="4.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="814.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (10 samples, 1.25%)</title><rect x="815.8" y="1107.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="818.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 1.25%)</title><rect x="815.8" y="1091.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 1.25%)</title><rect x="815.8" y="1075.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="818.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 1.25%)</title><rect x="815.8" y="1059.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="818.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (200 samples, 24.97%)</title><rect x="830.5" y="1107.0" width="294.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.5" y="1118.0">java/util/concurrent/ThreadPoolExecutor...</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (195 samples, 24.34%)</title><rect x="837.9" y="1091.0" width="287.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="840.9" y="1102.0">java/util/concurrent/LinkedBlockingQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (159 samples, 19.85%)</title><rect x="837.9" y="1075.0" width="234.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="840.9" y="1086.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.62%)</title><rect x="843.8" y="1059.0" width="19.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="846.8" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.75%)</title><rect x="863.0" y="1059.0" width="8.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="866.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.75%)</title><rect x="863.0" y="1043.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="866.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (136 samples, 16.98%)</title><rect x="871.8" y="1059.0" width="200.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="874.8" y="1070.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (136 samples, 16.98%)</title><rect x="871.8" y="1043.0" width="200.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.8" y="1054.0">jdk/internal/misc/Unsafe.p..</text>
</g>
<g>
<title>Unsafe_Park (133 samples, 16.60%)</title><rect x="874.7" y="1027.0" width="196.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="877.7" y="1038.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 1.37%)</title><rect x="879.2" y="1011.0" width="16.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="882.2" y="1022.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.37%)</title><rect x="885.1" y="995.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.1" y="1006.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="888.0" y="979.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="891.0" y="990.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.25%)</title><rect x="889.5" y="995.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="892.5" y="1006.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.25%)</title><rect x="892.4" y="995.0" width="3.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="895.4" y="1006.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="895.4" y="1011.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="898.4" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.50%)</title><rect x="896.8" y="1011.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.8" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.25%)</title><rect x="902.7" y="1011.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="905.7" y="1022.0"></text>
</g>
<g>
<title>__lll_unlock_wake (41 samples, 5.12%)</title><rect x="905.7" y="1011.0" width="60.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="908.7" y="1022.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (54 samples, 6.74%)</title><rect x="966.1" y="1011.0" width="79.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="969.1" y="1022.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.62%)</title><rect x="1045.6" y="1011.0" width="7.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1048.6" y="1022.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.12%)</title><rect x="1053.0" y="1011.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1056.0" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.25%)</title><rect x="1054.5" y="1011.0" width="2.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1057.5" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1057.4" y="1011.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1060.4" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.62%)</title><rect x="1058.9" y="1011.0" width="7.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1061.9" y="1022.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.25%)</title><rect x="1066.3" y="1011.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1069.3" y="1022.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="1069.2" y="1011.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1070.7" y="1027.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1073.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.12%)</title><rect x="1072.1" y="1075.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1075.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 1.00%)</title><rect x="1073.6" y="1075.0" width="11.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1076.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 1.00%)</title><rect x="1073.6" y="1059.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1076.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 1.00%)</title><rect x="1073.6" y="1043.0" width="11.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1076.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 3.37%)</title><rect x="1085.4" y="1075.0" width="39.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1088.4" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 3.37%)</title><rect x="1085.4" y="1059.0" width="39.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1088.4" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 3.37%)</title><rect x="1085.4" y="1043.0" width="39.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1088.4" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 3.37%)</title><rect x="1085.4" y="1027.0" width="39.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1088.4" y="1038.0">jav..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1125.2" y="1155.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$MemberState.hasNotJoinedGroup (1 samples, 0.12%)</title><rect x="1125.2" y="1139.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1128.2" y="1150.0"></text>
</g>
<g>
<title>start_thread (43 samples, 5.37%)</title><rect x="1126.7" y="1155.0" width="63.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1129.7" y="1166.0">start_t..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (43 samples, 5.37%)</title><rect x="1126.7" y="1139.0" width="63.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1129.7" y="1150.0">thread_..</text>
</g>
<g>
<title>Thread::call_run() (43 samples, 5.37%)</title><rect x="1126.7" y="1123.0" width="63.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.7" y="1134.0">Thread:..</text>
</g>
<g>
<title>GangWorker::loop() (5 samples, 0.62%)</title><rect x="1126.7" y="1107.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1129.7" y="1118.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1126.7" y="1091.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.7" y="1102.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.12%)</title><rect x="1126.7" y="1075.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.7" y="1086.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.12%)</title><rect x="1126.7" y="1059.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.7" y="1070.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.50%)</title><rect x="1128.1" y="1091.0" width="5.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.1" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1128.1" y="1075.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.1" y="1086.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1128.1" y="1059.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.1" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.12%)</title><rect x="1128.1" y="1043.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1131.1" y="1054.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.12%)</title><rect x="1128.1" y="1027.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="1038.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.12%)</title><rect x="1128.1" y="1011.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.1" y="1022.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.12%)</title><rect x="1128.1" y="995.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.1" y="1006.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.12%)</title><rect x="1128.1" y="979.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1131.1" y="990.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.37%)</title><rect x="1129.6" y="1075.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.6" y="1086.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.12%)</title><rect x="1129.6" y="1059.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.6" y="1070.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.25%)</title><rect x="1131.1" y="1059.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.1" y="1070.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.25%)</title><rect x="1131.1" y="1043.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="1054.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.25%)</title><rect x="1131.1" y="1027.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.1" y="1038.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.12%)</title><rect x="1131.1" y="1011.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.1" y="1022.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (1 samples, 0.12%)</title><rect x="1131.1" y="995.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.1" y="1006.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.12%)</title><rect x="1131.1" y="979.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.1" y="990.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.12%)</title><rect x="1131.1" y="963.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.1" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1132.5" y="1011.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.5" y="1022.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (37 samples, 4.62%)</title><rect x="1134.0" y="1107.0" width="54.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.0" y="1118.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (37 samples, 4.62%)</title><rect x="1134.0" y="1091.0" width="54.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="1102.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (37 samples, 4.62%)</title><rect x="1134.0" y="1075.0" width="54.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.0" y="1086.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (36 samples, 4.49%)</title><rect x="1134.0" y="1059.0" width="53.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.0" y="1070.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (36 samples, 4.49%)</title><rect x="1134.0" y="1043.0" width="53.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.0" y="1054.0">Compi..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.12%)</title><rect x="1134.0" y="1027.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.0" y="1038.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.12%)</title><rect x="1134.0" y="1011.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1137.0" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1134.0" y="995.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1134.0" y="979.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1134.0" y="963.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1134.0" y="947.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1137.0" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1134.0" y="931.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.0" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1134.0" y="915.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1137.0" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1134.0" y="899.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.0" y="910.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1134.0" y="883.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.0" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1134.0" y="867.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.0" y="878.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.12%)</title><rect x="1134.0" y="851.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.0" y="862.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (22 samples, 2.75%)</title><rect x="1135.5" y="1027.0" width="32.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="1038.0">Co..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.25%)</title><rect x="1135.5" y="1011.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.5" y="1022.0"></text>
</g>
<g>
<title>ConvI2LNode::ideal_reg() const (1 samples, 0.12%)</title><rect x="1135.5" y="995.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.5" y="1006.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.12%)</title><rect x="1137.0" y="995.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.0" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.12%)</title><rect x="1138.4" y="1011.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.4" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.12%)</title><rect x="1138.4" y="995.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.4" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.37%)</title><rect x="1139.9" y="1011.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.9" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.37%)</title><rect x="1139.9" y="995.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.9" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1139.9" y="979.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.9" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1141.4" y="979.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.4" y="990.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.12%)</title><rect x="1141.4" y="963.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.4" y="974.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.12%)</title><rect x="1142.9" y="979.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.9" y="990.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.12%)</title><rect x="1142.9" y="963.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.9" y="974.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (1 samples, 0.12%)</title><rect x="1144.3" y="1011.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.3" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (15 samples, 1.87%)</title><rect x="1145.8" y="1011.0" width="22.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.8" y="1022.0">P..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.25%)</title><rect x="1145.8" y="995.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="1006.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.12%)</title><rect x="1147.3" y="979.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.37%)</title><rect x="1148.8" y="995.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.8" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.12%)</title><rect x="1151.7" y="979.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.7" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.12%)</title><rect x="1153.2" y="995.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.2" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.12%)</title><rect x="1153.2" y="979.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.2" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.37%)</title><rect x="1154.6" y="995.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.6" y="1006.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1157.6" y="979.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.6" y="990.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.37%)</title><rect x="1159.1" y="995.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.1" y="1006.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1162.0" y="979.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1165.0" y="990.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.12%)</title><rect x="1163.5" y="995.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.5" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.25%)</title><rect x="1165.0" y="995.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.0" y="1006.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1166.4" y="979.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.4" y="990.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1166.4" y="963.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.4" y="974.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 1.12%)</title><rect x="1167.9" y="1027.0" width="13.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.9" y="1038.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (2 samples, 0.25%)</title><rect x="1167.9" y="1011.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.25%)</title><rect x="1167.9" y="995.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1167.9" y="979.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.12%)</title><rect x="1167.9" y="963.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.9" y="974.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.12%)</title><rect x="1167.9" y="947.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.9" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.12%)</title><rect x="1169.4" y="979.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.4" y="990.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.12%)</title><rect x="1169.4" y="963.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.4" y="974.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.12%)</title><rect x="1169.4" y="947.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.25%)</title><rect x="1170.8" y="1011.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.25%)</title><rect x="1170.8" y="995.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) [clone .isra.198] (1 samples, 0.12%)</title><rect x="1170.8" y="979.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var(Node*, PointsToNode::EscapeState) [clone .part.173] (1 samples, 0.12%)</title><rect x="1170.8" y="963.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.8" y="974.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.12%)</title><rect x="1170.8" y="947.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.12%)</title><rect x="1172.3" y="979.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.3" y="990.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.12%)</title><rect x="1172.3" y="963.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.3" y="974.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.12%)</title><rect x="1172.3" y="947.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.3" y="958.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.12%)</title><rect x="1172.3" y="931.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.3" y="942.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.12%)</title><rect x="1172.3" y="915.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.3" y="926.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.70] (1 samples, 0.12%)</title><rect x="1172.3" y="899.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.3" y="910.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.12%)</title><rect x="1172.3" y="883.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="894.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.12%)</title><rect x="1172.3" y="867.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="878.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.12%)</title><rect x="1172.3" y="851.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="862.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.12%)</title><rect x="1172.3" y="835.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="846.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.70] (1 samples, 0.12%)</title><rect x="1172.3" y="819.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.3" y="830.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.12%)</title><rect x="1172.3" y="803.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="814.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.12%)</title><rect x="1172.3" y="787.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="798.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.12%)</title><rect x="1172.3" y="771.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.3" y="782.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.12%)</title><rect x="1172.3" y="755.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>ReceiverTypeData::cell_count() const (1 samples, 0.12%)</title><rect x="1172.3" y="739.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.12%)</title><rect x="1173.8" y="1011.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="1022.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1173.8" y="995.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="1006.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.12%)</title><rect x="1173.8" y="979.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="990.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.12%)</title><rect x="1173.8" y="963.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.12%)</title><rect x="1173.8" y="947.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="958.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1173.8" y="931.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="942.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1173.8" y="915.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.8" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (1 samples, 0.12%)</title><rect x="1175.3" y="1011.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.12%)</title><rect x="1175.3" y="995.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.3" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.12%)</title><rect x="1176.7" y="1011.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.12%)</title><rect x="1176.7" y="995.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.7" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.25%)</title><rect x="1178.2" y="1011.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.25%)</title><rect x="1178.2" y="995.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1178.2" y="979.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="990.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.12%)</title><rect x="1178.2" y="963.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="974.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.12%)</title><rect x="1178.2" y="947.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.2" y="958.0"></text>
</g>
<g>
<title>ThreadCritical::ThreadCritical() (1 samples, 0.12%)</title><rect x="1178.2" y="931.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.2" y="942.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1179.7" y="979.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.12%)</title><rect x="1179.7" y="963.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="947.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="931.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="915.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="899.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.7" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="883.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.7" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="867.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="851.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.7" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="835.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="819.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1179.7" y="803.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1179.7" y="787.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.50%)</title><rect x="1181.2" y="1027.0" width="5.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.50%)</title><rect x="1181.2" y="1011.0" width="5.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.2" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.50%)</title><rect x="1181.2" y="995.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.50%)</title><rect x="1181.2" y="979.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.50%)</title><rect x="1181.2" y="963.0" width="5.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.50%)</title><rect x="1181.2" y="947.0" width="5.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.2" y="958.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1181.2" y="931.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="942.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1181.2" y="915.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.2" y="926.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1181.2" y="899.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.2" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1181.2" y="883.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1181.2" y="867.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1181.2" y="851.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.2" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1181.2" y="835.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1181.2" y="819.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1181.2" y="803.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.2" y="814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.12%)</title><rect x="1181.2" y="787.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1181.2" y="771.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.2" y="782.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1181.2" y="755.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.2" y="766.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.12%)</title><rect x="1181.2" y="739.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.2" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.6" y="931.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.6" y="915.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.6" y="899.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.6" y="883.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.6" y="867.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1182.6" y="851.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.6" y="835.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.6" y="819.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.6" y="803.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.6" y="787.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.6" y="771.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.25%)</title><rect x="1182.6" y="755.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.25%)</title><rect x="1182.6" y="739.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.6" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.25%)</title><rect x="1182.6" y="723.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.25%)</title><rect x="1182.6" y="707.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.25%)</title><rect x="1182.6" y="691.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.12%)</title><rect x="1182.6" y="675.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.6" y="686.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.12%)</title><rect x="1182.6" y="659.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.6" y="670.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.12%)</title><rect x="1182.6" y="643.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="654.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.12%)</title><rect x="1182.6" y="627.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.6" y="638.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.12%)</title><rect x="1182.6" y="611.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.1" y="675.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.1" y="659.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.1" y="643.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1184.1" y="627.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.1" y="611.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.1" y="595.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.1" y="579.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.1" y="563.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.1" y="547.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1184.1" y="531.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.1" y="515.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.1" y="499.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.1" y="483.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.1" y="467.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.1" y="451.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1184.1" y="435.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.1" y="419.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.1" y="403.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.1" y="387.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.1" y="371.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="355.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="339.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.12%)</title><rect x="1184.1" y="323.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="307.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1184.1" y="291.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1184.1" y="275.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1184.1" y="259.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1184.1" y="243.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1184.1" y="227.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1184.1" y="211.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1184.1" y="195.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="179.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1184.1" y="163.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1184.1" y="147.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1184.1" y="131.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.1" y="142.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.12%)</title><rect x="1184.1" y="115.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.12%)</title><rect x="1184.1" y="99.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="110.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.12%)</title><rect x="1184.1" y="83.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.1" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.12%)</title><rect x="1184.1" y="67.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="78.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.12%)</title><rect x="1184.1" y="51.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="62.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.12%)</title><rect x="1184.1" y="35.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.12%)</title><rect x="1185.6" y="755.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.12%)</title><rect x="1185.6" y="739.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.6" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.1" y="1059.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="1070.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.1" y="1043.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="1054.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.12%)</title><rect x="1187.1" y="1027.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="1038.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.12%)</title><rect x="1187.1" y="1011.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="1022.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.12%)</title><rect x="1187.1" y="995.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.12%)</title><rect x="1187.1" y="979.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="990.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.12%)</title><rect x="1187.1" y="963.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="974.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.12%)</title><rect x="1187.1" y="947.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="958.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.12%)</title><rect x="1187.1" y="931.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.12%)</title><rect x="1187.1" y="915.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="926.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.12%)</title><rect x="1187.1" y="899.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="910.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.12%)</title><rect x="1188.5" y="1107.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.5" y="1118.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.12%)</title><rect x="1188.5" y="1091.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.5" y="1102.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.12%)</title><rect x="1188.5" y="1075.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="1086.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.12%)</title><rect x="1188.5" y="1059.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.5" y="1070.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.12%)</title><rect x="1188.5" y="1043.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.5" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.12%)</title><rect x="1188.5" y="1027.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.5" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (1 samples, 0.12%)</title><rect x="1188.5" y="1011.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="1022.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.12%)</title><rect x="1188.5" y="995.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.5" y="1006.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="1188.5" y="979.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.5" y="990.0"></text>
</g>
</g>
</svg>
