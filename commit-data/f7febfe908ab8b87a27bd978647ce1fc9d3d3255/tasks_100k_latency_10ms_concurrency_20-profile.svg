<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1558" onload="init(evt)" viewBox="0 0 1200 1558" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1541"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1541"> </text>
<g id="frames">
<g>
<title>all (194 samples, 100.00%)</title><rect x="10.0" y="1507.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1518.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 7.22%)</title><rect x="10.0" y="1491.0" width="85.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1502.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 7.22%)</title><rect x="10.0" y="1475.0" width="85.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1486.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (14 samples, 7.22%)</title><rect x="10.0" y="1459.0" width="85.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1470.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.52%)</title><rect x="10.0" y="1443.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pause (1 samples, 0.52%)</title><rect x="10.0" y="1427.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.pause (1 samples, 0.52%)</title><rect x="10.0" y="1411.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.55%)</title><rect x="16.1" y="1443.0" width="18.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/944086822.accept (3 samples, 1.55%)</title><rect x="16.1" y="1427.0" width="18.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.55%)</title><rect x="16.1" y="1411.0" width="18.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.1" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.52%)</title><rect x="16.1" y="1395.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.52%)</title><rect x="16.1" y="1379.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.52%)</title><rect x="16.1" y="1363.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.52%)</title><rect x="16.1" y="1347.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.52%)</title><rect x="16.1" y="1331.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.52%)</title><rect x="16.1" y="1315.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.52%)</title><rect x="16.1" y="1299.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.52%)</title><rect x="16.1" y="1283.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.52%)</title><rect x="16.1" y="1267.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.52%)</title><rect x="22.2" y="1395.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.52%)</title><rect x="22.2" y="1379.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="28.2" y="1395.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.2" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="28.2" y="1379.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="28.2" y="1363.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.2" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="28.2" y="1347.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="28.2" y="1331.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.15%)</title><rect x="34.3" y="1443.0" width="60.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.3" y="1454.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.15%)</title><rect x="34.3" y="1427.0" width="60.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="37.3" y="1438.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 3.61%)</title><rect x="40.4" y="1411.0" width="42.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.4" y="1422.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.03%)</title><rect x="40.4" y="1395.0" width="12.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.03%)</title><rect x="40.4" y="1379.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.03%)</title><rect x="40.4" y="1363.0" width="12.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.03%)</title><rect x="40.4" y="1347.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.03%)</title><rect x="40.4" y="1331.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.52%)</title><rect x="40.4" y="1315.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.52%)</title><rect x="40.4" y="1299.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.52%)</title><rect x="40.4" y="1283.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.52%)</title><rect x="40.4" y="1267.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.52%)</title><rect x="40.4" y="1251.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.4" y="1262.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.52%)</title><rect x="40.4" y="1235.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.4" y="1246.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.52%)</title><rect x="40.4" y="1219.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.4" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.52%)</title><rect x="40.4" y="1203.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.4" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="40.4" y="1187.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.4" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.52%)</title><rect x="40.4" y="1171.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.4" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.52%)</title><rect x="40.4" y="1155.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.52%)</title><rect x="40.4" y="1139.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.4" y="1150.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="40.4" y="1123.0" width="6.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="43.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.52%)</title><rect x="46.5" y="1315.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.52%)</title><rect x="46.5" y="1299.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.52%)</title><rect x="46.5" y="1283.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="49.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.52%)</title><rect x="46.5" y="1267.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.52%)</title><rect x="46.5" y="1251.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="49.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.52%)</title><rect x="46.5" y="1235.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="49.5" y="1246.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.52%)</title><rect x="46.5" y="1219.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.5" y="1230.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.52%)</title><rect x="46.5" y="1203.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.5" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.ensureWriteOpen (1 samples, 0.52%)</title><rect x="46.5" y="1187.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="49.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 2.58%)</title><rect x="52.6" y="1395.0" width="30.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.6" y="1406.0">or..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.52%)</title><rect x="52.6" y="1379.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.6" y="1390.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.52%)</title><rect x="52.6" y="1363.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="55.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.06%)</title><rect x="58.7" y="1379.0" width="24.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.7" y="1390.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (4 samples, 2.06%)</title><rect x="58.7" y="1363.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.7" y="1374.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.06%)</title><rect x="58.7" y="1347.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.7" y="1358.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.55%)</title><rect x="58.7" y="1331.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.52%)</title><rect x="70.8" y="1315.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.52%)</title><rect x="70.8" y="1299.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.52%)</title><rect x="70.8" y="1283.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.52%)</title><rect x="70.8" y="1267.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.52%)</title><rect x="70.8" y="1251.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.52%)</title><rect x="70.8" y="1235.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.52%)</title><rect x="70.8" y="1219.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.52%)</title><rect x="76.9" y="1331.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="79.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.52%)</title><rect x="76.9" y="1315.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.9" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.52%)</title><rect x="76.9" y="1299.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.9" y="1310.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.52%)</title><rect x="76.9" y="1283.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.9" y="1294.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="76.9" y="1267.0" width="6.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="79.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.03%)</title><rect x="83.0" y="1411.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="86.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.03%)</title><rect x="83.0" y="1395.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.52%)</title><rect x="83.0" y="1379.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.52%)</title><rect x="83.0" y="1363.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.52%)</title><rect x="89.1" y="1379.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.52%)</title><rect x="89.1" y="1363.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.52%)</title><rect x="89.1" y="1347.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.52%)</title><rect x="89.1" y="1331.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.52%)</title><rect x="89.1" y="1315.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="89.1" y="1299.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.52%)</title><rect x="89.1" y="1283.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="89.1" y="1267.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.run (78 samples, 40.21%)</title><rect x="95.2" y="1491.0" width="474.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.2" y="1502.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (78 samples, 40.21%)</title><rect x="95.2" y="1475.0" width="474.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.2" y="1486.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (78 samples, 40.21%)</title><rect x="95.2" y="1459.0" width="474.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.2" y="1470.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1675455308.run (75 samples, 38.66%)</title><rect x="101.2" y="1443.0" width="456.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="104.2" y="1454.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$81 (75 samples, 38.66%)</title><rect x="101.2" y="1427.0" width="456.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="104.2" y="1438.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (75 samples, 38.66%)</title><rect x="101.2" y="1411.0" width="456.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.2" y="1422.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (75 samples, 38.66%)</title><rect x="101.2" y="1395.0" width="456.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="104.2" y="1406.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (11 samples, 5.67%)</title><rect x="113.4" y="1379.0" width="66.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.4" y="1390.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 3.61%)</title><rect x="137.7" y="1363.0" width="42.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.7" y="1374.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 3.61%)</title><rect x="137.7" y="1347.0" width="42.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.7" y="1358.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 3.61%)</title><rect x="137.7" y="1331.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="140.7" y="1342.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="137.7" y="1315.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="137.7" y="1299.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.7" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 3.09%)</title><rect x="143.8" y="1315.0" width="36.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.8" y="1326.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$370/1561495494.accept (6 samples, 3.09%)</title><rect x="143.8" y="1299.0" width="36.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="146.8" y="1310.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (6 samples, 3.09%)</title><rect x="143.8" y="1283.0" width="36.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="146.8" y="1294.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 3.09%)</title><rect x="143.8" y="1267.0" width="36.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="146.8" y="1278.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 3.09%)</title><rect x="143.8" y="1251.0" width="36.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.8" y="1262.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 3.09%)</title><rect x="143.8" y="1235.0" width="36.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="146.8" y="1246.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.52%)</title><rect x="143.8" y="1219.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.52%)</title><rect x="143.8" y="1203.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$357/735678647.accept (1 samples, 0.52%)</title><rect x="143.8" y="1187.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.58%)</title><rect x="149.9" y="1219.0" width="30.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.9" y="1230.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$357/735678647.accept (1 samples, 0.52%)</title><rect x="168.1" y="1203.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="171.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$47 (1 samples, 0.52%)</title><rect x="168.1" y="1187.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="171.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$356/1031212056.accept (1 samples, 0.52%)</title><rect x="174.2" y="1203.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="177.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (14 samples, 7.22%)</title><rect x="180.3" y="1379.0" width="85.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.3" y="1390.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (14 samples, 7.22%)</title><rect x="180.3" y="1363.0" width="85.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.3" y="1374.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (14 samples, 7.22%)</title><rect x="180.3" y="1347.0" width="85.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.3" y="1358.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.22%)</title><rect x="180.3" y="1331.0" width="85.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.3" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.22%)</title><rect x="180.3" y="1315.0" width="85.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="183.3" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 7.22%)</title><rect x="180.3" y="1299.0" width="85.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="183.3" y="1310.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.09%)</title><rect x="180.3" y="1283.0" width="36.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.3" y="1294.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (2 samples, 1.03%)</title><rect x="180.3" y="1267.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.3" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (2 samples, 1.03%)</title><rect x="180.3" y="1251.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (2 samples, 1.03%)</title><rect x="180.3" y="1235.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (2 samples, 1.03%)</title><rect x="180.3" y="1219.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.06%)</title><rect x="192.5" y="1267.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="195.5" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.52%)</title><rect x="210.7" y="1251.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.52%)</title><rect x="210.7" y="1235.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="213.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.52%)</title><rect x="210.7" y="1219.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 4.12%)</title><rect x="216.8" y="1283.0" width="48.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="219.8" y="1294.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.52%)</title><rect x="216.8" y="1267.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="219.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.52%)</title><rect x="216.8" y="1251.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.8" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.52%)</title><rect x="216.8" y="1235.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="219.8" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 1.03%)</title><rect x="222.9" y="1267.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 1.03%)</title><rect x="222.9" y="1251.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="225.9" y="1262.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.52%)</title><rect x="222.9" y="1235.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="225.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.52%)</title><rect x="229.0" y="1235.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="232.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.52%)</title><rect x="229.0" y="1219.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="232.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.52%)</title><rect x="229.0" y="1203.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (5 samples, 2.58%)</title><rect x="235.1" y="1267.0" width="30.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.1" y="1278.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.58%)</title><rect x="235.1" y="1251.0" width="30.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.1" y="1262.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.03%)</title><rect x="235.1" y="1235.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.52%)</title><rect x="241.1" y="1219.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="244.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.55%)</title><rect x="247.2" y="1235.0" width="18.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.55%)</title><rect x="247.2" y="1219.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.2" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.55%)</title><rect x="247.2" y="1203.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.03%)</title><rect x="247.2" y="1187.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 1.03%)</title><rect x="247.2" y="1171.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 1.03%)</title><rect x="247.2" y="1155.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.2" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 1.03%)</title><rect x="247.2" y="1139.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.52%)</title><rect x="253.3" y="1123.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.3" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.52%)</title><rect x="259.4" y="1187.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.52%)</title><rect x="259.4" y="1171.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.52%)</title><rect x="259.4" y="1155.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.52%)</title><rect x="259.4" y="1139.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.52%)</title><rect x="259.4" y="1123.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.4" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (47 samples, 24.23%)</title><rect x="265.5" y="1379.0" width="285.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.5" y="1390.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (3 samples, 1.55%)</title><rect x="271.5" y="1363.0" width="18.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.5" y="1374.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.55%)</title><rect x="271.5" y="1347.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.5" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.55%)</title><rect x="271.5" y="1331.0" width="18.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.5" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.55%)</title><rect x="271.5" y="1315.0" width="18.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.55%)</title><rect x="271.5" y="1299.0" width="18.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.5" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.03%)</title><rect x="277.6" y="1283.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.6" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (17 samples, 8.76%)</title><rect x="289.8" y="1363.0" width="103.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.8" y="1374.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (15 samples, 7.73%)</title><rect x="289.8" y="1347.0" width="91.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.8" y="1358.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 4.12%)</title><rect x="295.9" y="1331.0" width="48.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.9" y="1342.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.58%)</title><rect x="308.0" y="1315.0" width="30.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="311.0" y="1326.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.58%)</title><rect x="308.0" y="1299.0" width="30.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.0" y="1310.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.52%)</title><rect x="308.0" y="1283.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="311.0" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.55%)</title><rect x="314.1" y="1283.0" width="18.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.55%)</title><rect x="314.1" y="1267.0" width="18.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.1" y="1278.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.55%)</title><rect x="314.1" y="1251.0" width="18.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.1" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 1.03%)</title><rect x="314.1" y="1235.0" width="12.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="317.1" y="1246.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.52%)</title><rect x="314.1" y="1219.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="317.1" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.52%)</title><rect x="314.1" y="1203.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="317.1" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.52%)</title><rect x="320.2" y="1219.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="323.2" y="1230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.52%)</title><rect x="320.2" y="1203.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="323.2" y="1214.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.52%)</title><rect x="320.2" y="1187.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="323.2" y="1198.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.52%)</title><rect x="320.2" y="1171.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="323.2" y="1182.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.52%)</title><rect x="326.3" y="1235.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="329.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.52%)</title><rect x="332.4" y="1283.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="335.4" y="1294.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="338.5" y="1315.0" width="6.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="341.5" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.09%)</title><rect x="344.5" y="1331.0" width="36.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="347.5" y="1342.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.09%)</title><rect x="344.5" y="1315.0" width="36.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="347.5" y="1326.0">ch/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 3.09%)</title><rect x="344.5" y="1299.0" width="36.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.5" y="1310.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.06%)</title><rect x="356.7" y="1283.0" width="24.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.7" y="1294.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.06%)</title><rect x="356.7" y="1267.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="359.7" y="1278.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.03%)</title><rect x="362.8" y="1251.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="365.8" y="1262.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.52%)</title><rect x="374.9" y="1251.0" width="6.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="377.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 1.03%)</title><rect x="381.0" y="1347.0" width="12.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.0" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 1.03%)</title><rect x="381.0" y="1331.0" width="12.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="384.0" y="1342.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 1.03%)</title><rect x="381.0" y="1315.0" width="12.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.0" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.03%)</title><rect x="381.0" y="1299.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.0" y="1310.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="387.1" y="1283.0" width="6.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="390.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (25 samples, 12.89%)</title><rect x="393.2" y="1363.0" width="152.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.2" y="1374.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (25 samples, 12.89%)</title><rect x="393.2" y="1347.0" width="152.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="396.2" y="1358.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1387746646.process (21 samples, 10.82%)</title><rect x="393.2" y="1331.0" width="127.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="396.2" y="1342.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (21 samples, 10.82%)</title><rect x="393.2" y="1315.0" width="127.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.2" y="1326.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 10.82%)</title><rect x="393.2" y="1299.0" width="127.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="396.2" y="1310.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (20 samples, 10.31%)</title><rect x="393.2" y="1283.0" width="121.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.2" y="1294.0">com/linecorp/de..</text>
</g>
<g>
<title>java/lang/Thread.sleep (18 samples, 9.28%)</title><rect x="399.3" y="1267.0" width="109.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.3" y="1278.0">java/lang/Thr..</text>
</g>
<g>
<title>JVM_Sleep (17 samples, 8.76%)</title><rect x="405.4" y="1251.0" width="103.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="408.4" y="1262.0">JVM_Sleep</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.52%)</title><rect x="423.6" y="1235.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="426.6" y="1246.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (13 samples, 6.70%)</title><rect x="429.7" y="1235.0" width="79.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="432.7" y="1246.0">os::sleep..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="441.9" y="1219.0" width="6.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="444.9" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.55%)</title><rect x="447.9" y="1219.0" width="18.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="450.9" y="1230.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (4 samples, 2.06%)</title><rect x="466.2" y="1219.0" width="24.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="469.2" y="1230.0">_..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.52%)</title><rect x="490.5" y="1219.0" width="6.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="493.5" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.52%)</title><rect x="496.6" y="1219.0" width="6.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="499.6" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.52%)</title><rect x="502.7" y="1219.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="505.7" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.52%)</title><rect x="508.8" y="1267.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="511.8" y="1278.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="508.8" y="1251.0" width="6.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="511.8" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="514.8" y="1283.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="517.8" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.52%)</title><rect x="520.9" y="1331.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="523.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.52%)</title><rect x="520.9" y="1315.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="523.9" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.52%)</title><rect x="520.9" y="1299.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="523.9" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.52%)</title><rect x="520.9" y="1283.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="523.9" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.52%)</title><rect x="520.9" y="1267.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="523.9" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.55%)</title><rect x="527.0" y="1331.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.0" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="539.2" y="1315.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="542.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="539.2" y="1299.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="542.2" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="539.2" y="1283.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="542.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="539.2" y="1267.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.2" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$368/2080404146.accept (1 samples, 0.52%)</title><rect x="539.2" y="1251.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="545.3" y="1363.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="548.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="545.3" y="1347.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="548.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="545.3" y="1331.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="548.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="545.3" y="1315.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="545.3" y="1299.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="548.3" y="1310.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.52%)</title><rect x="551.3" y="1379.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="554.3" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="551.3" y="1363.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="554.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 1.03%)</title><rect x="557.4" y="1443.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="560.4" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.52%)</title><rect x="563.5" y="1427.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.52%)</title><rect x="563.5" y="1411.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="566.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="563.5" y="1395.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="566.5" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.52%)</title><rect x="563.5" y="1379.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="566.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.52%)</title><rect x="563.5" y="1363.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="566.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.52%)</title><rect x="569.6" y="1491.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="572.6" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.52%)</title><rect x="569.6" y="1475.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="572.6" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.52%)</title><rect x="569.6" y="1459.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="572.6" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.52%)</title><rect x="569.6" y="1443.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="572.6" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.52%)</title><rect x="569.6" y="1427.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="569.6" y="1411.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="572.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="569.6" y="1395.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="572.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.52%)</title><rect x="569.6" y="1379.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="572.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.52%)</title><rect x="569.6" y="1363.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="572.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.52%)</title><rect x="569.6" y="1347.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="572.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/HeartbeatRequestData.write (1 samples, 0.52%)</title><rect x="569.6" y="1331.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="572.6" y="1342.0"></text>
</g>
<g>
<title>start_thread (100 samples, 51.55%)</title><rect x="575.7" y="1491.0" width="608.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="578.7" y="1502.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (100 samples, 51.55%)</title><rect x="575.7" y="1475.0" width="608.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="578.7" y="1486.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.22%)</title><rect x="575.7" y="1459.0" width="85.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.7" y="1470.0">GangWorker..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 7.22%)</title><rect x="575.7" y="1443.0" width="85.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="578.7" y="1454.0">G1ParTask:..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 7.22%)</title><rect x="575.7" y="1427.0" width="85.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="578.7" y="1438.0">G1ParEvacu..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 7.22%)</title><rect x="575.7" y="1411.0" width="85.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="578.7" y="1422.0">G1ParScanT..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 3.09%)</title><rect x="618.2" y="1395.0" width="36.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="621.2" y="1406.0">G1P..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 1.03%)</title><rect x="642.6" y="1379.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="645.6" y="1390.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.52%)</title><rect x="648.7" y="1363.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="651.7" y="1374.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.52%)</title><rect x="654.7" y="1395.0" width="6.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="657.7" y="1406.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 43.81%)</title><rect x="660.8" y="1459.0" width="517.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.8" y="1470.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 43.81%)</title><rect x="660.8" y="1443.0" width="517.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="663.8" y="1454.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 43.81%)</title><rect x="660.8" y="1427.0" width="517.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="663.8" y="1438.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 43.81%)</title><rect x="660.8" y="1411.0" width="517.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="663.8" y="1422.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (81 samples, 41.75%)</title><rect x="660.8" y="1395.0" width="492.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.8" y="1406.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (81 samples, 41.75%)</title><rect x="660.8" y="1379.0" width="492.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.8" y="1390.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 23.71%)</title><rect x="660.8" y="1363.0" width="279.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="663.8" y="1374.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.03%)</title><rect x="660.8" y="1347.0" width="12.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="663.8" y="1358.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.52%)</title><rect x="666.9" y="1331.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="669.9" y="1342.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 2.06%)</title><rect x="673.0" y="1347.0" width="24.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="676.0" y="1358.0">C..</text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 1.03%)</title><rect x="679.1" y="1331.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="682.1" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 1.03%)</title><rect x="679.1" y="1315.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="682.1" y="1326.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.52%)</title><rect x="691.2" y="1331.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="694.2" y="1342.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.58%)</title><rect x="697.3" y="1347.0" width="30.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="700.3" y="1358.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.58%)</title><rect x="697.3" y="1331.0" width="30.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="700.3" y="1342.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 2.06%)</title><rect x="697.3" y="1315.0" width="24.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="700.3" y="1326.0">A..</text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.52%)</title><rect x="721.6" y="1315.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="724.6" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::java_calling_convention(BasicType const*, VMRegPair*, int, int) (1 samples, 0.52%)</title><rect x="721.6" y="1299.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="724.6" y="1310.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.03%)</title><rect x="727.7" y="1347.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="730.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.03%)</title><rect x="727.7" y="1331.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="730.7" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 1.03%)</title><rect x="727.7" y="1315.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="730.7" y="1326.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.52%)</title><rect x="733.8" y="1299.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="736.8" y="1310.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.52%)</title><rect x="733.8" y="1283.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.8" y="1294.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.52%)</title><rect x="733.8" y="1267.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="736.8" y="1278.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="733.8" y="1251.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="736.8" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.52%)</title><rect x="739.9" y="1347.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.9" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 16.49%)</title><rect x="746.0" y="1347.0" width="194.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="749.0" y="1358.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.03%)</title><rect x="746.0" y="1331.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="749.0" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.52%)</title><rect x="758.1" y="1331.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.1" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="758.1" y="1315.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="761.1" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.03%)</title><rect x="764.2" y="1331.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.2" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.03%)</title><rect x="764.2" y="1315.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="767.2" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.03%)</title><rect x="764.2" y="1299.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="767.2" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 3.09%)</title><rect x="776.4" y="1331.0" width="36.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="779.4" y="1342.0">Pha..</text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.52%)</title><rect x="800.7" y="1315.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.7" y="1326.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="800.7" y="1299.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="803.7" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.52%)</title><rect x="806.8" y="1315.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="809.8" y="1326.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.52%)</title><rect x="806.8" y="1299.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="809.8" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 4.64%)</title><rect x="812.9" y="1331.0" width="54.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="815.9" y="1342.0">Phase..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.52%)</title><rect x="819.0" y="1315.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="822.0" y="1326.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.52%)</title><rect x="825.1" y="1315.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="828.1" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 3.09%)</title><rect x="831.1" y="1315.0" width="36.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="834.1" y="1326.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.03%)</title><rect x="855.5" y="1299.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="858.5" y="1310.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.03%)</title><rect x="867.6" y="1331.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="870.6" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.03%)</title><rect x="879.8" y="1331.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.8" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 1.03%)</title><rect x="879.8" y="1315.0" width="12.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="882.8" y="1326.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 2.58%)</title><rect x="892.0" y="1331.0" width="30.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="895.0" y="1342.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 2.58%)</title><rect x="892.0" y="1315.0" width="30.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="895.0" y="1326.0">Ph..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.55%)</title><rect x="904.1" y="1299.0" width="18.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="907.1" y="1310.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (3 samples, 1.55%)</title><rect x="904.1" y="1283.0" width="18.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="907.1" y="1294.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.03%)</title><rect x="922.4" y="1331.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="925.4" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.52%)</title><rect x="928.5" y="1315.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="931.5" y="1326.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.52%)</title><rect x="928.5" y="1299.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="931.5" y="1310.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.52%)</title><rect x="934.5" y="1331.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.5" y="1342.0"></text>
</g>
<g>
<title>Compile::Optimize() (30 samples, 15.46%)</title><rect x="940.6" y="1363.0" width="182.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="943.6" y="1374.0">Compile::Optimize()</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.52%)</title><rect x="940.6" y="1347.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="943.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.52%)</title><rect x="940.6" y="1331.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.6" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 1.03%)</title><rect x="946.7" y="1347.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 1.03%)</title><rect x="946.7" y="1331.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.7" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.52%)</title><rect x="952.8" y="1315.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="955.8" y="1326.0"></text>
</g>
<g>
<title>CastPPNode::Ideal_DU_postCCP(PhaseCCP*) (1 samples, 0.52%)</title><rect x="952.8" y="1299.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="955.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (21 samples, 10.82%)</title><rect x="958.9" y="1347.0" width="127.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="961.9" y="1358.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.52%)</title><rect x="958.9" y="1331.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.9" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.52%)</title><rect x="958.9" y="1315.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="961.9" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.52%)</title><rect x="958.9" y="1299.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="961.9" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.52%)</title><rect x="958.9" y="1283.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="961.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::create_new_if_for_predicate(ProjNode*, Node*, Deoptimization::DeoptReason) (1 samples, 0.52%)</title><rect x="958.9" y="1267.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.9" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.52%)</title><rect x="958.9" y="1251.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.9" y="1262.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.52%)</title><rect x="958.9" y="1235.0" width="6.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="961.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.52%)</title><rect x="964.9" y="1331.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="967.9" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 8.76%)</title><rect x="971.0" y="1331.0" width="103.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="974.0" y="1342.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 7.73%)</title><rect x="983.2" y="1315.0" width="91.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.2" y="1326.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.52%)</title><rect x="983.2" y="1299.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="986.2" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 7.22%)</title><rect x="989.3" y="1299.0" width="85.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.3" y="1310.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 1.03%)</title><rect x="1037.9" y="1283.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.9" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.52%)</title><rect x="1044.0" y="1267.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.0" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 1.03%)</title><rect x="1050.1" y="1283.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.1" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 1.03%)</title><rect x="1062.3" y="1283.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1065.3" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.52%)</title><rect x="1068.4" y="1267.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.4" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.03%)</title><rect x="1074.4" y="1331.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.4" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.52%)</title><rect x="1074.4" y="1315.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.4" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.52%)</title><rect x="1074.4" y="1299.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1077.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.52%)</title><rect x="1080.5" y="1315.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1083.5" y="1326.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.52%)</title><rect x="1086.6" y="1347.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1089.6" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.52%)</title><rect x="1086.6" y="1331.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.06%)</title><rect x="1092.7" y="1347.0" width="24.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.7" y="1358.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.06%)</title><rect x="1092.7" y="1331.0" width="24.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.7" y="1342.0">P..</text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.52%)</title><rect x="1092.7" y="1315.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.7" y="1326.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1098.8" y="1315.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.8" y="1326.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.52%)</title><rect x="1098.8" y="1299.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1101.8" y="1310.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.52%)</title><rect x="1104.8" y="1315.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.8" y="1326.0"></text>
</g>
<g>
<title>StoreCMNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1110.9" y="1315.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1113.9" y="1326.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1110.9" y="1299.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.9" y="1310.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1110.9" y="1283.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.9" y="1294.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1110.9" y="1267.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.9" y="1278.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.52%)</title><rect x="1117.0" y="1347.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1120.0" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.52%)</title><rect x="1117.0" y="1331.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1120.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="1315.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.0" y="1326.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="1299.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1120.0" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.58%)</title><rect x="1123.1" y="1363.0" width="30.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.1" y="1374.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.58%)</title><rect x="1123.1" y="1347.0" width="30.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.1" y="1358.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.58%)</title><rect x="1123.1" y="1331.0" width="30.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.1" y="1342.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.58%)</title><rect x="1123.1" y="1315.0" width="30.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.1" y="1326.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.58%)</title><rect x="1123.1" y="1299.0" width="30.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.1" y="1310.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.58%)</title><rect x="1123.1" y="1283.0" width="30.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.1" y="1294.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.06%)</title><rect x="1123.1" y="1267.0" width="24.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.1" y="1278.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.06%)</title><rect x="1123.1" y="1251.0" width="24.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.1" y="1262.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.06%)</title><rect x="1123.1" y="1235.0" width="24.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.1" y="1246.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.06%)</title><rect x="1123.1" y="1219.0" width="24.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.1" y="1230.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.06%)</title><rect x="1123.1" y="1203.0" width="24.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.1" y="1214.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.06%)</title><rect x="1123.1" y="1187.0" width="24.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.1" y="1198.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1123.1" y="1171.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.1" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1123.1" y="1155.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1123.1" y="1139.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1123.1" y="1123.0" width="12.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1123.1" y="1107.0" width="12.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1123.1" y="1091.0" width="12.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.1" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1123.1" y="1075.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.1" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1123.1" y="1059.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1123.1" y="1043.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1123.1" y="1027.0" width="12.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1123.1" y="1011.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1123.1" y="995.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.1" y="1006.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.52%)</title><rect x="1123.1" y="979.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.1" y="990.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.52%)</title><rect x="1123.1" y="963.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.1" y="974.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.52%)</title><rect x="1123.1" y="947.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.1" y="958.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.52%)</title><rect x="1123.1" y="931.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1129.2" y="979.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1129.2" y="963.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1129.2" y="947.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1129.2" y="931.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1129.2" y="915.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1129.2" y="899.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1129.2" y="883.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1129.2" y="867.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1129.2" y="851.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1129.2" y="835.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1129.2" y="819.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1129.2" y="803.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1129.2" y="787.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1129.2" y="771.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1129.2" y="755.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1129.2" y="739.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1129.2" y="723.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1129.2" y="707.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1129.2" y="691.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1129.2" y="675.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1129.2" y="659.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1129.2" y="643.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1129.2" y="627.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1129.2" y="611.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1129.2" y="595.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.2" y="606.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.52%)</title><rect x="1129.2" y="579.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.2" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.52%)</title><rect x="1129.2" y="563.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.2" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.52%)</title><rect x="1129.2" y="547.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.2" y="558.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.52%)</title><rect x="1129.2" y="531.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.2" y="542.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.52%)</title><rect x="1129.2" y="515.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.2" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.52%)</title><rect x="1129.2" y="499.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.2" y="510.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.52%)</title><rect x="1129.2" y="483.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.2" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1135.3" y="1171.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.3" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1135.3" y="1155.0" width="12.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.3" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1135.3" y="1139.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1135.3" y="1123.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1135.3" y="1107.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1135.3" y="1091.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1135.3" y="1075.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.3" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1135.3" y="1059.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1135.3" y="1043.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1135.3" y="1027.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1135.3" y="1011.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1135.3" y="995.0" width="12.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1135.3" y="979.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1135.3" y="963.0" width="12.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1135.3" y="947.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1135.3" y="931.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1135.3" y="915.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1135.3" y="899.0" width="12.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1135.3" y="883.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1135.3" y="867.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1135.3" y="851.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1135.3" y="835.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1135.3" y="819.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1135.3" y="803.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1135.3" y="787.0" width="12.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="798.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1135.3" y="771.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.3" y="782.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.52%)</title><rect x="1135.3" y="755.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.3" y="766.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.52%)</title><rect x="1135.3" y="739.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1141.3" y="771.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1141.3" y="755.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1141.3" y="739.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1141.3" y="723.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1141.3" y="707.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1141.3" y="691.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1141.3" y="675.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1141.3" y="659.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1141.3" y="643.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1141.3" y="627.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1141.3" y="611.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1141.3" y="595.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.3" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1141.3" y="579.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1141.3" y="563.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1141.3" y="547.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1141.3" y="531.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1141.3" y="515.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1141.3" y="499.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1141.3" y="483.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1141.3" y="467.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.3" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1141.3" y="451.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1141.3" y="435.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1141.3" y="419.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1141.3" y="403.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1141.3" y="387.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.3" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1141.3" y="371.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1141.3" y="355.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1141.3" y="339.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1141.3" y="323.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1141.3" y="307.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1141.3" y="291.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1141.3" y="275.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.52%)</title><rect x="1141.3" y="259.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.3" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.52%)</title><rect x="1141.3" y="243.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.52%)</title><rect x="1141.3" y="227.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.52%)</title><rect x="1141.3" y="211.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.3" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1141.3" y="195.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.3" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1141.3" y="179.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.3" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.52%)</title><rect x="1141.3" y="163.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.52%)</title><rect x="1141.3" y="147.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.3" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.52%)</title><rect x="1141.3" y="131.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1141.3" y="115.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1141.3" y="99.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.3" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.52%)</title><rect x="1141.3" y="83.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.52%)</title><rect x="1141.3" y="67.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="78.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1141.3" y="51.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.3" y="62.0"></text>
</g>
<g>
<title>Method::invocation_count() (1 samples, 0.52%)</title><rect x="1141.3" y="35.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.3" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="1267.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.4" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="1251.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.4" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="1235.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="1219.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="1203.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.4" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="1187.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.4" y="1171.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.4" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="1155.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.4" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="1139.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="1123.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="1107.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="1091.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.4" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.4" y="1075.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.4" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="1059.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.4" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="1043.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="1027.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="1011.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="995.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.4" y="979.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="963.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="947.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="931.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="915.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="899.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.4" y="883.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="867.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="851.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="835.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="819.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="803.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="787.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="771.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.4" y="782.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="755.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.4" y="766.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.52%)</title><rect x="1147.4" y="739.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="750.0"></text>
</g>
<g>
<title>LoadUBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="723.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="734.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.52%)</title><rect x="1147.4" y="707.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="718.0"></text>
</g>
<g>
<title>CompileTask::print_compilation_impl(outputStream*, Method*, int, int, bool, int, bool, char const*, bool) (1 samples, 0.52%)</title><rect x="1153.5" y="1395.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.5" y="1406.0"></text>
</g>
<g>
<title>outputStream::print(char const*, ...) (1 samples, 0.52%)</title><rect x="1153.5" y="1379.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.5" y="1390.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.52%)</title><rect x="1153.5" y="1363.0" width="6.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1156.5" y="1374.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.55%)</title><rect x="1159.6" y="1395.0" width="18.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1406.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.55%)</title><rect x="1159.6" y="1379.0" width="18.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.55%)</title><rect x="1159.6" y="1363.0" width="18.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="1374.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.55%)</title><rect x="1159.6" y="1347.0" width="18.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="1358.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.52%)</title><rect x="1159.6" y="1331.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1342.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1159.6" y="1315.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="1326.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1159.6" y="1299.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.52%)</title><rect x="1159.6" y="1283.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1159.6" y="1267.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.6" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1159.6" y="1251.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1159.6" y="1235.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1159.6" y="1219.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1159.6" y="1203.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.6" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1159.6" y="1187.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.6" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1159.6" y="1171.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1159.6" y="1155.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.6" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.52%)</title><rect x="1159.6" y="1139.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.6" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1159.6" y="1123.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1159.6" y="1107.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="1118.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1159.6" y="1091.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.52%)</title><rect x="1159.6" y="1075.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="1086.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.52%)</title><rect x="1159.6" y="1059.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.52%)</title><rect x="1159.6" y="1043.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="1159.6" y="1027.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.6" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="1159.6" y="1011.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol*, Symbol*, Klass::MethodLookupMode) const (1 samples, 0.52%)</title><rect x="1159.6" y="995.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.6" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt;*, Symbol*, Symbol*, bool, bool) (1 samples, 0.52%)</title><rect x="1159.6" y="979.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="990.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.52%)</title><rect x="1165.7" y="1331.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="1342.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.52%)</title><rect x="1165.7" y="1315.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="1326.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.52%)</title><rect x="1165.7" y="1299.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="1310.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.52%)</title><rect x="1165.7" y="1283.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="1294.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.52%)</title><rect x="1165.7" y="1267.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="1278.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.52%)</title><rect x="1171.8" y="1331.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="1342.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.52%)</title><rect x="1171.8" y="1315.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="1326.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.52%)</title><rect x="1171.8" y="1299.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="1310.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.52%)</title><rect x="1171.8" y="1283.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="1294.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.52%)</title><rect x="1171.8" y="1267.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="1278.0"></text>
</g>
<g>
<title>ValueStack::total_locks_size() const (1 samples, 0.52%)</title><rect x="1171.8" y="1251.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="1262.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.52%)</title><rect x="1177.8" y="1459.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.8" y="1470.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.52%)</title><rect x="1177.8" y="1443.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.8" y="1454.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.52%)</title><rect x="1177.8" y="1427.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="1438.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.52%)</title><rect x="1177.8" y="1411.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.8" y="1422.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.52%)</title><rect x="1177.8" y="1395.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.8" y="1406.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.52%)</title><rect x="1177.8" y="1379.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1390.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.52%)</title><rect x="1177.8" y="1363.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="1374.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.52%)</title><rect x="1177.8" y="1347.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="1358.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.52%)</title><rect x="1177.8" y="1331.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="1342.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.52%)</title><rect x="1177.8" y="1315.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="1326.0"></text>
</g>
<g>
<title>sysmalloc (1 samples, 0.52%)</title><rect x="1183.9" y="1491.0" width="6.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1186.9" y="1502.0"></text>
</g>
</g>
</svg>
