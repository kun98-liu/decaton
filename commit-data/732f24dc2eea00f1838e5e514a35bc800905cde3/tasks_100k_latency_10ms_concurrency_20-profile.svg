<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1093"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1093"> </text>
<g id="frames">
<g>
<title>all (195 samples, 100.00%)</title><rect x="10.0" y="1059.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1070.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.51%)</title><rect x="10.0" y="1043.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int) (1 samples, 0.51%)</title><rect x="10.0" y="1027.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap_inner(JavaThread*, int) (1 samples, 0.51%)</title><rect x="10.0" y="1011.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.51%)</title><rect x="10.0" y="995.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.51%)</title><rect x="10.0" y="979.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.51%)</title><rect x="16.1" y="1043.0" width="6.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="19.1" y="1054.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.51%)</title><rect x="22.1" y="1043.0" width="6.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="25.1" y="1054.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.51%)</title><rect x="22.1" y="1027.0" width="6.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="25.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 7.18%)</title><rect x="28.2" y="1043.0" width="84.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.2" y="1054.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 7.18%)</title><rect x="28.2" y="1027.0" width="84.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.2" y="1038.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.51%)</title><rect x="28.2" y="1011.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.51%)</title><rect x="28.2" y="995.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.51%)</title><rect x="28.2" y="979.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.51%)</title><rect x="28.2" y="963.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (13 samples, 6.67%)</title><rect x="34.2" y="1011.0" width="78.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.2" y="1022.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.51%)</title><rect x="34.2" y="995.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.2" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.51%)</title><rect x="34.2" y="979.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.2" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.51%)</title><rect x="34.2" y="963.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.2" y="974.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.51%)</title><rect x="34.2" y="947.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.2" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.51%)</title><rect x="34.2" y="931.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.2" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.51%)</title><rect x="34.2" y="915.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.51%)</title><rect x="34.2" y="899.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.51%)</title><rect x="34.2" y="883.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.51%)</title><rect x="34.2" y="867.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$407/519433607.test (1 samples, 0.51%)</title><rect x="34.2" y="851.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="37.2" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.03%)</title><rect x="40.3" y="995.0" width="12.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$402/1921993867.accept (1 samples, 0.51%)</title><rect x="40.3" y="979.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (1 samples, 0.51%)</title><rect x="40.3" y="963.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.51%)</title><rect x="40.3" y="947.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.3" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.51%)</title><rect x="40.3" y="931.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.51%)</title><rect x="40.3" y="915.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.3" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.51%)</title><rect x="40.3" y="899.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.51%)</title><rect x="40.3" y="883.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.51%)</title><rect x="40.3" y="867.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.51%)</title><rect x="40.3" y="851.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.51%)</title><rect x="40.3" y="835.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="43.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.51%)</title><rect x="40.3" y="819.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.51%)</title><rect x="40.3" y="803.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.51%)</title><rect x="46.3" y="979.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.3" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.51%)</title><rect x="46.3" y="963.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.3" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.51%)</title><rect x="46.3" y="947.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.3" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.51%)</title><rect x="46.3" y="931.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="49.3" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.51%)</title><rect x="46.3" y="915.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="49.3" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.13%)</title><rect x="52.4" y="995.0" width="60.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.4" y="1006.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 5.13%)</title><rect x="52.4" y="979.0" width="60.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.4" y="990.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.62%)</title><rect x="52.4" y="963.0" width="54.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.4" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.51%)</title><rect x="52.4" y="947.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.51%)</title><rect x="52.4" y="931.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.4" y="942.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.51%)</title><rect x="52.4" y="915.0" width="6.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="55.4" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.51%)</title><rect x="52.4" y="899.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="55.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.03%)</title><rect x="58.4" y="947.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.03%)</title><rect x="58.4" y="931.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.03%)</title><rect x="58.4" y="915.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.51%)</title><rect x="58.4" y="899.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.51%)</title><rect x="58.4" y="883.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.51%)</title><rect x="58.4" y="867.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.51%)</title><rect x="58.4" y="851.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.51%)</title><rect x="58.4" y="835.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.51%)</title><rect x="58.4" y="819.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readInt (1 samples, 0.51%)</title><rect x="58.4" y="803.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.4" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.51%)</title><rect x="58.4" y="787.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.4" y="798.0"></text>
</g>
<g>
<title>java/nio/Bits.getInt (1 samples, 0.51%)</title><rect x="58.4" y="771.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.4" y="782.0"></text>
</g>
<g>
<title>java/nio/Bits.getIntB (1 samples, 0.51%)</title><rect x="58.4" y="755.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.51%)</title><rect x="64.5" y="899.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="67.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (6 samples, 3.08%)</title><rect x="70.5" y="947.0" width="36.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.5" y="958.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.51%)</title><rect x="70.5" y="931.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.5" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.51%)</title><rect x="70.5" y="915.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="73.5" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/716083600.linkToTargetMethod (1 samples, 0.51%)</title><rect x="70.5" y="899.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.5" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/596512129.invokeStatic_L_L (1 samples, 0.51%)</title><rect x="70.5" y="883.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$423/660808876.get$Lambda (1 samples, 0.51%)</title><rect x="70.5" y="867.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.56%)</title><rect x="76.6" y="931.0" width="30.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.6" y="942.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (4 samples, 2.05%)</title><rect x="76.6" y="915.0" width="24.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.6" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.05%)</title><rect x="76.6" y="899.0" width="24.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.6" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.54%)</title><rect x="76.6" y="883.0" width="18.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.03%)</title><rect x="82.6" y="867.0" width="12.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 1.03%)</title><rect x="82.6" y="851.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="85.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.03%)</title><rect x="82.6" y="835.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="85.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.03%)</title><rect x="82.6" y="819.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.03%)</title><rect x="82.6" y="803.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.03%)</title><rect x="82.6" y="787.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="85.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.03%)</title><rect x="82.6" y="771.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="85.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.51%)</title><rect x="94.7" y="883.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.51%)</title><rect x="94.7" y="867.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.51%)</title><rect x="94.7" y="851.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.7" y="862.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.51%)</title><rect x="94.7" y="835.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.7" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.51%)</title><rect x="94.7" y="819.0" width="6.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="97.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.51%)</title><rect x="100.8" y="915.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.51%)</title><rect x="100.8" y="899.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="103.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.51%)</title><rect x="100.8" y="883.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.51%)</title><rect x="100.8" y="867.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.51%)</title><rect x="100.8" y="851.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="103.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.51%)</title><rect x="106.8" y="963.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="109.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.51%)</title><rect x="106.8" y="947.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="109.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.51%)</title><rect x="106.8" y="931.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.51%)</title><rect x="106.8" y="915.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.51%)</title><rect x="106.8" y="899.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.51%)</title><rect x="106.8" y="883.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.8" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.51%)</title><rect x="106.8" y="867.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="109.8" y="878.0"></text>
</g>
<g>
<title>java/lang/Thread.run (89 samples, 45.64%)</title><rect x="112.9" y="1043.0" width="538.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.9" y="1054.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (89 samples, 45.64%)</title><rect x="112.9" y="1027.0" width="538.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.9" y="1038.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (89 samples, 45.64%)</title><rect x="112.9" y="1011.0" width="538.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.9" y="1022.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$427/129711856.run (84 samples, 43.08%)</title><rect x="112.9" y="995.0" width="508.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.9" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (84 samples, 43.08%)</title><rect x="112.9" y="979.0" width="508.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.9" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (84 samples, 43.08%)</title><rect x="112.9" y="963.0" width="508.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="115.9" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (84 samples, 43.08%)</title><rect x="112.9" y="947.0" width="508.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.9" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 4.10%)</title><rect x="118.9" y="931.0" width="48.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="121.9" y="942.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.10%)</title><rect x="118.9" y="915.0" width="48.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="121.9" y="926.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 4.10%)</title><rect x="118.9" y="899.0" width="48.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.9" y="910.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.54%)</title><rect x="149.2" y="883.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="152.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.51%)</title><rect x="149.2" y="867.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="152.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.51%)</title><rect x="149.2" y="851.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.51%)</title><rect x="149.2" y="835.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$442/1814322148.accept (1 samples, 0.51%)</title><rect x="149.2" y="819.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.03%)</title><rect x="155.2" y="867.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.2" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$442/1814322148.accept (2 samples, 1.03%)</title><rect x="155.2" y="851.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="158.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (2 samples, 1.03%)</title><rect x="155.2" y="835.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="158.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.03%)</title><rect x="155.2" y="819.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="158.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.03%)</title><rect x="155.2" y="803.0" width="12.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.03%)</title><rect x="155.2" y="787.0" width="12.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="158.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.51%)</title><rect x="155.2" y="771.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.51%)</title><rect x="155.2" y="755.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.2" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$425/1988969674.accept (1 samples, 0.51%)</title><rect x="155.2" y="739.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.51%)</title><rect x="161.3" y="771.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (14 samples, 7.18%)</title><rect x="167.3" y="931.0" width="84.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="170.3" y="942.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$117/807657332.extract (14 samples, 7.18%)</title><rect x="167.3" y="915.0" width="84.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.3" y="926.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (14 samples, 7.18%)</title><rect x="167.3" y="899.0" width="84.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="170.3" y="910.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.18%)</title><rect x="167.3" y="883.0" width="84.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.3" y="894.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.18%)</title><rect x="167.3" y="867.0" width="84.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.3" y="878.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 7.18%)</title><rect x="167.3" y="851.0" width="84.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.3" y="862.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 5.13%)</title><rect x="167.3" y="835.0" width="60.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.3" y="846.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (2 samples, 1.03%)</title><rect x="167.3" y="819.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="170.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (2 samples, 1.03%)</title><rect x="167.3" y="803.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (2 samples, 1.03%)</title><rect x="167.3" y="787.0" width="12.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.51%)</title><rect x="179.4" y="819.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.51%)</title><rect x="179.4" y="803.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.51%)</title><rect x="179.4" y="787.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 3.59%)</title><rect x="185.5" y="819.0" width="42.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.5" y="830.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 3.59%)</title><rect x="185.5" y="803.0" width="42.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.5" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.51%)</title><rect x="185.5" y="787.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (1 samples, 0.51%)</title><rect x="185.5" y="771.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="188.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 2.05%)</title><rect x="191.5" y="787.0" width="24.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.5" y="798.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.51%)</title><rect x="197.6" y="771.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="200.6" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.51%)</title><rect x="197.6" y="755.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="200.6" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.51%)</title><rect x="197.6" y="739.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="200.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.51%)</title><rect x="203.6" y="771.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="206.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.51%)</title><rect x="203.6" y="755.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.51%)</title><rect x="209.7" y="771.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 1.03%)</title><rect x="215.7" y="787.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="218.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (3 samples, 1.54%)</title><rect x="227.8" y="835.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.54%)</title><rect x="227.8" y="819.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.54%)</title><rect x="227.8" y="803.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.51%)</title><rect x="227.8" y="787.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.51%)</title><rect x="227.8" y="771.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 1.03%)</title><rect x="233.9" y="787.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 1.03%)</title><rect x="233.9" y="771.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.03%)</title><rect x="233.9" y="755.0" width="12.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.03%)</title><rect x="233.9" y="739.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.51%)</title><rect x="239.9" y="723.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.51%)</title><rect x="239.9" y="707.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.51%)</title><rect x="239.9" y="691.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.51%)</title><rect x="239.9" y="675.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.51%)</title><rect x="246.0" y="835.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="249.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.51%)</title><rect x="246.0" y="819.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.51%)</title><rect x="246.0" y="803.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="249.0" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.51%)</title><rect x="246.0" y="787.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.51%)</title><rect x="246.0" y="771.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (61 samples, 31.28%)</title><rect x="252.1" y="931.0" width="369.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.1" y="942.0">com/linecorp/decaton/processor/runtime/internal/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 4.10%)</title><rect x="258.1" y="915.0" width="48.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.1" y="926.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 4.10%)</title><rect x="258.1" y="899.0" width="48.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.1" y="910.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 3.59%)</title><rect x="264.2" y="883.0" width="42.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.2" y="894.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.51%)</title><rect x="264.2" y="867.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.2" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.51%)</title><rect x="264.2" y="851.0" width="6.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.51%)</title><rect x="264.2" y="835.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.51%)</title><rect x="264.2" y="819.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 3.08%)</title><rect x="270.2" y="867.0" width="36.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.2" y="878.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 2.56%)</title><rect x="276.3" y="851.0" width="30.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.3" y="862.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 2.05%)</title><rect x="282.3" y="835.0" width="24.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="285.3" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (17 samples, 8.72%)</title><rect x="306.5" y="915.0" width="102.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="309.5" y="926.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (17 samples, 8.72%)</title><rect x="306.5" y="899.0" width="102.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="309.5" y="910.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 3.08%)</title><rect x="306.5" y="883.0" width="36.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="309.5" y="894.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.54%)</title><rect x="312.6" y="867.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.6" y="878.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.54%)</title><rect x="312.6" y="851.0" width="18.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.6" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.54%)</title><rect x="312.6" y="835.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.6" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.54%)</title><rect x="312.6" y="819.0" width="18.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="315.6" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.54%)</title><rect x="312.6" y="803.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.6" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.54%)</title><rect x="312.6" y="787.0" width="18.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="315.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.51%)</title><rect x="318.6" y="771.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="321.6" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.51%)</title><rect x="318.6" y="755.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="321.6" y="766.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.51%)</title><rect x="318.6" y="739.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="321.6" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.51%)</title><rect x="324.7" y="771.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="327.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.51%)</title><rect x="324.7" y="755.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="327.7" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.51%)</title><rect x="324.7" y="739.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="327.7" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 1.03%)</title><rect x="330.7" y="867.0" width="12.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="333.7" y="878.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.51%)</title><rect x="342.8" y="883.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="345.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.51%)</title><rect x="342.8" y="867.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.8" y="878.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.51%)</title><rect x="342.8" y="851.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="345.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.51%)</title><rect x="342.8" y="835.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="345.8" y="846.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 5.13%)</title><rect x="348.9" y="883.0" width="60.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.9" y="894.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 5.13%)</title><rect x="348.9" y="867.0" width="60.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.9" y="878.0">ch/qos..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (10 samples, 5.13%)</title><rect x="348.9" y="851.0" width="60.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.9" y="862.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 3.08%)</title><rect x="373.1" y="835.0" width="36.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="376.1" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (6 samples, 3.08%)</title><rect x="373.1" y="819.0" width="36.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="376.1" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.51%)</title><rect x="379.1" y="803.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.03%)</title><rect x="385.2" y="803.0" width="12.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="388.2" y="814.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 1.03%)</title><rect x="397.3" y="803.0" width="12.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="400.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (30 samples, 15.38%)</title><rect x="409.4" y="915.0" width="181.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="412.4" y="926.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (30 samples, 15.38%)</title><rect x="409.4" y="899.0" width="181.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="412.4" y="910.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$344/1971474807.process (25 samples, 12.82%)</title><rect x="409.4" y="883.0" width="151.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.4" y="894.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (25 samples, 12.82%)</title><rect x="409.4" y="867.0" width="151.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.4" y="878.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (25 samples, 12.82%)</title><rect x="409.4" y="851.0" width="151.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.4" y="862.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (24 samples, 12.31%)</title><rect x="409.4" y="835.0" width="145.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.4" y="846.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/lang/Thread.sleep (24 samples, 12.31%)</title><rect x="409.4" y="819.0" width="145.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="412.4" y="830.0">java/lang/Thread.s..</text>
</g>
<g>
<title>JVM_Sleep (23 samples, 11.79%)</title><rect x="415.4" y="803.0" width="139.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="418.4" y="814.0">JVM_Sleep</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.51%)</title><rect x="427.5" y="787.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="430.5" y="798.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (20 samples, 10.26%)</title><rect x="433.6" y="787.0" width="121.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="436.6" y="798.0">os::sleep(Threa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 1.03%)</title><rect x="439.6" y="771.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="442.6" y="782.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 1.03%)</title><rect x="439.6" y="755.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="442.6" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.54%)</title><rect x="451.7" y="771.0" width="18.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="454.7" y="782.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 5.13%)</title><rect x="469.9" y="771.0" width="60.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="472.9" y="782.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.51%)</title><rect x="530.4" y="771.0" width="6.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="533.4" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.51%)</title><rect x="536.5" y="771.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.5" y="782.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.51%)</title><rect x="542.5" y="771.0" width="6.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="545.5" y="782.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.51%)</title><rect x="548.6" y="771.0" width="6.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="551.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.51%)</title><rect x="554.6" y="835.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.51%)</title><rect x="560.7" y="883.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.51%)</title><rect x="566.7" y="883.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="569.7" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.51%)</title><rect x="566.7" y="867.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="569.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.51%)</title><rect x="566.7" y="851.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.51%)</title><rect x="566.7" y="835.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="569.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.51%)</title><rect x="566.7" y="819.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="569.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.51%)</title><rect x="566.7" y="803.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="569.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.03%)</title><rect x="572.8" y="883.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="575.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.03%)</title><rect x="572.8" y="867.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="575.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.03%)</title><rect x="572.8" y="851.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="575.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.03%)</title><rect x="572.8" y="835.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="575.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 1.03%)</title><rect x="572.8" y="819.0" width="12.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="575.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 1.03%)</title><rect x="572.8" y="803.0" width="12.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="575.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$437/2042049072.accept (1 samples, 0.51%)</title><rect x="578.8" y="787.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.51%)</title><rect x="584.9" y="883.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.56%)</title><rect x="590.9" y="915.0" width="30.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="593.9" y="926.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.56%)</title><rect x="590.9" y="899.0" width="30.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.9" y="910.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.51%)</title><rect x="609.1" y="883.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="612.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.51%)</title><rect x="609.1" y="867.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="612.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$441/1563640463.accept (1 samples, 0.51%)</title><rect x="609.1" y="851.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="612.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (1 samples, 0.51%)</title><rect x="609.1" y="835.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.51%)</title><rect x="609.1" y="819.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="612.1" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.51%)</title><rect x="609.1" y="803.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="612.1" y="814.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.51%)</title><rect x="609.1" y="787.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="612.1" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.51%)</title><rect x="615.1" y="883.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="618.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.51%)</title><rect x="621.2" y="995.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="624.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.51%)</title><rect x="621.2" y="979.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.51%)</title><rect x="621.2" y="963.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.51%)</title><rect x="621.2" y="947.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="624.2" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.51%)</title><rect x="621.2" y="931.0" width="6.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="624.2" y="942.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.51%)</title><rect x="621.2" y="915.0" width="6.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="624.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 2.05%)</title><rect x="627.2" y="995.0" width="24.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="630.2" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 2.05%)</title><rect x="627.2" y="979.0" width="24.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="630.2" y="990.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.51%)</title><rect x="627.2" y="963.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="630.2" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.51%)</title><rect x="627.2" y="947.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="630.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.51%)</title><rect x="627.2" y="931.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="630.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.51%)</title><rect x="627.2" y="915.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="630.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.51%)</title><rect x="627.2" y="899.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="630.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.54%)</title><rect x="633.3" y="963.0" width="18.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.3" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.54%)</title><rect x="633.3" y="947.0" width="18.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.54%)</title><rect x="633.3" y="931.0" width="18.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.3" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.54%)</title><rect x="633.3" y="915.0" width="18.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="636.3" y="926.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.51%)</title><rect x="651.4" y="1043.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="654.4" y="1054.0"></text>
</g>
<g>
<title>start_thread (88 samples, 45.13%)</title><rect x="657.5" y="1043.0" width="532.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="660.5" y="1054.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (88 samples, 45.13%)</title><rect x="657.5" y="1027.0" width="532.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="660.5" y="1038.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 3.59%)</title><rect x="657.5" y="1011.0" width="42.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="660.5" y="1022.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 3.59%)</title><rect x="657.5" y="995.0" width="42.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="660.5" y="1006.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.59%)</title><rect x="657.5" y="979.0" width="42.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="660.5" y="990.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.59%)</title><rect x="657.5" y="963.0" width="42.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="660.5" y="974.0">G1Pa..</text>
</g>
<g>
<title>G1DefaultParGCAllocator::alloc_buffer(InCSetState, unsigned char) (1 samples, 0.51%)</title><rect x="663.5" y="947.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="666.5" y="958.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.56%)</title><rect x="669.6" y="947.0" width="30.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="672.6" y="958.0">G1..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 1.54%)</title><rect x="681.7" y="931.0" width="18.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="684.7" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (81 samples, 41.54%)</title><rect x="699.8" y="1011.0" width="490.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="702.8" y="1022.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (81 samples, 41.54%)</title><rect x="699.8" y="995.0" width="490.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.8" y="1006.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (81 samples, 41.54%)</title><rect x="699.8" y="979.0" width="490.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.8" y="990.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (80 samples, 41.03%)</title><rect x="699.8" y="963.0" width="484.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="702.8" y="974.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (79 samples, 40.51%)</title><rect x="699.8" y="947.0" width="478.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="702.8" y="958.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (79 samples, 40.51%)</title><rect x="699.8" y="931.0" width="478.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="702.8" y="942.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 25.13%)</title><rect x="699.8" y="915.0" width="296.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="702.8" y="926.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.51%)</title><rect x="699.8" y="899.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="702.8" y="910.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.51%)</title><rect x="699.8" y="883.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="702.8" y="894.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.51%)</title><rect x="699.8" y="867.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="702.8" y="878.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.51%)</title><rect x="699.8" y="851.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="702.8" y="862.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.51%)</title><rect x="699.8" y="835.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="702.8" y="846.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.51%)</title><rect x="699.8" y="819.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="702.8" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 1.54%)</title><rect x="705.9" y="899.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="708.9" y="910.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (3 samples, 1.54%)</title><rect x="705.9" y="883.0" width="18.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="708.9" y="894.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (2 samples, 1.03%)</title><rect x="711.9" y="867.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="714.9" y="878.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 3.59%)</title><rect x="724.1" y="899.0" width="42.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="727.1" y="910.0">Matc..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 1.03%)</title><rect x="724.1" y="883.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="727.1" y="894.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) (1 samples, 0.51%)</title><rect x="730.1" y="867.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.1" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 2.56%)</title><rect x="736.2" y="883.0" width="30.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="739.2" y="894.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 2.05%)</title><rect x="736.2" y="867.0" width="24.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="739.2" y="878.0">A..</text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.51%)</title><rect x="760.4" y="867.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="763.4" y="878.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.51%)</title><rect x="766.4" y="899.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="769.4" y="910.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.51%)</title><rect x="766.4" y="883.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="769.4" y="894.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (1 samples, 0.51%)</title><rect x="766.4" y="867.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="769.4" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.54%)</title><rect x="772.5" y="899.0" width="18.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="775.5" y="910.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.54%)</title><rect x="772.5" y="883.0" width="18.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="775.5" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.51%)</title><rect x="772.5" y="867.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="775.5" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.51%)</title><rect x="772.5" y="851.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="775.5" y="862.0"></text>
</g>
<g>
<title>PhiNode::adr_type() const (1 samples, 0.51%)</title><rect x="772.5" y="835.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.51%)</title><rect x="778.5" y="867.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="781.5" y="878.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.51%)</title><rect x="778.5" y="851.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.5" y="862.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.51%)</title><rect x="778.5" y="835.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="781.5" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.51%)</title><rect x="784.6" y="867.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="787.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 17.44%)</title><rect x="790.6" y="899.0" width="205.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="793.6" y="910.0">PhaseChaitin::Register_Allo..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.51%)</title><rect x="796.7" y="883.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="799.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.03%)</title><rect x="802.7" y="883.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="805.7" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.03%)</title><rect x="802.7" y="867.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="805.7" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 1.03%)</title><rect x="814.8" y="883.0" width="12.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="817.8" y="894.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.51%)</title><rect x="814.8" y="867.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="817.8" y="878.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.51%)</title><rect x="820.9" y="867.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="823.9" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="820.9" y="851.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="823.9" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.56%)</title><rect x="826.9" y="883.0" width="30.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="829.9" y="894.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.59%)</title><rect x="857.2" y="883.0" width="42.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="860.2" y="894.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.51%)</title><rect x="863.2" y="867.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="866.2" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.03%)</title><rect x="869.3" y="867.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="872.3" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.54%)</title><rect x="881.4" y="867.0" width="18.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="884.4" y="878.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.51%)</title><rect x="887.4" y="851.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="890.4" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="893.5" y="851.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.51%)</title><rect x="899.5" y="883.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="902.5" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.03%)</title><rect x="905.6" y="883.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="908.6" y="894.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.51%)</title><rect x="911.6" y="867.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.54%)</title><rect x="917.7" y="883.0" width="18.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="920.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.51%)</title><rect x="929.8" y="867.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.8" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.51%)</title><rect x="935.8" y="883.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.8" y="894.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.54%)</title><rect x="941.9" y="883.0" width="18.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="944.9" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.54%)</title><rect x="941.9" y="867.0" width="18.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="944.9" y="878.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 1.54%)</title><rect x="941.9" y="851.0" width="18.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.51%)</title><rect x="941.9" y="835.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="944.9" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 1.03%)</title><rect x="947.9" y="835.0" width="12.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.9" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.51%)</title><rect x="960.1" y="883.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="963.1" y="894.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.51%)</title><rect x="966.1" y="883.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="969.1" y="894.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.05%)</title><rect x="972.2" y="883.0" width="24.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="975.2" y="894.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.51%)</title><rect x="984.3" y="867.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="987.3" y="878.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.51%)</title><rect x="990.3" y="867.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.3" y="878.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 12.82%)</title><rect x="996.4" y="915.0" width="151.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="999.4" y="926.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.51%)</title><rect x="996.4" y="899.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="999.4" y="910.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.51%)</title><rect x="996.4" y="883.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="999.4" y="894.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.51%)</title><rect x="996.4" y="867.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.4" y="878.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.51%)</title><rect x="996.4" y="851.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.51%)</title><rect x="1002.4" y="899.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.51%)</title><rect x="1002.4" y="883.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1005.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.51%)</title><rect x="1002.4" y="867.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1005.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.51%)</title><rect x="1002.4" y="851.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.51%)</title><rect x="1002.4" y="835.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1005.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.51%)</title><rect x="1002.4" y="819.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.4" y="830.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.51%)</title><rect x="1008.5" y="899.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1011.5" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.51%)</title><rect x="1014.5" y="899.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.5" y="910.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.51%)</title><rect x="1014.5" y="883.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1017.5" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (17 samples, 8.72%)</title><rect x="1020.6" y="899.0" width="102.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1023.6" y="910.0">PhaseIdealLo..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.51%)</title><rect x="1020.6" y="883.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1023.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.51%)</title><rect x="1026.6" y="883.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.6" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 7.69%)</title><rect x="1032.7" y="883.0" width="90.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.7" y="894.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 7.18%)</title><rect x="1038.7" y="867.0" width="84.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1041.7" y="878.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 6.67%)</title><rect x="1044.8" y="851.0" width="78.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1047.8" y="862.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.51%)</title><rect x="1117.4" y="835.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1120.4" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.54%)</title><rect x="1123.4" y="899.0" width="18.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.4" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.54%)</title><rect x="1123.4" y="883.0" width="18.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.4" y="894.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1123.4" y="867.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.51%)</title><rect x="1129.5" y="867.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.5" y="878.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.51%)</title><rect x="1129.5" y="851.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.5" y="862.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.51%)</title><rect x="1129.5" y="835.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.5" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.51%)</title><rect x="1129.5" y="819.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.5" y="830.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.51%)</title><rect x="1135.5" y="867.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.5" y="878.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.51%)</title><rect x="1135.5" y="851.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.5" y="862.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.51%)</title><rect x="1141.6" y="899.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.6" y="910.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.51%)</title><rect x="1141.6" y="883.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.6" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.51%)</title><rect x="1141.6" y="867.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.6" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.51%)</title><rect x="1141.6" y="851.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.6" y="862.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.51%)</title><rect x="1141.6" y="835.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.6" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.56%)</title><rect x="1147.6" y="915.0" width="30.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.6" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.56%)</title><rect x="1147.6" y="899.0" width="30.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.6" y="910.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.56%)</title><rect x="1147.6" y="883.0" width="30.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.6" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.56%)</title><rect x="1147.6" y="867.0" width="30.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.6" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.56%)</title><rect x="1147.6" y="851.0" width="30.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.6" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.05%)</title><rect x="1147.6" y="835.0" width="24.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.6" y="846.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.54%)</title><rect x="1147.6" y="819.0" width="18.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.54%)</title><rect x="1147.6" y="803.0" width="18.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.54%)</title><rect x="1147.6" y="787.0" width="18.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.54%)</title><rect x="1147.6" y="771.0" width="18.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.54%)</title><rect x="1147.6" y="755.0" width="18.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.54%)</title><rect x="1147.6" y="739.0" width="18.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.6" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.54%)</title><rect x="1147.6" y="723.0" width="18.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.54%)</title><rect x="1147.6" y="707.0" width="18.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.54%)</title><rect x="1147.6" y="691.0" width="18.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.54%)</title><rect x="1147.6" y="675.0" width="18.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.54%)</title><rect x="1147.6" y="659.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.54%)</title><rect x="1147.6" y="643.0" width="18.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.54%)</title><rect x="1147.6" y="627.0" width="18.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.54%)</title><rect x="1147.6" y="611.0" width="18.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.54%)</title><rect x="1147.6" y="595.0" width="18.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.54%)</title><rect x="1147.6" y="579.0" width="18.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.54%)</title><rect x="1147.6" y="563.0" width="18.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.54%)</title><rect x="1147.6" y="547.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.54%)</title><rect x="1147.6" y="531.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.54%)</title><rect x="1147.6" y="515.0" width="18.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.54%)</title><rect x="1147.6" y="499.0" width="18.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1147.6" y="483.0" width="12.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1147.6" y="467.0" width="12.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1147.6" y="451.0" width="12.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1147.6" y="435.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1147.6" y="419.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1147.6" y="403.0" width="12.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.6" y="414.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.51%)</title><rect x="1147.6" y="387.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1153.7" y="387.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1153.7" y="371.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1153.7" y="355.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1153.7" y="339.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1153.7" y="323.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1153.7" y="307.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1153.7" y="291.0" width="6.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1153.7" y="275.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1153.7" y="259.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1153.7" y="243.0" width="6.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1153.7" y="227.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1153.7" y="211.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1153.7" y="195.0" width="6.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1153.7" y="179.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1153.7" y="163.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1153.7" y="147.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.7" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1153.7" y="131.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.7" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1153.7" y="115.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.51%)</title><rect x="1153.7" y="99.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.7" y="110.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.51%)</title><rect x="1153.7" y="83.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.7" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.51%)</title><rect x="1153.7" y="67.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.7" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.51%)</title><rect x="1153.7" y="51.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.7" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.51%)</title><rect x="1153.7" y="35.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.7" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.51%)</title><rect x="1159.7" y="483.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.7" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.51%)</title><rect x="1159.7" y="467.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.7" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.51%)</title><rect x="1159.7" y="451.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.7" y="462.0"></text>
</g>
<g>
<title>ciMethodData::ciMethodData(MethodData*) (1 samples, 0.51%)</title><rect x="1159.7" y="435.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.7" y="446.0"></text>
</g>
<g>
<title>__strncpy_sse2_unaligned (1 samples, 0.51%)</title><rect x="1159.7" y="419.0" width="6.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1162.7" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1165.8" y="819.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1165.8" y="803.0" width="6.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1165.8" y="787.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1165.8" y="771.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1165.8" y="755.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1165.8" y="739.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1165.8" y="723.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1165.8" y="707.0" width="6.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1165.8" y="691.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1165.8" y="675.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1165.8" y="659.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1165.8" y="643.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1165.8" y="627.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1165.8" y="611.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1165.8" y="595.0" width="6.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1165.8" y="579.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1165.8" y="563.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1165.8" y="547.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1165.8" y="531.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1165.8" y="515.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.51%)</title><rect x="1165.8" y="499.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.51%)</title><rect x="1165.8" y="483.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.51%)</title><rect x="1165.8" y="467.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.51%)</title><rect x="1165.8" y="451.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.51%)</title><rect x="1165.8" y="435.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.8" y="446.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.51%)</title><rect x="1165.8" y="419.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.8" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_string_equals() (1 samples, 0.51%)</title><rect x="1165.8" y="403.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.8" y="414.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.51%)</title><rect x="1165.8" y="387.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.51%)</title><rect x="1165.8" y="371.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.8" y="382.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.51%)</title><rect x="1165.8" y="355.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.8" y="366.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.51%)</title><rect x="1165.8" y="339.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.8" y="350.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.51%)</title><rect x="1165.8" y="323.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.8" y="334.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.51%)</title><rect x="1165.8" y="307.0" width="6.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.8" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.51%)</title><rect x="1165.8" y="291.0" width="6.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.8" y="302.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.51%)</title><rect x="1165.8" y="275.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.8" y="286.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.51%)</title><rect x="1165.8" y="259.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_checkcast() (1 samples, 0.51%)</title><rect x="1171.8" y="835.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.51%)</title><rect x="1171.8" y="819.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.51%)</title><rect x="1171.8" y="803.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="814.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.51%)</title><rect x="1171.8" y="787.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.51%)</title><rect x="1171.8" y="771.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.51%)</title><rect x="1171.8" y="755.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.51%)</title><rect x="1171.8" y="739.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.51%)</title><rect x="1177.9" y="947.0" width="6.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.9" y="958.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.51%)</title><rect x="1177.9" y="931.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.9" y="942.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.51%)</title><rect x="1177.9" y="915.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="926.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.51%)</title><rect x="1177.9" y="899.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.9" y="910.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.51%)</title><rect x="1177.9" y="883.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="894.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.51%)</title><rect x="1177.9" y="867.0" width="6.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="878.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.51%)</title><rect x="1177.9" y="851.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.9" y="862.0"></text>
</g>
<g>
<title>LinearScan::use_kind_of_input_operand(LIR_Op*, LIR_OprDesc*) (1 samples, 0.51%)</title><rect x="1177.9" y="835.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.9" y="846.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.51%)</title><rect x="1183.9" y="963.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="974.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.51%)</title><rect x="1183.9" y="947.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.9" y="958.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.51%)</title><rect x="1183.9" y="931.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.51%)</title><rect x="1183.9" y="915.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="926.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.51%)</title><rect x="1183.9" y="899.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="910.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.51%)</title><rect x="1183.9" y="883.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="894.0"></text>
</g>
</g>
</svg>
