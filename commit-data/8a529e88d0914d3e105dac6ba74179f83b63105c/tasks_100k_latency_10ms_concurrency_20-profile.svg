<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1157"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1157"> </text>
<g id="frames">
<g>
<title>all (367 samples, 100.00%)</title><rect x="10.0" y="1123.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1134.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.27%)</title><rect x="10.0" y="1107.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.27%)</title><rect x="10.0" y="1091.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (30 samples, 8.17%)</title><rect x="13.2" y="1107.0" width="96.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1118.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (30 samples, 8.17%)</title><rect x="13.2" y="1091.0" width="96.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="1102.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.27%)</title><rect x="13.2" y="1075.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.27%)</title><rect x="13.2" y="1059.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.27%)</title><rect x="13.2" y="1043.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.27%)</title><rect x="13.2" y="1027.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.27%)</title><rect x="13.2" y="1011.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.27%)</title><rect x="13.2" y="995.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.27%)</title><rect x="13.2" y="979.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.27%)</title><rect x="13.2" y="963.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.27%)</title><rect x="13.2" y="947.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.27%)</title><rect x="13.2" y="931.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.2" y="942.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.27%)</title><rect x="13.2" y="915.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.27%)</title><rect x="13.2" y="899.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (29 samples, 7.90%)</title><rect x="16.4" y="1075.0" width="93.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.4" y="1086.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.27%)</title><rect x="16.4" y="1059.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.27%)</title><rect x="16.4" y="1043.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.27%)</title><rect x="16.4" y="1027.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.27%)</title><rect x="16.4" y="1011.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.4" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.27%)</title><rect x="16.4" y="995.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.27%)</title><rect x="16.4" y="979.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.4" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.27%)</title><rect x="16.4" y="963.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.27%)</title><rect x="16.4" y="947.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.4" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.27%)</title><rect x="16.4" y="931.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.27%)</title><rect x="16.4" y="915.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.4" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.27%)</title><rect x="16.4" y="899.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.4" y="910.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="16.4" y="883.0" width="3.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="19.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.54%)</title><rect x="19.6" y="1059.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.6" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.54%)</title><rect x="19.6" y="1043.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.54%)</title><rect x="19.6" y="1027.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/2114292968.accept (2 samples, 0.54%)</title><rect x="19.6" y="1011.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.54%)</title><rect x="19.6" y="995.0" width="6.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.6" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.54%)</title><rect x="19.6" y="979.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.6" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.54%)</title><rect x="19.6" y="963.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.6" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 1.63%)</title><rect x="26.1" y="1059.0" width="19.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/227438945.accept (5 samples, 1.36%)</title><rect x="26.1" y="1043.0" width="16.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.36%)</title><rect x="26.1" y="1027.0" width="16.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.54%)</title><rect x="26.1" y="1011.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.54%)</title><rect x="26.1" y="995.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.1" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.54%)</title><rect x="26.1" y="979.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="29.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.54%)</title><rect x="26.1" y="963.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.54%)</title><rect x="26.1" y="947.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.27%)</title><rect x="29.3" y="931.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (3 samples, 0.82%)</title><rect x="32.5" y="1011.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.5" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (3 samples, 0.82%)</title><rect x="32.5" y="995.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.5" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="42.2" y="1043.0" width="3.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="45.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (20 samples, 5.45%)</title><rect x="45.4" y="1059.0" width="64.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.4" y="1070.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (20 samples, 5.45%)</title><rect x="45.4" y="1043.0" width="64.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="48.4" y="1054.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.00%)</title><rect x="45.4" y="1027.0" width="35.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="48.4" y="1038.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.27%)</title><rect x="45.4" y="1011.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="48.4" y="1022.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (1 samples, 0.27%)</title><rect x="45.4" y="995.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="48.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.36%)</title><rect x="48.6" y="1011.0" width="16.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.36%)</title><rect x="48.6" y="995.0" width="16.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.09%)</title><rect x="48.6" y="979.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.6" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.27%)</title><rect x="48.6" y="963.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.27%)</title><rect x="48.6" y="947.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.&lt;init&gt; (1 samples, 0.27%)</title><rect x="48.6" y="931.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.27%)</title><rect x="48.6" y="915.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.fromStruct (1 samples, 0.27%)</title><rect x="48.6" y="899.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.82%)</title><rect x="51.8" y="963.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="51.8" y="947.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="51.8" y="931.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.27%)</title><rect x="55.0" y="947.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="58.0" y="958.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1586782000.linkToTargetMethod (1 samples, 0.27%)</title><rect x="55.0" y="931.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="58.0" y="942.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1917993562.invokeStatic_JJ_L (1 samples, 0.27%)</title><rect x="55.0" y="915.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="58.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.27%)</title><rect x="58.2" y="947.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.27%)</title><rect x="61.4" y="979.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.27%)</title><rect x="61.4" y="963.0" width="3.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.36%)</title><rect x="64.7" y="1011.0" width="16.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="67.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 1.36%)</title><rect x="64.7" y="995.0" width="16.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="67.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.36%)</title><rect x="64.7" y="979.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.36%)</title><rect x="64.7" y="963.0" width="16.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.54%)</title><rect x="64.7" y="947.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="67.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (3 samples, 0.82%)</title><rect x="71.1" y="947.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.27%)</title><rect x="71.1" y="931.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="74.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.54%)</title><rect x="74.3" y="931.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.27%)</title><rect x="74.3" y="915.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.3" y="926.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.27%)</title><rect x="74.3" y="899.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="77.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.27%)</title><rect x="77.5" y="915.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.5" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.27%)</title><rect x="77.5" y="899.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.54%)</title><rect x="80.7" y="1027.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.27%)</title><rect x="80.7" y="1011.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="83.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.27%)</title><rect x="80.7" y="995.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="83.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.27%)</title><rect x="80.7" y="979.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1156563111.accept (1 samples, 0.27%)</title><rect x="80.7" y="963.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.27%)</title><rect x="80.7" y="947.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.27%)</title><rect x="80.7" y="931.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.27%)</title><rect x="80.7" y="915.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="83.7" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="80.7" y="899.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="83.7" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="80.7" y="883.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.27%)</title><rect x="84.0" y="1011.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="87.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.27%)</title><rect x="84.0" y="995.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.0" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.27%)</title><rect x="84.0" y="979.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.27%)</title><rect x="84.0" y="963.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="87.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.27%)</title><rect x="84.0" y="947.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="87.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.27%)</title><rect x="84.0" y="931.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="87.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="84.0" y="915.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="87.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="84.0" y="899.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="87.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 1.09%)</title><rect x="87.2" y="1027.0" width="12.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.09%)</title><rect x="87.2" y="1011.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="90.2" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.27%)</title><rect x="87.2" y="995.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.27%)</title><rect x="87.2" y="979.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.27%)</title><rect x="87.2" y="963.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="87.2" y="947.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.27%)</title><rect x="87.2" y="931.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="87.2" y="915.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="90.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.27%)</title><rect x="87.2" y="899.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.27%)</title><rect x="87.2" y="883.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.27%)</title><rect x="87.2" y="867.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.27%)</title><rect x="87.2" y="851.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.27%)</title><rect x="87.2" y="835.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="90.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.27%)</title><rect x="87.2" y="819.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.27%)</title><rect x="87.2" y="803.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newDecoder (1 samples, 0.27%)</title><rect x="87.2" y="787.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="90.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="87.2" y="771.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="90.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="87.2" y="755.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.2" y="766.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="87.2" y="739.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.2" y="750.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="87.2" y="723.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.2" y="734.0"></text>
</g>
<g>
<title>java/nio/charset/Charset.atBugLevel (1 samples, 0.27%)</title><rect x="87.2" y="707.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.27%)</title><rect x="87.2" y="691.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="90.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.82%)</title><rect x="90.4" y="995.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="93.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.82%)</title><rect x="90.4" y="979.0" width="9.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.4" y="990.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1586782000.linkToTargetMethod (1 samples, 0.27%)</title><rect x="90.4" y="963.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.4" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1917993562.invokeStatic_JJ_L (1 samples, 0.27%)</title><rect x="90.4" y="947.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.54%)</title><rect x="93.6" y="963.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.6" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.54%)</title><rect x="93.6" y="947.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.54%)</title><rect x="93.6" y="931.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.6" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.54%)</title><rect x="93.6" y="915.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.54%)</title><rect x="93.6" y="899.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.6" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.54%)</title><rect x="93.6" y="883.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="96.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.27%)</title><rect x="96.8" y="867.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.8" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.27%)</title><rect x="96.8" y="851.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.54%)</title><rect x="100.0" y="1027.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.54%)</title><rect x="100.0" y="1011.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.27%)</title><rect x="103.2" y="995.0" width="3.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.2" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.27%)</title><rect x="103.2" y="979.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.2" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.27%)</title><rect x="103.2" y="963.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.27%)</title><rect x="106.5" y="1027.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="109.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.27%)</title><rect x="106.5" y="1011.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="109.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (230 samples, 62.67%)</title><rect x="109.7" y="1107.0" width="739.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="112.7" y="1118.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (230 samples, 62.67%)</title><rect x="109.7" y="1091.0" width="739.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.7" y="1102.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (230 samples, 62.67%)</title><rect x="109.7" y="1075.0" width="739.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.7" y="1086.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/567222079.run (218 samples, 59.40%)</title><rect x="109.7" y="1059.0" width="700.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="112.7" y="1070.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/567222079.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (218 samples, 59.40%)</title><rect x="109.7" y="1043.0" width="700.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.7" y="1054.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (218 samples, 59.40%)</title><rect x="109.7" y="1027.0" width="700.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="112.7" y="1038.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (218 samples, 59.40%)</title><rect x="109.7" y="1011.0" width="700.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="112.7" y="1022.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.27%)</title><rect x="112.9" y="995.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="115.9" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.27%)</title><rect x="116.1" y="995.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="119.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.27%)</title><rect x="116.1" y="979.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.1" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.27%)</title><rect x="116.1" y="963.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="119.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.27%)</title><rect x="116.1" y="947.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="119.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 4.36%)</title><rect x="119.3" y="995.0" width="51.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.3" y="1006.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.72%)</title><rect x="138.6" y="979.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.6" y="990.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 2.72%)</title><rect x="138.6" y="963.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="141.6" y="974.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 2.72%)</title><rect x="138.6" y="947.0" width="32.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.6" y="958.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="138.6" y="931.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="141.6" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="138.6" y="915.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="141.6" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="138.6" y="899.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="141.6" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.27%)</title><rect x="138.6" y="883.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="141.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.27%)</title><rect x="141.8" y="931.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.27%)</title><rect x="141.8" y="915.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.27%)</title><rect x="141.8" y="899.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/1262319543.accept (1 samples, 0.27%)</title><rect x="141.8" y="883.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="144.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 2.18%)</title><rect x="145.0" y="931.0" width="25.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.0" y="942.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$304/1262319543.accept (8 samples, 2.18%)</title><rect x="145.0" y="915.0" width="25.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="148.0" y="926.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (8 samples, 2.18%)</title><rect x="145.0" y="899.0" width="25.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="148.0" y="910.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 2.18%)</title><rect x="145.0" y="883.0" width="25.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="148.0" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 2.18%)</title><rect x="145.0" y="867.0" width="25.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="148.0" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 2.18%)</title><rect x="145.0" y="851.0" width="25.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="148.0" y="862.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.54%)</title><rect x="145.0" y="835.0" width="6.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="148.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.54%)</title><rect x="145.0" y="819.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/1193479924.accept (1 samples, 0.27%)</title><rect x="145.0" y="803.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.0" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="148.3" y="803.0" width="3.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="151.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 1.63%)</title><rect x="151.5" y="835.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="154.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/687961209.accept (1 samples, 0.27%)</title><rect x="167.5" y="819.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="170.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (43 samples, 11.72%)</title><rect x="170.8" y="995.0" width="138.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.8" y="1006.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (43 samples, 11.72%)</title><rect x="170.8" y="979.0" width="138.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="173.8" y="990.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (43 samples, 11.72%)</title><rect x="170.8" y="963.0" width="138.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="173.8" y="974.0">com/linecorp/deca..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="170.8" y="947.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="173.8" y="958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="170.8" y="931.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="173.8" y="942.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="170.8" y="915.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="173.8" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.27%)</title><rect x="170.8" y="899.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="173.8" y="910.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.27%)</title><rect x="170.8" y="883.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="173.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 11.44%)</title><rect x="174.0" y="947.0" width="135.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="177.0" y="958.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (42 samples, 11.44%)</title><rect x="174.0" y="931.0" width="135.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.0" y="942.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (42 samples, 11.44%)</title><rect x="174.0" y="915.0" width="135.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="177.0" y="926.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (15 samples, 4.09%)</title><rect x="174.0" y="899.0" width="48.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.0" y="910.0">com/..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.54%)</title><rect x="177.2" y="883.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="180.2" y="894.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="177.2" y="867.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="180.2" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.82%)</title><rect x="183.6" y="883.0" width="9.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.82%)</title><rect x="183.6" y="867.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="186.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.27%)</title><rect x="190.1" y="851.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="193.1" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="190.1" y="835.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.1" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="190.1" y="819.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="193.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="190.1" y="803.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="190.1" y="787.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (9 samples, 2.45%)</title><rect x="193.3" y="883.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="894.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (9 samples, 2.45%)</title><rect x="193.3" y="867.0" width="28.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="196.3" y="878.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.27%)</title><rect x="215.8" y="851.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.8" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.27%)</title><rect x="215.8" y="835.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.27%)</title><rect x="219.0" y="851.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="222.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.27%)</title><rect x="219.0" y="835.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.27%)</title><rect x="219.0" y="819.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.0" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (26 samples, 7.08%)</title><rect x="222.2" y="899.0" width="83.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.2" y="910.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.27%)</title><rect x="222.2" y="883.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="225.2" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.27%)</title><rect x="225.4" y="883.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.27%)</title><rect x="228.6" y="883.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.6" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.27%)</title><rect x="228.6" y="867.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.54%)</title><rect x="231.9" y="883.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.9" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.27%)</title><rect x="235.1" y="867.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.1" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.82%)</title><rect x="238.3" y="883.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.3" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="238.3" y="867.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="241.3" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="238.3" y="851.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="241.3" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="238.3" y="835.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="241.3" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.27%)</title><rect x="238.3" y="819.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="241.3" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.54%)</title><rect x="241.5" y="867.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (17 samples, 4.63%)</title><rect x="247.9" y="883.0" width="54.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="250.9" y="894.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (16 samples, 4.36%)</title><rect x="251.1" y="867.0" width="51.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.1" y="878.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.09%)</title><rect x="251.1" y="851.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.1" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="260.8" y="835.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.8" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="260.8" y="819.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.8" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="260.8" y="803.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.8" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.27%)</title><rect x="264.0" y="851.0" width="38.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.0" y="862.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.27%)</title><rect x="264.0" y="835.0" width="38.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.0" y="846.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (11 samples, 3.00%)</title><rect x="267.2" y="819.0" width="35.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="270.2" y="830.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.54%)</title><rect x="270.4" y="803.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.27%)</title><rect x="270.4" y="787.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.27%)</title><rect x="270.4" y="771.0" width="3.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.4" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.27%)</title><rect x="270.4" y="755.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="273.4" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.27%)</title><rect x="273.7" y="787.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 1.63%)</title><rect x="276.9" y="803.0" width="19.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 1.63%)</title><rect x="276.9" y="787.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 1.63%)</title><rect x="276.9" y="771.0" width="19.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="279.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 1.63%)</title><rect x="276.9" y="755.0" width="19.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="279.9" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 1.63%)</title><rect x="276.9" y="739.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.54%)</title><rect x="296.2" y="803.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.54%)</title><rect x="296.2" y="787.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.54%)</title><rect x="296.2" y="771.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="299.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.27%)</title><rect x="302.6" y="883.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.27%)</title><rect x="305.8" y="899.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.8" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.27%)</title><rect x="305.8" y="883.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.27%)</title><rect x="305.8" y="867.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.8" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.27%)</title><rect x="305.8" y="851.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.27%)</title><rect x="305.8" y="835.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (155 samples, 42.23%)</title><rect x="309.0" y="995.0" width="498.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.0" y="1006.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.82%)</title><rect x="350.8" y="979.0" width="9.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="353.8" y="990.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.82%)</title><rect x="350.8" y="963.0" width="9.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="353.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (17 samples, 4.63%)</title><rect x="360.5" y="979.0" width="54.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="363.5" y="990.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (17 samples, 4.63%)</title><rect x="360.5" y="963.0" width="54.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="363.5" y="974.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (14 samples, 3.81%)</title><rect x="370.1" y="947.0" width="45.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.1" y="958.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.27%)</title><rect x="376.5" y="931.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="379.5" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="376.5" y="915.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.5" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="376.5" y="899.0" width="3.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.5" y="910.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="376.5" y="883.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="379.5" y="894.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.27%)</title><rect x="376.5" y="867.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="379.5" y="878.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.27%)</title><rect x="379.8" y="931.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.8" y="942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.27%)</title><rect x="379.8" y="915.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.8" y="926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.27%)</title><rect x="379.8" y="899.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.8" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (10 samples, 2.72%)</title><rect x="383.0" y="931.0" width="32.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="386.0" y="942.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 2.45%)</title><rect x="386.2" y="915.0" width="28.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="389.2" y="926.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (9 samples, 2.45%)</title><rect x="386.2" y="899.0" width="28.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.2" y="910.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.82%)</title><rect x="405.5" y="883.0" width="9.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="408.5" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="415.1" y="979.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="418.1" y="990.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.27%)</title><rect x="415.1" y="963.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="418.1" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (30 samples, 8.17%)</title><rect x="418.3" y="979.0" width="96.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.3" y="990.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (26 samples, 7.08%)</title><rect x="418.3" y="963.0" width="83.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.3" y="974.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (13 samples, 3.54%)</title><rect x="431.2" y="947.0" width="41.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="434.2" y="958.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="453.7" y="931.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="456.7" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.27%)</title><rect x="453.7" y="915.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="456.7" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="453.7" y="899.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="456.7" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.27%)</title><rect x="453.7" y="883.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="456.7" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.27%)</title><rect x="453.7" y="867.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="456.7" y="878.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.82%)</title><rect x="456.9" y="931.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.9" y="942.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 0.82%)</title><rect x="456.9" y="915.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.9" y="926.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.54%)</title><rect x="456.9" y="899.0" width="6.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.9" y="910.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.54%)</title><rect x="456.9" y="883.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.9" y="894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.54%)</title><rect x="456.9" y="867.0" width="6.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.9" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.54%)</title><rect x="456.9" y="851.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="459.9" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.27%)</title><rect x="456.9" y="835.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="459.9" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.27%)</title><rect x="456.9" y="819.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="459.9" y="830.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.27%)</title><rect x="456.9" y="803.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="459.9" y="814.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.27%)</title><rect x="456.9" y="787.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="459.9" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="460.1" y="835.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="463.1" y="846.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="463.4" y="899.0" width="3.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="466.4" y="910.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.27%)</title><rect x="466.6" y="931.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="469.6" y="942.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.27%)</title><rect x="469.8" y="931.0" width="3.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="472.8" y="942.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.82%)</title><rect x="473.0" y="947.0" width="9.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.0" y="958.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.27%)</title><rect x="473.0" y="931.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.27%)</title><rect x="473.0" y="915.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="476.0" y="926.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.54%)</title><rect x="476.2" y="931.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="479.2" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.27%)</title><rect x="476.2" y="915.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="479.2" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.27%)</title><rect x="476.2" y="899.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="479.2" y="910.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.27%)</title><rect x="476.2" y="883.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="479.2" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.27%)</title><rect x="479.4" y="915.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="482.4" y="926.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 1.63%)</title><rect x="482.6" y="947.0" width="19.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="485.6" y="958.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.36%)</title><rect x="485.9" y="931.0" width="16.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="488.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.09%)</title><rect x="489.1" y="915.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="492.1" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.82%)</title><rect x="492.3" y="899.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="495.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.82%)</title><rect x="492.3" y="883.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.3" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.82%)</title><rect x="492.3" y="867.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 1.09%)</title><rect x="501.9" y="963.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.9" y="974.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 1.09%)</title><rect x="501.9" y="947.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="504.9" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.09%)</title><rect x="501.9" y="931.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.9" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 1.09%)</title><rect x="501.9" y="915.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="504.9" y="926.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.54%)</title><rect x="505.1" y="899.0" width="6.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="508.1" y="910.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="505.1" y="883.0" width="6.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="508.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.27%)</title><rect x="511.6" y="899.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (89 samples, 24.25%)</title><rect x="514.8" y="979.0" width="286.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="517.8" y="990.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (88 samples, 23.98%)</title><rect x="518.0" y="963.0" width="283.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="521.0" y="974.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/958742860.process (64 samples, 17.44%)</title><rect x="518.0" y="947.0" width="205.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.0" y="958.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (64 samples, 17.44%)</title><rect x="518.0" y="931.0" width="205.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="521.0" y="942.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (64 samples, 17.44%)</title><rect x="518.0" y="915.0" width="205.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="521.0" y="926.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.27%)</title><rect x="518.0" y="899.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.0" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.27%)</title><rect x="518.0" y="883.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="521.0" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.27%)</title><rect x="518.0" y="867.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="521.0" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.27%)</title><rect x="518.0" y="851.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="521.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.27%)</title><rect x="518.0" y="835.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (63 samples, 17.17%)</title><rect x="521.2" y="899.0" width="202.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="524.2" y="910.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>java/lang/Thread.sleep (63 samples, 17.17%)</title><rect x="521.2" y="883.0" width="202.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.2" y="894.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (55 samples, 14.99%)</title><rect x="543.7" y="867.0" width="176.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="546.7" y="878.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 1.09%)</title><rect x="563.0" y="851.0" width="12.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="566.0" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.27%)</title><rect x="575.9" y="851.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="578.9" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.27%)</title><rect x="579.1" y="851.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="582.1" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="582.3" y="851.0" width="6.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="585.3" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.54%)</title><rect x="588.7" y="851.0" width="6.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="591.7" y="862.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="588.7" y="835.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="591.7" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.82%)</title><rect x="595.2" y="851.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="598.2" y="862.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (36 samples, 9.81%)</title><rect x="604.8" y="851.0" width="115.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="607.8" y="862.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.27%)</title><rect x="627.3" y="835.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="630.3" y="846.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.27%)</title><rect x="627.3" y="819.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="630.3" y="830.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.27%)</title><rect x="630.5" y="835.0" width="3.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="633.5" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.54%)</title><rect x="633.8" y="835.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="636.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.54%)</title><rect x="633.8" y="819.0" width="6.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="636.8" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.27%)</title><rect x="640.2" y="835.0" width="3.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="643.2" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.27%)</title><rect x="643.4" y="835.0" width="3.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="646.4" y="846.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (14 samples, 3.81%)</title><rect x="646.6" y="835.0" width="45.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="649.6" y="846.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.54%)</title><rect x="691.6" y="835.0" width="6.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="694.6" y="846.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.27%)</title><rect x="698.1" y="835.0" width="3.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="701.1" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 1.09%)</title><rect x="701.3" y="835.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="704.3" y="846.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="714.1" y="835.0" width="3.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="717.1" y="846.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.27%)</title><rect x="717.4" y="835.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="720.4" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.27%)</title><rect x="720.6" y="867.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (6 samples, 1.63%)</title><rect x="723.8" y="947.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="726.8" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.54%)</title><rect x="736.6" y="931.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="739.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 1.09%)</title><rect x="743.1" y="947.0" width="12.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="746.1" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.54%)</title><rect x="743.1" y="931.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="746.1" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.54%)</title><rect x="749.5" y="931.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="752.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.54%)</title><rect x="749.5" y="915.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.54%)</title><rect x="749.5" y="899.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="752.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.54%)</title><rect x="749.5" y="883.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="752.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.54%)</title><rect x="749.5" y="867.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="752.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.54%)</title><rect x="755.9" y="947.0" width="6.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="758.9" y="958.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.54%)</title><rect x="755.9" y="931.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="758.9" y="942.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.09%)</title><rect x="762.4" y="947.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="765.4" y="958.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 1.09%)</title><rect x="762.4" y="931.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.4" y="942.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.54%)</title><rect x="762.4" y="915.0" width="6.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="765.4" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.54%)</title><rect x="768.8" y="915.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="771.8" y="926.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.27%)</title><rect x="775.2" y="947.0" width="3.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="778.2" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.54%)</title><rect x="778.4" y="947.0" width="6.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.54%)</title><rect x="778.4" y="931.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="781.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.54%)</title><rect x="778.4" y="915.0" width="6.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="781.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.54%)</title><rect x="778.4" y="899.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="781.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.54%)</title><rect x="778.4" y="883.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="781.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.54%)</title><rect x="778.4" y="867.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="781.4" y="878.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.27%)</title><rect x="781.7" y="851.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="784.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (5 samples, 1.36%)</title><rect x="784.9" y="947.0" width="16.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="787.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.54%)</title><rect x="801.0" y="979.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="804.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.54%)</title><rect x="801.0" y="963.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="804.0" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.54%)</title><rect x="801.0" y="947.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.27%)</title><rect x="801.0" y="931.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.27%)</title><rect x="801.0" y="915.0" width="3.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.27%)</title><rect x="801.0" y="899.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="804.0" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.27%)</title><rect x="804.2" y="931.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.2" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$301/1455192964.accept (1 samples, 0.27%)</title><rect x="804.2" y="915.0" width="3.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="807.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (1 samples, 0.27%)</title><rect x="804.2" y="899.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.2" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.27%)</title><rect x="804.2" y="883.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="807.2" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.27%)</title><rect x="804.2" y="867.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.2" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.27%)</title><rect x="804.2" y="851.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="807.2" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.27%)</title><rect x="807.4" y="995.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="810.4" y="1006.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.27%)</title><rect x="807.4" y="979.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="810.4" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.54%)</title><rect x="810.6" y="1059.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="813.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.54%)</title><rect x="810.6" y="1043.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.54%)</title><rect x="810.6" y="1027.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.6" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.54%)</title><rect x="810.6" y="1011.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.6" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 2.72%)</title><rect x="817.0" y="1059.0" width="32.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="820.0" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (9 samples, 2.45%)</title><rect x="820.2" y="1043.0" width="29.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.2" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.27%)</title><rect x="820.2" y="1027.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.27%)</title><rect x="820.2" y="1011.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="823.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.27%)</title><rect x="820.2" y="995.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="823.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.27%)</title><rect x="820.2" y="979.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="823.2" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (8 samples, 2.18%)</title><rect x="823.5" y="1027.0" width="25.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="826.5" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 2.18%)</title><rect x="823.5" y="1011.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="826.5" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (8 samples, 2.18%)</title><rect x="823.5" y="995.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="826.5" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (8 samples, 2.18%)</title><rect x="823.5" y="979.0" width="25.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="826.5" y="990.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.54%)</title><rect x="849.2" y="1107.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.54%)</title><rect x="849.2" y="1091.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.54%)</title><rect x="849.2" y="1075.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.2" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.27%)</title><rect x="849.2" y="1059.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.2" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.27%)</title><rect x="849.2" y="1043.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.2" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.27%)</title><rect x="849.2" y="1027.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.2" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.27%)</title><rect x="849.2" y="1011.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.27%)</title><rect x="849.2" y="995.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.2" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.27%)</title><rect x="849.2" y="979.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.2" y="990.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.27%)</title><rect x="849.2" y="963.0" width="3.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.2" y="974.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.27%)</title><rect x="849.2" y="947.0" width="3.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="852.2" y="958.0"></text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.27%)</title><rect x="849.2" y="931.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="852.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.27%)</title><rect x="852.4" y="1059.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="855.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.27%)</title><rect x="852.4" y="1043.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.4" y="1054.0"></text>
</g>
<g>
<title>start_thread (104 samples, 28.34%)</title><rect x="855.6" y="1107.0" width="334.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="858.6" y="1118.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (104 samples, 28.34%)</title><rect x="855.6" y="1091.0" width="334.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="858.6" y="1102.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 4.90%)</title><rect x="855.6" y="1075.0" width="57.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="858.6" y="1086.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 4.90%)</title><rect x="855.6" y="1059.0" width="57.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="858.6" y="1070.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (18 samples, 4.90%)</title><rect x="855.6" y="1043.0" width="57.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="858.6" y="1054.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (18 samples, 4.90%)</title><rect x="855.6" y="1027.0" width="57.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="858.6" y="1038.0">G1ParS..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (15 samples, 4.09%)</title><rect x="862.0" y="1011.0" width="48.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="865.0" y="1022.0">G1Pa..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.09%)</title><rect x="897.4" y="995.0" width="12.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="900.4" y="1006.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.27%)</title><rect x="907.1" y="979.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="910.1" y="990.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.27%)</title><rect x="910.3" y="1011.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="913.3" y="1022.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 23.16%)</title><rect x="913.5" y="1075.0" width="273.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="916.5" y="1086.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 23.16%)</title><rect x="913.5" y="1059.0" width="273.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.5" y="1070.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 23.16%)</title><rect x="913.5" y="1043.0" width="273.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.5" y="1054.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 23.16%)</title><rect x="913.5" y="1027.0" width="273.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.5" y="1038.0">CompileBroker::invoke_compiler_on_met..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (83 samples, 22.62%)</title><rect x="913.5" y="1011.0" width="266.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="916.5" y="1022.0">C2Compiler::compile_method(ciEnv*, c..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (83 samples, 22.62%)</title><rect x="913.5" y="995.0" width="266.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="916.5" y="1006.0">Compile::Compile(ciEnv*, C2Compiler*..</text>
</g>
<g>
<title>Compile::Code_Gen() (46 samples, 12.53%)</title><rect x="913.5" y="979.0" width="147.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.5" y="990.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.27%)</title><rect x="913.5" y="963.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="916.5" y="974.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.27%)</title><rect x="913.5" y="947.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="916.5" y="958.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.27%)</title><rect x="913.5" y="931.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="916.5" y="942.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.27%)</title><rect x="913.5" y="915.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="916.5" y="926.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.27%)</title><rect x="913.5" y="899.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="916.5" y="910.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.82%)</title><rect x="916.7" y="963.0" width="9.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.7" y="974.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.54%)</title><rect x="916.7" y="947.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.7" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.27%)</title><rect x="916.7" y="931.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="919.7" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="916.7" y="915.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="919.7" y="926.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.27%)</title><rect x="919.9" y="931.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="922.9" y="942.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.27%)</title><rect x="923.1" y="947.0" width="3.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="926.1" y="958.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.27%)</title><rect x="923.1" y="931.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.1" y="942.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.09%)</title><rect x="926.3" y="963.0" width="12.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="929.3" y="974.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.27%)</title><rect x="926.3" y="947.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="929.3" y="958.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.82%)</title><rect x="929.6" y="947.0" width="9.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="932.6" y="958.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.27%)</title><rect x="936.0" y="931.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="939.0" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 1.09%)</title><rect x="939.2" y="963.0" width="12.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="942.2" y="974.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.27%)</title><rect x="939.2" y="947.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="942.2" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.82%)</title><rect x="942.4" y="947.0" width="9.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="945.4" y="958.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.54%)</title><rect x="942.4" y="931.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="945.4" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.27%)</title><rect x="945.6" y="915.0" width="3.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="948.6" y="926.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.27%)</title><rect x="945.6" y="899.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="948.6" y="910.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.27%)</title><rect x="945.6" y="883.0" width="3.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="948.6" y="894.0"></text>
</g>
<g>
<title>MachNode::memory_inputs(Node*&amp;, Node*&amp;) const (1 samples, 0.27%)</title><rect x="945.6" y="867.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="948.6" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.27%)</title><rect x="948.9" y="931.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.9" y="942.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.27%)</title><rect x="948.9" y="915.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="951.9" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 9.26%)</title><rect x="952.1" y="963.0" width="109.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="955.1" y="974.0">PhaseChaitin:..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (5 samples, 1.36%)</title><rect x="952.1" y="947.0" width="16.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.1" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (5 samples, 1.36%)</title><rect x="952.1" y="931.0" width="16.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="955.1" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.82%)</title><rect x="958.5" y="915.0" width="9.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="961.5" y="926.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.36%)</title><rect x="968.1" y="947.0" width="16.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.1" y="958.0"></text>
</g>
<g>
<title>loadConL32Node::rule() const (1 samples, 0.27%)</title><rect x="977.8" y="931.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="980.8" y="942.0"></text>
</g>
<g>
<title>loadConP0Node::rule() const (1 samples, 0.27%)</title><rect x="981.0" y="931.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="984.0" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 2.45%)</title><rect x="984.2" y="947.0" width="29.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.2" y="958.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.54%)</title><rect x="1003.5" y="931.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1006.5" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1006.7" y="915.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.7" y="926.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.27%)</title><rect x="1009.9" y="931.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.9" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.54%)</title><rect x="1013.2" y="947.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1016.2" y="958.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.27%)</title><rect x="1013.2" y="931.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1016.2" y="942.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.27%)</title><rect x="1016.4" y="931.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1019.4" y="942.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.54%)</title><rect x="1019.6" y="947.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1022.6" y="958.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.27%)</title><rect x="1022.8" y="931.0" width="3.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1025.8" y="942.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.09%)</title><rect x="1026.0" y="947.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.0" y="958.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (4 samples, 1.09%)</title><rect x="1026.0" y="931.0" width="12.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.0" y="942.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (4 samples, 1.09%)</title><rect x="1026.0" y="915.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1029.0" y="926.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (3 samples, 0.82%)</title><rect x="1026.0" y="899.0" width="9.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.0" y="910.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1032.5" y="883.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1035.5" y="894.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.27%)</title><rect x="1035.7" y="899.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.7" y="910.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.27%)</title><rect x="1038.9" y="947.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1041.9" y="958.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.27%)</title><rect x="1042.1" y="947.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1045.1" y="958.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.27%)</title><rect x="1042.1" y="931.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1045.1" y="942.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.09%)</title><rect x="1045.3" y="947.0" width="12.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.3" y="958.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.82%)</title><rect x="1048.5" y="931.0" width="9.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.5" y="942.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.27%)</title><rect x="1055.0" y="915.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.0" y="926.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::oper_input_base() const (1 samples, 0.27%)</title><rect x="1058.2" y="947.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.2" y="958.0"></text>
</g>
<g>
<title>Compile::Optimize() (31 samples, 8.45%)</title><rect x="1061.4" y="979.0" width="99.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.4" y="990.0">Compile::Opt..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.27%)</title><rect x="1061.4" y="963.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.4" y="974.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.27%)</title><rect x="1061.4" y="947.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.4" y="958.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.27%)</title><rect x="1064.6" y="963.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1067.6" y="974.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.27%)</title><rect x="1064.6" y="947.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.6" y="958.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.27%)</title><rect x="1064.6" y="931.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.6" y="942.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.27%)</title><rect x="1067.8" y="963.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1070.8" y="974.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1067.8" y="947.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.8" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.27%)</title><rect x="1067.8" y="931.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.8" y="942.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.27%)</title><rect x="1067.8" y="915.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.8" y="926.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.27%)</title><rect x="1067.8" y="899.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.8" y="910.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.27%)</title><rect x="1067.8" y="883.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 5.99%)</title><rect x="1071.0" y="963.0" width="70.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.0" y="974.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.27%)</title><rect x="1071.0" y="947.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.0" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.27%)</title><rect x="1074.3" y="947.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.3" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 3.81%)</title><rect x="1077.5" y="947.0" width="45.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.5" y="958.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 3.54%)</title><rect x="1080.7" y="931.0" width="41.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1083.7" y="942.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (13 samples, 3.54%)</title><rect x="1080.7" y="915.0" width="41.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1083.7" y="926.0">Pha..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.27%)</title><rect x="1112.8" y="899.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.8" y="910.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.27%)</title><rect x="1112.8" y="883.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1115.8" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.54%)</title><rect x="1116.0" y="899.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.0" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (5 samples, 1.36%)</title><rect x="1122.5" y="947.0" width="16.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.5" y="958.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.27%)</title><rect x="1125.7" y="931.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1128.7" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.27%)</title><rect x="1125.7" y="915.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.7" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.54%)</title><rect x="1128.9" y="931.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.9" y="942.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.27%)</title><rect x="1128.9" y="915.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.9" y="926.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.27%)</title><rect x="1128.9" y="899.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.9" y="910.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.27%)</title><rect x="1132.1" y="915.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.1" y="926.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.27%)</title><rect x="1135.3" y="931.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.3" y="942.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.27%)</title><rect x="1138.6" y="947.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.6" y="958.0"></text>
</g>
<g>
<title>free (1 samples, 0.27%)</title><rect x="1138.6" y="931.0" width="3.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1141.6" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 1.63%)</title><rect x="1141.8" y="963.0" width="19.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.8" y="974.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.63%)</title><rect x="1141.8" y="947.0" width="19.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.8" y="958.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1141.8" y="931.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.8" y="942.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.27%)</title><rect x="1141.8" y="915.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.8" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.27%)</title><rect x="1141.8" y="899.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.8" y="910.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.27%)</title><rect x="1141.8" y="883.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.8" y="894.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.27%)</title><rect x="1141.8" y="867.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.8" y="878.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.27%)</title><rect x="1141.8" y="851.0" width="3.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1144.8" y="862.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1145.0" y="931.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.0" y="942.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1145.0" y="915.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.0" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1148.2" y="931.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.2" y="942.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.27%)</title><rect x="1151.4" y="931.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.4" y="942.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.27%)</title><rect x="1151.4" y="915.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.4" y="926.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.27%)</title><rect x="1151.4" y="899.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.4" y="910.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.27%)</title><rect x="1154.6" y="931.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.6" y="942.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.27%)</title><rect x="1157.8" y="931.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.8" y="942.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.27%)</title><rect x="1157.8" y="915.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.8" y="926.0"></text>
</g>
<g>
<title>Compile::build_start_state(StartNode*, TypeFunc const*) (1 samples, 0.27%)</title><rect x="1161.1" y="979.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.1" y="990.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.27%)</title><rect x="1161.1" y="963.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.1" y="974.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.27%)</title><rect x="1161.1" y="947.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="958.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.27%)</title><rect x="1161.1" y="931.0" width="3.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1164.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.36%)</title><rect x="1164.3" y="979.0" width="16.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1167.3" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.36%)</title><rect x="1164.3" y="963.0" width="16.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.36%)</title><rect x="1164.3" y="947.0" width="16.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.36%)</title><rect x="1164.3" y="931.0" width="16.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.36%)</title><rect x="1164.3" y="915.0" width="16.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.36%)</title><rect x="1164.3" y="899.0" width="16.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.36%)</title><rect x="1164.3" y="883.0" width="16.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.36%)</title><rect x="1164.3" y="867.0" width="16.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.36%)</title><rect x="1164.3" y="851.0" width="16.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.36%)</title><rect x="1164.3" y="835.0" width="16.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1167.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.27%)</title><rect x="1164.3" y="819.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="830.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.27%)</title><rect x="1164.3" y="803.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1167.3" y="814.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.27%)</title><rect x="1164.3" y="787.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.3" y="798.0"></text>
</g>
<g>
<title>ReplacedNodes::transfer_from(ReplacedNodes const&amp;, unsigned int) (1 samples, 0.27%)</title><rect x="1164.3" y="771.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.09%)</title><rect x="1167.5" y="819.0" width="12.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.09%)</title><rect x="1167.5" y="803.0" width="12.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1167.5" y="787.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1167.5" y="771.0" width="3.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.5" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.27%)</title><rect x="1167.5" y="755.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.5" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.27%)</title><rect x="1167.5" y="739.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.27%)</title><rect x="1167.5" y="723.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.5" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1167.5" y="707.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.27%)</title><rect x="1167.5" y="691.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.27%)</title><rect x="1167.5" y="675.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.5" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.27%)</title><rect x="1167.5" y="659.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.27%)</title><rect x="1167.5" y="643.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.5" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1167.5" y="627.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.5" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1167.5" y="611.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.5" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1167.5" y="595.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.5" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.27%)</title><rect x="1167.5" y="579.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="590.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.27%)</title><rect x="1167.5" y="563.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.5" y="574.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.27%)</title><rect x="1167.5" y="547.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.5" y="558.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.27%)</title><rect x="1167.5" y="531.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="542.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.27%)</title><rect x="1167.5" y="515.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.5" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.7" y="787.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.7" y="771.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="755.0" width="3.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="739.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="723.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.7" y="707.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.7" y="691.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.7" y="675.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="659.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="643.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="627.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.7" y="611.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.7" y="595.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.7" y="579.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="563.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="547.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="531.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.7" y="515.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.7" y="499.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.7" y="483.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="467.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="451.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="435.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.7" y="419.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.7" y="403.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.7" y="387.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="371.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="355.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="339.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1170.7" y="323.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.7" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1170.7" y="307.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.7" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1170.7" y="291.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1170.7" y="275.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1170.7" y="259.0" width="3.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1170.7" y="243.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.7" y="254.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.27%)</title><rect x="1170.7" y="227.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1173.9" y="787.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1173.9" y="771.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1173.9" y="755.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1173.9" y="739.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1173.9" y="723.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1173.9" y="707.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1173.9" y="691.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1173.9" y="675.0" width="6.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1173.9" y="659.0" width="6.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1173.9" y="643.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1173.9" y="627.0" width="6.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1173.9" y="611.0" width="6.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1173.9" y="595.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1173.9" y="579.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1173.9" y="563.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1173.9" y="547.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1173.9" y="531.0" width="6.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1173.9" y="515.0" width="6.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1173.9" y="499.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.54%)</title><rect x="1173.9" y="483.0" width="6.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.54%)</title><rect x="1173.9" y="467.0" width="6.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.54%)</title><rect x="1173.9" y="451.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.54%)</title><rect x="1173.9" y="435.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.54%)</title><rect x="1173.9" y="419.0" width="6.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.54%)</title><rect x="1173.9" y="403.0" width="6.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1173.9" y="387.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1173.9" y="371.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1173.9" y="355.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1173.9" y="339.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1173.9" y="323.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1173.9" y="307.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1173.9" y="291.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.27%)</title><rect x="1173.9" y="275.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.27%)</title><rect x="1173.9" y="259.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.27%)</title><rect x="1173.9" y="243.0" width="3.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1173.9" y="227.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.9" y="238.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.27%)</title><rect x="1173.9" y="211.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="222.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.27%)</title><rect x="1173.9" y="195.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="206.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.27%)</title><rect x="1173.9" y="179.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="190.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.27%)</title><rect x="1173.9" y="163.0" width="3.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.9" y="174.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.27%)</title><rect x="1173.9" y="147.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1177.1" y="387.0" width="3.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1177.1" y="371.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1177.1" y="355.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1177.1" y="339.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1177.1" y="323.0" width="3.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1177.1" y="307.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1177.1" y="291.0" width="3.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1177.1" y="275.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1177.1" y="259.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1177.1" y="243.0" width="3.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1177.1" y="227.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1177.1" y="211.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.27%)</title><rect x="1177.1" y="195.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.27%)</title><rect x="1177.1" y="179.0" width="3.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.27%)</title><rect x="1177.1" y="163.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.27%)</title><rect x="1177.1" y="147.0" width="3.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.27%)</title><rect x="1177.1" y="131.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.27%)</title><rect x="1177.1" y="115.0" width="3.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.27%)</title><rect x="1177.1" y="99.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.27%)</title><rect x="1177.1" y="83.0" width="3.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="94.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.27%)</title><rect x="1177.1" y="67.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.27%)</title><rect x="1177.1" y="51.0" width="3.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="62.0"></text>
</g>
<g>
<title>LoadNode::bottom_type() const (1 samples, 0.27%)</title><rect x="1177.1" y="35.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.54%)</title><rect x="1180.4" y="1011.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="1022.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.54%)</title><rect x="1180.4" y="995.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1006.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.54%)</title><rect x="1180.4" y="979.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.4" y="990.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.27%)</title><rect x="1180.4" y="963.0" width="3.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="974.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.27%)</title><rect x="1180.4" y="947.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.4" y="958.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.27%)</title><rect x="1180.4" y="931.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="942.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.27%)</title><rect x="1180.4" y="915.0" width="3.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="926.0"></text>
</g>
<g>
<title>LinearScan::add_temp(int, int, IntervalUseKind, BasicType) (1 samples, 0.27%)</title><rect x="1180.4" y="899.0" width="3.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.4" y="910.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.27%)</title><rect x="1180.4" y="883.0" width="3.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1183.4" y="894.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.27%)</title><rect x="1183.6" y="963.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.27%)</title><rect x="1183.6" y="947.0" width="3.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="958.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.27%)</title><rect x="1183.6" y="931.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="942.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.27%)</title><rect x="1183.6" y="915.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="926.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.27%)</title><rect x="1183.6" y="899.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="910.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.27%)</title><rect x="1186.8" y="1075.0" width="3.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.8" y="1086.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.27%)</title><rect x="1186.8" y="1059.0" width="3.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.8" y="1070.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.27%)</title><rect x="1186.8" y="1043.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.8" y="1054.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.27%)</title><rect x="1186.8" y="1027.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="1038.0"></text>
</g>
</g>
</svg>
