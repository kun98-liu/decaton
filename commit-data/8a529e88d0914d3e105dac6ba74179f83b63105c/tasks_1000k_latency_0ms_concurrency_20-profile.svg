<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="949"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="949"> </text>
<g id="frames">
<g>
<title>all (1,255 samples, 100.00%)</title><rect x="10.0" y="915.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="926.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (294 samples, 23.43%)</title><rect x="10.9" y="899.0" width="276.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="910.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (294 samples, 23.43%)</title><rect x="10.9" y="883.0" width="276.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="894.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (294 samples, 23.43%)</title><rect x="10.9" y="867.0" width="276.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.9" y="878.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.32%)</title><rect x="10.9" y="851.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.32%)</title><rect x="10.9" y="835.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.24%)</title><rect x="11.9" y="819.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.9" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.24%)</title><rect x="11.9" y="803.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.24%)</title><rect x="11.9" y="787.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="11.9" y="771.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="11.9" y="755.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.9" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="11.9" y="739.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.9" y="750.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="12.8" y="739.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.characteristics (1 samples, 0.08%)</title><rect x="12.8" y="723.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="13.8" y="739.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="13.8" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.08%)</title><rect x="13.8" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.08%)</title><rect x="13.8" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="13.8" y="675.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="16.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.08%)</title><rect x="14.7" y="851.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.08%)</title><rect x="14.7" y="835.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="846.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.08%)</title><rect x="14.7" y="819.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.08%)</title><rect x="14.7" y="803.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.08%)</title><rect x="14.7" y="787.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.24%)</title><rect x="15.6" y="851.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.24%)</title><rect x="15.6" y="835.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.6" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.24%)</title><rect x="15.6" y="819.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1293265772.accept (3 samples, 0.24%)</title><rect x="15.6" y="803.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.16%)</title><rect x="16.6" y="787.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.16%)</title><rect x="16.6" y="771.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.6" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.16%)</title><rect x="16.6" y="755.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.08%)</title><rect x="18.5" y="851.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.5" y="862.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (225 samples, 17.93%)</title><rect x="19.4" y="851.0" width="211.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.4" y="862.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1683654929.accept (216 samples, 17.21%)</title><rect x="19.4" y="835.0" width="203.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.4" y="846.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (215 samples, 17.13%)</title><rect x="20.3" y="819.0" width="202.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.3" y="830.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/BlacklistedKeysFilter.shouldTake (1 samples, 0.08%)</title><rect x="21.3" y="803.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (186 samples, 14.82%)</title><rect x="22.2" y="803.0" width="174.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.2" y="814.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (186 samples, 14.82%)</title><rect x="22.2" y="787.0" width="174.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.2" y="798.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (186 samples, 14.82%)</title><rect x="22.2" y="771.0" width="174.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="782.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (186 samples, 14.82%)</title><rect x="22.2" y="755.0" width="174.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.2" y="766.0">java/util/concurrent/E..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (186 samples, 14.82%)</title><rect x="22.2" y="739.0" width="174.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.2" y="750.0">java/util/concurrent/T..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (186 samples, 14.82%)</title><rect x="22.2" y="723.0" width="174.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.2" y="734.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (145 samples, 11.55%)</title><rect x="58.0" y="707.0" width="136.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.0" y="718.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.15%)</title><rect x="58.0" y="691.0" width="25.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.0" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.15%)</title><rect x="58.0" y="675.0" width="25.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.0" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (27 samples, 2.15%)</title><rect x="58.0" y="659.0" width="25.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.0" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.72%)</title><rect x="83.3" y="691.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="86.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.72%)</title><rect x="83.3" y="675.0" width="8.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.24%)</title><rect x="85.2" y="659.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.2" y="670.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.24%)</title><rect x="85.2" y="643.0" width="2.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="88.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.32%)</title><rect x="88.0" y="659.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="91.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (109 samples, 8.69%)</title><rect x="91.8" y="691.0" width="102.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.8" y="702.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (109 samples, 8.69%)</title><rect x="91.8" y="675.0" width="102.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.8" y="686.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (105 samples, 8.37%)</title><rect x="93.7" y="659.0" width="98.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.7" y="670.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (105 samples, 8.37%)</title><rect x="93.7" y="643.0" width="98.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="96.7" y="654.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (103 samples, 8.21%)</title><rect x="95.6" y="627.0" width="96.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.6" y="638.0">sun/misc/Un..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="101.2" y="611.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="104.2" y="622.0"></text>
</g>
<g>
<title>Unsafe_Unpark (81 samples, 6.45%)</title><rect x="103.1" y="611.0" width="76.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="106.1" y="622.0">Unsafe_U..</text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.32%)</title><rect x="103.1" y="595.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="106.1" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_signal (51 samples, 4.06%)</title><rect x="106.8" y="595.0" width="48.0" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="109.8" y="606.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.40%)</title><rect x="154.8" y="595.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="157.8" y="606.0"></text>
</g>
<g>
<title>pthread_mutex_lock (21 samples, 1.67%)</title><rect x="159.5" y="595.0" width="19.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="162.5" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (10 samples, 0.80%)</title><rect x="179.2" y="611.0" width="9.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="182.2" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="188.6" y="611.0" width="2.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="191.6" y="622.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="191.5" y="611.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="194.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="192.4" y="659.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.16%)</title><rect x="194.3" y="707.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.16%)</title><rect x="194.3" y="691.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="197.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.16%)</title><rect x="194.3" y="675.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="197.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="196.2" y="707.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="196.2" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.08%)</title><rect x="196.2" y="675.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="196.2" y="659.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (20 samples, 1.59%)</title><rect x="197.1" y="803.0" width="18.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="200.1" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (20 samples, 1.59%)</title><rect x="197.1" y="787.0" width="18.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.32%)</title><rect x="212.2" y="771.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.32%)</title><rect x="212.2" y="755.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.32%)</title><rect x="212.2" y="739.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.32%)</title><rect x="212.2" y="723.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.08%)</title><rect x="212.2" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.08%)</title><rect x="212.2" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.24%)</title><rect x="213.1" y="707.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.40%)</title><rect x="215.9" y="803.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="218.9" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.40%)</title><rect x="215.9" y="787.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.9" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.40%)</title><rect x="215.9" y="771.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.16%)</title><rect x="220.6" y="803.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="223.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="221.6" y="787.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="221.6" y="771.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="221.6" y="755.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="224.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="221.6" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.6" y="750.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="222.5" y="835.0" width="1.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="225.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.48%)</title><rect x="224.4" y="835.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="227.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.48%)</title><rect x="224.4" y="819.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.48%)</title><rect x="224.4" y="803.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (6 samples, 0.48%)</title><rect x="224.4" y="787.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="227.4" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (5 samples, 0.40%)</title><rect x="225.3" y="771.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.08%)</title><rect x="230.0" y="835.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="230.0" y="819.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="233.0" y="830.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.08%)</title><rect x="231.0" y="851.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.08%)</title><rect x="231.9" y="851.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.62%)</title><rect x="232.8" y="851.0" width="54.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.8" y="862.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (58 samples, 4.62%)</title><rect x="232.8" y="835.0" width="54.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.8" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 2.31%)</title><rect x="232.8" y="819.0" width="27.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.8" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (29 samples, 2.31%)</title><rect x="232.8" y="803.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="235.8" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.31%)</title><rect x="232.8" y="787.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.8" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 1.99%)</title><rect x="232.8" y="771.0" width="23.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="235.8" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 1.99%)</title><rect x="232.8" y="755.0" width="23.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.8" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.72%)</title><rect x="233.8" y="739.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.40%)</title><rect x="237.5" y="723.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.32%)</title><rect x="238.5" y="707.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.32%)</title><rect x="238.5" y="691.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.32%)</title><rect x="238.5" y="675.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="241.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.32%)</title><rect x="238.5" y="659.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="241.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.32%)</title><rect x="238.5" y="643.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.32%)</title><rect x="238.5" y="627.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="241.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.20%)</title><rect x="242.2" y="739.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.20%)</title><rect x="242.2" y="723.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.56%)</title><rect x="246.0" y="707.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.0" y="718.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.56%)</title><rect x="246.0" y="691.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="250.7" y="675.0" width="1.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="253.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (4 samples, 0.32%)</title><rect x="252.6" y="707.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.6" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.24%)</title><rect x="253.5" y="691.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="256.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.08%)</title><rect x="256.3" y="771.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.08%)</title><rect x="256.3" y="755.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="256.3" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="256.3" y="723.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="256.3" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="256.3" y="691.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.16%)</title><rect x="257.3" y="771.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.16%)</title><rect x="257.3" y="755.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="257.3" y="739.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="260.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="257.3" y="723.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="260.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.16%)</title><rect x="257.3" y="707.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="257.3" y="691.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Value.record (1 samples, 0.08%)</title><rect x="257.3" y="675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="258.2" y="691.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.08%)</title><rect x="258.2" y="675.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.08%)</title><rect x="258.2" y="659.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.08%)</title><rect x="259.2" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (10 samples, 0.80%)</title><rect x="260.1" y="819.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (10 samples, 0.80%)</title><rect x="260.1" y="803.0" width="9.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (9 samples, 0.72%)</title><rect x="260.1" y="787.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="263.1" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="260.1" y="771.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1038119911.accept (2 samples, 0.16%)</title><rect x="260.1" y="755.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (2 samples, 0.16%)</title><rect x="260.1" y="739.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="260.1" y="723.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="263.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="260.1" y="707.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="260.1" y="691.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="263.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="260.1" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.08%)</title><rect x="261.0" y="707.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.08%)</title><rect x="261.0" y="691.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="261.0" y="675.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="264.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="261.0" y="659.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="262.0" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="262.0" y="755.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="262.0" y="739.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="262.0" y="723.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="262.0" y="707.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.0" y="718.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="262.0" y="691.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="265.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.08%)</title><rect x="262.9" y="771.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.08%)</title><rect x="262.9" y="755.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="265.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="263.9" y="771.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="263.9" y="755.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.9" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="263.9" y="739.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="263.9" y="723.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="263.9" y="707.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.9" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.08%)</title><rect x="263.9" y="691.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (4 samples, 0.32%)</title><rect x="264.8" y="771.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (4 samples, 0.32%)</title><rect x="264.8" y="755.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.32%)</title><rect x="264.8" y="739.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.32%)</title><rect x="264.8" y="723.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.08%)</title><rect x="264.8" y="707.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.08%)</title><rect x="264.8" y="691.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.08%)</title><rect x="264.8" y="675.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.08%)</title><rect x="264.8" y="659.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="267.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="264.8" y="643.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.24%)</title><rect x="265.7" y="707.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.24%)</title><rect x="265.7" y="691.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.24%)</title><rect x="265.7" y="675.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.7" y="686.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="265.7" y="659.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="268.7" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="267.6" y="659.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.6" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.estimateSize (1 samples, 0.08%)</title><rect x="267.6" y="643.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="270.6" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.08%)</title><rect x="267.6" y="627.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="270.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.08%)</title><rect x="268.6" y="787.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.allMatch (1 samples, 0.08%)</title><rect x="268.6" y="771.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="268.6" y="755.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="268.6" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="271.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.08%)</title><rect x="268.6" y="723.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="268.6" y="707.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="268.6" y="691.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.08%)</title><rect x="268.6" y="675.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.08%)</title><rect x="268.6" y="659.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.6" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.tryAdvance (1 samples, 0.08%)</title><rect x="268.6" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (12 samples, 0.96%)</title><rect x="269.5" y="819.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (11 samples, 0.88%)</title><rect x="269.5" y="803.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (11 samples, 0.88%)</title><rect x="269.5" y="787.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.08%)</title><rect x="269.5" y="771.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.08%)</title><rect x="269.5" y="755.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.5" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="269.5" y="739.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.5" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="269.5" y="723.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.5" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="269.5" y="707.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.5" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="269.5" y="691.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.5" y="702.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="269.5" y="675.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="272.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (7 samples, 0.56%)</title><rect x="270.4" y="771.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (3 samples, 0.24%)</title><rect x="270.4" y="755.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (3 samples, 0.24%)</title><rect x="270.4" y="739.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.24%)</title><rect x="270.4" y="723.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="273.4" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.24%)</title><rect x="270.4" y="707.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="273.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.16%)</title><rect x="273.3" y="755.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (2 samples, 0.16%)</title><rect x="273.3" y="739.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.16%)</title><rect x="273.3" y="723.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="276.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.16%)</title><rect x="273.3" y="707.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.3" y="718.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.16%)</title><rect x="273.3" y="691.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.3" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.16%)</title><rect x="273.3" y="675.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.16%)</title><rect x="273.3" y="659.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.3" y="670.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="274.2" y="643.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.2" y="654.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.08%)</title><rect x="274.2" y="627.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.2" y="638.0"></text>
</g>
<g>
<title>java/nio/Bits.copyFromArray (1 samples, 0.08%)</title><rect x="274.2" y="611.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.16%)</title><rect x="275.1" y="755.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.16%)</title><rect x="275.1" y="739.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="278.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="275.1" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="278.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="275.1" y="707.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="275.1" y="691.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.1" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="275.1" y="675.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.1" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="275.1" y="659.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="278.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.memoryAllocated (1 samples, 0.08%)</title><rect x="276.1" y="723.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.1" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="276.1" y="707.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (3 samples, 0.24%)</title><rect x="277.0" y="771.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (3 samples, 0.24%)</title><rect x="277.0" y="755.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (3 samples, 0.24%)</title><rect x="277.0" y="739.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (3 samples, 0.24%)</title><rect x="277.0" y="723.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (2 samples, 0.16%)</title><rect x="277.0" y="707.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.0" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.08%)</title><rect x="278.0" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.0" y="702.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.08%)</title><rect x="278.0" y="675.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="281.0" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.08%)</title><rect x="278.9" y="707.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="281.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.08%)</title><rect x="278.9" y="691.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="278.9" y="675.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="278.9" y="659.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="279.8" y="803.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="279.8" y="787.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="279.8" y="771.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="279.8" y="755.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.08%)</title><rect x="279.8" y="739.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.08%)</title><rect x="279.8" y="723.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.toStruct (1 samples, 0.08%)</title><rect x="279.8" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.08%)</title><rect x="279.8" y="691.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="282.8" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="279.8" y="675.0" width="1.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="282.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (6 samples, 0.48%)</title><rect x="280.8" y="819.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="283.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.32%)</title><rect x="282.7" y="803.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.7" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.16%)</title><rect x="282.7" y="787.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.08%)</title><rect x="282.7" y="771.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$262/316731554.accept (1 samples, 0.08%)</title><rect x="283.6" y="771.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$prepareFetchRequests$8 (1 samples, 0.08%)</title><rect x="283.6" y="755.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.08%)</title><rect x="283.6" y="739.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.6" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="283.6" y="723.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$240/696687492.apply (1 samples, 0.08%)</title><rect x="283.6" y="707.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="286.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="283.6" y="691.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.16%)</title><rect x="284.5" y="787.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="284.5" y="771.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="287.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="285.5" y="755.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="288.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.08%)</title><rect x="285.5" y="739.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="288.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.08%)</title><rect x="285.5" y="723.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="286.4" y="819.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="286.4" y="803.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.4" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (865 samples, 68.92%)</title><rect x="287.4" y="899.0" width="813.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.4" y="910.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (865 samples, 68.92%)</title><rect x="287.4" y="883.0" width="813.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.4" y="894.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (865 samples, 68.92%)</title><rect x="287.4" y="867.0" width="813.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.4" y="878.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1291183414.run (588 samples, 46.85%)</title><rect x="290.2" y="851.0" width="552.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.2" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/12..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (588 samples, 46.85%)</title><rect x="290.2" y="835.0" width="552.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.2" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (588 samples, 46.85%)</title><rect x="290.2" y="819.0" width="552.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.2" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (588 samples, 46.85%)</title><rect x="290.2" y="803.0" width="552.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.2" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (1 samples, 0.08%)</title><rect x="296.8" y="787.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="299.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (15 samples, 1.20%)</title><rect x="297.7" y="787.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.7" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (15 samples, 1.20%)</title><rect x="297.7" y="771.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 1.20%)</title><rect x="297.7" y="755.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.24%)</title><rect x="297.7" y="739.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="300.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.96%)</title><rect x="300.5" y="739.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.5" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.48%)</title><rect x="306.2" y="723.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="309.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.40%)</title><rect x="307.1" y="707.0" width="4.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="310.1" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (61 samples, 4.86%)</title><rect x="311.8" y="787.0" width="57.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.8" y="798.0">com/li..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (2 samples, 0.16%)</title><rect x="328.7" y="771.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.7" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (2 samples, 0.16%)</title><rect x="328.7" y="755.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="331.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$303/1399608794.get$Lambda (2 samples, 0.16%)</title><rect x="328.7" y="739.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="331.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="328.7" y="723.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="331.7" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="329.7" y="723.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="332.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="329.7" y="707.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="332.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="329.7" y="691.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="332.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (41 samples, 3.27%)</title><rect x="330.6" y="771.0" width="38.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.6" y="782.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (41 samples, 3.27%)</title><rect x="330.6" y="755.0" width="38.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="333.6" y="766.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (41 samples, 3.27%)</title><rect x="330.6" y="739.0" width="38.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.6" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.08%)</title><rect x="330.6" y="723.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.08%)</title><rect x="330.6" y="707.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="333.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.08%)</title><rect x="330.6" y="691.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="333.6" y="702.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="330.6" y="675.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="333.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (40 samples, 3.19%)</title><rect x="331.6" y="723.0" width="37.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.6" y="734.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$303/1399608794.accept (40 samples, 3.19%)</title><rect x="331.6" y="707.0" width="37.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.6" y="718.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (40 samples, 3.19%)</title><rect x="331.6" y="691.0" width="37.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.6" y="702.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (40 samples, 3.19%)</title><rect x="331.6" y="675.0" width="37.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.6" y="686.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (40 samples, 3.19%)</title><rect x="331.6" y="659.0" width="37.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="334.6" y="670.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (40 samples, 3.19%)</title><rect x="331.6" y="643.0" width="37.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.6" y="654.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (13 samples, 1.04%)</title><rect x="331.6" y="627.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (13 samples, 1.04%)</title><rect x="331.6" y="611.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1843344111.accept (6 samples, 0.48%)</title><rect x="338.1" y="595.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 2.15%)</title><rect x="343.8" y="627.0" width="25.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.8" y="638.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/1843344111.accept (2 samples, 0.16%)</title><rect x="367.3" y="611.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="370.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.08%)</title><rect x="369.2" y="787.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="372.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.08%)</title><rect x="369.2" y="771.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$205/47347396.get (1 samples, 0.08%)</title><rect x="369.2" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="372.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.08%)</title><rect x="369.2" y="739.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="369.2" y="723.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="372.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (146 samples, 11.63%)</title><rect x="370.1" y="787.0" width="137.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="373.1" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.56%)</title><rect x="374.8" y="771.0" width="6.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="377.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="377.6" y="755.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="380.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (134 samples, 10.68%)</title><rect x="381.4" y="771.0" width="126.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="384.4" y="782.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (134 samples, 10.68%)</title><rect x="381.4" y="755.0" width="126.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.4" y="766.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="381.4" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="384.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="381.4" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="384.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="381.4" y="707.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="384.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="381.4" y="691.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="384.4" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="381.4" y="675.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="384.4" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="381.4" y="659.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="384.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (133 samples, 10.60%)</title><rect x="382.3" y="739.0" width="125.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="385.3" y="750.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (133 samples, 10.60%)</title><rect x="382.3" y="723.0" width="125.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.3" y="734.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (133 samples, 10.60%)</title><rect x="382.3" y="707.0" width="125.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.3" y="718.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (35 samples, 2.79%)</title><rect x="382.3" y="691.0" width="32.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="385.3" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 1.04%)</title><rect x="382.3" y="675.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 1.04%)</title><rect x="382.3" y="659.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 1.04%)</title><rect x="382.3" y="643.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.04%)</title><rect x="382.3" y="627.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="385.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (13 samples, 1.04%)</title><rect x="382.3" y="611.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="385.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="392.7" y="595.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="392.7" y="579.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (22 samples, 1.75%)</title><rect x="394.6" y="675.0" width="20.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="397.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (22 samples, 1.75%)</title><rect x="394.6" y="659.0" width="20.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="394.6" y="643.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="397.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="394.6" y="627.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="397.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="394.6" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="397.6" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="394.6" y="595.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="397.6" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="394.6" y="579.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="397.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.80%)</title><rect x="395.5" y="643.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="398.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.80%)</title><rect x="395.5" y="627.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (2 samples, 0.16%)</title><rect x="403.0" y="611.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.88%)</title><rect x="404.9" y="643.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (11 samples, 0.88%)</title><rect x="404.9" y="627.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="407.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (6 samples, 0.48%)</title><rect x="404.9" y="611.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.32%)</title><rect x="410.5" y="611.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="413.5" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="412.4" y="595.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="415.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="412.4" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="415.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="412.4" y="563.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="415.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="413.4" y="595.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="416.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.08%)</title><rect x="414.3" y="611.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="414.3" y="595.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="417.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="414.3" y="579.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="417.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="414.3" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="417.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (91 samples, 7.25%)</title><rect x="415.2" y="691.0" width="85.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.2" y="702.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (2 samples, 0.16%)</title><rect x="415.2" y="675.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (2 samples, 0.16%)</title><rect x="415.2" y="659.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="418.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.16%)</title><rect x="415.2" y="643.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.16%)</title><rect x="415.2" y="627.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.releaseCharBuffer (2 samples, 0.16%)</title><rect x="415.2" y="611.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="418.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="416.2" y="595.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.56%)</title><rect x="417.1" y="675.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.56%)</title><rect x="417.1" y="659.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="420.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.16%)</title><rect x="421.8" y="643.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (5 samples, 0.40%)</title><rect x="423.7" y="675.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="426.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.24%)</title><rect x="425.6" y="659.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.24%)</title><rect x="425.6" y="643.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="428.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.24%)</title><rect x="425.6" y="627.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.48%)</title><rect x="428.4" y="675.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (6 samples, 0.48%)</title><rect x="428.4" y="659.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="431.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.48%)</title><rect x="428.4" y="643.0" width="5.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="431.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.48%)</title><rect x="428.4" y="627.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (6 samples, 0.48%)</title><rect x="428.4" y="611.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="433.1" y="595.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (71 samples, 5.66%)</title><rect x="434.0" y="675.0" width="66.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.0" y="686.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (71 samples, 5.66%)</title><rect x="434.0" y="659.0" width="66.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="437.0" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.12%)</title><rect x="435.9" y="643.0" width="13.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="438.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.08%)</title><rect x="441.6" y="627.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.16%)</title><rect x="442.5" y="627.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="445.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.16%)</title><rect x="442.5" y="611.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.16%)</title><rect x="442.5" y="595.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="445.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="444.4" y="627.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="447.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="444.4" y="611.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="447.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.24%)</title><rect x="446.3" y="627.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (55 samples, 4.38%)</title><rect x="449.1" y="643.0" width="51.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="452.1" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (55 samples, 4.38%)</title><rect x="449.1" y="627.0" width="51.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.1" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (55 samples, 4.38%)</title><rect x="449.1" y="611.0" width="51.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.1" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (22 samples, 1.75%)</title><rect x="453.8" y="595.0" width="20.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="456.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.72%)</title><rect x="460.4" y="579.0" width="8.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="463.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.72%)</title><rect x="460.4" y="563.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="463.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.72%)</title><rect x="460.4" y="547.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.56%)</title><rect x="462.3" y="531.0" width="6.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.48%)</title><rect x="463.2" y="515.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="466.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.32%)</title><rect x="465.1" y="499.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (4 samples, 0.32%)</title><rect x="465.1" y="483.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.24%)</title><rect x="468.8" y="579.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.24%)</title><rect x="468.8" y="563.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.24%)</title><rect x="471.7" y="579.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (12 samples, 0.96%)</title><rect x="474.5" y="595.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (10 samples, 0.80%)</title><rect x="476.4" y="579.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.4" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="476.4" y="563.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="479.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.72%)</title><rect x="477.3" y="563.0" width="8.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="480.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (9 samples, 0.72%)</title><rect x="477.3" y="547.0" width="8.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (9 samples, 0.72%)</title><rect x="477.3" y="531.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="485.8" y="595.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.72%)</title><rect x="486.7" y="595.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.72%)</title><rect x="486.7" y="579.0" width="8.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="489.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.72%)</title><rect x="486.7" y="563.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="489.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.72%)</title><rect x="486.7" y="547.0" width="8.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="489.7" y="558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.56%)</title><rect x="488.6" y="531.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.6" y="542.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.56%)</title><rect x="488.6" y="515.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="491.6" y="526.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (7 samples, 0.56%)</title><rect x="488.6" y="499.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.48%)</title><rect x="495.2" y="595.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.2" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.48%)</title><rect x="495.2" y="579.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="498.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.48%)</title><rect x="495.2" y="563.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.16%)</title><rect x="498.9" y="547.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.56%)</title><rect x="500.8" y="691.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="503.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.56%)</title><rect x="500.8" y="675.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="503.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.56%)</title><rect x="500.8" y="659.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.56%)</title><rect x="500.8" y="643.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.56%)</title><rect x="500.8" y="627.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.08%)</title><rect x="506.4" y="611.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="509.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (353 samples, 28.13%)</title><rect x="507.4" y="787.0" width="331.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="510.4" y="798.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="515.8" y="771.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="518.8" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (14 samples, 1.12%)</title><rect x="516.8" y="771.0" width="13.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="519.8" y="782.0"></text>
</g>
<g>
<title>[vdso] (12 samples, 0.96%)</title><rect x="518.7" y="755.0" width="11.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="521.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (66 samples, 5.26%)</title><rect x="530.0" y="771.0" width="62.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.0" y="782.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.08%)</title><rect x="530.0" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.0" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (65 samples, 5.18%)</title><rect x="530.9" y="755.0" width="61.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.9" y="766.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (62 samples, 4.94%)</title><rect x="533.7" y="739.0" width="58.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="536.7" y="750.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 0.88%)</title><rect x="533.7" y="723.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="536.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 0.88%)</title><rect x="533.7" y="707.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="536.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (11 samples, 0.88%)</title><rect x="533.7" y="691.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="536.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 0.88%)</title><rect x="533.7" y="675.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="536.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="544.1" y="723.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="547.1" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="544.1" y="707.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="544.1" y="691.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="547.1" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="544.1" y="675.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="547.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="544.1" y="659.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="547.1" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (49 samples, 3.90%)</title><rect x="545.9" y="723.0" width="46.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.9" y="734.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (38 samples, 3.03%)</title><rect x="556.3" y="707.0" width="35.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="559.3" y="718.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.16%)</title><rect x="590.1" y="691.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="593.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.56%)</title><rect x="592.0" y="771.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="595.0" y="782.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.56%)</title><rect x="592.0" y="755.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="595.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (169 samples, 13.47%)</title><rect x="598.6" y="771.0" width="158.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.6" y="782.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (158 samples, 12.59%)</title><rect x="601.4" y="755.0" width="148.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="604.4" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (55 samples, 4.38%)</title><rect x="614.6" y="739.0" width="51.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.6" y="750.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (54 samples, 4.30%)</title><rect x="614.6" y="723.0" width="50.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="617.6" y="734.0">java/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.15%)</title><rect x="625.9" y="707.0" width="25.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="628.9" y="718.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (23 samples, 1.83%)</title><rect x="626.8" y="691.0" width="21.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="629.8" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (23 samples, 1.83%)</title><rect x="626.8" y="675.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (23 samples, 1.83%)</title><rect x="626.8" y="659.0" width="21.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="629.8" y="670.0">j..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="626.8" y="643.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (21 samples, 1.67%)</title><rect x="627.7" y="643.0" width="19.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="630.7" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (5 samples, 0.40%)</title><rect x="627.7" y="627.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="630.7" y="638.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.32%)</title><rect x="628.7" y="611.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="631.7" y="622.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.32%)</title><rect x="628.7" y="595.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="631.7" y="606.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.08%)</title><rect x="628.7" y="579.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="631.7" y="590.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.16%)</title><rect x="629.6" y="579.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="632.6" y="590.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="631.5" y="579.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="634.5" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (13 samples, 1.04%)</title><rect x="632.4" y="627.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="635.4" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (9 samples, 0.72%)</title><rect x="634.3" y="611.0" width="8.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="637.3" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (5 samples, 0.40%)</title><rect x="634.3" y="595.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.3" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (4 samples, 0.32%)</title><rect x="635.3" y="579.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="638.3" y="590.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="635.3" y="563.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="638.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.08%)</title><rect x="635.3" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="638.3" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (3 samples, 0.24%)</title><rect x="636.2" y="563.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="639.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (3 samples, 0.24%)</title><rect x="636.2" y="547.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="639.2" y="558.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (2 samples, 0.16%)</title><rect x="637.1" y="531.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="640.1" y="542.0"></text>
</g>
<g>
<title>AbsSeq::dsd() const (1 samples, 0.08%)</title><rect x="637.1" y="515.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="640.1" y="526.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="638.1" y="515.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="641.1" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="639.0" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="642.0" y="606.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="640.0" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="643.0" y="606.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="640.9" y="595.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="643.9" y="606.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="641.8" y="595.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="644.8" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.16%)</title><rect x="642.8" y="611.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="645.8" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="644.7" y="627.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="647.7" y="638.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="646.5" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="649.5" y="638.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.08%)</title><rect x="647.5" y="643.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="650.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.24%)</title><rect x="648.4" y="691.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="651.4" y="702.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="651.2" y="707.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="654.2" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (14 samples, 1.12%)</title><rect x="652.2" y="707.0" width="13.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="655.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.08%)</title><rect x="665.3" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.3" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="665.3" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="668.3" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="665.3" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="668.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="665.3" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="668.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="665.3" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="668.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (8 samples, 0.64%)</title><rect x="666.3" y="739.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="669.3" y="750.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (3 samples, 0.24%)</title><rect x="666.3" y="723.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="669.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (3 samples, 0.24%)</title><rect x="666.3" y="707.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.3" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.40%)</title><rect x="669.1" y="723.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="669.1" y="707.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="672.1" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="669.1" y="691.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="672.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="669.1" y="675.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="672.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="669.1" y="659.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="672.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="670.0" y="707.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="673.0" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="673.8" y="739.0" width="1.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="676.8" y="750.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.40%)</title><rect x="675.7" y="739.0" width="4.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="678.7" y="750.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (74 samples, 5.90%)</title><rect x="680.4" y="739.0" width="69.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="683.4" y="750.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (73 samples, 5.82%)</title><rect x="681.3" y="723.0" width="68.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="684.3" y="734.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.24%)</title><rect x="681.3" y="707.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="684.3" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.24%)</title><rect x="681.3" y="691.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.24%)</title><rect x="681.3" y="675.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.24%)</title><rect x="681.3" y="659.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="684.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="684.2" y="707.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="687.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="684.2" y="691.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="687.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="684.2" y="675.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.2" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="684.2" y="659.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="687.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (68 samples, 5.42%)</title><rect x="686.0" y="707.0" width="64.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.0" y="718.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (61 samples, 4.86%)</title><rect x="692.6" y="691.0" width="57.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.6" y="702.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (38 samples, 3.03%)</title><rect x="714.2" y="675.0" width="35.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="717.2" y="686.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (8 samples, 0.64%)</title><rect x="728.3" y="659.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="731.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.04%)</title><rect x="735.9" y="659.0" width="12.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.9" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.16%)</title><rect x="746.2" y="643.0" width="1.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="749.2" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="747.1" y="627.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="750.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="747.1" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="750.1" y="622.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="748.1" y="659.0" width="1.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="751.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 0.32%)</title><rect x="750.0" y="755.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.32%)</title><rect x="750.0" y="739.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.32%)</title><rect x="750.0" y="723.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="753.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.32%)</title><rect x="750.0" y="707.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="753.0" y="718.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.32%)</title><rect x="753.7" y="755.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="756.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (69 samples, 5.50%)</title><rect x="757.5" y="771.0" width="64.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.5" y="782.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (69 samples, 5.50%)</title><rect x="757.5" y="755.0" width="64.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="760.5" y="766.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1678637145.process (27 samples, 2.15%)</title><rect x="758.4" y="739.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="761.4" y="750.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (27 samples, 2.15%)</title><rect x="758.4" y="723.0" width="25.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.4" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 1.75%)</title><rect x="763.1" y="707.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="766.1" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="764.1" y="691.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.1" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.16%)</title><rect x="764.1" y="675.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="767.1" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.16%)</title><rect x="764.1" y="659.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.1" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.16%)</title><rect x="764.1" y="643.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="767.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.16%)</title><rect x="764.1" y="627.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="765.0" y="611.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.48%)</title><rect x="766.0" y="691.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="769.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="766.0" y="675.0" width="1.8" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="769.0" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="767.8" y="675.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.8" y="686.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="767.8" y="659.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="770.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.04%)</title><rect x="771.6" y="691.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="774.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.16%)</title><rect x="783.8" y="739.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="786.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (8 samples, 0.64%)</title><rect x="785.7" y="739.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="788.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (8 samples, 0.64%)</title><rect x="785.7" y="723.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="788.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (8 samples, 0.64%)</title><rect x="785.7" y="707.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (8 samples, 0.64%)</title><rect x="785.7" y="691.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.64%)</title><rect x="785.7" y="675.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="788.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.64%)</title><rect x="785.7" y="659.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.24%)</title><rect x="793.2" y="739.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="796.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.24%)</title><rect x="793.2" y="723.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="796.2" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="796.0" y="739.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.08%)</title><rect x="796.0" y="723.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="799.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (14 samples, 1.12%)</title><rect x="797.0" y="739.0" width="13.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.40%)</title><rect x="805.4" y="723.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.4" y="734.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="805.4" y="707.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="808.4" y="718.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.16%)</title><rect x="808.3" y="707.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.3" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.24%)</title><rect x="810.1" y="739.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="813.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.24%)</title><rect x="810.1" y="723.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="813.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.48%)</title><rect x="813.0" y="739.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="813.9" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="816.9" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="813.9" y="707.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="816.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="813.9" y="691.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="816.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="813.9" y="675.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="816.9" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="813.9" y="659.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="816.9" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.32%)</title><rect x="814.8" y="723.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.32%)</title><rect x="818.6" y="739.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.32%)</title><rect x="818.6" y="723.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="821.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.32%)</title><rect x="818.6" y="707.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="821.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.16%)</title><rect x="818.6" y="691.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="821.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.16%)</title><rect x="818.6" y="675.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.16%)</title><rect x="818.6" y="659.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="821.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/2007321896.accept (2 samples, 0.16%)</title><rect x="818.6" y="643.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="821.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.16%)</title><rect x="820.5" y="691.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="823.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.35%)</title><rect x="822.4" y="771.0" width="16.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="825.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.35%)</title><rect x="822.4" y="755.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="825.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.35%)</title><rect x="822.4" y="739.0" width="16.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.56%)</title><rect x="822.4" y="723.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.56%)</title><rect x="822.4" y="707.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.56%)</title><rect x="822.4" y="691.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="825.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/132421331.accept (2 samples, 0.16%)</title><rect x="824.2" y="675.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="827.2" y="686.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.24%)</title><rect x="826.1" y="675.0" width="2.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="829.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.80%)</title><rect x="828.9" y="723.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="831.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/132421331.accept (10 samples, 0.80%)</title><rect x="828.9" y="707.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (10 samples, 0.80%)</title><rect x="828.9" y="691.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (10 samples, 0.80%)</title><rect x="828.9" y="675.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.9" y="686.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 0.80%)</title><rect x="828.9" y="659.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="831.9" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 0.80%)</title><rect x="828.9" y="643.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.9" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.64%)</title><rect x="830.8" y="627.0" width="7.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="833.8" y="638.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.64%)</title><rect x="830.8" y="611.0" width="7.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="833.8" y="622.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="838.4" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="841.4" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="839.3" y="787.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="842.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="839.3" y="771.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="842.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.08%)</title><rect x="843.1" y="851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.24%)</title><rect x="844.0" y="851.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="847.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="844.0" y="835.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="847.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.24%)</title><rect x="844.0" y="819.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="847.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.24%)</title><rect x="844.0" y="803.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="847.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1291183414.run (1 samples, 0.08%)</title><rect x="845.9" y="787.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="848.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (270 samples, 21.51%)</title><rect x="846.8" y="851.0" width="253.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="849.8" y="862.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (268 samples, 21.35%)</title><rect x="848.7" y="835.0" width="252.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.7" y="846.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (219 samples, 17.45%)</title><rect x="874.1" y="819.0" width="205.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.1" y="830.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.80%)</title><rect x="886.3" y="803.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="889.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.80%)</title><rect x="886.3" y="787.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="889.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.80%)</title><rect x="886.3" y="771.0" width="9.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="889.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.80%)</title><rect x="886.3" y="755.0" width="9.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="889.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (196 samples, 15.62%)</title><rect x="895.7" y="803.0" width="184.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.7" y="814.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (196 samples, 15.62%)</title><rect x="895.7" y="787.0" width="184.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="898.7" y="798.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="902.3" y="771.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="903.2" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="906.2" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (183 samples, 14.58%)</title><rect x="904.2" y="771.0" width="172.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="907.2" y="782.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.16%)</title><rect x="908.9" y="755.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.9" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (24 samples, 1.91%)</title><rect x="910.7" y="755.0" width="22.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="913.7" y="766.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (10 samples, 0.80%)</title><rect x="918.3" y="739.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.3" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="922.0" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="925.0" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.32%)</title><rect x="923.0" y="723.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="926.0" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (2 samples, 0.16%)</title><rect x="924.9" y="707.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="927.9" y="718.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="926.7" y="723.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="929.7" y="734.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.08%)</title><rect x="927.7" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="930.7" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.40%)</title><rect x="928.6" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.6" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="933.3" y="755.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="936.3" y="766.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.56%)</title><rect x="934.3" y="755.0" width="6.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="937.3" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (55 samples, 4.38%)</title><rect x="940.8" y="755.0" width="51.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="943.8" y="766.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (71 samples, 5.66%)</title><rect x="992.5" y="755.0" width="66.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="995.5" y="766.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.24%)</title><rect x="1059.3" y="755.0" width="2.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1062.3" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="1062.1" y="755.0" width="1.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1065.1" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1064.0" y="755.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1067.0" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.24%)</title><rect x="1064.9" y="755.0" width="2.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1067.9" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.24%)</title><rect x="1067.8" y="755.0" width="2.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1070.8" y="766.0"></text>
</g>
<g>
<title>_init (1 samples, 0.08%)</title><rect x="1070.6" y="755.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1073.6" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.24%)</title><rect x="1071.5" y="755.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1074.5" y="766.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.16%)</title><rect x="1074.4" y="755.0" width="1.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1077.4" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.16%)</title><rect x="1076.2" y="771.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1079.2" y="782.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.16%)</title><rect x="1078.1" y="771.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1081.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (22 samples, 1.75%)</title><rect x="1080.0" y="819.0" width="20.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1083.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 1.75%)</title><rect x="1080.0" y="803.0" width="20.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1083.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (22 samples, 1.75%)</title><rect x="1080.0" y="787.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1083.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (22 samples, 1.75%)</title><rect x="1080.0" y="771.0" width="20.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1083.0" y="782.0"></text>
</g>
<g>
<title>start_thread (95 samples, 7.57%)</title><rect x="1100.7" y="899.0" width="89.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1103.7" y="910.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (95 samples, 7.57%)</title><rect x="1100.7" y="883.0" width="89.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1103.7" y="894.0">java_start..</text>
</g>
<g>
<title>GangWorker::loop() (29 samples, 2.31%)</title><rect x="1100.7" y="867.0" width="27.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.7" y="878.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.08%)</title><rect x="1100.7" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.7" y="862.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.24%)</title><rect x="1101.6" y="851.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.6" y="862.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="1101.6" y="835.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.6" y="846.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1101.6" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.6" y="830.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="1102.6" y="819.0" width="1.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1105.6" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (25 samples, 1.99%)</title><rect x="1104.4" y="851.0" width="23.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.4" y="862.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.56%)</title><rect x="1104.4" y="835.0" width="6.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1107.4" y="846.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.08%)</title><rect x="1104.4" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1107.4" y="830.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="1105.4" y="819.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.4" y="830.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.08%)</title><rect x="1106.3" y="803.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.3" y="814.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.32%)</title><rect x="1107.3" y="819.0" width="3.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1110.3" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.40%)</title><rect x="1111.0" y="835.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.0" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.16%)</title><rect x="1111.0" y="819.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.0" y="830.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1111.0" y="803.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.0" y="814.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="1111.0" y="787.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.0" y="798.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="1111.0" y="771.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.0" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1112.0" y="803.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.0" y="814.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="1112.0" y="787.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.0" y="798.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CLDClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.08%)</title><rect x="1112.0" y="771.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.0" y="782.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**), OopClosure*) (1 samples, 0.08%)</title><rect x="1112.0" y="755.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.0" y="766.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1112.0" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.0" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="1112.9" y="819.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.9" y="830.0"></text>
</g>
<g>
<title>SystemDictionary::roots_oops_do(OopClosure*, OopClosure*) (3 samples, 0.24%)</title><rect x="1112.9" y="803.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.9" y="814.0"></text>
</g>
<g>
<title>Dictionary::roots_oops_do(OopClosure*, OopClosure*) (3 samples, 0.24%)</title><rect x="1112.9" y="787.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1115.9" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (13 samples, 1.04%)</title><rect x="1115.7" y="835.0" width="12.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1118.7" y="846.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (13 samples, 1.04%)</title><rect x="1115.7" y="819.0" width="12.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.7" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (11 samples, 0.88%)</title><rect x="1115.7" y="803.0" width="10.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.7" y="814.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (11 samples, 0.88%)</title><rect x="1115.7" y="787.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.7" y="798.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 0.88%)</title><rect x="1115.7" y="771.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.7" y="782.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (11 samples, 0.88%)</title><rect x="1115.7" y="755.0" width="10.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1118.7" y="766.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1121.4" y="739.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.4" y="750.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.32%)</title><rect x="1122.3" y="739.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.3" y="750.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.08%)</title><rect x="1124.2" y="723.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.2" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1125.1" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1128.1" y="734.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, int) (1 samples, 0.08%)</title><rect x="1125.1" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1128.1" y="718.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.16%)</title><rect x="1126.1" y="803.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.16%)</title><rect x="1126.1" y="787.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.1" y="798.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (2 samples, 0.16%)</title><rect x="1126.1" y="771.0" width="1.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.1" y="782.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.08%)</title><rect x="1126.1" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.1" y="766.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.08%)</title><rect x="1126.1" y="739.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.1" y="750.0"></text>
</g>
<g>
<title>HeapRegionRemSet::claim_iter() (1 samples, 0.08%)</title><rect x="1127.0" y="755.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::run() (66 samples, 5.26%)</title><rect x="1127.9" y="867.0" width="62.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.9" y="878.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (66 samples, 5.26%)</title><rect x="1127.9" y="851.0" width="62.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.9" y="862.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (66 samples, 5.26%)</title><rect x="1127.9" y="835.0" width="62.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.9" y="846.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (66 samples, 5.26%)</title><rect x="1127.9" y="819.0" width="62.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="830.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (66 samples, 5.26%)</title><rect x="1127.9" y="803.0" width="62.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.9" y="814.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (66 samples, 5.26%)</title><rect x="1127.9" y="787.0" width="62.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.9" y="798.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 2.63%)</title><rect x="1127.9" y="771.0" width="31.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.9" y="782.0">Co..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.24%)</title><rect x="1127.9" y="755.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.9" y="766.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1127.9" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.9" y="750.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.16%)</title><rect x="1128.9" y="739.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="750.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.16%)</title><rect x="1128.9" y="723.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.9" y="734.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.08%)</title><rect x="1129.8" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.8" y="718.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.08%)</title><rect x="1129.8" y="691.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.8" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.08%)</title><rect x="1130.8" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.8" y="766.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.08%)</title><rect x="1130.8" y="739.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.8" y="750.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.08%)</title><rect x="1130.8" y="723.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1133.8" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.16%)</title><rect x="1131.7" y="755.0" width="1.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.7" y="766.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1131.7" y="739.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.7" y="750.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.08%)</title><rect x="1132.6" y="739.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.6" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.16%)</title><rect x="1133.6" y="755.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.6" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="1133.6" y="739.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1133.6" y="723.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.6" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1134.5" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.5" y="734.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1134.5" y="707.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.5" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 1.99%)</title><rect x="1135.5" y="755.0" width="23.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.5" y="766.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.40%)</title><rect x="1135.5" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.5" y="750.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::rule() const (1 samples, 0.08%)</title><rect x="1138.3" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.3" y="734.0"></text>
</g>
<g>
<title>tlsLoadPNode::rule() const (1 samples, 0.08%)</title><rect x="1139.2" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1142.2" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.32%)</title><rect x="1140.2" y="739.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1142.0" y="723.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.0" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1142.0" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.0" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1143.0" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.0" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1143.9" y="739.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.9" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1143.9" y="723.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.9" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.16%)</title><rect x="1144.9" y="739.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="750.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.08%)</title><rect x="1145.8" y="723.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.8" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.32%)</title><rect x="1146.7" y="739.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.7" y="750.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.08%)</title><rect x="1148.6" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.6" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::eliminate_copy_of_constant(Node*, Node*, Block*, Node_List&amp;, Node_List&amp;, int, int) (1 samples, 0.08%)</title><rect x="1149.6" y="723.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.6" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1150.5" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.5" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1150.5" y="723.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.5" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1151.5" y="739.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="750.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1151.5" y="723.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.5" y="734.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.48%)</title><rect x="1152.4" y="739.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="750.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.16%)</title><rect x="1156.2" y="723.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="734.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1158.0" y="739.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1161.0" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (26 samples, 2.07%)</title><rect x="1159.0" y="771.0" width="24.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.0" y="782.0">C..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.08%)</title><rect x="1159.0" y="755.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.0" y="766.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.08%)</title><rect x="1159.0" y="739.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.0" y="750.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1159.9" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.08%)</title><rect x="1159.9" y="739.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="750.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.08%)</title><rect x="1159.9" y="723.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.08%)</title><rect x="1160.9" y="755.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.08%)</title><rect x="1160.9" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1160.9" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1160.9" y="707.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1160.9" y="691.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1160.9" y="675.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1160.9" y="659.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1163.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1160.9" y="643.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.9" y="654.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1160.9" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.9" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.08%)</title><rect x="1161.8" y="755.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="766.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.08%)</title><rect x="1161.8" y="739.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (18 samples, 1.43%)</title><rect x="1162.7" y="755.0" width="17.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.7" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1162.7" y="739.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.08%)</title><rect x="1162.7" y="723.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.7" y="734.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.08%)</title><rect x="1162.7" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.7" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1162.7" y="691.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.08%)</title><rect x="1163.7" y="739.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1164.6" y="739.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (11 samples, 0.88%)</title><rect x="1166.5" y="739.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (10 samples, 0.80%)</title><rect x="1167.4" y="723.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1167.4" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 0.72%)</title><rect x="1168.4" y="707.0" width="8.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.16%)</title><rect x="1175.0" y="691.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.16%)</title><rect x="1176.8" y="739.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.08%)</title><rect x="1177.8" y="723.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1178.7" y="739.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.08%)</title><rect x="1178.7" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.08%)</title><rect x="1178.7" y="707.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.7" y="718.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.08%)</title><rect x="1178.7" y="691.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1181.7" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1179.7" y="755.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1179.7" y="739.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1179.7" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1179.7" y="707.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.08%)</title><rect x="1180.6" y="755.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.08%)</title><rect x="1180.6" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.6" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1180.6" y="723.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="734.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.08%)</title><rect x="1180.6" y="707.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="718.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.08%)</title><rect x="1180.6" y="691.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.6" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.08%)</title><rect x="1180.6" y="675.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.6" y="686.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, Node*, Node_Stack*, int) (1 samples, 0.08%)</title><rect x="1180.6" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.6" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1181.5" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.5" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1181.5" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.5" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.5" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.08%)</title><rect x="1181.5" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.5" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.08%)</title><rect x="1182.5" y="755.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.40%)</title><rect x="1183.4" y="771.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.40%)</title><rect x="1183.4" y="755.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.40%)</title><rect x="1183.4" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.40%)</title><rect x="1183.4" y="723.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.40%)</title><rect x="1183.4" y="707.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1183.4" y="691.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.4" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="675.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="686.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="659.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.4" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1183.4" y="643.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.4" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.08%)</title><rect x="1183.4" y="627.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.08%)</title><rect x="1183.4" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1183.4" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.4" y="579.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.4" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1183.4" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.4" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1183.4" y="547.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.4" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1183.4" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.4" y="499.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.4" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1183.4" y="483.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.4" y="494.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.08%)</title><rect x="1183.4" y="467.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="478.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.08%)</title><rect x="1183.4" y="451.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.4" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call(CallInfo&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="435.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.4" y="446.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.4" y="430.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="403.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.4" y="414.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, bool, bool, Thread*) (1 samples, 0.08%)</title><rect x="1183.4" y="387.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.4" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1184.4" y="675.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1184.4" y="659.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1184.4" y="643.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1184.4" y="627.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1184.4" y="611.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1184.4" y="595.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1184.4" y="579.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1184.4" y="563.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.16%)</title><rect x="1184.4" y="547.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.16%)</title><rect x="1184.4" y="531.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.16%)</title><rect x="1184.4" y="515.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="526.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.08%)</title><rect x="1184.4" y="499.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.08%)</title><rect x="1184.4" y="483.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.08%)</title><rect x="1184.4" y="467.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.3" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.3" y="483.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.3" y="467.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.3" y="451.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.3" y="435.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.3" y="419.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.3" y="403.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="414.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.3" y="387.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.3" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.08%)</title><rect x="1185.3" y="371.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.3" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="579.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1186.2" y="547.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1186.2" y="531.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1186.2" y="515.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1186.2" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1186.2" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="467.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="451.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1186.2" y="435.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1186.2" y="419.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1186.2" y="403.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1186.2" y="387.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1186.2" y="371.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1186.2" y="339.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1186.2" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1186.2" y="307.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1186.2" y="291.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1186.2" y="275.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="259.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1186.2" y="243.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1186.2" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1186.2" y="211.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1186.2" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1186.2" y="179.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="163.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1186.2" y="147.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1186.2" y="131.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1186.2" y="115.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1186.2" y="99.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1186.2" y="83.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1186.2" y="67.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1186.2" y="51.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="62.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1186.2" y="35.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.08%)</title><rect x="1187.2" y="691.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.08%)</title><rect x="1187.2" y="675.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="686.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool) (1 samples, 0.08%)</title><rect x="1187.2" y="659.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="670.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.08%)</title><rect x="1187.2" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.2" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1187.2" y="627.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.2" y="638.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1187.2" y="611.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.2" y="622.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1187.2" y="595.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="606.0"></text>
</g>
<g>
<title>Compile::get_alias_index(TypePtr const*) (1 samples, 0.08%)</title><rect x="1187.2" y="579.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="590.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1187.2" y="563.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="574.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.16%)</title><rect x="1188.1" y="771.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.1" y="782.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.16%)</title><rect x="1188.1" y="755.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.1" y="766.0"></text>
</g>
</g>
</svg>
