<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (215 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.47%)</title><rect x="10.0" y="883.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 8.37%)</title><rect x="15.5" y="883.0" width="98.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="894.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (18 samples, 8.37%)</title><rect x="15.5" y="867.0" width="98.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="878.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.47%)</title><rect x="15.5" y="851.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.47%)</title><rect x="15.5" y="835.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.47%)</title><rect x="15.5" y="819.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.47%)</title><rect x="15.5" y="803.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.47%)</title><rect x="15.5" y="787.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.47%)</title><rect x="15.5" y="771.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 7.91%)</title><rect x="21.0" y="851.0" width="93.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.0" y="862.0">com/linecor..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (8 samples, 3.72%)</title><rect x="21.0" y="835.0" width="43.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.0" y="846.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/1361869947.accept (8 samples, 3.72%)</title><rect x="21.0" y="819.0" width="43.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.0" y="830.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (8 samples, 3.72%)</title><rect x="21.0" y="803.0" width="43.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.0" y="814.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (6 samples, 2.79%)</title><rect x="21.0" y="787.0" width="32.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.0" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (6 samples, 2.79%)</title><rect x="21.0" y="771.0" width="32.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.0" y="782.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (6 samples, 2.79%)</title><rect x="21.0" y="755.0" width="32.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.0" y="766.0">co..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (6 samples, 2.79%)</title><rect x="21.0" y="739.0" width="32.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="24.0" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 2.79%)</title><rect x="21.0" y="723.0" width="32.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.0" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.40%)</title><rect x="37.4" y="707.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.47%)</title><rect x="48.4" y="691.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="51.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.93%)</title><rect x="53.9" y="787.0" width="11.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.93%)</title><rect x="53.9" y="771.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetState.&lt;init&gt; (1 samples, 0.47%)</title><rect x="59.4" y="755.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="59.4" y="739.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="62.4" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="59.4" y="723.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="62.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.47%)</title><rect x="59.4" y="707.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="62.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.47%)</title><rect x="59.4" y="691.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="62.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.47%)</title><rect x="59.4" y="675.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="62.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.47%)</title><rect x="59.4" y="659.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="62.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.19%)</title><rect x="64.9" y="835.0" width="49.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.9" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.19%)</title><rect x="64.9" y="819.0" width="49.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="67.9" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.19%)</title><rect x="64.9" y="803.0" width="49.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="67.9" y="814.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.86%)</title><rect x="64.9" y="787.0" width="21.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.9" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.86%)</title><rect x="64.9" y="771.0" width="21.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="67.9" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.93%)</title><rect x="64.9" y="755.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.47%)</title><rect x="64.9" y="739.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="67.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.47%)</title><rect x="64.9" y="723.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="67.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.47%)</title><rect x="64.9" y="707.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.47%)</title><rect x="64.9" y="691.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.parse (1 samples, 0.47%)</title><rect x="64.9" y="675.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.47%)</title><rect x="64.9" y="659.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.read (1 samples, 0.47%)</title><rect x="64.9" y="643.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.47%)</title><rect x="64.9" y="627.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.read (1 samples, 0.47%)</title><rect x="64.9" y="611.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponsePartition.&lt;init&gt; (1 samples, 0.47%)</title><rect x="64.9" y="595.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponsePartition.read (1 samples, 0.47%)</title><rect x="64.9" y="579.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.47%)</title><rect x="70.4" y="739.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="70.4" y="723.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.47%)</title><rect x="70.4" y="707.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.47%)</title><rect x="70.4" y="691.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.47%)</title><rect x="70.4" y="675.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.47%)</title><rect x="70.4" y="659.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.47%)</title><rect x="75.9" y="755.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="78.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.47%)</title><rect x="75.9" y="739.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.47%)</title><rect x="75.9" y="723.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.47%)</title><rect x="75.9" y="707.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.47%)</title><rect x="81.3" y="755.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.47%)</title><rect x="81.3" y="739.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.3" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.47%)</title><rect x="81.3" y="723.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="84.3" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="81.3" y="707.0" width="5.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="84.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 2.33%)</title><rect x="86.8" y="787.0" width="27.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="89.8" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.33%)</title><rect x="86.8" y="771.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.8" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (4 samples, 1.86%)</title><rect x="86.8" y="755.0" width="22.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.8" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 1.86%)</title><rect x="86.8" y="739.0" width="22.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.8" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (4 samples, 1.86%)</title><rect x="86.8" y="723.0" width="22.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.8" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.47%)</title><rect x="103.3" y="707.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="106.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.47%)</title><rect x="103.3" y="691.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.47%)</title><rect x="103.3" y="675.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.47%)</title><rect x="103.3" y="659.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="106.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.47%)</title><rect x="103.3" y="643.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="106.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.47%)</title><rect x="103.3" y="627.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.47%)</title><rect x="103.3" y="611.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.47%)</title><rect x="108.8" y="755.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Thread.run (92 samples, 42.79%)</title><rect x="114.3" y="883.0" width="504.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.3" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (92 samples, 42.79%)</title><rect x="114.3" y="867.0" width="504.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="117.3" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (92 samples, 42.79%)</title><rect x="114.3" y="851.0" width="504.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.3" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/2106983701.run (88 samples, 40.93%)</title><rect x="130.7" y="835.0" width="483.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.7" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (88 samples, 40.93%)</title><rect x="130.7" y="819.0" width="483.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.7" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (88 samples, 40.93%)</title><rect x="130.7" y="803.0" width="483.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.7" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (87 samples, 40.47%)</title><rect x="136.2" y="787.0" width="477.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="139.2" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (7 samples, 3.26%)</title><rect x="141.7" y="771.0" width="38.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.7" y="782.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.86%)</title><rect x="158.2" y="755.0" width="21.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="161.2" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.86%)</title><rect x="158.2" y="739.0" width="21.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="161.2" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.86%)</title><rect x="158.2" y="723.0" width="21.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.47%)</title><rect x="158.2" y="707.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.47%)</title><rect x="158.2" y="691.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="161.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.40%)</title><rect x="163.7" y="707.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$368/1206807830.accept (3 samples, 1.40%)</title><rect x="163.7" y="691.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="166.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (3 samples, 1.40%)</title><rect x="163.7" y="675.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.40%)</title><rect x="163.7" y="659.0" width="16.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="166.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.40%)</title><rect x="163.7" y="643.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="166.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.93%)</title><rect x="169.2" y="627.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="172.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.93%)</title><rect x="169.2" y="611.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="172.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.93%)</title><rect x="169.2" y="595.0" width="10.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="172.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$356/300712084.accept (1 samples, 0.47%)</title><rect x="169.2" y="579.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.2" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="174.7" y="579.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="177.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (10 samples, 4.65%)</title><rect x="180.1" y="771.0" width="54.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.1" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (10 samples, 4.65%)</title><rect x="180.1" y="755.0" width="54.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.1" y="766.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (10 samples, 4.65%)</title><rect x="180.1" y="739.0" width="54.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.1" y="750.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.65%)</title><rect x="180.1" y="723.0" width="54.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.1" y="734.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (10 samples, 4.65%)</title><rect x="180.1" y="707.0" width="54.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="183.1" y="718.0">com/l..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (10 samples, 4.65%)</title><rect x="180.1" y="691.0" width="54.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.1" y="702.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 0.93%)</title><rect x="180.1" y="675.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="183.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.47%)</title><rect x="180.1" y="659.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.47%)</title><rect x="180.1" y="643.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.47%)</title><rect x="180.1" y="627.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="180.1" y="611.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="183.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.47%)</title><rect x="180.1" y="595.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="183.1" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.47%)</title><rect x="180.1" y="579.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.47%)</title><rect x="185.6" y="659.0" width="5.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="188.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.47%)</title><rect x="185.6" y="643.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (1 samples, 0.47%)</title><rect x="185.6" y="627.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="188.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.47%)</title><rect x="185.6" y="611.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="188.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (7 samples, 3.26%)</title><rect x="191.1" y="675.0" width="38.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.1" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.47%)</title><rect x="191.1" y="659.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.47%)</title><rect x="191.1" y="643.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="194.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.47%)</title><rect x="191.1" y="627.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.47%)</title><rect x="191.1" y="611.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.47%)</title><rect x="196.6" y="659.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.47%)</title><rect x="196.6" y="643.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (5 samples, 2.33%)</title><rect x="202.1" y="659.0" width="27.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="205.1" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (5 samples, 2.33%)</title><rect x="202.1" y="643.0" width="27.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="205.1" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.33%)</title><rect x="202.1" y="627.0" width="27.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.1" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.33%)</title><rect x="202.1" y="611.0" width="27.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="205.1" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.33%)</title><rect x="202.1" y="595.0" width="27.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.1" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.40%)</title><rect x="202.1" y="579.0" width="16.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.47%)</title><rect x="207.6" y="563.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.47%)</title><rect x="207.6" y="547.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="210.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.47%)</title><rect x="207.6" y="531.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="210.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.47%)</title><rect x="207.6" y="515.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="210.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.47%)</title><rect x="207.6" y="499.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.47%)</title><rect x="213.1" y="563.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.47%)</title><rect x="213.1" y="547.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="216.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.47%)</title><rect x="213.1" y="531.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 0.93%)</title><rect x="218.6" y="579.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="221.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.93%)</title><rect x="218.6" y="563.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="221.6" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.93%)</title><rect x="218.6" y="547.0" width="10.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="221.6" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.93%)</title><rect x="218.6" y="531.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.6" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 0.93%)</title><rect x="218.6" y="515.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="221.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.47%)</title><rect x="229.5" y="675.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.47%)</title><rect x="229.5" y="659.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.47%)</title><rect x="229.5" y="643.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="232.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.47%)</title><rect x="229.5" y="627.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="232.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.47%)</title><rect x="229.5" y="611.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (69 samples, 32.09%)</title><rect x="235.0" y="771.0" width="378.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.0" y="782.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (13 samples, 6.05%)</title><rect x="240.5" y="755.0" width="71.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="243.5" y="766.0">com/line..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 6.05%)</title><rect x="240.5" y="739.0" width="71.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="243.5" y="750.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 5.58%)</title><rect x="246.0" y="723.0" width="65.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.0" y="734.0">ch/qos/..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 5.12%)</title><rect x="251.5" y="707.0" width="60.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="254.5" y="718.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.86%)</title><rect x="289.9" y="691.0" width="22.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.9" y="702.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.86%)</title><rect x="289.9" y="675.0" width="22.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.9" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.93%)</title><rect x="311.9" y="755.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.9" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.93%)</title><rect x="311.9" y="739.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (18 samples, 8.37%)</title><rect x="322.8" y="755.0" width="98.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.8" y="766.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (17 samples, 7.91%)</title><rect x="322.8" y="739.0" width="93.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.8" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (7 samples, 3.26%)</title><rect x="322.8" y="723.0" width="38.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.8" y="734.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 2.79%)</title><rect x="322.8" y="707.0" width="33.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.8" y="718.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 2.33%)</title><rect x="328.3" y="691.0" width="27.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="331.3" y="702.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.93%)</title><rect x="333.8" y="675.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.8" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 0.93%)</title><rect x="333.8" y="659.0" width="11.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.8" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.93%)</title><rect x="333.8" y="643.0" width="11.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="336.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.93%)</title><rect x="333.8" y="627.0" width="11.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="336.8" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.93%)</title><rect x="333.8" y="611.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="336.8" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.93%)</title><rect x="333.8" y="595.0" width="11.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="336.8" y="606.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.93%)</title><rect x="333.8" y="579.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="336.8" y="590.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.47%)</title><rect x="333.8" y="563.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="336.8" y="574.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.47%)</title><rect x="333.8" y="547.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="336.8" y="558.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.47%)</title><rect x="339.3" y="563.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="342.3" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.93%)</title><rect x="344.8" y="675.0" width="11.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="347.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.47%)</title><rect x="355.8" y="707.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.8" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.47%)</title><rect x="355.8" y="691.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="358.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.47%)</title><rect x="355.8" y="675.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="358.8" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 4.65%)</title><rect x="361.3" y="723.0" width="54.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.3" y="734.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (10 samples, 4.65%)</title><rect x="361.3" y="707.0" width="54.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="364.3" y="718.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.47%)</title><rect x="361.3" y="691.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="364.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.47%)</title><rect x="361.3" y="675.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="364.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.47%)</title><rect x="361.3" y="659.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="364.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.47%)</title><rect x="361.3" y="643.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="364.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (9 samples, 4.19%)</title><rect x="366.7" y="691.0" width="49.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="369.7" y="702.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (9 samples, 4.19%)</title><rect x="366.7" y="675.0" width="49.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.7" y="686.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 1.86%)</title><rect x="394.2" y="659.0" width="21.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="397.2" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.47%)</title><rect x="405.2" y="643.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="408.2" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.47%)</title><rect x="410.7" y="643.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="413.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.47%)</title><rect x="416.1" y="739.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="419.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.47%)</title><rect x="416.1" y="723.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.47%)</title><rect x="416.1" y="707.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="419.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.47%)</title><rect x="416.1" y="691.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="419.1" y="702.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="416.1" y="675.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="419.1" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="416.1" y="659.0" width="5.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="419.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (35 samples, 16.28%)</title><rect x="421.6" y="755.0" width="192.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.6" y="766.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (35 samples, 16.28%)</title><rect x="421.6" y="739.0" width="192.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="424.6" y="750.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.47%)</title><rect x="427.1" y="723.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="430.1" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="427.1" y="707.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="430.1" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.47%)</title><rect x="427.1" y="691.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="430.1" y="702.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool) (1 samples, 0.47%)</title><rect x="427.1" y="675.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="430.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1751018477.process (26 samples, 12.09%)</title><rect x="432.6" y="723.0" width="142.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.6" y="734.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (26 samples, 12.09%)</title><rect x="432.6" y="707.0" width="142.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.6" y="718.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 12.09%)</title><rect x="432.6" y="691.0" width="142.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.6" y="702.0">com/linecorp/decat..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="432.6" y="675.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="435.6" y="686.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.47%)</title><rect x="432.6" y="659.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="435.6" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.47%)</title><rect x="432.6" y="643.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="435.6" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.47%)</title><rect x="432.6" y="627.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (23 samples, 10.70%)</title><rect x="438.1" y="675.0" width="126.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="441.1" y="686.0">com/linecorp/dec..</text>
</g>
<g>
<title>java/lang/Thread.sleep (23 samples, 10.70%)</title><rect x="438.1" y="659.0" width="126.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="441.1" y="670.0">java/lang/Thread..</text>
</g>
<g>
<title>JVM_Sleep (20 samples, 9.30%)</title><rect x="454.6" y="643.0" width="109.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="457.6" y="654.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.47%)</title><rect x="465.5" y="627.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="468.5" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.93%)</title><rect x="471.0" y="627.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="474.0" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.93%)</title><rect x="482.0" y="627.0" width="11.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="485.0" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.47%)</title><rect x="493.0" y="627.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="496.0" y="638.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (12 samples, 5.58%)</title><rect x="498.5" y="627.0" width="65.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="501.5" y="638.0">os::sle..</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.40%)</title><rect x="509.4" y="611.0" width="16.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="512.4" y="622.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (4 samples, 1.86%)</title><rect x="525.9" y="611.0" width="22.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="528.9" y="622.0">_..</text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.47%)</title><rect x="547.9" y="611.0" width="5.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="550.9" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.47%)</title><rect x="553.3" y="611.0" width="5.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="556.3" y="622.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.47%)</title><rect x="558.8" y="611.0" width="5.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="561.8" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.93%)</title><rect x="564.3" y="675.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.47%)</title><rect x="575.3" y="723.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.47%)</title><rect x="575.3" y="707.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="578.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.47%)</title><rect x="575.3" y="691.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="578.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.47%)</title><rect x="575.3" y="675.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="578.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.47%)</title><rect x="575.3" y="659.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.47%)</title><rect x="575.3" y="643.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="578.3" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.93%)</title><rect x="580.8" y="723.0" width="11.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="583.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.93%)</title><rect x="580.8" y="707.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="583.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.40%)</title><rect x="591.8" y="723.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="594.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.40%)</title><rect x="591.8" y="707.0" width="16.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="594.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.40%)</title><rect x="591.8" y="691.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="594.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.40%)</title><rect x="591.8" y="675.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.40%)</title><rect x="591.8" y="659.0" width="16.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.8" y="670.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.93%)</title><rect x="597.3" y="643.0" width="10.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="600.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.47%)</title><rect x="608.2" y="723.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="611.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.47%)</title><rect x="613.7" y="835.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="616.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.47%)</title><rect x="613.7" y="819.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="616.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.47%)</title><rect x="619.2" y="883.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="622.2" y="894.0"></text>
</g>
<g>
<title>start_thread (103 samples, 47.91%)</title><rect x="624.7" y="883.0" width="565.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="627.7" y="894.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (103 samples, 47.91%)</title><rect x="624.7" y="867.0" width="565.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="627.7" y="878.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 6.51%)</title><rect x="624.7" y="851.0" width="76.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="627.7" y="862.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 6.51%)</title><rect x="624.7" y="835.0" width="76.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="627.7" y="846.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 6.51%)</title><rect x="624.7" y="819.0" width="76.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="627.7" y="830.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 6.51%)</title><rect x="624.7" y="803.0" width="76.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="627.7" y="814.0">G1ParSca..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (11 samples, 5.12%)</title><rect x="635.7" y="787.0" width="60.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="638.7" y="798.0">G1ParS..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (4 samples, 1.86%)</title><rect x="674.1" y="771.0" width="21.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="677.1" y="782.0">I..</text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.47%)</title><rect x="690.6" y="755.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="693.6" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.47%)</title><rect x="696.0" y="787.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="699.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (89 samples, 41.40%)</title><rect x="701.5" y="851.0" width="488.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="704.5" y="862.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (89 samples, 41.40%)</title><rect x="701.5" y="835.0" width="488.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="704.5" y="846.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (89 samples, 41.40%)</title><rect x="701.5" y="819.0" width="488.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="704.5" y="830.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (89 samples, 41.40%)</title><rect x="701.5" y="803.0" width="488.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="704.5" y="814.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 39.53%)</title><rect x="701.5" y="787.0" width="466.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.5" y="798.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 39.53%)</title><rect x="701.5" y="771.0" width="466.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="704.5" y="782.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool..</text>
</g>
<g>
<title>Compile::Code_Gen() (55 samples, 25.58%)</title><rect x="701.5" y="755.0" width="301.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="704.5" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.47%)</title><rect x="701.5" y="739.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="704.5" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.47%)</title><rect x="701.5" y="723.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="704.5" y="734.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.47%)</title><rect x="701.5" y="707.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="704.5" y="718.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.47%)</title><rect x="701.5" y="691.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="704.5" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.47%)</title><rect x="707.0" y="739.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="710.0" y="750.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.47%)</title><rect x="707.0" y="723.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="710.0" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.47%)</title><rect x="707.0" y="707.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="710.0" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.47%)</title><rect x="707.0" y="691.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="710.0" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.33%)</title><rect x="712.5" y="739.0" width="27.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="715.5" y="750.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.47%)</title><rect x="712.5" y="723.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.5" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.86%)</title><rect x="718.0" y="723.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="721.0" y="734.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.93%)</title><rect x="729.0" y="707.0" width="11.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="732.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.40%)</title><rect x="740.0" y="739.0" width="16.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="743.0" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.40%)</title><rect x="740.0" y="723.0" width="16.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="743.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (3 samples, 1.40%)</title><rect x="740.0" y="707.0" width="16.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="743.0" y="718.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.93%)</title><rect x="745.4" y="691.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="748.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (45 samples, 20.93%)</title><rect x="756.4" y="739.0" width="247.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="759.4" y="750.0">PhaseChaitin::Register_Allocate()</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.47%)</title><rect x="767.4" y="723.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="770.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.40%)</title><rect x="772.9" y="723.0" width="16.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="775.9" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.47%)</title><rect x="772.9" y="707.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="775.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.47%)</title><rect x="778.4" y="707.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="781.4" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.47%)</title><rect x="783.9" y="707.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="786.9" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 1.86%)</title><rect x="789.3" y="723.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="792.3" y="734.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="789.3" y="707.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="792.3" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 1.40%)</title><rect x="794.8" y="707.0" width="16.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.8" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.93%)</title><rect x="800.3" y="691.0" width="11.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="803.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.33%)</title><rect x="811.3" y="723.0" width="27.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="814.3" y="734.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 3.72%)</title><rect x="838.7" y="723.0" width="44.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="841.7" y="734.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.47%)</title><rect x="844.2" y="707.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="847.2" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.93%)</title><rect x="849.7" y="707.0" width="11.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="852.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.93%)</title><rect x="860.7" y="707.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="863.7" y="718.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.47%)</title><rect x="871.7" y="707.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="874.7" y="718.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.47%)</title><rect x="877.2" y="707.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="880.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.93%)</title><rect x="882.7" y="723.0" width="10.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="885.7" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="888.1" y="707.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.1" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="888.1" y="691.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 3.26%)</title><rect x="893.6" y="723.0" width="38.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="896.6" y="734.0">Pha..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.47%)</title><rect x="915.6" y="707.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="918.6" y="718.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.47%)</title><rect x="921.1" y="707.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="924.1" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="926.6" y="707.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="929.6" y="718.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.93%)</title><rect x="932.0" y="723.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="935.0" y="734.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.93%)</title><rect x="932.0" y="707.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="935.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.47%)</title><rect x="932.0" y="691.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="935.0" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.47%)</title><rect x="937.5" y="691.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="940.5" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.93%)</title><rect x="943.0" y="723.0" width="11.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="946.0" y="734.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="948.5" y="707.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="951.5" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.93%)</title><rect x="954.0" y="723.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.0" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.47%)</title><rect x="965.0" y="723.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="968.0" y="734.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.47%)</title><rect x="965.0" y="707.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="968.0" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.86%)</title><rect x="970.5" y="723.0" width="21.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.5" y="734.0">P..</text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.40%)</title><rect x="976.0" y="707.0" width="16.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="979.0" y="718.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.47%)</title><rect x="992.4" y="723.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.4" y="734.0"></text>
</g>
<g>
<title>compU_rRegNode::out_RegMask() const (1 samples, 0.47%)</title><rect x="997.9" y="723.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.9" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 10.23%)</title><rect x="1003.4" y="755.0" width="120.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1006.4" y="766.0">Compile::Optimi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.47%)</title><rect x="1003.4" y="739.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1006.4" y="750.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.47%)</title><rect x="1003.4" y="723.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1006.4" y="734.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.47%)</title><rect x="1008.9" y="739.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1011.9" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.47%)</title><rect x="1008.9" y="723.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.9" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.47%)</title><rect x="1008.9" y="707.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.9" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1008.9" y="691.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1011.9" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="1008.9" y="675.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.9" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.47%)</title><rect x="1008.9" y="659.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1011.9" y="670.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.47%)</title><rect x="1008.9" y="643.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1011.9" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.47%)</title><rect x="1014.4" y="739.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1017.4" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (13 samples, 6.05%)</title><rect x="1019.9" y="739.0" width="71.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.9" y="750.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.93%)</title><rect x="1019.9" y="723.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.93%)</title><rect x="1030.8" y="723.0" width="11.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1033.8" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.47%)</title><rect x="1036.3" y="707.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.47%)</title><rect x="1036.3" y="691.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 3.72%)</title><rect x="1041.8" y="723.0" width="43.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1044.8" y="734.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.33%)</title><rect x="1052.8" y="707.0" width="27.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.8" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 1.86%)</title><rect x="1058.3" y="691.0" width="21.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.3" y="702.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.47%)</title><rect x="1074.7" y="675.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1077.7" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.47%)</title><rect x="1080.2" y="707.0" width="5.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1083.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.47%)</title><rect x="1085.7" y="723.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1088.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.33%)</title><rect x="1091.2" y="739.0" width="27.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.2" y="750.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.33%)</title><rect x="1091.2" y="723.0" width="27.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.2" y="734.0">P..</text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.47%)</title><rect x="1091.2" y="707.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.93%)</title><rect x="1096.7" y="707.0" width="11.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.7" y="718.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.47%)</title><rect x="1102.2" y="691.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.2" y="702.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.93%)</title><rect x="1107.7" y="707.0" width="11.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.7" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="1107.7" y="691.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.7" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.47%)</title><rect x="1107.7" y="675.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.7" y="686.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.47%)</title><rect x="1113.2" y="691.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.2" y="702.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.47%)</title><rect x="1118.7" y="739.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1121.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.47%)</title><rect x="1118.7" y="723.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.47%)</title><rect x="1118.7" y="707.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.7" y="718.0"></text>
</g>
<g>
<title>ClearArrayNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1118.7" y="691.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.26%)</title><rect x="1124.1" y="755.0" width="38.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.1" y="766.0">Par..</text>
</g>
<g>
<title>GraphKit::transfer_exceptions_into_jvms() (1 samples, 0.47%)</title><rect x="1124.1" y="739.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.79%)</title><rect x="1129.6" y="739.0" width="33.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.6" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.79%)</title><rect x="1129.6" y="723.0" width="33.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.6" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.79%)</title><rect x="1129.6" y="707.0" width="33.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.6" y="718.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.79%)</title><rect x="1129.6" y="691.0" width="33.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1132.6" y="702.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.33%)</title><rect x="1129.6" y="675.0" width="27.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.6" y="686.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.86%)</title><rect x="1129.6" y="659.0" width="22.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.6" y="670.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.86%)</title><rect x="1129.6" y="643.0" width="22.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.6" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.86%)</title><rect x="1129.6" y="627.0" width="22.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1132.6" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.86%)</title><rect x="1129.6" y="611.0" width="22.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.6" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.86%)</title><rect x="1129.6" y="595.0" width="22.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.6" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.86%)</title><rect x="1129.6" y="579.0" width="22.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.6" y="590.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1129.6" y="563.0" width="11.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.6" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1129.6" y="547.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1129.6" y="531.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1129.6" y="515.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1129.6" y="499.0" width="11.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1129.6" y="483.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.6" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1129.6" y="467.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.6" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1129.6" y="451.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.6" y="462.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.47%)</title><rect x="1129.6" y="435.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.6" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.47%)</title><rect x="1129.6" y="419.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.6" y="430.0"></text>
</g>
<g>
<title>MethodData::is_methodData() const volatile (1 samples, 0.47%)</title><rect x="1129.6" y="403.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.47%)</title><rect x="1135.1" y="483.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.1" y="494.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.47%)</title><rect x="1135.1" y="467.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.1" y="478.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.47%)</title><rect x="1135.1" y="451.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.1" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.47%)</title><rect x="1135.1" y="435.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.1" y="446.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.47%)</title><rect x="1135.1" y="419.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.1" y="430.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.47%)</title><rect x="1135.1" y="403.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.1" y="414.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.47%)</title><rect x="1135.1" y="387.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.1" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1140.6" y="563.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1140.6" y="547.0" width="11.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1140.6" y="531.0" width="11.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1140.6" y="515.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1140.6" y="499.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1140.6" y="483.0" width="11.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1140.6" y="467.0" width="11.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1140.6" y="451.0" width="11.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1140.6" y="435.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1140.6" y="419.0" width="11.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1140.6" y="403.0" width="11.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1140.6" y="387.0" width="11.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1140.6" y="371.0" width="11.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1140.6" y="355.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1140.6" y="339.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1140.6" y="323.0" width="11.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1140.6" y="307.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1140.6" y="291.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1140.6" y="275.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1140.6" y="259.0" width="11.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1140.6" y="243.0" width="11.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1140.6" y="227.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.93%)</title><rect x="1140.6" y="211.0" width="11.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.93%)</title><rect x="1140.6" y="195.0" width="11.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.93%)</title><rect x="1140.6" y="179.0" width="11.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.6" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.93%)</title><rect x="1140.6" y="163.0" width="11.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.6" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.93%)</title><rect x="1140.6" y="147.0" width="11.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.93%)</title><rect x="1140.6" y="131.0" width="11.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.6" y="142.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.47%)</title><rect x="1140.6" y="115.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.47%)</title><rect x="1140.6" y="99.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.6" y="110.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.47%)</title><rect x="1140.6" y="83.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.6" y="94.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.47%)</title><rect x="1140.6" y="67.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1143.6" y="78.0"></text>
</g>
<g>
<title>ConNode::ConNode(Type const*) (1 samples, 0.47%)</title><rect x="1140.6" y="51.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.6" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1146.1" y="115.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1146.1" y="99.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.47%)</title><rect x="1146.1" y="83.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.1" y="94.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.47%)</title><rect x="1146.1" y="67.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.1" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.47%)</title><rect x="1146.1" y="51.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.1" y="62.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.47%)</title><rect x="1146.1" y="35.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1151.6" y="659.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1151.6" y="643.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.6" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1151.6" y="627.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1151.6" y="611.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1151.6" y="595.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1151.6" y="579.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1151.6" y="563.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1151.6" y="547.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1151.6" y="531.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1151.6" y="515.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1151.6" y="499.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1151.6" y="483.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1151.6" y="467.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1151.6" y="451.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1151.6" y="435.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1151.6" y="419.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1151.6" y="403.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1151.6" y="387.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1151.6" y="371.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1151.6" y="355.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1151.6" y="339.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1151.6" y="323.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1151.6" y="307.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1151.6" y="291.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.6" y="302.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.47%)</title><rect x="1151.6" y="275.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.6" y="286.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.47%)</title><rect x="1151.6" y="259.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.47%)</title><rect x="1157.1" y="675.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="686.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.47%)</title><rect x="1157.1" y="659.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="670.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.47%)</title><rect x="1157.1" y="643.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="654.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.47%)</title><rect x="1157.1" y="627.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.1" y="638.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.47%)</title><rect x="1157.1" y="611.0" width="5.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1160.1" y="622.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.47%)</title><rect x="1162.6" y="755.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.6" y="766.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (4 samples, 1.86%)</title><rect x="1168.0" y="787.0" width="22.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="798.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (4 samples, 1.86%)</title><rect x="1168.0" y="771.0" width="22.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.0" y="782.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.86%)</title><rect x="1168.0" y="755.0" width="22.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="766.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.86%)</title><rect x="1168.0" y="739.0" width="22.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="750.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.47%)</title><rect x="1168.0" y="723.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.0" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.47%)</title><rect x="1168.0" y="707.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="718.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.47%)</title><rect x="1168.0" y="691.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.47%)</title><rect x="1168.0" y="675.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.47%)</title><rect x="1168.0" y="659.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.47%)</title><rect x="1168.0" y="643.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.0" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1168.0" y="627.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1168.0" y="611.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.47%)</title><rect x="1168.0" y="595.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.0" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.47%)</title><rect x="1168.0" y="579.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.0" y="590.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.47%)</title><rect x="1168.0" y="563.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.0" y="574.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.47%)</title><rect x="1168.0" y="547.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="558.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.47%)</title><rect x="1168.0" y="531.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.0" y="542.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.47%)</title><rect x="1168.0" y="515.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="526.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.47%)</title><rect x="1168.0" y="499.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 1.40%)</title><rect x="1173.5" y="723.0" width="16.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.5" y="734.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.47%)</title><rect x="1173.5" y="707.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.5" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::block_do(BlockBegin*) (1 samples, 0.47%)</title><rect x="1173.5" y="691.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.5" y="702.0"></text>
</g>
<g>
<title>LIRGenerator::syncTempOpr() (1 samples, 0.47%)</title><rect x="1173.5" y="675.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="686.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.93%)</title><rect x="1179.0" y="707.0" width="11.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="718.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.47%)</title><rect x="1179.0" y="691.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.0" y="702.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.47%)</title><rect x="1179.0" y="675.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.0" y="686.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.47%)</title><rect x="1184.5" y="691.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>LinearScan::add_use(int, int, int, IntervalUseKind, BasicType) (1 samples, 0.47%)</title><rect x="1184.5" y="675.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>CompilationResourceObj::operator new(unsigned long) (1 samples, 0.47%)</title><rect x="1184.5" y="659.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
</g>
</svg>
