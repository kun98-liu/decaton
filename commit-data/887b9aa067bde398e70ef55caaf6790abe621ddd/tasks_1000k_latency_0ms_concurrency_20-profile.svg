<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (939 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (223 samples, 23.75%)</title><rect x="10.0" y="723.0" width="280.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="734.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (223 samples, 23.75%)</title><rect x="10.0" y="707.0" width="280.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="718.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (222 samples, 23.64%)</title><rect x="11.3" y="691.0" width="278.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="702.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.21%)</title><rect x="11.3" y="675.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.21%)</title><rect x="11.3" y="659.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.21%)</title><rect x="11.3" y="643.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$135/457155641.accept (2 samples, 0.21%)</title><rect x="11.3" y="627.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.21%)</title><rect x="11.3" y="611.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.21%)</title><rect x="11.3" y="595.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.3" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.21%)</title><rect x="11.3" y="579.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.3" y="590.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (179 samples, 19.06%)</title><rect x="13.8" y="675.0" width="224.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="686.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/832037067.accept (175 samples, 18.64%)</title><rect x="13.8" y="659.0" width="219.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="670.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (175 samples, 18.64%)</title><rect x="13.8" y="643.0" width="219.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="654.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (160 samples, 17.04%)</title><rect x="16.3" y="627.0" width="201.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.3" y="638.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (160 samples, 17.04%)</title><rect x="16.3" y="611.0" width="201.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.3" y="622.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (160 samples, 17.04%)</title><rect x="16.3" y="595.0" width="201.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.3" y="606.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 17.04%)</title><rect x="16.3" y="579.0" width="201.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.3" y="590.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 17.04%)</title><rect x="16.3" y="563.0" width="201.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.3" y="574.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (160 samples, 17.04%)</title><rect x="16.3" y="547.0" width="201.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.3" y="558.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 12.14%)</title><rect x="72.8" y="531.0" width="143.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="75.8" y="542.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 2.45%)</title><rect x="74.1" y="515.0" width="28.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="77.1" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 2.45%)</title><rect x="74.1" y="499.0" width="28.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.1" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (23 samples, 2.45%)</title><rect x="74.1" y="483.0" width="28.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.1" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.43%)</title><rect x="103.0" y="515.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="106.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.43%)</title><rect x="103.0" y="499.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.32%)</title><rect x="103.0" y="483.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="106.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.11%)</title><rect x="106.8" y="483.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (86 samples, 9.16%)</title><rect x="108.0" y="515.0" width="108.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="111.0" y="526.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (86 samples, 9.16%)</title><rect x="108.0" y="499.0" width="108.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="111.0" y="510.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (85 samples, 9.05%)</title><rect x="108.0" y="483.0" width="106.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="111.0" y="494.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 8.84%)</title><rect x="108.0" y="467.0" width="104.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="111.0" y="478.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 8.73%)</title><rect x="109.3" y="451.0" width="103.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.3" y="462.0">sun/misc/Uns..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="109.3" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="112.3" y="446.0"></text>
</g>
<g>
<title>Unsafe_Unpark (79 samples, 8.41%)</title><rect x="110.5" y="435.0" width="99.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="113.5" y="446.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="111.8" y="419.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="114.8" y="430.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.21%)</title><rect x="113.0" y="419.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="116.0" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_signal (53 samples, 5.64%)</title><rect x="115.6" y="419.0" width="66.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="118.6" y="430.0">__pthre..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.32%)</title><rect x="182.2" y="419.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="185.2" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (19 samples, 2.02%)</title><rect x="185.9" y="419.0" width="23.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="188.9" y="430.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.21%)</title><rect x="209.8" y="435.0" width="2.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="212.8" y="446.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (2 samples, 0.21%)</title><rect x="212.3" y="467.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="215.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="214.8" y="483.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="217.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.11%)</title><rect x="216.1" y="531.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.11%)</title><rect x="216.1" y="515.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="219.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.11%)</title><rect x="216.1" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="219.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="216.1" y="483.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.1" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (9 samples, 0.96%)</title><rect x="217.3" y="627.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.3" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (9 samples, 0.96%)</title><rect x="217.3" y="611.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="220.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.43%)</title><rect x="223.6" y="595.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="226.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.43%)</title><rect x="223.6" y="579.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.43%)</title><rect x="223.6" y="563.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="226.6" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="223.6" y="547.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="226.6" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="223.6" y="531.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="226.6" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="223.6" y="515.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="226.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="223.6" y="499.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="226.6" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.11%)</title><rect x="223.6" y="483.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="226.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.32%)</title><rect x="224.9" y="547.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="227.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.32%)</title><rect x="224.9" y="531.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.21%)</title><rect x="228.7" y="627.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="231.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="228.7" y="611.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="228.7" y="595.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.11%)</title><rect x="229.9" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="590.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.11%)</title><rect x="229.9" y="563.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="232.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="231.2" y="627.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="231.2" y="611.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="234.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.21%)</title><rect x="231.2" y="595.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.21%)</title><rect x="231.2" y="579.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.21%)</title><rect x="231.2" y="563.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="234.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.11%)</title><rect x="233.7" y="659.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.11%)</title><rect x="233.7" y="643.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.11%)</title><rect x="233.7" y="627.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (1 samples, 0.11%)</title><rect x="233.7" y="611.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.32%)</title><rect x="234.9" y="659.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.32%)</title><rect x="234.9" y="643.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.32%)</title><rect x="234.9" y="627.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.32%)</title><rect x="234.9" y="611.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (41 samples, 4.37%)</title><rect x="238.7" y="675.0" width="51.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.7" y="686.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (40 samples, 4.26%)</title><rect x="238.7" y="659.0" width="50.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.7" y="670.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (29 samples, 3.09%)</title><rect x="238.7" y="643.0" width="36.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="241.7" y="654.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (29 samples, 3.09%)</title><rect x="238.7" y="627.0" width="36.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.7" y="638.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 2.98%)</title><rect x="238.7" y="611.0" width="35.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.7" y="622.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (26 samples, 2.77%)</title><rect x="238.7" y="595.0" width="32.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.7" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.77%)</title><rect x="238.7" y="579.0" width="32.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="241.7" y="590.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.11%)</title><rect x="240.0" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.11%)</title><rect x="240.0" y="547.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.11%)</title><rect x="240.0" y="531.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.0" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.11%)</title><rect x="240.0" y="515.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.11%)</title><rect x="240.0" y="499.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="243.0" y="510.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="241.2" y="563.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="244.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 1.06%)</title><rect x="242.5" y="563.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (1 samples, 0.11%)</title><rect x="246.3" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="249.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.64%)</title><rect x="247.5" y="547.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.64%)</title><rect x="247.5" y="531.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="250.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.64%)</title><rect x="247.5" y="515.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.64%)</title><rect x="247.5" y="499.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.64%)</title><rect x="247.5" y="483.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.5" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.64%)</title><rect x="247.5" y="467.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.64%)</title><rect x="247.5" y="451.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (13 samples, 1.38%)</title><rect x="255.0" y="563.0" width="16.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (13 samples, 1.38%)</title><rect x="255.0" y="547.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="258.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (13 samples, 1.38%)</title><rect x="255.0" y="531.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.0" y="542.0"></text>
</g>
<g>
<title>java/util/Optional.of (13 samples, 1.38%)</title><rect x="255.0" y="515.0" width="16.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.21%)</title><rect x="271.4" y="595.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.21%)</title><rect x="271.4" y="579.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.21%)</title><rect x="271.4" y="563.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="271.4" y="547.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="271.4" y="531.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="271.4" y="515.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.4" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="272.6" y="547.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="275.6" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="272.6" y="531.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="275.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.11%)</title><rect x="273.9" y="611.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="276.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Errors.forCode (1 samples, 0.11%)</title><rect x="273.9" y="595.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.9" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="273.9" y="579.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="273.9" y="563.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Short.hashCode (1 samples, 0.11%)</title><rect x="273.9" y="547.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.53%)</title><rect x="275.2" y="643.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="278.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (4 samples, 0.43%)</title><rect x="275.2" y="627.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (4 samples, 0.43%)</title><rect x="275.2" y="611.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="278.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="275.2" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="275.2" y="579.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="275.2" y="563.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="275.2" y="547.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="278.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="275.2" y="531.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="275.2" y="515.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="278.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="275.2" y="499.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="278.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="275.2" y="483.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.2" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.11%)</title><rect x="275.2" y="467.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.2" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$326/768948788.get (1 samples, 0.11%)</title><rect x="275.2" y="451.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (3 samples, 0.32%)</title><rect x="276.4" y="595.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (3 samples, 0.32%)</title><rect x="276.4" y="579.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (3 samples, 0.32%)</title><rect x="276.4" y="563.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.4" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (3 samples, 0.32%)</title><rect x="276.4" y="547.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$319/830250221.accept (3 samples, 0.32%)</title><rect x="276.4" y="531.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$collectPartitions$5 (3 samples, 0.32%)</title><rect x="276.4" y="515.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="279.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$318/961838210.test (3 samples, 0.32%)</title><rect x="276.4" y="499.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$partitionsNeedingValidation$8 (3 samples, 0.32%)</title><rect x="276.4" y="483.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="279.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$700 (3 samples, 0.32%)</title><rect x="276.4" y="467.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.11%)</title><rect x="280.2" y="627.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnready (1 samples, 0.11%)</title><rect x="280.2" y="611.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.11%)</title><rect x="280.2" y="595.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.11%)</title><rect x="280.2" y="579.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.11%)</title><rect x="280.2" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="280.2" y="547.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="280.2" y="531.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="280.2" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="283.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="280.2" y="499.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.32%)</title><rect x="281.4" y="643.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.21%)</title><rect x="281.4" y="627.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.21%)</title><rect x="281.4" y="611.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.21%)</title><rect x="281.4" y="595.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.11%)</title><rect x="281.4" y="579.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="284.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.11%)</title><rect x="281.4" y="563.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.11%)</title><rect x="281.4" y="547.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.11%)</title><rect x="281.4" y="531.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.11%)</title><rect x="281.4" y="515.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.11%)</title><rect x="281.4" y="499.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.4" y="510.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.11%)</title><rect x="281.4" y="483.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.4" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.11%)</title><rect x="281.4" y="467.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.4" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.11%)</title><rect x="281.4" y="451.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.4" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.get (1 samples, 0.11%)</title><rect x="281.4" y="435.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasCompletedReceive (1 samples, 0.11%)</title><rect x="282.7" y="579.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.7" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.11%)</title><rect x="282.7" y="563.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.7" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="282.7" y="547.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="285.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.11%)</title><rect x="284.0" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="284.0" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="284.0" y="595.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.11%)</title><rect x="284.0" y="579.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.11%)</title><rect x="284.0" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.&lt;init&gt; (1 samples, 0.11%)</title><rect x="284.0" y="547.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.11%)</title><rect x="284.0" y="531.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.11%)</title><rect x="284.0" y="515.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.21%)</title><rect x="285.2" y="643.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="288.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.11%)</title><rect x="285.2" y="627.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="288.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.11%)</title><rect x="285.2" y="611.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.wakeup (1 samples, 0.11%)</title><rect x="285.2" y="595.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.wakeup (1 samples, 0.11%)</title><rect x="285.2" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.11%)</title><rect x="285.2" y="563.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.11%)</title><rect x="286.5" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.11%)</title><rect x="286.5" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.11%)</title><rect x="286.5" y="595.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.11%)</title><rect x="287.7" y="643.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="287.7" y="627.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="287.7" y="611.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="290.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="287.7" y="595.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.11%)</title><rect x="289.0" y="659.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.11%)</title><rect x="289.0" y="643.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.0" y="654.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="289.0" y="627.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="292.0" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="289.0" y="611.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="292.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (657 samples, 69.97%)</title><rect x="290.2" y="723.0" width="825.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.2" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (657 samples, 69.97%)</title><rect x="290.2" y="707.0" width="825.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.2" y="718.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (657 samples, 69.97%)</title><rect x="290.2" y="691.0" width="825.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.2" y="702.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="300.3" y="675.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="303.3" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.21%)</title><rect x="301.5" y="675.0" width="2.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="304.5" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="301.5" y="659.0" width="2.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="304.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.11%)</title><rect x="304.1" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/1401680325.run (418 samples, 44.52%)</title><rect x="305.3" y="675.0" width="525.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.3" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$80 (418 samples, 44.52%)</title><rect x="305.3" y="659.0" width="525.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.3" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putT..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (418 samples, 44.52%)</title><rect x="305.3" y="643.0" width="525.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.3" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="306.6" y="627.0" width="1.2" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="309.6" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="306.6" y="611.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="309.6" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="307.8" y="627.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="310.8" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.64%)</title><rect x="309.1" y="627.0" width="7.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="312.1" y="638.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="311.6" y="611.0" width="5.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="314.6" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (407 samples, 43.34%)</title><rect x="316.6" y="627.0" width="511.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.6" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedul..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.maybeDirty (1 samples, 0.11%)</title><rect x="329.2" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="332.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (42 samples, 4.47%)</title><rect x="330.4" y="611.0" width="52.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.4" y="622.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.56%)</title><rect x="353.1" y="595.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="356.1" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.56%)</title><rect x="353.1" y="579.0" width="30.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.1" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.56%)</title><rect x="353.1" y="563.0" width="30.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.1" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (24 samples, 2.56%)</title><rect x="353.1" y="547.0" width="30.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="356.1" y="558.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$366/1428941292.accept (24 samples, 2.56%)</title><rect x="353.1" y="531.0" width="30.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.1" y="542.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (24 samples, 2.56%)</title><rect x="353.1" y="515.0" width="30.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="356.1" y="526.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (24 samples, 2.56%)</title><rect x="353.1" y="499.0" width="30.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.1" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (24 samples, 2.56%)</title><rect x="353.1" y="483.0" width="30.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.1" y="494.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$357/782035929.accept (1 samples, 0.11%)</title><rect x="355.6" y="467.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.6" y="478.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.21%)</title><rect x="356.8" y="467.0" width="2.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="359.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (19 samples, 2.02%)</title><rect x="359.4" y="467.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.4" y="478.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.32%)</title><rect x="359.4" y="451.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.32%)</title><rect x="359.4" y="435.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.70%)</title><rect x="363.1" y="451.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="366.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (94 samples, 10.01%)</title><rect x="383.2" y="611.0" width="118.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.2" y="622.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (94 samples, 10.01%)</title><rect x="383.2" y="595.0" width="118.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="386.2" y="606.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (94 samples, 10.01%)</title><rect x="383.2" y="579.0" width="118.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="386.2" y="590.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (94 samples, 10.01%)</title><rect x="383.2" y="563.0" width="118.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.2" y="574.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (94 samples, 10.01%)</title><rect x="383.2" y="547.0" width="118.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="386.2" y="558.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (94 samples, 10.01%)</title><rect x="383.2" y="531.0" width="118.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="386.2" y="542.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (40 samples, 4.26%)</title><rect x="383.2" y="515.0" width="50.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="386.2" y="526.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (12 samples, 1.28%)</title><rect x="383.2" y="499.0" width="15.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="386.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (12 samples, 1.28%)</title><rect x="383.2" y="483.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.&lt;init&gt; (12 samples, 1.28%)</title><rect x="383.2" y="467.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="386.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.85%)</title><rect x="398.3" y="499.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.85%)</title><rect x="398.3" y="483.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="401.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.85%)</title><rect x="398.3" y="467.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.3" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.53%)</title><rect x="399.6" y="451.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="402.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (2 samples, 0.21%)</title><rect x="405.8" y="451.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="408.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (20 samples, 2.13%)</title><rect x="408.4" y="499.0" width="25.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.4" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (20 samples, 2.13%)</title><rect x="408.4" y="483.0" width="25.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="411.4" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.21%)</title><rect x="408.4" y="467.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="411.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (2 samples, 0.21%)</title><rect x="408.4" y="451.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="411.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (5 samples, 0.53%)</title><rect x="410.9" y="467.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.9" y="478.0"></text>
</g>
<g>
<title>java/lang/ref/SoftReference.get (1 samples, 0.11%)</title><rect x="415.9" y="451.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="418.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (10 samples, 1.06%)</title><rect x="417.2" y="467.0" width="12.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.2" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.21%)</title><rect x="419.7" y="451.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="422.7" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.21%)</title><rect x="419.7" y="435.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="422.7" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.21%)</title><rect x="419.7" y="419.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="422.7" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="420.9" y="403.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="423.9" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="420.9" y="387.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="423.9" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="420.9" y="371.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="423.9" y="382.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.11%)</title><rect x="420.9" y="355.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="423.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.11%)</title><rect x="420.9" y="339.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="423.9" y="350.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.11%)</title><rect x="420.9" y="323.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="423.9" y="334.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.11%)</title><rect x="420.9" y="307.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="423.9" y="318.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.11%)</title><rect x="422.2" y="451.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="425.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 0.43%)</title><rect x="423.4" y="451.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.11%)</title><rect x="423.4" y="435.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="426.4" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="423.4" y="419.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="426.4" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="423.4" y="403.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="426.4" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="423.4" y="387.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="426.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.32%)</title><rect x="424.7" y="435.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="427.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="428.5" y="451.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (3 samples, 0.32%)</title><rect x="429.7" y="467.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.11%)</title><rect x="429.7" y="451.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.&lt;init&gt; (2 samples, 0.21%)</title><rect x="431.0" y="451.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="434.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (49 samples, 5.22%)</title><rect x="433.5" y="515.0" width="61.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="436.5" y="526.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.32%)</title><rect x="433.5" y="499.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (3 samples, 0.32%)</title><rect x="433.5" y="483.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (2 samples, 0.21%)</title><rect x="433.5" y="467.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (2 samples, 0.21%)</title><rect x="433.5" y="451.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.11%)</title><rect x="436.0" y="467.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="439.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.11%)</title><rect x="436.0" y="451.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.21%)</title><rect x="437.3" y="499.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.21%)</title><rect x="437.3" y="483.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="440.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.32%)</title><rect x="439.8" y="499.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="442.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.21%)</title><rect x="439.8" y="483.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="442.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.21%)</title><rect x="439.8" y="467.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.21%)</title><rect x="439.8" y="451.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="442.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.11%)</title><rect x="442.3" y="483.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.53%)</title><rect x="443.5" y="499.0" width="6.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.53%)</title><rect x="443.5" y="483.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="446.5" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="443.5" y="467.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="446.5" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="443.5" y="451.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="446.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="444.8" y="467.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="447.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.32%)</title><rect x="444.8" y="451.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.32%)</title><rect x="444.8" y="435.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="448.6" y="451.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="451.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (36 samples, 3.83%)</title><rect x="449.8" y="499.0" width="45.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="452.8" y="510.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (36 samples, 3.83%)</title><rect x="449.8" y="483.0" width="45.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="452.8" y="494.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.53%)</title><rect x="451.1" y="467.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.11%)</title><rect x="451.1" y="451.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.11%)</title><rect x="451.1" y="435.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="454.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.11%)</title><rect x="451.1" y="419.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.11%)</title><rect x="451.1" y="403.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="454.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.11%)</title><rect x="451.1" y="387.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="454.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.21%)</title><rect x="452.3" y="451.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.21%)</title><rect x="452.3" y="435.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="454.9" y="451.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="457.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="454.9" y="435.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="457.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.11%)</title><rect x="456.1" y="451.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (30 samples, 3.19%)</title><rect x="457.4" y="467.0" width="37.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="460.4" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (28 samples, 2.98%)</title><rect x="458.6" y="451.0" width="35.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.6" y="462.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (28 samples, 2.98%)</title><rect x="458.6" y="435.0" width="35.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="461.6" y="446.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.43%)</title><rect x="469.9" y="419.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="469.9" y="403.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.11%)</title><rect x="471.2" y="403.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.11%)</title><rect x="471.2" y="387.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="474.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.11%)</title><rect x="471.2" y="371.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.11%)</title><rect x="471.2" y="355.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.11%)</title><rect x="472.4" y="403.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="475.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.11%)</title><rect x="472.4" y="387.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.11%)</title><rect x="473.7" y="403.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.43%)</title><rect x="475.0" y="419.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="478.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.32%)</title><rect x="476.2" y="403.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.32%)</title><rect x="476.2" y="387.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.32%)</title><rect x="476.2" y="371.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.2" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.32%)</title><rect x="476.2" y="355.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="479.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.53%)</title><rect x="480.0" y="419.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.53%)</title><rect x="480.0" y="403.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.53%)</title><rect x="480.0" y="387.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="483.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.53%)</title><rect x="480.0" y="371.0" width="6.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="483.0" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.53%)</title><rect x="480.0" y="355.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="483.0" y="366.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.53%)</title><rect x="480.0" y="339.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="483.0" y="350.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (5 samples, 0.53%)</title><rect x="480.0" y="323.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="483.0" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.21%)</title><rect x="486.3" y="419.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="489.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="486.3" y="403.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="489.3" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="486.3" y="387.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="489.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.43%)</title><rect x="488.8" y="419.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.11%)</title><rect x="492.6" y="403.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="495.6" y="414.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="492.6" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="495.6" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="493.8" y="451.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="493.8" y="435.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="496.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="493.8" y="419.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="496.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="493.8" y="403.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.11%)</title><rect x="493.8" y="387.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.11%)</title><rect x="493.8" y="371.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.11%)</title><rect x="493.8" y="355.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="496.8" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.11%)</title><rect x="493.8" y="339.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="496.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.53%)</title><rect x="495.1" y="515.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.53%)</title><rect x="495.1" y="499.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.53%)</title><rect x="495.1" y="483.0" width="6.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.53%)</title><rect x="495.1" y="467.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.21%)</title><rect x="498.8" y="451.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="501.8" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (251 samples, 26.73%)</title><rect x="501.4" y="611.0" width="315.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="504.4" y="622.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.11%)</title><rect x="507.6" y="595.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="510.6" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="507.6" y="579.0" width="1.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="510.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (50 samples, 5.32%)</title><rect x="508.9" y="595.0" width="62.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="511.9" y="606.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (50 samples, 5.32%)</title><rect x="508.9" y="579.0" width="62.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="511.9" y="590.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (48 samples, 5.11%)</title><rect x="511.4" y="563.0" width="60.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="514.4" y="574.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.96%)</title><rect x="511.4" y="547.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="514.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.96%)</title><rect x="511.4" y="531.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="514.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (9 samples, 0.96%)</title><rect x="511.4" y="515.0" width="11.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.96%)</title><rect x="511.4" y="499.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="514.4" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="522.7" y="547.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="525.7" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="522.7" y="531.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="522.7" y="515.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="525.7" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.11%)</title><rect x="522.7" y="499.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.7" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (38 samples, 4.05%)</title><rect x="524.0" y="547.0" width="47.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="527.0" y="558.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 1.17%)</title><rect x="557.9" y="531.0" width="13.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="557.9" y="515.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.32%)</title><rect x="559.2" y="515.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="562.2" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.21%)</title><rect x="560.4" y="499.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="563.4" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.53%)</title><rect x="562.9" y="515.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="565.9" y="526.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.21%)</title><rect x="569.2" y="515.0" width="2.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="572.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.64%)</title><rect x="571.7" y="595.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="574.7" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.64%)</title><rect x="571.7" y="579.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="574.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (124 samples, 13.21%)</title><rect x="579.3" y="595.0" width="155.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.3" y="606.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (118 samples, 12.57%)</title><rect x="579.3" y="579.0" width="148.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="582.3" y="590.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (30 samples, 3.19%)</title><rect x="585.5" y="563.0" width="37.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="588.5" y="574.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 1.28%)</title><rect x="596.9" y="547.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="599.9" y="558.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (10 samples, 1.06%)</title><rect x="599.4" y="531.0" width="12.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.4" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.32%)</title><rect x="600.6" y="515.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.6" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.32%)</title><rect x="600.6" y="499.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.6" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.32%)</title><rect x="600.6" y="483.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="603.6" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.32%)</title><rect x="600.6" y="467.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="603.6" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.21%)</title><rect x="600.6" y="451.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="603.6" y="462.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.21%)</title><rect x="600.6" y="435.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="603.6" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.21%)</title><rect x="600.6" y="419.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="603.6" y="430.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.21%)</title><rect x="600.6" y="403.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="603.6" y="414.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="603.1" y="451.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="606.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="603.1" y="435.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="606.1" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="603.1" y="419.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="606.1" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="603.1" y="403.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="606.1" y="414.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="603.1" y="387.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="606.1" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="603.1" y="371.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="606.1" y="382.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.11%)</title><rect x="603.1" y="355.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.1" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.32%)</title><rect x="604.4" y="515.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="607.4" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="608.2" y="515.0" width="3.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="611.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.11%)</title><rect x="611.9" y="547.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="614.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.11%)</title><rect x="611.9" y="531.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="614.9" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.11%)</title><rect x="611.9" y="515.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="614.9" y="526.0"></text>
</g>
<g>
<title>jshort_arraycopy (3 samples, 0.32%)</title><rect x="613.2" y="547.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="616.2" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.53%)</title><rect x="617.0" y="547.0" width="6.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="620.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.43%)</title><rect x="623.2" y="563.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.43%)</title><rect x="623.2" y="547.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="626.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.43%)</title><rect x="623.2" y="531.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="626.2" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.11%)</title><rect x="628.3" y="563.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="631.3" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="629.5" y="563.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="632.5" y="574.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="630.8" y="563.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="633.8" y="574.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (76 samples, 8.09%)</title><rect x="632.0" y="563.0" width="95.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.0" y="574.0">org/slf4j/M..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (73 samples, 7.77%)</title><rect x="635.8" y="547.0" width="91.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.8" y="558.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.75%)</title><rect x="635.8" y="531.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.8" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.75%)</title><rect x="635.8" y="515.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.75%)</title><rect x="635.8" y="499.0" width="8.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.8" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.75%)</title><rect x="635.8" y="483.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="644.6" y="531.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="644.6" y="515.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.6" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="644.6" y="499.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="644.6" y="483.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.6" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (65 samples, 6.92%)</title><rect x="645.9" y="531.0" width="81.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="648.9" y="542.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.put (59 samples, 6.28%)</title><rect x="653.4" y="515.0" width="74.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="656.4" y="526.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.putVal (27 samples, 2.88%)</title><rect x="693.6" y="499.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="696.6" y="510.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.32%)</title><rect x="706.2" y="483.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 1.06%)</title><rect x="710.0" y="483.0" width="12.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="713.0" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.32%)</title><rect x="717.5" y="467.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="720.5" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.32%)</title><rect x="717.5" y="451.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="720.5" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (3 samples, 0.32%)</title><rect x="717.5" y="435.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="720.5" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="718.8" y="419.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="721.8" y="430.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.11%)</title><rect x="718.8" y="403.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="721.8" y="414.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.11%)</title><rect x="720.0" y="419.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="723.0" y="430.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.11%)</title><rect x="721.3" y="467.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="724.3" y="478.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.43%)</title><rect x="722.5" y="483.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="725.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.64%)</title><rect x="727.6" y="579.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="730.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.64%)</title><rect x="727.6" y="563.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="730.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.64%)</title><rect x="727.6" y="547.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.64%)</title><rect x="727.6" y="531.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="730.6" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="731.3" y="515.0" width="3.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="734.3" y="526.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.32%)</title><rect x="731.3" y="499.0" width="3.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="734.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (52 samples, 5.54%)</title><rect x="735.1" y="595.0" width="65.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.1" y="606.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (52 samples, 5.54%)</title><rect x="735.1" y="579.0" width="65.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.1" y="590.0">com/lin..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="736.3" y="563.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="739.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="736.3" y="547.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="739.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="736.3" y="531.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="739.3" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="736.3" y="515.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="739.3" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="736.3" y="499.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="739.3" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="736.3" y="483.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="739.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/56609825.process (23 samples, 2.45%)</title><rect x="737.6" y="563.0" width="28.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="740.6" y="574.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (23 samples, 2.45%)</title><rect x="737.6" y="547.0" width="28.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="740.6" y="558.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.92%)</title><rect x="738.9" y="531.0" width="22.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.9" y="542.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.32%)</title><rect x="740.1" y="515.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="743.1" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.32%)</title><rect x="740.1" y="499.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="743.1" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.21%)</title><rect x="741.4" y="483.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="744.4" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.21%)</title><rect x="741.4" y="467.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.11%)</title><rect x="742.6" y="451.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="745.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.96%)</title><rect x="743.9" y="515.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="746.9" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.85%)</title><rect x="745.1" y="499.0" width="10.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="748.1" y="510.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.75%)</title><rect x="746.4" y="483.0" width="8.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="749.4" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.53%)</title><rect x="755.2" y="515.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="758.2" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="760.2" y="499.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="763.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="760.2" y="483.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="763.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 0.43%)</title><rect x="761.5" y="531.0" width="5.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="765.3" y="515.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="765.3" y="499.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="765.3" y="483.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.11%)</title><rect x="765.3" y="467.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="768.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.21%)</title><rect x="766.5" y="563.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (6 samples, 0.64%)</title><rect x="769.0" y="563.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (6 samples, 0.64%)</title><rect x="769.0" y="547.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 0.53%)</title><rect x="770.3" y="531.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 0.53%)</title><rect x="770.3" y="515.0" width="6.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.53%)</title><rect x="770.3" y="499.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="773.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.53%)</title><rect x="770.3" y="483.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.53%)</title><rect x="770.3" y="467.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.32%)</title><rect x="776.6" y="563.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.6" y="574.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.32%)</title><rect x="776.6" y="547.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.6" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.32%)</title><rect x="780.3" y="563.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="783.3" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.32%)</title><rect x="780.3" y="547.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="783.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="784.1" y="563.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.1" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="784.1" y="547.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="787.1" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.43%)</title><rect x="785.4" y="563.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.11%)</title><rect x="790.4" y="563.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="793.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.75%)</title><rect x="791.6" y="563.0" width="8.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.64%)</title><rect x="792.9" y="547.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="795.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.64%)</title><rect x="792.9" y="531.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="795.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.64%)</title><rect x="792.9" y="515.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.64%)</title><rect x="792.9" y="499.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="795.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.64%)</title><rect x="792.9" y="483.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="795.9" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$364/1168183931.accept (3 samples, 0.32%)</title><rect x="795.4" y="467.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.4" y="478.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="799.2" y="467.0" width="1.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="802.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.11%)</title><rect x="800.4" y="595.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="803.4" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="800.4" y="579.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="803.4" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="800.4" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="803.4" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="800.4" y="547.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="803.4" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1164107853.linkToTargetMethod (1 samples, 0.11%)</title><rect x="801.7" y="595.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="804.7" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/438135304.invokeStatic_L3_L (1 samples, 0.11%)</title><rect x="801.7" y="579.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="804.7" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/2090253841.get$Lambda (1 samples, 0.11%)</title><rect x="801.7" y="563.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.7" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="801.7" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="804.7" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="801.7" y="531.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.7" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="801.7" y="515.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="804.7" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="801.7" y="499.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="804.7" y="510.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="801.7" y="483.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="804.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.17%)</title><rect x="802.9" y="595.0" width="13.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.17%)</title><rect x="802.9" y="579.0" width="13.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.17%)</title><rect x="802.9" y="563.0" width="13.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="805.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.21%)</title><rect x="802.9" y="547.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.21%)</title><rect x="802.9" y="531.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.21%)</title><rect x="802.9" y="515.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.9" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="804.2" y="499.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="807.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.96%)</title><rect x="805.5" y="547.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="808.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/2090253841.accept (9 samples, 0.96%)</title><rect x="805.5" y="531.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="808.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$73 (9 samples, 0.96%)</title><rect x="805.5" y="515.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="808.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (9 samples, 0.96%)</title><rect x="805.5" y="499.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="808.5" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (9 samples, 0.96%)</title><rect x="805.5" y="483.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="808.5" y="494.0"></text>
</g>
<g>
<title>java/time/Duration.create (9 samples, 0.96%)</title><rect x="805.5" y="467.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="808.5" y="478.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.75%)</title><rect x="806.7" y="451.0" width="8.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="809.7" y="462.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.75%)</title><rect x="806.7" y="435.0" width="8.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="809.7" y="446.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="815.5" y="451.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="818.5" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (9 samples, 0.96%)</title><rect x="816.8" y="611.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="819.8" y="622.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.96%)</title><rect x="816.8" y="595.0" width="11.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="819.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.11%)</title><rect x="828.1" y="627.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="831.1" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.11%)</title><rect x="828.1" y="611.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.1" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.11%)</title><rect x="828.1" y="595.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="831.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="828.1" y="579.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="828.1" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="831.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="828.1" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="831.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="828.1" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="831.1" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="828.1" y="515.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="831.1" y="526.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="829.3" y="627.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="832.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (227 samples, 24.17%)</title><rect x="830.6" y="675.0" width="285.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.6" y="686.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (226 samples, 24.07%)</title><rect x="831.9" y="659.0" width="284.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.9" y="670.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (5 samples, 0.53%)</title><rect x="839.4" y="643.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.11%)</title><rect x="845.7" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="848.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (200 samples, 21.30%)</title><rect x="846.9" y="643.0" width="251.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="849.9" y="654.0">java/util/concurrent/locks/Abstra..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (20 samples, 2.13%)</title><rect x="855.7" y="627.0" width="25.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.7" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 2.13%)</title><rect x="855.7" y="611.0" width="25.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.7" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 2.13%)</title><rect x="855.7" y="595.0" width="25.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.7" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 2.13%)</title><rect x="855.7" y="579.0" width="25.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="858.7" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (173 samples, 18.42%)</title><rect x="880.9" y="627.0" width="217.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="883.9" y="638.0">java/util/concurrent/locks/Lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (164 samples, 17.47%)</title><rect x="892.2" y="611.0" width="206.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.2" y="622.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="893.4" y="595.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="896.4" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (159 samples, 16.93%)</title><rect x="894.7" y="595.0" width="199.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="897.7" y="606.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="901.0" y="579.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.0" y="590.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.45%)</title><rect x="902.2" y="579.0" width="28.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="905.2" y="590.0">Pa..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.75%)</title><rect x="911.0" y="563.0" width="8.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="914.0" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.43%)</title><rect x="911.0" y="547.0" width="5.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="914.0" y="558.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.11%)</title><rect x="914.8" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="917.8" y="542.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="916.0" y="547.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="919.0" y="558.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.21%)</title><rect x="917.3" y="547.0" width="2.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="920.3" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (9 samples, 0.96%)</title><rect x="919.8" y="563.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.8" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="931.1" y="579.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.1" y="590.0"></text>
</g>
<g>
<title>_L_unlock_738 (4 samples, 0.43%)</title><rect x="932.4" y="579.0" width="5.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="935.4" y="590.0"></text>
</g>
<g>
<title>__lll_lock_wait (2 samples, 0.21%)</title><rect x="937.4" y="579.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="940.4" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (44 samples, 4.69%)</title><rect x="939.9" y="579.0" width="55.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="942.9" y="590.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (65 samples, 6.92%)</title><rect x="995.2" y="579.0" width="81.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="998.2" y="590.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.32%)</title><rect x="1076.9" y="579.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1079.9" y="590.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.32%)</title><rect x="1080.7" y="579.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1083.7" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="1084.4" y="579.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1087.4" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.21%)</title><rect x="1085.7" y="579.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1088.7" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.21%)</title><rect x="1088.2" y="579.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1091.2" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="1090.7" y="579.0" width="1.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1093.7" y="590.0"></text>
</g>
<g>
<title>_init (1 samples, 0.11%)</title><rect x="1092.0" y="579.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1095.0" y="590.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="1093.2" y="579.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1096.2" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.32%)</title><rect x="1094.5" y="595.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1097.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (10 samples, 1.06%)</title><rect x="1098.3" y="643.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1101.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (10 samples, 1.06%)</title><rect x="1098.3" y="627.0" width="12.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1101.3" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (8 samples, 0.85%)</title><rect x="1098.3" y="611.0" width="10.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1101.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.21%)</title><rect x="1108.3" y="611.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1111.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.21%)</title><rect x="1108.3" y="595.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1111.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.21%)</title><rect x="1108.3" y="579.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1111.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.43%)</title><rect x="1110.8" y="643.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1113.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.43%)</title><rect x="1110.8" y="627.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1113.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.11%)</title><rect x="1114.6" y="611.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1117.6" y="622.0"></text>
</g>
<g>
<title>start_thread (59 samples, 6.28%)</title><rect x="1115.9" y="723.0" width="74.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1118.9" y="734.0">start_th..</text>
</g>
<g>
<title>java_start(Thread*) (59 samples, 6.28%)</title><rect x="1115.9" y="707.0" width="74.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1118.9" y="718.0">java_sta..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.24%)</title><rect x="1115.9" y="691.0" width="26.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1118.9" y="702.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.21%)</title><rect x="1115.9" y="675.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.9" y="686.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.21%)</title><rect x="1115.9" y="659.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1118.9" y="670.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.21%)</title><rect x="1115.9" y="643.0" width="2.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1118.9" y="654.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (18 samples, 1.92%)</title><rect x="1118.4" y="675.0" width="22.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.4" y="686.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.43%)</title><rect x="1118.4" y="659.0" width="5.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.4" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.11%)</title><rect x="1118.4" y="643.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1121.4" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.11%)</title><rect x="1118.4" y="627.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.4" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.11%)</title><rect x="1118.4" y="611.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1121.4" y="622.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.11%)</title><rect x="1119.6" y="643.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.6" y="654.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.21%)</title><rect x="1120.9" y="643.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.9" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.75%)</title><rect x="1123.4" y="659.0" width="8.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.4" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.32%)</title><rect x="1123.4" y="643.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.4" y="654.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.32%)</title><rect x="1123.4" y="627.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.4" y="638.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (3 samples, 0.32%)</title><rect x="1123.4" y="611.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.4" y="622.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (3 samples, 0.32%)</title><rect x="1123.4" y="595.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.4" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.43%)</title><rect x="1127.2" y="643.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="654.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.43%)</title><rect x="1127.2" y="627.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.75%)</title><rect x="1132.2" y="659.0" width="8.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.2" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.75%)</title><rect x="1132.2" y="643.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.2" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.75%)</title><rect x="1132.2" y="627.0" width="8.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.2" y="638.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.75%)</title><rect x="1132.2" y="611.0" width="8.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.2" y="622.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (7 samples, 0.75%)</title><rect x="1132.2" y="595.0" width="8.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.2" y="606.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (7 samples, 0.75%)</title><rect x="1132.2" y="579.0" width="8.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.2" y="590.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.53%)</title><rect x="1134.7" y="563.0" width="6.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.7" y="574.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.21%)</title><rect x="1136.0" y="547.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.0" y="558.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1137.2" y="531.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.2" y="542.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1138.5" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.5" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1139.7" y="547.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.7" y="558.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.11%)</title><rect x="1139.7" y="531.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.7" y="542.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.11%)</title><rect x="1141.0" y="675.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.0" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="1141.0" y="659.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1144.0" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (37 samples, 3.94%)</title><rect x="1142.2" y="691.0" width="46.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.2" y="702.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (37 samples, 3.94%)</title><rect x="1142.2" y="675.0" width="46.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.2" y="686.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (37 samples, 3.94%)</title><rect x="1142.2" y="659.0" width="46.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.2" y="670.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (37 samples, 3.94%)</title><rect x="1142.2" y="643.0" width="46.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.2" y="654.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (37 samples, 3.94%)</title><rect x="1142.2" y="627.0" width="46.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.2" y="638.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (37 samples, 3.94%)</title><rect x="1142.2" y="611.0" width="46.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.2" y="622.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 2.13%)</title><rect x="1142.2" y="595.0" width="25.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.2" y="606.0">C..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.11%)</title><rect x="1142.2" y="579.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.2" y="590.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.11%)</title><rect x="1142.2" y="563.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.2" y="574.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.11%)</title><rect x="1142.2" y="547.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.2" y="558.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.11%)</title><rect x="1142.2" y="531.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.2" y="542.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.11%)</title><rect x="1142.2" y="515.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.2" y="526.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="1142.2" y="499.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.2" y="510.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.11%)</title><rect x="1143.5" y="579.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.5" y="590.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.11%)</title><rect x="1143.5" y="563.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.5" y="574.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.11%)</title><rect x="1143.5" y="547.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.5" y="558.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.11%)</title><rect x="1143.5" y="531.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.5" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.21%)</title><rect x="1144.8" y="579.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.8" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.21%)</title><rect x="1144.8" y="563.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1144.8" y="547.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.8" y="558.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.11%)</title><rect x="1144.8" y="531.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.8" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1146.0" y="547.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.0" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int) (1 samples, 0.11%)</title><rect x="1146.0" y="531.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.0" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (14 samples, 1.49%)</title><rect x="1147.3" y="579.0" width="17.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.3" y="590.0"></text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.11%)</title><rect x="1147.3" y="563.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="574.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.11%)</title><rect x="1148.5" y="563.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.5" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.11%)</title><rect x="1149.8" y="563.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1149.8" y="547.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.8" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.11%)</title><rect x="1151.0" y="563.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.0" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.11%)</title><rect x="1152.3" y="563.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1152.3" y="547.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.3" y="558.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="1152.3" y="531.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.3" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.11%)</title><rect x="1153.6" y="563.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1153.6" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.11%)</title><rect x="1154.8" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.8" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.11%)</title><rect x="1156.1" y="563.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.1" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.11%)</title><rect x="1157.3" y="563.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1160.3" y="574.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.21%)</title><rect x="1158.6" y="563.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1161.6" y="574.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.11%)</title><rect x="1158.6" y="547.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.6" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.11%)</title><rect x="1159.8" y="547.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.8" y="558.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.11%)</title><rect x="1159.8" y="531.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.8" y="542.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.11%)</title><rect x="1159.8" y="515.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.8" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.21%)</title><rect x="1161.1" y="563.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.1" y="574.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.21%)</title><rect x="1161.1" y="547.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.1" y="558.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.11%)</title><rect x="1163.6" y="563.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.6" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1164.9" y="579.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1167.9" y="590.0"></text>
</g>
<g>
<title>membar_releaseNode::out_RegMask() const (1 samples, 0.11%)</title><rect x="1166.1" y="579.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.38%)</title><rect x="1167.4" y="595.0" width="16.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.11%)</title><rect x="1167.4" y="579.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.11%)</title><rect x="1167.4" y="563.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, bool, bool) (1 samples, 0.11%)</title><rect x="1168.6" y="579.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="590.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1168.6" y="563.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1171.6" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.75%)</title><rect x="1169.9" y="579.0" width="8.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.9" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1169.9" y="563.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1169.9" y="547.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_counted_loop(Node*, IdealLoopTree*) (1 samples, 0.11%)</title><rect x="1169.9" y="531.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.11%)</title><rect x="1169.9" y="515.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.9" y="526.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.11%)</title><rect x="1169.9" y="499.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1172.9" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1171.2" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1172.4" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.4" y="574.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.11%)</title><rect x="1172.4" y="547.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.32%)</title><rect x="1173.7" y="563.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.7" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.32%)</title><rect x="1173.7" y="547.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.7" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.32%)</title><rect x="1173.7" y="531.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.11%)</title><rect x="1176.2" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1177.4" y="563.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.11%)</title><rect x="1177.4" y="547.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.11%)</title><rect x="1177.4" y="531.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.11%)</title><rect x="1177.4" y="515.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1177.4" y="499.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="510.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.11%)</title><rect x="1177.4" y="483.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.43%)</title><rect x="1178.7" y="579.0" width="5.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.43%)</title><rect x="1178.7" y="563.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1178.7" y="547.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1179.9" y="547.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1181.2" y="547.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.11%)</title><rect x="1181.2" y="531.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.2" y="542.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1182.5" y="547.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.5" y="558.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="1182.5" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1182.5" y="515.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1182.5" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="510.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1182.5" y="483.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="494.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1182.5" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1183.7" y="595.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.32%)</title><rect x="1183.7" y="579.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.32%)</title><rect x="1183.7" y="563.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.32%)</title><rect x="1183.7" y="547.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.32%)</title><rect x="1183.7" y="531.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.32%)</title><rect x="1183.7" y="515.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.7" y="526.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.11%)</title><rect x="1183.7" y="499.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.7" y="510.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.11%)</title><rect x="1183.7" y="483.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.7" y="494.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.11%)</title><rect x="1183.7" y="467.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.7" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1183.7" y="451.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1185.0" y="499.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1185.0" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1185.0" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.0" y="478.0"></text>
</g>
<g>
<title>GraphKit::add_predicate(int) (1 samples, 0.11%)</title><rect x="1185.0" y="451.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.0" y="462.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.11%)</title><rect x="1185.0" y="435.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="499.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="483.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.2" y="467.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.2" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.2" y="435.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.2" y="419.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1186.2" y="403.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.2" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.2" y="371.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.2" y="355.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.2" y="339.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.2" y="323.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1186.2" y="307.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="291.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.2" y="275.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.2" y="259.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.2" y="243.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.2" y="227.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1186.2" y="211.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="195.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.2" y="179.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.11%)</title><rect x="1186.2" y="163.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="174.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1186.2" y="147.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="158.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1186.2" y="131.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="142.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1186.2" y="115.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="126.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1186.2" y="99.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.11%)</title><rect x="1186.2" y="83.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.2" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.11%)</title><rect x="1186.2" y="67.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.11%)</title><rect x="1186.2" y="51.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="62.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.11%)</title><rect x="1186.2" y="35.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="46.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.11%)</title><rect x="1187.5" y="595.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.5" y="606.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.11%)</title><rect x="1187.5" y="579.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.5" y="590.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.11%)</title><rect x="1187.5" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.5" y="574.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.11%)</title><rect x="1187.5" y="547.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="558.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.11%)</title><rect x="1187.5" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="542.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.11%)</title><rect x="1187.5" y="515.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.5" y="526.0"></text>
</g>
<g>
<title>CodeBuffer::section_index_of(unsigned char*) const (1 samples, 0.11%)</title><rect x="1187.5" y="499.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.5" y="510.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.7" y="691.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="702.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.7" y="675.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.7" y="686.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.11%)</title><rect x="1188.7" y="659.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.7" y="670.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.7" y="643.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.7" y="654.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.11%)</title><rect x="1188.7" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.7" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.11%)</title><rect x="1188.7" y="595.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.7" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.11%)</title><rect x="1188.7" y="579.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="590.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::make_parsable(bool) (1 samples, 0.11%)</title><rect x="1188.7" y="563.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.7" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.11%)</title><rect x="1188.7" y="547.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="558.0"></text>
</g>
</g>
</svg>
