<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1398" onload="init(evt)" viewBox="0 0 1200 1398" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1381"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1381"> </text>
<g id="frames">
<g>
<title>all (821 samples, 100.00%)</title><rect x="10.0" y="1347.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1358.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.12%)</title><rect x="10.0" y="1331.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="1315.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="1299.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="10.0" y="1283.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.12%)</title><rect x="10.0" y="1267.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (205 samples, 24.97%)</title><rect x="11.4" y="1331.0" width="294.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.4" y="1342.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (205 samples, 24.97%)</title><rect x="11.4" y="1315.0" width="294.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.4" y="1326.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (204 samples, 24.85%)</title><rect x="11.4" y="1299.0" width="293.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.4" y="1310.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.24%)</title><rect x="11.4" y="1283.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.24%)</title><rect x="11.4" y="1267.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.4" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.24%)</title><rect x="11.4" y="1251.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.24%)</title><rect x="11.4" y="1235.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.24%)</title><rect x="11.4" y="1219.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.24%)</title><rect x="11.4" y="1203.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="11.4" y="1187.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.12%)</title><rect x="11.4" y="1171.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.4" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="11.4" y="1155.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.12%)</title><rect x="12.9" y="1187.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.12%)</title><rect x="12.9" y="1171.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.12%)</title><rect x="12.9" y="1155.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.12%)</title><rect x="12.9" y="1139.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.61%)</title><rect x="14.3" y="1283.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.61%)</title><rect x="14.3" y="1267.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.49%)</title><rect x="14.3" y="1251.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1494210991.accept (4 samples, 0.49%)</title><rect x="14.3" y="1235.0" width="5.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.49%)</title><rect x="14.3" y="1219.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.49%)</title><rect x="14.3" y="1203.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.3" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.49%)</title><rect x="14.3" y="1187.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.values (1 samples, 0.12%)</title><rect x="20.1" y="1251.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.24%)</title><rect x="21.5" y="1283.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.24%)</title><rect x="21.5" y="1267.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.5" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.24%)</title><rect x="21.5" y="1251.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.5" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="21.5" y="1235.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="24.5" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="22.9" y="1235.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.9" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="22.9" y="1219.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="25.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (161 samples, 19.61%)</title><rect x="24.4" y="1283.0" width="231.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.4" y="1294.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/219868499.accept (157 samples, 19.12%)</title><rect x="25.8" y="1267.0" width="225.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.8" y="1278.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (156 samples, 19.00%)</title><rect x="27.2" y="1251.0" width="224.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.2" y="1262.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (135 samples, 16.44%)</title><rect x="28.7" y="1235.0" width="194.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.7" y="1246.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (135 samples, 16.44%)</title><rect x="28.7" y="1219.0" width="194.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.7" y="1230.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (135 samples, 16.44%)</title><rect x="28.7" y="1203.0" width="194.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.7" y="1214.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (135 samples, 16.44%)</title><rect x="28.7" y="1187.0" width="194.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.7" y="1198.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (135 samples, 16.44%)</title><rect x="28.7" y="1171.0" width="194.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.7" y="1182.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (135 samples, 16.44%)</title><rect x="28.7" y="1155.0" width="194.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.7" y="1166.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (99 samples, 12.06%)</title><rect x="28.7" y="1139.0" width="142.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.7" y="1150.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (18 samples, 2.19%)</title><rect x="28.7" y="1123.0" width="25.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.7" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (18 samples, 2.19%)</title><rect x="28.7" y="1107.0" width="25.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.7" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (18 samples, 2.19%)</title><rect x="28.7" y="1091.0" width="25.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.7" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.61%)</title><rect x="54.6" y="1123.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.61%)</title><rect x="54.6" y="1107.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.61%)</title><rect x="54.6" y="1091.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.61%)</title><rect x="54.6" y="1075.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (76 samples, 9.26%)</title><rect x="61.7" y="1123.0" width="109.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.7" y="1134.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (76 samples, 9.26%)</title><rect x="61.7" y="1107.0" width="109.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.7" y="1118.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (76 samples, 9.26%)</title><rect x="61.7" y="1091.0" width="109.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="1102.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (76 samples, 9.26%)</title><rect x="61.7" y="1075.0" width="109.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="1086.0">java/util/con..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (72 samples, 8.77%)</title><rect x="67.5" y="1059.0" width="103.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="70.5" y="1070.0">jdk/internal..</text>
</g>
<g>
<title>Unsafe_Unpark (34 samples, 4.14%)</title><rect x="67.5" y="1043.0" width="48.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="70.5" y="1054.0">Unsa..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.12%)</title><rect x="71.8" y="1027.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="74.8" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.24%)</title><rect x="73.2" y="1027.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="76.2" y="1038.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (5 samples, 0.61%)</title><rect x="76.1" y="1027.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="79.1" y="1038.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.37%)</title><rect x="83.3" y="1027.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="86.3" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.12%)</title><rect x="84.7" y="1011.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="87.7" y="1022.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="86.2" y="1011.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="89.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.49%)</title><rect x="87.6" y="1027.0" width="5.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="90.6" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="93.4" y="1027.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="96.4" y="1038.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.49%)</title><rect x="94.8" y="1027.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="97.8" y="1038.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.34%)</title><rect x="100.5" y="1027.0" width="15.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="103.5" y="1038.0"></text>
</g>
<g>
<title>__pthread_cond_signal (37 samples, 4.51%)</title><rect x="116.4" y="1043.0" width="53.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="119.4" y="1054.0">__pth..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="169.5" y="1043.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="172.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (23 samples, 2.80%)</title><rect x="171.0" y="1139.0" width="33.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="174.0" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (23 samples, 2.80%)</title><rect x="171.0" y="1123.0" width="33.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="174.0" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.49%)</title><rect x="198.3" y="1107.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.49%)</title><rect x="198.3" y="1091.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.58%)</title><rect x="204.0" y="1139.0" width="18.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.58%)</title><rect x="204.0" y="1123.0" width="18.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.58%)</title><rect x="204.0" y="1107.0" width="18.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.0" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.58%)</title><rect x="204.0" y="1091.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="221.3" y="1075.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="224.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.71%)</title><rect x="222.7" y="1235.0" width="20.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.7" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.71%)</title><rect x="222.7" y="1219.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="225.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.71%)</title><rect x="222.7" y="1203.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.7" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.71%)</title><rect x="222.7" y="1187.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.37%)</title><rect x="238.5" y="1171.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.37%)</title><rect x="238.5" y="1155.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="241.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.37%)</title><rect x="242.8" y="1235.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.8" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.37%)</title><rect x="242.8" y="1219.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="245.8" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.24%)</title><rect x="242.8" y="1203.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.12%)</title><rect x="244.3" y="1187.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.3" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="245.7" y="1203.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="248.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.12%)</title><rect x="245.7" y="1187.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="248.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.12%)</title><rect x="245.7" y="1171.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="245.7" y="1155.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="248.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="245.7" y="1139.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="248.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.37%)</title><rect x="247.1" y="1235.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.37%)</title><rect x="247.1" y="1219.0" width="4.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.37%)</title><rect x="247.1" y="1203.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.37%)</title><rect x="247.1" y="1187.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.24%)</title><rect x="251.5" y="1267.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.24%)</title><rect x="251.5" y="1251.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="254.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.24%)</title><rect x="251.5" y="1235.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (2 samples, 0.24%)</title><rect x="251.5" y="1219.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.5" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.12%)</title><rect x="252.9" y="1203.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.12%)</title><rect x="254.3" y="1267.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="257.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="254.3" y="1251.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.12%)</title><rect x="254.3" y="1235.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="257.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="254.3" y="1219.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="257.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 4.14%)</title><rect x="255.8" y="1283.0" width="48.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="258.8" y="1294.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 4.14%)</title><rect x="255.8" y="1267.0" width="48.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.8" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 2.80%)</title><rect x="255.8" y="1251.0" width="33.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.8" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (23 samples, 2.80%)</title><rect x="255.8" y="1235.0" width="33.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.8" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.80%)</title><rect x="255.8" y="1219.0" width="33.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.8" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (21 samples, 2.56%)</title><rect x="255.8" y="1203.0" width="30.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.8" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 2.56%)</title><rect x="255.8" y="1187.0" width="30.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.8" y="1198.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.46%)</title><rect x="260.1" y="1171.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (1 samples, 0.12%)</title><rect x="261.5" y="1155.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (1 samples, 0.12%)</title><rect x="261.5" y="1139.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="264.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="261.5" y="1123.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="264.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="261.5" y="1107.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.12%)</title><rect x="261.5" y="1091.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="264.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.12%)</title><rect x="263.0" y="1155.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.85%)</title><rect x="264.4" y="1155.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="267.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.85%)</title><rect x="264.4" y="1139.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (7 samples, 0.85%)</title><rect x="264.4" y="1123.0" width="10.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (7 samples, 0.85%)</title><rect x="264.4" y="1107.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.73%)</title><rect x="265.8" y="1091.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (2 samples, 0.24%)</title><rect x="274.5" y="1155.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (2 samples, 0.24%)</title><rect x="274.5" y="1139.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="277.5" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.12%)</title><rect x="274.5" y="1123.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.12%)</title><rect x="275.9" y="1123.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.12%)</title><rect x="275.9" y="1107.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="278.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseTimestamp (1 samples, 0.12%)</title><rect x="275.9" y="1091.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (6 samples, 0.73%)</title><rect x="277.3" y="1171.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.73%)</title><rect x="277.3" y="1155.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="280.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.73%)</title><rect x="277.3" y="1139.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.3" y="1150.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.73%)</title><rect x="277.3" y="1123.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.3" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="284.5" y="1107.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="287.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.12%)</title><rect x="286.0" y="1203.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.12%)</title><rect x="286.0" y="1187.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="286.0" y="1171.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.0" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="286.0" y="1155.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="289.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.12%)</title><rect x="287.4" y="1203.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="290.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.12%)</title><rect x="287.4" y="1187.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="287.4" y="1171.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="287.4" y="1155.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.37%)</title><rect x="288.8" y="1251.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.24%)</title><rect x="288.8" y="1235.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.24%)</title><rect x="288.8" y="1219.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.24%)</title><rect x="288.8" y="1203.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="291.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.24%)</title><rect x="288.8" y="1187.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.8" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (2 samples, 0.24%)</title><rect x="288.8" y="1171.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.8" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (1 samples, 0.12%)</title><rect x="290.3" y="1155.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.contains (1 samples, 0.12%)</title><rect x="290.3" y="1139.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.12%)</title><rect x="290.3" y="1123.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.12%)</title><rect x="290.3" y="1107.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="290.3" y="1091.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.12%)</title><rect x="291.7" y="1235.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.85%)</title><rect x="293.1" y="1251.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.73%)</title><rect x="293.1" y="1235.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.12%)</title><rect x="293.1" y="1219.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.12%)</title><rect x="293.1" y="1203.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.12%)</title><rect x="293.1" y="1187.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.12%)</title><rect x="293.1" y="1171.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.parse (1 samples, 0.12%)</title><rect x="293.1" y="1155.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.12%)</title><rect x="293.1" y="1139.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.read (1 samples, 0.12%)</title><rect x="293.1" y="1123.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.12%)</title><rect x="293.1" y="1107.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.read (1 samples, 0.12%)</title><rect x="293.1" y="1091.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="296.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.12%)</title><rect x="294.6" y="1219.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.12%)</title><rect x="294.6" y="1203.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.6" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="294.6" y="1187.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.6" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="294.6" y="1171.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="297.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="294.6" y="1155.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="297.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="294.6" y="1139.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="294.6" y="1123.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="297.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.12%)</title><rect x="294.6" y="1107.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.6" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="294.6" y="1091.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="297.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.12%)</title><rect x="296.0" y="1219.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.12%)</title><rect x="296.0" y="1203.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.37%)</title><rect x="297.5" y="1219.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="300.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.24%)</title><rect x="298.9" y="1203.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="301.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.24%)</title><rect x="298.9" y="1187.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.24%)</title><rect x="298.9" y="1171.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.24%)</title><rect x="298.9" y="1155.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.24%)</title><rect x="298.9" y="1139.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.12%)</title><rect x="298.9" y="1123.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.9" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.12%)</title><rect x="298.9" y="1107.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.9" y="1118.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="298.9" y="1091.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="301.9" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="298.9" y="1075.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="301.9" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="298.9" y="1059.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="301.9" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="298.9" y="1043.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.9" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="298.9" y="1027.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="301.9" y="1038.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="298.9" y="1011.0" width="1.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="301.9" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.12%)</title><rect x="300.3" y="1123.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.3" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="300.3" y="1107.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.3" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="300.3" y="1091.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.3" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="300.3" y="1075.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.3" y="1086.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.12%)</title><rect x="300.3" y="1059.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.12%)</title><rect x="300.3" y="1043.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.12%)</title><rect x="300.3" y="1027.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.3" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="300.3" y="1011.0" width="1.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="303.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.12%)</title><rect x="301.8" y="1235.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="304.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.12%)</title><rect x="301.8" y="1219.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.12%)</title><rect x="301.8" y="1203.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.12%)</title><rect x="301.8" y="1187.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="304.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.12%)</title><rect x="301.8" y="1171.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.12%)</title><rect x="301.8" y="1155.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="304.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.12%)</title><rect x="301.8" y="1139.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.8" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.12%)</title><rect x="301.8" y="1123.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.12%)</title><rect x="303.2" y="1251.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="306.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="303.2" y="1235.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="306.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="303.2" y="1219.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.12%)</title><rect x="303.2" y="1203.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="306.2" y="1214.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.12%)</title><rect x="303.2" y="1187.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.2" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.12%)</title><rect x="303.2" y="1171.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.2" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.12%)</title><rect x="304.6" y="1299.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="307.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.12%)</title><rect x="304.6" y="1283.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="304.6" y="1267.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.12%)</title><rect x="304.6" y="1251.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.12%)</title><rect x="304.6" y="1235.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.6" y="1246.0"></text>
</g>
<g>
<title>java/lang/Thread.run (512 samples, 62.36%)</title><rect x="306.1" y="1331.0" width="735.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.1" y="1342.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (512 samples, 62.36%)</title><rect x="306.1" y="1315.0" width="735.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="309.1" y="1326.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (512 samples, 62.36%)</title><rect x="306.1" y="1299.0" width="735.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.1" y="1310.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1545218049.run (302 samples, 36.78%)</title><rect x="307.5" y="1283.0" width="434.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="310.5" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (302 samples, 36.78%)</title><rect x="307.5" y="1267.0" width="434.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="310.5" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (302 samples, 36.78%)</title><rect x="307.5" y="1251.0" width="434.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.5" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUni..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (302 samples, 36.78%)</title><rect x="307.5" y="1235.0" width="434.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.5" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipel..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.12%)</title><rect x="313.3" y="1219.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.3" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (36 samples, 4.38%)</title><rect x="314.7" y="1219.0" width="51.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.7" y="1230.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (36 samples, 4.38%)</title><rect x="314.7" y="1203.0" width="51.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.7" y="1214.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (36 samples, 4.38%)</title><rect x="314.7" y="1187.0" width="51.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.7" y="1198.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.24%)</title><rect x="334.8" y="1171.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="337.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 2.44%)</title><rect x="337.7" y="1171.0" width="28.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="340.7" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 2.44%)</title><rect x="337.7" y="1155.0" width="28.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="340.7" y="1166.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$484/209838104.accept (20 samples, 2.44%)</title><rect x="337.7" y="1139.0" width="28.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.7" y="1150.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (20 samples, 2.44%)</title><rect x="337.7" y="1123.0" width="28.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="340.7" y="1134.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (20 samples, 2.44%)</title><rect x="337.7" y="1107.0" width="28.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.7" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (20 samples, 2.44%)</title><rect x="337.7" y="1091.0" width="28.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.7" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (20 samples, 2.44%)</title><rect x="337.7" y="1075.0" width="28.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="340.7" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.85%)</title><rect x="337.7" y="1059.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="340.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1128999091.accept (1 samples, 0.12%)</title><rect x="342.0" y="1043.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="345.0" y="1054.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.37%)</title><rect x="343.4" y="1043.0" width="4.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="346.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.58%)</title><rect x="347.8" y="1059.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="350.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (89 samples, 10.84%)</title><rect x="366.4" y="1219.0" width="128.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="369.4" y="1230.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (89 samples, 10.84%)</title><rect x="366.4" y="1203.0" width="128.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.4" y="1214.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (89 samples, 10.84%)</title><rect x="366.4" y="1187.0" width="128.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.4" y="1198.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (89 samples, 10.84%)</title><rect x="366.4" y="1171.0" width="128.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="369.4" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (89 samples, 10.84%)</title><rect x="366.4" y="1155.0" width="128.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="369.4" y="1166.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (89 samples, 10.84%)</title><rect x="366.4" y="1139.0" width="128.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.4" y="1150.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (34 samples, 4.14%)</title><rect x="366.4" y="1123.0" width="48.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="369.4" y="1134.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.97%)</title><rect x="366.4" y="1107.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="366.4" y="1091.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="369.4" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="366.4" y="1075.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="369.4" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="366.4" y="1059.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="369.4" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="366.4" y="1043.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="369.4" y="1054.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="366.4" y="1027.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="369.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (7 samples, 0.85%)</title><rect x="367.9" y="1091.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="370.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (7 samples, 0.85%)</title><rect x="367.9" y="1075.0" width="10.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.85%)</title><rect x="367.9" y="1059.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.85%)</title><rect x="367.9" y="1043.0" width="10.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.9" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.37%)</title><rect x="373.6" y="1027.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="376.6" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.37%)</title><rect x="373.6" y="1011.0" width="4.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="376.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (26 samples, 3.17%)</title><rect x="377.9" y="1107.0" width="37.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.9" y="1118.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 3.17%)</title><rect x="377.9" y="1091.0" width="37.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.9" y="1102.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="377.9" y="1075.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="380.9" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="377.9" y="1059.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="380.9" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="377.9" y="1043.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="380.9" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="377.9" y="1027.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="380.9" y="1038.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="377.9" y="1011.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="380.9" y="1022.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.12%)</title><rect x="377.9" y="995.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="380.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (25 samples, 3.05%)</title><rect x="379.4" y="1075.0" width="35.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.4" y="1086.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.24%)</title><rect x="379.4" y="1059.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="382.4" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="380.8" y="1043.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="383.8" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="380.8" y="1027.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="383.8" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="380.8" y="1011.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="383.8" y="1022.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="380.8" y="995.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="383.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (23 samples, 2.80%)</title><rect x="382.3" y="1059.0" width="33.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="385.3" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (21 samples, 2.56%)</title><rect x="382.3" y="1043.0" width="30.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.3" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (21 samples, 2.56%)</title><rect x="382.3" y="1027.0" width="30.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="385.3" y="1038.0">co..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.61%)</title><rect x="405.2" y="1011.0" width="7.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="408.2" y="1022.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.49%)</title><rect x="406.7" y="995.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="409.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.24%)</title><rect x="412.4" y="1043.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.24%)</title><rect x="412.4" y="1027.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.12%)</title><rect x="413.9" y="1011.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="416.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (49 samples, 5.97%)</title><rect x="415.3" y="1123.0" width="70.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.3" y="1134.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.37%)</title><rect x="415.3" y="1107.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.37%)</title><rect x="415.3" y="1091.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="418.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.37%)</title><rect x="419.6" y="1107.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.24%)</title><rect x="421.1" y="1091.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.12%)</title><rect x="421.1" y="1075.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.12%)</title><rect x="421.1" y="1059.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="424.1" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="421.1" y="1043.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="424.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="422.5" y="1075.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="425.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.37%)</title><rect x="423.9" y="1107.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.37%)</title><rect x="423.9" y="1091.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.37%)</title><rect x="423.9" y="1075.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.37%)</title><rect x="423.9" y="1059.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="426.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.37%)</title><rect x="423.9" y="1043.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="426.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (3 samples, 0.37%)</title><rect x="423.9" y="1027.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="426.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (40 samples, 4.87%)</title><rect x="428.2" y="1107.0" width="57.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="431.2" y="1118.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (40 samples, 4.87%)</title><rect x="428.2" y="1091.0" width="57.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.2" y="1102.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.97%)</title><rect x="428.2" y="1075.0" width="11.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="431.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.24%)</title><rect x="428.2" y="1059.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="431.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.49%)</title><rect x="431.1" y="1059.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.24%)</title><rect x="434.0" y="1043.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="437.0" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.24%)</title><rect x="434.0" y="1027.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="437.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.24%)</title><rect x="434.0" y="1011.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.24%)</title><rect x="434.0" y="995.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="437.0" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.24%)</title><rect x="436.9" y="1059.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="439.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.24%)</title><rect x="436.9" y="1043.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="439.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (32 samples, 3.90%)</title><rect x="439.7" y="1075.0" width="46.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="442.7" y="1086.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (32 samples, 3.90%)</title><rect x="439.7" y="1059.0" width="46.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="442.7" y="1070.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (31 samples, 3.78%)</title><rect x="441.2" y="1043.0" width="44.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.2" y="1054.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.22%)</title><rect x="451.2" y="1027.0" width="14.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.12%)</title><rect x="451.2" y="1011.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.61%)</title><rect x="452.7" y="1011.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.61%)</title><rect x="452.7" y="995.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.61%)</title><rect x="452.7" y="979.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.49%)</title><rect x="454.1" y="963.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.12%)</title><rect x="459.9" y="1011.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.12%)</title><rect x="459.9" y="995.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.12%)</title><rect x="459.9" y="979.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.24%)</title><rect x="461.3" y="1011.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.24%)</title><rect x="461.3" y="995.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="462.7" y="979.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.12%)</title><rect x="464.2" y="1011.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="467.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.73%)</title><rect x="465.6" y="1027.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.61%)</title><rect x="467.1" y="1011.0" width="7.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="470.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.61%)</title><rect x="467.1" y="995.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.61%)</title><rect x="467.1" y="979.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (5 samples, 0.61%)</title><rect x="467.1" y="963.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (5 samples, 0.61%)</title><rect x="467.1" y="947.0" width="7.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.1" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (5 samples, 0.61%)</title><rect x="467.1" y="931.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (5 samples, 0.61%)</title><rect x="467.1" y="915.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (5 samples, 0.61%)</title><rect x="467.1" y="899.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.61%)</title><rect x="474.2" y="1027.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="477.2" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.61%)</title><rect x="474.2" y="1011.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="477.2" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.37%)</title><rect x="474.2" y="995.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="477.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="478.6" y="995.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.6" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="478.6" y="979.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="481.6" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.24%)</title><rect x="478.6" y="963.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="481.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.37%)</title><rect x="481.4" y="1027.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="484.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.73%)</title><rect x="485.7" y="1123.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="488.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.73%)</title><rect x="485.7" y="1107.0" width="8.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.73%)</title><rect x="485.7" y="1091.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="488.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.73%)</title><rect x="485.7" y="1075.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="488.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.73%)</title><rect x="485.7" y="1059.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.7" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (171 samples, 20.83%)</title><rect x="494.4" y="1219.0" width="245.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.4" y="1230.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (28 samples, 3.41%)</title><rect x="495.8" y="1203.0" width="40.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="498.8" y="1214.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.12%)</title><rect x="495.8" y="1187.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="498.8" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (27 samples, 3.29%)</title><rect x="497.2" y="1187.0" width="38.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.2" y="1198.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 2.92%)</title><rect x="501.5" y="1171.0" width="34.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="504.5" y="1182.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (18 samples, 2.19%)</title><rect x="501.5" y="1155.0" width="25.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="504.5" y="1166.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 1.22%)</title><rect x="513.0" y="1139.0" width="14.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="516.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 1.22%)</title><rect x="513.0" y="1123.0" width="14.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="516.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 0.73%)</title><rect x="527.4" y="1155.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="530.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 0.73%)</title><rect x="527.4" y="1139.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="530.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.37%)</title><rect x="527.4" y="1123.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="530.4" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.37%)</title><rect x="527.4" y="1107.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.37%)</title><rect x="527.4" y="1091.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="530.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.24%)</title><rect x="528.9" y="1075.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="531.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.37%)</title><rect x="531.7" y="1123.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="534.7" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.49%)</title><rect x="536.0" y="1203.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="539.0" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.49%)</title><rect x="536.0" y="1187.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="539.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (91 samples, 11.08%)</title><rect x="541.8" y="1203.0" width="130.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="544.8" y="1214.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (87 samples, 10.60%)</title><rect x="541.8" y="1187.0" width="125.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="544.8" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (32 samples, 3.90%)</title><rect x="541.8" y="1171.0" width="46.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.8" y="1182.0">com/..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.12%)</title><rect x="544.7" y="1155.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="547.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (4 samples, 0.49%)</title><rect x="546.1" y="1155.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.1" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (22 samples, 2.68%)</title><rect x="551.9" y="1155.0" width="31.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="554.9" y="1166.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="553.3" y="1139.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="556.3" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 2.44%)</title><rect x="554.7" y="1139.0" width="28.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="557.7" y="1150.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (17 samples, 2.07%)</title><rect x="556.2" y="1123.0" width="24.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="559.2" y="1134.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.newCapacity (4 samples, 0.49%)</title><rect x="559.0" y="1107.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.12%)</title><rect x="564.8" y="1107.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="567.8" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (10 samples, 1.22%)</title><rect x="566.2" y="1107.0" width="14.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="569.2" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="574.8" y="1091.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="577.8" y="1102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="574.8" y="1075.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="577.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="574.8" y="1059.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="577.8" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="574.8" y="1043.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="577.8" y="1054.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="574.8" y="1027.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="577.8" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.37%)</title><rect x="576.3" y="1091.0" width="4.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="579.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.12%)</title><rect x="580.6" y="1123.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="583.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.12%)</title><rect x="580.6" y="1107.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="583.6" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="582.0" y="1123.0" width="1.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="585.0" y="1134.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.24%)</title><rect x="583.5" y="1155.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="586.5" y="1166.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="586.3" y="1155.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="589.3" y="1166.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (55 samples, 6.70%)</title><rect x="587.8" y="1171.0" width="79.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="590.8" y="1182.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (55 samples, 6.70%)</title><rect x="587.8" y="1155.0" width="79.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.8" y="1166.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (29 samples, 3.53%)</title><rect x="587.8" y="1139.0" width="41.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="590.8" y="1150.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 1.10%)</title><rect x="613.7" y="1123.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 1.10%)</title><rect x="613.7" y="1107.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="616.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.12%)</title><rect x="626.6" y="1123.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.6" y="1134.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="628.0" y="1123.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="631.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="629.5" y="1139.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.12%)</title><rect x="629.5" y="1123.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="632.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.37%)</title><rect x="630.9" y="1139.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.9" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (22 samples, 2.68%)</title><rect x="635.2" y="1139.0" width="31.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.2" y="1150.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (22 samples, 2.68%)</title><rect x="635.2" y="1123.0" width="31.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.2" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="635.2" y="1107.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.2" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (20 samples, 2.44%)</title><rect x="638.1" y="1107.0" width="28.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.1" y="1118.0">ja..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="662.5" y="1091.0" width="2.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.12%)</title><rect x="665.4" y="1091.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="668.4" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="665.4" y="1075.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="668.4" y="1086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="665.4" y="1059.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="668.4" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="665.4" y="1043.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="668.4" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="665.4" y="1027.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="668.4" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="665.4" y="1011.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="668.4" y="1022.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.12%)</title><rect x="665.4" y="995.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="668.4" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.12%)</title><rect x="665.4" y="979.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="668.4" y="990.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="665.4" y="963.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="668.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (4 samples, 0.49%)</title><rect x="666.8" y="1187.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="669.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (4 samples, 0.49%)</title><rect x="666.8" y="1171.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.49%)</title><rect x="666.8" y="1155.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="669.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.49%)</title><rect x="666.8" y="1139.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="669.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.49%)</title><rect x="666.8" y="1123.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="669.8" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.49%)</title><rect x="666.8" y="1107.0" width="5.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="669.8" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="671.1" y="1091.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="674.1" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (33 samples, 4.02%)</title><rect x="672.6" y="1203.0" width="47.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="675.6" y="1214.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (33 samples, 4.02%)</title><rect x="672.6" y="1187.0" width="47.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.6" y="1198.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/380176380.process (2 samples, 0.24%)</title><rect x="672.6" y="1171.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="675.6" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (2 samples, 0.24%)</title><rect x="672.6" y="1155.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="675.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (2 samples, 0.24%)</title><rect x="672.6" y="1139.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.6" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="674.0" y="1123.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="674.0" y="1107.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (10 samples, 1.22%)</title><rect x="675.5" y="1171.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="678.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.12%)</title><rect x="688.4" y="1155.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="691.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.37%)</title><rect x="689.8" y="1171.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="692.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (3 samples, 0.37%)</title><rect x="689.8" y="1155.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="692.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.12%)</title><rect x="694.1" y="1171.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.12%)</title><rect x="694.1" y="1155.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="697.1" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="695.6" y="1171.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="698.6" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.12%)</title><rect x="695.6" y="1155.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="698.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (7 samples, 0.85%)</title><rect x="697.0" y="1171.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="700.0" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.24%)</title><rect x="704.2" y="1155.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.2" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="705.6" y="1139.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="708.6" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="707.1" y="1171.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="707.1" y="1155.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="710.1" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.12%)</title><rect x="707.1" y="1139.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="710.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.97%)</title><rect x="708.5" y="1171.0" width="11.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.97%)</title><rect x="708.5" y="1155.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="711.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.97%)</title><rect x="708.5" y="1139.0" width="11.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="711.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (6 samples, 0.73%)</title><rect x="708.5" y="1123.0" width="8.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="711.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$481/1587311751.accept (2 samples, 0.24%)</title><rect x="711.4" y="1107.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="714.4" y="1118.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.24%)</title><rect x="714.3" y="1107.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="717.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.24%)</title><rect x="717.1" y="1123.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="720.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.71%)</title><rect x="720.0" y="1203.0" width="20.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="723.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.71%)</title><rect x="720.0" y="1187.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="723.0" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.49%)</title><rect x="724.3" y="1171.0" width="5.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="727.3" y="1182.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.49%)</title><rect x="724.3" y="1155.0" width="5.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="727.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.85%)</title><rect x="730.1" y="1171.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.85%)</title><rect x="730.1" y="1155.0" width="10.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="733.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$483/146699735.accept (6 samples, 0.73%)</title><rect x="731.5" y="1139.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="734.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="732.9" y="1123.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="735.9" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.49%)</title><rect x="734.4" y="1123.0" width="5.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="737.4" y="1134.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.49%)</title><rect x="734.4" y="1107.0" width="5.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="737.4" y="1118.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.12%)</title><rect x="740.1" y="1219.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="743.1" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="740.1" y="1203.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="743.1" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.61%)</title><rect x="741.6" y="1283.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.6" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.61%)</title><rect x="741.6" y="1267.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.6" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.61%)</title><rect x="741.6" y="1251.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="744.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.61%)</title><rect x="741.6" y="1235.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (204 samples, 24.85%)</title><rect x="748.8" y="1283.0" width="293.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="751.8" y="1294.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (203 samples, 24.73%)</title><rect x="750.2" y="1267.0" width="291.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.2" y="1278.0">java/util/concurrent/LinkedBlockingQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (181 samples, 22.05%)</title><rect x="755.9" y="1251.0" width="260.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="758.9" y="1262.0">java/util/concurrent/locks/Abstract..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 2.44%)</title><rect x="770.3" y="1235.0" width="28.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="773.3" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.73%)</title><rect x="799.1" y="1235.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="802.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.73%)</title><rect x="799.1" y="1219.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="802.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.37%)</title><rect x="803.4" y="1203.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (144 samples, 17.54%)</title><rect x="807.7" y="1235.0" width="207.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="810.7" y="1246.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (144 samples, 17.54%)</title><rect x="807.7" y="1219.0" width="207.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="810.7" y="1230.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="809.1" y="1203.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="812.1" y="1214.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.12%)</title><rect x="810.6" y="1203.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="813.6" y="1214.0"></text>
</g>
<g>
<title>Unsafe_Park (141 samples, 17.17%)</title><rect x="812.0" y="1203.0" width="202.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="815.0" y="1214.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.12%)</title><rect x="816.3" y="1187.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="819.3" y="1198.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="817.7" y="1187.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="820.7" y="1198.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 1.71%)</title><rect x="819.2" y="1187.0" width="20.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="822.2" y="1198.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.49%)</title><rect x="827.8" y="1171.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="830.8" y="1182.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.12%)</title><rect x="832.1" y="1155.0" width="1.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="835.1" y="1166.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.24%)</title><rect x="833.6" y="1171.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.6" y="1182.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.24%)</title><rect x="836.4" y="1171.0" width="2.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="839.4" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.24%)</title><rect x="839.3" y="1187.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="842.3" y="1198.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.24%)</title><rect x="842.2" y="1187.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="845.2" y="1198.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.12%)</title><rect x="845.1" y="1187.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="848.1" y="1198.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 4.75%)</title><rect x="846.5" y="1187.0" width="56.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="849.5" y="1198.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 6.94%)</title><rect x="902.5" y="1187.0" width="82.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="905.5" y="1198.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (13 samples, 1.58%)</title><rect x="984.5" y="1187.0" width="18.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="987.5" y="1198.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.12%)</title><rect x="1003.2" y="1187.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1006.2" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.12%)</title><rect x="1004.6" y="1187.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1007.6" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.24%)</title><rect x="1006.0" y="1187.0" width="2.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1009.0" y="1198.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.37%)</title><rect x="1008.9" y="1187.0" width="4.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1011.9" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="1013.2" y="1187.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.2" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.12%)</title><rect x="1014.7" y="1235.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1017.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 2.19%)</title><rect x="1016.1" y="1251.0" width="25.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1019.1" y="1262.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 2.19%)</title><rect x="1016.1" y="1235.0" width="25.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1019.1" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 2.19%)</title><rect x="1016.1" y="1219.0" width="25.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.1" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 2.19%)</title><rect x="1016.1" y="1203.0" width="25.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.1" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.12%)</title><rect x="1040.5" y="1187.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1043.5" y="1198.0"></text>
</g>
<g>
<title>start_thread (103 samples, 12.55%)</title><rect x="1042.0" y="1331.0" width="148.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1045.0" y="1342.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (103 samples, 12.55%)</title><rect x="1042.0" y="1315.0" width="148.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1045.0" y="1326.0">thread_native_entry..</text>
</g>
<g>
<title>Thread::call_run() (103 samples, 12.55%)</title><rect x="1042.0" y="1299.0" width="148.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1045.0" y="1310.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.12%)</title><rect x="1042.0" y="1283.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.0" y="1294.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1042.0" y="1267.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.0" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1042.0" y="1251.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1045.0" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1042.0" y="1235.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1045.0" y="1246.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.12%)</title><rect x="1042.0" y="1219.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1045.0" y="1230.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.12%)</title><rect x="1042.0" y="1203.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1045.0" y="1214.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.12%)</title><rect x="1042.0" y="1187.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.0" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.12%)</title><rect x="1042.0" y="1171.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.0" y="1182.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.12%)</title><rect x="1042.0" y="1155.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1045.0" y="1166.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWord**, unsigned long*, HeapWord*, HeapWord*) (1 samples, 0.12%)</title><rect x="1042.0" y="1139.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.0" y="1150.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (101 samples, 12.30%)</title><rect x="1043.4" y="1283.0" width="145.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.4" y="1294.0">JavaThread::thread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (100 samples, 12.18%)</title><rect x="1043.4" y="1267.0" width="143.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.4" y="1278.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (100 samples, 12.18%)</title><rect x="1043.4" y="1251.0" width="143.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.4" y="1262.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (100 samples, 12.18%)</title><rect x="1043.4" y="1235.0" width="143.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.4" y="1246.0">C2Compiler::compil..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (100 samples, 12.18%)</title><rect x="1043.4" y="1219.0" width="143.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.4" y="1230.0">Compile::Compile(c..</text>
</g>
<g>
<title>Compile::Code_Gen() (50 samples, 6.09%)</title><rect x="1043.4" y="1203.0" width="71.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.4" y="1214.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.37%)</title><rect x="1043.4" y="1187.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.4" y="1198.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.37%)</title><rect x="1043.4" y="1171.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.4" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1043.4" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.4" y="1166.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.12%)</title><rect x="1043.4" y="1139.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1046.4" y="1150.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.24%)</title><rect x="1044.8" y="1155.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1047.8" y="1166.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.24%)</title><rect x="1044.8" y="1139.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.8" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.12%)</title><rect x="1047.7" y="1187.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.7" y="1198.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.12%)</title><rect x="1047.7" y="1171.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1050.7" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.12%)</title><rect x="1047.7" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.7" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.12%)</title><rect x="1047.7" y="1139.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.7" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.61%)</title><rect x="1049.1" y="1187.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.1" y="1198.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) [clone .part.135] (1 samples, 0.12%)</title><rect x="1049.1" y="1171.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.1" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.49%)</title><rect x="1050.6" y="1171.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.6" y="1182.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.37%)</title><rect x="1050.6" y="1155.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.6" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1054.9" y="1155.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.9" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.12%)</title><rect x="1054.9" y="1139.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.9" y="1150.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.12%)</title><rect x="1054.9" y="1123.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.9" y="1134.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.12%)</title><rect x="1054.9" y="1107.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.37%)</title><rect x="1056.3" y="1187.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.12%)</title><rect x="1056.3" y="1171.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.3" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.12%)</title><rect x="1056.3" y="1155.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1059.3" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.24%)</title><rect x="1057.8" y="1171.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.8" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1057.8" y="1155.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.12%)</title><rect x="1057.8" y="1139.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.8" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.12%)</title><rect x="1059.2" y="1155.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.2" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1059.2" y="1139.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (38 samples, 4.63%)</title><rect x="1060.6" y="1187.0" width="54.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1063.6" y="1198.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.12%)</title><rect x="1060.6" y="1171.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1063.6" y="1182.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.12%)</title><rect x="1062.1" y="1171.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.1" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.37%)</title><rect x="1063.5" y="1171.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.5" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1063.5" y="1155.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1066.5" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.12%)</title><rect x="1065.0" y="1155.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1068.0" y="1166.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.12%)</title><rect x="1065.0" y="1139.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.12%)</title><rect x="1066.4" y="1155.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1069.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.12%)</title><rect x="1067.8" y="1171.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1067.8" y="1155.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1070.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.61%)</title><rect x="1069.3" y="1171.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1072.3" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.12%)</title><rect x="1075.0" y="1155.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1078.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.12%)</title><rect x="1075.0" y="1139.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1078.0" y="1150.0"></text>
</g>
<g>
<title>RegMask::num_registers(unsigned int) (1 samples, 0.12%)</title><rect x="1075.0" y="1123.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.0" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 1.10%)</title><rect x="1076.5" y="1171.0" width="12.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.5" y="1182.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.12%)</title><rect x="1077.9" y="1155.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1080.9" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.12%)</title><rect x="1079.3" y="1155.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.3" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.12%)</title><rect x="1079.3" y="1139.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1082.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.37%)</title><rect x="1080.8" y="1155.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1083.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.24%)</title><rect x="1082.2" y="1139.0" width="2.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1085.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.24%)</title><rect x="1085.1" y="1155.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1086.5" y="1139.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1089.5" y="1150.0"></text>
</g>
<g>
<title>SCMemProjNode::Opcode() const (1 samples, 0.12%)</title><rect x="1088.0" y="1155.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.12%)</title><rect x="1089.4" y="1171.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1092.4" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.49%)</title><rect x="1090.8" y="1171.0" width="5.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.8" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1093.7" y="1155.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.7" y="1166.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.12%)</title><rect x="1095.1" y="1155.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.1" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.12%)</title><rect x="1096.6" y="1171.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.6" y="1182.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1096.6" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.6" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.61%)</title><rect x="1098.0" y="1171.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.0" y="1182.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1103.8" y="1155.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1106.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.12%)</title><rect x="1105.2" y="1171.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1108.2" y="1182.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.12%)</title><rect x="1105.2" y="1155.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.2" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.12%)</title><rect x="1105.2" y="1139.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.24%)</title><rect x="1106.6" y="1171.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.6" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1108.1" y="1155.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.12%)</title><rect x="1109.5" y="1171.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.5" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.37%)</title><rect x="1111.0" y="1171.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1114.0" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1113.8" y="1155.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1113.8" y="1139.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.8" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (42 samples, 5.12%)</title><rect x="1115.3" y="1203.0" width="60.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.3" y="1214.0">Compil..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (13 samples, 1.58%)</title><rect x="1115.3" y="1187.0" width="18.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1118.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (13 samples, 1.58%)</title><rect x="1115.3" y="1171.0" width="18.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.3" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1155.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.7" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.7" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1123.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.7" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1107.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.7" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1091.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.7" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1075.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1119.7" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1116.7" y="1059.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1119.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.12%)</title><rect x="1116.7" y="1043.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1119.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1116.7" y="1027.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1119.7" y="1038.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.12%)</title><rect x="1116.7" y="1011.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.37%)</title><rect x="1118.1" y="1155.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.24%)</title><rect x="1122.4" y="1155.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.61%)</title><rect x="1125.3" y="1155.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.37%)</title><rect x="1128.2" y="1139.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1131.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.12%)</title><rect x="1131.1" y="1123.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.12%)</title><rect x="1131.1" y="1107.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.12%)</title><rect x="1132.5" y="1155.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.12%)</title><rect x="1132.5" y="1139.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.5" y="1150.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.12%)</title><rect x="1133.9" y="1187.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.37%)</title><rect x="1135.4" y="1187.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.4" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.37%)</title><rect x="1135.4" y="1171.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (3 samples, 0.37%)</title><rect x="1135.4" y="1155.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.37%)</title><rect x="1135.4" y="1139.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1123.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1107.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1091.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1075.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1059.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1043.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1027.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="1011.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="995.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="979.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="963.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="947.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="931.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="915.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="899.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="883.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="867.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="851.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="835.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="819.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="803.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="787.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="771.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="755.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="739.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="723.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="707.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="691.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="675.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="659.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="643.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="627.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="611.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="595.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.4" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="563.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="547.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.4" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="531.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.12%)</title><rect x="1135.4" y="515.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.4" y="526.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.12%)</title><rect x="1135.4" y="499.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.24%)</title><rect x="1136.8" y="1123.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.12%)</title><rect x="1136.8" y="1107.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.8" y="1118.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.12%)</title><rect x="1136.8" y="1091.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1107.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1091.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1075.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1059.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1043.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1027.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="1011.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="995.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="979.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="963.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="947.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.3" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="931.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="915.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.3" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="899.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.3" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="883.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="867.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="851.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1141.3" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="835.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="819.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.3" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="803.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.3" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="787.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.3" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="771.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="755.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="739.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="723.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="707.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="691.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="675.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="659.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="643.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="627.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="611.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="595.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="579.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="563.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="547.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="531.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="515.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.3" y="499.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.3" y="510.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1138.3" y="483.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.3" y="494.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.12%)</title><rect x="1138.3" y="467.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.3" y="478.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.12%)</title><rect x="1138.3" y="451.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.3" y="462.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.12%)</title><rect x="1138.3" y="435.0" width="1.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1141.3" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (10 samples, 1.22%)</title><rect x="1139.7" y="1187.0" width="14.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.7" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1139.7" y="1171.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.7" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1139.7" y="1155.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.7" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1139.7" y="1139.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1139.7" y="1123.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.12%)</title><rect x="1139.7" y="1107.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.7" y="1118.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.12%)</title><rect x="1139.7" y="1091.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.7" y="1102.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.12%)</title><rect x="1139.7" y="1075.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.7" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.24%)</title><rect x="1141.1" y="1171.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1141.1" y="1155.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1141.1" y="1139.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1141.1" y="1123.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.1" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1141.1" y="1107.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.12%)</title><rect x="1141.1" y="1091.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1141.1" y="1075.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="1086.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.12%)</title><rect x="1141.1" y="1059.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.12%)</title><rect x="1142.6" y="1155.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="1166.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.12%)</title><rect x="1142.6" y="1139.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.49%)</title><rect x="1144.0" y="1171.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.24%)</title><rect x="1146.9" y="1155.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.12%)</title><rect x="1148.3" y="1139.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.12%)</title><rect x="1149.8" y="1171.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.12%)</title><rect x="1149.8" y="1155.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.12%)</title><rect x="1149.8" y="1139.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1149.8" y="1123.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.12%)</title><rect x="1151.2" y="1171.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.12%)</title><rect x="1151.2" y="1155.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.2" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1151.2" y="1139.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.12%)</title><rect x="1151.2" y="1123.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.2" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1152.6" y="1171.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1155.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (12 samples, 1.46%)</title><rect x="1154.1" y="1187.0" width="17.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1157.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (12 samples, 1.46%)</title><rect x="1154.1" y="1171.0" width="17.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.1" y="1182.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1155.5" y="1155.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.5" y="1166.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1155.5" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.5" y="1150.0"></text>
</g>
<g>
<title>ConPNode::Opcode() const (1 samples, 0.12%)</title><rect x="1156.9" y="1155.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.9" y="1166.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1158.4" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.4" y="1166.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.12%)</title><rect x="1158.4" y="1139.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1161.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1158.4" y="1123.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.4" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.12%)</title><rect x="1158.4" y="1107.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.4" y="1118.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1159.8" y="1155.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.8" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1161.3" y="1155.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.3" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.24%)</title><rect x="1162.7" y="1155.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.7" y="1166.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.49%)</title><rect x="1165.6" y="1155.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (4 samples, 0.49%)</title><rect x="1165.6" y="1139.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.49%)</title><rect x="1165.6" y="1123.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.49%)</title><rect x="1165.6" y="1107.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.49%)</title><rect x="1165.6" y="1091.0" width="5.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="1075.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="1059.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="1043.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="1027.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="1011.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="995.0" width="4.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="979.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="963.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.37%)</title><rect x="1165.6" y="947.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.24%)</title><rect x="1165.6" y="931.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.24%)</title><rect x="1165.6" y="915.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.24%)</title><rect x="1165.6" y="899.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.24%)</title><rect x="1165.6" y="883.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1165.6" y="867.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1165.6" y="851.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.6" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1165.6" y="835.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1165.6" y="819.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.6" y="830.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1165.6" y="803.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.6" y="814.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1165.6" y="787.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1167.0" y="867.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.0" y="878.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1167.0" y="851.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.0" y="862.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1168.4" y="931.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.4" y="942.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1168.4" y="915.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.4" y="926.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1169.9" y="1075.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.9" y="1086.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1169.9" y="1059.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.9" y="1070.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.12%)</title><rect x="1171.3" y="1187.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1171.3" y="1171.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.3" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1171.3" y="1155.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.3" y="1166.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1171.3" y="1139.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1150.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1171.3" y="1123.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1134.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.12%)</title><rect x="1172.8" y="1187.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.8" y="1198.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1174.2" y="1187.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.2" y="1198.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1174.2" y="1171.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.2" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.12%)</title><rect x="1174.2" y="1155.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.97%)</title><rect x="1175.6" y="1203.0" width="11.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.97%)</title><rect x="1175.6" y="1187.0" width="11.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.97%)</title><rect x="1175.6" y="1171.0" width="11.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.97%)</title><rect x="1175.6" y="1155.0" width="11.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.97%)</title><rect x="1175.6" y="1139.0" width="11.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.97%)</title><rect x="1175.6" y="1123.0" width="11.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.6" y="1134.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1175.6" y="1107.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="1118.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1175.6" y="1091.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="1102.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1175.6" y="1075.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.6" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1175.6" y="1059.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.6" y="1070.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1175.6" y="1043.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1175.6" y="1027.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.6" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1175.6" y="1011.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1175.6" y="995.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.6" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1175.6" y="979.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1178.6" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1175.6" y="963.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.6" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1175.6" y="947.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1175.6" y="931.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.6" y="942.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.12%)</title><rect x="1175.6" y="915.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.6" y="926.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.12%)</title><rect x="1175.6" y="899.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.6" y="910.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.12%)</title><rect x="1175.6" y="883.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.6" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.49%)</title><rect x="1177.1" y="1107.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.49%)</title><rect x="1177.1" y="1091.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.49%)</title><rect x="1177.1" y="1075.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.49%)</title><rect x="1177.1" y="1059.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.49%)</title><rect x="1177.1" y="1043.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.49%)</title><rect x="1177.1" y="1027.0" width="5.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.49%)</title><rect x="1177.1" y="1011.0" width="5.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.49%)</title><rect x="1177.1" y="995.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.49%)</title><rect x="1177.1" y="979.0" width="5.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.49%)</title><rect x="1177.1" y="963.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.49%)</title><rect x="1177.1" y="947.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1177.1" y="931.0" width="4.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1177.1" y="915.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1177.1" y="899.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.12%)</title><rect x="1177.1" y="883.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>SafePointNode::bottom_type() const (1 samples, 0.12%)</title><rect x="1177.1" y="867.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.5" y="883.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.5" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.5" y="867.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.5" y="851.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.5" y="835.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.5" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.5" y="819.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.5" y="803.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.5" y="787.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.5" y="771.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.5" y="755.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.5" y="739.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.12%)</title><rect x="1178.5" y="723.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.5" y="734.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.12%)</title><rect x="1178.5" y="707.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.5" y="718.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.12%)</title><rect x="1178.5" y="691.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.5" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1179.9" y="915.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1179.9" y="899.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1179.9" y="883.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1179.9" y="867.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1179.9" y="851.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1179.9" y="835.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1179.9" y="819.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1179.9" y="803.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1179.9" y="787.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1179.9" y="771.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1179.9" y="755.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1179.9" y="739.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1179.9" y="723.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1179.9" y="707.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1179.9" y="691.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1179.9" y="675.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1179.9" y="659.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1179.9" y="643.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1179.9" y="627.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.12%)</title><rect x="1179.9" y="611.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.12%)</title><rect x="1179.9" y="595.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1179.9" y="579.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1179.9" y="563.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.12%)</title><rect x="1179.9" y="547.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.12%)</title><rect x="1181.4" y="931.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="942.0"></text>
</g>
<g>
<title>Parse::Block::successor_for_bci(int) (1 samples, 0.12%)</title><rect x="1181.4" y="915.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.8" y="1107.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.8" y="1091.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.8" y="1075.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.8" y="1059.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.8" y="1043.0" width="4.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.8" y="1027.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1182.8" y="1011.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.8" y="995.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.8" y="979.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.8" y="963.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.8" y="947.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.8" y="931.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1182.8" y="915.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.8" y="899.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.8" y="883.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.8" y="867.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.8" y="851.0" width="4.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.8" y="835.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1182.8" y="819.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.8" y="803.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.8" y="787.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.8" y="771.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.8" y="755.0" width="4.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.8" y="739.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.37%)</title><rect x="1182.8" y="723.0" width="4.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.37%)</title><rect x="1182.8" y="707.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.37%)</title><rect x="1182.8" y="691.0" width="4.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.37%)</title><rect x="1182.8" y="675.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.37%)</title><rect x="1182.8" y="659.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.37%)</title><rect x="1182.8" y="643.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1182.8" y="627.0" width="2.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1182.8" y="611.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1182.8" y="595.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1182.8" y="579.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1182.8" y="563.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1182.8" y="547.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1182.8" y="531.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1182.8" y="515.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1182.8" y="499.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1182.8" y="483.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1182.8" y="467.0" width="2.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1182.8" y="451.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1182.8" y="435.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1182.8" y="419.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1182.8" y="403.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1182.8" y="387.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1182.8" y="371.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1182.8" y="355.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1182.8" y="339.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1182.8" y="323.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1182.8" y="307.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.12%)</title><rect x="1182.8" y="291.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.12%)</title><rect x="1182.8" y="275.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.12%)</title><rect x="1182.8" y="259.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.12%)</title><rect x="1182.8" y="243.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.3" y="291.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.3" y="275.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.3" y="259.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.3" y="243.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.3" y="227.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1184.3" y="211.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.3" y="195.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.3" y="179.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.3" y="163.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.3" y="147.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.3" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.3" y="131.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1184.3" y="115.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.3" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.3" y="99.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.3" y="83.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.3" y="67.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="78.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.3" y="51.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="62.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.12%)</title><rect x="1184.3" y="35.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1185.7" y="627.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="638.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.12%)</title><rect x="1185.7" y="611.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="622.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.12%)</title><rect x="1185.7" y="595.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="606.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.12%)</title><rect x="1185.7" y="579.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="590.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.12%)</title><rect x="1185.7" y="563.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="574.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.12%)</title><rect x="1185.7" y="547.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="558.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.12%)</title><rect x="1185.7" y="531.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="542.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.12%)</title><rect x="1185.7" y="515.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="526.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.12%)</title><rect x="1185.7" y="499.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="510.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1185.7" y="483.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.12%)</title><rect x="1187.1" y="1267.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="1278.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.12%)</title><rect x="1187.1" y="1251.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.12%)</title><rect x="1187.1" y="1235.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="1246.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.12%)</title><rect x="1187.1" y="1219.0" width="1.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1190.1" y="1230.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.12%)</title><rect x="1187.1" y="1203.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="1214.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.12%)</title><rect x="1188.6" y="1283.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.6" y="1294.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.12%)</title><rect x="1188.6" y="1267.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="1278.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.12%)</title><rect x="1188.6" y="1251.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1191.6" y="1262.0"></text>
</g>
</g>
</svg>
