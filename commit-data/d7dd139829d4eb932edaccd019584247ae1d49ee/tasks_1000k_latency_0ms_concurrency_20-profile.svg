<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="821"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="821"> </text>
<g id="frames">
<g>
<title>all (921 samples, 100.00%)</title><rect x="10.0" y="787.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="798.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (5 samples, 0.54%)</title><rect x="10.0" y="771.0" width="6.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.43%)</title><rect x="10.0" y="755.0" width="5.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.33%)</title><rect x="11.3" y="739.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.3" y="750.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.11%)</title><rect x="11.3" y="723.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.3" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.22%)</title><rect x="12.6" y="723.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.6" y="734.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.11%)</title><rect x="13.8" y="707.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.8" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.11%)</title><rect x="15.1" y="755.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="18.1" y="766.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.11%)</title><rect x="16.4" y="771.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="19.4" y="782.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.11%)</title><rect x="16.4" y="755.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="19.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (251 samples, 27.25%)</title><rect x="17.7" y="771.0" width="321.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="782.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (251 samples, 27.25%)</title><rect x="17.7" y="755.0" width="321.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.7" y="766.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.11%)</title><rect x="17.7" y="739.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.11%)</title><rect x="17.7" y="723.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="20.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.commitReadyOffsets (1 samples, 0.11%)</title><rect x="17.7" y="707.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.7" y="718.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.11%)</title><rect x="17.7" y="691.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$497/570345744.accept (1 samples, 0.11%)</title><rect x="17.7" y="675.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$commitReadyOffsets$0 (1 samples, 0.11%)</title><rect x="17.7" y="659.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.11%)</title><rect x="17.7" y="643.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/OffsetAndMetadata.&lt;init&gt; (1 samples, 0.11%)</title><rect x="17.7" y="627.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.7" y="638.0"></text>
</g>
<g>
<title>java/util/Optional.orElse (1 samples, 0.11%)</title><rect x="17.7" y="611.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (250 samples, 27.14%)</title><rect x="19.0" y="739.0" width="320.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.0" y="750.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.22%)</title><rect x="19.0" y="723.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.22%)</title><rect x="19.0" y="707.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.22%)</title><rect x="19.0" y="691.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.22%)</title><rect x="19.0" y="675.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.22%)</title><rect x="19.0" y="659.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.22%)</title><rect x="19.0" y="643.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.22%)</title><rect x="19.0" y="627.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="19.0" y="611.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.0" y="622.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.11%)</title><rect x="19.0" y="595.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="20.2" y="611.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="23.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="20.2" y="595.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.2" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="20.2" y="579.0" width="1.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="23.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.11%)</title><rect x="21.5" y="723.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.11%)</title><rect x="21.5" y="707.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="21.5" y="691.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="21.5" y="675.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.5" y="686.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="21.5" y="659.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.5" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="21.5" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.11%)</title><rect x="21.5" y="627.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.33%)</title><rect x="22.8" y="723.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.33%)</title><rect x="22.8" y="707.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.33%)</title><rect x="22.8" y="691.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1675787348.accept (3 samples, 0.33%)</title><rect x="22.8" y="675.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.33%)</title><rect x="22.8" y="659.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.33%)</title><rect x="22.8" y="643.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.8" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.33%)</title><rect x="22.8" y="627.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.8" y="638.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (206 samples, 22.37%)</title><rect x="26.7" y="723.0" width="263.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.7" y="734.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/761424759.accept (199 samples, 21.61%)</title><rect x="26.7" y="707.0" width="254.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.7" y="718.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (199 samples, 21.61%)</title><rect x="26.7" y="691.0" width="254.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.7" y="702.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (183 samples, 19.87%)</title><rect x="26.7" y="675.0" width="234.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.7" y="686.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (183 samples, 19.87%)</title><rect x="26.7" y="659.0" width="234.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.7" y="670.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (183 samples, 19.87%)</title><rect x="26.7" y="643.0" width="234.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.7" y="654.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (183 samples, 19.87%)</title><rect x="26.7" y="627.0" width="234.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.7" y="638.0">java/util/concurrent/Executors$..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (183 samples, 19.87%)</title><rect x="26.7" y="611.0" width="234.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.7" y="622.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (183 samples, 19.87%)</title><rect x="26.7" y="595.0" width="234.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="29.7" y="606.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (144 samples, 15.64%)</title><rect x="26.7" y="579.0" width="184.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="29.7" y="590.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 2.06%)</title><rect x="26.7" y="563.0" width="24.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.7" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 2.06%)</title><rect x="26.7" y="547.0" width="24.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="29.7" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 2.06%)</title><rect x="26.7" y="531.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.7" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.22%)</title><rect x="51.0" y="563.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.22%)</title><rect x="51.0" y="547.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.22%)</title><rect x="51.0" y="531.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.22%)</title><rect x="51.0" y="515.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (123 samples, 13.36%)</title><rect x="53.6" y="563.0" width="157.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.6" y="574.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (123 samples, 13.36%)</title><rect x="53.6" y="547.0" width="157.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.6" y="558.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (123 samples, 13.36%)</title><rect x="53.6" y="531.0" width="157.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.6" y="542.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (123 samples, 13.36%)</title><rect x="53.6" y="515.0" width="157.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.6" y="526.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.11%)</title><rect x="57.4" y="499.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.4" y="510.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (119 samples, 12.92%)</title><rect x="58.7" y="499.0" width="152.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.7" y="510.0">jdk/internal/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (51 samples, 5.54%)</title><rect x="60.0" y="483.0" width="65.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="63.0" y="494.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="66.4" y="467.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="69.4" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (3 samples, 0.33%)</title><rect x="67.7" y="467.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="70.7" y="478.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.11%)</title><rect x="71.5" y="467.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="74.5" y="478.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.43%)</title><rect x="72.8" y="467.0" width="5.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="75.8" y="478.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (9 samples, 0.98%)</title><rect x="77.9" y="467.0" width="11.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="80.9" y="478.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.22%)</title><rect x="85.6" y="451.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="88.6" y="462.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="88.2" y="451.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="91.2" y="462.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (4 samples, 0.43%)</title><rect x="89.4" y="467.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="92.4" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.87%)</title><rect x="94.6" y="467.0" width="10.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="97.6" y="478.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (7 samples, 0.76%)</title><rect x="104.8" y="467.0" width="9.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="107.8" y="478.0"></text>
</g>
<g>
<title>pthread_mutex_lock (9 samples, 0.98%)</title><rect x="113.8" y="467.0" width="11.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="116.8" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_signal (66 samples, 7.17%)</title><rect x="125.3" y="483.0" width="84.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="128.3" y="494.0">__pthread_..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="209.9" y="483.0" width="1.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="212.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (29 samples, 3.15%)</title><rect x="211.2" y="579.0" width="37.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.2" y="590.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (29 samples, 3.15%)</title><rect x="211.2" y="563.0" width="37.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.2" y="574.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.54%)</title><rect x="241.9" y="547.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.54%)</title><rect x="241.9" y="531.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 1.09%)</title><rect x="248.3" y="579.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="251.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 1.09%)</title><rect x="248.3" y="563.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 1.09%)</title><rect x="248.3" y="547.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 1.09%)</title><rect x="248.3" y="531.0" width="12.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="251.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.22%)</title><rect x="258.6" y="515.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.6" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (8 samples, 0.87%)</title><rect x="261.1" y="675.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.76%)</title><rect x="262.4" y="659.0" width="9.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="265.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.65%)</title><rect x="263.7" y="643.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.65%)</title><rect x="263.7" y="627.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.22%)</title><rect x="268.8" y="611.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.22%)</title><rect x="268.8" y="595.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.33%)</title><rect x="271.4" y="675.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.33%)</title><rect x="271.4" y="659.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.33%)</title><rect x="271.4" y="643.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (3 samples, 0.33%)</title><rect x="271.4" y="627.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.4" y="638.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (3 samples, 0.33%)</title><rect x="271.4" y="611.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.4" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.33%)</title><rect x="271.4" y="595.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.33%)</title><rect x="271.4" y="579.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.54%)</title><rect x="275.2" y="675.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.54%)</title><rect x="275.2" y="659.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="278.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.22%)</title><rect x="276.5" y="643.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.22%)</title><rect x="279.1" y="643.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.22%)</title><rect x="279.1" y="627.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="282.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.76%)</title><rect x="281.6" y="707.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.76%)</title><rect x="281.6" y="691.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.76%)</title><rect x="281.6" y="675.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.76%)</title><rect x="281.6" y="659.0" width="9.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="284.6" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (6 samples, 0.65%)</title><rect x="282.9" y="643.0" width="7.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 4.13%)</title><rect x="290.6" y="723.0" width="48.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.6" y="734.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 4.13%)</title><rect x="290.6" y="707.0" width="48.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.6" y="718.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (22 samples, 2.39%)</title><rect x="290.6" y="691.0" width="28.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.6" y="702.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (22 samples, 2.39%)</title><rect x="290.6" y="675.0" width="28.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.6" y="686.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.11%)</title><rect x="290.6" y="659.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.11%)</title><rect x="290.6" y="643.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.6" y="654.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.11%)</title><rect x="290.6" y="627.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$473/1718292042.accept (1 samples, 0.11%)</title><rect x="290.6" y="611.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.11%)</title><rect x="290.6" y="595.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.6" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="290.6" y="579.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="290.6" y="563.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.11%)</title><rect x="290.6" y="547.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 2.28%)</title><rect x="291.9" y="659.0" width="26.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.9" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (16 samples, 1.74%)</title><rect x="291.9" y="643.0" width="20.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (16 samples, 1.74%)</title><rect x="291.9" y="627.0" width="20.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 1.09%)</title><rect x="293.1" y="611.0" width="12.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.11%)</title><rect x="295.7" y="595.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.11%)</title><rect x="295.7" y="579.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.11%)</title><rect x="295.7" y="563.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="298.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.11%)</title><rect x="295.7" y="547.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.11%)</title><rect x="295.7" y="531.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.7" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.11%)</title><rect x="295.7" y="515.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.11%)</title><rect x="295.7" y="499.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.7" y="510.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.11%)</title><rect x="295.7" y="483.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.7" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.11%)</title><rect x="295.7" y="467.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.7" y="478.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.11%)</title><rect x="295.7" y="451.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="298.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.76%)</title><rect x="297.0" y="595.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.76%)</title><rect x="297.0" y="579.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="300.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (7 samples, 0.76%)</title><rect x="297.0" y="563.0" width="9.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="300.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (7 samples, 0.76%)</title><rect x="297.0" y="547.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="300.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.54%)</title><rect x="299.6" y="531.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (4 samples, 0.43%)</title><rect x="306.0" y="611.0" width="5.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="309.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.43%)</title><rect x="306.0" y="595.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.43%)</title><rect x="306.0" y="579.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="309.0" y="590.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.43%)</title><rect x="306.0" y="563.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.0" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.22%)</title><rect x="308.5" y="547.0" width="2.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="311.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.11%)</title><rect x="311.1" y="611.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="314.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (3 samples, 0.33%)</title><rect x="312.4" y="643.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.33%)</title><rect x="312.4" y="627.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.11%)</title><rect x="312.4" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="315.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="312.4" y="595.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="312.4" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.4" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="312.4" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.22%)</title><rect x="313.6" y="611.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="313.6" y="595.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="313.6" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.6" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="314.9" y="595.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="317.9" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="314.9" y="579.0" width="1.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="317.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.11%)</title><rect x="316.2" y="643.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.11%)</title><rect x="316.2" y="627.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.2" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="316.2" y="611.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.2" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="316.2" y="595.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="319.2" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="316.2" y="579.0" width="1.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="319.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.11%)</title><rect x="317.5" y="643.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="320.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.65%)</title><rect x="318.8" y="691.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="321.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.65%)</title><rect x="318.8" y="675.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.65%)</title><rect x="318.8" y="659.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.8" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.33%)</title><rect x="318.8" y="643.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="321.8" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.22%)</title><rect x="320.1" y="627.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.22%)</title><rect x="320.1" y="611.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="323.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.22%)</title><rect x="320.1" y="595.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.22%)</title><rect x="320.1" y="579.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.1" y="590.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.11%)</title><rect x="320.1" y="563.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="321.3" y="563.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.11%)</title><rect x="321.3" y="547.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$155/1346799731.get (1 samples, 0.11%)</title><rect x="321.3" y="531.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="322.6" y="643.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="325.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="322.6" y="627.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="322.6" y="611.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="322.6" y="595.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="322.6" y="579.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (2 samples, 0.22%)</title><rect x="323.9" y="643.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (2 samples, 0.22%)</title><rect x="323.9" y="627.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (2 samples, 0.22%)</title><rect x="323.9" y="611.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.9" y="622.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (2 samples, 0.22%)</title><rect x="323.9" y="595.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.11%)</title><rect x="326.5" y="691.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.11%)</title><rect x="326.5" y="675.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="329.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.76%)</title><rect x="327.7" y="691.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.65%)</title><rect x="327.7" y="675.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.65%)</title><rect x="327.7" y="659.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="330.3" y="643.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="333.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="330.3" y="627.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.11%)</title><rect x="330.3" y="611.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.11%)</title><rect x="330.3" y="595.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="330.3" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.11%)</title><rect x="330.3" y="563.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedCount.update (1 samples, 0.11%)</title><rect x="330.3" y="547.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="333.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.22%)</title><rect x="331.6" y="643.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.22%)</title><rect x="331.6" y="627.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.22%)</title><rect x="331.6" y="611.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.22%)</title><rect x="331.6" y="595.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.22%)</title><rect x="331.6" y="579.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.22%)</title><rect x="331.6" y="563.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.22%)</title><rect x="331.6" y="547.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.22%)</title><rect x="331.6" y="531.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.6" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.22%)</title><rect x="331.6" y="515.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.6" y="526.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.22%)</title><rect x="331.6" y="499.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.6" y="510.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.22%)</title><rect x="331.6" y="483.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.6" y="494.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.22%)</title><rect x="331.6" y="467.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="334.6" y="478.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.22%)</title><rect x="331.6" y="451.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.6" y="462.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (2 samples, 0.22%)</title><rect x="331.6" y="435.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.6" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (2 samples, 0.22%)</title><rect x="331.6" y="419.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.6" y="430.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (2 samples, 0.22%)</title><rect x="331.6" y="403.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="334.6" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.22%)</title><rect x="331.6" y="387.0" width="2.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="334.6" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$2.clear (1 samples, 0.11%)</title><rect x="334.1" y="643.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (1 samples, 0.11%)</title><rect x="334.1" y="627.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="337.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.11%)</title><rect x="334.1" y="611.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="337.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.11%)</title><rect x="335.4" y="675.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="338.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="335.4" y="659.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="335.4" y="643.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="335.4" y="627.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="335.4" y="611.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.11%)</title><rect x="335.4" y="595.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="338.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.11%)</title><rect x="335.4" y="579.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.addSize (1 samples, 0.11%)</title><rect x="335.4" y="563.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="338.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.addSize (1 samples, 0.11%)</title><rect x="335.4" y="547.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="338.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchPartition.addSize (1 samples, 0.11%)</title><rect x="335.4" y="531.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="338.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.11%)</title><rect x="336.7" y="691.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="339.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.11%)</title><rect x="336.7" y="675.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="339.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.11%)</title><rect x="336.7" y="659.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="339.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.11%)</title><rect x="336.7" y="643.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.11%)</title><rect x="336.7" y="627.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="339.7" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.11%)</title><rect x="336.7" y="611.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$239/796972884.accept (1 samples, 0.11%)</title><rect x="336.7" y="595.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="339.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.11%)</title><rect x="338.0" y="691.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="338.0" y="675.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="341.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="338.0" y="659.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="341.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="338.0" y="643.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="341.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="338.0" y="627.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="341.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (608 samples, 66.02%)</title><rect x="339.3" y="771.0" width="779.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.3" y="782.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (608 samples, 66.02%)</title><rect x="339.3" y="755.0" width="779.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.3" y="766.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (608 samples, 66.02%)</title><rect x="339.3" y="739.0" width="779.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.3" y="750.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1008837937.run (391 samples, 42.45%)</title><rect x="339.3" y="723.0" width="500.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.3" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (391 samples, 42.45%)</title><rect x="339.3" y="707.0" width="500.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.3" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (390 samples, 42.35%)</title><rect x="340.6" y="691.0" width="499.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="343.6" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (390 samples, 42.35%)</title><rect x="340.6" y="675.0" width="499.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.6" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.11%)</title><rect x="350.8" y="659.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.8" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (40 samples, 4.34%)</title><rect x="352.1" y="659.0" width="51.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="355.1" y="670.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (40 samples, 4.34%)</title><rect x="352.1" y="643.0" width="51.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.1" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (40 samples, 4.34%)</title><rect x="352.1" y="627.0" width="51.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.1" y="638.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (28 samples, 3.04%)</title><rect x="367.5" y="611.0" width="35.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.5" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.54%)</title><rect x="367.5" y="595.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="370.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$496/481219225.accept (1 samples, 0.11%)</title><rect x="371.3" y="579.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.3" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="372.6" y="579.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="375.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 2.39%)</title><rect x="373.9" y="595.0" width="28.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="376.9" y="606.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$496/481219225.accept (22 samples, 2.39%)</title><rect x="373.9" y="579.0" width="28.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="376.9" y="590.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (22 samples, 2.39%)</title><rect x="373.9" y="563.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="376.9" y="574.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (22 samples, 2.39%)</title><rect x="373.9" y="547.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="376.9" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (22 samples, 2.39%)</title><rect x="373.9" y="531.0" width="28.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="376.9" y="542.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (20 samples, 2.17%)</title><rect x="376.4" y="515.0" width="25.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.4" y="526.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.54%)</title><rect x="376.4" y="499.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="379.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/1298611240.accept (1 samples, 0.11%)</title><rect x="381.6" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.6" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.63%)</title><rect x="382.8" y="499.0" width="19.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="385.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.11%)</title><rect x="402.1" y="595.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="405.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (102 samples, 11.07%)</title><rect x="403.3" y="659.0" width="130.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="670.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (102 samples, 11.07%)</title><rect x="403.3" y="643.0" width="130.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="406.3" y="654.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (102 samples, 11.07%)</title><rect x="403.3" y="627.0" width="130.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.3" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (102 samples, 11.07%)</title><rect x="403.3" y="611.0" width="130.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="622.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (102 samples, 11.07%)</title><rect x="403.3" y="595.0" width="130.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="406.3" y="606.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (102 samples, 11.07%)</title><rect x="403.3" y="579.0" width="130.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="406.3" y="590.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 1.30%)</title><rect x="403.3" y="563.0" width="15.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 1.09%)</title><rect x="403.3" y="547.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (10 samples, 1.09%)</title><rect x="403.3" y="531.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="406.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (10 samples, 1.09%)</title><rect x="403.3" y="515.0" width="12.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="406.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (10 samples, 1.09%)</title><rect x="403.3" y="499.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="406.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (10 samples, 1.09%)</title><rect x="403.3" y="483.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.65%)</title><rect x="408.5" y="467.0" width="7.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="411.5" y="478.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.65%)</title><rect x="408.5" y="451.0" width="7.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="411.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.22%)</title><rect x="416.1" y="547.0" width="2.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="419.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.22%)</title><rect x="416.1" y="531.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.1" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.11%)</title><rect x="416.1" y="515.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="419.1" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="417.4" y="515.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="420.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="417.4" y="499.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="420.4" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="417.4" y="483.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="420.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="417.4" y="467.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="420.4" y="478.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="417.4" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="420.4" y="462.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.11%)</title><rect x="417.4" y="435.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="420.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (58 samples, 6.30%)</title><rect x="418.7" y="563.0" width="74.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="421.7" y="574.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.11%)</title><rect x="418.7" y="547.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="421.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.11%)</title><rect x="418.7" y="531.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="421.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.65%)</title><rect x="420.0" y="547.0" width="7.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="423.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.43%)</title><rect x="422.6" y="531.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="425.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.33%)</title><rect x="423.8" y="515.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="426.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.33%)</title><rect x="423.8" y="499.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.33%)</title><rect x="423.8" y="483.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.11%)</title><rect x="426.4" y="467.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="429.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.11%)</title><rect x="427.7" y="547.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.11%)</title><rect x="427.7" y="531.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="430.7" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="427.7" y="515.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="430.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (50 samples, 5.43%)</title><rect x="429.0" y="547.0" width="64.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.0" y="558.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (50 samples, 5.43%)</title><rect x="429.0" y="531.0" width="64.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="432.0" y="542.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.30%)</title><rect x="430.2" y="515.0" width="15.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="433.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.22%)</title><rect x="431.5" y="499.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.22%)</title><rect x="431.5" y="483.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="434.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.22%)</title><rect x="431.5" y="467.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="434.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.87%)</title><rect x="434.1" y="499.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="444.3" y="499.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="447.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="444.3" y="483.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="447.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (37 samples, 4.02%)</title><rect x="445.6" y="515.0" width="47.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="448.6" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (37 samples, 4.02%)</title><rect x="445.6" y="499.0" width="47.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="448.6" y="510.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (37 samples, 4.02%)</title><rect x="445.6" y="483.0" width="47.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.6" y="494.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.76%)</title><rect x="457.1" y="467.0" width="9.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.11%)</title><rect x="459.7" y="451.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="462.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.11%)</title><rect x="459.7" y="435.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.11%)</title><rect x="459.7" y="419.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="462.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.33%)</title><rect x="461.0" y="451.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.33%)</title><rect x="461.0" y="435.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.33%)</title><rect x="461.0" y="419.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="464.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.11%)</title><rect x="463.6" y="403.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="466.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.11%)</title><rect x="464.8" y="451.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.87%)</title><rect x="466.1" y="467.0" width="10.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.54%)</title><rect x="470.0" y="451.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="473.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (3 samples, 0.33%)</title><rect x="470.0" y="435.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="473.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (3 samples, 0.33%)</title><rect x="470.0" y="419.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (3 samples, 0.33%)</title><rect x="470.0" y="403.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (3 samples, 0.33%)</title><rect x="470.0" y="387.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="473.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (3 samples, 0.33%)</title><rect x="470.0" y="371.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.33%)</title><rect x="470.0" y="355.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.22%)</title><rect x="473.8" y="435.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.22%)</title><rect x="473.8" y="419.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (1 samples, 0.11%)</title><rect x="473.8" y="403.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="476.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (1 samples, 0.11%)</title><rect x="473.8" y="387.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (1 samples, 0.11%)</title><rect x="473.8" y="371.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (1 samples, 0.11%)</title><rect x="473.8" y="355.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.11%)</title><rect x="473.8" y="339.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="476.8" y="350.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.11%)</title><rect x="475.1" y="403.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.65%)</title><rect x="476.4" y="467.0" width="7.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.65%)</title><rect x="476.4" y="451.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="479.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.65%)</title><rect x="476.4" y="435.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.65%)</title><rect x="476.4" y="419.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.4" y="430.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.65%)</title><rect x="476.4" y="403.0" width="7.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.4" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (6 samples, 0.65%)</title><rect x="476.4" y="387.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="479.4" y="398.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor6.newInstance (2 samples, 0.22%)</title><rect x="481.5" y="371.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.76%)</title><rect x="484.0" y="467.0" width="9.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="487.0" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.76%)</title><rect x="484.0" y="451.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="487.0" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.33%)</title><rect x="484.0" y="435.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="487.0" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.43%)</title><rect x="487.9" y="435.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.9" y="446.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.43%)</title><rect x="487.9" y="419.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="490.9" y="430.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.43%)</title><rect x="487.9" y="403.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="490.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="491.7" y="387.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (32 samples, 3.47%)</title><rect x="493.0" y="563.0" width="41.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="496.0" y="574.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (32 samples, 3.47%)</title><rect x="493.0" y="547.0" width="41.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.0" y="558.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (32 samples, 3.47%)</title><rect x="493.0" y="531.0" width="41.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.0" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (32 samples, 3.47%)</title><rect x="493.0" y="515.0" width="41.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.0" y="526.0">com..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (32 samples, 3.47%)</title><rect x="493.0" y="499.0" width="41.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="496.0" y="510.0">jav..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="527.6" y="483.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="530.6" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.43%)</title><rect x="528.9" y="483.0" width="5.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="531.9" y="494.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.22%)</title><rect x="531.5" y="467.0" width="2.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="534.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (234 samples, 25.41%)</title><rect x="534.0" y="659.0" width="299.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="537.0" y="670.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="534.0" y="643.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="537.0" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="534.0" y="627.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="537.0" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="534.0" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="537.0" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="534.0" y="595.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="537.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="534.0" y="579.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="537.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.11%)</title><rect x="534.0" y="563.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="537.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (34 samples, 3.69%)</title><rect x="535.3" y="643.0" width="43.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="538.3" y="654.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (33 samples, 3.58%)</title><rect x="536.6" y="627.0" width="42.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.6" y="638.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (33 samples, 3.58%)</title><rect x="536.6" y="611.0" width="42.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.6" y="622.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 1.09%)</title><rect x="540.4" y="595.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.22%)</title><rect x="540.4" y="579.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="543.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="541.7" y="563.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="544.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.87%)</title><rect x="543.0" y="579.0" width="10.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.87%)</title><rect x="543.0" y="563.0" width="10.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="546.0" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.43%)</title><rect x="553.2" y="595.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="556.2" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.22%)</title><rect x="554.5" y="579.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="557.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.11%)</title><rect x="557.1" y="579.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="560.1" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 1.74%)</title><rect x="558.4" y="595.0" width="20.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="561.4" y="606.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.33%)</title><rect x="560.9" y="579.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="563.9" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 1.19%)</title><rect x="564.8" y="579.0" width="14.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="567.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="564.8" y="563.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.8" y="574.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="564.8" y="547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.8" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="564.8" y="531.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="567.8" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 1.09%)</title><rect x="566.0" y="563.0" width="12.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="569.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.54%)</title><rect x="578.9" y="643.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.9" y="654.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.54%)</title><rect x="578.9" y="627.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.9" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="584.0" y="611.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="587.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (125 samples, 13.57%)</title><rect x="585.3" y="643.0" width="160.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.3" y="654.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="585.3" y="627.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="588.3" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="585.3" y="611.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="588.3" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="585.3" y="595.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="588.3" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="585.3" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.3" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="585.3" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="588.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="585.3" y="547.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="588.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (103 samples, 11.18%)</title><rect x="586.5" y="627.0" width="132.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="589.5" y="638.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (30 samples, 3.26%)</title><rect x="595.5" y="611.0" width="38.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="598.5" y="622.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 0.87%)</title><rect x="614.7" y="595.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="617.7" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.76%)</title><rect x="616.0" y="579.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="619.0" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.76%)</title><rect x="616.0" y="563.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.0" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.76%)</title><rect x="616.0" y="547.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="619.0" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.22%)</title><rect x="621.1" y="531.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="624.1" y="542.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.11%)</title><rect x="623.7" y="531.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="626.7" y="542.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.76%)</title><rect x="625.0" y="595.0" width="9.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="628.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.11%)</title><rect x="634.0" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.0" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.11%)</title><rect x="634.0" y="595.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.0" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="634.0" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="637.0" y="590.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.11%)</title><rect x="634.0" y="563.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="637.0" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.43%)</title><rect x="635.2" y="611.0" width="5.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="638.2" y="622.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (61 samples, 6.62%)</title><rect x="640.4" y="611.0" width="78.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="643.4" y="622.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (57 samples, 6.19%)</title><rect x="645.5" y="595.0" width="73.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.5" y="606.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (32 samples, 3.47%)</title><rect x="645.5" y="579.0" width="41.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="648.5" y="590.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (19 samples, 2.06%)</title><rect x="662.1" y="563.0" width="24.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.1" y="574.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 2.06%)</title><rect x="662.1" y="547.0" width="24.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="665.1" y="558.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="686.5" y="579.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="686.5" y="563.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="689.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="686.5" y="547.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="689.5" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (24 samples, 2.61%)</title><rect x="687.8" y="579.0" width="30.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.8" y="590.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 2.61%)</title><rect x="687.8" y="563.0" width="30.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="690.8" y="574.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.22%)</title><rect x="689.0" y="547.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="692.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.22%)</title><rect x="689.0" y="531.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="692.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.22%)</title><rect x="689.0" y="515.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="692.0" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="690.3" y="499.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="693.3" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (21 samples, 2.28%)</title><rect x="691.6" y="547.0" width="26.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="694.6" y="558.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.22%)</title><rect x="705.7" y="531.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="708.7" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (7 samples, 0.76%)</title><rect x="708.3" y="531.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="711.3" y="542.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.11%)</title><rect x="717.2" y="531.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="720.2" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (21 samples, 2.28%)</title><rect x="718.5" y="627.0" width="26.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="721.5" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (21 samples, 2.28%)</title><rect x="718.5" y="611.0" width="26.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="721.5" y="622.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (21 samples, 2.28%)</title><rect x="718.5" y="595.0" width="26.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="721.5" y="606.0">j..</text>
</g>
<g>
<title>java/util/HashMap.get (14 samples, 1.52%)</title><rect x="718.5" y="579.0" width="17.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="721.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.98%)</title><rect x="718.5" y="563.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.5" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.76%)</title><rect x="721.1" y="547.0" width="8.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="724.1" y="558.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.76%)</title><rect x="721.1" y="531.0" width="8.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="724.1" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.54%)</title><rect x="730.0" y="563.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="733.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="735.2" y="547.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="738.2" y="558.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (7 samples, 0.76%)</title><rect x="736.4" y="579.0" width="9.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="739.4" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.76%)</title><rect x="736.4" y="563.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="739.4" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.65%)</title><rect x="737.7" y="547.0" width="7.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="740.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 4.78%)</title><rect x="745.4" y="643.0" width="56.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.4" y="654.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 4.78%)</title><rect x="745.4" y="627.0" width="56.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.4" y="638.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1909581372.process (2 samples, 0.22%)</title><rect x="745.4" y="611.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (2 samples, 0.22%)</title><rect x="745.4" y="595.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="748.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.11%)</title><rect x="745.4" y="579.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="748.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.11%)</title><rect x="746.7" y="579.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="749.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="746.7" y="563.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="746.7" y="547.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="749.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (8 samples, 0.87%)</title><rect x="748.0" y="611.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="751.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 0.43%)</title><rect x="758.2" y="611.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="761.2" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (4 samples, 0.43%)</title><rect x="758.2" y="595.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="761.2" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.33%)</title><rect x="763.4" y="611.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.4" y="622.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.33%)</title><rect x="763.4" y="595.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.4" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 1.19%)</title><rect x="767.2" y="611.0" width="14.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="770.2" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 1.19%)</title><rect x="767.2" y="595.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="770.2" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.33%)</title><rect x="781.3" y="611.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="784.3" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.22%)</title><rect x="782.6" y="595.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="785.1" y="611.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="788.1" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="785.1" y="595.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.87%)</title><rect x="786.4" y="611.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="789.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.87%)</title><rect x="786.4" y="595.0" width="10.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="789.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.87%)</title><rect x="786.4" y="579.0" width="10.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="789.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (6 samples, 0.65%)</title><rect x="786.4" y="563.0" width="7.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$485/933251921.accept (4 samples, 0.43%)</title><rect x="786.4" y="547.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.4" y="558.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.22%)</title><rect x="791.5" y="547.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="794.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.22%)</title><rect x="794.1" y="563.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$485/933251921.accept (1 samples, 0.11%)</title><rect x="795.4" y="547.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="798.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.11%)</title><rect x="795.4" y="531.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="798.4" y="542.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.43%)</title><rect x="796.7" y="611.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="799.7" y="622.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="796.7" y="595.0" width="5.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="799.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.71%)</title><rect x="801.8" y="643.0" width="32.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.8" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (25 samples, 2.71%)</title><rect x="801.8" y="627.0" width="32.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="804.8" y="638.0">ja..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.54%)</title><rect x="810.8" y="611.0" width="6.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="813.8" y="622.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="812.0" y="595.0" width="5.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="815.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (1 samples, 0.11%)</title><rect x="817.2" y="611.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.30%)</title><rect x="818.4" y="611.0" width="15.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="821.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.43%)</title><rect x="818.4" y="595.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="821.4" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$494/754994146.accept (3 samples, 0.33%)</title><rect x="818.4" y="579.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="821.4" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="822.3" y="579.0" width="1.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="825.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.87%)</title><rect x="823.6" y="595.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="826.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$494/754994146.accept (8 samples, 0.87%)</title><rect x="823.6" y="579.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="826.6" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.33%)</title><rect x="830.0" y="563.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="833.0" y="574.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.22%)</title><rect x="831.3" y="547.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="834.3" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.54%)</title><rect x="833.8" y="659.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="836.8" y="670.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.43%)</title><rect x="835.1" y="643.0" width="5.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="838.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 23.56%)</title><rect x="840.2" y="723.0" width="278.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.2" y="734.0">java/util/concurrent/ThreadPoolExecut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 23.56%)</title><rect x="840.2" y="707.0" width="278.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.2" y="718.0">java/util/concurrent/LinkedBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (194 samples, 21.06%)</title><rect x="842.8" y="691.0" width="248.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.8" y="702.0">java/util/concurrent/locks/Abstra..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.11%)</title><rect x="854.3" y="675.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="857.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.11%)</title><rect x="854.3" y="659.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="857.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.98%)</title><rect x="855.6" y="675.0" width="11.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (9 samples, 0.98%)</title><rect x="855.6" y="659.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.hasQueuedPredecessors (9 samples, 0.98%)</title><rect x="855.6" y="643.0" width="11.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.43%)</title><rect x="867.1" y="675.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.43%)</title><rect x="867.1" y="659.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (2 samples, 0.22%)</title><rect x="872.3" y="675.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="875.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (2 samples, 0.22%)</title><rect x="872.3" y="659.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="875.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 18.24%)</title><rect x="874.8" y="675.0" width="215.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="877.8" y="686.0">java/util/concurrent/locks/L..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (166 samples, 18.02%)</title><rect x="877.4" y="659.0" width="212.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="880.4" y="670.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.11%)</title><rect x="881.2" y="643.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.2" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.11%)</title><rect x="882.5" y="643.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="885.5" y="654.0"></text>
</g>
<g>
<title>Unsafe_Park (153 samples, 16.61%)</title><rect x="883.8" y="643.0" width="196.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="886.8" y="654.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.33%)</title><rect x="886.4" y="627.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="889.4" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.11%)</title><rect x="890.2" y="627.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="893.2" y="638.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="891.5" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="894.5" y="638.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.74%)</title><rect x="892.8" y="627.0" width="20.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="895.8" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.22%)</title><rect x="896.6" y="611.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="899.6" y="622.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="897.9" y="595.0" width="1.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="900.9" y="606.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.22%)</title><rect x="899.2" y="611.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="902.2" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.43%)</title><rect x="901.7" y="611.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="904.7" y="622.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.22%)</title><rect x="906.9" y="611.0" width="2.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="909.9" y="622.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.22%)</title><rect x="909.4" y="611.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="912.4" y="622.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="912.0" y="611.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="915.0" y="622.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (3 samples, 0.33%)</title><rect x="913.3" y="627.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="916.3" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.11%)</title><rect x="917.1" y="627.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.1" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 4.13%)</title><rect x="918.4" y="627.0" width="48.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="921.4" y="638.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (66 samples, 7.17%)</title><rect x="967.1" y="627.0" width="84.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="970.1" y="638.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (13 samples, 1.41%)</title><rect x="1051.6" y="627.0" width="16.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1054.6" y="638.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.22%)</title><rect x="1068.3" y="627.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1071.3" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.43%)</title><rect x="1070.8" y="627.0" width="5.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1073.8" y="638.0"></text>
</g>
<g>
<title>_init (1 samples, 0.11%)</title><rect x="1076.0" y="627.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1079.0" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.22%)</title><rect x="1077.3" y="627.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.3" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.76%)</title><rect x="1079.8" y="643.0" width="9.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1082.8" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1088.8" y="643.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1091.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.11%)</title><rect x="1090.1" y="675.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1093.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.11%)</title><rect x="1091.3" y="691.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1094.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.11%)</title><rect x="1091.3" y="675.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1094.3" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.11%)</title><rect x="1091.3" y="659.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1094.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 2.06%)</title><rect x="1092.6" y="691.0" width="24.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1095.6" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 2.06%)</title><rect x="1092.6" y="675.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1095.6" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 2.06%)</title><rect x="1092.6" y="659.0" width="24.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1095.6" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 2.06%)</title><rect x="1092.6" y="643.0" width="24.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1095.6" y="654.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.11%)</title><rect x="1117.0" y="691.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1120.0" y="702.0"></text>
</g>
<g>
<title>start_thread (56 samples, 6.08%)</title><rect x="1118.3" y="771.0" width="71.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1121.3" y="782.0">start_th..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (56 samples, 6.08%)</title><rect x="1118.3" y="755.0" width="71.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1121.3" y="766.0">thread_n..</text>
</g>
<g>
<title>Thread::call_run() (56 samples, 6.08%)</title><rect x="1118.3" y="739.0" width="71.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.3" y="750.0">Thread::..</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.22%)</title><rect x="1118.3" y="723.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.3" y="734.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.22%)</title><rect x="1118.3" y="707.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.3" y="718.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.22%)</title><rect x="1118.3" y="691.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.3" y="702.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.11%)</title><rect x="1119.5" y="675.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1122.5" y="686.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (53 samples, 5.75%)</title><rect x="1120.8" y="723.0" width="67.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1123.8" y="734.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (53 samples, 5.75%)</title><rect x="1120.8" y="707.0" width="67.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.8" y="718.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (53 samples, 5.75%)</title><rect x="1120.8" y="691.0" width="67.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.8" y="702.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (52 samples, 5.65%)</title><rect x="1120.8" y="675.0" width="66.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.8" y="686.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (52 samples, 5.65%)</title><rect x="1120.8" y="659.0" width="66.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.8" y="670.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (31 samples, 3.37%)</title><rect x="1120.8" y="643.0" width="39.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.8" y="654.0">Com..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.11%)</title><rect x="1120.8" y="627.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.8" y="638.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.11%)</title><rect x="1120.8" y="611.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1123.8" y="622.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.11%)</title><rect x="1120.8" y="595.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1123.8" y="606.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.11%)</title><rect x="1120.8" y="579.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.8" y="590.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.11%)</title><rect x="1120.8" y="563.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1123.8" y="574.0"></text>
</g>
<g>
<title>Assembler::movl(RegisterImpl*, RegisterImpl*) (1 samples, 0.11%)</title><rect x="1120.8" y="547.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.8" y="558.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="1122.1" y="627.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.1" y="638.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.11%)</title><rect x="1122.1" y="611.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.1" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.11%)</title><rect x="1122.1" y="595.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.1" y="606.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.11%)</title><rect x="1122.1" y="579.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.1" y="590.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.33%)</title><rect x="1123.4" y="627.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.4" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.33%)</title><rect x="1123.4" y="611.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.4" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.33%)</title><rect x="1123.4" y="595.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.4" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="1123.4" y="579.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="1123.4" y="563.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.4" y="574.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1123.4" y="547.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="558.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.22%)</title><rect x="1124.7" y="579.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.7" y="590.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.11%)</title><rect x="1124.7" y="563.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.7" y="574.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.11%)</title><rect x="1125.9" y="563.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.9" y="574.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.11%)</title><rect x="1125.9" y="547.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.9" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.43%)</title><rect x="1127.2" y="627.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.2" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.43%)</title><rect x="1127.2" y="611.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.2" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1127.2" y="595.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.2" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.11%)</title><rect x="1128.5" y="595.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1128.5" y="579.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.5" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.11%)</title><rect x="1129.8" y="595.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.8" y="606.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.11%)</title><rect x="1129.8" y="579.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.8" y="590.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.11%)</title><rect x="1131.1" y="595.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.1" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.11%)</title><rect x="1132.3" y="627.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.3" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (21 samples, 2.28%)</title><rect x="1133.6" y="627.0" width="26.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1136.6" y="638.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.22%)</title><rect x="1133.6" y="611.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.6" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.11%)</title><rect x="1134.9" y="595.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.33%)</title><rect x="1136.2" y="611.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.2" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.22%)</title><rect x="1136.2" y="595.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.2" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.11%)</title><rect x="1138.8" y="595.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.8" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1138.8" y="579.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.8" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.22%)</title><rect x="1140.0" y="611.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.54%)</title><rect x="1142.6" y="611.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.6" y="622.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.11%)</title><rect x="1142.6" y="595.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1143.9" y="595.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.9" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.33%)</title><rect x="1145.2" y="595.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.2" y="606.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.22%)</title><rect x="1146.4" y="579.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.11%)</title><rect x="1149.0" y="611.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.0" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.11%)</title><rect x="1150.3" y="611.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.11%)</title><rect x="1150.3" y="595.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.22%)</title><rect x="1151.6" y="611.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.6" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.11%)</title><rect x="1152.8" y="595.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.8" y="606.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.22%)</title><rect x="1154.1" y="611.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.1" y="622.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.22%)</title><rect x="1154.1" y="595.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.1" y="606.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.11%)</title><rect x="1154.1" y="579.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.1" y="590.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.11%)</title><rect x="1155.4" y="579.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.4" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.33%)</title><rect x="1156.7" y="611.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.7" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1159.3" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.3" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.11%)</title><rect x="1159.3" y="579.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1162.3" y="590.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 1.63%)</title><rect x="1160.5" y="643.0" width="19.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.5" y="654.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.11%)</title><rect x="1160.5" y="627.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.5" y="638.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1160.5" y="611.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.5" y="622.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.263] (1 samples, 0.11%)</title><rect x="1160.5" y="595.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.5" y="606.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.11%)</title><rect x="1160.5" y="579.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.5" y="590.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (4 samples, 0.43%)</title><rect x="1161.8" y="627.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.43%)</title><rect x="1161.8" y="611.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.22%)</title><rect x="1161.8" y="595.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.8" y="606.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.11%)</title><rect x="1161.8" y="579.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.8" y="590.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.11%)</title><rect x="1163.1" y="579.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.1" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1164.4" y="595.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.11%)</title><rect x="1164.4" y="579.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.11%)</title><rect x="1165.7" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="606.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.11%)</title><rect x="1166.9" y="627.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.22%)</title><rect x="1168.2" y="627.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1168.2" y="611.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.2" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.11%)</title><rect x="1169.5" y="611.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.5" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.65%)</title><rect x="1170.8" y="627.0" width="7.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.65%)</title><rect x="1170.8" y="611.0" width="7.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="622.0"></text>
</g>
<g>
<title>CallNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1170.8" y="595.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="606.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.33%)</title><rect x="1172.1" y="595.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.1" y="606.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (2 samples, 0.22%)</title><rect x="1172.1" y="579.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.1" y="590.0"></text>
</g>
<g>
<title>PhiNode::wait_for_region_igvn(PhaseGVN*) (1 samples, 0.11%)</title><rect x="1174.6" y="579.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="590.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1175.9" y="595.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.9" y="606.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.11%)</title><rect x="1177.2" y="595.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.2" y="606.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.11%)</title><rect x="1178.5" y="627.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.5" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1178.5" y="611.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1178.5" y="595.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1178.5" y="579.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1178.5" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.11%)</title><rect x="1178.5" y="547.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.65%)</title><rect x="1179.8" y="643.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.65%)</title><rect x="1179.8" y="627.0" width="7.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.65%)</title><rect x="1179.8" y="611.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.65%)</title><rect x="1179.8" y="595.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.65%)</title><rect x="1179.8" y="579.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.65%)</title><rect x="1179.8" y="563.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1179.8" y="547.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1179.8" y="531.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1179.8" y="515.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1179.8" y="499.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1179.8" y="483.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1179.8" y="467.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1179.8" y="451.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1179.8" y="435.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1179.8" y="419.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1179.8" y="403.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1179.8" y="387.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1179.8" y="371.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1179.8" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.54%)</title><rect x="1181.0" y="547.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.54%)</title><rect x="1181.0" y="531.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.54%)</title><rect x="1181.0" y="515.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.54%)</title><rect x="1181.0" y="499.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.54%)</title><rect x="1181.0" y="483.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.54%)</title><rect x="1181.0" y="467.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1181.0" y="451.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1181.0" y="435.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1181.0" y="419.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1181.0" y="403.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1181.0" y="387.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1181.0" y="371.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1181.0" y="355.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1181.0" y="339.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1181.0" y="323.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.0" y="334.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.11%)</title><rect x="1181.0" y="307.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.0" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.11%)</title><rect x="1181.0" y="291.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.11%)</title><rect x="1181.0" y="275.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.0" y="286.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_and_type_ref_index_at(int, bool) (1 samples, 0.11%)</title><rect x="1181.0" y="259.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.0" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.33%)</title><rect x="1182.3" y="451.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.3" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.33%)</title><rect x="1182.3" y="435.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.33%)</title><rect x="1182.3" y="419.0" width="3.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.33%)</title><rect x="1182.3" y="403.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.3" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.33%)</title><rect x="1182.3" y="387.0" width="3.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.33%)</title><rect x="1182.3" y="371.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1182.3" y="355.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1182.3" y="339.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.3" y="350.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1182.3" y="323.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.11%)</title><rect x="1182.3" y="307.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1183.6" y="355.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1183.6" y="339.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1183.6" y="323.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1183.6" y="307.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1183.6" y="291.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.22%)</title><rect x="1183.6" y="275.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1183.6" y="259.0" width="2.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1183.6" y="243.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="254.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.11%)</title><rect x="1183.6" y="227.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="238.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.11%)</title><rect x="1183.6" y="211.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="222.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.11%)</title><rect x="1183.6" y="195.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="206.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.11%)</title><rect x="1183.6" y="179.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.11%)</title><rect x="1183.6" y="163.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="174.0"></text>
</g>
<g>
<title>JVMState::clone_deep(Compile*) const (1 samples, 0.11%)</title><rect x="1183.6" y="147.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.11%)</title><rect x="1183.6" y="131.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.9" y="227.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.9" y="211.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.9" y="195.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.9" y="179.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.9" y="163.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.9" y="147.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.9" y="131.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.9" y="115.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.9" y="99.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.9" y="110.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.11%)</title><rect x="1184.9" y="83.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.9" y="94.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.11%)</title><rect x="1184.9" y="67.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="78.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.11%)</title><rect x="1184.9" y="51.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.11%)</title><rect x="1184.9" y="35.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="435.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.2" y="419.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.2" y="403.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.2" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.2" y="371.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1186.2" y="355.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.2" y="339.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.2" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.2" y="323.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.2" y="307.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.2" y="291.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.2" y="275.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1186.2" y="259.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1186.2" y="243.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="254.0"></text>
</g>
<g>
<title>MultiNode::hash() const (1 samples, 0.11%)</title><rect x="1186.2" y="227.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.2" y="238.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.11%)</title><rect x="1187.4" y="675.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.11%)</title><rect x="1187.4" y="659.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.11%)</title><rect x="1187.4" y="643.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.11%)</title><rect x="1187.4" y="627.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.4" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.11%)</title><rect x="1187.4" y="611.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="622.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.11%)</title><rect x="1187.4" y="595.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.4" y="606.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.11%)</title><rect x="1187.4" y="579.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.4" y="590.0"></text>
</g>
<g>
<title>LinearScan::create_interval(int) (1 samples, 0.11%)</title><rect x="1187.4" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.4" y="574.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="1187.4" y="547.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.4" y="558.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="1187.4" y="531.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.4" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.11%)</title><rect x="1187.4" y="515.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.4" y="526.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.7" y="723.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.7" y="734.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.7" y="707.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.7" y="718.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.11%)</title><rect x="1188.7" y="691.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.7" y="702.0"></text>
</g>
</g>
</svg>
