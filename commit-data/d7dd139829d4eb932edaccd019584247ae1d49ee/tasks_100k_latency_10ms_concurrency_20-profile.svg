<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (224 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.45%)</title><rect x="10.0" y="787.0" width="5.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>[unknown_Java] (4 samples, 1.79%)</title><rect x="15.3" y="787.0" width="21.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.3" y="798.0">[..</text>
</g>
<g>
<title>Interpreter (1 samples, 0.45%)</title><rect x="15.3" y="771.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="18.3" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.45%)</title><rect x="20.5" y="771.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="23.5" y="782.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.45%)</title><rect x="20.5" y="755.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="23.5" y="766.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.45%)</title><rect x="25.8" y="771.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="28.8" y="782.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_enter_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.45%)</title><rect x="25.8" y="755.0" width="5.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="28.8" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (1 samples, 0.45%)</title><rect x="25.8" y="739.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="28.8" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.45%)</title><rect x="31.1" y="771.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="34.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 6.25%)</title><rect x="36.3" y="787.0" width="73.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.3" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 6.25%)</title><rect x="36.3" y="771.0" width="73.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.3" y="782.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.45%)</title><rect x="41.6" y="755.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.45%)</title><rect x="41.6" y="739.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.45%)</title><rect x="41.6" y="723.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="44.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.45%)</title><rect x="41.6" y="707.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="44.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.45%)</title><rect x="41.6" y="691.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.45%)</title><rect x="41.6" y="675.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="44.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.45%)</title><rect x="41.6" y="659.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.45%)</title><rect x="41.6" y="643.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.45%)</title><rect x="41.6" y="627.0" width="5.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="44.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.45%)</title><rect x="41.6" y="611.0" width="5.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="44.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.45%)</title><rect x="41.6" y="595.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.45%)</title><rect x="41.6" y="579.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="44.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.45%)</title><rect x="41.6" y="563.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="44.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.addSize (1 samples, 0.45%)</title><rect x="41.6" y="547.0" width="5.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.6" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (12 samples, 5.36%)</title><rect x="46.9" y="755.0" width="63.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="49.9" y="766.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.45%)</title><rect x="52.1" y="739.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.45%)</title><rect x="52.1" y="723.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.45%)</title><rect x="52.1" y="707.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.45%)</title><rect x="52.1" y="691.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.45%)</title><rect x="52.1" y="675.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="55.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.45%)</title><rect x="52.1" y="659.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.1" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.45%)</title><rect x="52.1" y="643.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.45%)</title><rect x="52.1" y="627.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="55.1" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.45%)</title><rect x="52.1" y="611.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$245/550875491.test (1 samples, 0.45%)</title><rect x="52.1" y="595.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.23%)</title><rect x="57.4" y="739.0" width="26.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.4" y="750.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1079135283.accept (5 samples, 2.23%)</title><rect x="57.4" y="723.0" width="26.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.4" y="734.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 2.23%)</title><rect x="57.4" y="707.0" width="26.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.4" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 0.89%)</title><rect x="57.4" y="691.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.89%)</title><rect x="57.4" y="675.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="60.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.89%)</title><rect x="57.4" y="659.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="60.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.89%)</title><rect x="57.4" y="643.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="60.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.89%)</title><rect x="57.4" y="627.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.89%)</title><rect x="67.9" y="691.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.89%)</title><rect x="67.9" y="675.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.89%)</title><rect x="67.9" y="659.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.89%)</title><rect x="67.9" y="643.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.45%)</title><rect x="78.5" y="691.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="81.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.45%)</title><rect x="78.5" y="675.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="81.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.45%)</title><rect x="78.5" y="659.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="81.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.45%)</title><rect x="78.5" y="643.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.23%)</title><rect x="83.8" y="739.0" width="26.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.8" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 2.23%)</title><rect x="83.8" y="723.0" width="26.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.8" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (4 samples, 1.79%)</title><rect x="83.8" y="707.0" width="21.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.8" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.34%)</title><rect x="83.8" y="691.0" width="15.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.34%)</title><rect x="83.8" y="675.0" width="15.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.89%)</title><rect x="83.8" y="659.0" width="10.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.45%)</title><rect x="83.8" y="643.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.45%)</title><rect x="83.8" y="627.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.45%)</title><rect x="83.8" y="611.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="86.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.45%)</title><rect x="83.8" y="595.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.parse (1 samples, 0.45%)</title><rect x="83.8" y="579.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (1 samples, 0.45%)</title><rect x="83.8" y="563.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="86.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.read (1 samples, 0.45%)</title><rect x="83.8" y="547.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="86.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (1 samples, 0.45%)</title><rect x="83.8" y="531.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.read (1 samples, 0.45%)</title><rect x="83.8" y="515.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="86.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Readable.readString (1 samples, 0.45%)</title><rect x="83.8" y="499.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="510.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.45%)</title><rect x="83.8" y="483.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.8" y="494.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.45%)</title><rect x="83.8" y="467.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="478.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.45%)</title><rect x="83.8" y="451.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="86.8" y="462.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decodeUTF8 (1 samples, 0.45%)</title><rect x="83.8" y="435.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.8" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.resultCached (1 samples, 0.45%)</title><rect x="83.8" y="419.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.45%)</title><rect x="89.0" y="643.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.45%)</title><rect x="89.0" y="627.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.0" y="638.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.45%)</title><rect x="89.0" y="611.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.45%)</title><rect x="89.0" y="595.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.45%)</title><rect x="89.0" y="579.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.clean (1 samples, 0.45%)</title><rect x="94.3" y="659.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.45%)</title><rect x="99.6" y="691.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.45%)</title><rect x="99.6" y="675.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.45%)</title><rect x="99.6" y="659.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.45%)</title><rect x="99.6" y="643.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.45%)</title><rect x="99.6" y="627.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.45%)</title><rect x="99.6" y="611.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.6" y="622.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.45%)</title><rect x="99.6" y="595.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.6" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.45%)</title><rect x="99.6" y="579.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.45%)</title><rect x="104.8" y="707.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.45%)</title><rect x="104.8" y="691.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.45%)</title><rect x="104.8" y="675.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.45%)</title><rect x="104.8" y="659.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.hasNext (1 samples, 0.45%)</title><rect x="104.8" y="643.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (163 samples, 72.77%)</title><rect x="110.1" y="787.0" width="858.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="113.1" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (163 samples, 72.77%)</title><rect x="110.1" y="771.0" width="858.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.1" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (163 samples, 72.77%)</title><rect x="110.1" y="755.0" width="858.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="113.1" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/571646049.run (153 samples, 68.30%)</title><rect x="115.4" y="739.0" width="805.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="118.4" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/571646049.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (153 samples, 68.30%)</title><rect x="115.4" y="723.0" width="805.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.4" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (153 samples, 68.30%)</title><rect x="115.4" y="707.0" width="805.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.4" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (153 samples, 68.30%)</title><rect x="115.4" y="691.0" width="805.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.4" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/645873265.process (1 samples, 0.45%)</title><rect x="115.4" y="675.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="118.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (1 samples, 0.45%)</title><rect x="115.4" y="659.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="118.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.45%)</title><rect x="115.4" y="643.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="118.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="115.4" y="627.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.45%)</title><rect x="115.4" y="611.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (12 samples, 5.36%)</title><rect x="120.6" y="675.0" width="63.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="123.6" y="686.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 5.36%)</title><rect x="120.6" y="659.0" width="63.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="123.6" y="670.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 5.36%)</title><rect x="120.6" y="643.0" width="63.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="123.6" y="654.0">java/ut..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (2 samples, 0.89%)</title><rect x="147.0" y="627.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="150.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.23%)</title><rect x="157.5" y="627.0" width="26.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.45%)</title><rect x="157.5" y="611.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="160.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$481/2132888850.accept (1 samples, 0.45%)</title><rect x="157.5" y="595.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.79%)</title><rect x="162.8" y="611.0" width="21.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.8" y="622.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$481/2132888850.accept (4 samples, 1.79%)</title><rect x="162.8" y="595.0" width="21.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.8" y="606.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (4 samples, 1.79%)</title><rect x="162.8" y="579.0" width="21.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.8" y="590.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.79%)</title><rect x="162.8" y="563.0" width="21.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.8" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.79%)</title><rect x="162.8" y="547.0" width="21.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.8" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.79%)</title><rect x="162.8" y="531.0" width="21.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.8" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.79%)</title><rect x="162.8" y="515.0" width="21.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.8" y="526.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.45%)</title><rect x="183.8" y="675.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.45%)</title><rect x="183.8" y="659.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.45%)</title><rect x="183.8" y="643.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.45%)</title><rect x="183.8" y="627.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="186.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.45%)</title><rect x="183.8" y="611.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (28 samples, 12.50%)</title><rect x="189.1" y="675.0" width="147.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.1" y="686.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (28 samples, 12.50%)</title><rect x="189.1" y="659.0" width="147.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.1" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (28 samples, 12.50%)</title><rect x="189.1" y="643.0" width="147.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.1" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 12.50%)</title><rect x="189.1" y="627.0" width="147.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.1" y="638.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (28 samples, 12.50%)</title><rect x="189.1" y="611.0" width="147.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.1" y="622.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (28 samples, 12.50%)</title><rect x="189.1" y="595.0" width="147.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.1" y="606.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (12 samples, 5.36%)</title><rect x="189.1" y="579.0" width="63.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.1" y="590.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.79%)</title><rect x="189.1" y="563.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.1" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.79%)</title><rect x="189.1" y="547.0" width="21.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.1" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.79%)</title><rect x="189.1" y="531.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.1" y="542.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.79%)</title><rect x="189.1" y="515.0" width="21.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.1" y="526.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.79%)</title><rect x="189.1" y="499.0" width="21.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.1" y="510.0">j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (8 samples, 3.57%)</title><rect x="210.2" y="563.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.2" y="574.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 3.57%)</title><rect x="210.2" y="547.0" width="42.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="213.2" y="558.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.45%)</title><rect x="210.2" y="531.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="213.2" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.45%)</title><rect x="210.2" y="515.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (7 samples, 3.12%)</title><rect x="215.4" y="531.0" width="36.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.4" y="542.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (7 samples, 3.12%)</title><rect x="215.4" y="515.0" width="36.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.4" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (6 samples, 2.68%)</title><rect x="215.4" y="499.0" width="31.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.4" y="510.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (6 samples, 2.68%)</title><rect x="215.4" y="483.0" width="31.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="218.4" y="494.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.45%)</title><rect x="247.1" y="499.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.45%)</title><rect x="247.1" y="483.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="250.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 5.80%)</title><rect x="252.3" y="579.0" width="68.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.3" y="590.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.89%)</title><rect x="252.3" y="563.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.89%)</title><rect x="252.3" y="547.0" width="10.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.89%)</title><rect x="262.9" y="563.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.45%)</title><rect x="268.1" y="547.0" width="5.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.45%)</title><rect x="268.1" y="531.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.45%)</title><rect x="268.1" y="515.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.45%)</title><rect x="268.1" y="499.0" width="5.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.45%)</title><rect x="268.1" y="483.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.45%)</title><rect x="273.4" y="563.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.45%)</title><rect x="273.4" y="547.0" width="5.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.4" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.45%)</title><rect x="273.4" y="531.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="276.4" y="542.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.45%)</title><rect x="273.4" y="515.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="276.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 3.57%)</title><rect x="278.7" y="563.0" width="42.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.7" y="574.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.57%)</title><rect x="278.7" y="547.0" width="42.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.7" y="558.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.34%)</title><rect x="278.7" y="531.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.45%)</title><rect x="278.7" y="515.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.45%)</title><rect x="278.7" y="499.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.45%)</title><rect x="283.9" y="515.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.45%)</title><rect x="289.2" y="515.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.45%)</title><rect x="289.2" y="499.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.23%)</title><rect x="294.5" y="531.0" width="26.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.5" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.23%)</title><rect x="294.5" y="515.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.5" y="526.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.23%)</title><rect x="294.5" y="499.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.5" y="510.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.79%)</title><rect x="294.5" y="483.0" width="21.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.5" y="494.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.89%)</title><rect x="305.0" y="467.0" width="10.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.89%)</title><rect x="305.0" y="451.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="308.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.89%)</title><rect x="305.0" y="435.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (1 samples, 0.45%)</title><rect x="305.0" y="419.0" width="5.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (1 samples, 0.45%)</title><rect x="305.0" y="403.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="414.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.45%)</title><rect x="310.3" y="419.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="313.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.45%)</title><rect x="315.5" y="483.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="318.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.34%)</title><rect x="320.8" y="579.0" width="15.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.34%)</title><rect x="320.8" y="563.0" width="15.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="323.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.34%)</title><rect x="320.8" y="547.0" width="15.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.34%)</title><rect x="320.8" y="531.0" width="15.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="323.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.34%)</title><rect x="320.8" y="515.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="323.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (110 samples, 49.11%)</title><rect x="336.6" y="675.0" width="579.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="339.6" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.34%)</title><rect x="336.6" y="659.0" width="15.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="339.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.34%)</title><rect x="336.6" y="643.0" width="15.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="339.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (16 samples, 7.14%)</title><rect x="352.4" y="659.0" width="84.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.4" y="670.0">com/lineco..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.34%)</title><rect x="352.4" y="643.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.4" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (13 samples, 5.80%)</title><rect x="368.2" y="643.0" width="68.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="371.2" y="654.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 5.36%)</title><rect x="373.5" y="627.0" width="63.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="376.5" y="638.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.34%)</title><rect x="384.0" y="611.0" width="15.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.34%)</title><rect x="384.0" y="595.0" width="15.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="387.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.34%)</title><rect x="384.0" y="579.0" width="15.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.0" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 3.12%)</title><rect x="399.8" y="611.0" width="36.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="402.8" y="622.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 3.12%)</title><rect x="399.8" y="595.0" width="36.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="402.8" y="606.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.45%)</title><rect x="399.8" y="579.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="402.8" y="590.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.45%)</title><rect x="399.8" y="563.0" width="5.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="402.8" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.45%)</title><rect x="399.8" y="547.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="402.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.68%)</title><rect x="405.1" y="579.0" width="31.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.1" y="590.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 9.38%)</title><rect x="436.7" y="659.0" width="110.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.7" y="670.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (20 samples, 8.93%)</title><rect x="436.7" y="643.0" width="105.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="439.7" y="654.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.23%)</title><rect x="447.2" y="627.0" width="26.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="450.2" y="638.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.89%)</title><rect x="457.8" y="611.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.8" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.89%)</title><rect x="457.8" y="595.0" width="10.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="460.8" y="606.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.45%)</title><rect x="463.0" y="579.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.0" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.45%)</title><rect x="463.0" y="563.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="466.0" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.45%)</title><rect x="463.0" y="547.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="466.0" y="558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.45%)</title><rect x="468.3" y="611.0" width="5.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="471.3" y="622.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.45%)</title><rect x="473.6" y="627.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="476.6" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.45%)</title><rect x="473.6" y="611.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="476.6" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.45%)</title><rect x="473.6" y="595.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="476.6" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.45%)</title><rect x="473.6" y="579.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="476.6" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.45%)</title><rect x="473.6" y="563.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="476.6" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.45%)</title><rect x="473.6" y="547.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="476.6" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.45%)</title><rect x="473.6" y="531.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="476.6" y="542.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.45%)</title><rect x="473.6" y="515.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.6" y="526.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 5.36%)</title><rect x="478.8" y="627.0" width="63.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="481.8" y="638.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 5.36%)</title><rect x="478.8" y="611.0" width="63.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="481.8" y="622.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.34%)</title><rect x="489.4" y="595.0" width="15.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="492.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.34%)</title><rect x="489.4" y="579.0" width="15.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="492.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.34%)</title><rect x="489.4" y="563.0" width="15.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="492.4" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 3.12%)</title><rect x="505.2" y="595.0" width="36.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.2" y="606.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 3.12%)</title><rect x="505.2" y="579.0" width="36.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="508.2" y="590.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 3.12%)</title><rect x="505.2" y="563.0" width="36.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.2" y="574.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 2.68%)</title><rect x="510.4" y="547.0" width="31.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="513.4" y="558.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.89%)</title><rect x="531.5" y="531.0" width="10.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="534.5" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.89%)</title><rect x="531.5" y="515.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="534.5" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.89%)</title><rect x="531.5" y="499.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="534.5" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.89%)</title><rect x="531.5" y="483.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="534.5" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.45%)</title><rect x="531.5" y="467.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="534.5" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.45%)</title><rect x="531.5" y="451.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="534.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.45%)</title><rect x="531.5" y="435.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="534.5" y="446.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.45%)</title><rect x="531.5" y="419.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="534.5" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.45%)</title><rect x="531.5" y="403.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="534.5" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.45%)</title><rect x="531.5" y="387.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="534.5" y="398.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.45%)</title><rect x="536.8" y="467.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="539.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.45%)</title><rect x="542.1" y="643.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="545.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.45%)</title><rect x="542.1" y="627.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.45%)</title><rect x="542.1" y="611.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="545.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.45%)</title><rect x="542.1" y="595.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.45%)</title><rect x="542.1" y="579.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (61 samples, 27.23%)</title><rect x="547.3" y="659.0" width="321.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.3" y="670.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (61 samples, 27.23%)</title><rect x="547.3" y="643.0" width="321.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.3" y="654.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.45%)</title><rect x="563.1" y="627.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="566.1" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.45%)</title><rect x="563.1" y="611.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="566.1" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.45%)</title><rect x="563.1" y="595.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="566.1" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.45%)</title><rect x="563.1" y="579.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="566.1" y="590.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.45%)</title><rect x="563.1" y="563.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="566.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/645873265.process (48 samples, 21.43%)</title><rect x="568.4" y="627.0" width="252.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="571.4" y="638.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (48 samples, 21.43%)</title><rect x="568.4" y="611.0" width="252.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.4" y="622.0">com/linecorp/decaton/benchmark/Dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (48 samples, 21.43%)</title><rect x="568.4" y="595.0" width="252.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="571.4" y="606.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.45%)</title><rect x="573.7" y="579.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.7" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.45%)</title><rect x="573.7" y="563.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="576.7" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.45%)</title><rect x="573.7" y="547.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="576.7" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.45%)</title><rect x="573.7" y="531.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="576.7" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.45%)</title><rect x="573.7" y="515.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="576.7" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.45%)</title><rect x="573.7" y="499.0" width="5.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="576.7" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.45%)</title><rect x="573.7" y="483.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="576.7" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.45%)</title><rect x="573.7" y="467.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="576.7" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.45%)</title><rect x="573.7" y="451.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="576.7" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/core/encoder/LayoutWrappingEncoder.encode (1 samples, 0.45%)</title><rect x="573.7" y="435.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.7" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.45%)</title><rect x="573.7" y="419.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.7" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/PatternLayout.doLayout (1 samples, 0.45%)</title><rect x="573.7" y="403.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="576.7" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/PatternLayoutBase.writeLoopOnConverters (1 samples, 0.45%)</title><rect x="573.7" y="387.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.7" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/core/pattern/FormattingConverter.write (1 samples, 0.45%)</title><rect x="573.7" y="371.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="576.7" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (1 samples, 0.45%)</title><rect x="573.7" y="355.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="576.7" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/NamedConverter.convert (1 samples, 0.45%)</title><rect x="573.7" y="339.0" width="5.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="576.7" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.abbreviate (1 samples, 0.45%)</title><rect x="573.7" y="323.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="576.7" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator.computeDotIndexes (1 samples, 0.45%)</title><rect x="573.7" y="307.0" width="5.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="576.7" y="318.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.45%)</title><rect x="573.7" y="291.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="576.7" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (45 samples, 20.09%)</title><rect x="578.9" y="579.0" width="237.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.9" y="590.0">com/linecorp/decaton/benchmark/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (45 samples, 20.09%)</title><rect x="578.9" y="563.0" width="237.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.9" y="574.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (45 samples, 20.09%)</title><rect x="578.9" y="547.0" width="237.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="581.9" y="558.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.45%)</title><rect x="600.0" y="531.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="603.0" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.45%)</title><rect x="605.3" y="531.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="608.3" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (2 samples, 0.89%)</title><rect x="610.5" y="531.0" width="10.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="613.5" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.23%)</title><rect x="621.1" y="531.0" width="26.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="624.1" y="542.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 4.02%)</title><rect x="647.4" y="531.0" width="47.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="650.4" y="542.0">__pt..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.45%)</title><rect x="694.8" y="531.0" width="5.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="697.8" y="542.0"></text>
</g>
<g>
<title>_init (1 samples, 0.45%)</title><rect x="700.1" y="531.0" width="5.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="703.1" y="542.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.89%)</title><rect x="705.4" y="531.0" width="10.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="708.4" y="542.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (18 samples, 8.04%)</title><rect x="715.9" y="531.0" width="94.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="718.9" y="542.0">os::sleep(T..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 3.12%)</title><rect x="737.0" y="515.0" width="36.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="740.0" y="526.0">Mon..</text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.45%)</title><rect x="763.3" y="499.0" width="5.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="766.3" y="510.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.45%)</title><rect x="768.6" y="499.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="771.6" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 1.34%)</title><rect x="773.8" y="515.0" width="15.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="776.8" y="526.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.34%)</title><rect x="773.8" y="499.0" width="15.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="776.8" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 1.79%)</title><rect x="789.6" y="515.0" width="21.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="792.6" y="526.0">_..</text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.45%)</title><rect x="810.7" y="531.0" width="5.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="813.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.45%)</title><rect x="816.0" y="579.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="819.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 2.23%)</title><rect x="821.3" y="627.0" width="26.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.3" y="638.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 2.23%)</title><rect x="821.3" y="611.0" width="26.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="824.3" y="622.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 2.23%)</title><rect x="821.3" y="595.0" width="26.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="824.3" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 2.23%)</title><rect x="821.3" y="579.0" width="26.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="824.3" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 2.23%)</title><rect x="821.3" y="563.0" width="26.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="824.3" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.23%)</title><rect x="821.3" y="547.0" width="26.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="824.3" y="558.0">j..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.89%)</title><rect x="847.6" y="627.0" width="10.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.45%)</title><rect x="852.9" y="611.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.9" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.45%)</title><rect x="852.9" y="595.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.89%)</title><rect x="858.1" y="627.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="861.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.89%)</title><rect x="858.1" y="611.0" width="10.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="861.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.89%)</title><rect x="858.1" y="595.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.89%)</title><rect x="858.1" y="579.0" width="10.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$479/1092449312.accept (1 samples, 0.45%)</title><rect x="858.1" y="563.0" width="5.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.1" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.45%)</title><rect x="863.4" y="563.0" width="5.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="866.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 4.02%)</title><rect x="868.7" y="659.0" width="47.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.7" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 4.02%)</title><rect x="868.7" y="643.0" width="47.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="871.7" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.89%)</title><rect x="900.3" y="627.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.45%)</title><rect x="900.3" y="611.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.3" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.45%)</title><rect x="900.3" y="595.0" width="5.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="903.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.45%)</title><rect x="905.5" y="611.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="908.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/2065618601.accept (1 samples, 0.45%)</title><rect x="905.5" y="595.0" width="5.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="908.5" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.45%)</title><rect x="905.5" y="579.0" width="5.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="908.5" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.45%)</title><rect x="905.5" y="563.0" width="5.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="908.5" y="574.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.45%)</title><rect x="910.8" y="627.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="913.8" y="638.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.45%)</title><rect x="916.1" y="675.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="919.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (9 samples, 4.02%)</title><rect x="921.3" y="739.0" width="47.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="924.3" y="750.0">java..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (8 samples, 3.57%)</title><rect x="921.3" y="723.0" width="42.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="924.3" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.89%)</title><rect x="921.3" y="707.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="924.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.89%)</title><rect x="921.3" y="691.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="924.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.89%)</title><rect x="921.3" y="675.0" width="10.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="924.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 2.68%)</title><rect x="931.9" y="707.0" width="31.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="934.9" y="718.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 2.68%)</title><rect x="931.9" y="691.0" width="31.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="934.9" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 2.68%)</title><rect x="931.9" y="675.0" width="31.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="934.9" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 2.68%)</title><rect x="931.9" y="659.0" width="31.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="934.9" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.45%)</title><rect x="963.5" y="723.0" width="5.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="966.5" y="734.0"></text>
</g>
<g>
<title>mmap64 (1 samples, 0.45%)</title><rect x="968.8" y="787.0" width="5.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="971.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.89%)</title><rect x="974.0" y="787.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="977.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.45%)</title><rect x="979.3" y="771.0" width="5.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="982.3" y="782.0"></text>
</g>
<g>
<title>start_thread (39 samples, 17.41%)</title><rect x="984.6" y="787.0" width="205.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="987.6" y="798.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (39 samples, 17.41%)</title><rect x="984.6" y="771.0" width="205.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="987.6" y="782.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (39 samples, 17.41%)</title><rect x="984.6" y="755.0" width="205.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="987.6" y="766.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.57%)</title><rect x="984.6" y="739.0" width="42.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.6" y="750.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.68%)</title><rect x="984.6" y="723.0" width="31.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="987.6" y="734.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.23%)</title><rect x="984.6" y="707.0" width="26.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.6" y="718.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (4 samples, 1.79%)</title><rect x="989.8" y="691.0" width="21.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="992.8" y="702.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 1.79%)</title><rect x="989.8" y="675.0" width="21.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.8" y="686.0">G..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (1 samples, 0.45%)</title><rect x="1005.6" y="659.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1008.6" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.45%)</title><rect x="1010.9" y="707.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1013.9" y="718.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.45%)</title><rect x="1010.9" y="691.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.45%)</title><rect x="1010.9" y="675.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1013.9" y="686.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.45%)</title><rect x="1010.9" y="659.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1013.9" y="670.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.45%)</title><rect x="1010.9" y="643.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1013.9" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.45%)</title><rect x="1010.9" y="627.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1013.9" y="638.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.89%)</title><rect x="1016.2" y="723.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.2" y="734.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.89%)</title><rect x="1016.2" y="707.0" width="10.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1019.2" y="718.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.45%)</title><rect x="1016.2" y="691.0" width="5.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.2" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.45%)</title><rect x="1016.2" y="675.0" width="5.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1019.2" y="686.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.45%)</title><rect x="1016.2" y="659.0" width="5.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1019.2" y="670.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.45%)</title><rect x="1021.4" y="691.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1024.4" y="702.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.45%)</title><rect x="1021.4" y="675.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.4" y="686.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.45%)</title><rect x="1021.4" y="659.0" width="5.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1024.4" y="670.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 13.84%)</title><rect x="1026.7" y="739.0" width="163.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.7" y="750.0">JavaThread::thread_ma..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 13.84%)</title><rect x="1026.7" y="723.0" width="163.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.7" y="734.0">CompileBroker::compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 13.84%)</title><rect x="1026.7" y="707.0" width="163.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.7" y="718.0">CompileBroker::invoke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (30 samples, 13.39%)</title><rect x="1026.7" y="691.0" width="158.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1029.7" y="702.0">C2Compiler::compile_..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (30 samples, 13.39%)</title><rect x="1026.7" y="675.0" width="158.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1029.7" y="686.0">Compile::Compile(ciE..</text>
</g>
<g>
<title>Compile::Code_Gen() (18 samples, 8.04%)</title><rect x="1026.7" y="659.0" width="94.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.7" y="670.0">Compile::Co..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.45%)</title><rect x="1026.7" y="643.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1029.7" y="654.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.45%)</title><rect x="1032.0" y="643.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.0" y="654.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.45%)</title><rect x="1032.0" y="627.0" width="5.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1035.0" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.34%)</title><rect x="1037.2" y="643.0" width="15.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1040.2" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.34%)</title><rect x="1037.2" y="627.0" width="15.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.2" y="638.0"></text>
</g>
<g>
<title>Block::end_idx() const (1 samples, 0.45%)</title><rect x="1037.2" y="611.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1040.2" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.45%)</title><rect x="1042.5" y="611.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1045.5" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.45%)</title><rect x="1042.5" y="595.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1045.5" y="606.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.45%)</title><rect x="1042.5" y="579.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1045.5" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.45%)</title><rect x="1047.8" y="611.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.8" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.45%)</title><rect x="1047.8" y="595.0" width="5.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1050.8" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 5.80%)</title><rect x="1053.0" y="643.0" width="68.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.0" y="654.0">PhaseCh..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.45%)</title><rect x="1058.3" y="627.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.3" y="638.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.45%)</title><rect x="1058.3" y="611.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.3" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.45%)</title><rect x="1058.3" y="595.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.3" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.45%)</title><rect x="1063.6" y="627.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1066.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 1.34%)</title><rect x="1068.8" y="627.0" width="15.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1071.8" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.45%)</title><rect x="1079.4" y="611.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.45%)</title><rect x="1084.6" y="627.0" width="5.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1087.6" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.89%)</title><rect x="1089.9" y="627.0" width="10.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1092.9" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.45%)</title><rect x="1100.4" y="627.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.4" y="638.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.45%)</title><rect x="1100.4" y="611.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.4" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.89%)</title><rect x="1105.7" y="627.0" width="10.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.7" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.45%)</title><rect x="1105.7" y="611.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="622.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.45%)</title><rect x="1111.0" y="611.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1114.0" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.45%)</title><rect x="1116.2" y="627.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1119.2" y="638.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 3.57%)</title><rect x="1121.5" y="659.0" width="42.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.5" y="670.0">Comp..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (2 samples, 0.89%)</title><rect x="1121.5" y="643.0" width="10.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.89%)</title><rect x="1121.5" y="627.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.5" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.45%)</title><rect x="1121.5" y="611.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.5" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.45%)</title><rect x="1121.5" y="595.0" width="5.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.45%)</title><rect x="1121.5" y="579.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.5" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.45%)</title><rect x="1126.8" y="611.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.45%)</title><rect x="1126.8" y="595.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.8" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.45%)</title><rect x="1126.8" y="579.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.8" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.45%)</title><rect x="1126.8" y="563.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.45%)</title><rect x="1126.8" y="547.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.8" y="558.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.45%)</title><rect x="1132.1" y="643.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.1" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.45%)</title><rect x="1132.1" y="627.0" width="5.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.1" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.45%)</title><rect x="1132.1" y="611.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.1" y="622.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.45%)</title><rect x="1132.1" y="595.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.1" y="606.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.45%)</title><rect x="1137.3" y="643.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.3" y="654.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.45%)</title><rect x="1137.3" y="627.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.3" y="638.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.45%)</title><rect x="1137.3" y="611.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.45%)</title><rect x="1137.3" y="595.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.3" y="606.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.45%)</title><rect x="1137.3" y="579.0" width="5.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1140.3" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.89%)</title><rect x="1142.6" y="643.0" width="10.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.89%)</title><rect x="1142.6" y="627.0" width="10.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.6" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.89%)</title><rect x="1142.6" y="611.0" width="10.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.6" y="622.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.45%)</title><rect x="1142.6" y="595.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.6" y="606.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.45%)</title><rect x="1147.9" y="595.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.9" y="606.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.45%)</title><rect x="1147.9" y="579.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.9" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.45%)</title><rect x="1153.1" y="643.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.45%)</title><rect x="1158.4" y="643.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.4" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.45%)</title><rect x="1158.4" y="627.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.4" y="638.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.45%)</title><rect x="1158.4" y="611.0" width="5.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.4" y="622.0"></text>
</g>
<g>
<title>PhiNode::wait_for_region_igvn(PhaseGVN*) (1 samples, 0.45%)</title><rect x="1158.4" y="595.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.4" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.79%)</title><rect x="1163.7" y="659.0" width="21.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="670.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.79%)</title><rect x="1163.7" y="643.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="654.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.79%)</title><rect x="1163.7" y="627.0" width="21.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="638.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.79%)</title><rect x="1163.7" y="611.0" width="21.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.79%)</title><rect x="1163.7" y="595.0" width="21.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.34%)</title><rect x="1163.7" y="579.0" width="15.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.45%)</title><rect x="1163.7" y="563.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="574.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.45%)</title><rect x="1163.7" y="547.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="558.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.45%)</title><rect x="1163.7" y="531.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.7" y="542.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.45%)</title><rect x="1163.7" y="515.0" width="5.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1166.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.89%)</title><rect x="1168.9" y="563.0" width="10.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.89%)</title><rect x="1168.9" y="547.0" width="10.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.89%)</title><rect x="1168.9" y="531.0" width="10.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.89%)</title><rect x="1168.9" y="515.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.89%)</title><rect x="1168.9" y="499.0" width="10.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.89%)</title><rect x="1168.9" y="483.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.89%)</title><rect x="1168.9" y="467.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.89%)</title><rect x="1168.9" y="451.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.89%)</title><rect x="1168.9" y="435.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.89%)</title><rect x="1168.9" y="419.0" width="10.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.89%)</title><rect x="1168.9" y="403.0" width="10.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.89%)</title><rect x="1168.9" y="387.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.89%)</title><rect x="1168.9" y="371.0" width="10.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.89%)</title><rect x="1168.9" y="355.0" width="10.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.89%)</title><rect x="1168.9" y="339.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.89%)</title><rect x="1168.9" y="323.0" width="10.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.89%)</title><rect x="1168.9" y="307.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1168.9" y="291.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1168.9" y="275.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1168.9" y="259.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1168.9" y="243.0" width="5.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1168.9" y="227.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1168.9" y="211.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1168.9" y="195.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.9" y="206.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1168.9" y="179.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.9" y="190.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1168.9" y="163.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.45%)</title><rect x="1168.9" y="147.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.45%)</title><rect x="1168.9" y="131.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.45%)</title><rect x="1168.9" y="115.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.45%)</title><rect x="1168.9" y="99.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="110.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.45%)</title><rect x="1168.9" y="83.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.9" y="94.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.45%)</title><rect x="1168.9" y="67.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.9" y="78.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.45%)</title><rect x="1168.9" y="51.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.45%)</title><rect x="1168.9" y="35.0" width="5.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1171.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1174.2" y="291.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.45%)</title><rect x="1174.2" y="275.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="286.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.45%)</title><rect x="1174.2" y="259.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.2" y="270.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.45%)</title><rect x="1174.2" y="243.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="254.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.45%)</title><rect x="1174.2" y="227.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.2" y="238.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.45%)</title><rect x="1174.2" y="211.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="222.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.45%)</title><rect x="1174.2" y="195.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.2" y="206.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.45%)</title><rect x="1174.2" y="179.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.45%)</title><rect x="1174.2" y="163.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.2" y="174.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.45%)</title><rect x="1174.2" y="147.0" width="5.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.2" y="158.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.45%)</title><rect x="1174.2" y="131.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.2" y="142.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.45%)</title><rect x="1174.2" y="115.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.2" y="126.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.45%)</title><rect x="1174.2" y="99.0" width="5.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.2" y="110.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.45%)</title><rect x="1174.2" y="83.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="579.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="563.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="574.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.45%)</title><rect x="1179.5" y="547.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.45%)</title><rect x="1179.5" y="531.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.45%)</title><rect x="1179.5" y="515.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.45%)</title><rect x="1179.5" y="499.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.45%)</title><rect x="1179.5" y="483.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.5" y="494.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.45%)</title><rect x="1179.5" y="467.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="478.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.45%)</title><rect x="1179.5" y="451.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="462.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.45%)</title><rect x="1179.5" y="435.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.5" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.45%)</title><rect x="1179.5" y="419.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.5" y="430.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.45%)</title><rect x="1179.5" y="403.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.5" y="414.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.45%)</title><rect x="1184.7" y="691.0" width="5.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="702.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.45%)</title><rect x="1184.7" y="675.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.45%)</title><rect x="1184.7" y="659.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.45%)</title><rect x="1184.7" y="643.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.7" y="654.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.45%)</title><rect x="1184.7" y="627.0" width="5.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.7" y="638.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.45%)</title><rect x="1184.7" y="611.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="622.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.45%)</title><rect x="1184.7" y="595.0" width="5.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.7" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.45%)</title><rect x="1184.7" y="579.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.45%)</title><rect x="1184.7" y="563.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.45%)</title><rect x="1184.7" y="547.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.7" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.45%)</title><rect x="1184.7" y="531.0" width="5.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.7" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.45%)</title><rect x="1184.7" y="515.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.45%)</title><rect x="1184.7" y="499.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.45%)</title><rect x="1184.7" y="483.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.7" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.45%)</title><rect x="1184.7" y="467.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.45%)</title><rect x="1184.7" y="451.0" width="5.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.7" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.45%)</title><rect x="1184.7" y="435.0" width="5.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.45%)</title><rect x="1184.7" y="419.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.45%)</title><rect x="1184.7" y="403.0" width="5.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.45%)</title><rect x="1184.7" y="387.0" width="5.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.7" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.45%)</title><rect x="1184.7" y="371.0" width="5.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.45%)</title><rect x="1184.7" y="355.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.7" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.45%)</title><rect x="1184.7" y="339.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.7" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.45%)</title><rect x="1184.7" y="323.0" width="5.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.7" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1184.7" y="307.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.45%)</title><rect x="1184.7" y="291.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.7" y="302.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.45%)</title><rect x="1184.7" y="275.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="286.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.45%)</title><rect x="1184.7" y="259.0" width="5.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.7" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.45%)</title><rect x="1184.7" y="243.0" width="5.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.7" y="254.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.45%)</title><rect x="1184.7" y="227.0" width="5.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.7" y="238.0"></text>
</g>
</g>
</svg>
