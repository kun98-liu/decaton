<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (1,232 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2035.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2019.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="2003.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1987.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1971.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1955.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1939.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1923.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1907.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1859.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1827.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1811.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1795.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1763.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1747.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1731.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1715.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1699.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1683.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1667.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1651.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1635.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1619.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1603.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1587.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1571.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1555.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1539.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1523.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1507.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1491.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1475.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1459.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1443.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1427.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1411.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1395.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1379.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1363.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1347.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1315.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1299.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1283.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1267.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1251.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1171.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1123.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1091.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="979.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="963.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="947.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="915.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="899.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="883.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="851.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="835.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="819.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="803.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="739.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="723.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="707.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="659.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="643.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="627.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="611.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="595.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="563.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="531.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="467.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="435.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="403.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="371.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="355.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="339.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="323.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="259.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="243.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="211.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="195.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="179.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="163.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="147.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="131.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="115.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="99.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="83.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="10.0" y="67.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="10.0" y="51.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.08%)</title><rect x="10.0" y="35.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.16%)</title><rect x="11.0" y="2035.0" width="1.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="14.0" y="2046.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.08%)</title><rect x="11.0" y="2019.0" width="0.9" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="14.0" y="2030.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="11.9" y="2019.0" width="1.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="14.9" y="2030.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (273 samples, 22.16%)</title><rect x="12.9" y="2035.0" width="261.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.9" y="2046.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (273 samples, 22.16%)</title><rect x="12.9" y="2019.0" width="261.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="15.9" y="2030.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (273 samples, 22.16%)</title><rect x="12.9" y="2003.0" width="261.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="15.9" y="2014.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (6 samples, 0.49%)</title><rect x="12.9" y="1987.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.9" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="12.9" y="1971.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="1982.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (5 samples, 0.41%)</title><rect x="13.8" y="1971.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.32%)</title><rect x="14.8" y="1955.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.8" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.32%)</title><rect x="14.8" y="1939.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.32%)</title><rect x="14.8" y="1923.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.8" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.32%)</title><rect x="14.8" y="1907.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="17.8" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.32%)</title><rect x="14.8" y="1891.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="17.8" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.16%)</title><rect x="15.7" y="1875.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="16.7" y="1859.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="16.7" y="1843.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="16.7" y="1827.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="19.7" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.08%)</title><rect x="17.7" y="1875.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.7" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.16%)</title><rect x="18.6" y="1987.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.6" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.16%)</title><rect x="18.6" y="1971.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.6" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.16%)</title><rect x="18.6" y="1955.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/27632145.accept (1 samples, 0.08%)</title><rect x="18.6" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.08%)</title><rect x="18.6" y="1923.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.08%)</title><rect x="18.6" y="1907.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="21.6" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetStateReaper.maybeReapOffset (1 samples, 0.08%)</title><rect x="18.6" y="1891.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="21.6" y="1902.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.08%)</title><rect x="18.6" y="1875.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.6" y="1886.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="19.6" y="1939.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.6" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (210 samples, 17.05%)</title><rect x="20.5" y="1987.0" width="201.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.5" y="1998.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1217038096.accept (206 samples, 16.72%)</title><rect x="20.5" y="1971.0" width="197.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="23.5" y="1982.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (206 samples, 16.72%)</title><rect x="20.5" y="1955.0" width="197.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.5" y="1966.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (185 samples, 15.02%)</title><rect x="24.4" y="1939.0" width="177.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="27.4" y="1950.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (185 samples, 15.02%)</title><rect x="24.4" y="1923.0" width="177.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.4" y="1934.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (185 samples, 15.02%)</title><rect x="24.4" y="1907.0" width="177.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="27.4" y="1918.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (185 samples, 15.02%)</title><rect x="24.4" y="1891.0" width="177.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="27.4" y="1902.0">java/util/concurrent/Ex..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (185 samples, 15.02%)</title><rect x="24.4" y="1875.0" width="177.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="27.4" y="1886.0">java/util/concurrent/Th..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (185 samples, 15.02%)</title><rect x="24.4" y="1859.0" width="177.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.4" y="1870.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (134 samples, 10.88%)</title><rect x="24.4" y="1843.0" width="128.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.4" y="1854.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (31 samples, 2.52%)</title><rect x="24.4" y="1827.0" width="29.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.4" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (31 samples, 2.52%)</title><rect x="24.4" y="1811.0" width="29.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.4" y="1822.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.54%)</title><rect x="35.9" y="1795.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="38.9" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (18 samples, 1.46%)</title><rect x="36.8" y="1779.0" width="17.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.24%)</title><rect x="54.1" y="1827.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3 samples, 0.24%)</title><rect x="54.1" y="1811.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.16%)</title><rect x="54.1" y="1795.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.1" y="1806.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (2 samples, 0.16%)</title><rect x="54.1" y="1779.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="57.1" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.08%)</title><rect x="56.0" y="1795.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.0" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (100 samples, 8.12%)</title><rect x="56.9" y="1827.0" width="95.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.9" y="1838.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (100 samples, 8.12%)</title><rect x="56.9" y="1811.0" width="95.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.9" y="1822.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (96 samples, 7.79%)</title><rect x="57.9" y="1795.0" width="91.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.9" y="1806.0">java/util/c..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (96 samples, 7.79%)</title><rect x="57.9" y="1779.0" width="91.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="60.9" y="1790.0">java/util/c..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (93 samples, 7.55%)</title><rect x="60.8" y="1763.0" width="89.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.8" y="1774.0">sun/misc/U..</text>
</g>
<g>
<title>Unsafe_Unpark (86 samples, 6.98%)</title><rect x="61.7" y="1747.0" width="82.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="64.7" y="1758.0">Unsafe_Un..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="63.6" y="1731.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="66.6" y="1742.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.08%)</title><rect x="64.6" y="1731.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="67.6" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (64 samples, 5.19%)</title><rect x="65.6" y="1731.0" width="61.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="68.6" y="1742.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.41%)</title><rect x="126.9" y="1731.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="129.9" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.06%)</title><rect x="131.6" y="1731.0" width="12.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="134.6" y="1742.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.16%)</title><rect x="144.1" y="1747.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="147.1" y="1758.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.32%)</title><rect x="146.0" y="1747.0" width="3.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="149.0" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (3 samples, 0.24%)</title><rect x="149.8" y="1795.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="152.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (46 samples, 3.73%)</title><rect x="152.7" y="1843.0" width="44.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="155.7" y="1854.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (46 samples, 3.73%)</title><rect x="152.7" y="1827.0" width="44.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="155.7" y="1838.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (46 samples, 3.73%)</title><rect x="152.7" y="1811.0" width="44.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.7" y="1822.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.16%)</title><rect x="196.8" y="1843.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (2 samples, 0.16%)</title><rect x="196.8" y="1827.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.16%)</title><rect x="196.8" y="1811.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="199.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.16%)</title><rect x="196.8" y="1795.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="199.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.24%)</title><rect x="198.7" y="1843.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="201.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="198.7" y="1827.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="201.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="198.7" y="1811.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="198.7" y="1795.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.16%)</title><rect x="199.6" y="1811.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="202.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (1 samples, 0.08%)</title><rect x="200.6" y="1795.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="203.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 0.89%)</title><rect x="201.6" y="1939.0" width="10.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.6" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 0.89%)</title><rect x="201.6" y="1923.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="204.6" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.49%)</title><rect x="206.3" y="1907.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.49%)</title><rect x="206.3" y="1891.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.49%)</title><rect x="206.3" y="1875.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.49%)</title><rect x="206.3" y="1859.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="209.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.49%)</title><rect x="206.3" y="1843.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.3" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.16%)</title><rect x="212.1" y="1939.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.1" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.16%)</title><rect x="212.1" y="1923.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.1" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.16%)</title><rect x="212.1" y="1907.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="215.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.32%)</title><rect x="214.0" y="1939.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.0" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.32%)</title><rect x="214.0" y="1923.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.0" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.32%)</title><rect x="214.0" y="1907.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.0" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.32%)</title><rect x="214.0" y="1891.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="217.0" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.32%)</title><rect x="214.0" y="1875.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="217.0" y="1886.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="217.8" y="1971.0" width="1.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="220.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.08%)</title><rect x="218.8" y="1971.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="218.8" y="1955.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="218.8" y="1939.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="221.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="218.8" y="1923.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (2 samples, 0.16%)</title><rect x="219.8" y="1971.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.16%)</title><rect x="219.8" y="1955.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.08%)</title><rect x="220.7" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="220.7" y="1923.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="223.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.08%)</title><rect x="220.7" y="1907.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.46%)</title><rect x="221.7" y="1987.0" width="52.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="224.7" y="1998.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.46%)</title><rect x="221.7" y="1971.0" width="52.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="224.7" y="1982.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 2.27%)</title><rect x="221.7" y="1955.0" width="26.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="224.7" y="1966.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.08%)</title><rect x="222.6" y="1939.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="225.6" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.08%)</title><rect x="222.6" y="1923.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.6" y="1934.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (1 samples, 0.08%)</title><rect x="222.6" y="1907.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="225.6" y="1918.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.08%)</title><rect x="222.6" y="1891.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="225.6" y="1902.0"></text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (1 samples, 0.08%)</title><rect x="222.6" y="1875.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="225.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (26 samples, 2.11%)</title><rect x="223.6" y="1939.0" width="24.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.6" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.03%)</title><rect x="223.6" y="1923.0" width="23.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.6" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (19 samples, 1.54%)</title><rect x="223.6" y="1907.0" width="18.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 1.54%)</title><rect x="223.6" y="1891.0" width="18.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.81%)</title><rect x="224.5" y="1875.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.5" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (6 samples, 0.49%)</title><rect x="228.4" y="1859.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (6 samples, 0.49%)</title><rect x="228.4" y="1843.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (6 samples, 0.49%)</title><rect x="228.4" y="1827.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (6 samples, 0.49%)</title><rect x="228.4" y="1811.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="231.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (6 samples, 0.49%)</title><rect x="228.4" y="1795.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.4" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (6 samples, 0.49%)</title><rect x="228.4" y="1779.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.4" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (6 samples, 0.49%)</title><rect x="228.4" y="1763.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.4" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (8 samples, 0.65%)</title><rect x="234.1" y="1875.0" width="7.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="237.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.49%)</title><rect x="235.1" y="1859.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.41%)</title><rect x="235.1" y="1843.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.08%)</title><rect x="235.1" y="1827.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.1" y="1838.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="235.1" y="1811.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="238.1" y="1822.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="235.1" y="1795.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="238.1" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="235.1" y="1779.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="238.1" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="235.1" y="1763.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="238.1" y="1774.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="235.1" y="1747.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="238.1" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="235.1" y="1731.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="238.1" y="1742.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.32%)</title><rect x="236.0" y="1827.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.0" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.9" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.9" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.9" y="1827.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.9" y="1838.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.08%)</title><rect x="239.9" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.9" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="239.9" y="1795.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="242.9" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.9" y="1779.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="242.9" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="239.9" y="1763.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.9" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.08%)</title><rect x="240.8" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.8" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.08%)</title><rect x="240.8" y="1843.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="243.8" y="1854.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (1 samples, 0.08%)</title><rect x="240.8" y="1827.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.8" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (1 samples, 0.08%)</title><rect x="240.8" y="1811.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="240.8" y="1795.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.08%)</title><rect x="240.8" y="1779.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (5 samples, 0.41%)</title><rect x="241.8" y="1907.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="244.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (5 samples, 0.41%)</title><rect x="241.8" y="1891.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (2 samples, 0.16%)</title><rect x="241.8" y="1875.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (2 samples, 0.16%)</title><rect x="241.8" y="1859.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (2 samples, 0.16%)</title><rect x="241.8" y="1843.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="244.8" y="1854.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="242.7" y="1827.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="245.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="243.7" y="1875.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="243.7" y="1859.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.24%)</title><rect x="243.7" y="1843.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.7" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (3 samples, 0.24%)</title><rect x="243.7" y="1827.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.7" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="246.6" y="1907.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.08%)</title><rect x="247.5" y="1923.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="250.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (9 samples, 0.73%)</title><rect x="248.5" y="1955.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="251.5" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (7 samples, 0.57%)</title><rect x="248.5" y="1939.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (7 samples, 0.57%)</title><rect x="248.5" y="1923.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="251.5" y="1934.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.24%)</title><rect x="249.4" y="1907.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/153051762.accept (3 samples, 0.24%)</title><rect x="249.4" y="1891.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.4" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.24%)</title><rect x="249.4" y="1875.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.4" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (2 samples, 0.16%)</title><rect x="249.4" y="1859.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.4" y="1870.0"></text>
</g>
<g>
<title>java/util/Optional.map (1 samples, 0.08%)</title><rect x="249.4" y="1843.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$240/278459761.apply (1 samples, 0.08%)</title><rect x="249.4" y="1827.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lambda$leaderAndEpoch$6 (1 samples, 0.08%)</title><rect x="249.4" y="1811.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="252.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.lastSeenLeaderEpoch (1 samples, 0.08%)</title><rect x="250.4" y="1843.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.4" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="250.4" y="1827.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.4" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="250.4" y="1811.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.08%)</title><rect x="251.4" y="1859.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="251.4" y="1843.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="251.4" y="1827.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="254.4" y="1838.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="251.4" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="254.4" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="251.4" y="1795.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.4" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="252.3" y="1907.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="255.3" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="252.3" y="1891.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.3" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="252.3" y="1875.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.3" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="252.3" y="1859.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.3" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="252.3" y="1843.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.08%)</title><rect x="252.3" y="1827.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.3" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.08%)</title><rect x="253.3" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="256.3" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.08%)</title><rect x="253.3" y="1891.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.3" y="1902.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.08%)</title><rect x="253.3" y="1875.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.08%)</title><rect x="253.3" y="1859.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="256.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="254.2" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.16%)</title><rect x="255.2" y="1939.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.2" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="256.2" y="1923.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="259.2" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="256.2" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.73%)</title><rect x="257.1" y="1955.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (8 samples, 0.65%)</title><rect x="257.1" y="1939.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="260.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.08%)</title><rect x="257.1" y="1923.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.08%)</title><rect x="257.1" y="1907.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.08%)</title><rect x="257.1" y="1891.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.1" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getOrElse (1 samples, 0.08%)</title><rect x="257.1" y="1875.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="260.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.getLong (1 samples, 0.08%)</title><rect x="257.1" y="1859.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.57%)</title><rect x="258.1" y="1923.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (6 samples, 0.49%)</title><rect x="258.1" y="1907.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="261.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.08%)</title><rect x="258.1" y="1891.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.1" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.08%)</title><rect x="258.1" y="1875.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.1" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (5 samples, 0.41%)</title><rect x="259.0" y="1891.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (5 samples, 0.41%)</title><rect x="259.0" y="1875.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.0" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="259.0" y="1859.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="262.0" y="1870.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="259.0" y="1843.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="262.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.32%)</title><rect x="260.0" y="1859.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.0" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.32%)</title><rect x="260.0" y="1843.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (4 samples, 0.32%)</title><rect x="260.0" y="1827.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.0" y="1838.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (4 samples, 0.32%)</title><rect x="260.0" y="1811.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.0" y="1822.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.24%)</title><rect x="260.0" y="1795.0" width="2.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="263.0" y="1806.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="262.9" y="1795.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="265.9" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.08%)</title><rect x="263.8" y="1907.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.8" y="1918.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.08%)</title><rect x="263.8" y="1891.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.8" y="1902.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.08%)</title><rect x="263.8" y="1875.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="266.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.08%)</title><rect x="264.8" y="1939.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.8" y="1950.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="264.8" y="1923.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="267.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (7 samples, 0.57%)</title><rect x="265.7" y="1955.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="265.7" y="1939.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.08%)</title><rect x="265.7" y="1923.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.08%)</title><rect x="265.7" y="1907.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.put (1 samples, 0.08%)</title><rect x="265.7" y="1891.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.7" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putVal (1 samples, 0.08%)</title><rect x="265.7" y="1875.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (6 samples, 0.49%)</title><rect x="266.7" y="1939.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.7" y="1950.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.08%)</title><rect x="266.7" y="1923.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.7" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$262/1341734673.accept (1 samples, 0.08%)</title><rect x="266.7" y="1907.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.08%)</title><rect x="267.6" y="1923.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="270.6" y="1934.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.08%)</title><rect x="267.6" y="1907.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="270.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.08%)</title><rect x="267.6" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$Node.getKey (1 samples, 0.08%)</title><rect x="267.6" y="1875.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (4 samples, 0.32%)</title><rect x="268.6" y="1923.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.6" y="1934.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.08%)</title><rect x="268.6" y="1907.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="271.6" y="1918.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="268.6" y="1891.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="271.6" y="1902.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="268.6" y="1875.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="271.6" y="1886.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="268.6" y="1859.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="271.6" y="1870.0"></text>
</g>
<g>
<title>java/util/HashSet.add (2 samples, 0.16%)</title><rect x="269.6" y="1907.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="272.6" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.16%)</title><rect x="269.6" y="1891.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.6" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="269.6" y="1875.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="272.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.16%)</title><rect x="269.6" y="1859.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="272.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.08%)</title><rect x="271.5" y="1907.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.5" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.08%)</title><rect x="271.5" y="1891.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.5" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.08%)</title><rect x="271.5" y="1875.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.5" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.08%)</title><rect x="271.5" y="1859.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="274.5" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.08%)</title><rect x="271.5" y="1843.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.5" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.08%)</title><rect x="271.5" y="1827.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.5" y="1838.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.08%)</title><rect x="271.5" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.5" y="1822.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.08%)</title><rect x="271.5" y="1795.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.5" y="1806.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="271.5" y="1779.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.5" y="1790.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="271.5" y="1763.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.5" y="1774.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.08%)</title><rect x="271.5" y="1747.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.5" y="1758.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.08%)</title><rect x="271.5" y="1731.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.5" y="1742.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$187/395473372.accept (1 samples, 0.08%)</title><rect x="271.5" y="1715.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.5" y="1726.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="271.5" y="1699.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.5" y="1710.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="271.5" y="1683.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.5" y="1694.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="271.5" y="1667.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.5" y="1678.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="271.5" y="1651.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.5" y="1662.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="271.5" y="1635.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.5" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.08%)</title><rect x="272.4" y="1955.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="272.4" y="1939.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.08%)</title><rect x="273.4" y="1955.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.4" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="273.4" y="1939.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.4" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="273.4" y="1923.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.4" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="273.4" y="1907.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.4" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.08%)</title><rect x="273.4" y="1891.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="276.4" y="1902.0"></text>
</g>
<g>
<title>java/lang/Thread.run (746 samples, 60.55%)</title><rect x="274.4" y="2035.0" width="714.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="277.4" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (746 samples, 60.55%)</title><rect x="274.4" y="2019.0" width="714.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.4" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (746 samples, 60.55%)</title><rect x="274.4" y="2003.0" width="714.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.4" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/78234929.run (515 samples, 41.80%)</title><rect x="276.3" y="1987.0" width="493.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.3" y="1998.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (515 samples, 41.80%)</title><rect x="276.3" y="1971.0" width="493.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.3" y="1982.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (515 samples, 41.80%)</title><rect x="276.3" y="1955.0" width="493.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.3" y="1966.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (515 samples, 41.80%)</title><rect x="276.3" y="1939.0" width="493.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="279.3" y="1950.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sche..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="287.8" y="1923.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="290.8" y="1934.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="287.8" y="1907.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="290.8" y="1918.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.57%)</title><rect x="288.7" y="1923.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.7" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.57%)</title><rect x="288.7" y="1907.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="291.7" y="1918.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.57%)</title><rect x="288.7" y="1891.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.57%)</title><rect x="288.7" y="1875.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="291.7" y="1886.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="290.6" y="1859.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="293.6" y="1870.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="290.6" y="1843.0" width="4.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="293.6" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (38 samples, 3.08%)</title><rect x="295.4" y="1923.0" width="36.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="298.4" y="1934.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.08%)</title><rect x="307.9" y="1907.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.9" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.08%)</title><rect x="308.8" y="1907.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.8" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="308.8" y="1891.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.8" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1025082019.get$Lambda (1 samples, 0.08%)</title><rect x="308.8" y="1875.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.8" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="308.8" y="1859.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="311.8" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="308.8" y="1843.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="311.8" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="308.8" y="1827.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="311.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.87%)</title><rect x="309.8" y="1907.0" width="22.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.8" y="1918.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (23 samples, 1.87%)</title><rect x="309.8" y="1891.0" width="22.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.8" y="1902.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 1.87%)</title><rect x="309.8" y="1875.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="312.8" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.16%)</title><rect x="309.8" y="1859.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.16%)</title><rect x="309.8" y="1843.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.8" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.16%)</title><rect x="309.8" y="1827.0" width="1.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1025082019.accept (1 samples, 0.08%)</title><rect x="310.7" y="1811.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 1.70%)</title><rect x="311.7" y="1859.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1025082019.accept (21 samples, 1.70%)</title><rect x="311.7" y="1843.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.7" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (21 samples, 1.70%)</title><rect x="311.7" y="1827.0" width="20.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.7" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (21 samples, 1.70%)</title><rect x="311.7" y="1811.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.7" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (21 samples, 1.70%)</title><rect x="311.7" y="1795.0" width="20.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="314.7" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (21 samples, 1.70%)</title><rect x="311.7" y="1779.0" width="20.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.7" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.65%)</title><rect x="311.7" y="1763.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.7" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (8 samples, 0.65%)</title><rect x="311.7" y="1747.0" width="7.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="314.7" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/92820485.accept (3 samples, 0.24%)</title><rect x="316.5" y="1731.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.5" y="1742.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.06%)</title><rect x="319.4" y="1763.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.4" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (162 samples, 13.15%)</title><rect x="331.8" y="1923.0" width="155.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="334.8" y="1934.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (162 samples, 13.15%)</title><rect x="331.8" y="1907.0" width="155.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.8" y="1918.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (162 samples, 13.15%)</title><rect x="331.8" y="1891.0" width="155.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.8" y="1902.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 13.15%)</title><rect x="331.8" y="1875.0" width="155.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.8" y="1886.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (162 samples, 13.15%)</title><rect x="331.8" y="1859.0" width="155.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.8" y="1870.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (162 samples, 13.15%)</title><rect x="331.8" y="1843.0" width="155.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="334.8" y="1854.0">com/fasterxml/jackso..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (53 samples, 4.30%)</title><rect x="331.8" y="1827.0" width="50.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.8" y="1838.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (28 samples, 2.27%)</title><rect x="331.8" y="1811.0" width="26.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="334.8" y="1822.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="331.8" y="1795.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="334.8" y="1806.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="331.8" y="1779.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="334.8" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="331.8" y="1763.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="334.8" y="1774.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="332.8" y="1795.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="335.8" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="332.8" y="1779.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="335.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (24 samples, 1.95%)</title><rect x="333.7" y="1795.0" width="23.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.7" y="1806.0">c..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="344.3" y="1779.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="347.3" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.73%)</title><rect x="345.2" y="1779.0" width="8.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="348.2" y="1790.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.73%)</title><rect x="345.2" y="1763.0" width="8.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="348.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="353.8" y="1779.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="356.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.16%)</title><rect x="354.8" y="1779.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.8" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.16%)</title><rect x="354.8" y="1763.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="357.8" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.16%)</title><rect x="354.8" y="1747.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.8" y="1758.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.16%)</title><rect x="354.8" y="1731.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="357.8" y="1742.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.16%)</title><rect x="354.8" y="1715.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="357.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="356.7" y="1795.0" width="1.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.7" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="356.7" y="1779.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="359.7" y="1790.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="357.7" y="1779.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="360.7" y="1790.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="357.7" y="1763.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="360.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (25 samples, 2.03%)</title><rect x="358.6" y="1811.0" width="24.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="361.6" y="1822.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (6 samples, 0.49%)</title><rect x="358.6" y="1795.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="361.6" y="1806.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.16%)</title><rect x="362.5" y="1779.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.5" y="1790.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="363.4" y="1763.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="366.4" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (19 samples, 1.54%)</title><rect x="364.4" y="1795.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.4" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="369.2" y="1779.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="372.2" y="1790.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="369.2" y="1763.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="372.2" y="1774.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="369.2" y="1747.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="372.2" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="369.2" y="1731.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="372.2" y="1742.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="369.2" y="1715.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="372.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="370.1" y="1779.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.16%)</title><rect x="371.1" y="1779.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="374.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.16%)</title><rect x="371.1" y="1763.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="374.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 0.41%)</title><rect x="373.0" y="1779.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="376.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 0.41%)</title><rect x="373.0" y="1763.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="376.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.08%)</title><rect x="373.0" y="1747.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="376.0" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="373.0" y="1731.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="376.0" y="1742.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="373.0" y="1715.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="376.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (4 samples, 0.32%)</title><rect x="374.0" y="1747.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (5 samples, 0.41%)</title><rect x="377.8" y="1779.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.8" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="381.6" y="1763.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.6" y="1774.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="381.6" y="1747.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="384.6" y="1758.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="381.6" y="1731.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.6" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="381.6" y="1715.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="384.6" y="1726.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="381.6" y="1699.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="384.6" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="381.6" y="1683.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="384.6" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="381.6" y="1667.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="384.6" y="1678.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="381.6" y="1651.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="384.6" y="1662.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="381.6" y="1635.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="384.6" y="1646.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="381.6" y="1619.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="384.6" y="1630.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="381.6" y="1603.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="384.6" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (98 samples, 7.95%)</title><rect x="382.6" y="1827.0" width="93.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.6" y="1838.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.41%)</title><rect x="382.6" y="1811.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.41%)</title><rect x="382.6" y="1795.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="385.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (5 samples, 0.41%)</title><rect x="382.6" y="1779.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.32%)</title><rect x="383.5" y="1763.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.41%)</title><rect x="387.4" y="1811.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="387.4" y="1795.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.4" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.16%)</title><rect x="390.2" y="1779.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.14%)</title><rect x="392.2" y="1811.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 0.97%)</title><rect x="393.1" y="1795.0" width="11.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.1" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.16%)</title><rect x="393.1" y="1779.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (7 samples, 0.57%)</title><rect x="395.0" y="1779.0" width="6.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="398.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.32%)</title><rect x="397.9" y="1763.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="400.9" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.24%)</title><rect x="401.7" y="1779.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.7" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (3 samples, 0.24%)</title><rect x="401.7" y="1763.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="404.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.24%)</title><rect x="401.7" y="1747.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="404.7" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="404.6" y="1795.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="407.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.32%)</title><rect x="405.6" y="1811.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.32%)</title><rect x="405.6" y="1795.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="408.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="407.5" y="1779.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="410.5" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="407.5" y="1763.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="410.5" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.16%)</title><rect x="407.5" y="1747.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="410.5" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (70 samples, 5.68%)</title><rect x="409.4" y="1811.0" width="67.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.4" y="1822.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (70 samples, 5.68%)</title><rect x="409.4" y="1795.0" width="67.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="412.4" y="1806.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (2 samples, 0.16%)</title><rect x="411.3" y="1779.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="414.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.06%)</title><rect x="413.2" y="1779.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.2" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.08%)</title><rect x="413.2" y="1763.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="416.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.32%)</title><rect x="414.2" y="1763.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.2" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.32%)</title><rect x="414.2" y="1747.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.2" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.32%)</title><rect x="414.2" y="1731.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.2" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.32%)</title><rect x="414.2" y="1715.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="417.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.49%)</title><rect x="418.0" y="1763.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="421.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.32%)</title><rect x="418.0" y="1747.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="421.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.16%)</title><rect x="419.9" y="1731.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.16%)</title><rect x="421.9" y="1747.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.9" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.16%)</title><rect x="421.9" y="1731.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="424.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.08%)</title><rect x="422.8" y="1715.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.08%)</title><rect x="422.8" y="1699.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="425.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="423.8" y="1763.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="426.8" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="423.8" y="1747.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="426.8" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (53 samples, 4.30%)</title><rect x="425.7" y="1779.0" width="50.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="428.7" y="1790.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="425.7" y="1763.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="428.7" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.22%)</title><rect x="426.6" y="1763.0" width="49.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="429.6" y="1774.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.22%)</title><rect x="426.6" y="1747.0" width="49.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.6" y="1758.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.06%)</title><rect x="430.5" y="1731.0" width="12.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="433.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (3 samples, 0.24%)</title><rect x="432.4" y="1715.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="435.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.32%)</title><rect x="435.3" y="1715.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="438.3" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.32%)</title><rect x="435.3" y="1699.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.3" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.32%)</title><rect x="435.3" y="1683.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="438.3" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.16%)</title><rect x="435.3" y="1667.0" width="1.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.3" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.16%)</title><rect x="437.2" y="1667.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="440.2" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.08%)</title><rect x="439.1" y="1715.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="442.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.08%)</title><rect x="439.1" y="1699.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="442.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.16%)</title><rect x="440.0" y="1715.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="443.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.16%)</title><rect x="440.0" y="1699.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="443.0" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.08%)</title><rect x="442.0" y="1715.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="445.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (11 samples, 0.89%)</title><rect x="442.9" y="1731.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (8 samples, 0.65%)</title><rect x="445.8" y="1715.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.65%)</title><rect x="445.8" y="1699.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.8" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (8 samples, 0.65%)</title><rect x="445.8" y="1683.0" width="7.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="448.8" y="1694.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (8 samples, 0.65%)</title><rect x="445.8" y="1667.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.8" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="453.5" y="1731.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="456.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (13 samples, 1.06%)</title><rect x="454.4" y="1731.0" width="12.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="457.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (13 samples, 1.06%)</title><rect x="454.4" y="1715.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.4" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (13 samples, 1.06%)</title><rect x="454.4" y="1699.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="457.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (13 samples, 1.06%)</title><rect x="454.4" y="1683.0" width="12.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="457.4" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (13 samples, 1.06%)</title><rect x="454.4" y="1667.0" width="12.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.4" y="1678.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (9 samples, 0.73%)</title><rect x="456.3" y="1651.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.3" y="1662.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (4 samples, 0.32%)</title><rect x="461.1" y="1635.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="464.1" y="1646.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.16%)</title><rect x="465.0" y="1651.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.0" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (4 samples, 0.32%)</title><rect x="466.9" y="1731.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.9" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.32%)</title><rect x="466.9" y="1715.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.9" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.32%)</title><rect x="466.9" y="1699.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="469.9" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (6 samples, 0.49%)</title><rect x="470.7" y="1731.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.7" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.08%)</title><rect x="475.5" y="1715.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="478.5" y="1726.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="475.5" y="1699.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="478.5" y="1710.0"></text>
</g>
<g>
<title>InstanceKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.08%)</title><rect x="475.5" y="1683.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="478.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.89%)</title><rect x="476.4" y="1827.0" width="10.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.4" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.89%)</title><rect x="476.4" y="1811.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="479.4" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.89%)</title><rect x="476.4" y="1795.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="479.4" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.08%)</title><rect x="476.4" y="1779.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.24%)</title><rect x="477.4" y="1779.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.4" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (2 samples, 0.16%)</title><rect x="480.3" y="1779.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="483.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.41%)</title><rect x="482.2" y="1779.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="485.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.41%)</title><rect x="482.2" y="1763.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (289 samples, 23.46%)</title><rect x="487.0" y="1923.0" width="276.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="490.0" y="1934.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.41%)</title><rect x="500.4" y="1907.0" width="4.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="503.4" y="1918.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="500.4" y="1891.0" width="4.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="503.4" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (60 samples, 4.87%)</title><rect x="505.2" y="1907.0" width="57.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="508.2" y="1918.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (59 samples, 4.79%)</title><rect x="506.1" y="1891.0" width="56.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="509.1" y="1902.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (56 samples, 4.55%)</title><rect x="509.0" y="1875.0" width="53.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.0" y="1886.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.41%)</title><rect x="509.0" y="1859.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="512.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.41%)</title><rect x="509.0" y="1843.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="512.0" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.41%)</title><rect x="509.0" y="1827.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.41%)</title><rect x="509.0" y="1811.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="512.0" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.49%)</title><rect x="513.8" y="1859.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="516.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (6 samples, 0.49%)</title><rect x="513.8" y="1843.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="516.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.49%)</title><rect x="513.8" y="1827.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="516.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (6 samples, 0.49%)</title><rect x="513.8" y="1811.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="516.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.41%)</title><rect x="514.8" y="1795.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="517.8" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (45 samples, 3.65%)</title><rect x="519.5" y="1859.0" width="43.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="522.5" y="1870.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 0.97%)</title><rect x="551.2" y="1843.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="554.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.16%)</title><rect x="552.1" y="1827.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="555.1" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.16%)</title><rect x="554.0" y="1827.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="557.0" y="1838.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.08%)</title><rect x="555.0" y="1811.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.0" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.41%)</title><rect x="555.9" y="1827.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="558.9" y="1838.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="560.7" y="1827.0" width="1.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="563.7" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="562.6" y="1907.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="565.6" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="562.6" y="1891.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="565.6" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (133 samples, 10.80%)</title><rect x="564.6" y="1907.0" width="127.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="567.6" y="1918.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (121 samples, 9.82%)</title><rect x="564.6" y="1891.0" width="115.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.6" y="1902.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (35 samples, 2.84%)</title><rect x="573.2" y="1875.0" width="33.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="576.2" y="1886.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (35 samples, 2.84%)</title><rect x="573.2" y="1859.0" width="33.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="576.2" y="1870.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 1.62%)</title><rect x="582.8" y="1843.0" width="19.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="585.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (13 samples, 1.06%)</title><rect x="584.7" y="1827.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.7" y="1838.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (13 samples, 1.06%)</title><rect x="584.7" y="1811.0" width="12.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.7" y="1822.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 1.06%)</title><rect x="584.7" y="1795.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="587.7" y="1806.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (13 samples, 1.06%)</title><rect x="584.7" y="1779.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="587.7" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (8 samples, 0.65%)</title><rect x="584.7" y="1763.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="587.7" y="1774.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (5 samples, 0.41%)</title><rect x="584.7" y="1747.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="587.7" y="1758.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (5 samples, 0.41%)</title><rect x="584.7" y="1731.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="587.7" y="1742.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.08%)</title><rect x="589.5" y="1747.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="592.5" y="1758.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.16%)</title><rect x="590.4" y="1747.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.4" y="1758.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.16%)</title><rect x="590.4" y="1731.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="593.4" y="1742.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.08%)</title><rect x="590.4" y="1715.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="593.4" y="1726.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="591.4" y="1715.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="594.4" y="1726.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.41%)</title><rect x="592.3" y="1763.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="595.3" y="1774.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="593.3" y="1747.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="596.3" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.24%)</title><rect x="594.3" y="1747.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="597.3" y="1758.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.08%)</title><rect x="594.3" y="1731.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="597.3" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="595.2" y="1731.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="598.2" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="595.2" y="1715.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="598.2" y="1726.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="595.2" y="1699.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="598.2" y="1710.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="595.2" y="1683.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="598.2" y="1694.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="595.2" y="1667.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="598.2" y="1678.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="595.2" y="1651.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.2" y="1662.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="595.2" y="1635.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="598.2" y="1646.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="596.2" y="1731.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="599.2" y="1742.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.08%)</title><rect x="596.2" y="1715.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="599.2" y="1726.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.32%)</title><rect x="597.1" y="1827.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="600.1" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.08%)</title><rect x="601.0" y="1827.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="604.0" y="1838.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.41%)</title><rect x="601.9" y="1843.0" width="4.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="604.9" y="1854.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (9 samples, 0.73%)</title><rect x="606.7" y="1875.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.7" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (8 samples, 0.65%)</title><rect x="606.7" y="1859.0" width="7.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.7" y="1870.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (8 samples, 0.65%)</title><rect x="606.7" y="1843.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.7" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="613.4" y="1827.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="616.4" y="1838.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.08%)</title><rect x="614.4" y="1859.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.4" y="1870.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.08%)</title><rect x="614.4" y="1843.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="617.4" y="1854.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.16%)</title><rect x="615.3" y="1875.0" width="1.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="618.3" y="1886.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.08%)</title><rect x="617.2" y="1875.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="620.2" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (65 samples, 5.28%)</title><rect x="618.2" y="1875.0" width="62.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="621.2" y="1886.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (65 samples, 5.28%)</title><rect x="618.2" y="1859.0" width="62.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.2" y="1870.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.32%)</title><rect x="618.2" y="1843.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="621.2" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.32%)</title><rect x="618.2" y="1827.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="621.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.32%)</title><rect x="618.2" y="1811.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.32%)</title><rect x="618.2" y="1795.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.2" y="1806.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (61 samples, 4.95%)</title><rect x="622.0" y="1843.0" width="58.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="625.0" y="1854.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (55 samples, 4.46%)</title><rect x="627.8" y="1827.0" width="52.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="630.8" y="1838.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (28 samples, 2.27%)</title><rect x="653.6" y="1811.0" width="26.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.6" y="1822.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.32%)</title><rect x="664.2" y="1795.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 0.89%)</title><rect x="668.0" y="1795.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="671.0" y="1806.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.16%)</title><rect x="678.5" y="1795.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="681.5" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 0.97%)</title><rect x="680.5" y="1891.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="683.5" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 0.97%)</title><rect x="680.5" y="1875.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.5" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.97%)</title><rect x="680.5" y="1859.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="683.5" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (12 samples, 0.97%)</title><rect x="680.5" y="1843.0" width="11.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="683.5" y="1854.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.24%)</title><rect x="683.3" y="1827.0" width="2.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="686.3" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (3 samples, 0.24%)</title><rect x="683.3" y="1811.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="686.3" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.49%)</title><rect x="686.2" y="1827.0" width="5.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="689.2" y="1838.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="687.2" y="1811.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="690.2" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (63 samples, 5.11%)</title><rect x="691.9" y="1907.0" width="60.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="694.9" y="1918.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 5.03%)</title><rect x="692.9" y="1891.0" width="59.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="695.9" y="1902.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1678716486.process (21 samples, 1.70%)</title><rect x="695.8" y="1875.0" width="20.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="698.8" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (20 samples, 1.62%)</title><rect x="696.7" y="1859.0" width="19.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 1.62%)</title><rect x="696.7" y="1843.0" width="19.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="699.7" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="703.4" y="1827.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="706.4" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="703.4" y="1811.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="706.4" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="703.4" y="1795.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="706.4" y="1806.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="703.4" y="1779.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="706.4" y="1790.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="703.4" y="1763.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="706.4" y="1774.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="704.4" y="1827.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="707.4" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.24%)</title><rect x="704.4" y="1811.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="707.4" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 0.24%)</title><rect x="704.4" y="1795.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="707.4" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (3 samples, 0.24%)</title><rect x="704.4" y="1779.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="707.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (3 samples, 0.24%)</title><rect x="704.4" y="1763.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="707.4" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.08%)</title><rect x="706.3" y="1747.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.3" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.57%)</title><rect x="707.3" y="1827.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="710.3" y="1838.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.32%)</title><rect x="710.1" y="1811.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="713.1" y="1822.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.32%)</title><rect x="710.1" y="1795.0" width="3.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="713.1" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.08%)</title><rect x="714.0" y="1827.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="717.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="714.9" y="1827.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="717.9" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.08%)</title><rect x="715.9" y="1875.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="718.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.08%)</title><rect x="715.9" y="1859.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="718.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (10 samples, 0.81%)</title><rect x="716.9" y="1875.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.9" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (7 samples, 0.57%)</title><rect x="718.8" y="1859.0" width="6.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="721.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.08%)</title><rect x="725.5" y="1859.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="728.5" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="725.5" y="1843.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="728.5" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="725.5" y="1827.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="728.5" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="725.5" y="1811.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="728.5" y="1822.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.16%)</title><rect x="726.4" y="1875.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="729.4" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.16%)</title><rect x="726.4" y="1859.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="729.4" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (2 samples, 0.16%)</title><rect x="728.3" y="1875.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="731.3" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1111739664.get (2 samples, 0.16%)</title><rect x="728.3" y="1859.0" width="2.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (2 samples, 0.16%)</title><rect x="728.3" y="1843.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.3" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (3 samples, 0.24%)</title><rect x="730.3" y="1875.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="733.3" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.73%)</title><rect x="733.1" y="1875.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="736.1" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.41%)</title><rect x="737.0" y="1859.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.16%)</title><rect x="737.0" y="1843.0" width="1.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="740.0" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (3 samples, 0.24%)</title><rect x="738.9" y="1843.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.9" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="741.8" y="1875.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="741.8" y="1859.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.8" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="742.7" y="1875.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="745.7" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.16%)</title><rect x="742.7" y="1859.0" width="1.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="745.7" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.65%)</title><rect x="744.6" y="1875.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.6" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.57%)</title><rect x="745.6" y="1859.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.6" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.57%)</title><rect x="745.6" y="1843.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="748.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.49%)</title><rect x="745.6" y="1827.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="748.6" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.41%)</title><rect x="745.6" y="1811.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="748.6" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.41%)</title><rect x="745.6" y="1795.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="748.6" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$294/639496085.accept (4 samples, 0.32%)</title><rect x="745.6" y="1779.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="748.6" y="1790.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="749.4" y="1779.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="752.4" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="750.4" y="1811.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="753.4" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="751.3" y="1827.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="754.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.41%)</title><rect x="752.3" y="1907.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="755.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.41%)</title><rect x="752.3" y="1891.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="755.3" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.41%)</title><rect x="752.3" y="1875.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="755.3" y="1886.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="752.3" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.3" y="1870.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="752.3" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="755.3" y="1854.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="752.3" y="1827.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="755.3" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="752.3" y="1811.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="755.3" y="1822.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="752.3" y="1795.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.3" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.32%)</title><rect x="753.2" y="1859.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="756.2" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/757123514.accept (4 samples, 0.32%)</title><rect x="753.2" y="1843.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="756.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (4 samples, 0.32%)</title><rect x="753.2" y="1827.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="756.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.32%)</title><rect x="753.2" y="1811.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="756.2" y="1822.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.32%)</title><rect x="753.2" y="1795.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.2" y="1806.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.32%)</title><rect x="753.2" y="1779.0" width="3.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.2" y="1790.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.24%)</title><rect x="754.2" y="1763.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="757.2" y="1774.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.16%)</title><rect x="755.2" y="1747.0" width="1.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="758.2" y="1758.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.57%)</title><rect x="757.1" y="1907.0" width="6.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="760.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="763.8" y="1923.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="766.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="763.8" y="1907.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.8" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.08%)</title><rect x="763.8" y="1891.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="766.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="763.8" y="1875.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.8" y="1886.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="763.8" y="1859.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="766.8" y="1870.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.08%)</title><rect x="763.8" y="1843.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="766.8" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="763.8" y="1827.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="766.8" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="763.8" y="1811.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.8" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="763.8" y="1795.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="766.8" y="1806.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="763.8" y="1779.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="766.8" y="1790.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.41%)</title><rect x="764.7" y="1923.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.7" y="1934.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.41%)</title><rect x="764.7" y="1907.0" width="4.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="767.7" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.24%)</title><rect x="769.5" y="1987.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="772.5" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.24%)</title><rect x="769.5" y="1971.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="772.5" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.24%)</title><rect x="769.5" y="1955.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="772.5" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.24%)</title><rect x="769.5" y="1939.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="772.5" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (226 samples, 18.34%)</title><rect x="772.4" y="1987.0" width="216.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.4" y="1998.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (223 samples, 18.10%)</title><rect x="775.3" y="1971.0" width="213.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.3" y="1982.0">java/util/concurrent/LinkedB..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (212 samples, 17.21%)</title><rect x="775.3" y="1955.0" width="203.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="778.3" y="1966.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (9 samples, 0.73%)</title><rect x="790.6" y="1939.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="793.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.81%)</title><rect x="799.2" y="1939.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="802.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.81%)</title><rect x="799.2" y="1923.0" width="9.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="802.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.81%)</title><rect x="799.2" y="1907.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="802.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.81%)</title><rect x="799.2" y="1891.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="802.2" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 14.37%)</title><rect x="808.8" y="1939.0" width="169.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="811.8" y="1950.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (177 samples, 14.37%)</title><rect x="808.8" y="1923.0" width="169.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.8" y="1934.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (2 samples, 0.16%)</title><rect x="814.5" y="1907.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="817.5" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="816.5" y="1907.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="819.5" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (164 samples, 13.31%)</title><rect x="818.4" y="1907.0" width="157.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="821.4" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.08%)</title><rect x="821.2" y="1891.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="824.2" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.08%)</title><rect x="822.2" y="1891.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="825.2" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 1.70%)</title><rect x="823.2" y="1891.0" width="20.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="826.2" y="1902.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.57%)</title><rect x="829.9" y="1875.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.9" y="1886.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.16%)</title><rect x="832.7" y="1859.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="835.7" y="1870.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.08%)</title><rect x="833.7" y="1843.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="836.7" y="1854.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="834.7" y="1859.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="837.7" y="1870.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="835.6" y="1859.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="838.6" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="836.6" y="1875.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="839.6" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.41%)</title><rect x="837.5" y="1875.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="840.5" y="1886.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="842.3" y="1875.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="845.3" y="1886.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="843.3" y="1891.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="846.3" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.16%)</title><rect x="844.2" y="1891.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="847.2" y="1902.0"></text>
</g>
<g>
<title>_L_cond_lock_847 (1 samples, 0.08%)</title><rect x="846.2" y="1891.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="849.2" y="1902.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.49%)</title><rect x="847.1" y="1891.0" width="5.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="850.1" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (49 samples, 3.98%)</title><rect x="852.9" y="1891.0" width="46.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="855.9" y="1902.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 4.22%)</title><rect x="899.8" y="1891.0" width="49.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="902.8" y="1902.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.57%)</title><rect x="949.6" y="1891.0" width="6.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="952.6" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.24%)</title><rect x="956.3" y="1891.0" width="2.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="959.3" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.16%)</title><rect x="959.2" y="1891.0" width="1.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="962.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.41%)</title><rect x="961.1" y="1891.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="964.1" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.16%)</title><rect x="965.9" y="1891.0" width="1.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="968.9" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.41%)</title><rect x="967.8" y="1891.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="970.8" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.16%)</title><rect x="972.6" y="1891.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.6" y="1902.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.08%)</title><rect x="974.5" y="1891.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="977.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.24%)</title><rect x="975.5" y="1907.0" width="2.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="978.5" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.16%)</title><rect x="978.3" y="1955.0" width="1.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="981.3" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 0.73%)</title><rect x="980.2" y="1955.0" width="8.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.2" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.73%)</title><rect x="980.2" y="1939.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="983.2" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.73%)</title><rect x="980.2" y="1923.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="983.2" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.73%)</title><rect x="980.2" y="1907.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="983.2" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.08%)</title><rect x="988.9" y="2035.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.9" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="988.9" y="2019.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="991.9" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="988.9" y="2003.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="991.9" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="988.9" y="1987.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.9" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="988.9" y="1971.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="991.9" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="988.9" y="1955.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="991.9" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="988.9" y="1939.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.9" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="988.9" y="1923.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="991.9" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="988.9" y="1907.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="991.9" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.08%)</title><rect x="988.9" y="1891.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="991.9" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.&lt;init&gt; (1 samples, 0.08%)</title><rect x="988.9" y="1875.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="991.9" y="1886.0"></text>
</g>
<g>
<title>start_thread (209 samples, 16.96%)</title><rect x="989.8" y="2035.0" width="200.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="992.8" y="2046.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (209 samples, 16.96%)</title><rect x="989.8" y="2019.0" width="200.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="992.8" y="2030.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (17 samples, 1.38%)</title><rect x="989.8" y="2003.0" width="16.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.8" y="2014.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.16%)</title><rect x="989.8" y="1987.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.8" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.16%)</title><rect x="989.8" y="1971.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.8" y="1982.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.16%)</title><rect x="989.8" y="1955.0" width="1.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="992.8" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.22%)</title><rect x="991.7" y="1987.0" width="14.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="994.7" y="1998.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.24%)</title><rect x="991.7" y="1971.0" width="2.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="994.7" y="1982.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.16%)</title><rect x="991.7" y="1955.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="994.7" y="1966.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.08%)</title><rect x="993.7" y="1955.0" width="0.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="996.7" y="1966.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.57%)</title><rect x="994.6" y="1971.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.6" y="1982.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.24%)</title><rect x="994.6" y="1955.0" width="2.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.6" y="1966.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.16%)</title><rect x="994.6" y="1939.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="997.6" y="1950.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.08%)</title><rect x="995.6" y="1923.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="998.6" y="1934.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.08%)</title><rect x="995.6" y="1907.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="998.6" y="1918.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="996.5" y="1939.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="999.5" y="1950.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.08%)</title><rect x="996.5" y="1923.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="999.5" y="1934.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.08%)</title><rect x="996.5" y="1907.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="999.5" y="1918.0"></text>
</g>
<g>
<title>RelocIterator::advance_over_prefix() (1 samples, 0.08%)</title><rect x="996.5" y="1891.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="999.5" y="1902.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.32%)</title><rect x="997.5" y="1955.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1000.5" y="1966.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (4 samples, 0.32%)</title><rect x="997.5" y="1939.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.5" y="1950.0"></text>
</g>
<g>
<title>BufferingOopClosure::do_oop(oopDesc**) (1 samples, 0.08%)</title><rect x="1000.4" y="1923.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1003.4" y="1934.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="1001.3" y="1971.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1004.3" y="1982.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (5 samples, 0.41%)</title><rect x="1001.3" y="1955.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.3" y="1966.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (5 samples, 0.41%)</title><rect x="1001.3" y="1939.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.3" y="1950.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (5 samples, 0.41%)</title><rect x="1001.3" y="1923.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1004.3" y="1934.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 0.41%)</title><rect x="1001.3" y="1907.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1004.3" y="1918.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.41%)</title><rect x="1001.3" y="1891.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1004.3" y="1902.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.08%)</title><rect x="1005.1" y="1875.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1008.1" y="1886.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.08%)</title><rect x="1005.1" y="1859.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.1" y="1870.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.08%)</title><rect x="1005.1" y="1843.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1008.1" y="1854.0"></text>
</g>
<g>
<title>JavaThread::run() (190 samples, 15.42%)</title><rect x="1006.1" y="2003.0" width="182.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.1" y="2014.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (190 samples, 15.42%)</title><rect x="1006.1" y="1987.0" width="182.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.1" y="1998.0">JavaThread::thread_main..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (190 samples, 15.42%)</title><rect x="1006.1" y="1971.0" width="182.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1009.1" y="1982.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (188 samples, 15.26%)</title><rect x="1006.1" y="1955.0" width="180.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1009.1" y="1966.0">CompileBroker::invoke_c..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (188 samples, 15.26%)</title><rect x="1006.1" y="1939.0" width="180.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.1" y="1950.0">C2Compiler::compile_met..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (188 samples, 15.26%)</title><rect x="1006.1" y="1923.0" width="180.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1009.1" y="1934.0">Compile::Compile(ciEnv*..</text>
</g>
<g>
<title>Compile::Code_Gen() (54 samples, 4.38%)</title><rect x="1006.1" y="1907.0" width="51.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.1" y="1918.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (4 samples, 0.32%)</title><rect x="1006.1" y="1891.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1009.1" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1006.1" y="1875.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1009.1" y="1886.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.08%)</title><rect x="1006.1" y="1859.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1009.1" y="1870.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (3 samples, 0.24%)</title><rect x="1007.1" y="1875.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.1" y="1886.0"></text>
</g>
<g>
<title>Block::code_alignment() (1 samples, 0.08%)</title><rect x="1007.1" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1010.1" y="1870.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.08%)</title><rect x="1008.0" y="1859.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1011.0" y="1870.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="1008.0" y="1843.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.0" y="1854.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="1008.0" y="1827.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1011.0" y="1838.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="1008.0" y="1811.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1011.0" y="1822.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.08%)</title><rect x="1009.0" y="1859.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.0" y="1870.0"></text>
</g>
<g>
<title>storeLConditionalNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.08%)</title><rect x="1009.0" y="1843.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1012.0" y="1854.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.16%)</title><rect x="1009.9" y="1891.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1012.9" y="1902.0"></text>
</g>
<g>
<title>JVMState::same_calls_as(JVMState const*) const (1 samples, 0.08%)</title><rect x="1010.9" y="1875.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1013.9" y="1886.0"></text>
</g>
<g>
<title>Matcher::match() (11 samples, 0.89%)</title><rect x="1011.9" y="1891.0" width="10.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.9" y="1902.0"></text>
</g>
<g>
<title>LoadINode::Opcode() const (1 samples, 0.08%)</title><rect x="1011.9" y="1875.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1014.9" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (10 samples, 0.81%)</title><rect x="1012.8" y="1875.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.8" y="1886.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (6 samples, 0.49%)</title><rect x="1014.7" y="1859.0" width="5.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.7" y="1870.0"></text>
</g>
<g>
<title>BoolNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1014.7" y="1843.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.7" y="1854.0"></text>
</g>
<g>
<title>LoadNode::match_edge(unsigned int) const (1 samples, 0.08%)</title><rect x="1015.7" y="1843.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1018.7" y="1854.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1016.6" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1019.6" y="1854.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (3 samples, 0.24%)</title><rect x="1017.6" y="1843.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.6" y="1854.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int, Compile*) (2 samples, 0.16%)</title><rect x="1018.6" y="1827.0" width="1.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1021.6" y="1838.0"></text>
</g>
<g>
<title>MachIfNode::MachIfNode() (1 samples, 0.08%)</title><rect x="1018.6" y="1811.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1021.6" y="1822.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1018.6" y="1795.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1021.6" y="1806.0"></text>
</g>
<g>
<title>Node::operator new(unsigned long, Compile*) (1 samples, 0.08%)</title><rect x="1019.5" y="1811.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1022.5" y="1822.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.08%)</title><rect x="1020.5" y="1859.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1023.5" y="1870.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.08%)</title><rect x="1021.4" y="1859.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="1870.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.08%)</title><rect x="1021.4" y="1843.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1024.4" y="1854.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.32%)</title><rect x="1022.4" y="1891.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.4" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.08%)</title><rect x="1022.4" y="1875.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.4" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.08%)</title><rect x="1023.3" y="1875.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.3" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.08%)</title><rect x="1023.3" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.16%)</title><rect x="1024.3" y="1875.0" width="1.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.3" y="1886.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.08%)</title><rect x="1024.3" y="1859.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1027.3" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1025.3" y="1859.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1028.3" y="1870.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.08%)</title><rect x="1025.3" y="1843.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 2.68%)</title><rect x="1026.2" y="1891.0" width="31.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1029.2" y="1902.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.08%)</title><rect x="1026.2" y="1875.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1029.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.08%)</title><rect x="1026.2" y="1859.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1029.2" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1026.2" y="1843.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1029.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.32%)</title><rect x="1027.2" y="1875.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1030.2" y="1886.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1030.0" y="1859.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1033.0" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.65%)</title><rect x="1031.0" y="1875.0" width="7.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.0" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.08%)</title><rect x="1035.8" y="1859.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.8" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1036.8" y="1859.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1039.8" y="1870.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.08%)</title><rect x="1037.7" y="1859.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.08%)</title><rect x="1038.7" y="1875.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1041.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.08%)</title><rect x="1038.7" y="1859.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1041.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.08%)</title><rect x="1039.6" y="1875.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1042.6" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.32%)</title><rect x="1040.6" y="1875.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1043.6" y="1886.0"></text>
</g>
<g>
<title>loadConINode::bottom_type() const (1 samples, 0.08%)</title><rect x="1043.5" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.5" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.08%)</title><rect x="1044.4" y="1875.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1047.4" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1044.4" y="1859.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1047.4" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.16%)</title><rect x="1045.4" y="1875.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.4" y="1886.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.16%)</title><rect x="1045.4" y="1859.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.4" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.16%)</title><rect x="1045.4" y="1843.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1048.4" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.16%)</title><rect x="1045.4" y="1827.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1048.4" y="1838.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.16%)</title><rect x="1047.3" y="1875.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1050.3" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1048.2" y="1859.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.16%)</title><rect x="1049.2" y="1875.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1052.2" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1050.2" y="1859.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1053.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.08%)</title><rect x="1051.1" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1054.1" y="1886.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1051.1" y="1859.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.1" y="1870.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.49%)</title><rect x="1052.1" y="1875.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.1" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.24%)</title><rect x="1055.0" y="1859.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.0" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.08%)</title><rect x="1055.0" y="1843.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1058.0" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.16%)</title><rect x="1055.9" y="1843.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1058.9" y="1854.0"></text>
</g>
<g>
<title>Compile::Optimize() (126 samples, 10.23%)</title><rect x="1057.8" y="1907.0" width="120.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.8" y="1918.0">Compile::Optimi..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (4 samples, 0.32%)</title><rect x="1057.8" y="1891.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.8" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (4 samples, 0.32%)</title><rect x="1057.8" y="1875.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.8" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1057.8" y="1859.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.08%)</title><rect x="1057.8" y="1843.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1060.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (3 samples, 0.24%)</title><rect x="1058.8" y="1859.0" width="2.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.8" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.16%)</title><rect x="1058.8" y="1843.0" width="1.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.8" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1827.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.8" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1811.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.8" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1795.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.8" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1779.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.8" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1763.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.8" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1747.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.8" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1731.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1061.8" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1715.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.8" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1699.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.8" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1683.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.8" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1667.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.8" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1651.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.8" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1635.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.8" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1619.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.8" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1603.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.8" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1587.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.8" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1571.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.8" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1555.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.8" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1539.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1523.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1507.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.8" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1491.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.8" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1475.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.8" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1459.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1443.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1427.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1411.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1395.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1379.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1363.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1347.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1331.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1315.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1299.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1283.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1267.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1251.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1235.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.8" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1219.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.8" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1203.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.8" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1187.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.8" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1171.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.8" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1155.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.8" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1139.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1061.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1123.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1061.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1107.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1061.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1091.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1075.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1059.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1043.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1027.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="1011.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1061.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1058.8" y="995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.8" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.08%)</title><rect x="1058.8" y="979.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.08%)</title><rect x="1059.7" y="1827.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.7" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.08%)</title><rect x="1059.7" y="1811.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.7" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.08%)</title><rect x="1059.7" y="1795.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1062.7" y="1806.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1060.7" y="1843.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.7" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (107 samples, 8.69%)</title><rect x="1061.7" y="1891.0" width="102.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.7" y="1902.0">PhaseIdealLo..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.08%)</title><rect x="1061.7" y="1875.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1064.7" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.24%)</title><rect x="1062.6" y="1875.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1065.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1065.5" y="1875.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (99 samples, 8.04%)</title><rect x="1066.4" y="1875.0" width="94.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1069.4" y="1886.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (96 samples, 7.79%)</title><rect x="1069.3" y="1859.0" width="92.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.3" y="1870.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (6 samples, 0.49%)</title><rect x="1070.3" y="1843.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.3" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (89 samples, 7.22%)</title><rect x="1076.0" y="1843.0" width="85.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.0" y="1854.0">PhaseIdeal..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.81%)</title><rect x="1151.7" y="1827.0" width="9.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.16%)</title><rect x="1161.3" y="1875.0" width="1.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.3" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1163.2" y="1875.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.2" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1163.2" y="1859.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="1870.0"></text>
</g>
<g>
<title>RootNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1163.2" y="1843.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.2" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.08%)</title><rect x="1164.1" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.1" y="1902.0"></text>
</g>
<g>
<title>AllocateNode::Opcode() const (1 samples, 0.08%)</title><rect x="1164.1" y="1875.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 1.06%)</title><rect x="1165.1" y="1891.0" width="12.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.1" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 1.06%)</title><rect x="1165.1" y="1875.0" width="12.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.1" y="1886.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.1" y="1859.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1166.1" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="1854.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1167.0" y="1859.0" width="1.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.0" y="1870.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.0" y="1843.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.0" y="1854.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.9" y="1859.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.9" y="1870.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1168.9" y="1843.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.08%)</title><rect x="1168.9" y="1827.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.9" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1168.9" y="1811.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.9" y="1822.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.08%)</title><rect x="1168.9" y="1795.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.9" y="1806.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.08%)</title><rect x="1168.9" y="1779.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.9" y="1790.0"></text>
</g>
<g>
<title>ciObjArrayKlass::is_obj_array_klass() const (1 samples, 0.08%)</title><rect x="1168.9" y="1763.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.9" y="1774.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1169.9" y="1859.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.9" y="1870.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.08%)</title><rect x="1169.9" y="1843.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.9" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.08%)</title><rect x="1170.8" y="1859.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="1870.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (2 samples, 0.16%)</title><rect x="1171.8" y="1859.0" width="1.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="1870.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.08%)</title><rect x="1171.8" y="1843.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="1854.0"></text>
</g>
<g>
<title>MultiNode::proj_out(unsigned int) const (1 samples, 0.08%)</title><rect x="1171.8" y="1827.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="1838.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.08%)</title><rect x="1172.8" y="1843.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.8" y="1854.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (2 samples, 0.16%)</title><rect x="1173.7" y="1859.0" width="1.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1175.6" y="1859.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.6" y="1870.0"></text>
</g>
<g>
<title>URShiftLNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1176.6" y="1859.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.6" y="1870.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1176.6" y="1843.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.6" y="1854.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1176.6" y="1827.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.6" y="1838.0"></text>
</g>
<g>
<title>TypeLong::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1176.6" y="1811.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.08%)</title><rect x="1177.5" y="1891.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.5" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.08%)</title><rect x="1177.5" y="1875.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.5" y="1886.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.08%)</title><rect x="1177.5" y="1859.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.5" y="1870.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.65%)</title><rect x="1178.5" y="1907.0" width="7.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.5" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.65%)</title><rect x="1178.5" y="1891.0" width="7.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.5" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.65%)</title><rect x="1178.5" y="1875.0" width="7.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.5" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.65%)</title><rect x="1178.5" y="1859.0" width="7.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.5" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.65%)</title><rect x="1178.5" y="1843.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="1854.0"></text>
</g>
<g>
<title>GraphKit::shared_lock(Node*) (1 samples, 0.08%)</title><rect x="1178.5" y="1827.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="1838.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.08%)</title><rect x="1178.5" y="1811.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.5" y="1822.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.08%)</title><rect x="1178.5" y="1795.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.5" y="1806.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.57%)</title><rect x="1179.5" y="1827.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="1838.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.16%)</title><rect x="1179.5" y="1811.0" width="1.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.5" y="1822.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.16%)</title><rect x="1179.5" y="1795.0" width="1.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="1806.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.16%)</title><rect x="1179.5" y="1779.0" width="1.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="1790.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.16%)</title><rect x="1179.5" y="1763.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.5" y="1774.0"></text>
</g>
<g>
<title>ciType::make(BasicType) (1 samples, 0.08%)</title><rect x="1179.5" y="1747.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.5" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.08%)</title><rect x="1180.4" y="1747.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.4" y="1758.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.4" y="1731.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.4" y="1742.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.08%)</title><rect x="1180.4" y="1715.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.4" y="1726.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.08%)</title><rect x="1180.4" y="1699.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.4" y="1710.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.08%)</title><rect x="1180.4" y="1683.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.4" y="1694.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.08%)</title><rect x="1180.4" y="1667.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.4" y="1678.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="1651.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.4" y="1662.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="1635.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.4" y="1646.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1180.4" y="1619.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.4" y="1630.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.08%)</title><rect x="1180.4" y="1603.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.4" y="1614.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.08%)</title><rect x="1180.4" y="1587.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="1598.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.08%)</title><rect x="1180.4" y="1571.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.4" y="1582.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="1555.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.4" y="1566.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.08%)</title><rect x="1180.4" y="1539.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.4" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1181.4" y="1811.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1181.4" y="1795.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.4" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1181.4" y="1779.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1181.4" y="1763.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1181.4" y="1747.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1181.4" y="1731.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="1742.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1181.4" y="1715.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1181.4" y="1699.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1181.4" y="1683.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.4" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1181.4" y="1667.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.4" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1181.4" y="1651.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1181.4" y="1635.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1181.4" y="1619.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.32%)</title><rect x="1181.4" y="1603.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.32%)</title><rect x="1181.4" y="1587.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.32%)</title><rect x="1181.4" y="1571.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.32%)</title><rect x="1181.4" y="1555.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.32%)</title><rect x="1181.4" y="1539.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.32%)</title><rect x="1181.4" y="1523.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.24%)</title><rect x="1181.4" y="1507.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.4" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.24%)</title><rect x="1181.4" y="1491.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1502.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.24%)</title><rect x="1181.4" y="1475.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.24%)</title><rect x="1181.4" y="1459.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.24%)</title><rect x="1181.4" y="1443.0" width="2.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.24%)</title><rect x="1181.4" y="1427.0" width="2.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.16%)</title><rect x="1181.4" y="1411.0" width="1.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.16%)</title><rect x="1181.4" y="1395.0" width="1.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.4" y="1379.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.4" y="1363.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.4" y="1347.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1182.3" y="1379.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.3" y="1390.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1182.3" y="1363.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="1374.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1182.3" y="1347.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="1358.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1411.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.3" y="1395.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1183.3" y="1379.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.3" y="1390.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1183.3" y="1363.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="1374.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1507.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1491.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.3" y="1502.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1475.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1184.3" y="1459.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1184.3" y="1443.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1184.3" y="1427.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1184.3" y="1411.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1184.3" y="1395.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1184.3" y="1379.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="1390.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.08%)</title><rect x="1184.3" y="1363.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.3" y="1374.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.08%)</title><rect x="1184.3" y="1347.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="1358.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1184.3" y="1331.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="1342.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1184.3" y="1315.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="1326.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.08%)</title><rect x="1184.3" y="1299.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="1310.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1811.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1795.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1779.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1763.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1747.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.2" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1731.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1185.2" y="1715.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1185.2" y="1699.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1185.2" y="1683.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1185.2" y="1667.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1185.2" y="1651.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1185.2" y="1635.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.2" y="1646.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1619.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="1630.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1185.2" y="1603.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="1614.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseTransform*) const (1 samples, 0.08%)</title><rect x="1185.2" y="1587.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="1598.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.16%)</title><rect x="1186.2" y="1955.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.2" y="1966.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1186.2" y="1939.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="1950.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1186.2" y="1923.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.2" y="1934.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.08%)</title><rect x="1186.2" y="1907.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.2" y="1918.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.08%)</title><rect x="1187.1" y="1939.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="1950.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.08%)</title><rect x="1187.1" y="1923.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="1934.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.08%)</title><rect x="1187.1" y="1907.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="1918.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.08%)</title><rect x="1187.1" y="1891.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="1902.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.08%)</title><rect x="1187.1" y="1875.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="1886.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.16%)</title><rect x="1188.1" y="2003.0" width="1.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.1" y="2014.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.16%)</title><rect x="1188.1" y="1987.0" width="1.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.1" y="1998.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.08%)</title><rect x="1188.1" y="1971.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.1" y="1982.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.08%)</title><rect x="1188.1" y="1955.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.1" y="1966.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.08%)</title><rect x="1188.1" y="1939.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.1" y="1950.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.08%)</title><rect x="1189.0" y="1971.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1982.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.08%)</title><rect x="1189.0" y="1955.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="1966.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.08%)</title><rect x="1189.0" y="1939.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1192.0" y="1950.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.08%)</title><rect x="1189.0" y="1923.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.0" y="1934.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.0" y="1907.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1192.0" y="1918.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(unsigned int) (1 samples, 0.08%)</title><rect x="1189.0" y="1891.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1902.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, GCTimer*, GCId) (1 samples, 0.08%)</title><rect x="1189.0" y="1875.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.0" y="1886.0"></text>
</g>
<g>
<title>JNIHandles::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.08%)</title><rect x="1189.0" y="1859.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.0" y="1870.0"></text>
</g>
</g>
</svg>
