<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1557"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1557"> </text>
<g id="frames">
<g>
<title>all (314 samples, 100.00%)</title><rect x="10.0" y="1523.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1534.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="10.0" y="1507.0" width="3.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.32%)</title><rect x="10.0" y="1491.0" width="3.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (23 samples, 7.32%)</title><rect x="13.8" y="1507.0" width="86.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.8" y="1518.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (23 samples, 7.32%)</title><rect x="13.8" y="1491.0" width="86.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.8" y="1502.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.32%)</title><rect x="13.8" y="1475.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="16.8" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.32%)</title><rect x="13.8" y="1459.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.32%)</title><rect x="13.8" y="1443.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.8" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.32%)</title><rect x="13.8" y="1427.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="16.8" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.32%)</title><rect x="13.8" y="1411.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="16.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="13.8" y="1395.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="16.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="13.8" y="1379.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="13.8" y="1363.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="13.8" y="1347.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="13.8" y="1331.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.8" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (22 samples, 7.01%)</title><rect x="17.5" y="1475.0" width="82.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.5" y="1486.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 0.96%)</title><rect x="17.5" y="1459.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (3 samples, 0.96%)</title><rect x="17.5" y="1443.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.32%)</title><rect x="28.8" y="1459.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.32%)</title><rect x="28.8" y="1443.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="1454.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.96%)</title><rect x="32.5" y="1459.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.5" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/1131174092.accept (3 samples, 0.96%)</title><rect x="32.5" y="1443.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 0.96%)</title><rect x="32.5" y="1427.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.32%)</title><rect x="32.5" y="1411.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.5" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.32%)</title><rect x="32.5" y="1395.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.32%)</title><rect x="32.5" y="1379.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.32%)</title><rect x="32.5" y="1363.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.32%)</title><rect x="32.5" y="1347.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.32%)</title><rect x="32.5" y="1331.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.5" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.64%)</title><rect x="36.3" y="1411.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="39.3" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.64%)</title><rect x="36.3" y="1395.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.3" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.32%)</title><rect x="40.1" y="1379.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.1" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.32%)</title><rect x="40.1" y="1363.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="43.1" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.32%)</title><rect x="40.1" y="1347.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="40.1" y="1331.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.1" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="40.1" y="1315.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.78%)</title><rect x="43.8" y="1459.0" width="56.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="46.8" y="1470.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.78%)</title><rect x="43.8" y="1443.0" width="56.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.8" y="1454.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 3.18%)</title><rect x="43.8" y="1427.0" width="37.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.8" y="1438.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.64%)</title><rect x="43.8" y="1411.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.64%)</title><rect x="43.8" y="1395.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (1 samples, 0.32%)</title><rect x="43.8" y="1379.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (1 samples, 0.32%)</title><rect x="43.8" y="1363.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="46.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="47.6" y="1379.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="47.6" y="1363.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="47.6" y="1347.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="47.6" y="1331.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="50.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (7 samples, 2.23%)</title><rect x="51.3" y="1411.0" width="26.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="54.3" y="1422.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (6 samples, 1.91%)</title><rect x="51.3" y="1395.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="1406.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (5 samples, 1.59%)</title><rect x="51.3" y="1379.0" width="18.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (5 samples, 1.59%)</title><rect x="51.3" y="1363.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 0.96%)</title><rect x="51.3" y="1347.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.64%)</title><rect x="55.1" y="1331.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="58.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.64%)</title><rect x="55.1" y="1315.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="58.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.64%)</title><rect x="55.1" y="1299.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="58.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.64%)</title><rect x="55.1" y="1283.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="58.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.64%)</title><rect x="55.1" y="1267.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 0.64%)</title><rect x="55.1" y="1251.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="58.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 0.64%)</title><rect x="55.1" y="1235.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (2 samples, 0.64%)</title><rect x="62.6" y="1347.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.6" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (2 samples, 0.64%)</title><rect x="62.6" y="1331.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="65.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (2 samples, 0.64%)</title><rect x="62.6" y="1315.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.6" y="1326.0"></text>
</g>
<g>
<title>java/util/Optional.of (2 samples, 0.64%)</title><rect x="62.6" y="1299.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (1 samples, 0.32%)</title><rect x="70.1" y="1379.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.32%)</title><rect x="70.1" y="1363.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.32%)</title><rect x="70.1" y="1347.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.32%)</title><rect x="70.1" y="1331.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.1" y="1342.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="70.1" y="1315.0" width="3.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="73.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.32%)</title><rect x="73.9" y="1395.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="76.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.updateLastStableOffset (1 samples, 0.32%)</title><rect x="73.9" y="1379.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.32%)</title><rect x="77.6" y="1411.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="80.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.32%)</title><rect x="77.6" y="1395.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.6" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.32%)</title><rect x="77.6" y="1379.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="80.6" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.64%)</title><rect x="81.4" y="1427.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.32%)</title><rect x="85.2" y="1411.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.32%)</title><rect x="85.2" y="1395.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="88.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.32%)</title><rect x="85.2" y="1379.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.2" y="1390.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.32%)</title><rect x="85.2" y="1363.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.2" y="1374.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.32%)</title><rect x="85.2" y="1347.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.2" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.32%)</title><rect x="85.2" y="1331.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.32%)</title><rect x="88.9" y="1427.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="91.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.32%)</title><rect x="88.9" y="1411.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.32%)</title><rect x="88.9" y="1395.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.32%)</title><rect x="88.9" y="1379.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.canSendRequest (1 samples, 0.32%)</title><rect x="88.9" y="1363.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="91.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.isChannelReady (1 samples, 0.32%)</title><rect x="88.9" y="1347.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.ready (1 samples, 0.32%)</title><rect x="88.9" y="1331.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.9" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.64%)</title><rect x="92.7" y="1427.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.7" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.64%)</title><rect x="92.7" y="1411.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="95.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.32%)</title><rect x="92.7" y="1395.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="95.7" y="1406.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.32%)</title><rect x="92.7" y="1379.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.7" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.32%)</title><rect x="92.7" y="1363.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.7" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.size (1 samples, 0.32%)</title><rect x="92.7" y="1347.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="95.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.32%)</title><rect x="96.4" y="1395.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.32%)</title><rect x="96.4" y="1379.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.4" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stream (1 samples, 0.32%)</title><rect x="96.4" y="1363.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.4" y="1374.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.32%)</title><rect x="96.4" y="1347.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.4" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.32%)</title><rect x="96.4" y="1331.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.4" y="1342.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.characteristics (1 samples, 0.32%)</title><rect x="96.4" y="1315.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/Thread.run (152 samples, 48.41%)</title><rect x="100.2" y="1507.0" width="571.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.2" y="1518.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (152 samples, 48.41%)</title><rect x="100.2" y="1491.0" width="571.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.2" y="1502.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (152 samples, 48.41%)</title><rect x="100.2" y="1475.0" width="571.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="103.2" y="1486.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/1272412078.run (139 samples, 44.27%)</title><rect x="100.2" y="1459.0" width="522.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="103.2" y="1470.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$29..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (139 samples, 44.27%)</title><rect x="100.2" y="1443.0" width="522.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.2" y="1454.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (139 samples, 44.27%)</title><rect x="100.2" y="1427.0" width="522.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.2" y="1438.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (139 samples, 44.27%)</title><rect x="100.2" y="1411.0" width="522.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.2" y="1422.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (5 samples, 1.59%)</title><rect x="100.2" y="1395.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.2" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (5 samples, 1.59%)</title><rect x="100.2" y="1379.0" width="18.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="103.2" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 1.59%)</title><rect x="100.2" y="1363.0" width="18.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="103.2" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="100.2" y="1347.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="103.2" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 1.27%)</title><rect x="103.9" y="1347.0" width="15.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.9" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.64%)</title><rect x="111.5" y="1331.0" width="7.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="114.5" y="1342.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.64%)</title><rect x="111.5" y="1315.0" width="7.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="114.5" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (9 samples, 2.87%)</title><rect x="119.0" y="1395.0" width="33.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="122.0" y="1406.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.27%)</title><rect x="137.8" y="1379.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.27%)</title><rect x="137.8" y="1363.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="140.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.27%)</title><rect x="137.8" y="1347.0" width="15.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="140.8" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.27%)</title><rect x="137.8" y="1331.0" width="15.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="140.8" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$302/846964314.accept (4 samples, 1.27%)</title><rect x="137.8" y="1315.0" width="15.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="140.8" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (4 samples, 1.27%)</title><rect x="137.8" y="1299.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="140.8" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.27%)</title><rect x="137.8" y="1283.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.8" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.27%)</title><rect x="137.8" y="1267.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="140.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.27%)</title><rect x="137.8" y="1251.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.64%)</title><rect x="137.8" y="1235.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 0.64%)</title><rect x="137.8" y="1219.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/1442146274.accept (1 samples, 0.32%)</title><rect x="137.8" y="1203.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="140.8" y="1214.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="141.5" y="1203.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="144.5" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.64%)</title><rect x="145.3" y="1235.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="148.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (24 samples, 7.64%)</title><rect x="152.8" y="1395.0" width="90.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.8" y="1406.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (24 samples, 7.64%)</title><rect x="152.8" y="1379.0" width="90.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.8" y="1390.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (24 samples, 7.64%)</title><rect x="152.8" y="1363.0" width="90.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.8" y="1374.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 7.64%)</title><rect x="152.8" y="1347.0" width="90.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.8" y="1358.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (24 samples, 7.64%)</title><rect x="152.8" y="1331.0" width="90.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.8" y="1342.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (24 samples, 7.64%)</title><rect x="152.8" y="1315.0" width="90.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.8" y="1326.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 2.55%)</title><rect x="152.8" y="1299.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.8" y="1310.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.96%)</title><rect x="156.6" y="1283.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.6" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.96%)</title><rect x="156.6" y="1267.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.32%)</title><rect x="160.3" y="1251.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.3" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="160.3" y="1235.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="163.3" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="160.3" y="1219.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="163.3" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="160.3" y="1203.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="163.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.32%)</title><rect x="164.1" y="1251.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.1" y="1262.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="164.1" y="1235.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.1" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="164.1" y="1219.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="167.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="164.1" y="1203.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="164.1" y="1187.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="167.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.96%)</title><rect x="167.8" y="1283.0" width="11.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.96%)</title><rect x="167.8" y="1267.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="170.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.32%)</title><rect x="175.4" y="1251.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.32%)</title><rect x="175.4" y="1235.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="178.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.32%)</title><rect x="175.4" y="1219.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.4" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.32%)</title><rect x="179.1" y="1283.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="182.1" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 4.14%)</title><rect x="182.9" y="1299.0" width="48.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.9" y="1310.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.32%)</title><rect x="182.9" y="1283.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.32%)</title><rect x="186.6" y="1283.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.6" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="186.6" y="1267.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="189.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (11 samples, 3.50%)</title><rect x="190.4" y="1283.0" width="41.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="193.4" y="1294.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 3.50%)</title><rect x="190.4" y="1267.0" width="41.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.4" y="1278.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 1.59%)</title><rect x="190.4" y="1251.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="193.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.32%)</title><rect x="194.1" y="1235.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="197.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.32%)</title><rect x="194.1" y="1219.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.1" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.32%)</title><rect x="194.1" y="1203.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.1" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.32%)</title><rect x="194.1" y="1187.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="197.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.64%)</title><rect x="197.9" y="1235.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.64%)</title><rect x="197.9" y="1219.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="200.9" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.64%)</title><rect x="197.9" y="1203.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.32%)</title><rect x="201.7" y="1187.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="204.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.32%)</title><rect x="201.7" y="1171.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="204.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.32%)</title><rect x="205.4" y="1235.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 1.91%)</title><rect x="209.2" y="1251.0" width="22.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.2" y="1262.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 1.91%)</title><rect x="209.2" y="1235.0" width="22.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.2" y="1246.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 1.91%)</title><rect x="209.2" y="1219.0" width="22.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.2" y="1230.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="209.2" y="1203.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.32%)</title><rect x="209.2" y="1187.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.27%)</title><rect x="212.9" y="1203.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.9" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.27%)</title><rect x="212.9" y="1187.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.9" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.27%)</title><rect x="212.9" y="1171.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="215.9" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.27%)</title><rect x="212.9" y="1155.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="215.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 1.27%)</title><rect x="212.9" y="1139.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.32%)</title><rect x="228.0" y="1203.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="228.0" y="1187.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="231.0" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="228.0" y="1171.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="231.0" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="228.0" y="1155.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 0.96%)</title><rect x="231.7" y="1299.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.7" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.64%)</title><rect x="235.5" y="1283.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.5" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.64%)</title><rect x="235.5" y="1267.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.5" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.64%)</title><rect x="235.5" y="1251.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.64%)</title><rect x="235.5" y="1235.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (101 samples, 32.17%)</title><rect x="243.0" y="1395.0" width="379.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.0" y="1406.0">com/linecorp/decaton/processor/runtime/internal/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (11 samples, 3.50%)</title><rect x="258.0" y="1379.0" width="41.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="261.0" y="1390.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (10 samples, 3.18%)</title><rect x="261.8" y="1363.0" width="37.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.8" y="1374.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (9 samples, 2.87%)</title><rect x="265.5" y="1347.0" width="33.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.5" y="1358.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.32%)</title><rect x="265.5" y="1331.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.5" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.32%)</title><rect x="265.5" y="1315.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.5" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.32%)</title><rect x="265.5" y="1299.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.5" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.32%)</title><rect x="265.5" y="1283.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="269.3" y="1331.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.3" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="269.3" y="1315.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.3" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="269.3" y="1299.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.3" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="269.3" y="1283.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.3" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 2.23%)</title><rect x="273.1" y="1331.0" width="26.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.1" y="1342.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.23%)</title><rect x="273.1" y="1315.0" width="26.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.1" y="1326.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.64%)</title><rect x="291.8" y="1299.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="294.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="299.4" y="1379.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.4" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (19 samples, 6.05%)</title><rect x="303.1" y="1379.0" width="71.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.1" y="1390.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (15 samples, 4.78%)</title><rect x="310.6" y="1363.0" width="56.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.6" y="1374.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 0.96%)</title><rect x="325.7" y="1347.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.7" y="1358.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.96%)</title><rect x="325.7" y="1331.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.7" y="1342.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.32%)</title><rect x="329.4" y="1315.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="332.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.32%)</title><rect x="329.4" y="1299.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="332.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.32%)</title><rect x="329.4" y="1283.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.4" y="1294.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.32%)</title><rect x="329.4" y="1267.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.4" y="1278.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.32%)</title><rect x="329.4" y="1251.0" width="3.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="332.4" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.32%)</title><rect x="333.2" y="1315.0" width="3.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="336.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.96%)</title><rect x="336.9" y="1347.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="339.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (2 samples, 0.64%)</title><rect x="336.9" y="1331.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.9" y="1342.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (2 samples, 0.64%)</title><rect x="336.9" y="1315.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.9" y="1326.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.32%)</title><rect x="344.5" y="1331.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="347.5" y="1342.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.32%)</title><rect x="344.5" y="1315.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.5" y="1326.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 1.59%)</title><rect x="348.2" y="1347.0" width="18.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="351.2" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 1.59%)</title><rect x="348.2" y="1331.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="351.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="348.2" y="1315.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="348.2" y="1299.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="348.2" y="1283.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="348.2" y="1267.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="351.2" y="1278.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.27%)</title><rect x="352.0" y="1315.0" width="15.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="355.0" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 1.27%)</title><rect x="352.0" y="1299.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.0" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.96%)</title><rect x="355.7" y="1283.0" width="11.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.7" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.32%)</title><rect x="359.5" y="1267.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="362.5" y="1278.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.32%)</title><rect x="363.2" y="1267.0" width="3.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="366.2" y="1278.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.64%)</title><rect x="367.0" y="1363.0" width="7.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="370.0" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (63 samples, 20.06%)</title><rect x="374.5" y="1379.0" width="236.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="377.5" y="1390.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (63 samples, 20.06%)</title><rect x="374.5" y="1363.0" width="236.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="377.5" y="1374.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/893555317.process (50 samples, 15.92%)</title><rect x="378.3" y="1347.0" width="187.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="381.3" y="1358.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (50 samples, 15.92%)</title><rect x="378.3" y="1331.0" width="187.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.3" y="1342.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (49 samples, 15.61%)</title><rect x="378.3" y="1315.0" width="184.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="381.3" y="1326.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="378.3" y="1299.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="381.3" y="1310.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="378.3" y="1283.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.3" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.32%)</title><rect x="378.3" y="1267.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="381.3" y="1278.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.32%)</title><rect x="378.3" y="1251.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="381.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (48 samples, 15.29%)</title><rect x="382.0" y="1299.0" width="180.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.0" y="1310.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (48 samples, 15.29%)</title><rect x="382.0" y="1283.0" width="180.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.0" y="1294.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (38 samples, 12.10%)</title><rect x="408.3" y="1267.0" width="142.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="411.3" y="1278.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="427.1" y="1251.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="430.1" y="1262.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="427.1" y="1235.0" width="3.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="430.1" y="1246.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 1.91%)</title><rect x="430.9" y="1251.0" width="22.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="433.9" y="1262.0">j..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (26 samples, 8.28%)</title><rect x="453.4" y="1251.0" width="97.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="456.4" y="1262.0">os::sleep(T..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="472.2" y="1235.0" width="3.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="475.2" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="472.2" y="1219.0" width="3.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="475.2" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.32%)</title><rect x="476.0" y="1235.0" width="3.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="479.0" y="1246.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 3.82%)</title><rect x="479.7" y="1235.0" width="45.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="482.7" y="1246.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.64%)</title><rect x="524.8" y="1235.0" width="7.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="527.8" y="1246.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.32%)</title><rect x="532.4" y="1235.0" width="3.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="535.4" y="1246.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.32%)</title><rect x="536.1" y="1235.0" width="3.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="539.1" y="1246.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.32%)</title><rect x="539.9" y="1235.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="542.9" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="543.6" y="1235.0" width="3.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="546.6" y="1246.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.32%)</title><rect x="547.4" y="1235.0" width="3.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="550.4" y="1246.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.32%)</title><rect x="551.1" y="1267.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="554.1" y="1278.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.32%)</title><rect x="554.9" y="1267.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="557.9" y="1278.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (1 samples, 0.32%)</title><rect x="558.7" y="1267.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="561.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.32%)</title><rect x="562.4" y="1315.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="565.4" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="562.4" y="1299.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="565.4" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="562.4" y="1283.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="565.4" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="562.4" y="1267.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="565.4" y="1278.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="562.4" y="1251.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="565.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.64%)</title><rect x="566.2" y="1347.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.2" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.64%)</title><rect x="566.2" y="1331.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.2" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.96%)</title><rect x="573.7" y="1347.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="576.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.64%)</title><rect x="577.5" y="1331.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="580.5" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.64%)</title><rect x="585.0" y="1347.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="588.0" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.32%)</title><rect x="588.7" y="1331.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="591.7" y="1342.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="588.7" y="1315.0" width="3.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="591.7" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.59%)</title><rect x="592.5" y="1347.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.5" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 1.59%)</title><rect x="592.5" y="1331.0" width="18.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="595.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 1.59%)</title><rect x="592.5" y="1315.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="595.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.27%)</title><rect x="592.5" y="1299.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="595.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 1.27%)</title><rect x="592.5" y="1283.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="595.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 1.27%)</title><rect x="592.5" y="1267.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="595.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/484490613.accept (2 samples, 0.64%)</title><rect x="596.2" y="1251.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.2" y="1262.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.32%)</title><rect x="603.8" y="1251.0" width="3.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="606.8" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="607.5" y="1299.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/484490613.accept (1 samples, 0.32%)</title><rect x="607.5" y="1283.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="610.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$78 (1 samples, 0.32%)</title><rect x="607.5" y="1267.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.96%)</title><rect x="611.3" y="1379.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.3" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.96%)</title><rect x="611.3" y="1363.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="614.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.96%)</title><rect x="611.3" y="1347.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="614.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="611.3" y="1331.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="614.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.32%)</title><rect x="611.3" y="1315.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="614.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.32%)</title><rect x="611.3" y="1299.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="614.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1242058401.accept (1 samples, 0.32%)</title><rect x="611.3" y="1283.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="614.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.64%)</title><rect x="615.0" y="1331.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="618.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$298/1242058401.accept (2 samples, 0.64%)</title><rect x="615.0" y="1315.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (2 samples, 0.64%)</title><rect x="615.0" y="1299.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.64%)</title><rect x="615.0" y="1283.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.0" y="1294.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.64%)</title><rect x="615.0" y="1267.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="618.0" y="1278.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.64%)</title><rect x="615.0" y="1251.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.0" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.64%)</title><rect x="615.0" y="1235.0" width="7.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="618.0" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="618.8" y="1219.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="621.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.64%)</title><rect x="622.5" y="1459.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="625.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.32%)</title><rect x="630.1" y="1459.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.32%)</title><rect x="630.1" y="1443.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="633.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.32%)</title><rect x="630.1" y="1427.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.32%)</title><rect x="630.1" y="1411.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (10 samples, 3.18%)</title><rect x="633.8" y="1459.0" width="37.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="636.8" y="1470.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (10 samples, 3.18%)</title><rect x="633.8" y="1443.0" width="37.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="636.8" y="1454.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.64%)</title><rect x="652.6" y="1427.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.6" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.64%)</title><rect x="652.6" y="1411.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.64%)</title><rect x="652.6" y="1395.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="655.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.64%)</title><rect x="652.6" y="1379.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.64%)</title><rect x="652.6" y="1363.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.32%)</title><rect x="660.1" y="1427.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.32%)</title><rect x="660.1" y="1411.0" width="3.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="663.1" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.32%)</title><rect x="660.1" y="1395.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="663.1" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.64%)</title><rect x="663.9" y="1427.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.9" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.64%)</title><rect x="663.9" y="1411.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.9" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.64%)</title><rect x="663.9" y="1395.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.9" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.64%)</title><rect x="663.9" y="1379.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.9" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.32%)</title><rect x="667.6" y="1363.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="670.6" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.64%)</title><rect x="671.4" y="1507.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.4" y="1518.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.32%)</title><rect x="671.4" y="1491.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="674.4" y="1502.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.32%)</title><rect x="671.4" y="1475.0" width="3.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="674.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.32%)</title><rect x="675.2" y="1491.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="678.2" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.32%)</title><rect x="675.2" y="1475.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="678.2" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="675.2" y="1459.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="678.2" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.32%)</title><rect x="675.2" y="1443.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="678.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.32%)</title><rect x="675.2" y="1427.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.hasExpiredRequest (1 samples, 0.32%)</title><rect x="675.2" y="1411.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="678.2" y="1422.0"></text>
</g>
<g>
<title>start_thread (136 samples, 43.31%)</title><rect x="678.9" y="1507.0" width="511.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="681.9" y="1518.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (136 samples, 43.31%)</title><rect x="678.9" y="1491.0" width="511.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="681.9" y="1502.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 3.50%)</title><rect x="678.9" y="1475.0" width="41.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="681.9" y="1486.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 3.50%)</title><rect x="678.9" y="1459.0" width="41.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="681.9" y="1470.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 3.50%)</title><rect x="678.9" y="1443.0" width="41.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="681.9" y="1454.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (11 samples, 3.50%)</title><rect x="678.9" y="1427.0" width="41.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="681.9" y="1438.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 2.55%)</title><rect x="690.2" y="1411.0" width="30.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="693.2" y="1422.0">G1..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.32%)</title><rect x="712.7" y="1395.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="715.7" y="1406.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.32%)</title><rect x="712.7" y="1379.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.7" y="1390.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.32%)</title><rect x="712.7" y="1363.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="715.7" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.32%)</title><rect x="716.5" y="1395.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="719.5" y="1406.0"></text>
</g>
<g>
<title>JavaThread::run() (125 samples, 39.81%)</title><rect x="720.3" y="1475.0" width="469.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="723.3" y="1486.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (125 samples, 39.81%)</title><rect x="720.3" y="1459.0" width="469.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="723.3" y="1470.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (124 samples, 39.49%)</title><rect x="720.3" y="1443.0" width="465.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="723.3" y="1454.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (123 samples, 39.17%)</title><rect x="720.3" y="1427.0" width="462.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="723.3" y="1438.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (121 samples, 38.54%)</title><rect x="720.3" y="1411.0" width="454.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="723.3" y="1422.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (121 samples, 38.54%)</title><rect x="720.3" y="1395.0" width="454.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="723.3" y="1406.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bo..</text>
</g>
<g>
<title>Compile::Code_Gen() (63 samples, 20.06%)</title><rect x="720.3" y="1379.0" width="236.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="723.3" y="1390.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (4 samples, 1.27%)</title><rect x="720.3" y="1363.0" width="15.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="723.3" y="1374.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 0.96%)</title><rect x="720.3" y="1347.0" width="11.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="723.3" y="1358.0"></text>
</g>
<g>
<title>hashkey(void const*) (1 samples, 0.32%)</title><rect x="727.8" y="1331.0" width="3.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="730.8" y="1342.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.32%)</title><rect x="731.5" y="1347.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="734.5" y="1358.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.32%)</title><rect x="731.5" y="1331.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="734.5" y="1342.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.32%)</title><rect x="731.5" y="1315.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="734.5" y="1326.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.32%)</title><rect x="731.5" y="1299.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="734.5" y="1310.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.96%)</title><rect x="735.3" y="1363.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.3" y="1374.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.32%)</title><rect x="742.8" y="1347.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="745.8" y="1358.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.32%)</title><rect x="742.8" y="1331.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="745.8" y="1342.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.32%)</title><rect x="742.8" y="1315.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="745.8" y="1326.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 1.91%)</title><rect x="746.6" y="1363.0" width="22.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="749.6" y="1374.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 1.91%)</title><rect x="746.6" y="1347.0" width="22.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="749.6" y="1358.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.96%)</title><rect x="746.6" y="1331.0" width="11.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="749.6" y="1342.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.32%)</title><rect x="757.8" y="1331.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="760.8" y="1342.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.32%)</title><rect x="757.8" y="1315.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="760.8" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.64%)</title><rect x="761.6" y="1331.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.6" y="1342.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.32%)</title><rect x="765.4" y="1315.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="768.4" y="1326.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.32%)</title><rect x="765.4" y="1299.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="768.4" y="1310.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int, Compile*) (1 samples, 0.32%)</title><rect x="765.4" y="1283.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="768.4" y="1294.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.59%)</title><rect x="769.1" y="1363.0" width="18.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.1" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.59%)</title><rect x="769.1" y="1347.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="772.1" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (2 samples, 0.64%)</title><rect x="769.1" y="1331.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.1" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.32%)</title><rect x="776.6" y="1331.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="779.6" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.64%)</title><rect x="780.4" y="1331.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="783.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (45 samples, 14.33%)</title><rect x="787.9" y="1363.0" width="169.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="790.9" y="1374.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.32%)</title><rect x="787.9" y="1347.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="790.9" y="1358.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.96%)</title><rect x="791.7" y="1347.0" width="11.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="794.7" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.96%)</title><rect x="802.9" y="1347.0" width="11.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="805.9" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.64%)</title><rect x="802.9" y="1331.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="805.9" y="1342.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.32%)</title><rect x="810.4" y="1331.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="813.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.96%)</title><rect x="814.2" y="1347.0" width="11.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="817.2" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="818.0" y="1331.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="821.0" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.32%)</title><rect x="821.7" y="1331.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="824.7" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 1.91%)</title><rect x="825.5" y="1347.0" width="22.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="828.5" y="1358.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.32%)</title><rect x="840.5" y="1331.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="843.5" y="1342.0"></text>
</g>
<g>
<title>loadConINode::rule() const (1 samples, 0.32%)</title><rect x="844.3" y="1331.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="847.3" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 2.87%)</title><rect x="848.0" y="1347.0" width="33.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="851.0" y="1358.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="855.5" y="1331.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="858.5" y="1342.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.32%)</title><rect x="859.3" y="1331.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="862.3" y="1342.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.32%)</title><rect x="859.3" y="1315.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="862.3" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.59%)</title><rect x="863.1" y="1331.0" width="18.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="866.1" y="1342.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.32%)</title><rect x="866.8" y="1315.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="869.8" y="1326.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.96%)</title><rect x="870.6" y="1315.0" width="11.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.6" y="1326.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.32%)</title><rect x="881.8" y="1347.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="884.8" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::compact() (1 samples, 0.32%)</title><rect x="885.6" y="1347.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="888.6" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.32%)</title><rect x="889.4" y="1347.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.4" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.27%)</title><rect x="893.1" y="1347.0" width="15.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="896.1" y="1358.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.32%)</title><rect x="900.6" y="1331.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="903.6" y="1342.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.32%)</title><rect x="904.4" y="1331.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.4" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.32%)</title><rect x="908.2" y="1347.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.2" y="1358.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.32%)</title><rect x="908.2" y="1331.0" width="3.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="911.2" y="1342.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.27%)</title><rect x="911.9" y="1347.0" width="15.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="914.9" y="1358.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.32%)</title><rect x="911.9" y="1331.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="914.9" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.96%)</title><rect x="915.7" y="1331.0" width="11.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="918.7" y="1342.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (3 samples, 0.96%)</title><rect x="915.7" y="1315.0" width="11.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.7" y="1326.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.32%)</title><rect x="915.7" y="1299.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.7" y="1310.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.32%)</title><rect x="915.7" y="1283.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="918.7" y="1294.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.64%)</title><rect x="919.4" y="1299.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="922.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 1.27%)</title><rect x="926.9" y="1347.0" width="15.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.9" y="1358.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.96%)</title><rect x="930.7" y="1331.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="933.7" y="1342.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.32%)</title><rect x="942.0" y="1347.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.0" y="1358.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.32%)</title><rect x="942.0" y="1331.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="945.0" y="1342.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.64%)</title><rect x="945.7" y="1347.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="948.7" y="1358.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.32%)</title><rect x="949.5" y="1331.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.5" y="1342.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="953.2" y="1347.0" width="3.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="956.2" y="1358.0"></text>
</g>
<g>
<title>Compile::Optimize() (52 samples, 16.56%)</title><rect x="957.0" y="1379.0" width="195.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="960.0" y="1390.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (2 samples, 0.64%)</title><rect x="957.0" y="1363.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="960.0" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.64%)</title><rect x="957.0" y="1347.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="960.0" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.64%)</title><rect x="957.0" y="1331.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="960.0" y="1342.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="957.0" y="1315.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="960.0" y="1326.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.32%)</title><rect x="957.0" y="1299.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.0" y="1310.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.32%)</title><rect x="957.0" y="1283.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="960.0" y="1294.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="957.0" y="1267.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="960.0" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.32%)</title><rect x="960.8" y="1315.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="963.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 0.96%)</title><rect x="964.5" y="1363.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="967.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 0.96%)</title><rect x="964.5" y="1347.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="967.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.32%)</title><rect x="964.5" y="1331.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="967.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) (1 samples, 0.32%)</title><rect x="964.5" y="1315.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.5" y="1326.0"></text>
</g>
<g>
<title>PointsToNode::PointsToNode(ConnectionGraph*, Node*, PointsToNode::EscapeState, PointsToNode::NodeType) (1 samples, 0.32%)</title><rect x="964.5" y="1299.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="967.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.64%)</title><rect x="968.3" y="1331.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="971.3" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="972.0" y="1315.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="975.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="972.0" y="1299.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="975.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.32%)</title><rect x="972.0" y="1283.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="975.0" y="1294.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.32%)</title><rect x="975.8" y="1363.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="978.8" y="1374.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.32%)</title><rect x="975.8" y="1347.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="978.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (35 samples, 11.15%)</title><rect x="979.6" y="1363.0" width="131.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.6" y="1374.0">PhaseIdealLoop::..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.32%)</title><rect x="979.6" y="1347.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.6" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.32%)</title><rect x="979.6" y="1331.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="982.6" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.32%)</title><rect x="979.6" y="1315.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="982.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.32%)</title><rect x="979.6" y="1299.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.6" y="1310.0"></text>
</g>
<g>
<title>Invariance::is_invariant(Node*) (1 samples, 0.32%)</title><rect x="979.6" y="1283.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.6" y="1294.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="979.6" y="1267.0" width="3.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="982.6" y="1278.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.32%)</title><rect x="983.3" y="1347.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.32%)</title><rect x="987.1" y="1347.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.1" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.96%)</title><rect x="990.8" y="1347.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (25 samples, 7.96%)</title><rect x="1002.1" y="1347.0" width="94.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.1" y="1358.0">PhaseIdealL..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 6.69%)</title><rect x="1017.1" y="1331.0" width="79.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.1" y="1342.0">PhaseIdea..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (20 samples, 6.37%)</title><rect x="1020.9" y="1315.0" width="75.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1023.9" y="1326.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.96%)</title><rect x="1084.8" y="1299.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1087.8" y="1310.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.64%)</title><rect x="1096.1" y="1347.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.1" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.32%)</title><rect x="1103.6" y="1347.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.6" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.32%)</title><rect x="1103.6" y="1331.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.32%)</title><rect x="1103.6" y="1315.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.6" y="1326.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.32%)</title><rect x="1107.3" y="1347.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.3" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 2.55%)</title><rect x="1111.1" y="1363.0" width="30.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1114.1" y="1374.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 2.23%)</title><rect x="1114.8" y="1347.0" width="26.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.8" y="1358.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.64%)</title><rect x="1114.8" y="1331.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.8" y="1342.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (2 samples, 0.64%)</title><rect x="1114.8" y="1315.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.8" y="1326.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (2 samples, 0.64%)</title><rect x="1114.8" y="1299.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.8" y="1310.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.64%)</title><rect x="1114.8" y="1283.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.8" y="1294.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.32%)</title><rect x="1122.4" y="1331.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.4" y="1342.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1126.1" y="1331.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.1" y="1342.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.32%)</title><rect x="1126.1" y="1315.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.1" y="1326.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.64%)</title><rect x="1129.9" y="1331.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1132.9" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.64%)</title><rect x="1129.9" y="1315.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.9" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.64%)</title><rect x="1129.9" y="1299.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.9" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.64%)</title><rect x="1129.9" y="1283.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.9" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.64%)</title><rect x="1129.9" y="1267.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.64%)</title><rect x="1129.9" y="1251.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.64%)</title><rect x="1129.9" y="1235.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.9" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.64%)</title><rect x="1129.9" y="1219.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.9" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1203.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.9" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1187.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1171.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1155.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.9" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1139.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.9" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1123.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.9" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1107.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1091.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.9" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1075.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.9" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1059.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1043.0" width="3.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.9" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1027.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.9" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="1011.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.9" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="995.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.9" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="979.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.32%)</title><rect x="1129.9" y="963.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="1129.9" y="947.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.9" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.32%)</title><rect x="1133.6" y="1203.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.6" y="1214.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="1133.6" y="1187.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.6" y="1198.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.32%)</title><rect x="1137.4" y="1331.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.4" y="1342.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.32%)</title><rect x="1137.4" y="1315.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="1326.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.32%)</title><rect x="1137.4" y="1299.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.4" y="1310.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.32%)</title><rect x="1137.4" y="1283.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.4" y="1294.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.32%)</title><rect x="1141.1" y="1363.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="1374.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.32%)</title><rect x="1141.1" y="1347.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.1" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.32%)</title><rect x="1141.1" y="1331.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, BasicType, Type const*, TypeOopPtr const*, Node*) (1 samples, 0.32%)</title><rect x="1141.1" y="1315.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.1" y="1326.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="1141.1" y="1299.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1144.1" y="1310.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.64%)</title><rect x="1144.9" y="1363.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.64%)</title><rect x="1144.9" y="1347.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.64%)</title><rect x="1144.9" y="1331.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="1342.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.32%)</title><rect x="1148.7" y="1315.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.7" y="1326.0"></text>
</g>
<g>
<title>Node::eqv_uncast(Node const*) const (1 samples, 0.32%)</title><rect x="1148.7" y="1299.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.7" y="1310.0"></text>
</g>
<g>
<title>Node::uncast() const (1 samples, 0.32%)</title><rect x="1148.7" y="1283.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.7" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.59%)</title><rect x="1152.4" y="1379.0" width="18.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.59%)</title><rect x="1152.4" y="1363.0" width="18.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.59%)</title><rect x="1152.4" y="1347.0" width="18.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.59%)</title><rect x="1152.4" y="1331.0" width="18.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.4" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.59%)</title><rect x="1152.4" y="1315.0" width="18.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.4" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.59%)</title><rect x="1152.4" y="1299.0" width="18.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 1.59%)</title><rect x="1152.4" y="1283.0" width="18.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.4" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 1.59%)</title><rect x="1152.4" y="1267.0" width="18.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.4" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 1.59%)</title><rect x="1152.4" y="1251.0" width="18.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 1.59%)</title><rect x="1152.4" y="1235.0" width="18.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.4" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 1.59%)</title><rect x="1152.4" y="1219.0" width="18.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.4" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.59%)</title><rect x="1152.4" y="1203.0" width="18.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.4" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1152.4" y="1187.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.4" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.96%)</title><rect x="1152.4" y="1171.0" width="11.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.96%)</title><rect x="1152.4" y="1155.0" width="11.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.96%)</title><rect x="1152.4" y="1139.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.96%)</title><rect x="1152.4" y="1123.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.96%)</title><rect x="1152.4" y="1107.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.4" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1152.4" y="1091.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.96%)</title><rect x="1152.4" y="1075.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.96%)</title><rect x="1152.4" y="1059.0" width="11.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.96%)</title><rect x="1152.4" y="1043.0" width="11.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.96%)</title><rect x="1152.4" y="1027.0" width="11.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.96%)</title><rect x="1152.4" y="1011.0" width="11.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.96%)</title><rect x="1152.4" y="995.0" width="11.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.96%)</title><rect x="1152.4" y="979.0" width="11.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.96%)</title><rect x="1152.4" y="963.0" width="11.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.96%)</title><rect x="1152.4" y="947.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.96%)</title><rect x="1152.4" y="931.0" width="11.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="942.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.32%)</title><rect x="1152.4" y="915.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="926.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.32%)</title><rect x="1152.4" y="899.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.4" y="910.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.32%)</title><rect x="1152.4" y="883.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.4" y="894.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.32%)</title><rect x="1152.4" y="867.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.32%)</title><rect x="1152.4" y="851.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.4" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.32%)</title><rect x="1152.4" y="835.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1156.2" y="915.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1156.2" y="899.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1156.2" y="883.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1156.2" y="867.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1156.2" y="851.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1156.2" y="835.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1156.2" y="819.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1156.2" y="803.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1159.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1156.2" y="787.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1156.2" y="771.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1156.2" y="755.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1156.2" y="739.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1156.2" y="723.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1156.2" y="707.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1156.2" y="691.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1156.2" y="675.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1156.2" y="659.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.2" y="670.0"></text>
</g>
<g>
<title>GraphKit::stopped() (1 samples, 0.32%)</title><rect x="1156.2" y="643.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1159.9" y="643.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.32%)</title><rect x="1159.9" y="627.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.32%)</title><rect x="1159.9" y="611.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.9" y="622.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.32%)</title><rect x="1159.9" y="595.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.9" y="606.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_post(Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) (1 samples, 0.32%)</title><rect x="1159.9" y="579.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.9" y="590.0"></text>
</g>
<g>
<title>GraphKit::g1_mark_card(IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) (1 samples, 0.32%)</title><rect x="1159.9" y="563.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.9" y="574.0"></text>
</g>
<g>
<title>TypeLong::singleton() const (1 samples, 0.32%)</title><rect x="1159.9" y="547.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.9" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="1187.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.7" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="1171.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="1155.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="1139.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="1123.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="1107.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.7" y="1091.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="1075.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="1059.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="1043.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="1027.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1166.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="1011.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.7" y="995.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="979.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="963.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="947.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="931.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="915.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.64%)</title><rect x="1163.7" y="899.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1163.7" y="883.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1163.7" y="867.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1163.7" y="851.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1163.7" y="835.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1163.7" y="819.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="803.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="787.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.7" y="771.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.7" y="755.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.7" y="739.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.7" y="723.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="707.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="691.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="675.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.7" y="659.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.7" y="643.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.7" y="627.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.7" y="611.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="595.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="579.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.7" y="563.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.7" y="547.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.7" y="531.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.7" y="515.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="499.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="483.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.7" y="467.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.7" y="451.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.7" y="435.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.7" y="419.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="403.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="387.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.7" y="371.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.7" y="355.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.7" y="339.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.7" y="323.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="307.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1166.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1163.7" y="291.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.7" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1163.7" y="275.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1163.7" y="259.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1163.7" y="243.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1163.7" y="227.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1163.7" y="211.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.7" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1163.7" y="195.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="206.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.32%)</title><rect x="1163.7" y="179.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1166.7" y="190.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.32%)</title><rect x="1163.7" y="163.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1166.7" y="174.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.32%)</title><rect x="1163.7" y="147.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="158.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1163.7" y="131.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.7" y="142.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.32%)</title><rect x="1163.7" y="115.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.7" y="126.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.32%)</title><rect x="1163.7" y="99.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="110.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.32%)</title><rect x="1163.7" y="83.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.7" y="94.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.32%)</title><rect x="1163.7" y="67.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.7" y="78.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.32%)</title><rect x="1163.7" y="51.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.7" y="62.0"></text>
</g>
<g>
<title>SignatureStream::next_non_primitive(int) (1 samples, 0.32%)</title><rect x="1163.7" y="35.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.7" y="46.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.32%)</title><rect x="1167.5" y="803.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.5" y="814.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.32%)</title><rect x="1171.2" y="1379.0" width="3.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="1390.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.32%)</title><rect x="1171.2" y="1363.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="1374.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.32%)</title><rect x="1171.2" y="1347.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.2" y="1358.0"></text>
</g>
<g>
<title>CodeBlob::CodeBlob(char const*, CodeBuffer*, int, int, int, int, OopMapSet*) (1 samples, 0.32%)</title><rect x="1171.2" y="1331.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.2" y="1342.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (1 samples, 0.32%)</title><rect x="1171.2" y="1315.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.2" y="1326.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.32%)</title><rect x="1171.2" y="1299.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.2" y="1310.0"></text>
</g>
<g>
<title>CallRelocation::fix_relocation_after_move(CodeBuffer const*, CodeBuffer*) (1 samples, 0.32%)</title><rect x="1171.2" y="1283.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.2" y="1294.0"></text>
</g>
<g>
<title>Relocation::pd_call_destination(unsigned char*) (1 samples, 0.32%)</title><rect x="1171.2" y="1267.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.2" y="1278.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.64%)</title><rect x="1175.0" y="1411.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.0" y="1422.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.64%)</title><rect x="1175.0" y="1395.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="1406.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.64%)</title><rect x="1175.0" y="1379.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="1390.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.32%)</title><rect x="1175.0" y="1363.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="1374.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.32%)</title><rect x="1175.0" y="1347.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.0" y="1358.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.32%)</title><rect x="1175.0" y="1331.0" width="3.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="1342.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.32%)</title><rect x="1178.7" y="1363.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.7" y="1374.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.32%)</title><rect x="1178.7" y="1347.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.7" y="1358.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.32%)</title><rect x="1178.7" y="1331.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="1342.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.32%)</title><rect x="1178.7" y="1315.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.7" y="1326.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.32%)</title><rect x="1182.5" y="1427.0" width="3.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.5" y="1438.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.32%)</title><rect x="1182.5" y="1411.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="1422.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.32%)</title><rect x="1182.5" y="1395.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.5" y="1406.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.32%)</title><rect x="1182.5" y="1379.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="1390.0"></text>
</g>
<g>
<title>nmethod::cleanup_inline_caches() (1 samples, 0.32%)</title><rect x="1182.5" y="1363.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.5" y="1374.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.32%)</title><rect x="1186.2" y="1443.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="1454.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.32%)</title><rect x="1186.2" y="1427.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.2" y="1438.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.32%)</title><rect x="1186.2" y="1411.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.2" y="1422.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.32%)</title><rect x="1186.2" y="1395.0" width="3.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="1189.2" y="1406.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.32%)</title><rect x="1186.2" y="1379.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.2" y="1390.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.32%)</title><rect x="1186.2" y="1363.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="1374.0"></text>
</g>
</g>
</svg>
