<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (854 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.35%)</title><rect x="10.0" y="1315.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.23%)</title><rect x="10.0" y="1299.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.23%)</title><rect x="10.0" y="1283.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.12%)</title><rect x="10.0" y="1267.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.12%)</title><rect x="10.0" y="1251.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="11.4" y="1267.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.4" y="1278.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.12%)</title><rect x="12.8" y="1299.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.8" y="1310.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.12%)</title><rect x="12.8" y="1283.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.8" y="1294.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.23%)</title><rect x="14.1" y="1315.0" width="2.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.1" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="14.1" y="1299.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="17.1" y="1310.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="14.1" y="1283.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.1" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.12%)</title><rect x="15.5" y="1299.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.5" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (218 samples, 25.53%)</title><rect x="16.9" y="1315.0" width="301.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="1326.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (218 samples, 25.53%)</title><rect x="16.9" y="1299.0" width="301.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="1310.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (218 samples, 25.53%)</title><rect x="16.9" y="1283.0" width="301.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="1294.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.23%)</title><rect x="16.9" y="1267.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.23%)</title><rect x="16.9" y="1251.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.9" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.23%)</title><rect x="16.9" y="1235.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.23%)</title><rect x="16.9" y="1219.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.23%)</title><rect x="16.9" y="1203.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.23%)</title><rect x="16.9" y="1187.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.23%)</title><rect x="16.9" y="1171.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.23%)</title><rect x="16.9" y="1155.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.23%)</title><rect x="16.9" y="1139.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.23%)</title><rect x="16.9" y="1123.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="18.3" y="1107.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$245/758325949.test (1 samples, 0.12%)</title><rect x="18.3" y="1091.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.23%)</title><rect x="19.7" y="1267.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.23%)</title><rect x="19.7" y="1251.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.7" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="21.1" y="1235.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="21.1" y="1219.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="21.1" y="1203.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="21.1" y="1187.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="21.1" y="1171.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.1" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.12%)</title><rect x="21.1" y="1155.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.1" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="21.1" y="1139.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="24.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$247/1712600570.test (1 samples, 0.12%)</title><rect x="21.1" y="1123.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.82%)</title><rect x="22.4" y="1267.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.82%)</title><rect x="22.4" y="1251.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.82%)</title><rect x="22.4" y="1235.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$242/1583415125.accept (7 samples, 0.82%)</title><rect x="22.4" y="1219.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.82%)</title><rect x="22.4" y="1203.0" width="9.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.82%)</title><rect x="22.4" y="1187.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.4" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.82%)</title><rect x="22.4" y="1171.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.12%)</title><rect x="30.7" y="1155.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (174 samples, 20.37%)</title><rect x="32.1" y="1267.0" width="240.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.1" y="1278.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$241/1812257353.accept (164 samples, 19.20%)</title><rect x="32.1" y="1251.0" width="226.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.1" y="1262.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (164 samples, 19.20%)</title><rect x="32.1" y="1235.0" width="226.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.1" y="1246.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (150 samples, 17.56%)</title><rect x="32.1" y="1219.0" width="207.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="35.1" y="1230.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (150 samples, 17.56%)</title><rect x="32.1" y="1203.0" width="207.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.1" y="1214.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (150 samples, 17.56%)</title><rect x="32.1" y="1187.0" width="207.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="35.1" y="1198.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (150 samples, 17.56%)</title><rect x="32.1" y="1171.0" width="207.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.1" y="1182.0">java/util/concurrent/Execut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (150 samples, 17.56%)</title><rect x="32.1" y="1155.0" width="207.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.1" y="1166.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (150 samples, 17.56%)</title><rect x="32.1" y="1139.0" width="207.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.1" y="1150.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (128 samples, 14.99%)</title><rect x="32.1" y="1123.0" width="176.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="35.1" y="1134.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 2.22%)</title><rect x="32.1" y="1107.0" width="26.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.1" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 2.22%)</title><rect x="32.1" y="1091.0" width="26.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.1" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 2.22%)</title><rect x="32.1" y="1075.0" width="26.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="35.1" y="1086.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (16 samples, 1.87%)</title><rect x="58.4" y="1107.0" width="22.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.4" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (16 samples, 1.87%)</title><rect x="58.4" y="1091.0" width="22.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.4" y="1102.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.12%)</title><rect x="76.3" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.23%)</title><rect x="77.7" y="1075.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.12%)</title><rect x="79.1" y="1059.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (93 samples, 10.89%)</title><rect x="80.5" y="1107.0" width="128.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.5" y="1118.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (93 samples, 10.89%)</title><rect x="80.5" y="1091.0" width="128.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.5" y="1102.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (93 samples, 10.89%)</title><rect x="80.5" y="1075.0" width="128.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="83.5" y="1086.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (93 samples, 10.89%)</title><rect x="80.5" y="1059.0" width="128.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="83.5" y="1070.0">java/util/concur..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (93 samples, 10.89%)</title><rect x="80.5" y="1043.0" width="128.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.5" y="1054.0">jdk/internal/mis..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="83.2" y="1027.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="86.2" y="1038.0"></text>
</g>
<g>
<title>Unsafe_Unpark (50 samples, 5.85%)</title><rect x="84.6" y="1027.0" width="69.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="87.6" y="1038.0">Unsafe_..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.12%)</title><rect x="88.8" y="1011.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="91.8" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.47%)</title><rect x="90.1" y="1011.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="93.1" y="1022.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.12%)</title><rect x="95.7" y="1011.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="98.7" y="1022.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.23%)</title><rect x="97.0" y="1011.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.0" y="1022.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.47%)</title><rect x="99.8" y="1011.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="102.8" y="1022.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (4 samples, 0.47%)</title><rect x="105.3" y="1011.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="108.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.35%)</title><rect x="110.9" y="1011.0" width="4.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="113.9" y="1022.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (10 samples, 1.17%)</title><rect x="115.0" y="1011.0" width="13.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="118.0" y="1022.0"></text>
</g>
<g>
<title>pthread_mutex_lock (18 samples, 2.11%)</title><rect x="128.8" y="1011.0" width="24.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="131.8" y="1022.0">p..</text>
</g>
<g>
<title>__pthread_cond_signal (40 samples, 4.68%)</title><rect x="153.7" y="1027.0" width="55.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="156.7" y="1038.0">__pth..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (22 samples, 2.58%)</title><rect x="209.0" y="1123.0" width="30.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.0" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (22 samples, 2.58%)</title><rect x="209.0" y="1107.0" width="30.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="212.0" y="1118.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.35%)</title><rect x="235.2" y="1091.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.35%)</title><rect x="235.2" y="1075.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (12 samples, 1.41%)</title><rect x="239.4" y="1219.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="242.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (12 samples, 1.41%)</title><rect x="239.4" y="1203.0" width="16.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.41%)</title><rect x="239.4" y="1187.0" width="16.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.41%)</title><rect x="239.4" y="1171.0" width="16.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.4" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.12%)</title><rect x="254.6" y="1155.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="254.6" y="1139.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.23%)</title><rect x="255.9" y="1219.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.23%)</title><rect x="255.9" y="1203.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.23%)</title><rect x="255.9" y="1187.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.23%)</title><rect x="255.9" y="1171.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 1.05%)</title><rect x="258.7" y="1251.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="261.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 1.05%)</title><rect x="258.7" y="1235.0" width="12.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="261.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.12%)</title><rect x="258.7" y="1219.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="261.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.12%)</title><rect x="258.7" y="1203.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="261.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (8 samples, 0.94%)</title><rect x="260.1" y="1219.0" width="11.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.12%)</title><rect x="271.1" y="1251.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="271.1" y="1235.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.12%)</title><rect x="271.1" y="1219.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="271.1" y="1203.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.86%)</title><rect x="272.5" y="1267.0" width="45.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.5" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.75%)</title><rect x="273.9" y="1251.0" width="44.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.9" y="1262.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (22 samples, 2.58%)</title><rect x="273.9" y="1235.0" width="30.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.9" y="1246.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (22 samples, 2.58%)</title><rect x="273.9" y="1219.0" width="30.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="276.9" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 2.46%)</title><rect x="275.3" y="1203.0" width="29.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="278.3" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (16 samples, 1.87%)</title><rect x="276.7" y="1187.0" width="22.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.7" y="1198.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (16 samples, 1.87%)</title><rect x="276.7" y="1171.0" width="22.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.7" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 1.05%)</title><rect x="279.4" y="1155.0" width="12.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.12%)</title><rect x="289.1" y="1139.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.12%)</title><rect x="289.1" y="1123.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.12%)</title><rect x="289.1" y="1107.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.12%)</title><rect x="289.1" y="1091.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.12%)</title><rect x="289.1" y="1075.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.12%)</title><rect x="289.1" y="1059.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.12%)</title><rect x="289.1" y="1043.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.12%)</title><rect x="289.1" y="1027.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.12%)</title><rect x="289.1" y="1011.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.1" y="1022.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.12%)</title><rect x="289.1" y="995.0" width="1.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="292.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="290.5" y="1139.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.12%)</title><rect x="290.5" y="1123.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="290.5" y="1107.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="290.5" y="1091.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.12%)</title><rect x="290.5" y="1075.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.12%)</title><rect x="290.5" y="1059.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.59%)</title><rect x="291.9" y="1155.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.59%)</title><rect x="291.9" y="1139.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="294.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.59%)</title><rect x="291.9" y="1123.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="294.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.59%)</title><rect x="291.9" y="1107.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.12%)</title><rect x="298.8" y="1187.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.12%)</title><rect x="298.8" y="1171.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="301.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="298.8" y="1155.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="298.8" y="1139.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.12%)</title><rect x="300.2" y="1187.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.12%)</title><rect x="300.2" y="1171.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="300.2" y="1155.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="300.2" y="1139.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.12%)</title><rect x="300.2" y="1123.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (2 samples, 0.23%)</title><rect x="301.5" y="1187.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2500 (2 samples, 0.23%)</title><rect x="301.5" y="1171.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.23%)</title><rect x="304.3" y="1235.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.23%)</title><rect x="304.3" y="1219.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="307.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.23%)</title><rect x="304.3" y="1203.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.23%)</title><rect x="304.3" y="1187.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="307.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.23%)</title><rect x="304.3" y="1171.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="307.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="305.7" y="1155.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.7" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="305.7" y="1139.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.7" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="305.7" y="1123.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.70%)</title><rect x="307.1" y="1235.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.59%)</title><rect x="307.1" y="1219.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.59%)</title><rect x="307.1" y="1203.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="310.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (5 samples, 0.59%)</title><rect x="307.1" y="1187.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="310.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (5 samples, 0.59%)</title><rect x="307.1" y="1171.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.47%)</title><rect x="307.1" y="1155.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="310.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.47%)</title><rect x="307.1" y="1139.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.47%)</title><rect x="307.1" y="1123.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="310.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (3 samples, 0.35%)</title><rect x="307.1" y="1107.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.1" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.35%)</title><rect x="307.1" y="1091.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="310.1" y="1102.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.35%)</title><rect x="307.1" y="1075.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.1" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.35%)</title><rect x="307.1" y="1059.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="310.1" y="1070.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.35%)</title><rect x="307.1" y="1043.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="310.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.35%)</title><rect x="307.1" y="1027.0" width="4.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="310.1" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.35%)</title><rect x="307.1" y="1011.0" width="4.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="310.1" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (3 samples, 0.35%)</title><rect x="307.1" y="995.0" width="4.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="310.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.12%)</title><rect x="311.2" y="1107.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.2" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="311.2" y="1091.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="311.2" y="1075.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.2" y="1086.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="311.2" y="1059.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.2" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.12%)</title><rect x="311.2" y="1043.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.2" y="1054.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.12%)</title><rect x="311.2" y="1027.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="314.2" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.12%)</title><rect x="311.2" y="1011.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.2" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.12%)</title><rect x="311.2" y="995.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.2" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.12%)</title><rect x="311.2" y="979.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.2" y="990.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.12%)</title><rect x="311.2" y="963.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.2" y="974.0"></text>
</g>
<g>
<title>java/lang/Class.getComponentType (1 samples, 0.12%)</title><rect x="311.2" y="947.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.2" y="958.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="311.2" y="931.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="314.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.12%)</title><rect x="312.6" y="1155.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="315.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasCompletedReceive (1 samples, 0.12%)</title><rect x="312.6" y="1139.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.6" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.12%)</title><rect x="312.6" y="1123.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.6" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="312.6" y="1107.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="315.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.12%)</title><rect x="314.0" y="1219.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.12%)</title><rect x="315.4" y="1235.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.isDebugEnabled (1 samples, 0.12%)</title><rect x="315.4" y="1219.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.rackId (1 samples, 0.12%)</title><rect x="315.4" y="1203.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.12%)</title><rect x="316.7" y="1235.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="316.7" y="1219.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="319.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="316.7" y="1203.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.12%)</title><rect x="316.7" y="1187.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.12%)</title><rect x="316.7" y="1171.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.12%)</title><rect x="316.7" y="1155.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="319.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (524 samples, 61.36%)</title><rect x="318.1" y="1315.0" width="724.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.1" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (524 samples, 61.36%)</title><rect x="318.1" y="1299.0" width="724.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.1" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (524 samples, 61.36%)</title><rect x="318.1" y="1283.0" width="724.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.1" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/2084571571.run (309 samples, 36.18%)</title><rect x="322.3" y="1267.0" width="426.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.3" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (309 samples, 36.18%)</title><rect x="322.3" y="1251.0" width="426.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="325.3" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (308 samples, 36.07%)</title><rect x="323.7" y="1235.0" width="425.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.7" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (307 samples, 35.95%)</title><rect x="323.7" y="1219.0" width="424.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.7" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessPip..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="329.2" y="1203.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="332.2" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (42 samples, 4.92%)</title><rect x="330.6" y="1203.0" width="58.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.6" y="1214.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (42 samples, 4.92%)</title><rect x="330.6" y="1187.0" width="58.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="333.6" y="1198.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (42 samples, 4.92%)</title><rect x="330.6" y="1171.0" width="58.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.6" y="1182.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (27 samples, 3.16%)</title><rect x="351.3" y="1155.0" width="37.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.3" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.47%)</title><rect x="351.3" y="1139.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="354.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$480/148134979.accept (2 samples, 0.23%)</title><rect x="351.3" y="1123.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="354.3" y="1134.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.23%)</title><rect x="354.1" y="1123.0" width="2.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="357.1" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 2.69%)</title><rect x="356.8" y="1139.0" width="31.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.8" y="1150.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$480/148134979.accept (21 samples, 2.46%)</title><rect x="359.6" y="1123.0" width="29.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="362.6" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (21 samples, 2.46%)</title><rect x="359.6" y="1107.0" width="29.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.6" y="1118.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (21 samples, 2.46%)</title><rect x="359.6" y="1091.0" width="29.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="362.6" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (21 samples, 2.46%)</title><rect x="359.6" y="1075.0" width="29.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.6" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (21 samples, 2.46%)</title><rect x="359.6" y="1059.0" width="29.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="362.6" y="1070.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.94%)</title><rect x="359.6" y="1043.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="362.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$468/738142561.accept (3 samples, 0.35%)</title><rect x="361.0" y="1027.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="364.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$467/1952463203.accept (1 samples, 0.12%)</title><rect x="365.1" y="1027.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.1" y="1038.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.35%)</title><rect x="366.5" y="1027.0" width="4.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="369.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.52%)</title><rect x="370.6" y="1043.0" width="18.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.6" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$468/738142561.accept (1 samples, 0.12%)</title><rect x="387.2" y="1027.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="390.2" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$0 (1 samples, 0.12%)</title><rect x="387.2" y="1011.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.2" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (88 samples, 10.30%)</title><rect x="388.6" y="1203.0" width="121.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.6" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (88 samples, 10.30%)</title><rect x="388.6" y="1187.0" width="121.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="391.6" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (88 samples, 10.30%)</title><rect x="388.6" y="1171.0" width="121.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="391.6" y="1182.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (88 samples, 10.30%)</title><rect x="388.6" y="1155.0" width="121.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.6" y="1166.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (88 samples, 10.30%)</title><rect x="388.6" y="1139.0" width="121.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.6" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (88 samples, 10.30%)</title><rect x="388.6" y="1123.0" width="121.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="391.6" y="1134.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 0.70%)</title><rect x="388.6" y="1107.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="391.6" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.59%)</title><rect x="388.6" y="1091.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.59%)</title><rect x="388.6" y="1075.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.59%)</title><rect x="388.6" y="1059.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.59%)</title><rect x="388.6" y="1043.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.59%)</title><rect x="388.6" y="1027.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.6" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.23%)</title><rect x="392.7" y="1011.0" width="2.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="395.7" y="1022.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="392.7" y="995.0" width="2.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="395.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.12%)</title><rect x="395.5" y="1091.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="398.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.12%)</title><rect x="395.5" y="1075.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.12%)</title><rect x="395.5" y="1059.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.5" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="395.5" y="1043.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="398.5" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="395.5" y="1027.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="398.5" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="395.5" y="1011.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="398.5" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="395.5" y="995.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="398.5" y="1006.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="395.5" y="979.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="398.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (36 samples, 4.22%)</title><rect x="396.9" y="1107.0" width="49.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="399.9" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.12%)</title><rect x="396.9" y="1091.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="396.9" y="1075.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="399.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (6 samples, 0.70%)</title><rect x="398.3" y="1091.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="401.3" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.35%)</title><rect x="402.4" y="1075.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.12%)</title><rect x="402.4" y="1059.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="405.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.12%)</title><rect x="402.4" y="1043.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="405.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.23%)</title><rect x="403.8" y="1059.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="406.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.23%)</title><rect x="403.8" y="1043.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="406.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.23%)</title><rect x="403.8" y="1027.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="406.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.23%)</title><rect x="403.8" y="1011.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.23%)</title><rect x="406.6" y="1091.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.23%)</title><rect x="406.6" y="1075.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.6" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.23%)</title><rect x="406.6" y="1059.0" width="2.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="409.6" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.23%)</title><rect x="406.6" y="1043.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="409.6" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.23%)</title><rect x="406.6" y="1027.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="409.6" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="406.6" y="1011.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="409.6" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="406.6" y="995.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="409.6" y="1006.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="406.6" y="979.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="409.6" y="990.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="407.9" y="995.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="410.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (27 samples, 3.16%)</title><rect x="409.3" y="1091.0" width="37.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.3" y="1102.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (27 samples, 3.16%)</title><rect x="409.3" y="1075.0" width="37.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="412.3" y="1086.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.17%)</title><rect x="409.3" y="1059.0" width="13.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.47%)</title><rect x="410.7" y="1043.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="413.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.47%)</title><rect x="410.7" y="1027.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="413.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.47%)</title><rect x="410.7" y="1011.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="413.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.59%)</title><rect x="416.2" y="1043.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="419.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (17 samples, 1.99%)</title><rect x="423.1" y="1059.0" width="23.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="426.1" y="1070.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (17 samples, 1.99%)</title><rect x="423.1" y="1043.0" width="23.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.1" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (17 samples, 1.99%)</title><rect x="423.1" y="1027.0" width="23.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="426.1" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.59%)</title><rect x="424.5" y="1011.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.23%)</title><rect x="425.9" y="995.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.23%)</title><rect x="425.9" y="979.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="428.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.23%)</title><rect x="428.7" y="995.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="431.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.23%)</title><rect x="428.7" y="979.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="431.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.23%)</title><rect x="428.7" y="963.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="431.7" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="430.0" y="947.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.70%)</title><rect x="431.4" y="1011.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="434.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.70%)</title><rect x="431.4" y="995.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="434.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.70%)</title><rect x="431.4" y="979.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="434.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.70%)</title><rect x="431.4" y="963.0" width="8.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="434.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (6 samples, 0.70%)</title><rect x="431.4" y="947.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="434.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (6 samples, 0.70%)</title><rect x="431.4" y="931.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (6 samples, 0.70%)</title><rect x="431.4" y="915.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="434.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (6 samples, 0.70%)</title><rect x="431.4" y="899.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="434.4" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (6 samples, 0.70%)</title><rect x="431.4" y="883.0" width="8.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="434.4" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.35%)</title><rect x="439.7" y="1011.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.35%)</title><rect x="439.7" y="995.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="442.7" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.35%)</title><rect x="439.7" y="979.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.7" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.35%)</title><rect x="439.7" y="963.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="442.7" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.35%)</title><rect x="439.7" y="947.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="442.7" y="958.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.35%)</title><rect x="439.7" y="931.0" width="4.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="442.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.23%)</title><rect x="443.9" y="1011.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="446.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.23%)</title><rect x="443.9" y="995.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="443.9" y="979.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="445.2" y="979.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.2" y="990.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="445.2" y="963.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.2" y="974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="445.2" y="947.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.2" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (46 samples, 5.39%)</title><rect x="446.6" y="1107.0" width="63.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.6" y="1118.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (46 samples, 5.39%)</title><rect x="446.6" y="1091.0" width="63.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="449.6" y="1102.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (46 samples, 5.39%)</title><rect x="446.6" y="1075.0" width="63.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="449.6" y="1086.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (46 samples, 5.39%)</title><rect x="446.6" y="1059.0" width="63.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="449.6" y="1070.0">com/fas..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (46 samples, 5.39%)</title><rect x="446.6" y="1043.0" width="63.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.6" y="1054.0">java/ut..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="500.5" y="1027.0" width="2.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="503.5" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.59%)</title><rect x="503.3" y="1027.0" width="6.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="506.3" y="1038.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="507.4" y="1011.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="510.4" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (166 samples, 19.44%)</title><rect x="510.2" y="1203.0" width="229.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.2" y="1214.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.35%)</title><rect x="513.0" y="1187.0" width="4.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="516.0" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.35%)</title><rect x="513.0" y="1171.0" width="4.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="516.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 3.04%)</title><rect x="517.1" y="1187.0" width="35.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.1" y="1198.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 3.04%)</title><rect x="517.1" y="1171.0" width="35.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="520.1" y="1182.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (25 samples, 2.93%)</title><rect x="518.5" y="1155.0" width="34.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="521.5" y="1166.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.41%)</title><rect x="521.2" y="1139.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.47%)</title><rect x="522.6" y="1123.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="525.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="526.8" y="1107.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.82%)</title><rect x="528.1" y="1123.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.82%)</title><rect x="528.1" y="1107.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="531.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.47%)</title><rect x="537.8" y="1139.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="540.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 0.82%)</title><rect x="543.3" y="1139.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.35%)</title><rect x="546.1" y="1123.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.1" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="546.1" y="1107.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="549.1" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="546.1" y="1091.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="549.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.23%)</title><rect x="547.5" y="1107.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="550.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.23%)</title><rect x="547.5" y="1091.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="550.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.23%)</title><rect x="550.3" y="1123.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.35%)</title><rect x="553.0" y="1187.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="556.0" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.35%)</title><rect x="553.0" y="1171.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (73 samples, 8.55%)</title><rect x="557.2" y="1187.0" width="100.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="560.2" y="1198.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (66 samples, 7.73%)</title><rect x="557.2" y="1171.0" width="91.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.2" y="1182.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (16 samples, 1.87%)</title><rect x="579.3" y="1155.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.3" y="1166.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.70%)</title><rect x="586.2" y="1139.0" width="8.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="589.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.59%)</title><rect x="587.6" y="1123.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="590.6" y="1134.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.59%)</title><rect x="587.6" y="1107.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="590.6" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.59%)</title><rect x="587.6" y="1091.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="590.6" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.23%)</title><rect x="591.7" y="1075.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="594.7" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.23%)</title><rect x="591.7" y="1059.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="594.7" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.23%)</title><rect x="591.7" y="1043.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="594.7" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="591.7" y="1027.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="594.7" y="1038.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="591.7" y="1011.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="594.7" y="1022.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="593.1" y="1011.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="596.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.23%)</title><rect x="594.5" y="1139.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="597.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.23%)</title><rect x="594.5" y="1123.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="597.5" y="1134.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.23%)</title><rect x="594.5" y="1107.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="597.5" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.23%)</title><rect x="594.5" y="1091.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="597.5" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="594.5" y="1075.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="597.5" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="595.9" y="1075.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="598.9" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="595.9" y="1059.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="598.9" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="595.9" y="1043.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="598.9" y="1054.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="595.9" y="1027.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="598.9" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.35%)</title><rect x="597.2" y="1139.0" width="4.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="600.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.12%)</title><rect x="601.4" y="1155.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="604.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.12%)</title><rect x="601.4" y="1139.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="604.4" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (33 samples, 3.86%)</title><rect x="602.8" y="1155.0" width="45.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="605.8" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (32 samples, 3.75%)</title><rect x="604.1" y="1139.0" width="44.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="607.1" y="1150.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.64%)</title><rect x="604.1" y="1123.0" width="19.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="607.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.47%)</title><rect x="618.0" y="1107.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="621.0" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.47%)</title><rect x="618.0" y="1091.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="621.0" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (18 samples, 2.11%)</title><rect x="623.5" y="1123.0" width="24.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.5" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 2.11%)</title><rect x="623.5" y="1107.0" width="24.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.5" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="623.5" y="1091.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="623.5" y="1075.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="626.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="623.5" y="1059.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 1.99%)</title><rect x="624.9" y="1091.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.9" y="1102.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.94%)</title><rect x="637.3" y="1075.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.23%)</title><rect x="645.6" y="1059.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="648.6" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.23%)</title><rect x="645.6" y="1043.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="648.6" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.23%)</title><rect x="645.6" y="1027.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.6" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="645.6" y="1011.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="648.6" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="645.6" y="995.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="648.6" y="1006.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="645.6" y="979.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="648.6" y="990.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="645.6" y="963.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="648.6" y="974.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="645.6" y="947.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="648.6" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="645.6" y="931.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="648.6" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="645.6" y="915.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="648.6" y="926.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="647.0" y="995.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="650.0" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (7 samples, 0.82%)</title><rect x="648.4" y="1171.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="651.4" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (7 samples, 0.82%)</title><rect x="648.4" y="1155.0" width="9.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="651.4" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.70%)</title><rect x="648.4" y="1139.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="651.4" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.23%)</title><rect x="648.4" y="1123.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.47%)</title><rect x="651.1" y="1123.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.1" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.12%)</title><rect x="656.7" y="1139.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="659.7" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="656.7" y="1123.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.7" y="1134.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="656.7" y="1107.0" width="1.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="659.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (45 samples, 5.27%)</title><rect x="658.0" y="1187.0" width="62.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.0" y="1198.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.12%)</title><rect x="658.0" y="1171.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="661.0" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 5.15%)</title><rect x="659.4" y="1171.0" width="60.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="662.4" y="1182.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="660.8" y="1155.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="663.8" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="660.8" y="1139.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.8" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="660.8" y="1123.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.8" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="660.8" y="1107.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="663.8" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="660.8" y="1091.0" width="1.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="663.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$397/643706904.process (14 samples, 1.64%)</title><rect x="662.2" y="1155.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (14 samples, 1.64%)</title><rect x="662.2" y="1139.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (14 samples, 1.64%)</title><rect x="662.2" y="1123.0" width="19.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="665.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.41%)</title><rect x="662.2" y="1107.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="665.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (11 samples, 1.29%)</title><rect x="663.6" y="1091.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.6" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="667.7" y="1075.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="670.7" y="1086.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.82%)</title><rect x="669.1" y="1075.0" width="9.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="672.1" y="1086.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.82%)</title><rect x="669.1" y="1059.0" width="9.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="672.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1870723838.linkToTargetMethod (2 samples, 0.23%)</title><rect x="678.8" y="1107.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/22446425.invokeStatic (2 samples, 0.23%)</title><rect x="678.8" y="1091.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.internalMemberName (2 samples, 0.23%)</title><rect x="678.8" y="1075.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.35%)</title><rect x="681.5" y="1155.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="684.5" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.12%)</title><rect x="684.3" y="1139.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="687.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.70%)</title><rect x="685.7" y="1155.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.7" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="685.7" y="1139.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="688.7" y="1150.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="685.7" y="1123.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="688.7" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="685.7" y="1107.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.7" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="685.7" y="1091.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="688.7" y="1102.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="685.7" y="1075.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="688.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.59%)</title><rect x="687.0" y="1139.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.12%)</title><rect x="694.0" y="1155.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.12%)</title><rect x="694.0" y="1139.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$472/1984894129.get$Lambda (1 samples, 0.12%)</title><rect x="694.0" y="1123.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="697.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (8 samples, 0.94%)</title><rect x="695.3" y="1155.0" width="11.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="698.3" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (5 samples, 0.59%)</title><rect x="698.1" y="1139.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="701.1" y="1150.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (5 samples, 0.59%)</title><rect x="698.1" y="1123.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="701.1" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="705.0" y="1139.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="708.0" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.12%)</title><rect x="705.0" y="1123.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="708.0" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.23%)</title><rect x="706.4" y="1155.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="709.4" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.23%)</title><rect x="706.4" y="1139.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="709.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.94%)</title><rect x="709.2" y="1155.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.94%)</title><rect x="709.2" y="1139.0" width="11.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="712.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.94%)</title><rect x="709.2" y="1123.0" width="11.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="712.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (6 samples, 0.70%)</title><rect x="709.2" y="1107.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="712.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$474/1077488917.accept (1 samples, 0.12%)</title><rect x="709.2" y="1091.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.2" y="1102.0"></text>
</g>
<g>
<title>itable stub (5 samples, 0.59%)</title><rect x="710.5" y="1091.0" width="6.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="713.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.23%)</title><rect x="717.4" y="1107.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$474/1077488917.accept (1 samples, 0.12%)</title><rect x="718.8" y="1091.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="721.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.12%)</title><rect x="718.8" y="1075.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="721.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.64%)</title><rect x="720.2" y="1187.0" width="19.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="723.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.64%)</title><rect x="720.2" y="1171.0" width="19.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.2" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.47%)</title><rect x="723.0" y="1155.0" width="5.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="726.0" y="1166.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.47%)</title><rect x="723.0" y="1139.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="726.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.94%)</title><rect x="728.5" y="1155.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.5" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.35%)</title><rect x="728.5" y="1139.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="731.5" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$475/1654757769.accept (1 samples, 0.12%)</title><rect x="731.3" y="1123.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="734.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.47%)</title><rect x="732.6" y="1139.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="735.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$475/1654757769.accept (3 samples, 0.35%)</title><rect x="734.0" y="1123.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="737.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (3 samples, 0.35%)</title><rect x="734.0" y="1107.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="737.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.35%)</title><rect x="734.0" y="1091.0" width="4.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="737.0" y="1102.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.35%)</title><rect x="734.0" y="1075.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="737.0" y="1086.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.35%)</title><rect x="734.0" y="1059.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="737.0" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.23%)</title><rect x="735.4" y="1043.0" width="2.8" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="738.4" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="735.4" y="1027.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="738.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="738.2" y="1139.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="741.2" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.12%)</title><rect x="739.6" y="1203.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="742.6" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (1 samples, 0.12%)</title><rect x="739.6" y="1187.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="742.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="739.6" y="1171.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="742.6" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.12%)</title><rect x="739.6" y="1155.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="742.6" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.59%)</title><rect x="740.9" y="1203.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="743.9" y="1214.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.59%)</title><rect x="740.9" y="1187.0" width="6.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="743.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.12%)</title><rect x="747.8" y="1219.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="750.8" y="1230.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.12%)</title><rect x="747.8" y="1203.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="750.8" y="1214.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.12%)</title><rect x="747.8" y="1187.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.8" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="747.8" y="1171.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="750.8" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="747.8" y="1155.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="750.8" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="747.8" y="1139.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="750.8" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="747.8" y="1123.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="750.8" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="747.8" y="1107.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="750.8" y="1118.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.12%)</title><rect x="747.8" y="1091.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.8" y="1102.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.12%)</title><rect x="747.8" y="1075.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.47%)</title><rect x="749.2" y="1267.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="752.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.47%)</title><rect x="749.2" y="1251.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="752.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.47%)</title><rect x="749.2" y="1235.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="752.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.47%)</title><rect x="749.2" y="1219.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="752.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (208 samples, 24.36%)</title><rect x="754.8" y="1267.0" width="287.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.8" y="1278.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (208 samples, 24.36%)</title><rect x="754.8" y="1251.0" width="287.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="757.8" y="1262.0">java/util/concurrent/LinkedBlockingQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (187 samples, 21.90%)</title><rect x="754.8" y="1235.0" width="258.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="757.8" y="1246.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.12%)</title><rect x="754.8" y="1219.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="757.8" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="754.8" y="1203.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="757.8" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="754.8" y="1187.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="757.8" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="754.8" y="1171.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.8" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="754.8" y="1155.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="757.8" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="754.8" y="1139.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="757.8" y="1150.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="754.8" y="1123.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="757.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (17 samples, 1.99%)</title><rect x="756.1" y="1219.0" width="23.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.1" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (6 samples, 0.70%)</title><rect x="779.6" y="1219.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.6" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.70%)</title><rect x="779.6" y="1203.0" width="8.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="782.6" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.23%)</title><rect x="785.2" y="1187.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="788.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (12 samples, 1.41%)</title><rect x="787.9" y="1219.0" width="16.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.9" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (12 samples, 1.41%)</title><rect x="787.9" y="1203.0" width="16.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="790.9" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (151 samples, 17.68%)</title><rect x="804.5" y="1219.0" width="208.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.5" y="1230.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.23%)</title><rect x="804.5" y="1203.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.5" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (149 samples, 17.45%)</title><rect x="807.3" y="1203.0" width="205.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="810.3" y="1214.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (144 samples, 16.86%)</title><rect x="808.6" y="1187.0" width="199.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="811.6" y="1198.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="808.6" y="1171.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="811.6" y="1182.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 1.99%)</title><rect x="810.0" y="1171.0" width="23.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="813.0" y="1182.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.59%)</title><rect x="819.7" y="1155.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="822.7" y="1166.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="825.2" y="1139.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="828.2" y="1150.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.35%)</title><rect x="826.6" y="1155.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="829.6" y="1166.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="830.7" y="1155.0" width="1.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="833.7" y="1166.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="832.1" y="1155.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="835.1" y="1166.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (7 samples, 0.82%)</title><rect x="833.5" y="1171.0" width="9.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="836.5" y="1182.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.23%)</title><rect x="843.2" y="1171.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="846.2" y="1182.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.12%)</title><rect x="845.9" y="1171.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="848.9" y="1182.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 4.68%)</title><rect x="847.3" y="1171.0" width="55.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="850.3" y="1182.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (62 samples, 7.26%)</title><rect x="902.6" y="1171.0" width="85.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="905.6" y="1182.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.35%)</title><rect x="988.3" y="1171.0" width="4.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="991.3" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.12%)</title><rect x="992.4" y="1171.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="995.4" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.23%)</title><rect x="993.8" y="1171.0" width="2.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="996.8" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.35%)</title><rect x="996.6" y="1171.0" width="4.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="999.6" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.12%)</title><rect x="1000.7" y="1171.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1003.7" y="1182.0"></text>
</g>
<g>
<title>_init (3 samples, 0.35%)</title><rect x="1002.1" y="1171.0" width="4.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1005.1" y="1182.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="1006.2" y="1171.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.2" y="1182.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.35%)</title><rect x="1007.6" y="1187.0" width="4.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1010.6" y="1198.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="1011.8" y="1187.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1014.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.12%)</title><rect x="1013.1" y="1235.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1016.1" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (20 samples, 2.34%)</title><rect x="1014.5" y="1235.0" width="27.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1017.5" y="1246.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (20 samples, 2.34%)</title><rect x="1014.5" y="1219.0" width="27.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1017.5" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (20 samples, 2.34%)</title><rect x="1014.5" y="1203.0" width="27.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1017.5" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (20 samples, 2.34%)</title><rect x="1014.5" y="1187.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1017.5" y="1198.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1042.2" y="1315.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1045.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.12%)</title><rect x="1042.2" y="1299.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1045.2" y="1310.0"></text>
</g>
<g>
<title>start_thread (106 samples, 12.41%)</title><rect x="1043.5" y="1315.0" width="146.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1046.5" y="1326.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (106 samples, 12.41%)</title><rect x="1043.5" y="1299.0" width="146.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1046.5" y="1310.0">thread_native_entr..</text>
</g>
<g>
<title>Thread::call_run() (106 samples, 12.41%)</title><rect x="1043.5" y="1283.0" width="146.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.5" y="1294.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.70%)</title><rect x="1043.5" y="1267.0" width="8.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.5" y="1278.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1043.5" y="1251.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1046.5" y="1262.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.12%)</title><rect x="1043.5" y="1235.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.5" y="1246.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="1043.5" y="1219.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.5" y="1230.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.35%)</title><rect x="1044.9" y="1251.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.9" y="1262.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.23%)</title><rect x="1044.9" y="1235.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.9" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.12%)</title><rect x="1044.9" y="1219.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1047.9" y="1230.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.12%)</title><rect x="1046.3" y="1219.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.3" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1047.7" y="1235.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.7" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1047.7" y="1219.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.7" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.12%)</title><rect x="1047.7" y="1203.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1050.7" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.12%)</title><rect x="1047.7" y="1187.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.7" y="1198.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.12%)</title><rect x="1047.7" y="1171.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1050.7" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.12%)</title><rect x="1047.7" y="1155.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.7" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.12%)</title><rect x="1047.7" y="1139.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1050.7" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.12%)</title><rect x="1047.7" y="1123.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1050.7" y="1134.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1049.1" y="1251.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1052.1" y="1262.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1049.1" y="1235.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1052.1" y="1246.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1050.4" y="1251.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.4" y="1262.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.12%)</title><rect x="1050.4" y="1235.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.4" y="1246.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.12%)</title><rect x="1050.4" y="1219.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1053.4" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (100 samples, 11.71%)</title><rect x="1051.8" y="1267.0" width="138.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.8" y="1278.0">JavaThread::threa..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (99 samples, 11.59%)</title><rect x="1051.8" y="1251.0" width="136.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1054.8" y="1262.0">CompileBroker::co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (99 samples, 11.59%)</title><rect x="1051.8" y="1235.0" width="136.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.8" y="1246.0">CompileBroker::in..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (98 samples, 11.48%)</title><rect x="1051.8" y="1219.0" width="135.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.8" y="1230.0">C2Compiler::compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (98 samples, 11.48%)</title><rect x="1051.8" y="1203.0" width="135.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.8" y="1214.0">Compile::Compile(..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.12%)</title><rect x="1051.8" y="1187.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.8" y="1198.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.12%)</title><rect x="1051.8" y="1171.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="1182.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1051.8" y="1155.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.8" y="1166.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1051.8" y="1139.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="1150.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1051.8" y="1123.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.8" y="1134.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1051.8" y="1107.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1054.8" y="1118.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1051.8" y="1091.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1054.8" y="1102.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1051.8" y="1075.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.8" y="1086.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1051.8" y="1059.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.8" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1051.8" y="1043.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.8" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1051.8" y="1027.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.8" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1051.8" y="1011.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1054.8" y="1022.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.12%)</title><rect x="1051.8" y="995.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.8" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.12%)</title><rect x="1051.8" y="979.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1054.8" y="990.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.12%)</title><rect x="1051.8" y="963.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1054.8" y="974.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (51 samples, 5.97%)</title><rect x="1053.2" y="1187.0" width="70.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.2" y="1198.0">Compile:..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.35%)</title><rect x="1053.2" y="1171.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.2" y="1182.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.12%)</title><rect x="1053.2" y="1155.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1056.2" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.12%)</title><rect x="1053.2" y="1139.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1056.2" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.12%)</title><rect x="1053.2" y="1123.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.2" y="1134.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.23%)</title><rect x="1054.6" y="1155.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1057.6" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::end_scopes(int, bool) (1 samples, 0.12%)</title><rect x="1054.6" y="1139.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1057.6" y="1150.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.12%)</title><rect x="1056.0" y="1139.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.0" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.23%)</title><rect x="1057.4" y="1171.0" width="2.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1060.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.23%)</title><rect x="1057.4" y="1155.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.12%)</title><rect x="1057.4" y="1139.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1060.4" y="1150.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.12%)</title><rect x="1057.4" y="1123.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.4" y="1134.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="1057.4" y="1107.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1060.4" y="1118.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1058.7" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.7" y="1150.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.12%)</title><rect x="1058.7" y="1123.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.7" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.12%)</title><rect x="1060.1" y="1171.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.1" y="1182.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.12%)</title><rect x="1060.1" y="1155.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1063.1" y="1166.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.12%)</title><rect x="1060.1" y="1139.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.1" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.70%)</title><rect x="1061.5" y="1171.0" width="8.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.12%)</title><rect x="1061.5" y="1155.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1064.5" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.59%)</title><rect x="1062.9" y="1155.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.9" y="1166.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.23%)</title><rect x="1062.9" y="1139.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1065.9" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.23%)</title><rect x="1065.6" y="1139.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1068.6" y="1150.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1065.6" y="1123.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1068.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.12%)</title><rect x="1067.0" y="1123.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.0" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.12%)</title><rect x="1067.0" y="1107.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.0" y="1118.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.12%)</title><rect x="1068.4" y="1139.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 4.57%)</title><rect x="1069.8" y="1171.0" width="53.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.8" y="1182.0">Phase..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.12%)</title><rect x="1071.2" y="1155.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.2" y="1166.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.23%)</title><rect x="1072.6" y="1155.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1075.6" y="1166.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.12%)</title><rect x="1073.9" y="1139.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1076.9" y="1150.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="1073.9" y="1123.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1076.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.12%)</title><rect x="1075.3" y="1155.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.12%)</title><rect x="1075.3" y="1139.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1078.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1075.3" y="1123.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1078.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.23%)</title><rect x="1076.7" y="1155.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.12%)</title><rect x="1078.1" y="1139.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1081.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1078.1" y="1123.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.59%)</title><rect x="1079.5" y="1155.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.5" y="1166.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.23%)</title><rect x="1082.2" y="1139.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1085.2" y="1150.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.12%)</title><rect x="1083.6" y="1123.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.6" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.12%)</title><rect x="1085.0" y="1139.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1088.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.12%)</title><rect x="1085.0" y="1123.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.0" y="1134.0"></text>
</g>
<g>
<title>MachSpillCopyNode::ideal_reg() const (1 samples, 0.12%)</title><rect x="1085.0" y="1107.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.70%)</title><rect x="1086.4" y="1155.0" width="8.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.4" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1087.8" y="1139.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1090.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.23%)</title><rect x="1089.1" y="1139.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.1" y="1150.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.12%)</title><rect x="1090.5" y="1123.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1093.5" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.12%)</title><rect x="1091.9" y="1139.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1094.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.12%)</title><rect x="1093.3" y="1139.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.23%)</title><rect x="1094.7" y="1155.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1097.7" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1096.0" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.12%)</title><rect x="1097.4" y="1155.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (3 samples, 0.35%)</title><rect x="1098.8" y="1155.0" width="4.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.8" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 0.82%)</title><rect x="1103.0" y="1155.0" width="9.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.0" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (5 samples, 0.59%)</title><rect x="1104.3" y="1139.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.3" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1111.2" y="1139.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1114.2" y="1150.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.12%)</title><rect x="1112.6" y="1155.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.6" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.12%)</title><rect x="1112.6" y="1139.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.6" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.12%)</title><rect x="1112.6" y="1123.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.6" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1112.6" y="1107.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.12%)</title><rect x="1114.0" y="1155.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.0" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1114.0" y="1139.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.12%)</title><rect x="1115.4" y="1155.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1118.4" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.59%)</title><rect x="1116.8" y="1155.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.8" y="1166.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.12%)</title><rect x="1118.1" y="1139.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.1" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.35%)</title><rect x="1119.5" y="1139.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="1150.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1122.3" y="1123.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1125.3" y="1134.0"></text>
</g>
<g>
<title>Compile::Optimize() (37 samples, 4.33%)</title><rect x="1123.7" y="1187.0" width="51.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.7" y="1198.0">Compi..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.23%)</title><rect x="1123.7" y="1171.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.7" y="1182.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.23%)</title><rect x="1123.7" y="1155.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.7" y="1166.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.263] (1 samples, 0.12%)</title><rect x="1125.1" y="1139.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.1" y="1150.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (13 samples, 1.52%)</title><rect x="1126.4" y="1171.0" width="18.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (13 samples, 1.52%)</title><rect x="1126.4" y="1155.0" width="18.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.4" y="1166.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.12%)</title><rect x="1126.4" y="1139.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.4" y="1150.0"></text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.12%)</title><rect x="1127.8" y="1139.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.70%)</title><rect x="1129.2" y="1139.0" width="8.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.59%)</title><rect x="1130.6" y="1123.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.35%)</title><rect x="1132.0" y="1107.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.35%)</title><rect x="1132.0" y="1091.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.0" y="1102.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.12%)</title><rect x="1136.1" y="1107.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.12%)</title><rect x="1137.5" y="1139.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.5" y="1150.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.12%)</title><rect x="1137.5" y="1123.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.12%)</title><rect x="1138.9" y="1139.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.12%)</title><rect x="1138.9" y="1123.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.12%)</title><rect x="1138.9" y="1107.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.12%)</title><rect x="1138.9" y="1091.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1141.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.35%)</title><rect x="1140.3" y="1139.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.3" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.35%)</title><rect x="1140.3" y="1123.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.3" y="1134.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1140.3" y="1107.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.3" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1140.3" y="1091.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.3" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1141.6" y="1107.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1141.6" y="1091.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.6" y="1102.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.12%)</title><rect x="1141.6" y="1075.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.6" y="1086.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1143.0" y="1107.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.0" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.12%)</title><rect x="1143.0" y="1091.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1143.0" y="1075.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.0" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1143.0" y="1059.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.0" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1143.0" y="1043.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1143.0" y="1027.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.0" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1143.0" y="1011.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.12%)</title><rect x="1144.4" y="1171.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.12%)</title><rect x="1144.4" y="1155.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1139.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1123.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1107.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1091.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1075.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1059.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1043.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1027.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="1011.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="995.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="979.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="963.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.4" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="947.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.4" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="931.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="915.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.4" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="899.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.4" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="883.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="867.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.4" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="851.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="835.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.4" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="819.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="803.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.4" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="787.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="771.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.4" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="755.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1147.4" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="739.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="723.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="707.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.4" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="691.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="675.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="659.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.4" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="643.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.4" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="627.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="611.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.4" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="595.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1144.4" y="579.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.4" y="590.0"></text>
</g>
<g>
<title>MultiNode::proj_out_or_null(unsigned int) const (1 samples, 0.12%)</title><rect x="1144.4" y="563.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="574.0"></text>
</g>
<g>
<title>Node::find_out_with(int) (1 samples, 0.12%)</title><rect x="1145.8" y="1171.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (10 samples, 1.17%)</title><rect x="1147.2" y="1171.0" width="13.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.2" y="1182.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1147.2" y="1155.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.2" y="1166.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1147.2" y="1139.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1147.2" y="1123.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.2" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.12%)</title><rect x="1147.2" y="1107.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="1118.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1147.2" y="1091.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.2" y="1102.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.12%)</title><rect x="1147.2" y="1075.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.2" y="1086.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="1147.2" y="1059.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1150.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.23%)</title><rect x="1148.5" y="1155.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.5" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1151.3" y="1155.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.3" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.59%)</title><rect x="1152.7" y="1155.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.7" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 0.59%)</title><rect x="1152.7" y="1139.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1155.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.47%)</title><rect x="1154.1" y="1123.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.47%)</title><rect x="1154.1" y="1107.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.12%)</title><rect x="1159.6" y="1155.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.12%)</title><rect x="1159.6" y="1139.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.6" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1159.6" y="1123.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="1134.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.12%)</title><rect x="1159.6" y="1107.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="1118.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.12%)</title><rect x="1159.6" y="1091.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.94%)</title><rect x="1161.0" y="1171.0" width="11.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (8 samples, 0.94%)</title><rect x="1161.0" y="1155.0" width="11.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.47%)</title><rect x="1161.0" y="1139.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.0" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1165.1" y="1123.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.1" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.12%)</title><rect x="1165.1" y="1107.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.1" y="1118.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1166.5" y="1139.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.5" y="1150.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.12%)</title><rect x="1166.5" y="1123.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.5" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.12%)</title><rect x="1167.9" y="1139.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.9" y="1150.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1169.3" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.3" y="1150.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1169.3" y="1123.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.3" y="1134.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1170.7" y="1139.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.7" y="1150.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1170.7" y="1123.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.7" y="1134.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.12%)</title><rect x="1170.7" y="1107.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.7" y="1118.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.12%)</title><rect x="1172.0" y="1171.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.12%)</title><rect x="1172.0" y="1155.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.0" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1172.0" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.0" y="1150.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1173.4" y="1171.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1173.4" y="1155.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.4" y="1166.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.12%)</title><rect x="1173.4" y="1139.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.4" y="1150.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (1 samples, 0.12%)</title><rect x="1174.8" y="1187.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="1198.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.12%)</title><rect x="1174.8" y="1171.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.8" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1174.8" y="1155.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.8" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1174.8" y="1139.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1174.8" y="1123.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1174.8" y="1107.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1174.8" y="1091.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1174.8" y="1075.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1174.8" y="1059.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1174.8" y="1043.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1174.8" y="1027.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1174.8" y="1011.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1174.8" y="995.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1174.8" y="979.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1174.8" y="963.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1174.8" y="947.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.12%)</title><rect x="1174.8" y="931.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>MergeMemNode::set_base_memory(Node*) (1 samples, 0.12%)</title><rect x="1174.8" y="915.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.12%)</title><rect x="1174.8" y="899.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.12%)</title><rect x="1174.8" y="883.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.94%)</title><rect x="1176.2" y="1187.0" width="11.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.2" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.94%)</title><rect x="1176.2" y="1171.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.94%)</title><rect x="1176.2" y="1155.0" width="11.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.94%)</title><rect x="1176.2" y="1139.0" width="11.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.2" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.94%)</title><rect x="1176.2" y="1123.0" width="11.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.2" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.94%)</title><rect x="1176.2" y="1107.0" width="11.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.70%)</title><rect x="1176.2" y="1091.0" width="8.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.2" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.70%)</title><rect x="1176.2" y="1075.0" width="8.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.2" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.70%)</title><rect x="1176.2" y="1059.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.70%)</title><rect x="1176.2" y="1043.0" width="8.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.2" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.70%)</title><rect x="1176.2" y="1027.0" width="8.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.2" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.70%)</title><rect x="1176.2" y="1011.0" width="8.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1176.2" y="995.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.2" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1176.2" y="979.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.2" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1176.2" y="963.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1176.2" y="947.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.2" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1176.2" y="931.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1176.2" y="915.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.2" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1176.2" y="899.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.2" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1176.2" y="883.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.2" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1176.2" y="867.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.2" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.35%)</title><rect x="1177.6" y="995.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.35%)</title><rect x="1177.6" y="979.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.35%)</title><rect x="1177.6" y="963.0" width="4.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.35%)</title><rect x="1177.6" y="947.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.35%)</title><rect x="1177.6" y="931.0" width="4.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.35%)</title><rect x="1177.6" y="915.0" width="4.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1177.6" y="899.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.6" y="910.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1177.6" y="883.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="894.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1177.6" y="867.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1177.6" y="851.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.6" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1177.6" y="835.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1177.6" y="819.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1177.6" y="803.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1177.6" y="787.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1177.6" y="771.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.12%)</title><rect x="1177.6" y="755.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="766.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1177.6" y="739.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="750.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1177.6" y="723.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.6" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1177.6" y="707.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="718.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.12%)</title><rect x="1177.6" y="691.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.6" y="702.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.12%)</title><rect x="1177.6" y="675.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.6" y="686.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.12%)</title><rect x="1177.6" y="659.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.6" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1178.9" y="899.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1178.9" y="883.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1178.9" y="867.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1178.9" y="851.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1178.9" y="835.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.9" y="819.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.9" y="803.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.9" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.9" y="787.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.9" y="771.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.9" y="755.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.9" y="739.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.9" y="723.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.9" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1178.9" y="707.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.9" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1178.9" y="691.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.9" y="702.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.12%)</title><rect x="1178.9" y="675.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.9" y="686.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.12%)</title><rect x="1178.9" y="659.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="670.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle const&amp;, Thread*) (1 samples, 0.12%)</title><rect x="1178.9" y="643.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.9" y="654.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.12%)</title><rect x="1178.9" y="627.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.9" y="638.0"></text>
</g>
<g>
<title>SymbolTable::lookup_only(char const*, int, unsigned int&amp;) (1 samples, 0.12%)</title><rect x="1178.9" y="611.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1180.3" y="819.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1180.3" y="803.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="814.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.12%)</title><rect x="1180.3" y="787.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.3" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.12%)</title><rect x="1180.3" y="771.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.12%)</title><rect x="1180.3" y="755.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.3" y="766.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.12%)</title><rect x="1180.3" y="739.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.12%)</title><rect x="1180.3" y="723.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1180.3" y="707.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.3" y="718.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1180.3" y="691.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.3" y="702.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.12%)</title><rect x="1180.3" y="675.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1180.3" y="659.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1180.3" y="643.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.3" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1180.3" y="627.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.3" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1180.3" y="611.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.3" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1180.3" y="595.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1180.3" y="579.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.3" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1181.7" y="995.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1181.7" y="979.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1181.7" y="963.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1181.7" y="947.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1181.7" y="931.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1181.7" y="915.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1181.7" y="899.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1181.7" y="883.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1181.7" y="867.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1181.7" y="851.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1181.7" y="835.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1181.7" y="819.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1181.7" y="803.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.7" y="787.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.7" y="771.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.7" y="755.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.7" y="739.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.7" y="723.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.7" y="707.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.7" y="691.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.7" y="675.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.7" y="659.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.7" y="643.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.7" y="627.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.7" y="611.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.7" y="595.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.7" y="579.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.7" y="563.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.7" y="547.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.7" y="531.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.7" y="515.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.7" y="499.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.7" y="483.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.7" y="467.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.7" y="451.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.7" y="435.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.7" y="419.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.7" y="403.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.7" y="387.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.7" y="371.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.7" y="355.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.7" y="339.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.7" y="323.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1181.7" y="307.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1181.7" y="291.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1181.7" y="275.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1181.7" y="259.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1181.7" y="243.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1181.7" y="227.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1181.7" y="211.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1181.7" y="195.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1181.7" y="179.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.7" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1181.7" y="163.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1181.7" y="147.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.7" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1181.7" y="131.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="142.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.12%)</title><rect x="1181.7" y="115.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="126.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.12%)</title><rect x="1181.7" y="99.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="110.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.12%)</title><rect x="1181.7" y="83.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.7" y="94.0"></text>
</g>
<g>
<title>LinkResolver::lookup_polymorphic_method(LinkInfo const&amp;, Handle*, Handle*, Thread*) (1 samples, 0.12%)</title><rect x="1181.7" y="67.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="78.0"></text>
</g>
<g>
<title>MethodHandles::lookup_basic_type_signature(Symbol*, bool, Thread*) (1 samples, 0.12%)</title><rect x="1181.7" y="51.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="62.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.12%)</title><rect x="1181.7" y="35.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1184.7" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1183.1" y="787.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1183.1" y="771.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1183.1" y="755.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1183.1" y="739.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1183.1" y="723.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1183.1" y="707.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.12%)</title><rect x="1183.1" y="691.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.12%)</title><rect x="1183.1" y="675.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.12%)</title><rect x="1183.1" y="659.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1183.1" y="643.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.12%)</title><rect x="1183.1" y="627.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1183.1" y="611.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1184.5" y="1091.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1184.5" y="1075.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1184.5" y="1059.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1184.5" y="1043.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1184.5" y="1027.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1184.5" y="1011.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1184.5" y="995.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1184.5" y="979.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1184.5" y="963.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1184.5" y="947.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1184.5" y="931.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1184.5" y="915.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1184.5" y="899.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.5" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1184.5" y="883.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1184.5" y="867.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1184.5" y="851.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.5" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1184.5" y="835.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.5" y="819.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.5" y="803.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.5" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.5" y="787.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.5" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1184.5" y="771.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1184.5" y="755.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1184.5" y="739.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1184.5" y="723.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1184.5" y="707.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.5" y="718.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1184.5" y="691.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="702.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.12%)</title><rect x="1184.5" y="675.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_dest() const (1 samples, 0.12%)</title><rect x="1185.9" y="819.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.2" y="1219.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="1230.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.2" y="1203.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.2" y="1214.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.12%)</title><rect x="1187.2" y="1187.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.12%)</title><rect x="1187.2" y="1171.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.2" y="1182.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.12%)</title><rect x="1187.2" y="1155.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.2" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.12%)</title><rect x="1187.2" y="1139.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.12%)</title><rect x="1187.2" y="1123.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.2" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.12%)</title><rect x="1187.2" y="1107.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.12%)</title><rect x="1187.2" y="1091.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.12%)</title><rect x="1187.2" y="1075.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.2" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.12%)</title><rect x="1187.2" y="1059.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.2" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.12%)</title><rect x="1187.2" y="1043.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.2" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.12%)</title><rect x="1187.2" y="1027.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.12%)</title><rect x="1187.2" y="1011.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.2" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.12%)</title><rect x="1187.2" y="995.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.2" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.12%)</title><rect x="1187.2" y="979.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.2" y="990.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1187.2" y="963.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1190.2" y="974.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.12%)</title><rect x="1188.6" y="1251.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.6" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.12%)</title><rect x="1188.6" y="1235.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.6" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.12%)</title><rect x="1188.6" y="1219.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.6" y="1230.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.12%)</title><rect x="1188.6" y="1203.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.6" y="1214.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (1 samples, 0.12%)</title><rect x="1188.6" y="1187.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.6" y="1198.0"></text>
</g>
</g>
</svg>
