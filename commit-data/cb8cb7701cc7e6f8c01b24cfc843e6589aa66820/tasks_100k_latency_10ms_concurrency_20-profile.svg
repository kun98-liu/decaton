<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (136 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>[deoptimization] (1 samples, 0.74%)</title><rect x="10.0" y="787.0" width="8.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>Deoptimization::uncommon_trap(JavaThread*, int, int) (1 samples, 0.74%)</title><rect x="10.0" y="771.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>Deoptimization::fetch_unroll_info_helper(JavaThread*, int) (1 samples, 0.74%)</title><rect x="10.0" y="755.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>vframeArray::allocate(JavaThread*, int, GrowableArray&lt;compiledVFrame*&gt;*, RegisterMap*, frame, frame, frame, bool) (1 samples, 0.74%)</title><rect x="10.0" y="739.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>vframeArrayElement::fill_in(compiledVFrame*, bool) (1 samples, 0.74%)</title><rect x="10.0" y="723.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>compiledVFrame::monitors() const (1 samples, 0.74%)</title><rect x="10.0" y="707.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.74%)</title><rect x="10.0" y="691.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.74%)</title><rect x="10.0" y="675.0" width="8.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.74%)</title><rect x="18.7" y="787.0" width="8.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="21.7" y="798.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.74%)</title><rect x="18.7" y="771.0" width="8.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="21.7" y="782.0"></text>
</g>
<g>
<title>__GI__IO_padn (1 samples, 0.74%)</title><rect x="18.7" y="755.0" width="8.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="21.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (9 samples, 6.62%)</title><rect x="27.4" y="787.0" width="78.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.4" y="798.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (9 samples, 6.62%)</title><rect x="27.4" y="771.0" width="78.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.4" y="782.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (9 samples, 6.62%)</title><rect x="27.4" y="755.0" width="78.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="30.4" y="766.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.74%)</title><rect x="27.4" y="739.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.74%)</title><rect x="27.4" y="723.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.74%)</title><rect x="27.4" y="707.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 2.21%)</title><rect x="36.0" y="739.0" width="26.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.0" y="750.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$241/1389201117.accept (2 samples, 1.47%)</title><rect x="36.0" y="723.0" width="17.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="39.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 1.47%)</title><rect x="36.0" y="707.0" width="17.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="39.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 1.47%)</title><rect x="36.0" y="691.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="39.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.47%)</title><rect x="36.0" y="675.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.47%)</title><rect x="36.0" y="659.0" width="17.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.47%)</title><rect x="36.0" y="643.0" width="17.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.47%)</title><rect x="36.0" y="627.0" width="17.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="39.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.47%)</title><rect x="36.0" y="611.0" width="17.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.74%)</title><rect x="36.0" y="595.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="39.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.74%)</title><rect x="36.0" y="579.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.0" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.74%)</title><rect x="44.7" y="595.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.74%)</title><rect x="44.7" y="579.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.74%)</title><rect x="44.7" y="563.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.74%)</title><rect x="44.7" y="547.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.74%)</title><rect x="53.4" y="723.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.74%)</title><rect x="53.4" y="707.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.74%)</title><rect x="53.4" y="691.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.74%)</title><rect x="53.4" y="675.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="56.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.74%)</title><rect x="53.4" y="659.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.74%)</title><rect x="53.4" y="643.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 3.68%)</title><rect x="62.1" y="739.0" width="43.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.1" y="750.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (5 samples, 3.68%)</title><rect x="62.1" y="723.0" width="43.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.1" y="734.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.68%)</title><rect x="62.1" y="707.0" width="43.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.1" y="718.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.47%)</title><rect x="62.1" y="691.0" width="17.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.47%)</title><rect x="62.1" y="675.0" width="17.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.74%)</title><rect x="62.1" y="659.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.74%)</title><rect x="62.1" y="643.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.74%)</title><rect x="62.1" y="627.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.74%)</title><rect x="62.1" y="611.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.74%)</title><rect x="62.1" y="595.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.74%)</title><rect x="62.1" y="579.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.74%)</title><rect x="62.1" y="563.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.74%)</title><rect x="62.1" y="547.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.74%)</title><rect x="62.1" y="531.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.1" y="542.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.74%)</title><rect x="62.1" y="515.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.74%)</title><rect x="62.1" y="499.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.1" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.74%)</title><rect x="62.1" y="483.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.1" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.74%)</title><rect x="62.1" y="467.0" width="8.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.1" y="478.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.74%)</title><rect x="62.1" y="451.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="65.1" y="462.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (1 samples, 0.74%)</title><rect x="62.1" y="435.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.74%)</title><rect x="70.7" y="659.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.74%)</title><rect x="70.7" y="643.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.74%)</title><rect x="70.7" y="627.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.74%)</title><rect x="70.7" y="611.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.74%)</title><rect x="70.7" y="595.0" width="8.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.74%)</title><rect x="70.7" y="579.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.&lt;init&gt; (1 samples, 0.74%)</title><rect x="70.7" y="563.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="73.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (3 samples, 2.21%)</title><rect x="79.4" y="691.0" width="26.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="82.4" y="702.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.74%)</title><rect x="79.4" y="675.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="82.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.appendRelaxed (1 samples, 0.74%)</title><rect x="79.4" y="659.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.4" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.74%)</title><rect x="79.4" y="643.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="82.4" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.74%)</title><rect x="79.4" y="627.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Class.cast (1 samples, 0.74%)</title><rect x="79.4" y="611.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="82.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.74%)</title><rect x="88.1" y="675.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.74%)</title><rect x="88.1" y="659.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.1" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.74%)</title><rect x="88.1" y="643.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$466/1758526785.accept (1 samples, 0.74%)</title><rect x="88.1" y="627.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.74%)</title><rect x="96.8" y="675.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.8" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.74%)</title><rect x="96.8" y="659.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.74%)</title><rect x="96.8" y="643.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.74%)</title><rect x="96.8" y="627.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.8" y="638.0"></text>
</g>
<g>
<title>java/lang/Thread.run (50 samples, 36.76%)</title><rect x="105.4" y="787.0" width="433.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.4" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (50 samples, 36.76%)</title><rect x="105.4" y="771.0" width="433.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.4" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (50 samples, 36.76%)</title><rect x="105.4" y="755.0" width="433.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="108.4" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/1601498639.run (49 samples, 36.03%)</title><rect x="105.4" y="739.0" width="425.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.4" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (49 samples, 36.03%)</title><rect x="105.4" y="723.0" width="425.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.4" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (49 samples, 36.03%)</title><rect x="105.4" y="707.0" width="425.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="108.4" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorU..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (49 samples, 36.03%)</title><rect x="105.4" y="691.0" width="425.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.4" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessPip..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (6 samples, 4.41%)</title><rect x="105.4" y="675.0" width="52.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="108.4" y="686.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 4.41%)</title><rect x="105.4" y="659.0" width="52.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="108.4" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 4.41%)</title><rect x="105.4" y="643.0" width="52.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.4" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.94%)</title><rect x="122.8" y="627.0" width="34.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="125.8" y="638.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.74%)</title><rect x="122.8" y="611.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="125.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.47%)</title><rect x="131.5" y="611.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="134.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$476/1431343261.accept (2 samples, 1.47%)</title><rect x="131.5" y="595.0" width="17.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (2 samples, 1.47%)</title><rect x="131.5" y="579.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.47%)</title><rect x="131.5" y="563.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.47%)</title><rect x="131.5" y="547.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="134.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.47%)</title><rect x="131.5" y="531.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.47%)</title><rect x="131.5" y="515.0" width="17.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.74%)</title><rect x="148.8" y="611.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.8" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (12 samples, 8.82%)</title><rect x="157.5" y="675.0" width="104.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.5" y="686.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (12 samples, 8.82%)</title><rect x="157.5" y="659.0" width="104.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.5" y="670.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 8.82%)</title><rect x="157.5" y="643.0" width="104.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.5" y="654.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 8.82%)</title><rect x="157.5" y="627.0" width="104.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="638.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 8.82%)</title><rect x="157.5" y="611.0" width="104.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="160.5" y="622.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 8.82%)</title><rect x="157.5" y="595.0" width="104.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="160.5" y="606.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 2.21%)</title><rect x="157.5" y="579.0" width="26.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.5" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 2.21%)</title><rect x="157.5" y="563.0" width="26.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="160.5" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 2.21%)</title><rect x="157.5" y="547.0" width="26.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.5" y="558.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.74%)</title><rect x="157.5" y="531.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="160.5" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.74%)</title><rect x="157.5" y="515.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="160.5" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.74%)</title><rect x="157.5" y="499.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="160.5" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.74%)</title><rect x="157.5" y="483.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="160.5" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.74%)</title><rect x="157.5" y="467.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="160.5" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.74%)</title><rect x="157.5" y="451.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="160.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.74%)</title><rect x="157.5" y="435.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="160.5" y="446.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.74%)</title><rect x="157.5" y="419.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="160.5" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.74%)</title><rect x="157.5" y="403.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="160.5" y="414.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.74%)</title><rect x="157.5" y="387.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="160.5" y="398.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.74%)</title><rect x="157.5" y="371.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="160.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 1.47%)</title><rect x="166.2" y="531.0" width="17.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="169.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.74%)</title><rect x="166.2" y="515.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="169.2" y="526.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.74%)</title><rect x="166.2" y="499.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="169.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.74%)</title><rect x="166.2" y="483.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="169.2" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.74%)</title><rect x="166.2" y="467.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="169.2" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.74%)</title><rect x="166.2" y="451.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="169.2" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.74%)</title><rect x="166.2" y="435.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="169.2" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.74%)</title><rect x="166.2" y="419.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.2" y="430.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.74%)</title><rect x="166.2" y="403.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="169.2" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.74%)</title><rect x="166.2" y="387.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="169.2" y="398.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.74%)</title><rect x="166.2" y="371.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="169.2" y="382.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.74%)</title><rect x="166.2" y="355.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="169.2" y="366.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.74%)</title><rect x="166.2" y="339.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="169.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.74%)</title><rect x="174.9" y="515.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (1 samples, 0.74%)</title><rect x="174.9" y="499.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (1 samples, 0.74%)</title><rect x="174.9" y="483.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 5.88%)</title><rect x="183.5" y="579.0" width="69.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="186.5" y="590.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 5.88%)</title><rect x="183.5" y="563.0" width="69.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="186.5" y="574.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 5.88%)</title><rect x="183.5" y="547.0" width="69.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="186.5" y="558.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 2.21%)</title><rect x="183.5" y="531.0" width="26.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.5" y="542.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.74%)</title><rect x="183.5" y="515.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="186.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.74%)</title><rect x="183.5" y="499.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="186.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.74%)</title><rect x="183.5" y="483.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 1.47%)</title><rect x="192.2" y="515.0" width="17.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 3.68%)</title><rect x="209.6" y="531.0" width="43.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.6" y="542.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 3.68%)</title><rect x="209.6" y="515.0" width="43.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.6" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 3.68%)</title><rect x="209.6" y="499.0" width="43.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.6" y="510.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.47%)</title><rect x="209.6" y="483.0" width="17.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.74%)</title><rect x="209.6" y="467.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.74%)</title><rect x="209.6" y="451.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.74%)</title><rect x="209.6" y="435.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="212.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.74%)</title><rect x="209.6" y="419.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.74%)</title><rect x="218.2" y="467.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="221.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.74%)</title><rect x="226.9" y="483.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.74%)</title><rect x="226.9" y="467.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.74%)</title><rect x="226.9" y="451.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.74%)</title><rect x="226.9" y="435.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.9" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.74%)</title><rect x="226.9" y="419.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.74%)</title><rect x="235.6" y="483.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.74%)</title><rect x="235.6" y="467.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.74%)</title><rect x="235.6" y="451.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.74%)</title><rect x="235.6" y="435.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="238.6" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.74%)</title><rect x="235.6" y="419.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.6" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.74%)</title><rect x="235.6" y="403.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.74%)</title><rect x="244.3" y="483.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="247.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.74%)</title><rect x="252.9" y="579.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.74%)</title><rect x="252.9" y="563.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.74%)</title><rect x="252.9" y="547.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.74%)</title><rect x="252.9" y="531.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.74%)</title><rect x="252.9" y="515.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="255.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (31 samples, 22.79%)</title><rect x="261.6" y="675.0" width="269.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="264.6" y="686.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (4 samples, 2.94%)</title><rect x="261.6" y="659.0" width="34.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.6" y="670.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.74%)</title><rect x="261.6" y="643.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="264.6" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 2.21%)</title><rect x="270.3" y="643.0" width="26.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.3" y="654.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 2.21%)</title><rect x="270.3" y="627.0" width="26.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="273.3" y="638.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.47%)</title><rect x="270.3" y="611.0" width="17.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.74%)</title><rect x="287.6" y="611.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.74%)</title><rect x="287.6" y="595.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (5 samples, 3.68%)</title><rect x="296.3" y="659.0" width="43.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="299.3" y="670.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (5 samples, 3.68%)</title><rect x="296.3" y="643.0" width="43.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="299.3" y="654.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.47%)</title><rect x="313.7" y="627.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.7" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.74%)</title><rect x="331.0" y="627.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="334.0" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.74%)</title><rect x="331.0" y="611.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="334.0" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.74%)</title><rect x="331.0" y="595.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="334.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.74%)</title><rect x="331.0" y="579.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.0" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.74%)</title><rect x="331.0" y="563.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="334.0" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.74%)</title><rect x="331.0" y="547.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="334.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (17 samples, 12.50%)</title><rect x="339.7" y="659.0" width="147.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="342.7" y="670.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (17 samples, 12.50%)</title><rect x="339.7" y="643.0" width="147.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.7" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$397/987960907.process (12 samples, 8.82%)</title><rect x="357.1" y="627.0" width="104.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.1" y="638.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (12 samples, 8.82%)</title><rect x="357.1" y="611.0" width="104.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.1" y="622.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (12 samples, 8.82%)</title><rect x="357.1" y="595.0" width="104.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="360.1" y="606.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (11 samples, 8.09%)</title><rect x="357.1" y="579.0" width="95.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.1" y="590.0">com/linecor..</text>
</g>
<g>
<title>java/lang/Thread.sleep (11 samples, 8.09%)</title><rect x="357.1" y="563.0" width="95.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.1" y="574.0">java/lang/T..</text>
</g>
<g>
<title>JVM_Sleep (10 samples, 7.35%)</title><rect x="365.7" y="547.0" width="86.8" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="368.7" y="558.0">JVM_Sleep</text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 2.21%)</title><rect x="365.7" y="531.0" width="26.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="368.7" y="542.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (2 samples, 1.47%)</title><rect x="391.8" y="531.0" width="17.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="394.8" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.74%)</title><rect x="409.1" y="531.0" width="8.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="412.1" y="542.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (4 samples, 2.94%)</title><rect x="417.8" y="531.0" width="34.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="420.8" y="542.0">os..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 1.47%)</title><rect x="426.5" y="515.0" width="17.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="429.5" y="526.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.74%)</title><rect x="443.8" y="515.0" width="8.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="446.8" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.74%)</title><rect x="452.5" y="579.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.74%)</title><rect x="461.2" y="627.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.2" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.74%)</title><rect x="461.2" y="611.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.47%)</title><rect x="469.9" y="627.0" width="17.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="472.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.47%)</title><rect x="469.9" y="611.0" width="17.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.47%)</title><rect x="469.9" y="595.0" width="17.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 1.47%)</title><rect x="469.9" y="579.0" width="17.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.9" y="590.0"></text>
</g>
<g>
<title>itable stub (2 samples, 1.47%)</title><rect x="469.9" y="563.0" width="17.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="472.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 3.68%)</title><rect x="487.2" y="659.0" width="43.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="490.2" y="670.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 3.68%)</title><rect x="487.2" y="643.0" width="43.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="490.2" y="654.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.47%)</title><rect x="513.2" y="627.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="516.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.74%)</title><rect x="513.2" y="611.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.2" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.74%)</title><rect x="521.9" y="611.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="524.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$475/1366232680.accept (1 samples, 0.74%)</title><rect x="521.9" y="595.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (1 samples, 0.74%)</title><rect x="521.9" y="579.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.74%)</title><rect x="521.9" y="563.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.9" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.74%)</title><rect x="521.9" y="547.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="524.9" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.74%)</title><rect x="521.9" y="531.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.9" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.74%)</title><rect x="530.6" y="739.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.74%)</title><rect x="530.6" y="723.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.74%)</title><rect x="539.3" y="787.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="542.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.74%)</title><rect x="539.3" y="771.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="542.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.74%)</title><rect x="539.3" y="755.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="542.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.74%)</title><rect x="539.3" y="739.0" width="8.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="542.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.74%)</title><rect x="539.3" y="723.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="542.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.74%)</title><rect x="539.3" y="707.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="542.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.74%)</title><rect x="539.3" y="691.0" width="8.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="542.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.74%)</title><rect x="539.3" y="675.0" width="8.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="542.3" y="686.0"></text>
</g>
<g>
<title>start_thread (74 samples, 54.41%)</title><rect x="547.9" y="787.0" width="642.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="550.9" y="798.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 54.41%)</title><rect x="547.9" y="771.0" width="642.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="550.9" y="782.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (74 samples, 54.41%)</title><rect x="547.9" y="755.0" width="642.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.9" y="766.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 9.56%)</title><rect x="547.9" y="739.0" width="112.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="550.9" y="750.0">GangWorker::lo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 9.56%)</title><rect x="547.9" y="723.0" width="112.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="550.9" y="734.0">G1ParTask::wor..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (11 samples, 8.09%)</title><rect x="547.9" y="707.0" width="95.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="550.9" y="718.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.74%)</title><rect x="547.9" y="691.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="550.9" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (10 samples, 7.35%)</title><rect x="556.6" y="691.0" width="86.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="559.6" y="702.0">G1ParScanT..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 2.21%)</title><rect x="608.7" y="675.0" width="26.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="611.7" y="686.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 1.47%)</title><rect x="617.4" y="659.0" width="17.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="620.4" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.74%)</title><rect x="634.7" y="675.0" width="8.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="637.7" y="686.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 1.47%)</title><rect x="643.4" y="707.0" width="17.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="646.4" y="718.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 1.47%)</title><rect x="643.4" y="691.0" width="17.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="646.4" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 1.47%)</title><rect x="643.4" y="675.0" width="17.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="646.4" y="686.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 1.47%)</title><rect x="643.4" y="659.0" width="17.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="646.4" y="670.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 1.47%)</title><rect x="643.4" y="643.0" width="17.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="646.4" y="654.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.74%)</title><rect x="643.4" y="627.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="646.4" y="638.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.74%)</title><rect x="652.1" y="627.0" width="8.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="655.1" y="638.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.74%)</title><rect x="652.1" y="611.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="655.1" y="622.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.74%)</title><rect x="652.1" y="595.0" width="8.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="655.1" y="606.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (61 samples, 44.85%)</title><rect x="660.7" y="739.0" width="529.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.7" y="750.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (61 samples, 44.85%)</title><rect x="660.7" y="723.0" width="529.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="663.7" y="734.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (61 samples, 44.85%)</title><rect x="660.7" y="707.0" width="529.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.7" y="718.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (59 samples, 43.38%)</title><rect x="660.7" y="691.0" width="511.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="663.7" y="702.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (59 samples, 43.38%)</title><rect x="660.7" y="675.0" width="511.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="663.7" y="686.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (37 samples, 27.21%)</title><rect x="660.7" y="659.0" width="321.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="663.7" y="670.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.74%)</title><rect x="660.7" y="643.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="663.7" y="654.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.74%)</title><rect x="660.7" y="627.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="663.7" y="638.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.74%)</title><rect x="660.7" y="611.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="663.7" y="622.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.74%)</title><rect x="660.7" y="595.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="663.7" y="606.0"></text>
</g>
<g>
<title>cmpFastUnlockNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.74%)</title><rect x="660.7" y="579.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="663.7" y="590.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.47%)</title><rect x="669.4" y="643.0" width="17.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="672.4" y="654.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 1.47%)</title><rect x="669.4" y="627.0" width="17.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="672.4" y="638.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.74%)</title><rect x="678.1" y="611.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="681.1" y="622.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.74%)</title><rect x="678.1" y="595.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="681.1" y="606.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 3.68%)</title><rect x="686.8" y="643.0" width="43.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="689.8" y="654.0">Matc..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.74%)</title><rect x="686.8" y="627.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="689.8" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.94%)</title><rect x="695.4" y="627.0" width="34.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="698.4" y="638.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 1.47%)</title><rect x="704.1" y="611.0" width="17.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="707.1" y="622.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.74%)</title><rect x="721.5" y="611.0" width="8.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="724.5" y="622.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.74%)</title><rect x="721.5" y="595.0" width="8.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="724.5" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.94%)</title><rect x="730.1" y="643.0" width="34.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="733.1" y="654.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 2.94%)</title><rect x="730.1" y="627.0" width="34.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="733.1" y="638.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.74%)</title><rect x="730.1" y="611.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="733.1" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 1.47%)</title><rect x="738.8" y="611.0" width="17.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="741.8" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.74%)</title><rect x="747.5" y="595.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="750.5" y="606.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.74%)</title><rect x="747.5" y="579.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="750.5" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.74%)</title><rect x="756.2" y="611.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="759.2" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.74%)</title><rect x="756.2" y="595.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="759.2" y="606.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="756.2" y="579.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="759.2" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 18.38%)</title><rect x="764.9" y="643.0" width="216.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="767.9" y="654.0">PhaseChaitin::Register_Alloc..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.74%)</title><rect x="764.9" y="627.0" width="8.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="767.9" y="638.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 1.47%)</title><rect x="773.5" y="627.0" width="17.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="776.5" y="638.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.74%)</title><rect x="782.2" y="611.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.2" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 2.94%)</title><rect x="790.9" y="627.0" width="34.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="793.9" y="638.0">Ph..</text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.74%)</title><rect x="808.2" y="611.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="811.2" y="622.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.74%)</title><rect x="816.9" y="611.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="819.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 2.94%)</title><rect x="825.6" y="627.0" width="34.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="828.6" y="638.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.74%)</title><rect x="834.3" y="611.0" width="8.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="837.3" y="622.0"></text>
</g>
<g>
<title>MachNode::Opcode() const (1 samples, 0.74%)</title><rect x="842.9" y="611.0" width="8.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="845.9" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.74%)</title><rect x="851.6" y="611.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="854.6" y="622.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.74%)</title><rect x="851.6" y="595.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.6" y="606.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.74%)</title><rect x="860.3" y="627.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="863.3" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 3.68%)</title><rect x="869.0" y="627.0" width="43.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="872.0" y="638.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 2.21%)</title><rect x="886.3" y="611.0" width="26.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="889.3" y="622.0">P..</text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 2.21%)</title><rect x="912.4" y="627.0" width="26.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.4" y="638.0">P..</text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 2.21%)</title><rect x="912.4" y="611.0" width="26.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="915.4" y="622.0">P..</text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.74%)</title><rect x="929.7" y="595.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="932.7" y="606.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.74%)</title><rect x="929.7" y="579.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="932.7" y="590.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.94%)</title><rect x="938.4" y="627.0" width="34.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.4" y="638.0">Ph..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.74%)</title><rect x="947.1" y="611.0" width="8.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="950.1" y="622.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.74%)</title><rect x="947.1" y="595.0" width="8.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="950.1" y="606.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.47%)</title><rect x="955.7" y="611.0" width="17.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="958.7" y="622.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.74%)</title><rect x="973.1" y="627.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="976.1" y="638.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.74%)</title><rect x="973.1" y="611.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="976.1" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (18 samples, 13.24%)</title><rect x="981.8" y="659.0" width="156.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.8" y="670.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 5.15%)</title><rect x="981.8" y="643.0" width="60.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="984.8" y="654.0">Compil..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 5.15%)</title><rect x="981.8" y="627.0" width="60.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="984.8" y="638.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.74%)</title><rect x="981.8" y="611.0" width="8.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="984.8" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 3.68%)</title><rect x="990.4" y="611.0" width="43.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="993.4" y="622.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 3.68%)</title><rect x="990.4" y="595.0" width="43.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="993.4" y="606.0">Phas..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.74%)</title><rect x="990.4" y="579.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="993.4" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 2.21%)</title><rect x="999.1" y="579.0" width="26.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1002.1" y="590.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.47%)</title><rect x="1007.8" y="563.0" width="17.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1010.8" y="574.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.74%)</title><rect x="1025.1" y="579.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1028.1" y="590.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.74%)</title><rect x="1025.1" y="563.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1028.1" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.74%)</title><rect x="1033.8" y="611.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1036.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.74%)</title><rect x="1042.5" y="643.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1045.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.74%)</title><rect x="1042.5" y="627.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="1042.5" y="611.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_non_escaped_objects(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;) (1 samples, 0.74%)</title><rect x="1042.5" y="595.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 4.41%)</title><rect x="1051.2" y="643.0" width="52.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1054.2" y="654.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 1.47%)</title><rect x="1051.2" y="627.0" width="17.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1054.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.94%)</title><rect x="1068.5" y="627.0" width="34.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.5" y="638.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.94%)</title><rect x="1068.5" y="611.0" width="34.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.5" y="622.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.74%)</title><rect x="1068.5" y="595.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 2.21%)</title><rect x="1077.2" y="595.0" width="26.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1080.2" y="606.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.74%)</title><rect x="1077.2" y="579.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.74%)</title><rect x="1077.2" y="563.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1080.2" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.74%)</title><rect x="1077.2" y="547.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.2" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.47%)</title><rect x="1085.9" y="579.0" width="17.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1088.9" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 2.94%)</title><rect x="1103.2" y="643.0" width="34.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.2" y="654.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 2.94%)</title><rect x="1103.2" y="627.0" width="34.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.2" y="638.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.74%)</title><rect x="1103.2" y="611.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.2" y="622.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.74%)</title><rect x="1103.2" y="595.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.2" y="606.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.74%)</title><rect x="1103.2" y="579.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.2" y="590.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.74%)</title><rect x="1103.2" y="563.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.2" y="574.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.74%)</title><rect x="1111.9" y="611.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1114.9" y="622.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.74%)</title><rect x="1111.9" y="595.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.9" y="606.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 1.47%)</title><rect x="1120.6" y="611.0" width="17.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.6" y="622.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.74%)</title><rect x="1120.6" y="595.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.6" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="579.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1123.6" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="563.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="547.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1123.6" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="531.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="515.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.6" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="499.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.6" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="483.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1123.6" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="467.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1123.6" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="451.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1123.6" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="435.0" width="8.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.6" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="419.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1123.6" y="430.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.74%)</title><rect x="1120.6" y="403.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.6" y="414.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.74%)</title><rect x="1120.6" y="387.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.6" y="398.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.74%)</title><rect x="1129.3" y="595.0" width="8.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.3" y="606.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.74%)</title><rect x="1129.3" y="579.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.3" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.47%)</title><rect x="1137.9" y="659.0" width="17.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.47%)</title><rect x="1137.9" y="643.0" width="17.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.47%)</title><rect x="1137.9" y="627.0" width="17.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.47%)</title><rect x="1137.9" y="611.0" width="17.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.47%)</title><rect x="1137.9" y="595.0" width="17.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.47%)</title><rect x="1137.9" y="579.0" width="17.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.47%)</title><rect x="1137.9" y="563.0" width="17.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.9" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.47%)</title><rect x="1137.9" y="547.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.47%)</title><rect x="1137.9" y="531.0" width="17.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.47%)</title><rect x="1137.9" y="515.0" width="17.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.47%)</title><rect x="1137.9" y="499.0" width="17.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.47%)</title><rect x="1137.9" y="483.0" width="17.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1137.9" y="467.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1137.9" y="451.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1137.9" y="435.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1137.9" y="419.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1137.9" y="403.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1137.9" y="387.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1137.9" y="371.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1137.9" y="355.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1137.9" y="339.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1137.9" y="323.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1137.9" y="307.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1137.9" y="291.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.9" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1137.9" y="275.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1137.9" y="259.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1137.9" y="243.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1137.9" y="227.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1137.9" y="211.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="222.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.74%)</title><rect x="1137.9" y="195.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.9" y="206.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.74%)</title><rect x="1137.9" y="179.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="190.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.74%)</title><rect x="1137.9" y="163.0" width="8.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.9" y="174.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.74%)</title><rect x="1137.9" y="147.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.9" y="158.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.74%)</title><rect x="1137.9" y="131.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.9" y="142.0"></text>
</g>
<g>
<title>TypeLong::xdual() const (1 samples, 0.74%)</title><rect x="1137.9" y="115.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.9" y="126.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1146.6" y="467.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1146.6" y="451.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1146.6" y="435.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1146.6" y="419.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1146.6" y="403.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1146.6" y="387.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1146.6" y="371.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1146.6" y="355.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.6" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1146.6" y="339.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1146.6" y="323.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1146.6" y="307.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1146.6" y="291.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1146.6" y="275.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1146.6" y="259.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.6" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1146.6" y="243.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1146.6" y="227.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1146.6" y="211.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1146.6" y="195.0" width="8.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1146.6" y="179.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1149.6" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.74%)</title><rect x="1146.6" y="163.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.74%)</title><rect x="1146.6" y="147.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.74%)</title><rect x="1146.6" y="131.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.74%)</title><rect x="1146.6" y="115.0" width="8.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.6" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.74%)</title><rect x="1146.6" y="99.0" width="8.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.74%)</title><rect x="1146.6" y="83.0" width="8.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1149.6" y="94.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.74%)</title><rect x="1146.6" y="67.0" width="8.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="78.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.74%)</title><rect x="1146.6" y="51.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.6" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.74%)</title><rect x="1146.6" y="35.0" width="8.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.6" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.74%)</title><rect x="1155.3" y="659.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.3" y="670.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.74%)</title><rect x="1155.3" y="643.0" width="8.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.3" y="654.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.74%)</title><rect x="1164.0" y="659.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.0" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.74%)</title><rect x="1164.0" y="643.0" width="8.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.0" y="654.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.74%)</title><rect x="1164.0" y="627.0" width="8.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1167.0" y="638.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 1.47%)</title><rect x="1172.6" y="691.0" width="17.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 1.47%)</title><rect x="1172.6" y="675.0" width="17.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.47%)</title><rect x="1172.6" y="659.0" width="17.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.6" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.47%)</title><rect x="1172.6" y="643.0" width="17.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.6" y="654.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 1.47%)</title><rect x="1172.6" y="627.0" width="17.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.6" y="638.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.47%)</title><rect x="1172.6" y="611.0" width="17.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.6" y="622.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.47%)</title><rect x="1172.6" y="595.0" width="17.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.47%)</title><rect x="1172.6" y="579.0" width="17.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.47%)</title><rect x="1172.6" y="563.0" width="17.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.6" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.47%)</title><rect x="1172.6" y="547.0" width="17.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.47%)</title><rect x="1172.6" y="531.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.6" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 1.47%)</title><rect x="1172.6" y="515.0" width="17.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.6" y="526.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 1.47%)</title><rect x="1172.6" y="499.0" width="17.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.47%)</title><rect x="1172.6" y="483.0" width="17.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.47%)</title><rect x="1172.6" y="467.0" width="17.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.6" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.74%)</title><rect x="1181.3" y="451.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.3" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.74%)</title><rect x="1181.3" y="435.0" width="8.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.74%)</title><rect x="1181.3" y="419.0" width="8.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.74%)</title><rect x="1181.3" y="403.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.74%)</title><rect x="1181.3" y="387.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.74%)</title><rect x="1181.3" y="371.0" width="8.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.3" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.74%)</title><rect x="1181.3" y="355.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.74%)</title><rect x="1181.3" y="339.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.74%)</title><rect x="1181.3" y="323.0" width="8.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.74%)</title><rect x="1181.3" y="307.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="318.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.74%)</title><rect x="1181.3" y="291.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="302.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.74%)</title><rect x="1181.3" y="275.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="286.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.74%)</title><rect x="1181.3" y="259.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="270.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.74%)</title><rect x="1181.3" y="243.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="254.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.74%)</title><rect x="1181.3" y="227.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.74%)</title><rect x="1181.3" y="211.0" width="8.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.74%)</title><rect x="1181.3" y="195.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.3" y="206.0"></text>
</g>
</g>
</svg>
