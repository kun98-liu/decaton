<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1077"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1077"> </text>
<g id="frames">
<g>
<title>all (1,377 samples, 100.00%)</title><rect x="10.0" y="1043.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1054.0">all</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.07%)</title><rect x="10.0" y="1027.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.07%)</title><rect x="10.0" y="1011.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>CompileBroker::compilation_is_in_queue(methodHandle const&amp;) (1 samples, 0.07%)</title><rect x="10.0" y="995.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.15%)</title><rect x="10.9" y="1027.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.9" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.15%)</title><rect x="10.9" y="1011.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.15%)</title><rect x="10.9" y="995.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.9" y="1006.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.07%)</title><rect x="10.9" y="979.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="990.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.07%)</title><rect x="10.9" y="963.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.9" y="974.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.07%)</title><rect x="11.7" y="979.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.7" y="990.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.07%)</title><rect x="11.7" y="963.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.7" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (248 samples, 18.01%)</title><rect x="12.6" y="1027.0" width="212.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.6" y="1038.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (248 samples, 18.01%)</title><rect x="12.6" y="1011.0" width="212.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.6" y="1022.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (243 samples, 17.65%)</title><rect x="13.4" y="995.0" width="208.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.4" y="1006.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (5 samples, 0.36%)</title><rect x="14.3" y="979.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="17.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.07%)</title><rect x="14.3" y="963.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.29%)</title><rect x="15.1" y="963.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.1" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.22%)</title><rect x="16.0" y="947.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.22%)</title><rect x="16.0" y="931.0" width="2.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.22%)</title><rect x="16.0" y="915.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.22%)</title><rect x="16.0" y="899.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.22%)</title><rect x="16.0" y="883.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.07%)</title><rect x="16.0" y="867.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.0" y="878.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.07%)</title><rect x="16.0" y="851.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.07%)</title><rect x="16.9" y="867.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.07%)</title><rect x="16.9" y="851.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="19.9" y="862.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.07%)</title><rect x="17.7" y="867.0" width="0.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="20.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.29%)</title><rect x="18.6" y="979.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.6" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.29%)</title><rect x="18.6" y="963.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.29%)</title><rect x="18.6" y="947.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.6" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$272/757157253.accept (4 samples, 0.29%)</title><rect x="18.6" y="931.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.29%)</title><rect x="18.6" y="915.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.6" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.29%)</title><rect x="18.6" y="899.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.29%)</title><rect x="18.6" y="883.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (4 samples, 0.29%)</title><rect x="22.0" y="979.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.0" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (3 samples, 0.22%)</title><rect x="22.0" y="963.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.15%)</title><rect x="22.9" y="947.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="25.9" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="22.9" y="931.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.9" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.07%)</title><rect x="22.9" y="915.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.9" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="22.9" y="899.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.9" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="22.9" y="883.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.9" y="894.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (1 samples, 0.07%)</title><rect x="22.9" y="867.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.9" y="878.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (1 samples, 0.07%)</title><rect x="22.9" y="851.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.9" y="862.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (1 samples, 0.07%)</title><rect x="22.9" y="835.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="25.9" y="846.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (1 samples, 0.07%)</title><rect x="22.9" y="819.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.9" y="830.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.07%)</title><rect x="22.9" y="803.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.9" y="814.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (1 samples, 0.07%)</title><rect x="22.9" y="787.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.9" y="798.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (1 samples, 0.07%)</title><rect x="23.7" y="931.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.7" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="23.7" y="915.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="26.7" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.07%)</title><rect x="23.7" y="899.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.7" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="23.7" y="883.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="26.7" y="894.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="23.7" y="867.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="26.7" y="878.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="24.6" y="963.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="27.6" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="24.6" y="947.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="27.6" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="24.6" y="931.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="27.6" y="942.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (191 samples, 13.87%)</title><rect x="25.4" y="979.0" width="163.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.4" y="990.0">java/lang/Iterable.fo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/1219898933.accept (183 samples, 13.29%)</title><rect x="25.4" y="963.0" width="156.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.4" y="974.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (183 samples, 13.29%)</title><rect x="25.4" y="947.0" width="156.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.4" y="958.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (167 samples, 12.13%)</title><rect x="25.4" y="931.0" width="143.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.4" y="942.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (167 samples, 12.13%)</title><rect x="25.4" y="915.0" width="143.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.4" y="926.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (167 samples, 12.13%)</title><rect x="25.4" y="899.0" width="143.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.4" y="910.0">com/linecorp/decat..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (27 samples, 1.96%)</title><rect x="25.4" y="883.0" width="23.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.4" y="894.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (27 samples, 1.96%)</title><rect x="25.4" y="867.0" width="23.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.4" y="878.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepCounter.increment (1 samples, 0.07%)</title><rect x="28.9" y="851.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/DoubleAdder.add (1 samples, 0.07%)</title><rect x="28.9" y="835.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.9" y="846.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (22 samples, 1.60%)</title><rect x="29.7" y="851.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (140 samples, 10.17%)</title><rect x="48.6" y="883.0" width="119.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.6" y="894.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (140 samples, 10.17%)</title><rect x="48.6" y="867.0" width="119.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.6" y="878.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 10.17%)</title><rect x="48.6" y="851.0" width="119.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="862.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (122 samples, 8.86%)</title><rect x="48.6" y="835.0" width="104.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.6" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (22 samples, 1.60%)</title><rect x="48.6" y="819.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (22 samples, 1.60%)</title><rect x="48.6" y="803.0" width="18.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="51.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (22 samples, 1.60%)</title><rect x="48.6" y="787.0" width="18.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="51.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 0.87%)</title><rect x="67.4" y="819.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 0.87%)</title><rect x="67.4" y="803.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.15%)</title><rect x="76.0" y="787.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="79.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.15%)</title><rect x="76.0" y="771.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="79.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 6.39%)</title><rect x="77.7" y="819.0" width="75.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.7" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 6.39%)</title><rect x="77.7" y="803.0" width="75.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="80.7" y="814.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 6.39%)</title><rect x="77.7" y="787.0" width="75.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.7" y="798.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 6.39%)</title><rect x="77.7" y="771.0" width="75.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.7" y="782.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (88 samples, 6.39%)</title><rect x="77.7" y="755.0" width="75.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="80.7" y="766.0">jdk/inte..</text>
</g>
<g>
<title>Unsafe_Unpark (45 samples, 3.27%)</title><rect x="79.4" y="739.0" width="38.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="82.4" y="750.0">Uns..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.15%)</title><rect x="85.4" y="723.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="88.4" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.22%)</title><rect x="87.1" y="723.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="90.1" y="734.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (12 samples, 0.87%)</title><rect x="89.7" y="723.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="92.7" y="734.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="99.1" y="707.0" width="0.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="102.1" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="100.0" y="723.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="103.0" y="734.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.07%)</title><rect x="103.4" y="723.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="106.4" y="734.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.22%)</title><rect x="104.3" y="723.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="107.3" y="734.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 0.87%)</title><rect x="106.8" y="723.0" width="10.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="109.8" y="734.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="117.1" y="723.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="120.1" y="734.0"></text>
</g>
<g>
<title>__pthread_cond_signal (41 samples, 2.98%)</title><rect x="118.0" y="739.0" width="35.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="121.0" y="750.0">__p..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (18 samples, 1.31%)</title><rect x="153.1" y="835.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="156.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (18 samples, 1.31%)</title><rect x="153.1" y="819.0" width="15.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="156.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (8 samples, 0.58%)</title><rect x="161.7" y="803.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="164.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (8 samples, 0.58%)</title><rect x="161.7" y="787.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="164.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (7 samples, 0.51%)</title><rect x="168.5" y="931.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="171.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.51%)</title><rect x="168.5" y="915.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="171.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.44%)</title><rect x="169.4" y="899.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="172.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.44%)</title><rect x="169.4" y="883.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.15%)</title><rect x="172.8" y="867.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="175.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.15%)</title><rect x="172.8" y="851.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="175.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.36%)</title><rect x="174.5" y="931.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="177.5" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.36%)</title><rect x="174.5" y="915.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.5" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.29%)</title><rect x="174.5" y="899.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="177.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (4 samples, 0.29%)</title><rect x="174.5" y="883.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="177.5" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.07%)</title><rect x="178.0" y="899.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="181.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.07%)</title><rect x="178.0" y="883.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.0" y="894.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.07%)</title><rect x="178.0" y="867.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="181.0" y="878.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.07%)</title><rect x="178.0" y="851.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="181.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.07%)</title><rect x="178.0" y="835.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="181.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.29%)</title><rect x="178.8" y="931.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="181.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.29%)</title><rect x="178.8" y="915.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="181.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.29%)</title><rect x="178.8" y="899.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.8" y="910.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.07%)</title><rect x="178.8" y="883.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="181.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="178.8" y="867.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="181.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.22%)</title><rect x="179.7" y="883.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="182.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (8 samples, 0.58%)</title><rect x="182.2" y="963.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="185.2" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (8 samples, 0.58%)</title><rect x="182.2" y="947.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="185.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.58%)</title><rect x="182.2" y="931.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (8 samples, 0.58%)</title><rect x="182.2" y="915.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.2" y="926.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (4 samples, 0.29%)</title><rect x="182.2" y="899.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="185.2" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (3 samples, 0.22%)</title><rect x="185.7" y="899.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.7" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.07%)</title><rect x="188.2" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.07%)</title><rect x="188.2" y="883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="191.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.07%)</title><rect x="188.2" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="191.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 2.76%)</title><rect x="189.1" y="979.0" width="32.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.1" y="990.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 2.76%)</title><rect x="189.1" y="963.0" width="32.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.1" y="974.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (27 samples, 1.96%)</title><rect x="189.1" y="947.0" width="23.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.1" y="958.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (27 samples, 1.96%)</title><rect x="189.1" y="931.0" width="23.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.1" y="942.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (27 samples, 1.96%)</title><rect x="189.1" y="915.0" width="23.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="192.1" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (25 samples, 1.82%)</title><rect x="189.1" y="899.0" width="21.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="192.1" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 1.82%)</title><rect x="189.1" y="883.0" width="21.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="192.1" y="894.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.15%)</title><rect x="190.0" y="867.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.0" y="878.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.15%)</title><rect x="190.0" y="851.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="193.0" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.15%)</title><rect x="190.0" y="835.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="193.0" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.15%)</title><rect x="190.0" y="819.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="193.0" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.15%)</title><rect x="190.0" y="803.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="193.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (13 samples, 0.94%)</title><rect x="191.7" y="867.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="194.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 0.15%)</title><rect x="191.7" y="851.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 0.15%)</title><rect x="191.7" y="835.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="194.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 0.15%)</title><rect x="191.7" y="819.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="194.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 0.15%)</title><rect x="191.7" y="803.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="194.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 0.15%)</title><rect x="191.7" y="787.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="194.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (2 samples, 0.15%)</title><rect x="191.7" y="771.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="194.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (2 samples, 0.15%)</title><rect x="191.7" y="755.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.7" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (2 samples, 0.15%)</title><rect x="191.7" y="739.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="194.7" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (2 samples, 0.15%)</title><rect x="191.7" y="723.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.7" y="734.0"></text>
</g>
<g>
<title>updateBytesCRC32C (2 samples, 0.15%)</title><rect x="191.7" y="707.0" width="1.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="194.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 0.73%)</title><rect x="193.4" y="851.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="196.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 0.73%)</title><rect x="193.4" y="835.0" width="8.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="196.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (8 samples, 0.58%)</title><rect x="195.1" y="819.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="198.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (8 samples, 0.58%)</title><rect x="195.1" y="803.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="198.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.29%)</title><rect x="198.5" y="787.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.07%)</title><rect x="202.0" y="851.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.07%)</title><rect x="202.0" y="835.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="205.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.07%)</title><rect x="202.0" y="819.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.07%)</title><rect x="202.0" y="803.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.07%)</title><rect x="202.0" y="787.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.07%)</title><rect x="202.0" y="771.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="205.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatchSize (1 samples, 0.07%)</title><rect x="202.0" y="755.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="205.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (9 samples, 0.65%)</title><rect x="202.8" y="867.0" width="7.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="205.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.58%)</title><rect x="203.7" y="851.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.51%)</title><rect x="203.7" y="835.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="206.7" y="846.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.51%)</title><rect x="203.7" y="819.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="206.7" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="208.8" y="803.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="211.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.07%)</title><rect x="209.7" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (1 samples, 0.07%)</title><rect x="209.7" y="819.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.7" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="209.7" y="803.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="212.7" y="814.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="209.7" y="787.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="212.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.15%)</title><rect x="210.5" y="899.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="213.5" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.15%)</title><rect x="210.5" y="883.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="210.5" y="867.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.07%)</title><rect x="210.5" y="851.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.07%)</title><rect x="210.5" y="835.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.5" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="210.5" y="819.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="213.5" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.07%)</title><rect x="211.4" y="851.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="214.4" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="211.4" y="835.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="214.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.07%)</title><rect x="212.2" y="947.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="215.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.07%)</title><rect x="212.2" y="931.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="215.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.07%)</title><rect x="212.2" y="915.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="215.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.07%)</title><rect x="212.2" y="899.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.07%)</title><rect x="212.2" y="883.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="215.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.07%)</title><rect x="212.2" y="867.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="215.2" y="878.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.07%)</title><rect x="212.2" y="851.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="215.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.07%)</title><rect x="213.1" y="947.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.07%)</title><rect x="213.1" y="931.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.07%)</title><rect x="213.1" y="915.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.07%)</title><rect x="213.1" y="899.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.36%)</title><rect x="214.0" y="947.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="217.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.29%)</title><rect x="214.0" y="931.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.29%)</title><rect x="214.0" y="915.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.22%)</title><rect x="214.0" y="899.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.22%)</title><rect x="214.0" y="883.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="217.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.22%)</title><rect x="214.0" y="867.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.22%)</title><rect x="214.0" y="851.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.22%)</title><rect x="214.0" y="835.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.07%)</title><rect x="214.0" y="819.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="217.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.07%)</title><rect x="214.0" y="803.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="217.0" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.07%)</title><rect x="214.0" y="787.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="217.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="214.0" y="771.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="217.0" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="214.0" y="755.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="217.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="214.0" y="739.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="217.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="214.0" y="723.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="217.0" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.07%)</title><rect x="214.0" y="707.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="217.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.07%)</title><rect x="214.0" y="691.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="217.0" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.07%)</title><rect x="214.0" y="675.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="217.0" y="686.0"></text>
</g>
<g>
<title>G1OldGenerationCounters::update_all() (1 samples, 0.07%)</title><rect x="214.0" y="659.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="217.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.15%)</title><rect x="214.8" y="819.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.8" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.15%)</title><rect x="214.8" y="803.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="217.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.15%)</title><rect x="214.8" y="787.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="217.8" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.15%)</title><rect x="214.8" y="771.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="217.8" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.07%)</title><rect x="214.8" y="755.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="217.8" y="766.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="214.8" y="739.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="217.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.07%)</title><rect x="215.7" y="755.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.07%)</title><rect x="215.7" y="739.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="218.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.07%)</title><rect x="215.7" y="723.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="218.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.07%)</title><rect x="215.7" y="707.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.07%)</title><rect x="216.5" y="899.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="219.5" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.07%)</title><rect x="216.5" y="883.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="219.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.07%)</title><rect x="217.4" y="931.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="220.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.07%)</title><rect x="217.4" y="915.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="217.4" y="899.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="220.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.07%)</title><rect x="217.4" y="883.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="220.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.07%)</title><rect x="217.4" y="867.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.07%)</title><rect x="217.4" y="851.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="220.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.07%)</title><rect x="217.4" y="835.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="220.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.addSize (1 samples, 0.07%)</title><rect x="217.4" y="819.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="220.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.addSize (1 samples, 0.07%)</title><rect x="217.4" y="803.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="220.4" y="814.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.07%)</title><rect x="217.4" y="787.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="220.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.15%)</title><rect x="218.2" y="947.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.15%)</title><rect x="218.2" y="931.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.15%)</title><rect x="218.2" y="915.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="221.2" y="926.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.07%)</title><rect x="218.2" y="899.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="221.2" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.07%)</title><rect x="218.2" y="883.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="221.2" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.07%)</title><rect x="218.2" y="867.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="221.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.07%)</title><rect x="219.1" y="899.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.07%)</title><rect x="219.1" y="883.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.15%)</title><rect x="219.9" y="947.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.9" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="219.9" y="931.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.9" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.15%)</title><rect x="219.9" y="915.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.9" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.07%)</title><rect x="220.8" y="899.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="221.7" y="995.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.7" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (3 samples, 0.22%)</title><rect x="222.5" y="995.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.5" y="1006.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (2 samples, 0.15%)</title><rect x="223.4" y="979.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="226.4" y="990.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (2 samples, 0.15%)</title><rect x="223.4" y="963.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.4" y="974.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (2 samples, 0.15%)</title><rect x="223.4" y="947.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.4" y="958.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (2 samples, 0.15%)</title><rect x="223.4" y="931.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="226.4" y="942.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="224.2" y="915.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="224.2" y="899.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="910.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (1 samples, 0.07%)</title><rect x="224.2" y="883.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="227.2" y="894.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (1 samples, 0.07%)</title><rect x="224.2" y="867.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="227.2" y="878.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (1 samples, 0.07%)</title><rect x="224.2" y="851.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="227.2" y="862.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (1 samples, 0.07%)</title><rect x="224.2" y="835.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.2" y="846.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.07%)</title><rect x="224.2" y="819.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="227.2" y="830.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (1 samples, 0.07%)</title><rect x="224.2" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="227.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1,088 samples, 79.01%)</title><rect x="225.1" y="1027.0" width="932.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.1" y="1038.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,088 samples, 79.01%)</title><rect x="225.1" y="1011.0" width="932.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.1" y="1022.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,088 samples, 79.01%)</title><rect x="225.1" y="995.0" width="932.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.1" y="1006.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1677770866.run (891 samples, 64.71%)</title><rect x="225.9" y="979.0" width="763.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.9" y="990.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/1677770866.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (891 samples, 64.71%)</title><rect x="225.9" y="963.0" width="763.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.9" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (891 samples, 64.71%)</title><rect x="225.9" y="947.0" width="763.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.9" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (857 samples, 62.24%)</title><rect x="226.8" y="931.0" width="734.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="229.8" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="226.8" y="915.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="229.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (53 samples, 3.85%)</title><rect x="227.7" y="915.0" width="45.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.7" y="926.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (53 samples, 3.85%)</title><rect x="227.7" y="899.0" width="45.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.7" y="910.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (53 samples, 3.85%)</title><rect x="227.7" y="883.0" width="45.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.7" y="894.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.07%)</title><rect x="245.7" y="867.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (31 samples, 2.25%)</title><rect x="246.5" y="867.0" width="26.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.5" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.15%)</title><rect x="246.5" y="851.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.5" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$512/1817323879.accept (1 samples, 0.07%)</title><rect x="247.4" y="835.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (28 samples, 2.03%)</title><rect x="248.2" y="851.0" width="24.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.2" y="862.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$512/1817323879.accept (27 samples, 1.96%)</title><rect x="249.1" y="835.0" width="23.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.1" y="846.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (27 samples, 1.96%)</title><rect x="249.1" y="819.0" width="23.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.1" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$505/916263094.accept (1 samples, 0.07%)</title><rect x="252.5" y="803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="255.5" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.07%)</title><rect x="253.4" y="803.0" width="0.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="256.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (21 samples, 1.53%)</title><rect x="254.2" y="803.0" width="18.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (21 samples, 1.53%)</title><rect x="254.2" y="787.0" width="18.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="257.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (20 samples, 1.45%)</title><rect x="255.1" y="771.0" width="17.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.15%)</title><rect x="255.1" y="755.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="258.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.31%)</title><rect x="256.8" y="755.0" width="15.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="259.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/1041616989.accept (1 samples, 0.07%)</title><rect x="271.4" y="739.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.07%)</title><rect x="272.2" y="851.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="275.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 0.22%)</title><rect x="273.1" y="915.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 0.22%)</title><rect x="273.1" y="899.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.22%)</title><rect x="273.1" y="883.0" width="2.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.22%)</title><rect x="273.1" y="867.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="273.1" y="851.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (198 samples, 14.38%)</title><rect x="275.6" y="915.0" width="169.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.6" y="926.0">com/linecorp/decaton/p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.07%)</title><rect x="275.6" y="899.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="278.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$424/1450417675.get (1 samples, 0.07%)</title><rect x="275.6" y="883.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="278.6" y="894.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="275.6" y="867.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.6" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="275.6" y="851.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="278.6" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="275.6" y="835.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="278.6" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="275.6" y="819.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="278.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="275.6" y="803.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="278.6" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (197 samples, 14.31%)</title><rect x="276.5" y="899.0" width="168.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.5" y="910.0">io/micrometer/core/ins..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (159 samples, 11.55%)</title><rect x="277.4" y="883.0" width="136.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.4" y="894.0">io/micrometer/cor..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (116 samples, 8.42%)</title><rect x="277.4" y="867.0" width="99.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.4" y="878.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (116 samples, 8.42%)</title><rect x="277.4" y="851.0" width="99.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.4" y="862.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.rotate (1 samples, 0.07%)</title><rect x="288.5" y="835.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/Striped64.longAccumulate (1 samples, 0.07%)</title><rect x="288.5" y="819.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="291.5" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (98 samples, 7.12%)</title><rect x="289.4" y="835.0" width="83.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="292.4" y="846.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (98 samples, 7.12%)</title><rect x="289.4" y="819.0" width="83.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.4" y="830.0">io/microm..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (98 samples, 7.12%)</title><rect x="289.4" y="803.0" width="83.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.4" y="814.0">org/HdrHi..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (98 samples, 7.12%)</title><rect x="289.4" y="787.0" width="83.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.4" y="798.0">org/HdrHi..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (98 samples, 7.12%)</title><rect x="289.4" y="771.0" width="83.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.4" y="782.0">org/HdrHi..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (78 samples, 5.66%)</title><rect x="289.4" y="755.0" width="66.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.4" y="766.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (52 samples, 3.78%)</title><rect x="289.4" y="739.0" width="44.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.4" y="750.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (52 samples, 3.78%)</title><rect x="289.4" y="723.0" width="44.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.4" y="734.0">org/..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (26 samples, 1.89%)</title><rect x="333.9" y="739.0" width="22.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="336.9" y="750.0">o..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (26 samples, 1.89%)</title><rect x="333.9" y="723.0" width="22.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="336.9" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (26 samples, 1.89%)</title><rect x="333.9" y="707.0" width="22.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="336.9" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (26 samples, 1.89%)</title><rect x="333.9" y="691.0" width="22.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.9" y="702.0">j..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (20 samples, 1.45%)</title><rect x="356.2" y="755.0" width="17.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="373.3" y="835.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="376.3" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="373.3" y="819.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="376.3" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (43 samples, 3.12%)</title><rect x="376.8" y="867.0" width="36.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.8" y="878.0">io/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (12 samples, 0.87%)</title><rect x="376.8" y="851.0" width="10.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.8" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (11 samples, 0.80%)</title><rect x="377.6" y="835.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.6" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.58%)</title><rect x="380.2" y="819.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="383.2" y="830.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.58%)</title><rect x="380.2" y="803.0" width="6.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="383.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (31 samples, 2.25%)</title><rect x="387.1" y="851.0" width="26.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="390.1" y="862.0">j..</text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (37 samples, 2.69%)</title><rect x="413.6" y="883.0" width="31.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.6" y="894.0">ja..</text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="441.9" y="867.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="444.9" y="878.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="441.9" y="851.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="444.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (134 samples, 9.73%)</title><rect x="445.3" y="915.0" width="114.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="448.3" y="926.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (134 samples, 9.73%)</title><rect x="445.3" y="899.0" width="114.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.3" y="910.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (134 samples, 9.73%)</title><rect x="445.3" y="883.0" width="114.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.3" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (134 samples, 9.73%)</title><rect x="445.3" y="867.0" width="114.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.3" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (134 samples, 9.73%)</title><rect x="445.3" y="851.0" width="114.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="448.3" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (134 samples, 9.73%)</title><rect x="445.3" y="835.0" width="114.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="448.3" y="846.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (41 samples, 2.98%)</title><rect x="445.3" y="819.0" width="35.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="448.3" y="830.0">com..</text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="459.9" y="803.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="462.9" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.58%)</title><rect x="462.5" y="803.0" width="6.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="465.5" y="814.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="463.3" y="787.0" width="6.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="466.3" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.07%)</title><rect x="469.3" y="803.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="472.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="469.3" y="787.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="472.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="469.3" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="472.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="469.3" y="755.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="472.3" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="469.3" y="739.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="472.3" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.07%)</title><rect x="469.3" y="723.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="472.3" y="734.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="469.3" y="707.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="472.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (12 samples, 0.87%)</title><rect x="470.2" y="803.0" width="10.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="473.2" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (12 samples, 0.87%)</title><rect x="470.2" y="787.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.2" y="798.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.07%)</title><rect x="471.0" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="474.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="471.9" y="771.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="474.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="471.9" y="755.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="474.9" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="471.9" y="739.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="474.9" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="471.9" y="723.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="474.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.58%)</title><rect x="472.7" y="771.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="475.7" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.58%)</title><rect x="472.7" y="755.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.07%)</title><rect x="479.6" y="771.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="482.6" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.07%)</title><rect x="479.6" y="755.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="482.6" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.07%)</title><rect x="479.6" y="739.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="482.6" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.07%)</title><rect x="479.6" y="723.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="482.6" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="479.6" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="482.6" y="718.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.07%)</title><rect x="479.6" y="691.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="482.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 6.10%)</title><rect x="480.5" y="819.0" width="71.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="483.5" y="830.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.29%)</title><rect x="480.5" y="803.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="483.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.29%)</title><rect x="480.5" y="787.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="483.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (11 samples, 0.80%)</title><rect x="483.9" y="803.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.9" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.44%)</title><rect x="488.2" y="787.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="489.0" y="771.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="492.0" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.22%)</title><rect x="489.9" y="771.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="492.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.15%)</title><rect x="490.7" y="755.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="493.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.07%)</title><rect x="492.5" y="771.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.07%)</title><rect x="492.5" y="755.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="495.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.36%)</title><rect x="493.3" y="803.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="496.3" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (5 samples, 0.36%)</title><rect x="493.3" y="787.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="496.3" y="798.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.07%)</title><rect x="493.3" y="771.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="496.3" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.29%)</title><rect x="494.2" y="771.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="497.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.29%)</title><rect x="494.2" y="755.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="497.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.29%)</title><rect x="494.2" y="739.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="497.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (4 samples, 0.29%)</title><rect x="494.2" y="723.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="497.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="496.7" y="707.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="499.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (64 samples, 4.65%)</title><rect x="497.6" y="803.0" width="54.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.6" y="814.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 4.65%)</title><rect x="497.6" y="787.0" width="54.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="500.6" y="798.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (19 samples, 1.38%)</title><rect x="497.6" y="771.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.6" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="497.6" y="755.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="500.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.58%)</title><rect x="498.5" y="755.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.58%)</title><rect x="498.5" y="739.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="501.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.58%)</title><rect x="498.5" y="723.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="501.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (8 samples, 0.58%)</title><rect x="498.5" y="707.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="501.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.15%)</title><rect x="503.6" y="691.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.29%)</title><rect x="505.3" y="755.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.22%)</title><rect x="506.2" y="739.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.22%)</title><rect x="506.2" y="723.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="509.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.22%)</title><rect x="506.2" y="707.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="509.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.22%)</title><rect x="506.2" y="691.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="509.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.44%)</title><rect x="508.7" y="755.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.7" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.44%)</title><rect x="508.7" y="739.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="511.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (45 samples, 3.27%)</title><rect x="513.9" y="771.0" width="38.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="516.9" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (45 samples, 3.27%)</title><rect x="513.9" y="755.0" width="38.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.9" y="766.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="513.9" y="739.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="516.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (44 samples, 3.20%)</title><rect x="514.7" y="739.0" width="37.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="517.7" y="750.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.23%)</title><rect x="517.3" y="723.0" width="14.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.07%)</title><rect x="519.0" y="707.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.15%)</title><rect x="519.9" y="707.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="522.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.15%)</title><rect x="519.9" y="691.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.15%)</title><rect x="519.9" y="675.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="519.9" y="659.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.29%)</title><rect x="521.6" y="707.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="524.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.15%)</title><rect x="523.3" y="691.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="526.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.15%)</title><rect x="523.3" y="675.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (6 samples, 0.44%)</title><rect x="525.0" y="707.0" width="5.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (6 samples, 0.44%)</title><rect x="525.0" y="691.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="528.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.15%)</title><rect x="530.2" y="707.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="533.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (9 samples, 0.65%)</title><rect x="531.9" y="723.0" width="7.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="534.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.44%)</title><rect x="534.4" y="707.0" width="5.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (2 samples, 0.15%)</title><rect x="534.4" y="691.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="537.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (2 samples, 0.15%)</title><rect x="534.4" y="675.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (2 samples, 0.15%)</title><rect x="534.4" y="659.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="537.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (2 samples, 0.15%)</title><rect x="534.4" y="643.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="537.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (2 samples, 0.15%)</title><rect x="534.4" y="627.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="537.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (2 samples, 0.15%)</title><rect x="534.4" y="611.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="537.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="536.2" y="691.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="539.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.29%)</title><rect x="536.2" y="675.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="539.2" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.22%)</title><rect x="536.2" y="659.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="539.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.22%)</title><rect x="536.2" y="643.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="539.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.22%)</title><rect x="536.2" y="627.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="539.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.22%)</title><rect x="536.2" y="611.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="539.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.22%)</title><rect x="536.2" y="595.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="539.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.07%)</title><rect x="538.7" y="659.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="541.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="538.7" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="541.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.07%)</title><rect x="539.6" y="723.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.51%)</title><rect x="540.4" y="723.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="543.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.36%)</title><rect x="542.2" y="707.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.36%)</title><rect x="542.2" y="691.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="545.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.36%)</title><rect x="542.2" y="675.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.2" y="686.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.36%)</title><rect x="542.2" y="659.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="545.2" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.22%)</title><rect x="542.2" y="643.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.2" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.07%)</title><rect x="543.9" y="627.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="546.9" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor4.newInstance (2 samples, 0.15%)</title><rect x="544.7" y="643.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="547.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.51%)</title><rect x="546.4" y="723.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="549.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.51%)</title><rect x="546.4" y="707.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.22%)</title><rect x="546.4" y="691.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="549.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.29%)</title><rect x="549.0" y="691.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="552.0" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.29%)</title><rect x="549.0" y="675.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="552.0" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.29%)</title><rect x="549.0" y="659.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="552.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.07%)</title><rect x="551.6" y="643.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="554.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (9 samples, 0.65%)</title><rect x="552.4" y="819.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.4" y="830.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.65%)</title><rect x="552.4" y="803.0" width="7.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="555.4" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.65%)</title><rect x="552.4" y="787.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="555.4" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.65%)</title><rect x="552.4" y="771.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="555.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.65%)</title><rect x="552.4" y="755.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (464 samples, 33.70%)</title><rect x="560.2" y="915.0" width="397.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="563.2" y="926.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="561.9" y="899.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="564.9" y="910.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.15%)</title><rect x="561.9" y="883.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.9" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="561.9" y="867.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="564.9" y="878.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="561.9" y="851.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="564.9" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (31 samples, 2.25%)</title><rect x="563.6" y="899.0" width="26.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.6" y="910.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (31 samples, 2.25%)</title><rect x="563.6" y="883.0" width="26.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="566.6" y="894.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (31 samples, 2.25%)</title><rect x="563.6" y="867.0" width="26.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="566.6" y="878.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.02%)</title><rect x="566.2" y="851.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.2" y="862.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.02%)</title><rect x="566.2" y="835.0" width="11.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="569.2" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.44%)</title><rect x="572.1" y="819.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="575.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.07%)</title><rect x="577.3" y="819.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="580.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="578.1" y="851.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="581.1" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 0.94%)</title><rect x="579.0" y="851.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.0" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (13 samples, 0.94%)</title><rect x="579.0" y="835.0" width="11.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.0" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (13 samples, 0.94%)</title><rect x="579.0" y="819.0" width="11.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.15%)</title><rect x="588.4" y="803.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.15%)</title><rect x="590.1" y="899.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.15%)</title><rect x="590.1" y="883.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="593.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (142 samples, 10.31%)</title><rect x="591.9" y="899.0" width="121.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="594.9" y="910.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (96 samples, 6.97%)</title><rect x="592.7" y="883.0" width="82.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="595.7" y="894.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (38 samples, 2.76%)</title><rect x="597.9" y="867.0" width="32.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.9" y="878.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (16 samples, 1.16%)</title><rect x="610.7" y="851.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="613.7" y="862.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.09%)</title><rect x="611.6" y="835.0" width="12.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.6" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.36%)</title><rect x="616.7" y="819.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="619.7" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.36%)</title><rect x="616.7" y="803.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="619.7" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.15%)</title><rect x="619.3" y="787.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="622.3" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.15%)</title><rect x="619.3" y="771.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="622.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.15%)</title><rect x="619.3" y="755.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="622.3" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.15%)</title><rect x="619.3" y="739.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="622.3" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.15%)</title><rect x="619.3" y="723.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="622.3" y="734.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.07%)</title><rect x="619.3" y="707.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="622.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.07%)</title><rect x="620.1" y="707.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.1" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.07%)</title><rect x="620.1" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="623.1" y="702.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.07%)</title><rect x="620.1" y="675.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="623.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.07%)</title><rect x="620.1" y="659.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="623.1" y="670.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.07%)</title><rect x="620.1" y="643.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="623.1" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.29%)</title><rect x="621.0" y="819.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="624.0" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.07%)</title><rect x="624.4" y="851.0" width="0.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="627.4" y="862.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.44%)</title><rect x="625.3" y="851.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="628.3" y="862.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.07%)</title><rect x="630.4" y="867.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="633.4" y="878.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (51 samples, 3.70%)</title><rect x="631.3" y="867.0" width="43.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="634.3" y="878.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (50 samples, 3.63%)</title><rect x="632.1" y="851.0" width="42.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.1" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (25 samples, 1.82%)</title><rect x="639.0" y="835.0" width="21.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.0" y="846.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="639.0" y="819.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.0" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="639.0" y="803.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.0" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.15%)</title><rect x="639.0" y="787.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.07%)</title><rect x="639.8" y="771.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.8" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (23 samples, 1.67%)</title><rect x="640.7" y="819.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="643.7" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (15 samples, 1.09%)</title><rect x="647.6" y="803.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="650.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="660.4" y="835.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.4" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="660.4" y="819.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="663.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.15%)</title><rect x="660.4" y="803.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.4" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (15 samples, 1.09%)</title><rect x="662.1" y="835.0" width="12.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="665.1" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.put (15 samples, 1.09%)</title><rect x="662.1" y="819.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.1" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.22%)</title><rect x="662.1" y="803.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.22%)</title><rect x="662.1" y="787.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="665.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.22%)</title><rect x="662.1" y="771.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="665.1" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.07%)</title><rect x="663.8" y="755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (12 samples, 0.87%)</title><rect x="664.7" y="803.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="667.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.07%)</title><rect x="674.1" y="787.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.1" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="674.1" y="771.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="677.1" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="674.1" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="677.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (45 samples, 3.27%)</title><rect x="675.0" y="883.0" width="38.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="678.0" y="894.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (20 samples, 1.45%)</title><rect x="689.5" y="867.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (18 samples, 1.31%)</title><rect x="691.3" y="851.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="694.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.51%)</title><rect x="691.3" y="835.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="694.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.15%)</title><rect x="695.5" y="819.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.5" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (11 samples, 0.80%)</title><rect x="697.3" y="835.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="700.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.80%)</title><rect x="697.3" y="819.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="700.3" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.58%)</title><rect x="699.8" y="803.0" width="6.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="702.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.51%)</title><rect x="700.7" y="787.0" width="6.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="703.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (8 samples, 0.58%)</title><rect x="706.7" y="867.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="709.7" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (8 samples, 0.58%)</title><rect x="706.7" y="851.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$233/1598898814.get$Lambda (8 samples, 0.58%)</title><rect x="706.7" y="835.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="709.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties$$Lambda$233/1598898814.&lt;init&gt; (6 samples, 0.44%)</title><rect x="708.4" y="819.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="711.4" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="709.3" y="803.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="712.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="709.3" y="787.0" width="2.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="712.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.07%)</title><rect x="711.8" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="714.8" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.07%)</title><rect x="712.7" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="715.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 3.20%)</title><rect x="713.5" y="899.0" width="37.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="716.5" y="910.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 3.20%)</title><rect x="713.5" y="883.0" width="37.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.5" y="894.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/1087290962.process (21 samples, 1.53%)</title><rect x="713.5" y="867.0" width="18.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (16 samples, 1.16%)</title><rect x="717.8" y="851.0" width="13.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="720.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (13 samples, 0.94%)</title><rect x="717.8" y="835.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="720.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (9 samples, 0.65%)</title><rect x="721.3" y="819.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="724.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLong.incrementAndGet (1 samples, 0.07%)</title><rect x="724.7" y="803.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="727.7" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="725.5" y="803.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.5" y="814.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="725.5" y="787.0" width="3.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="728.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.22%)</title><rect x="729.0" y="835.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="732.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="729.8" y="819.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.8" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="729.8" y="803.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="732.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.07%)</title><rect x="731.5" y="867.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="734.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.07%)</title><rect x="731.5" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="734.5" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.07%)</title><rect x="731.5" y="835.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="734.5" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.07%)</title><rect x="731.5" y="819.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="734.5" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.07%)</title><rect x="731.5" y="803.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="734.5" y="814.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.07%)</title><rect x="731.5" y="787.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="734.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.22%)</title><rect x="732.4" y="867.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="735.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.22%)</title><rect x="732.4" y="851.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="735.4" y="862.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.07%)</title><rect x="735.0" y="867.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.0" y="878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.07%)</title><rect x="735.0" y="851.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="738.0" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$508/589404743.get$Lambda (1 samples, 0.07%)</title><rect x="735.0" y="835.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.0" y="846.0"></text>
</g>
<g>
<title>Klass::java_mirror() const (1 samples, 0.07%)</title><rect x="735.0" y="819.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="738.0" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="735.8" y="867.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="738.8" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="735.8" y="851.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="738.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.15%)</title><rect x="737.5" y="867.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="740.5" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.15%)</title><rect x="737.5" y="851.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="739.3" y="867.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="742.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.07%)</title><rect x="739.3" y="851.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.3" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.22%)</title><rect x="740.1" y="867.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="743.1" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.15%)</title><rect x="741.0" y="851.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="744.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.73%)</title><rect x="742.7" y="867.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="745.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.73%)</title><rect x="742.7" y="851.0" width="8.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="745.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.44%)</title><rect x="746.1" y="835.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="749.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.22%)</title><rect x="746.1" y="819.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="749.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$508/589404743.accept (1 samples, 0.07%)</title><rect x="746.1" y="803.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="749.1" y="814.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="747.0" y="803.0" width="1.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="750.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.22%)</title><rect x="748.7" y="819.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$508/589404743.accept (2 samples, 0.15%)</title><rect x="749.5" y="803.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="752.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (2 samples, 0.15%)</title><rect x="749.5" y="787.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="752.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.07%)</title><rect x="751.2" y="899.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.2" y="910.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.07%)</title><rect x="751.2" y="883.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="754.2" y="894.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.07%)</title><rect x="751.2" y="867.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="754.2" y="878.0"></text>
</g>
<g>
<title>java/time/Duration.&lt;init&gt; (1 samples, 0.07%)</title><rect x="751.2" y="851.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="754.2" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (109 samples, 7.92%)</title><rect x="752.1" y="899.0" width="93.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.1" y="910.0">io/micromet..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (106 samples, 7.70%)</title><rect x="753.0" y="883.0" width="90.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.0" y="894.0">io/microme..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (106 samples, 7.70%)</title><rect x="753.0" y="867.0" width="90.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.0" y="878.0">io/microme..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (84 samples, 6.10%)</title><rect x="753.0" y="851.0" width="71.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="756.0" y="862.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (84 samples, 6.10%)</title><rect x="753.0" y="835.0" width="71.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="756.0" y="846.0">io/micro..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="756.4" y="819.0" width="0.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="759.4" y="830.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (75 samples, 5.45%)</title><rect x="757.2" y="819.0" width="64.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="760.2" y="830.0">io/micr..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (75 samples, 5.45%)</title><rect x="757.2" y="803.0" width="64.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.2" y="814.0">io/micr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (75 samples, 5.45%)</title><rect x="757.2" y="787.0" width="64.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.2" y="798.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (75 samples, 5.45%)</title><rect x="757.2" y="771.0" width="64.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.2" y="782.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (75 samples, 5.45%)</title><rect x="757.2" y="755.0" width="64.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.2" y="766.0">org/Hdr..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (59 samples, 4.28%)</title><rect x="757.2" y="739.0" width="50.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="760.2" y="750.0">org/H..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (37 samples, 2.69%)</title><rect x="757.2" y="723.0" width="31.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="760.2" y="734.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (37 samples, 2.69%)</title><rect x="757.2" y="707.0" width="31.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.2" y="718.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (22 samples, 1.60%)</title><rect x="789.0" y="723.0" width="18.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="792.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (22 samples, 1.60%)</title><rect x="789.0" y="707.0" width="18.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="792.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (22 samples, 1.60%)</title><rect x="789.0" y="691.0" width="18.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="792.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (22 samples, 1.60%)</title><rect x="789.0" y="675.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="792.0" y="686.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (16 samples, 1.16%)</title><rect x="807.8" y="739.0" width="13.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="810.8" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="821.5" y="819.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="824.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="821.5" y="803.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="824.5" y="814.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (22 samples, 1.60%)</title><rect x="824.9" y="851.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="827.9" y="862.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 0.29%)</title><rect x="824.9" y="835.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="827.9" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 0.29%)</title><rect x="824.9" y="819.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="827.9" y="830.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="825.8" y="803.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="825.8" y="787.0" width="2.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="828.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (18 samples, 1.31%)</title><rect x="828.4" y="835.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="831.4" y="846.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="842.9" y="819.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="845.9" y="830.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.07%)</title><rect x="843.8" y="883.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.8" y="894.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$Values.iterator (1 samples, 0.07%)</title><rect x="844.7" y="883.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="847.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.15%)</title><rect x="845.5" y="899.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="848.5" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (129 samples, 9.37%)</title><rect x="847.2" y="899.0" width="110.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="850.2" y="910.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (129 samples, 9.37%)</title><rect x="847.2" y="883.0" width="110.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.2" y="894.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (129 samples, 9.37%)</title><rect x="847.2" y="867.0" width="110.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.2" y="878.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.29%)</title><rect x="847.2" y="851.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="850.2" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$509/315129833.accept (3 samples, 0.22%)</title><rect x="848.1" y="835.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="851.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (125 samples, 9.08%)</title><rect x="850.7" y="851.0" width="107.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.7" y="862.0">java/util/con..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$509/315129833.accept (125 samples, 9.08%)</title><rect x="850.7" y="835.0" width="107.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="853.7" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (124 samples, 9.01%)</title><rect x="851.5" y="819.0" width="106.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.5" y="830.0">com/linecorp/..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (124 samples, 9.01%)</title><rect x="851.5" y="803.0" width="106.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="854.5" y="814.0">io/micrometer..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (117 samples, 8.50%)</title><rect x="851.5" y="787.0" width="100.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="854.5" y="798.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (116 samples, 8.42%)</title><rect x="852.4" y="771.0" width="99.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="855.4" y="782.0">io/micromete..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (98 samples, 7.12%)</title><rect x="852.4" y="755.0" width="83.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.4" y="766.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (98 samples, 7.12%)</title><rect x="852.4" y="739.0" width="83.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.4" y="750.0">io/microm..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (86 samples, 6.25%)</title><rect x="860.1" y="723.0" width="73.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="863.1" y="734.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (86 samples, 6.25%)</title><rect x="860.1" y="707.0" width="73.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="863.1" y="718.0">io/micro..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (86 samples, 6.25%)</title><rect x="860.1" y="691.0" width="73.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.1" y="702.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (86 samples, 6.25%)</title><rect x="860.1" y="675.0" width="73.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.1" y="686.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (86 samples, 6.25%)</title><rect x="860.1" y="659.0" width="73.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.1" y="670.0">org/HdrH..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (69 samples, 5.01%)</title><rect x="860.1" y="643.0" width="59.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.1" y="654.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (36 samples, 2.61%)</title><rect x="860.1" y="627.0" width="30.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="863.1" y="638.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (36 samples, 2.61%)</title><rect x="860.1" y="611.0" width="30.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="863.1" y="622.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (33 samples, 2.40%)</title><rect x="890.9" y="627.0" width="28.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="893.9" y="638.0">or..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (33 samples, 2.40%)</title><rect x="890.9" y="611.0" width="28.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="893.9" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (33 samples, 2.40%)</title><rect x="890.9" y="595.0" width="28.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="893.9" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (33 samples, 2.40%)</title><rect x="890.9" y="579.0" width="28.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="893.9" y="590.0">ja..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (17 samples, 1.23%)</title><rect x="919.2" y="643.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.2" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="933.8" y="723.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.8" y="734.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="933.8" y="707.0" width="2.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="936.8" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (18 samples, 1.31%)</title><rect x="936.3" y="755.0" width="15.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="939.3" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (9 samples, 0.65%)</title><rect x="936.3" y="739.0" width="7.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="939.3" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (9 samples, 0.65%)</title><rect x="936.3" y="723.0" width="7.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="939.3" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.44%)</title><rect x="938.9" y="707.0" width="5.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="941.9" y="718.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="938.9" y="691.0" width="5.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="941.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (9 samples, 0.65%)</title><rect x="944.1" y="739.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="947.1" y="750.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="950.9" y="723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="953.9" y="734.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (7 samples, 0.51%)</title><rect x="951.8" y="787.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="954.8" y="798.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.22%)</title><rect x="955.2" y="771.0" width="2.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="958.2" y="782.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="955.2" y="755.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="958.2" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.29%)</title><rect x="957.8" y="915.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="960.8" y="926.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.29%)</title><rect x="957.8" y="899.0" width="3.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="960.8" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (33 samples, 2.40%)</title><rect x="961.2" y="931.0" width="28.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="964.2" y="942.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (13 samples, 0.94%)</title><rect x="961.2" y="915.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="964.2" y="926.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (12 samples, 0.87%)</title><rect x="962.1" y="899.0" width="10.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="965.1" y="910.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.07%)</title><rect x="962.1" y="883.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="965.1" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.07%)</title><rect x="962.1" y="867.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.1" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (11 samples, 0.80%)</title><rect x="962.9" y="883.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="965.9" y="894.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (8 samples, 0.58%)</title><rect x="962.9" y="867.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="965.9" y="878.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (6 samples, 0.44%)</title><rect x="964.6" y="851.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="967.6" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.22%)</title><rect x="967.2" y="835.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="970.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.22%)</title><rect x="967.2" y="819.0" width="2.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="970.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/LongAdder.add (3 samples, 0.22%)</title><rect x="969.8" y="867.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="972.8" y="878.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (20 samples, 1.45%)</title><rect x="972.3" y="915.0" width="17.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="975.3" y="926.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.07%)</title><rect x="982.6" y="899.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="985.6" y="910.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.51%)</title><rect x="983.5" y="899.0" width="6.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="986.5" y="910.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.44%)</title><rect x="984.3" y="883.0" width="5.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="987.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.15%)</title><rect x="989.5" y="979.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="992.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.15%)</title><rect x="989.5" y="963.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="992.5" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.15%)</title><rect x="989.5" y="947.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="992.5" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.15%)</title><rect x="989.5" y="931.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="992.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (194 samples, 14.09%)</title><rect x="991.2" y="979.0" width="166.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="994.2" y="990.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (193 samples, 14.02%)</title><rect x="992.0" y="963.0" width="165.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="995.0" y="974.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (168 samples, 12.20%)</title><rect x="992.9" y="947.0" width="144.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="995.9" y="958.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.09%)</title><rect x="997.2" y="931.0" width="12.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1000.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (15 samples, 1.09%)</title><rect x="997.2" y="915.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1000.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.hasQueuedPredecessors (15 samples, 1.09%)</title><rect x="997.2" y="899.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1000.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (4 samples, 0.29%)</title><rect x="1010.0" y="931.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1013.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.29%)</title><rect x="1010.0" y="915.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1013.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.07%)</title><rect x="1010.9" y="899.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1013.9" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.07%)</title><rect x="1010.9" y="883.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1013.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.07%)</title><rect x="1010.9" y="867.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1013.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.15%)</title><rect x="1011.8" y="899.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1014.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.36%)</title><rect x="1013.5" y="931.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1016.5" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.36%)</title><rect x="1013.5" y="915.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1016.5" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (139 samples, 10.09%)</title><rect x="1017.8" y="931.0" width="119.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.8" y="942.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.07%)</title><rect x="1017.8" y="915.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1020.8" y="926.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (138 samples, 10.02%)</title><rect x="1018.6" y="915.0" width="118.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1021.6" y="926.0">jdk/internal/m..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.07%)</title><rect x="1020.3" y="899.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1023.3" y="910.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.07%)</title><rect x="1021.2" y="899.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.2" y="910.0"></text>
</g>
<g>
<title>Unsafe_Park (134 samples, 9.73%)</title><rect x="1022.0" y="899.0" width="114.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1025.0" y="910.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.15%)</title><rect x="1024.6" y="883.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1027.6" y="894.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (20 samples, 1.45%)</title><rect x="1026.3" y="883.0" width="17.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1029.3" y="894.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.65%)</title><rect x="1031.5" y="867.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.5" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.07%)</title><rect x="1036.6" y="851.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1039.6" y="862.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.15%)</title><rect x="1037.5" y="851.0" width="1.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1040.5" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.07%)</title><rect x="1039.2" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1042.2" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.15%)</title><rect x="1040.0" y="867.0" width="1.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1043.0" y="878.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.15%)</title><rect x="1041.8" y="867.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1044.8" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.07%)</title><rect x="1043.5" y="883.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.5" y="894.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.07%)</title><rect x="1044.3" y="883.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1047.3" y="894.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 2.76%)</title><rect x="1045.2" y="883.0" width="32.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1048.2" y="894.0">__..</text>
</g>
<g>
<title>__pthread_cond_wait (52 samples, 3.78%)</title><rect x="1077.7" y="883.0" width="44.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1080.7" y="894.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.29%)</title><rect x="1122.3" y="883.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1125.3" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.07%)</title><rect x="1125.7" y="883.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1128.7" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.29%)</title><rect x="1126.6" y="883.0" width="3.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1129.6" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.29%)</title><rect x="1130.0" y="883.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1133.0" y="894.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.07%)</title><rect x="1133.4" y="883.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1136.4" y="894.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.07%)</title><rect x="1134.3" y="883.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1137.3" y="894.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.15%)</title><rect x="1135.2" y="883.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 1.67%)</title><rect x="1136.9" y="947.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1139.9" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 1.67%)</title><rect x="1136.9" y="931.0" width="19.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1139.9" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 1.67%)</title><rect x="1136.9" y="915.0" width="19.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1139.9" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 1.67%)</title><rect x="1136.9" y="899.0" width="19.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1139.9" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.07%)</title><rect x="1156.6" y="947.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1159.6" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.07%)</title><rect x="1157.4" y="1027.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1160.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.hasFailed (1 samples, 0.07%)</title><rect x="1157.4" y="1011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1160.4" y="1022.0"></text>
</g>
<g>
<title>start_thread (37 samples, 2.69%)</title><rect x="1158.3" y="1027.0" width="31.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1161.3" y="1038.0">st..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (37 samples, 2.69%)</title><rect x="1158.3" y="1011.0" width="31.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1161.3" y="1022.0">th..</text>
</g>
<g>
<title>Thread::call_run() (37 samples, 2.69%)</title><rect x="1158.3" y="995.0" width="31.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1161.3" y="1006.0">Th..</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.15%)</title><rect x="1158.3" y="979.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1161.3" y="990.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.15%)</title><rect x="1158.3" y="963.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.3" y="974.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.07%)</title><rect x="1158.3" y="947.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1161.3" y="958.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.07%)</title><rect x="1158.3" y="931.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1161.3" y="942.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.07%)</title><rect x="1159.2" y="947.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.2" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.07%)</title><rect x="1159.2" y="931.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.2" y="942.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.07%)</title><rect x="1159.2" y="915.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.2" y="926.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.07%)</title><rect x="1159.2" y="899.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.2" y="910.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.07%)</title><rect x="1159.2" y="883.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.2" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (34 samples, 2.47%)</title><rect x="1160.0" y="979.0" width="29.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.0" y="990.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (34 samples, 2.47%)</title><rect x="1160.0" y="963.0" width="29.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.0" y="974.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (34 samples, 2.47%)</title><rect x="1160.0" y="947.0" width="29.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.0" y="958.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (34 samples, 2.47%)</title><rect x="1160.0" y="931.0" width="29.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.0" y="942.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (34 samples, 2.47%)</title><rect x="1160.0" y="915.0" width="29.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.0" y="926.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 1.45%)</title><rect x="1160.0" y="899.0" width="17.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.0" y="910.0"></text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.22%)</title><rect x="1160.0" y="883.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.0" y="894.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.15%)</title><rect x="1160.0" y="867.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.0" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.07%)</title><rect x="1161.7" y="867.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.7" y="878.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.07%)</title><rect x="1161.7" y="851.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.7" y="862.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.07%)</title><rect x="1161.7" y="835.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.7" y="846.0"></text>
</g>
<g>
<title>compN_rReg_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.07%)</title><rect x="1161.7" y="819.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.7" y="830.0"></text>
</g>
<g>
<title>TypeOopPtr::get_con() const (1 samples, 0.07%)</title><rect x="1161.7" y="803.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.7" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.07%)</title><rect x="1162.6" y="883.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.6" y="894.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.22%)</title><rect x="1163.4" y="883.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.4" y="894.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.22%)</title><rect x="1163.4" y="867.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.4" y="878.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.15%)</title><rect x="1163.4" y="851.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="862.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.15%)</title><rect x="1163.4" y="835.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.4" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.15%)</title><rect x="1163.4" y="819.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.4" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.07%)</title><rect x="1164.3" y="803.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.3" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.07%)</title><rect x="1164.3" y="787.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1167.3" y="798.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.07%)</title><rect x="1165.1" y="851.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.1" y="862.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.07%)</title><rect x="1165.1" y="835.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.15%)</title><rect x="1166.0" y="883.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.0" y="894.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.15%)</title><rect x="1166.0" y="867.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.0" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.15%)</title><rect x="1166.0" y="851.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.0" y="862.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.07%)</title><rect x="1166.0" y="835.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_exit_block_pressure(Block*) (1 samples, 0.07%)</title><rect x="1166.9" y="835.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (11 samples, 0.80%)</title><rect x="1167.7" y="883.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.07%)</title><rect x="1167.7" y="867.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1167.7" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.29%)</title><rect x="1168.6" y="867.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.22%)</title><rect x="1168.6" y="851.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.6" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.07%)</title><rect x="1170.3" y="835.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.07%)</title><rect x="1171.1" y="851.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.1" y="862.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.07%)</title><rect x="1171.1" y="835.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.1" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.07%)</title><rect x="1172.0" y="867.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.0" y="878.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.07%)</title><rect x="1172.0" y="851.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.0" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.15%)</title><rect x="1172.9" y="867.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.9" y="878.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.07%)</title><rect x="1173.7" y="851.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="862.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.15%)</title><rect x="1174.6" y="867.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.6" y="878.0"></text>
</g>
<g>
<title>testL_regNode::ideal_Opcode() const (1 samples, 0.07%)</title><rect x="1176.3" y="867.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="878.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 0.80%)</title><rect x="1177.1" y="899.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (4 samples, 0.29%)</title><rect x="1177.1" y="883.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.29%)</title><rect x="1177.1" y="867.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.15%)</title><rect x="1177.1" y="851.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.15%)</title><rect x="1177.1" y="835.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1177.1" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.07%)</title><rect x="1178.0" y="819.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="830.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.07%)</title><rect x="1178.0" y="803.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.15%)</title><rect x="1178.9" y="851.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.9" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.07%)</title><rect x="1178.9" y="835.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>Dict::Dict(int (*)(void const*, void const*), int (*)(void const*)) (1 samples, 0.07%)</title><rect x="1178.9" y="819.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.07%)</title><rect x="1179.7" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.7" y="846.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.07%)</title><rect x="1179.7" y="819.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="830.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.07%)</title><rect x="1179.7" y="803.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.07%)</title><rect x="1179.7" y="787.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.07%)</title><rect x="1180.6" y="883.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.07%)</title><rect x="1180.6" y="867.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.07%)</title><rect x="1180.6" y="851.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.07%)</title><rect x="1180.6" y="835.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.07%)</title><rect x="1181.4" y="883.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="894.0"></text>
</g>
<g>
<title>PhaseTransform::PhaseTransform(Phase::PhaseNumber) (1 samples, 0.07%)</title><rect x="1181.4" y="867.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.15%)</title><rect x="1182.3" y="883.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="894.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1182.3" y="867.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.07%)</title><rect x="1183.1" y="867.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.07%)</title><rect x="1183.1" y="851.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.22%)</title><rect x="1184.0" y="883.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.0" y="894.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.22%)</title><rect x="1184.0" y="867.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="878.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1184.0" y="851.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.0" y="862.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.07%)</title><rect x="1184.9" y="851.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.9" y="862.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1185.7" y="851.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="862.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.07%)</title><rect x="1185.7" y="835.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="819.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="803.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="787.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="771.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="755.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="739.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="723.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="734.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.07%)</title><rect x="1185.7" y="707.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.07%)</title><rect x="1185.7" y="691.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.22%)</title><rect x="1186.6" y="899.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.22%)</title><rect x="1186.6" y="883.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.22%)</title><rect x="1186.6" y="867.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.22%)</title><rect x="1186.6" y="851.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.22%)</title><rect x="1186.6" y="835.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.22%)</title><rect x="1186.6" y="819.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1186.6" y="803.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1186.6" y="787.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1186.6" y="771.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1186.6" y="755.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1186.6" y="739.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.15%)</title><rect x="1186.6" y="723.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1186.6" y="707.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1186.6" y="691.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1186.6" y="675.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1186.6" y="659.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1186.6" y="643.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="627.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="611.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="622.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.07%)</title><rect x="1186.6" y="595.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="606.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="579.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="590.0"></text>
</g>
<g>
<title>Type::make_from_constant(ciConstant, bool, int, bool, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="563.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_constant(ciObject*, bool) (1 samples, 0.07%)</title><rect x="1186.6" y="547.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="558.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.07%)</title><rect x="1186.6" y="531.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="542.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.07%)</title><rect x="1186.6" y="515.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1189.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1187.4" y="675.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.4" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1187.4" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="670.0"></text>
</g>
<g>
<title>Type::cleanup_speculative() const (1 samples, 0.07%)</title><rect x="1187.4" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.4" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="803.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="787.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="771.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="755.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="723.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="707.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="691.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="675.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="659.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="643.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="627.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="611.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="595.0" width="0.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.3" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="579.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="563.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="547.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="531.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="515.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="499.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.3" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="483.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="467.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="451.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="435.0" width="0.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="419.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="403.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="387.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="371.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="355.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="339.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="323.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="307.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="291.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="275.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="259.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="243.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="227.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="211.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.3" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="195.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.07%)</title><rect x="1188.3" y="179.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.07%)</title><rect x="1188.3" y="163.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.07%)</title><rect x="1188.3" y="147.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.07%)</title><rect x="1188.3" y="131.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.3" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.07%)</title><rect x="1188.3" y="115.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.07%)</title><rect x="1188.3" y="99.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="110.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.07%)</title><rect x="1188.3" y="83.0" width="0.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.3" y="94.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.07%)</title><rect x="1188.3" y="67.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.3" y="78.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.07%)</title><rect x="1188.3" y="51.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.3" y="62.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.07%)</title><rect x="1188.3" y="35.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.3" y="46.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.07%)</title><rect x="1189.1" y="979.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.1" y="990.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.07%)</title><rect x="1189.1" y="963.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1192.1" y="974.0"></text>
</g>
<g>
<title>__sched_yield (1 samples, 0.07%)</title><rect x="1189.1" y="947.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1192.1" y="958.0"></text>
</g>
</g>
</svg>
