<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="661"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="661"> </text>
<g id="frames">
<g>
<title>all (249 samples, 100.00%)</title><rect x="10.0" y="627.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="638.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 1.20%)</title><rect x="10.0" y="611.0" width="14.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.20%)</title><rect x="10.0" y="595.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.80%)</title><rect x="14.7" y="579.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.40%)</title><rect x="14.7" y="563.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.7" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.40%)</title><rect x="14.7" y="547.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.7" y="558.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.40%)</title><rect x="19.5" y="563.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="22.5" y="574.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.40%)</title><rect x="19.5" y="547.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="22.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 7.23%)</title><rect x="24.2" y="611.0" width="85.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.2" y="622.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (18 samples, 7.23%)</title><rect x="24.2" y="595.0" width="85.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="27.2" y="606.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 6.02%)</title><rect x="29.0" y="579.0" width="71.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.0" y="590.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.80%)</title><rect x="29.0" y="563.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.40%)</title><rect x="29.0" y="547.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.40%)</title><rect x="33.7" y="547.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.40%)</title><rect x="33.7" y="531.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.7" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.paused (1 samples, 0.40%)</title><rect x="33.7" y="515.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.7" y="526.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.41%)</title><rect x="38.4" y="563.0" width="28.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.4" y="574.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$271/716656862.accept (6 samples, 2.41%)</title><rect x="38.4" y="547.0" width="28.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.4" y="558.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (6 samples, 2.41%)</title><rect x="38.4" y="531.0" width="28.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.4" y="542.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (4 samples, 1.61%)</title><rect x="38.4" y="515.0" width="19.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.61%)</title><rect x="38.4" y="499.0" width="19.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.61%)</title><rect x="38.4" y="483.0" width="19.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.4" y="494.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (3 samples, 1.20%)</title><rect x="38.4" y="467.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.4" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (3 samples, 1.20%)</title><rect x="38.4" y="451.0" width="14.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.4" y="462.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (3 samples, 1.20%)</title><rect x="38.4" y="435.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.40%)</title><rect x="52.7" y="467.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="55.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.40%)</title><rect x="52.7" y="451.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.7" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.40%)</title><rect x="52.7" y="435.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="55.7" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.40%)</title><rect x="52.7" y="419.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.7" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.40%)</title><rect x="52.7" y="403.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="52.7" y="387.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.80%)</title><rect x="57.4" y="515.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.40%)</title><rect x="62.1" y="499.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="62.1" y="483.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="62.1" y="467.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 2.81%)</title><rect x="66.9" y="563.0" width="33.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.9" y="574.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 2.81%)</title><rect x="66.9" y="547.0" width="33.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="69.9" y="558.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.01%)</title><rect x="66.9" y="531.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.9" y="542.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.20%)</title><rect x="66.9" y="515.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="69.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.80%)</title><rect x="71.6" y="499.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.80%)</title><rect x="71.6" y="483.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.80%)</title><rect x="71.6" y="467.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="76.3" y="451.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="79.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.hasBytesBuffered (1 samples, 0.40%)</title><rect x="76.3" y="435.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (2 samples, 0.80%)</title><rect x="81.1" y="515.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.1" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.80%)</title><rect x="81.1" y="499.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.40%)</title><rect x="81.1" y="483.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.40%)</title><rect x="81.1" y="467.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.40%)</title><rect x="81.1" y="451.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.40%)</title><rect x="81.1" y="435.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.40%)</title><rect x="81.1" y="419.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="84.1" y="430.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.40%)</title><rect x="81.1" y="403.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.40%)</title><rect x="85.8" y="483.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.40%)</title><rect x="85.8" y="467.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="85.8" y="451.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.40%)</title><rect x="85.8" y="435.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.40%)</title><rect x="85.8" y="419.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.40%)</title><rect x="90.6" y="531.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.40%)</title><rect x="90.6" y="515.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.40%)</title><rect x="90.6" y="499.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.6" y="510.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.40%)</title><rect x="90.6" y="483.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="93.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.40%)</title><rect x="90.6" y="467.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="93.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.40%)</title><rect x="90.6" y="451.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.6" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="90.6" y="435.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="93.6" y="446.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="90.6" y="419.0" width="4.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="93.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.40%)</title><rect x="95.3" y="531.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="95.3" y="515.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="95.3" y="499.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.40%)</title><rect x="95.3" y="483.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.40%)</title><rect x="95.3" y="467.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.40%)</title><rect x="95.3" y="451.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.3" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.40%)</title><rect x="95.3" y="435.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.3" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/EPoll.wait (1 samples, 0.40%)</title><rect x="95.3" y="419.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.3" y="430.0"></text>
</g>
<g>
<title>__GI_epoll_wait (1 samples, 0.40%)</title><rect x="95.3" y="403.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="98.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="100.0" y="579.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="103.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.40%)</title><rect x="100.0" y="563.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="103.0" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.40%)</title><rect x="104.8" y="579.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.8" y="590.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (1 samples, 0.40%)</title><rect x="104.8" y="563.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.8" y="574.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.40%)</title><rect x="104.8" y="547.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.8" y="558.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.40%)</title><rect x="104.8" y="531.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="107.8" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (1 samples, 0.40%)</title><rect x="104.8" y="515.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.8" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.40%)</title><rect x="104.8" y="499.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.8" y="510.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (1 samples, 0.40%)</title><rect x="104.8" y="483.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="107.8" y="494.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (1 samples, 0.40%)</title><rect x="104.8" y="467.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.8" y="478.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (1 samples, 0.40%)</title><rect x="104.8" y="451.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="107.8" y="462.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (1 samples, 0.40%)</title><rect x="104.8" y="435.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="107.8" y="446.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.40%)</title><rect x="104.8" y="419.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.8" y="430.0"></text>
</g>
<g>
<title>java/lang/Thread.run (188 samples, 75.50%)</title><rect x="109.5" y="611.0" width="890.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.5" y="622.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (188 samples, 75.50%)</title><rect x="109.5" y="595.0" width="890.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="112.5" y="606.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (188 samples, 75.50%)</title><rect x="109.5" y="579.0" width="890.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.5" y="590.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/257574414.run (177 samples, 71.08%)</title><rect x="114.3" y="563.0" width="838.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.3" y="574.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$506/257574414.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (177 samples, 71.08%)</title><rect x="114.3" y="547.0" width="838.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.3" y="558.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (177 samples, 71.08%)</title><rect x="114.3" y="531.0" width="838.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.3" y="542.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (166 samples, 66.67%)</title><rect x="114.3" y="515.0" width="786.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.3" y="526.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (16 samples, 6.43%)</title><rect x="114.3" y="499.0" width="75.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="117.3" y="510.0">com/line..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.40%)</title><rect x="114.3" y="483.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.3" y="494.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.40%)</title><rect x="114.3" y="467.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$510/432397174.get$Lambda (1 samples, 0.40%)</title><rect x="114.3" y="451.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.3" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="114.3" y="435.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="117.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 6.02%)</title><rect x="119.0" y="483.0" width="71.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.0" y="494.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 6.02%)</title><rect x="119.0" y="467.0" width="71.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="122.0" y="478.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (10 samples, 4.02%)</title><rect x="142.7" y="451.0" width="47.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="145.7" y="462.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 4.02%)</title><rect x="142.7" y="435.0" width="47.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="145.7" y="446.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$510/432397174.accept (10 samples, 4.02%)</title><rect x="142.7" y="419.0" width="47.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="145.7" y="430.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (10 samples, 4.02%)</title><rect x="142.7" y="403.0" width="47.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="145.7" y="414.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (10 samples, 4.02%)</title><rect x="142.7" y="387.0" width="47.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="145.7" y="398.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (10 samples, 4.02%)</title><rect x="142.7" y="371.0" width="47.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="145.7" y="382.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 4.02%)</title><rect x="142.7" y="355.0" width="47.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="145.7" y="366.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 2.01%)</title><rect x="142.7" y="339.0" width="23.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="145.7" y="350.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/685458044.accept (2 samples, 0.80%)</title><rect x="147.4" y="323.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.4" y="334.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.80%)</title><rect x="156.9" y="323.0" width="9.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="159.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 2.01%)</title><rect x="166.4" y="339.0" width="23.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="169.4" y="350.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$504/685458044.accept (2 samples, 0.80%)</title><rect x="180.6" y="323.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.6" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.80%)</title><rect x="190.1" y="499.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (2 samples, 0.80%)</title><rect x="190.1" y="483.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="193.1" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.80%)</title><rect x="190.1" y="467.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.1" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.80%)</title><rect x="190.1" y="451.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="193.1" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.80%)</title><rect x="190.1" y="435.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="193.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (11 samples, 4.42%)</title><rect x="199.6" y="499.0" width="52.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.6" y="510.0">com/l..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 4.42%)</title><rect x="199.6" y="483.0" width="52.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="494.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (10 samples, 4.02%)</title><rect x="199.6" y="467.0" width="47.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.6" y="478.0">io/m..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (7 samples, 2.81%)</title><rect x="199.6" y="451.0" width="33.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.6" y="462.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (7 samples, 2.81%)</title><rect x="199.6" y="435.0" width="33.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.6" y="446.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (6 samples, 2.41%)</title><rect x="204.3" y="419.0" width="28.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="430.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (6 samples, 2.41%)</title><rect x="204.3" y="403.0" width="28.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.3" y="414.0">io..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (6 samples, 2.41%)</title><rect x="204.3" y="387.0" width="28.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="207.3" y="398.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (6 samples, 2.41%)</title><rect x="204.3" y="371.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.3" y="382.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (6 samples, 2.41%)</title><rect x="204.3" y="355.0" width="28.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.3" y="366.0">or..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (5 samples, 2.01%)</title><rect x="204.3" y="339.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="350.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (4 samples, 1.61%)</title><rect x="204.3" y="323.0" width="19.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.3" y="334.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (4 samples, 1.61%)</title><rect x="204.3" y="307.0" width="19.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.3" y="318.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (1 samples, 0.40%)</title><rect x="223.3" y="323.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (1 samples, 0.40%)</title><rect x="223.3" y="307.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.40%)</title><rect x="223.3" y="291.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (1 samples, 0.40%)</title><rect x="223.3" y="275.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.3" y="286.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (1 samples, 0.40%)</title><rect x="228.0" y="339.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="231.0" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (3 samples, 1.20%)</title><rect x="232.7" y="451.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.7" y="462.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 1.20%)</title><rect x="232.7" y="435.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.7" y="446.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (3 samples, 1.20%)</title><rect x="232.7" y="419.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.7" y="430.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (1 samples, 0.40%)</title><rect x="246.9" y="467.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="249.9" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (16 samples, 6.43%)</title><rect x="251.7" y="499.0" width="75.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.7" y="510.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$174/1574029810.extract (16 samples, 6.43%)</title><rect x="251.7" y="483.0" width="75.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.7" y="494.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (16 samples, 6.43%)</title><rect x="251.7" y="467.0" width="75.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="254.7" y="478.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 6.43%)</title><rect x="251.7" y="451.0" width="75.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="254.7" y="462.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 6.43%)</title><rect x="251.7" y="435.0" width="75.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.7" y="446.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 6.43%)</title><rect x="251.7" y="419.0" width="75.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="254.7" y="430.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 2.01%)</title><rect x="251.7" y="403.0" width="23.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.7" y="414.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.40%)</title><rect x="251.7" y="387.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.40%)</title><rect x="251.7" y="371.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="254.7" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="251.7" y="355.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="254.7" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="251.7" y="339.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="254.7" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="251.7" y="323.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="254.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="251.7" y="307.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="254.7" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.40%)</title><rect x="251.7" y="291.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="254.7" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.61%)</title><rect x="256.4" y="387.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.61%)</title><rect x="256.4" y="371.0" width="19.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (4 samples, 1.61%)</title><rect x="256.4" y="355.0" width="19.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (4 samples, 1.61%)</title><rect x="256.4" y="339.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (4 samples, 1.61%)</title><rect x="256.4" y="323.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (4 samples, 1.61%)</title><rect x="256.4" y="307.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (9 samples, 3.61%)</title><rect x="275.4" y="403.0" width="42.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.4" y="414.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.80%)</title><rect x="275.4" y="387.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="278.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.80%)</title><rect x="275.4" y="371.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="278.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="280.1" y="355.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="283.1" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.40%)</title><rect x="280.1" y="339.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.1" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (7 samples, 2.81%)</title><rect x="284.9" y="387.0" width="33.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.9" y="398.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (7 samples, 2.81%)</title><rect x="284.9" y="371.0" width="33.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.9" y="382.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="284.9" y="355.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="284.9" y="339.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.40%)</title><rect x="284.9" y="323.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.9" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.40%)</title><rect x="284.9" y="307.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="287.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.40%)</title><rect x="284.9" y="291.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.9" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (1 samples, 0.40%)</title><rect x="284.9" y="275.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="287.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.41%)</title><rect x="289.6" y="355.0" width="28.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.6" y="366.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.41%)</title><rect x="289.6" y="339.0" width="28.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.6" y="350.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.41%)</title><rect x="289.6" y="323.0" width="28.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.6" y="334.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.80%)</title><rect x="289.6" y="307.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.6" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.80%)</title><rect x="289.6" y="291.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="292.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.80%)</title><rect x="289.6" y="275.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="292.6" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.80%)</title><rect x="289.6" y="259.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.6" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.80%)</title><rect x="289.6" y="243.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.6" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 1.61%)</title><rect x="299.1" y="307.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.1" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 1.61%)</title><rect x="299.1" y="291.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.1" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 1.61%)</title><rect x="299.1" y="275.0" width="18.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 1.61%)</title><rect x="299.1" y="259.0" width="18.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="302.1" y="270.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 1.61%)</title><rect x="299.1" y="243.0" width="18.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.1" y="254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 1.61%)</title><rect x="299.1" y="227.0" width="18.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.1" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.80%)</title><rect x="318.0" y="403.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.80%)</title><rect x="318.0" y="387.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="321.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.80%)</title><rect x="318.0" y="371.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.0" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (121 samples, 48.59%)</title><rect x="327.5" y="499.0" width="573.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.5" y="510.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (24 samples, 9.64%)</title><rect x="327.5" y="483.0" width="113.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.5" y="494.0">com/linecorp/d..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 9.64%)</title><rect x="327.5" y="467.0" width="113.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.5" y="478.0">org/slf4j/MDC...</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (22 samples, 8.84%)</title><rect x="332.2" y="451.0" width="104.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.2" y="462.0">ch/qos/logba..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 4.02%)</title><rect x="332.2" y="435.0" width="47.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="335.2" y="446.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 2.41%)</title><rect x="332.2" y="419.0" width="28.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="335.2" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.61%)</title><rect x="341.7" y="403.0" width="19.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.7" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 1.20%)</title><rect x="341.7" y="387.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="344.7" y="398.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (1 samples, 0.40%)</title><rect x="351.2" y="371.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.2" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.40%)</title><rect x="355.9" y="387.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="358.9" y="398.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.61%)</title><rect x="360.7" y="419.0" width="18.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.7" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.61%)</title><rect x="360.7" y="403.0" width="18.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.7" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 3.61%)</title><rect x="379.6" y="435.0" width="42.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.6" y="446.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 2.81%)</title><rect x="389.1" y="419.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="392.1" y="430.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (7 samples, 2.81%)</title><rect x="389.1" y="403.0" width="33.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="392.1" y="414.0">ja..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.20%)</title><rect x="422.3" y="435.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.20%)</title><rect x="422.3" y="419.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="425.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.20%)</title><rect x="422.3" y="403.0" width="14.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="425.3" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="436.5" y="451.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="439.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.80%)</title><rect x="441.2" y="483.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="444.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.80%)</title><rect x="441.2" y="467.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="444.2" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (15 samples, 6.02%)</title><rect x="450.7" y="483.0" width="71.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="453.7" y="494.0">com/line..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="450.7" y="467.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="453.7" y="478.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.40%)</title><rect x="450.7" y="451.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="453.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (14 samples, 5.62%)</title><rect x="455.5" y="467.0" width="66.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="458.5" y="478.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.61%)</title><rect x="455.5" y="451.0" width="18.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.5" y="462.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.20%)</title><rect x="455.5" y="435.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.5" y="446.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.20%)</title><rect x="455.5" y="419.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.5" y="430.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.80%)</title><rect x="455.5" y="403.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.5" y="414.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.80%)</title><rect x="455.5" y="387.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.5" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="464.9" y="403.0" width="4.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="467.9" y="414.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="469.7" y="435.0" width="4.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="472.7" y="446.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 4.02%)</title><rect x="474.4" y="451.0" width="47.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="477.4" y="462.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.21%)</title><rect x="479.2" y="435.0" width="37.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.2" y="446.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.80%)</title><rect x="479.2" y="419.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.80%)</title><rect x="479.2" y="403.0" width="9.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="482.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="483.9" y="387.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="486.9" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 2.41%)</title><rect x="488.6" y="419.0" width="28.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="491.6" y="430.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 2.41%)</title><rect x="488.6" y="403.0" width="28.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.6" y="414.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.40%)</title><rect x="488.6" y="387.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="491.6" y="398.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.40%)</title><rect x="488.6" y="371.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.6" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.40%)</title><rect x="488.6" y="355.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.6" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="488.6" y="339.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="491.6" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (5 samples, 2.01%)</title><rect x="493.4" y="387.0" width="23.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.4" y="398.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.80%)</title><rect x="507.6" y="371.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="510.6" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.80%)</title><rect x="507.6" y="355.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="510.6" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="507.6" y="339.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="510.6" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="507.6" y="323.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="510.6" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="507.6" y="307.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="510.6" y="318.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="507.6" y="291.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="510.6" y="302.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.40%)</title><rect x="507.6" y="275.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="510.6" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.40%)</title><rect x="507.6" y="259.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.6" y="270.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.40%)</title><rect x="507.6" y="243.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.6" y="254.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.40%)</title><rect x="512.3" y="339.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="515.3" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="517.1" y="435.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="520.1" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (56 samples, 22.49%)</title><rect x="521.8" y="483.0" width="265.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="524.8" y="494.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (56 samples, 22.49%)</title><rect x="521.8" y="467.0" width="265.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="524.8" y="478.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="545.5" y="451.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="548.5" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="545.5" y="435.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="548.5" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="545.5" y="419.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="548.5" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="545.5" y="403.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="548.5" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="545.5" y="387.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="548.5" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.40%)</title><rect x="545.5" y="371.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="548.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.40%)</title><rect x="545.5" y="355.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="548.5" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.40%)</title><rect x="545.5" y="339.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="548.5" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.40%)</title><rect x="545.5" y="323.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="548.5" y="334.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.40%)</title><rect x="545.5" y="307.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="548.5" y="318.0"></text>
</g>
<g>
<title>G1RemSet::num_par_rem_sets() (1 samples, 0.40%)</title><rect x="545.5" y="291.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="548.5" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$430/1845948618.process (42 samples, 16.87%)</title><rect x="550.2" y="451.0" width="199.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="553.2" y="462.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (42 samples, 16.87%)</title><rect x="550.2" y="435.0" width="199.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="553.2" y="446.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (41 samples, 16.47%)</title><rect x="550.2" y="419.0" width="194.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="553.2" y="430.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="550.2" y="403.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="553.2" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="550.2" y="387.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.2" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="550.2" y="371.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.2" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="550.2" y="355.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="553.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.40%)</title><rect x="550.2" y="339.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="553.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.40%)</title><rect x="550.2" y="323.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="553.2" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ExecutionRecord.process (40 samples, 16.06%)</title><rect x="555.0" y="403.0" width="189.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="558.0" y="414.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (38 samples, 15.26%)</title><rect x="559.7" y="387.0" width="180.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="562.7" y="398.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (36 samples, 14.46%)</title><rect x="564.5" y="371.0" width="170.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="567.5" y="382.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.40%)</title><rect x="573.9" y="355.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="576.9" y="366.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.40%)</title><rect x="578.7" y="355.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="581.7" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.40%)</title><rect x="583.4" y="355.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="586.4" y="366.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.01%)</title><rect x="588.2" y="355.0" width="23.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="591.2" y="366.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.21%)</title><rect x="611.8" y="355.0" width="38.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="614.8" y="366.0">__p..</text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (16 samples, 6.43%)</title><rect x="649.8" y="355.0" width="75.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="652.8" y="366.0">os::slee..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 2.41%)</title><rect x="678.2" y="339.0" width="28.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="681.2" y="350.0">Mo..</text>
</g>
<g>
<title>update_get_addr (1 samples, 0.40%)</title><rect x="701.9" y="323.0" width="4.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="704.9" y="334.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="706.6" y="339.0" width="4.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="709.6" y="350.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.80%)</title><rect x="711.4" y="339.0" width="9.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="714.4" y="350.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.80%)</title><rect x="711.4" y="323.0" width="9.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="714.4" y="334.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="720.8" y="339.0" width="4.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="723.8" y="350.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.80%)</title><rect x="725.6" y="355.0" width="9.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="728.6" y="366.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.40%)</title><rect x="735.1" y="371.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="738.1" y="382.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="739.8" y="387.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="742.8" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="739.8" y="371.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="742.8" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.40%)</title><rect x="744.5" y="419.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="747.5" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="744.5" y="403.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="747.5" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="744.5" y="387.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="747.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.80%)</title><rect x="749.3" y="451.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.3" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.40%)</title><rect x="758.8" y="451.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="761.8" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="763.5" y="451.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="766.5" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.40%)</title><rect x="763.5" y="435.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="766.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.61%)</title><rect x="768.2" y="451.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="771.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.40%)</title><rect x="768.2" y="435.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="771.2" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.20%)</title><rect x="773.0" y="435.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="776.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.20%)</title><rect x="773.0" y="419.0" width="14.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 1.20%)</title><rect x="773.0" y="403.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="776.0" y="414.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="782.4" y="387.0" width="4.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="785.4" y="398.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (16 samples, 6.43%)</title><rect x="787.2" y="483.0" width="75.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.2" y="494.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (15 samples, 6.02%)</title><rect x="787.2" y="467.0" width="71.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="790.2" y="478.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (15 samples, 6.02%)</title><rect x="787.2" y="451.0" width="71.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.2" y="462.0">io/micro..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 4.82%)</title><rect x="791.9" y="435.0" width="56.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="794.9" y="446.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (12 samples, 4.82%)</title><rect x="791.9" y="419.0" width="56.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="794.9" y="430.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 4.82%)</title><rect x="791.9" y="403.0" width="56.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.9" y="414.0">io/mic..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (12 samples, 4.82%)</title><rect x="791.9" y="387.0" width="56.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="794.9" y="398.0">io/mic..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (12 samples, 4.82%)</title><rect x="791.9" y="371.0" width="56.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.9" y="382.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (12 samples, 4.82%)</title><rect x="791.9" y="355.0" width="56.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="794.9" y="366.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (12 samples, 4.82%)</title><rect x="791.9" y="339.0" width="56.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.9" y="350.0">org/Hd..</text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (5 samples, 2.01%)</title><rect x="791.9" y="323.0" width="23.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.9" y="334.0">o..</text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (2 samples, 0.80%)</title><rect x="791.9" y="307.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="794.9" y="318.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (2 samples, 0.80%)</title><rect x="791.9" y="291.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.9" y="302.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (3 samples, 1.20%)</title><rect x="801.4" y="307.0" width="14.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (3 samples, 1.20%)</title><rect x="801.4" y="291.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="804.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (3 samples, 1.20%)</title><rect x="801.4" y="275.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (3 samples, 1.20%)</title><rect x="801.4" y="259.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="804.4" y="270.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.autoAdjustRangeForValue (7 samples, 2.81%)</title><rect x="815.6" y="323.0" width="33.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="818.6" y="334.0">or..</text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (2 samples, 0.80%)</title><rect x="848.8" y="435.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="851.8" y="446.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.80%)</title><rect x="848.8" y="419.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="851.8" y="430.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (2 samples, 0.80%)</title><rect x="848.8" y="403.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.8" y="414.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$Values.iterator (1 samples, 0.40%)</title><rect x="858.3" y="467.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="861.3" y="478.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.40%)</title><rect x="858.3" y="451.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.3" y="462.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.&lt;init&gt; (1 samples, 0.40%)</title><rect x="858.3" y="435.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="861.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.21%)</title><rect x="863.0" y="483.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="866.0" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.21%)</title><rect x="863.0" y="467.0" width="37.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.0" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 3.21%)</title><rect x="863.0" y="451.0" width="37.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="866.0" y="462.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.40%)</title><rect x="863.0" y="435.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="866.0" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$509/1495047131.accept (1 samples, 0.40%)</title><rect x="863.0" y="419.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.81%)</title><rect x="867.8" y="435.0" width="33.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.8" y="446.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$509/1495047131.accept (7 samples, 2.81%)</title><rect x="867.8" y="419.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.8" y="430.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (7 samples, 2.81%)</title><rect x="867.8" y="403.0" width="33.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="870.8" y="414.0">co..</text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (7 samples, 2.81%)</title><rect x="867.8" y="387.0" width="33.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.8" y="398.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (5 samples, 2.01%)</title><rect x="867.8" y="371.0" width="23.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.8" y="382.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (5 samples, 2.01%)</title><rect x="867.8" y="355.0" width="23.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="870.8" y="366.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (4 samples, 1.61%)</title><rect x="867.8" y="339.0" width="18.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="870.8" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/AbstractTimeWindowHistogram.recordLong (4 samples, 1.61%)</title><rect x="867.8" y="323.0" width="18.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="870.8" y="334.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (3 samples, 1.20%)</title><rect x="867.8" y="307.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.8" y="318.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowPercentileHistogram.recordLong (3 samples, 1.20%)</title><rect x="867.8" y="291.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.8" y="302.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleRecorder.recordValue (3 samples, 1.20%)</title><rect x="867.8" y="275.0" width="14.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.8" y="286.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordValue (3 samples, 1.20%)</title><rect x="867.8" y="259.0" width="14.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.8" y="270.0"></text>
</g>
<g>
<title>org/HdrHistogram/DoubleHistogram.recordSingleValue (3 samples, 1.20%)</title><rect x="867.8" y="243.0" width="14.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.8" y="254.0"></text>
</g>
<g>
<title>org/HdrHistogram/ConcurrentHistogram.recordConvertedDoubleValue (3 samples, 1.20%)</title><rect x="867.8" y="227.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.8" y="238.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinAndMax (1 samples, 0.40%)</title><rect x="867.8" y="211.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.8" y="222.0"></text>
</g>
<g>
<title>org/HdrHistogram/AbstractHistogram.updateMinNonZeroValue (1 samples, 0.40%)</title><rect x="867.8" y="195.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.8" y="206.0"></text>
</g>
<g>
<title>org/HdrHistogram/WriterReaderPhaser.writerCriticalSectionExit (2 samples, 0.80%)</title><rect x="872.5" y="211.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="875.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndIncrement (2 samples, 0.80%)</title><rect x="872.5" y="195.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="875.5" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (2 samples, 0.80%)</title><rect x="872.5" y="179.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="875.5" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.accessCheck (2 samples, 0.80%)</title><rect x="872.5" y="163.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="875.5" y="174.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="882.0" y="307.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="885.0" y="318.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (1 samples, 0.40%)</title><rect x="886.7" y="339.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="889.7" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.40%)</title><rect x="886.7" y="323.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="889.7" y="334.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (1 samples, 0.40%)</title><rect x="886.7" y="307.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="889.7" y="318.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (2 samples, 0.80%)</title><rect x="891.4" y="371.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="894.4" y="382.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="896.2" y="355.0" width="4.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="899.2" y="366.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="896.2" y="339.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="899.2" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (11 samples, 4.42%)</title><rect x="900.9" y="515.0" width="52.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.9" y="526.0">io/mi..</text>
</g>
<g>
<title>io/micrometer/core/instrument/Timer.record (6 samples, 2.41%)</title><rect x="900.9" y="499.0" width="28.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="903.9" y="510.0">io..</text>
</g>
<g>
<title>io/micrometer/core/instrument/AbstractTimer.record (5 samples, 2.01%)</title><rect x="905.7" y="483.0" width="23.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="908.7" y="494.0">i..</text>
</g>
<g>
<title>io/micrometer/core/instrument/step/StepTimer.recordNonNegative (4 samples, 1.61%)</title><rect x="910.4" y="467.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="913.4" y="478.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.61%)</title><rect x="910.4" y="451.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="913.4" y="462.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/distribution/TimeWindowMax.record (4 samples, 1.61%)</title><rect x="910.4" y="435.0" width="19.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="913.4" y="446.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap$IdentityHashMapIterator.hasNext (5 samples, 2.01%)</title><rect x="929.4" y="499.0" width="23.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="932.4" y="510.0">j..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="948.3" y="483.0" width="4.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="951.3" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.40%)</title><rect x="953.1" y="563.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="956.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (1 samples, 0.40%)</title><rect x="953.1" y="547.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="956.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.40%)</title><rect x="953.1" y="531.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="956.1" y="542.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry$$Lambda$164/1320388319.run (1 samples, 0.40%)</title><rect x="953.1" y="515.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.1" y="526.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/push/PushMeterRegistry.publishSafely (1 samples, 0.40%)</title><rect x="953.1" y="499.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="956.1" y="510.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.publish (1 samples, 0.40%)</title><rect x="953.1" y="483.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEach (1 samples, 0.40%)</title><rect x="953.1" y="467.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="956.1" y="478.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="953.1" y="451.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="956.1" y="462.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.evaluateSequential (1 samples, 0.40%)</title><rect x="953.1" y="435.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="956.1" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp.evaluateSequential (1 samples, 0.40%)</title><rect x="953.1" y="419.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="956.1" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="953.1" y="403.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="956.1" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="953.1" y="387.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.1" y="398.0"></text>
</g>
<g>
<title>java/util/stream/SortedOps$SizedRefSortingSink.end (1 samples, 0.40%)</title><rect x="953.1" y="371.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="956.1" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ForEachOps$ForEachOp$OfRef.accept (1 samples, 0.40%)</title><rect x="953.1" y="355.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="956.1" y="366.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$517/511258398.accept (1 samples, 0.40%)</title><rect x="953.1" y="339.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="956.1" y="350.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$12 (1 samples, 0.40%)</title><rect x="953.1" y="323.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.1" y="334.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Meter.use (1 samples, 0.40%)</title><rect x="953.1" y="307.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.1" y="318.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$$Lambda$520/2048412334.accept (1 samples, 0.40%)</title><rect x="953.1" y="291.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.1" y="302.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry.lambda$publish$5 (1 samples, 0.40%)</title><rect x="953.1" y="275.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="956.1" y="286.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/logging/LoggingMeterRegistry$Printer.time (1 samples, 0.40%)</title><rect x="953.1" y="259.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="956.1" y="270.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/util/TimeUtils.format (1 samples, 0.40%)</title><rect x="953.1" y="243.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="956.1" y="254.0"></text>
</g>
<g>
<title>java/lang/String.replaceFirst (1 samples, 0.40%)</title><rect x="953.1" y="227.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.1" y="238.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (1 samples, 0.40%)</title><rect x="953.1" y="211.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="956.1" y="222.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.&lt;init&gt; (1 samples, 0.40%)</title><rect x="953.1" y="195.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="956.1" y="206.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (1 samples, 0.40%)</title><rect x="953.1" y="179.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="956.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.40%)</title><rect x="957.8" y="563.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="960.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="957.8" y="547.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="960.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (8 samples, 3.21%)</title><rect x="962.5" y="563.0" width="37.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="965.5" y="574.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (7 samples, 2.81%)</title><rect x="967.3" y="547.0" width="33.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="970.3" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.01%)</title><rect x="976.7" y="531.0" width="23.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="979.7" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.01%)</title><rect x="976.7" y="515.0" width="23.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.7" y="526.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.80%)</title><rect x="1000.4" y="611.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1003.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.pollTimeoutExpired (1 samples, 0.40%)</title><rect x="1005.2" y="595.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1008.2" y="606.0"></text>
</g>
<g>
<title>start_thread (38 samples, 15.26%)</title><rect x="1009.9" y="611.0" width="180.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1012.9" y="622.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (38 samples, 15.26%)</title><rect x="1009.9" y="595.0" width="180.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1012.9" y="606.0">thread_native_entry(Thr..</text>
</g>
<g>
<title>Thread::call_run() (38 samples, 15.26%)</title><rect x="1009.9" y="579.0" width="180.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1012.9" y="590.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 2.81%)</title><rect x="1009.9" y="563.0" width="33.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.9" y="574.0">Ga..</text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.40%)</title><rect x="1009.9" y="547.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.9" y="558.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.40%)</title><rect x="1009.9" y="531.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.9" y="542.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 2.01%)</title><rect x="1014.7" y="547.0" width="23.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.7" y="558.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 1.61%)</title><rect x="1014.7" y="531.0" width="18.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.7" y="542.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.80%)</title><rect x="1014.7" y="515.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.7" y="526.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="1019.4" y="499.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.4" y="510.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.40%)</title><rect x="1024.1" y="515.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.1" y="526.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (1 samples, 0.40%)</title><rect x="1024.1" y="499.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1027.1" y="510.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.40%)</title><rect x="1028.9" y="515.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1031.9" y="526.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="1033.6" y="531.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.6" y="542.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="1033.6" y="515.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="1033.6" y="499.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1036.6" y="510.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="1033.6" y="483.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.6" y="494.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.40%)</title><rect x="1033.6" y="467.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1036.6" y="478.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.40%)</title><rect x="1033.6" y="451.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.6" y="462.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="1033.6" y="435.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.6" y="446.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.40%)</title><rect x="1038.4" y="547.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.4" y="558.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.40%)</title><rect x="1038.4" y="531.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.4" y="542.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (31 samples, 12.45%)</title><rect x="1043.1" y="563.0" width="146.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.1" y="574.0">JavaThread::thread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (31 samples, 12.45%)</title><rect x="1043.1" y="547.0" width="146.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.1" y="558.0">CompileBroker::com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (31 samples, 12.45%)</title><rect x="1043.1" y="531.0" width="146.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.1" y="542.0">CompileBroker::inv..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (28 samples, 11.24%)</title><rect x="1043.1" y="515.0" width="132.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.1" y="526.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (28 samples, 11.24%)</title><rect x="1043.1" y="499.0" width="132.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.1" y="510.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (16 samples, 6.43%)</title><rect x="1043.1" y="483.0" width="75.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.1" y="494.0">Compile:..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.40%)</title><rect x="1043.1" y="467.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.1" y="478.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.40%)</title><rect x="1043.1" y="451.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.1" y="462.0"></text>
</g>
<g>
<title>MachPrologNode::size(PhaseRegAlloc*) const (1 samples, 0.40%)</title><rect x="1043.1" y="435.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.1" y="446.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.80%)</title><rect x="1047.8" y="467.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.8" y="478.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.40%)</title><rect x="1047.8" y="451.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1050.8" y="462.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (1 samples, 0.40%)</title><rect x="1047.8" y="435.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1050.8" y="446.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.40%)</title><rect x="1052.6" y="451.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.6" y="462.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="1052.6" y="435.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.6" y="446.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.40%)</title><rect x="1052.6" y="419.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.6" y="430.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.40%)</title><rect x="1052.6" y="403.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1055.6" y="414.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.40%)</title><rect x="1052.6" y="387.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.6" y="398.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.40%)</title><rect x="1052.6" y="371.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.6" y="382.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.40%)</title><rect x="1052.6" y="355.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.6" y="366.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.40%)</title><rect x="1052.6" y="339.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1055.6" y="350.0"></text>
</g>
<g>
<title>Matcher::ReduceOper(State*, int, Node*&amp;, MachNode*) (1 samples, 0.40%)</title><rect x="1052.6" y="323.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1055.6" y="334.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.40%)</title><rect x="1052.6" y="307.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.6" y="318.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.40%)</title><rect x="1052.6" y="291.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1055.6" y="302.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.40%)</title><rect x="1057.3" y="467.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1060.3" y="478.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.40%)</title><rect x="1057.3" y="451.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.3" y="462.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.40%)</title><rect x="1057.3" y="435.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1060.3" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 4.82%)</title><rect x="1062.0" y="467.0" width="56.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.0" y="478.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.40%)</title><rect x="1062.0" y="451.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.0" y="462.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="1062.0" y="435.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.0" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 1.61%)</title><rect x="1066.8" y="451.0" width="18.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1069.8" y="462.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.40%)</title><rect x="1071.5" y="435.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1074.5" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="435.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.3" y="446.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="1076.3" y="419.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.3" y="430.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.40%)</title><rect x="1081.0" y="435.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1084.0" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.20%)</title><rect x="1085.7" y="451.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1088.7" y="462.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="1095.2" y="435.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.2" y="446.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.20%)</title><rect x="1100.0" y="451.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.0" y="462.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.40%)</title><rect x="1114.2" y="451.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.2" y="462.0"></text>
</g>
<g>
<title>Compile::Optimize() (9 samples, 3.61%)</title><rect x="1118.9" y="483.0" width="42.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.9" y="494.0">Comp..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (3 samples, 1.20%)</title><rect x="1118.9" y="467.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.9" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 1.20%)</title><rect x="1118.9" y="451.0" width="14.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.9" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1118.9" y="435.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.9" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.80%)</title><rect x="1123.7" y="435.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.7" y="446.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.40%)</title><rect x="1128.4" y="419.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.4" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.40%)</title><rect x="1128.4" y="403.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.4" y="414.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.40%)</title><rect x="1128.4" y="387.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.4" y="398.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.40%)</title><rect x="1128.4" y="371.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1133.1" y="467.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.40%)</title><rect x="1133.1" y="451.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.1" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (1 samples, 0.40%)</title><rect x="1137.9" y="467.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.9" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.40%)</title><rect x="1137.9" y="451.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.9" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.20%)</title><rect x="1142.6" y="467.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.20%)</title><rect x="1142.6" y="451.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.6" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.40%)</title><rect x="1142.6" y="435.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.6" y="446.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.80%)</title><rect x="1147.3" y="435.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.3" y="446.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.80%)</title><rect x="1147.3" y="419.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.3" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.80%)</title><rect x="1147.3" y="403.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.80%)</title><rect x="1147.3" y="387.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.3" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="371.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.3" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="355.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.3" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="339.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.3" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="323.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.3" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="307.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.3" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="291.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.3" y="302.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="275.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.3" y="286.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="259.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.3" y="270.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="243.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.3" y="254.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="227.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.3" y="238.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1147.3" y="211.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.3" y="222.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.40%)</title><rect x="1152.1" y="371.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1152.1" y="355.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.40%)</title><rect x="1156.8" y="467.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.8" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1156.8" y="451.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="462.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1156.8" y="435.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.8" y="446.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1156.8" y="419.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.6" y="483.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.6" y="467.0" width="14.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1161.6" y="451.0" width="14.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1164.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1161.6" y="435.0" width="14.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1161.6" y="419.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1161.6" y="403.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1161.6" y="387.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1161.6" y="371.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1161.6" y="355.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1161.6" y="339.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1161.6" y="323.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1161.6" y="307.0" width="9.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.6" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1161.6" y="291.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.6" y="302.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1161.6" y="275.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="286.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1161.6" y="259.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1161.6" y="243.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1164.6" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1161.6" y="227.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1161.6" y="211.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.6" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1161.6" y="195.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1161.6" y="179.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1161.6" y="163.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="174.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1161.6" y="147.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.6" y="131.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1164.6" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.6" y="115.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.6" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1161.6" y="99.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1161.6" y="83.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.6" y="94.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1161.6" y="67.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.6" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.40%)</title><rect x="1161.6" y="51.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="62.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.40%)</title><rect x="1161.6" y="35.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.6" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.3" y="291.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1166.3" y="275.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1166.3" y="259.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1166.3" y="243.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1166.3" y="227.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1166.3" y="211.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.3" y="222.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1166.3" y="195.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1169.3" y="206.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.40%)</title><rect x="1171.0" y="355.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="366.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.40%)</title><rect x="1171.0" y="339.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.0" y="350.0"></text>
</g>
<g>
<title>ciVirtualCallData::translate_from(ProfileData const*) (1 samples, 0.40%)</title><rect x="1171.0" y="323.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.0" y="334.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 1.20%)</title><rect x="1175.8" y="515.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.8" y="526.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 1.20%)</title><rect x="1175.8" y="499.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.8" y="510.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.20%)</title><rect x="1175.8" y="483.0" width="14.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.8" y="494.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.20%)</title><rect x="1175.8" y="467.0" width="14.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.8" y="478.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.40%)</title><rect x="1175.8" y="451.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.8" y="462.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1175.8" y="435.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="446.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1175.8" y="419.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1175.8" y="403.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="414.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.40%)</title><rect x="1175.8" y="387.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="398.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (2 samples, 0.80%)</title><rect x="1180.5" y="451.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.5" y="462.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (2 samples, 0.80%)</title><rect x="1180.5" y="435.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.5" y="446.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (1 samples, 0.40%)</title><rect x="1180.5" y="419.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.5" y="430.0"></text>
</g>
<g>
<title>LIR_Assembler::ic_call(LIR_OpJavaCall*) (1 samples, 0.40%)</title><rect x="1180.5" y="403.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.5" y="414.0"></text>
</g>
<g>
<title>MacroAssembler::ic_call(unsigned char*, int) (1 samples, 0.40%)</title><rect x="1180.5" y="387.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.5" y="398.0"></text>
</g>
<g>
<title>Assembler::call_literal(unsigned char*, RelocationHolder const&amp;) (1 samples, 0.40%)</title><rect x="1180.5" y="371.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.5" y="382.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.40%)</title><rect x="1185.3" y="419.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.3" y="430.0"></text>
</g>
<g>
<title>LIR_Assembler::mem2reg(LIR_OprDesc*, LIR_OprDesc*, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool) (1 samples, 0.40%)</title><rect x="1185.3" y="403.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="414.0"></text>
</g>
</g>
</svg>
