<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1429"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1429"> </text>
<g id="frames">
<g>
<title>all (213 samples, 100.00%)</title><rect x="10.0" y="1395.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1406.0">all</text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.47%)</title><rect x="10.0" y="1379.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.47%)</title><rect x="10.0" y="1363.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.47%)</title><rect x="10.0" y="1347.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.47%)</title><rect x="15.5" y="1379.0" width="5.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.5" y="1390.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.47%)</title><rect x="15.5" y="1363.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="18.5" y="1374.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.47%)</title><rect x="15.5" y="1347.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.5" y="1358.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.47%)</title><rect x="21.1" y="1379.0" width="5.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="24.1" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="21.1" y="1363.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.1" y="1374.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.47%)</title><rect x="21.1" y="1347.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="24.1" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (14 samples, 6.57%)</title><rect x="26.6" y="1379.0" width="77.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.6" y="1390.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (14 samples, 6.57%)</title><rect x="26.6" y="1363.0" width="77.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.6" y="1374.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (13 samples, 6.10%)</title><rect x="26.6" y="1347.0" width="72.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.6" y="1358.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.47%)</title><rect x="26.6" y="1331.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.47%)</title><rect x="26.6" y="1315.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.6" y="1326.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.47%)</title><rect x="32.2" y="1331.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.2" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/761424759.accept (1 samples, 0.47%)</title><rect x="32.2" y="1315.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (1 samples, 0.47%)</title><rect x="32.2" y="1299.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="35.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.47%)</title><rect x="32.2" y="1283.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.2" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.47%)</title><rect x="32.2" y="1267.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="35.2" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.47%)</title><rect x="32.2" y="1251.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.47%)</title><rect x="32.2" y="1235.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.2" y="1246.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.47%)</title><rect x="32.2" y="1219.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.2" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.47%)</title><rect x="32.2" y="1203.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.2" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.47%)</title><rect x="32.2" y="1187.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.16%)</title><rect x="37.7" y="1331.0" width="60.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.7" y="1342.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.16%)</title><rect x="37.7" y="1315.0" width="60.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.7" y="1326.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.35%)</title><rect x="37.7" y="1299.0" width="27.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.7" y="1310.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.88%)</title><rect x="37.7" y="1283.0" width="22.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.7" y="1294.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.88%)</title><rect x="37.7" y="1267.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.7" y="1278.0">o..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.47%)</title><rect x="37.7" y="1251.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.47%)</title><rect x="37.7" y="1235.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.47%)</title><rect x="37.7" y="1219.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.47%)</title><rect x="37.7" y="1203.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.7" y="1214.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.47%)</title><rect x="37.7" y="1187.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.7" y="1198.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.47%)</title><rect x="37.7" y="1171.0" width="5.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="40.7" y="1182.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.47%)</title><rect x="37.7" y="1155.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="40.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.94%)</title><rect x="43.2" y="1251.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleDisconnections (1 samples, 0.47%)</title><rect x="43.2" y="1235.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="46.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.47%)</title><rect x="43.2" y="1219.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.2" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.47%)</title><rect x="43.2" y="1203.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.47%)</title><rect x="43.2" y="1187.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="46.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.47%)</title><rect x="48.8" y="1235.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="48.8" y="1219.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.47%)</title><rect x="48.8" y="1203.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.47%)</title><rect x="48.8" y="1187.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.8" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.47%)</title><rect x="48.8" y="1171.0" width="5.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="51.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.47%)</title><rect x="54.3" y="1251.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.3" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.47%)</title><rect x="59.9" y="1283.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.47%)</title><rect x="59.9" y="1267.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="62.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.47%)</title><rect x="59.9" y="1251.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.47%)</title><rect x="59.9" y="1235.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.47%)</title><rect x="59.9" y="1219.0" width="5.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.47%)</title><rect x="59.9" y="1203.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.47%)</title><rect x="59.9" y="1187.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.47%)</title><rect x="59.9" y="1171.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.47%)</title><rect x="59.9" y="1155.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.47%)</title><rect x="59.9" y="1139.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.47%)</title><rect x="59.9" y="1123.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.47%)</title><rect x="59.9" y="1107.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.47%)</title><rect x="59.9" y="1091.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.47%)</title><rect x="59.9" y="1075.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.9" y="1086.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.47%)</title><rect x="59.9" y="1059.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="62.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.47%)</title><rect x="65.4" y="1299.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.47%)</title><rect x="65.4" y="1283.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="68.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.47%)</title><rect x="65.4" y="1267.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.47%)</title><rect x="65.4" y="1251.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="68.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.47%)</title><rect x="65.4" y="1235.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.47%)</title><rect x="65.4" y="1219.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 1.41%)</title><rect x="70.9" y="1299.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 1.41%)</title><rect x="70.9" y="1283.0" width="16.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.47%)</title><rect x="76.5" y="1267.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.47%)</title><rect x="82.0" y="1267.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.0" y="1278.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.47%)</title><rect x="82.0" y="1251.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.47%)</title><rect x="82.0" y="1235.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.47%)</title><rect x="82.0" y="1219.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="85.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.47%)</title><rect x="87.6" y="1299.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.6" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="87.6" y="1283.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.47%)</title><rect x="87.6" y="1267.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.47%)</title><rect x="87.6" y="1251.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.advance (1 samples, 0.47%)</title><rect x="87.6" y="1235.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.47%)</title><rect x="93.1" y="1299.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.47%)</title><rect x="93.1" y="1283.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.47%)</title><rect x="93.1" y="1267.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.47%)</title><rect x="93.1" y="1251.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.1" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.47%)</title><rect x="93.1" y="1235.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.47%)</title><rect x="93.1" y="1219.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="96.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.47%)</title><rect x="98.6" y="1347.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.47%)</title><rect x="98.6" y="1331.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (88 samples, 41.31%)</title><rect x="104.2" y="1379.0" width="487.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="107.2" y="1390.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (88 samples, 41.31%)</title><rect x="104.2" y="1363.0" width="487.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.2" y="1374.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (88 samples, 41.31%)</title><rect x="104.2" y="1347.0" width="487.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="107.2" y="1358.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.94%)</title><rect x="104.2" y="1331.0" width="11.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="107.2" y="1342.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.94%)</title><rect x="104.2" y="1315.0" width="11.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="107.2" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/2088261785.run (80 samples, 37.56%)</title><rect x="115.3" y="1331.0" width="443.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.3" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (80 samples, 37.56%)</title><rect x="115.3" y="1315.0" width="443.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.3" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (80 samples, 37.56%)</title><rect x="115.3" y="1299.0" width="443.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="118.3" y="1310.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="115.3" y="1283.0" width="5.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="118.3" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="115.3" y="1267.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="118.3" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (79 samples, 37.09%)</title><rect x="120.8" y="1283.0" width="437.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="123.8" y="1294.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipel..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (6 samples, 2.82%)</title><rect x="131.9" y="1267.0" width="33.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="134.9" y="1278.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.82%)</title><rect x="131.9" y="1251.0" width="33.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="134.9" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.82%)</title><rect x="131.9" y="1235.0" width="33.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.9" y="1246.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.94%)</title><rect x="154.0" y="1219.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="157.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.94%)</title><rect x="154.0" y="1203.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$491/1490563409.accept (2 samples, 0.94%)</title><rect x="154.0" y="1187.0" width="11.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="157.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (2 samples, 0.94%)</title><rect x="154.0" y="1171.0" width="11.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.94%)</title><rect x="154.0" y="1155.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.94%)</title><rect x="154.0" y="1139.0" width="11.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.0" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.94%)</title><rect x="154.0" y="1123.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.0" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.94%)</title><rect x="154.0" y="1107.0" width="11.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="157.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.47%)</title><rect x="165.1" y="1267.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="168.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.47%)</title><rect x="165.1" y="1251.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="168.1" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.47%)</title><rect x="165.1" y="1235.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.1" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.47%)</title><rect x="165.1" y="1219.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="168.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.47%)</title><rect x="165.1" y="1203.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (8 samples, 3.76%)</title><rect x="170.7" y="1267.0" width="44.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.7" y="1278.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (8 samples, 3.76%)</title><rect x="170.7" y="1251.0" width="44.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.7" y="1262.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 3.76%)</title><rect x="170.7" y="1235.0" width="44.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="173.7" y="1246.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 3.76%)</title><rect x="170.7" y="1219.0" width="44.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="173.7" y="1230.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 3.76%)</title><rect x="170.7" y="1203.0" width="44.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.7" y="1214.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 3.76%)</title><rect x="170.7" y="1187.0" width="44.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="173.7" y="1198.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 2.35%)</title><rect x="170.7" y="1171.0" width="27.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="173.7" y="1182.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.47%)</title><rect x="170.7" y="1155.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="173.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.47%)</title><rect x="170.7" y="1139.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="173.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 1.88%)</title><rect x="176.2" y="1155.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.2" y="1166.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 1.88%)</title><rect x="176.2" y="1139.0" width="22.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.2" y="1150.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.47%)</title><rect x="176.2" y="1123.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.47%)</title><rect x="176.2" y="1107.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.47%)</title><rect x="176.2" y="1091.0" width="5.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.47%)</title><rect x="176.2" y="1075.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.41%)</title><rect x="181.7" y="1123.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="184.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.41%)</title><rect x="181.7" y="1107.0" width="16.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.41%)</title><rect x="181.7" y="1091.0" width="16.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="184.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.94%)</title><rect x="181.7" y="1075.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.47%)</title><rect x="187.3" y="1059.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="190.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.47%)</title><rect x="187.3" y="1043.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="190.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.47%)</title><rect x="192.8" y="1075.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.47%)</title><rect x="192.8" y="1059.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="195.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.47%)</title><rect x="192.8" y="1043.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="195.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.47%)</title><rect x="192.8" y="1027.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="195.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (1 samples, 0.47%)</title><rect x="192.8" y="1011.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="195.8" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (1 samples, 0.47%)</title><rect x="192.8" y="995.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.8" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (1 samples, 0.47%)</title><rect x="192.8" y="979.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="195.8" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (1 samples, 0.47%)</title><rect x="192.8" y="963.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="195.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.47%)</title><rect x="192.8" y="947.0" width="5.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.8" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (3 samples, 1.41%)</title><rect x="198.4" y="1171.0" width="16.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="201.4" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (3 samples, 1.41%)</title><rect x="198.4" y="1155.0" width="16.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="201.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (3 samples, 1.41%)</title><rect x="198.4" y="1139.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (3 samples, 1.41%)</title><rect x="198.4" y="1123.0" width="16.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.41%)</title><rect x="198.4" y="1107.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="201.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (62 samples, 29.11%)</title><rect x="215.0" y="1267.0" width="343.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="218.0" y="1278.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (3 samples, 1.41%)</title><rect x="226.1" y="1251.0" width="16.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.1" y="1262.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.41%)</title><rect x="226.1" y="1235.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.1" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.41%)</title><rect x="226.1" y="1219.0" width="16.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.1" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.94%)</title><rect x="226.1" y="1203.0" width="11.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="226.1" y="1187.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.1" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.47%)</title><rect x="226.1" y="1171.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.1" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.47%)</title><rect x="231.6" y="1187.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.6" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.47%)</title><rect x="237.1" y="1203.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.1" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.47%)</title><rect x="237.1" y="1187.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (11 samples, 5.16%)</title><rect x="242.7" y="1251.0" width="60.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.7" y="1262.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 5.16%)</title><rect x="242.7" y="1235.0" width="60.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.7" y="1246.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.88%)</title><rect x="253.8" y="1219.0" width="22.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.8" y="1230.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (4 samples, 1.88%)</title><rect x="253.8" y="1203.0" width="22.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="256.8" y="1214.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.88%)</title><rect x="253.8" y="1187.0" width="22.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.8" y="1198.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.47%)</title><rect x="259.3" y="1171.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.3" y="1182.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.47%)</title><rect x="259.3" y="1155.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.3" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.47%)</title><rect x="259.3" y="1139.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="262.3" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.47%)</title><rect x="259.3" y="1123.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="262.3" y="1134.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.47%)</title><rect x="259.3" y="1107.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="262.3" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.47%)</title><rect x="259.3" y="1091.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="262.3" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.47%)</title><rect x="259.3" y="1075.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="262.3" y="1086.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.47%)</title><rect x="259.3" y="1059.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="262.3" y="1070.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.47%)</title><rect x="259.3" y="1043.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="262.3" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.94%)</title><rect x="264.8" y="1171.0" width="11.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="267.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.47%)</title><rect x="275.9" y="1219.0" width="5.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="278.9" y="1230.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.47%)</title><rect x="275.9" y="1203.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="278.9" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.47%)</title><rect x="275.9" y="1187.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="278.9" y="1198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.47%)</title><rect x="275.9" y="1171.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="278.9" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.47%)</title><rect x="275.9" y="1155.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="278.9" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.47%)</title><rect x="275.9" y="1139.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="278.9" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.47%)</title><rect x="275.9" y="1123.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="278.9" y="1134.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.47%)</title><rect x="281.5" y="1219.0" width="5.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="284.5" y="1230.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.41%)</title><rect x="287.0" y="1219.0" width="16.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.0" y="1230.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.41%)</title><rect x="287.0" y="1203.0" width="16.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.0" y="1214.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.47%)</title><rect x="287.0" y="1187.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.0" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 0.94%)</title><rect x="292.5" y="1187.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.5" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.94%)</title><rect x="292.5" y="1171.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.5" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.94%)</title><rect x="292.5" y="1155.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.47%)</title><rect x="298.1" y="1139.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.1" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="298.1" y="1123.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="301.1" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.47%)</title><rect x="298.1" y="1107.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="301.1" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.47%)</title><rect x="298.1" y="1091.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="301.1" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.47%)</title><rect x="298.1" y="1075.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="301.1" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.47%)</title><rect x="298.1" y="1059.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="301.1" y="1070.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.47%)</title><rect x="298.1" y="1043.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="301.1" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (42 samples, 19.72%)</title><rect x="303.6" y="1251.0" width="232.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.6" y="1262.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (42 samples, 19.72%)</title><rect x="303.6" y="1235.0" width="232.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.6" y="1246.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/2138550142.process (34 samples, 15.96%)</title><rect x="303.6" y="1219.0" width="188.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.6" y="1230.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (34 samples, 15.96%)</title><rect x="303.6" y="1203.0" width="188.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.6" y="1214.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (34 samples, 15.96%)</title><rect x="303.6" y="1187.0" width="188.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.6" y="1198.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.47%)</title><rect x="309.2" y="1171.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.2" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.47%)</title><rect x="309.2" y="1155.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.2" y="1166.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.47%)</title><rect x="309.2" y="1139.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="312.2" y="1150.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.47%)</title><rect x="309.2" y="1123.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.2" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.47%)</title><rect x="309.2" y="1107.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.2" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.47%)</title><rect x="309.2" y="1091.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.2" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.47%)</title><rect x="309.2" y="1075.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.2" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.47%)</title><rect x="309.2" y="1059.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.2" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.47%)</title><rect x="309.2" y="1043.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.2" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (1 samples, 0.47%)</title><rect x="309.2" y="1027.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.2" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$2.write (1 samples, 0.47%)</title><rect x="309.2" y="1011.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.2" y="1022.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (1 samples, 0.47%)</title><rect x="309.2" y="995.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.2" y="1006.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.47%)</title><rect x="309.2" y="979.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="312.2" y="990.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.47%)</title><rect x="309.2" y="963.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.2" y="974.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.47%)</title><rect x="309.2" y="947.0" width="5.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.2" y="958.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.47%)</title><rect x="309.2" y="931.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.2" y="942.0"></text>
</g>
<g>
<title>java/io/FileDescriptor$1.getAppend (1 samples, 0.47%)</title><rect x="309.2" y="915.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (32 samples, 15.02%)</title><rect x="314.7" y="1171.0" width="177.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="317.7" y="1182.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (32 samples, 15.02%)</title><rect x="314.7" y="1155.0" width="177.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="317.7" y="1166.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (32 samples, 15.02%)</title><rect x="314.7" y="1139.0" width="177.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="317.7" y="1150.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.94%)</title><rect x="325.8" y="1123.0" width="11.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="328.8" y="1134.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.47%)</title><rect x="336.9" y="1123.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="339.9" y="1134.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.94%)</title><rect x="342.4" y="1123.0" width="11.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="345.4" y="1134.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.76%)</title><rect x="353.5" y="1123.0" width="44.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="356.5" y="1134.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.47%)</title><rect x="397.8" y="1123.0" width="5.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="400.8" y="1134.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.47%)</title><rect x="403.3" y="1123.0" width="5.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="406.3" y="1134.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.47%)</title><rect x="408.9" y="1123.0" width="5.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="411.9" y="1134.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.94%)</title><rect x="414.4" y="1123.0" width="11.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="417.4" y="1134.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (12 samples, 5.63%)</title><rect x="425.5" y="1123.0" width="66.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="428.5" y="1134.0">os::sle..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.47%)</title><rect x="453.2" y="1107.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="456.2" y="1118.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.47%)</title><rect x="458.7" y="1107.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="461.7" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 2.35%)</title><rect x="464.3" y="1107.0" width="27.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="467.3" y="1118.0">_..</text>
</g>
<g>
<title>[vdso] (5 samples, 2.35%)</title><rect x="464.3" y="1091.0" width="27.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="467.3" y="1102.0">[..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 2.35%)</title><rect x="492.0" y="1219.0" width="27.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="495.0" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.47%)</title><rect x="519.7" y="1219.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="522.7" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.47%)</title><rect x="519.7" y="1203.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="522.7" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.47%)</title><rect x="519.7" y="1187.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="522.7" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.47%)</title><rect x="519.7" y="1171.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="522.7" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.47%)</title><rect x="519.7" y="1155.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="522.7" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.47%)</title><rect x="519.7" y="1139.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.7" y="1150.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.47%)</title><rect x="519.7" y="1123.0" width="5.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="522.7" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.47%)</title><rect x="525.2" y="1219.0" width="5.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="528.2" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.47%)</title><rect x="525.2" y="1203.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.47%)</title><rect x="525.2" y="1187.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="528.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.47%)</title><rect x="530.8" y="1219.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.47%)</title><rect x="530.8" y="1203.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="533.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.47%)</title><rect x="530.8" y="1187.0" width="5.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="533.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.47%)</title><rect x="530.8" y="1171.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.8" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.47%)</title><rect x="536.3" y="1251.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="539.3" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.elapsedNanos (1 samples, 0.47%)</title><rect x="536.3" y="1235.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="539.3" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="536.3" y="1219.0" width="5.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="539.3" y="1230.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="536.3" y="1203.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="539.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.47%)</title><rect x="541.8" y="1251.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.8" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.&lt;init&gt; (1 samples, 0.47%)</title><rect x="541.8" y="1235.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="544.8" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="541.8" y="1219.0" width="5.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="544.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.94%)</title><rect x="547.4" y="1251.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="550.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.94%)</title><rect x="547.4" y="1235.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="550.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.94%)</title><rect x="547.4" y="1219.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="550.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.47%)</title><rect x="547.4" y="1203.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="550.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.47%)</title><rect x="552.9" y="1203.0" width="5.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="555.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$489/340293756.accept (1 samples, 0.47%)</title><rect x="552.9" y="1187.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.9" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.47%)</title><rect x="552.9" y="1171.0" width="5.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="555.9" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.47%)</title><rect x="552.9" y="1155.0" width="5.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="555.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6 samples, 2.82%)</title><rect x="558.5" y="1331.0" width="33.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.5" y="1342.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.88%)</title><rect x="569.5" y="1315.0" width="22.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="572.5" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.88%)</title><rect x="569.5" y="1299.0" width="22.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="572.5" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.88%)</title><rect x="569.5" y="1283.0" width="22.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="572.5" y="1294.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.88%)</title><rect x="569.5" y="1267.0" width="22.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="572.5" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.88%)</title><rect x="569.5" y="1251.0" width="22.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="572.5" y="1262.0">j..</text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.47%)</title><rect x="591.7" y="1379.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="594.7" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.47%)</title><rect x="591.7" y="1363.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.7" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.47%)</title><rect x="591.7" y="1347.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="594.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.47%)</title><rect x="591.7" y="1331.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="594.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.47%)</title><rect x="591.7" y="1315.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="594.7" y="1326.0"></text>
</g>
<g>
<title>start_thread (107 samples, 50.23%)</title><rect x="597.2" y="1379.0" width="592.8" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="600.2" y="1390.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (107 samples, 50.23%)</title><rect x="597.2" y="1363.0" width="592.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="600.2" y="1374.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (107 samples, 50.23%)</title><rect x="597.2" y="1347.0" width="592.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.2" y="1358.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 2.82%)</title><rect x="597.2" y="1331.0" width="33.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="600.2" y="1342.0">Ga..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.82%)</title><rect x="597.2" y="1315.0" width="33.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="600.2" y="1326.0">G1..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 2.35%)</title><rect x="597.2" y="1299.0" width="27.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="600.2" y="1310.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.94%)</title><rect x="613.8" y="1283.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="616.8" y="1294.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.47%)</title><rect x="619.4" y="1267.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.4" y="1278.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.47%)</title><rect x="619.4" y="1251.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="622.4" y="1262.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.47%)</title><rect x="624.9" y="1299.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="627.9" y="1310.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.47%)</title><rect x="624.9" y="1283.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="627.9" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.47%)</title><rect x="624.9" y="1267.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="627.9" y="1278.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.47%)</title><rect x="624.9" y="1251.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="627.9" y="1262.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.47%)</title><rect x="624.9" y="1235.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="627.9" y="1246.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.47%)</title><rect x="624.9" y="1219.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="627.9" y="1230.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (101 samples, 47.42%)</title><rect x="630.5" y="1331.0" width="559.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="633.5" y="1342.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (100 samples, 46.95%)</title><rect x="630.5" y="1315.0" width="554.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="633.5" y="1326.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (100 samples, 46.95%)</title><rect x="630.5" y="1299.0" width="554.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.5" y="1310.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (96 samples, 45.07%)</title><rect x="630.5" y="1283.0" width="531.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="633.5" y="1294.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (96 samples, 45.07%)</title><rect x="630.5" y="1267.0" width="531.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="633.5" y="1278.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (56 samples, 26.29%)</title><rect x="630.5" y="1251.0" width="310.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="633.5" y="1262.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.94%)</title><rect x="630.5" y="1235.0" width="11.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.5" y="1246.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.47%)</title><rect x="630.5" y="1219.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.5" y="1230.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.47%)</title><rect x="636.0" y="1219.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="639.0" y="1230.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.47%)</title><rect x="636.0" y="1203.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="639.0" y="1214.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.94%)</title><rect x="641.5" y="1235.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="644.5" y="1246.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.94%)</title><rect x="641.5" y="1219.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="644.5" y="1230.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.47%)</title><rect x="641.5" y="1203.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="644.5" y="1214.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.47%)</title><rect x="641.5" y="1187.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="644.5" y="1198.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.47%)</title><rect x="647.1" y="1203.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="650.1" y="1214.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.41%)</title><rect x="652.6" y="1235.0" width="16.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="655.6" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.41%)</title><rect x="652.6" y="1219.0" width="16.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="655.6" y="1230.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.47%)</title><rect x="658.2" y="1203.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.47%)</title><rect x="663.7" y="1203.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="666.7" y="1214.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.47%)</title><rect x="663.7" y="1187.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="666.7" y="1198.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.47%)</title><rect x="663.7" y="1171.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="666.7" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.47%)</title><rect x="669.2" y="1235.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="672.2" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.47%)</title><rect x="669.2" y="1219.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="672.2" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (11 samples, 5.16%)</title><rect x="674.8" y="1235.0" width="60.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="677.8" y="1246.0">PhaseC..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (11 samples, 5.16%)</title><rect x="674.8" y="1219.0" width="60.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.8" y="1230.0">PhaseC..</text>
</g>
<g>
<title>PhaseCFG::call_catch_cleanup(Block*) (1 samples, 0.47%)</title><rect x="674.8" y="1203.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="677.8" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.47%)</title><rect x="680.3" y="1203.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="683.3" y="1214.0"></text>
</g>
<g>
<title>os::vm_page_size() (1 samples, 0.47%)</title><rect x="680.3" y="1187.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="683.3" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.94%)</title><rect x="685.9" y="1203.0" width="11.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="688.9" y="1214.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.47%)</title><rect x="685.9" y="1187.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="688.9" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.47%)</title><rect x="691.4" y="1187.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="694.4" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.94%)</title><rect x="696.9" y="1203.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="699.9" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (2 samples, 0.94%)</title><rect x="696.9" y="1187.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="699.9" y="1198.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.47%)</title><rect x="702.5" y="1171.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="705.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.47%)</title><rect x="708.0" y="1203.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="711.0" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.41%)</title><rect x="713.6" y="1203.0" width="16.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="716.6" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.47%)</title><rect x="719.1" y="1187.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="722.1" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.47%)</title><rect x="724.6" y="1187.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="727.6" y="1198.0"></text>
</g>
<g>
<title>salI_rReg_1Node::ideal_Opcode() const (1 samples, 0.47%)</title><rect x="730.2" y="1203.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="733.2" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 17.37%)</title><rect x="735.7" y="1235.0" width="205.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="738.7" y="1246.0">PhaseChaitin::Register_Allo..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.47%)</title><rect x="735.7" y="1219.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="738.7" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.47%)</title><rect x="741.3" y="1219.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="744.3" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.41%)</title><rect x="746.8" y="1219.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="749.8" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="746.8" y="1203.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="749.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.47%)</title><rect x="752.3" y="1203.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="755.3" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.47%)</title><rect x="752.3" y="1187.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="755.3" y="1198.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.47%)</title><rect x="757.9" y="1203.0" width="5.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="760.9" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.47%)</title><rect x="763.4" y="1219.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="766.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.47%)</title><rect x="763.4" y="1203.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.4" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.41%)</title><rect x="769.0" y="1219.0" width="16.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="772.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.47%)</title><rect x="780.0" y="1203.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="783.0" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.47%)</title><rect x="780.0" y="1187.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="783.0" y="1198.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.47%)</title><rect x="780.0" y="1171.0" width="5.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="783.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 5.16%)</title><rect x="785.6" y="1219.0" width="60.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="788.6" y="1230.0">PhaseC..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.47%)</title><rect x="807.7" y="1203.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="810.7" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="813.3" y="1203.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.3" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 2.35%)</title><rect x="818.8" y="1203.0" width="27.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="821.8" y="1214.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="824.4" y="1187.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="827.4" y="1198.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (3 samples, 1.41%)</title><rect x="829.9" y="1187.0" width="16.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="832.9" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.47%)</title><rect x="846.5" y="1219.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="849.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.47%)</title><rect x="846.5" y="1203.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="849.5" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.88%)</title><rect x="852.1" y="1219.0" width="22.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="855.1" y="1230.0">P..</text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.47%)</title><rect x="868.7" y="1203.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="871.7" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.47%)</title><rect x="874.2" y="1219.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.2" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 1.88%)</title><rect x="879.8" y="1219.0" width="22.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="882.8" y="1230.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.94%)</title><rect x="890.8" y="1203.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="893.8" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.47%)</title><rect x="901.9" y="1219.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.9" y="1230.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.41%)</title><rect x="907.5" y="1219.0" width="16.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="910.5" y="1230.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.41%)</title><rect x="907.5" y="1203.0" width="16.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="910.5" y="1214.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.94%)</title><rect x="907.5" y="1187.0" width="11.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="910.5" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.47%)</title><rect x="918.5" y="1187.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="921.5" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.41%)</title><rect x="924.1" y="1219.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="927.1" y="1230.0"></text>
</g>
<g>
<title>Compile::Optimize() (28 samples, 13.15%)</title><rect x="940.7" y="1251.0" width="155.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="943.7" y="1262.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.47%)</title><rect x="940.7" y="1235.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="943.7" y="1246.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.47%)</title><rect x="940.7" y="1219.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.7" y="1230.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.47%)</title><rect x="946.2" y="1235.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.2" y="1246.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.47%)</title><rect x="946.2" y="1219.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="949.2" y="1230.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.47%)</title><rect x="946.2" y="1203.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="949.2" y="1214.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.47%)</title><rect x="946.2" y="1187.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="949.2" y="1198.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 3.29%)</title><rect x="951.8" y="1235.0" width="38.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="954.8" y="1246.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 3.29%)</title><rect x="951.8" y="1219.0" width="38.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="954.8" y="1230.0">Pha..</text>
</g>
<g>
<title>Compile::cleanup_loop_predicates(PhaseIterGVN&amp;) (1 samples, 0.47%)</title><rect x="951.8" y="1203.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="954.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="951.8" y="1187.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="954.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="951.8" y="1171.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="954.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.35%)</title><rect x="957.3" y="1203.0" width="27.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.3" y="1214.0">P..</text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.47%)</title><rect x="957.3" y="1187.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="960.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.88%)</title><rect x="962.9" y="1187.0" width="22.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.9" y="1198.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.41%)</title><rect x="962.9" y="1171.0" width="16.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="965.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.47%)</title><rect x="962.9" y="1155.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="965.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.47%)</title><rect x="962.9" y="1139.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.94%)</title><rect x="968.4" y="1155.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="971.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.47%)</title><rect x="979.5" y="1171.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="982.5" y="1182.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.47%)</title><rect x="985.0" y="1203.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="988.0" y="1214.0"></text>
</g>
<g>
<title>IfNode::bottom_type() const (1 samples, 0.47%)</title><rect x="990.6" y="1235.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="993.6" y="1246.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 1.41%)</title><rect x="996.1" y="1235.0" width="16.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="999.1" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.47%)</title><rect x="1007.2" y="1219.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1010.2" y="1230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1007.2" y="1203.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.2" y="1214.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.47%)</title><rect x="1007.2" y="1187.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1010.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (10 samples, 4.69%)</title><rect x="1012.7" y="1235.0" width="55.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1015.7" y="1246.0">Phase..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.47%)</title><rect x="1012.7" y="1219.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1015.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.47%)</title><rect x="1018.3" y="1219.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.88%)</title><rect x="1023.8" y="1219.0" width="22.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1026.8" y="1230.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.88%)</title><rect x="1023.8" y="1203.0" width="22.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.8" y="1214.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.94%)</title><rect x="1023.8" y="1187.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.8" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.94%)</title><rect x="1023.8" y="1171.0" width="11.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1026.8" y="1182.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (2 samples, 0.94%)</title><rect x="1034.9" y="1187.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.9" y="1198.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.47%)</title><rect x="1040.4" y="1171.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1043.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.47%)</title><rect x="1046.0" y="1219.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.47%)</title><rect x="1046.0" y="1203.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.94%)</title><rect x="1051.5" y="1219.0" width="11.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.5" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.47%)</title><rect x="1062.6" y="1219.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.47%)</title><rect x="1062.6" y="1203.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.6" y="1214.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1062.6" y="1187.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1065.6" y="1198.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.47%)</title><rect x="1062.6" y="1171.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1065.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.88%)</title><rect x="1068.1" y="1235.0" width="22.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.1" y="1246.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.88%)</title><rect x="1068.1" y="1219.0" width="22.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.1" y="1230.0">P..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1068.1" y="1203.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.1" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="1068.1" y="1187.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.1" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.47%)</title><rect x="1068.1" y="1171.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.1" y="1182.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.47%)</title><rect x="1068.1" y="1155.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1071.1" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1073.7" y="1203.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1076.7" y="1214.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.47%)</title><rect x="1073.7" y="1187.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.7" y="1198.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.47%)</title><rect x="1079.2" y="1203.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.2" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.47%)</title><rect x="1079.2" y="1187.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1082.2" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.47%)</title><rect x="1079.2" y="1171.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1082.2" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.47%)</title><rect x="1079.2" y="1155.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.2" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.47%)</title><rect x="1079.2" y="1139.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1082.2" y="1150.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.47%)</title><rect x="1079.2" y="1123.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1082.2" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.47%)</title><rect x="1079.2" y="1107.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1082.2" y="1118.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1084.7" y="1203.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1087.7" y="1214.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1084.7" y="1187.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.7" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.47%)</title><rect x="1090.3" y="1235.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.3" y="1246.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.47%)</title><rect x="1090.3" y="1219.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1093.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.47%)</title><rect x="1090.3" y="1203.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1093.3" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 5.16%)</title><rect x="1095.8" y="1251.0" width="61.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.8" y="1262.0">ParseG..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 5.16%)</title><rect x="1095.8" y="1235.0" width="61.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.8" y="1246.0">Parse:..</text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 4.69%)</title><rect x="1095.8" y="1219.0" width="55.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.8" y="1230.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 4.69%)</title><rect x="1095.8" y="1203.0" width="55.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.8" y="1214.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 4.69%)</title><rect x="1095.8" y="1187.0" width="55.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1098.8" y="1198.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (10 samples, 4.69%)</title><rect x="1095.8" y="1171.0" width="55.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1098.8" y="1182.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.29%)</title><rect x="1095.8" y="1155.0" width="38.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.8" y="1166.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.29%)</title><rect x="1095.8" y="1139.0" width="38.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.8" y="1150.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.29%)</title><rect x="1095.8" y="1123.0" width="38.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.8" y="1134.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.29%)</title><rect x="1095.8" y="1107.0" width="38.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.8" y="1118.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.29%)</title><rect x="1095.8" y="1091.0" width="38.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.8" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.29%)</title><rect x="1095.8" y="1075.0" width="38.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.8" y="1086.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.41%)</title><rect x="1095.8" y="1059.0" width="16.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.8" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.41%)</title><rect x="1095.8" y="1043.0" width="16.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.41%)</title><rect x="1095.8" y="1027.0" width="16.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.41%)</title><rect x="1095.8" y="1011.0" width="16.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.41%)</title><rect x="1095.8" y="995.0" width="16.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.8" y="1006.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.47%)</title><rect x="1095.8" y="979.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.8" y="990.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const*&amp;) (1 samples, 0.47%)</title><rect x="1095.8" y="963.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.8" y="974.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.47%)</title><rect x="1095.8" y="947.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.8" y="958.0"></text>
</g>
<g>
<title>Compile::constrained_convI2L(PhaseGVN*, Node*, TypeInt const*, Node*, bool) (1 samples, 0.47%)</title><rect x="1095.8" y="931.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.8" y="942.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1095.8" y="915.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.8" y="926.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1095.8" y="899.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.8" y="910.0"></text>
</g>
<g>
<title>TypeTuple::hash() const (1 samples, 0.47%)</title><rect x="1095.8" y="883.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1101.4" y="979.0" width="11.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.4" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1101.4" y="963.0" width="11.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1101.4" y="947.0" width="11.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1101.4" y="931.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1101.4" y="915.0" width="11.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1101.4" y="899.0" width="11.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.4" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1101.4" y="883.0" width="11.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.4" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1101.4" y="867.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.4" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1101.4" y="851.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="1101.4" y="835.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="1101.4" y="819.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.4" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="1101.4" y="803.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.4" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1101.4" y="787.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.4" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1101.4" y="771.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.4" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="1101.4" y="755.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_checkcast(ciBytecodeStream*) (1 samples, 0.47%)</title><rect x="1101.4" y="739.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.4" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.47%)</title><rect x="1101.4" y="723.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.4" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1101.4" y="707.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.4" y="718.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.47%)</title><rect x="1101.4" y="691.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.4" y="702.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.47%)</title><rect x="1101.4" y="675.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.4" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1106.9" y="867.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1109.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1106.9" y="851.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1106.9" y="835.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1106.9" y="819.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1106.9" y="803.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1109.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1106.9" y="787.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.9" y="798.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.47%)</title><rect x="1106.9" y="771.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.9" y="782.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.47%)</title><rect x="1106.9" y="755.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1109.9" y="766.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.47%)</title><rect x="1106.9" y="739.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.9" y="750.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1106.9" y="723.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.9" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1106.9" y="707.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.9" y="718.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1106.9" y="691.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.9" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.47%)</title><rect x="1106.9" y="675.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.9" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.88%)</title><rect x="1112.4" y="1059.0" width="22.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.4" y="1070.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.88%)</title><rect x="1112.4" y="1043.0" width="22.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1115.4" y="1054.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.88%)</title><rect x="1112.4" y="1027.0" width="22.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.4" y="1038.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.88%)</title><rect x="1112.4" y="1011.0" width="22.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.4" y="1022.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.88%)</title><rect x="1112.4" y="995.0" width="22.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.4" y="1006.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.88%)</title><rect x="1112.4" y="979.0" width="22.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.4" y="990.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.88%)</title><rect x="1112.4" y="963.0" width="22.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.4" y="974.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.88%)</title><rect x="1112.4" y="947.0" width="22.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1115.4" y="958.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.88%)</title><rect x="1112.4" y="931.0" width="22.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.4" y="942.0">P..</text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.47%)</title><rect x="1112.4" y="915.0" width="5.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.4" y="926.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.47%)</title><rect x="1112.4" y="899.0" width="5.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.4" y="910.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.47%)</title><rect x="1112.4" y="883.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.4" y="894.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.47%)</title><rect x="1112.4" y="867.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.4" y="878.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.47%)</title><rect x="1112.4" y="851.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1115.4" y="862.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.47%)</title><rect x="1112.4" y="835.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.41%)</title><rect x="1118.0" y="915.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.41%)</title><rect x="1118.0" y="899.0" width="16.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.41%)</title><rect x="1118.0" y="883.0" width="16.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.41%)</title><rect x="1118.0" y="867.0" width="16.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.0" y="878.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1118.0" y="851.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="862.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.47%)</title><rect x="1118.0" y="835.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1123.5" y="851.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.5" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1123.5" y="835.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1126.5" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1123.5" y="819.0" width="11.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1123.5" y="803.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.5" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1123.5" y="787.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1123.5" y="771.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1123.5" y="755.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1123.5" y="739.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1123.5" y="723.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1123.5" y="707.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1123.5" y="691.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1123.5" y="675.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1123.5" y="659.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1123.5" y="643.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1123.5" y="627.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.5" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1123.5" y="611.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.5" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1123.5" y="595.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.5" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1123.5" y="579.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1123.5" y="563.0" width="5.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.5" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1123.5" y="547.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1123.5" y="531.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1123.5" y="515.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1123.5" y="499.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.5" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1123.5" y="483.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1123.5" y="467.0" width="5.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1123.5" y="451.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.5" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1123.5" y="435.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.5" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1123.5" y="419.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1123.5" y="403.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1123.5" y="387.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1123.5" y="371.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.5" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1123.5" y="355.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1123.5" y="339.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.5" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1123.5" y="323.0" width="5.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1123.5" y="307.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1123.5" y="291.0" width="5.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.5" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1123.5" y="275.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.5" y="286.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1123.5" y="259.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1123.5" y="243.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1123.5" y="227.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1123.5" y="211.0" width="5.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1126.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1123.5" y="195.0" width="5.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.5" y="206.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.47%)</title><rect x="1123.5" y="179.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.5" y="190.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.47%)</title><rect x="1123.5" y="163.0" width="5.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="174.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.47%)</title><rect x="1123.5" y="147.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.47%)</title><rect x="1123.5" y="131.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.5" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.47%)</title><rect x="1123.5" y="115.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1123.5" y="99.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.5" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1123.5" y="83.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.47%)</title><rect x="1123.5" y="67.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="78.0"></text>
</g>
<g>
<title>ciTypeFlow::block_at(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) [clone .constprop.162] (1 samples, 0.47%)</title><rect x="1123.5" y="51.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.5" y="62.0"></text>
</g>
<g>
<title>ResourceObj::operator new(unsigned long, Arena*) (1 samples, 0.47%)</title><rect x="1123.5" y="35.0" width="5.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.5" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1129.1" y="755.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.1" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1129.1" y="739.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1129.1" y="723.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1129.1" y="707.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1129.1" y="691.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1129.1" y="675.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1129.1" y="659.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1129.1" y="643.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1129.1" y="627.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1129.1" y="611.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1129.1" y="595.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1129.1" y="579.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.47%)</title><rect x="1129.1" y="563.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.47%)</title><rect x="1129.1" y="547.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.47%)</title><rect x="1129.1" y="531.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1132.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1129.1" y="515.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1129.1" y="499.0" width="5.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1129.1" y="483.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.1" y="494.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.47%)</title><rect x="1129.1" y="467.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1132.1" y="478.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.47%)</title><rect x="1129.1" y="451.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.1" y="462.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.47%)</title><rect x="1129.1" y="435.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.1" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.41%)</title><rect x="1134.6" y="1155.0" width="16.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.6" y="1166.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.47%)</title><rect x="1134.6" y="1139.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.6" y="1150.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.47%)</title><rect x="1134.6" y="1123.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1137.6" y="1134.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.47%)</title><rect x="1134.6" y="1107.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.6" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="1139.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.1" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="1123.0" width="11.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1140.1" y="1107.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1140.1" y="1091.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1140.1" y="1075.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1140.1" y="1059.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="1043.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="1027.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1140.1" y="1011.0" width="11.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1140.1" y="995.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1140.1" y="979.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1140.1" y="963.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="947.0" width="11.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.1" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="931.0" width="11.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1140.1" y="915.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1140.1" y="899.0" width="11.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1140.1" y="883.0" width="11.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.1" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1140.1" y="867.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.1" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="851.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="835.0" width="11.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1140.1" y="819.0" width="11.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1143.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1140.1" y="803.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1140.1" y="787.0" width="11.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1140.1" y="771.0" width="11.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.1" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="755.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="739.0" width="11.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.94%)</title><rect x="1140.1" y="723.0" width="11.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.94%)</title><rect x="1140.1" y="707.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.94%)</title><rect x="1140.1" y="691.0" width="11.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.94%)</title><rect x="1140.1" y="675.0" width="11.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.1" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.94%)</title><rect x="1140.1" y="659.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1143.1" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.94%)</title><rect x="1140.1" y="643.0" width="11.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.47%)</title><rect x="1140.1" y="627.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.47%)</title><rect x="1140.1" y="611.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.47%)</title><rect x="1140.1" y="595.0" width="5.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1143.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.47%)</title><rect x="1140.1" y="579.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.1" y="590.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.47%)</title><rect x="1140.1" y="563.0" width="5.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1143.1" y="574.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.47%)</title><rect x="1140.1" y="547.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="558.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.47%)</title><rect x="1140.1" y="531.0" width="5.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1143.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.47%)</title><rect x="1145.7" y="627.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.7" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1145.7" y="611.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.7" y="622.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.47%)</title><rect x="1145.7" y="595.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.7" y="606.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.47%)</title><rect x="1151.2" y="1219.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.2" y="1230.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.47%)</title><rect x="1151.2" y="1203.0" width="5.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.2" y="1214.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.47%)</title><rect x="1156.8" y="1251.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.8" y="1262.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.47%)</title><rect x="1156.8" y="1235.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="1246.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::copy_values_to(nmethod*) (1 samples, 0.47%)</title><rect x="1156.8" y="1219.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.8" y="1230.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.88%)</title><rect x="1162.3" y="1283.0" width="22.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.3" y="1294.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.88%)</title><rect x="1162.3" y="1267.0" width="22.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.3" y="1278.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.88%)</title><rect x="1162.3" y="1251.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.3" y="1262.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.88%)</title><rect x="1162.3" y="1235.0" width="22.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.3" y="1246.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (3 samples, 1.41%)</title><rect x="1162.3" y="1219.0" width="16.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="1230.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 1.41%)</title><rect x="1162.3" y="1203.0" width="16.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="1214.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 1.41%)</title><rect x="1162.3" y="1187.0" width="16.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.3" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 1.41%)</title><rect x="1162.3" y="1171.0" width="16.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.3" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 1.41%)</title><rect x="1162.3" y="1155.0" width="16.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.3" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 1.41%)</title><rect x="1162.3" y="1139.0" width="16.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.3" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 1.41%)</title><rect x="1162.3" y="1123.0" width="16.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.3" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.94%)</title><rect x="1162.3" y="1107.0" width="11.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.3" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.94%)</title><rect x="1162.3" y="1091.0" width="11.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.3" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.94%)</title><rect x="1162.3" y="1075.0" width="11.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.3" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.94%)</title><rect x="1162.3" y="1059.0" width="11.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.3" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.47%)</title><rect x="1162.3" y="1043.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::append_with_bci(Instruction*, int) (1 samples, 0.47%)</title><rect x="1162.3" y="1027.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.3" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::handle_exception(Instruction*) (1 samples, 0.47%)</title><rect x="1162.3" y="1011.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.3" y="1022.0"></text>
</g>
<g>
<title>ValueStack::is_same(ValueStack*) (1 samples, 0.47%)</title><rect x="1162.3" y="995.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.3" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.47%)</title><rect x="1167.8" y="1043.0" width="5.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="1054.0"></text>
</g>
<g>
<title>IntType::base() const (1 samples, 0.47%)</title><rect x="1167.8" y="1027.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="1038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.47%)</title><rect x="1173.4" y="1107.0" width="5.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.4" y="1118.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1173.4" y="1091.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.4" y="1102.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.47%)</title><rect x="1173.4" y="1075.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.4" y="1086.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.47%)</title><rect x="1173.4" y="1059.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.4" y="1070.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.47%)</title><rect x="1173.4" y="1043.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.4" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.47%)</title><rect x="1173.4" y="1027.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="1038.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.47%)</title><rect x="1173.4" y="1011.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1176.4" y="1022.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.47%)</title><rect x="1173.4" y="995.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.4" y="1006.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.47%)</title><rect x="1178.9" y="1219.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="1230.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.47%)</title><rect x="1178.9" y="1203.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="1214.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.47%)</title><rect x="1178.9" y="1187.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.9" y="1198.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.47%)</title><rect x="1178.9" y="1171.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="1182.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.47%)</title><rect x="1178.9" y="1155.0" width="5.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.9" y="1166.0"></text>
</g>
<g>
<title>LinearScanWalker::insert_move(int, Interval*, Interval*) (1 samples, 0.47%)</title><rect x="1178.9" y="1139.0" width="5.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.9" y="1150.0"></text>
</g>
<g>
<title>MoveResolver::resolve_mappings() (1 samples, 0.47%)</title><rect x="1178.9" y="1123.0" width="5.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="1134.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.47%)</title><rect x="1184.5" y="1315.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.5" y="1326.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.47%)</title><rect x="1184.5" y="1299.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.5" y="1310.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.47%)</title><rect x="1184.5" y="1283.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="1294.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.47%)</title><rect x="1184.5" y="1267.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.5" y="1278.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.47%)</title><rect x="1184.5" y="1251.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.5" y="1262.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.47%)</title><rect x="1184.5" y="1235.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.5" y="1246.0"></text>
</g>
</g>
</svg>
