<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (824 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.12%)</title><rect x="10.0" y="867.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="851.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="835.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="10.0" y="819.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.12%)</title><rect x="10.0" y="803.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="10.0" y="787.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.12%)</title><rect x="10.0" y="771.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.12%)</title><rect x="11.4" y="867.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="14.4" y="878.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.12%)</title><rect x="11.4" y="851.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.4" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (200 samples, 24.27%)</title><rect x="12.9" y="867.0" width="286.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="878.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (200 samples, 24.27%)</title><rect x="12.9" y="851.0" width="286.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="862.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (200 samples, 24.27%)</title><rect x="12.9" y="835.0" width="286.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="846.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.36%)</title><rect x="12.9" y="819.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.36%)</title><rect x="12.9" y="803.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.9" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.36%)</title><rect x="12.9" y="787.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.9" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.36%)</title><rect x="12.9" y="771.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.9" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.36%)</title><rect x="12.9" y="755.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.9" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.36%)</title><rect x="12.9" y="739.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.9" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.36%)</title><rect x="12.9" y="723.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.24%)</title><rect x="12.9" y="707.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.9" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="14.3" y="691.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="14.3" y="675.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.3" y="686.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="14.3" y="659.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="17.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="15.7" y="707.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="15.7" y="691.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="18.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="15.7" y="675.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="686.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.12%)</title><rect x="15.7" y="659.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.12%)</title><rect x="15.7" y="643.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.7" y="654.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$133/319689067.get (1 samples, 0.12%)</title><rect x="15.7" y="627.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.7" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.12%)</title><rect x="17.2" y="819.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.12%)</title><rect x="17.2" y="803.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.61%)</title><rect x="18.6" y="819.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.61%)</title><rect x="18.6" y="803.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.61%)</title><rect x="18.6" y="787.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/239426519.accept (5 samples, 0.61%)</title><rect x="18.6" y="771.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.61%)</title><rect x="18.6" y="755.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.61%)</title><rect x="18.6" y="739.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.49%)</title><rect x="20.0" y="723.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (163 samples, 19.78%)</title><rect x="25.8" y="819.0" width="233.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="830.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/388774129.accept (158 samples, 19.17%)</title><rect x="25.8" y="803.0" width="226.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.8" y="814.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (158 samples, 19.17%)</title><rect x="25.8" y="787.0" width="226.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="798.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (146 samples, 17.72%)</title><rect x="25.8" y="771.0" width="209.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.8" y="782.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (146 samples, 17.72%)</title><rect x="25.8" y="755.0" width="209.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.8" y="766.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (146 samples, 17.72%)</title><rect x="25.8" y="739.0" width="209.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.8" y="750.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (146 samples, 17.72%)</title><rect x="25.8" y="723.0" width="209.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.8" y="734.0">java/util/concurrent/Execut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (146 samples, 17.72%)</title><rect x="25.8" y="707.0" width="209.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="28.8" y="718.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (134 samples, 16.26%)</title><rect x="42.9" y="691.0" width="191.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="45.9" y="702.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (107 samples, 12.99%)</title><rect x="44.4" y="675.0" width="153.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.4" y="686.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 1.94%)</title><rect x="44.4" y="659.0" width="22.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.4" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 1.94%)</title><rect x="44.4" y="643.0" width="22.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.4" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 1.94%)</title><rect x="44.4" y="627.0" width="22.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="47.4" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="65.8" y="611.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.36%)</title><rect x="67.3" y="659.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.36%)</title><rect x="67.3" y="643.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.36%)</title><rect x="67.3" y="627.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.36%)</title><rect x="67.3" y="611.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (88 samples, 10.68%)</title><rect x="71.6" y="659.0" width="126.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="74.6" y="670.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (88 samples, 10.68%)</title><rect x="71.6" y="643.0" width="126.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.6" y="654.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 10.68%)</title><rect x="71.6" y="627.0" width="126.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.6" y="638.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 10.68%)</title><rect x="71.6" y="611.0" width="126.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="74.6" y="622.0">java/util/concur..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (86 samples, 10.44%)</title><rect x="74.4" y="595.0" width="123.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.4" y="606.0">jdk/internal/mi..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="75.9" y="579.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="78.9" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (33 samples, 4.00%)</title><rect x="77.3" y="579.0" width="47.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="80.3" y="590.0">Unsa..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="80.2" y="563.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="83.2" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.24%)</title><rect x="81.6" y="563.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="84.6" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.12%)</title><rect x="84.5" y="563.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="87.5" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.24%)</title><rect x="85.9" y="563.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="88.9" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.36%)</title><rect x="88.8" y="563.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="91.8" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="93.1" y="563.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="96.1" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.36%)</title><rect x="94.5" y="563.0" width="4.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="97.5" y="574.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="98.8" y="563.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="101.8" y="574.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.36%)</title><rect x="100.2" y="563.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="103.2" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.58%)</title><rect x="104.5" y="563.0" width="18.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="107.5" y="574.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="123.1" y="563.0" width="1.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="126.1" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (51 samples, 6.19%)</title><rect x="124.6" y="579.0" width="73.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="127.6" y="590.0">__pthrea..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.12%)</title><rect x="197.6" y="675.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.12%)</title><rect x="197.6" y="659.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.12%)</title><rect x="197.6" y="643.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (1 samples, 0.12%)</title><rect x="197.6" y="627.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.58%)</title><rect x="199.0" y="675.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="202.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (13 samples, 1.58%)</title><rect x="199.0" y="659.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="202.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.61%)</title><rect x="210.5" y="643.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (5 samples, 0.61%)</title><rect x="210.5" y="627.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.46%)</title><rect x="217.6" y="675.0" width="17.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="220.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.46%)</title><rect x="217.6" y="659.0" width="17.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="220.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.46%)</title><rect x="217.6" y="643.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="220.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.46%)</title><rect x="217.6" y="627.0" width="17.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="220.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.24%)</title><rect x="232.0" y="611.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 1.21%)</title><rect x="234.8" y="771.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 1.21%)</title><rect x="234.8" y="755.0" width="14.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.21%)</title><rect x="234.8" y="739.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.21%)</title><rect x="234.8" y="723.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.24%)</title><rect x="249.2" y="771.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.24%)</title><rect x="249.2" y="755.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="252.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="249.2" y="739.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.24%)</title><rect x="249.2" y="723.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="252.2" y="734.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (2 samples, 0.24%)</title><rect x="249.2" y="707.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="249.2" y="691.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="252.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.24%)</title><rect x="249.2" y="675.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.61%)</title><rect x="252.0" y="803.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.61%)</title><rect x="252.0" y="787.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="255.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.61%)</title><rect x="252.0" y="771.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.61%)</title><rect x="252.0" y="755.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="255.0" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.24%)</title><rect x="252.0" y="739.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (3 samples, 0.36%)</title><rect x="254.9" y="739.0" width="4.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="257.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (28 samples, 3.40%)</title><rect x="259.2" y="819.0" width="40.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="262.2" y="830.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (28 samples, 3.40%)</title><rect x="259.2" y="803.0" width="40.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="262.2" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (17 samples, 2.06%)</title><rect x="260.6" y="787.0" width="24.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.6" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (17 samples, 2.06%)</title><rect x="260.6" y="771.0" width="24.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.6" y="782.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (17 samples, 2.06%)</title><rect x="260.6" y="755.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.6" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (12 samples, 1.46%)</title><rect x="262.0" y="739.0" width="17.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="265.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (12 samples, 1.46%)</title><rect x="262.0" y="723.0" width="17.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="265.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (7 samples, 0.85%)</title><rect x="263.5" y="707.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.12%)</title><rect x="263.5" y="691.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.12%)</title><rect x="263.5" y="675.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.12%)</title><rect x="263.5" y="659.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="266.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.12%)</title><rect x="263.5" y="643.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="266.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.12%)</title><rect x="263.5" y="627.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="266.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.12%)</title><rect x="263.5" y="611.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.12%)</title><rect x="263.5" y="595.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.5" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.12%)</title><rect x="263.5" y="579.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.12%)</title><rect x="263.5" y="563.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="266.5" y="574.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.12%)</title><rect x="263.5" y="547.0" width="1.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="266.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.73%)</title><rect x="264.9" y="691.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.73%)</title><rect x="264.9" y="675.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="267.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (5 samples, 0.61%)</title><rect x="266.3" y="659.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.61%)</title><rect x="266.3" y="643.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (2 samples, 0.24%)</title><rect x="270.6" y="627.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (4 samples, 0.49%)</title><rect x="273.5" y="707.0" width="5.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.49%)</title><rect x="273.5" y="691.0" width="5.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="276.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.49%)</title><rect x="273.5" y="675.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="276.5" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.49%)</title><rect x="273.5" y="659.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.5" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.24%)</title><rect x="276.4" y="643.0" width="2.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="279.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (2 samples, 0.24%)</title><rect x="279.2" y="739.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.24%)</title><rect x="279.2" y="723.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="282.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.12%)</title><rect x="279.2" y="707.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="282.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="279.2" y="691.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="282.2" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="279.2" y="675.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="282.2" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="279.2" y="659.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="280.7" y="707.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="283.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="280.7" y="691.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="283.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.12%)</title><rect x="280.7" y="675.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.7" y="686.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.12%)</title><rect x="280.7" y="659.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="283.7" y="670.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.12%)</title><rect x="280.7" y="643.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.12%)</title><rect x="282.1" y="739.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.12%)</title><rect x="283.5" y="739.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.12%)</title><rect x="283.5" y="723.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="286.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.12%)</title><rect x="283.5" y="707.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.5" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.12%)</title><rect x="283.5" y="691.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="283.5" y="675.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="286.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.12%)</title><rect x="283.5" y="659.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.5" y="670.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.12%)</title><rect x="283.5" y="643.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="286.5" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="283.5" y="627.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="286.5" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="283.5" y="611.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="286.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.36%)</title><rect x="285.0" y="787.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.24%)</title><rect x="285.0" y="771.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.24%)</title><rect x="285.0" y="755.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.12%)</title><rect x="285.0" y="739.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="288.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.12%)</title><rect x="285.0" y="723.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="288.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="285.0" y="707.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="285.0" y="691.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="285.0" y="675.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="288.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="285.0" y="659.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.0" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="285.0" y="643.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="288.0" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="285.0" y="627.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.12%)</title><rect x="285.0" y="611.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.12%)</title><rect x="286.4" y="739.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.12%)</title><rect x="286.4" y="723.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="289.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.12%)</title><rect x="286.4" y="707.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.4" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.12%)</title><rect x="286.4" y="691.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="289.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.12%)</title><rect x="287.8" y="771.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (1 samples, 0.12%)</title><rect x="287.8" y="755.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="290.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.12%)</title><rect x="287.8" y="739.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.12%)</title><rect x="287.8" y="723.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="290.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.12%)</title><rect x="287.8" y="707.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="290.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.12%)</title><rect x="287.8" y="691.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.12%)</title><rect x="287.8" y="675.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.12%)</title><rect x="287.8" y="659.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.12%)</title><rect x="289.2" y="787.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.12%)</title><rect x="289.2" y="771.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.12%)</title><rect x="289.2" y="755.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.12%)</title><rect x="289.2" y="739.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.49%)</title><rect x="290.7" y="787.0" width="5.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.36%)</title><rect x="290.7" y="771.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.12%)</title><rect x="290.7" y="755.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.12%)</title><rect x="290.7" y="739.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="293.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.12%)</title><rect x="290.7" y="723.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.12%)</title><rect x="290.7" y="707.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.12%)</title><rect x="290.7" y="691.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.&lt;init&gt; (1 samples, 0.12%)</title><rect x="290.7" y="675.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.read (1 samples, 0.12%)</title><rect x="290.7" y="659.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData$FetchableTopicResponse.&lt;init&gt; (1 samples, 0.12%)</title><rect x="290.7" y="643.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData$FetchableTopicResponse.read (1 samples, 0.12%)</title><rect x="290.7" y="627.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="293.7" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="290.7" y="611.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="293.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.24%)</title><rect x="292.1" y="755.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.24%)</title><rect x="292.1" y="739.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.24%)</title><rect x="292.1" y="723.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.24%)</title><rect x="292.1" y="707.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="295.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.24%)</title><rect x="292.1" y="691.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.24%)</title><rect x="292.1" y="675.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.24%)</title><rect x="292.1" y="659.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.1" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.24%)</title><rect x="292.1" y="643.0" width="2.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="295.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.24%)</title><rect x="292.1" y="627.0" width="2.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.1" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.24%)</title><rect x="292.1" y="611.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.1" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.24%)</title><rect x="292.1" y="595.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.1" y="606.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.24%)</title><rect x="292.1" y="579.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.1" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (2 samples, 0.24%)</title><rect x="292.1" y="563.0" width="2.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="295.1" y="574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="292.1" y="547.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="295.1" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="293.5" y="547.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="296.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.12%)</title><rect x="295.0" y="771.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.24%)</title><rect x="296.4" y="787.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.24%)</title><rect x="296.4" y="771.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.24%)</title><rect x="296.4" y="755.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="299.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.24%)</title><rect x="296.4" y="739.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (2 samples, 0.24%)</title><rect x="296.4" y="723.0" width="2.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="299.4" y="734.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.12%)</title><rect x="297.8" y="707.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="300.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$239/244086562.accept (1 samples, 0.12%)</title><rect x="297.8" y="691.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.12%)</title><rect x="297.8" y="675.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.8" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.12%)</title><rect x="297.8" y="659.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="300.8" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.12%)</title><rect x="297.8" y="643.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="300.8" y="654.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.12%)</title><rect x="297.8" y="627.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.8" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.12%)</title><rect x="297.8" y="611.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.8" y="622.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.12%)</title><rect x="297.8" y="595.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Thread.run (546 samples, 66.26%)</title><rect x="299.3" y="867.0" width="781.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.3" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (546 samples, 66.26%)</title><rect x="299.3" y="851.0" width="781.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.3" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (546 samples, 66.26%)</title><rect x="299.3" y="835.0" width="781.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.3" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/2058158904.run (349 samples, 42.35%)</title><rect x="299.3" y="819.0" width="499.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.3" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (349 samples, 42.35%)</title><rect x="299.3" y="803.0" width="499.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.3" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (349 samples, 42.35%)</title><rect x="299.3" y="787.0" width="499.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.3" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (349 samples, 42.35%)</title><rect x="299.3" y="771.0" width="499.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="302.3" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 4.49%)</title><rect x="309.3" y="755.0" width="53.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.3" y="766.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 4.49%)</title><rect x="309.3" y="739.0" width="53.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.3" y="750.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 4.49%)</title><rect x="309.3" y="723.0" width="53.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.3" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (25 samples, 3.03%)</title><rect x="326.5" y="707.0" width="35.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="329.5" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.24%)</title><rect x="326.5" y="691.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="329.5" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.12%)</title><rect x="327.9" y="675.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="330.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 2.79%)</title><rect x="329.3" y="691.0" width="33.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.3" y="702.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$480/229115298.accept (23 samples, 2.79%)</title><rect x="329.3" y="675.0" width="33.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.3" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (23 samples, 2.79%)</title><rect x="329.3" y="659.0" width="33.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="332.3" y="670.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/61232047.accept (2 samples, 0.24%)</title><rect x="335.1" y="643.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (17 samples, 2.06%)</title><rect x="337.9" y="643.0" width="24.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.9" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (17 samples, 2.06%)</title><rect x="337.9" y="627.0" width="24.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.9" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (16 samples, 1.94%)</title><rect x="339.4" y="611.0" width="22.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.4" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.12%)</title><rect x="339.4" y="595.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.82%)</title><rect x="340.8" y="595.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.8" y="606.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (4 samples, 0.49%)</title><rect x="362.3" y="755.0" width="5.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (4 samples, 0.49%)</title><rect x="362.3" y="739.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="365.3" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.49%)</title><rect x="362.3" y="723.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.49%)</title><rect x="362.3" y="707.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.49%)</title><rect x="362.3" y="691.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.schedule (1 samples, 0.12%)</title><rect x="368.0" y="755.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="371.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler.waitOnScheduledTime (1 samples, 0.12%)</title><rect x="368.0" y="739.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="371.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ExecutionScheduler$$Lambda$396/2077903515.get (1 samples, 0.12%)</title><rect x="368.0" y="723.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="371.0" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.12%)</title><rect x="368.0" y="707.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="368.0" y="691.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="371.0" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="368.0" y="675.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="371.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (104 samples, 12.62%)</title><rect x="369.4" y="755.0" width="149.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="372.4" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (104 samples, 12.62%)</title><rect x="369.4" y="739.0" width="149.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="372.4" y="750.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (104 samples, 12.62%)</title><rect x="369.4" y="723.0" width="149.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="372.4" y="734.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (104 samples, 12.62%)</title><rect x="369.4" y="707.0" width="149.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="372.4" y="718.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (104 samples, 12.62%)</title><rect x="369.4" y="691.0" width="149.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.4" y="702.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (104 samples, 12.62%)</title><rect x="369.4" y="675.0" width="149.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.4" y="686.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (47 samples, 5.70%)</title><rect x="369.4" y="659.0" width="67.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="372.4" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (10 samples, 1.21%)</title><rect x="369.4" y="643.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="372.4" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="369.4" y="627.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="372.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 1.09%)</title><rect x="370.9" y="627.0" width="12.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="373.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 1.09%)</title><rect x="370.9" y="611.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="373.9" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 1.09%)</title><rect x="370.9" y="595.0" width="12.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.9" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 1.09%)</title><rect x="370.9" y="579.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="373.9" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.36%)</title><rect x="379.5" y="563.0" width="4.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="382.5" y="574.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="379.5" y="547.0" width="4.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="382.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (37 samples, 4.49%)</title><rect x="383.8" y="643.0" width="52.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.8" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (37 samples, 4.49%)</title><rect x="383.8" y="627.0" width="52.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="386.8" y="638.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (37 samples, 4.49%)</title><rect x="383.8" y="611.0" width="52.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="386.8" y="622.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (37 samples, 4.49%)</title><rect x="383.8" y="595.0" width="52.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.8" y="606.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (30 samples, 3.64%)</title><rect x="383.8" y="579.0" width="42.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="386.8" y="590.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (30 samples, 3.64%)</title><rect x="383.8" y="563.0" width="42.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.8" y="574.0">com/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="416.7" y="547.0" width="1.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="419.7" y="558.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="416.7" y="531.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="419.7" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.61%)</title><rect x="418.1" y="547.0" width="7.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="421.1" y="558.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.61%)</title><rect x="418.1" y="531.0" width="7.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="421.1" y="542.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="425.3" y="547.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="428.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (5 samples, 0.61%)</title><rect x="426.7" y="579.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.7" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="426.7" y="563.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="429.7" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="426.7" y="547.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="429.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="426.7" y="531.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="429.7" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="426.7" y="515.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="429.7" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="426.7" y="499.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="429.7" y="510.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="426.7" y="483.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="429.7" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (4 samples, 0.49%)</title><rect x="428.2" y="563.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.12%)</title><rect x="432.5" y="547.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="435.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.24%)</title><rect x="433.9" y="579.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="436.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.24%)</title><rect x="433.9" y="563.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.12%)</title><rect x="435.3" y="547.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="438.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (51 samples, 6.19%)</title><rect x="436.7" y="659.0" width="73.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.7" y="670.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.36%)</title><rect x="436.7" y="643.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.36%)</title><rect x="436.7" y="627.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="439.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.24%)</title><rect x="441.0" y="643.0" width="2.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.24%)</title><rect x="441.0" y="627.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.12%)</title><rect x="441.0" y="611.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="444.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.12%)</title><rect x="441.0" y="595.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.0" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="441.0" y="579.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="444.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="441.0" y="563.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="444.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="441.0" y="547.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="444.0" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="441.0" y="531.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="444.0" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="441.0" y="515.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="444.0" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.12%)</title><rect x="441.0" y="499.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="444.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.12%)</title><rect x="442.5" y="611.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.12%)</title><rect x="442.5" y="595.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.12%)</title><rect x="442.5" y="579.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (5 samples, 0.61%)</title><rect x="443.9" y="643.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.24%)</title><rect x="448.2" y="627.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (41 samples, 4.98%)</title><rect x="451.1" y="643.0" width="58.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.1" y="654.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (41 samples, 4.98%)</title><rect x="451.1" y="627.0" width="58.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.1" y="638.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.58%)</title><rect x="453.9" y="611.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="456.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.73%)</title><rect x="456.8" y="595.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.73%)</title><rect x="456.8" y="579.0" width="8.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.73%)</title><rect x="456.8" y="563.0" width="8.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="459.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.49%)</title><rect x="465.4" y="595.0" width="5.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="471.1" y="595.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="474.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.12%)</title><rect x="471.1" y="579.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="474.1" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.12%)</title><rect x="471.1" y="563.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (26 samples, 3.16%)</title><rect x="472.5" y="611.0" width="37.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.5" y="622.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (26 samples, 3.16%)</title><rect x="472.5" y="595.0" width="37.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="475.5" y="606.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (24 samples, 2.91%)</title><rect x="475.4" y="579.0" width="34.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="478.4" y="590.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.85%)</title><rect x="479.7" y="563.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.36%)</title><rect x="481.1" y="547.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="484.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.36%)</title><rect x="481.1" y="531.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.36%)</title><rect x="481.1" y="515.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="484.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="484.0" y="499.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="487.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.12%)</title><rect x="485.4" y="547.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="488.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="486.9" y="547.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="489.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.12%)</title><rect x="486.9" y="531.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="489.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="488.3" y="547.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.73%)</title><rect x="489.7" y="563.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.24%)</title><rect x="495.5" y="547.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="498.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.24%)</title><rect x="495.5" y="531.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.24%)</title><rect x="495.5" y="515.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="498.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (2 samples, 0.24%)</title><rect x="495.5" y="499.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="498.5" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (2 samples, 0.24%)</title><rect x="495.5" y="483.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (2 samples, 0.24%)</title><rect x="495.5" y="467.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="498.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (2 samples, 0.24%)</title><rect x="495.5" y="451.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="498.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (2 samples, 0.24%)</title><rect x="495.5" y="435.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="498.5" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.12%)</title><rect x="498.3" y="563.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="501.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.24%)</title><rect x="499.8" y="563.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.24%)</title><rect x="499.8" y="547.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.24%)</title><rect x="499.8" y="531.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.24%)</title><rect x="499.8" y="515.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.8" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.24%)</title><rect x="499.8" y="499.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.8" y="510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.24%)</title><rect x="499.8" y="483.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.8" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor5.newInstance (1 samples, 0.12%)</title><rect x="499.8" y="467.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="502.8" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="499.8" y="451.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="502.8" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="499.8" y="435.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="502.8" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="499.8" y="419.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.8" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="499.8" y="403.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="502.8" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.12%)</title><rect x="501.2" y="467.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="504.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.24%)</title><rect x="502.6" y="563.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="505.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.24%)</title><rect x="502.6" y="547.0" width="2.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="502.6" y="531.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="505.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="504.1" y="531.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.1" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="504.1" y="515.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.1" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="504.1" y="499.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="507.1" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.36%)</title><rect x="505.5" y="563.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="508.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.36%)</title><rect x="505.5" y="547.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 0.73%)</title><rect x="509.8" y="659.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="512.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 0.73%)</title><rect x="509.8" y="643.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 0.73%)</title><rect x="509.8" y="627.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="512.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 0.73%)</title><rect x="509.8" y="611.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="512.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 0.73%)</title><rect x="509.8" y="595.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="512.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (193 samples, 23.42%)</title><rect x="518.4" y="755.0" width="276.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="521.4" y="766.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (35 samples, 4.25%)</title><rect x="519.8" y="739.0" width="50.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="522.8" y="750.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (34 samples, 4.13%)</title><rect x="521.2" y="723.0" width="48.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="524.2" y="734.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 3.88%)</title><rect x="524.1" y="707.0" width="45.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="527.1" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (17 samples, 2.06%)</title><rect x="525.5" y="691.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="528.5" y="702.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.36%)</title><rect x="528.4" y="675.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.24%)</title><rect x="529.8" y="659.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="532.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.46%)</title><rect x="532.7" y="675.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.46%)</title><rect x="532.7" y="659.0" width="17.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="535.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="549.9" y="691.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.12%)</title><rect x="549.9" y="675.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="552.9" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 1.58%)</title><rect x="551.3" y="691.0" width="18.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="554.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="551.3" y="675.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="554.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.46%)</title><rect x="552.7" y="675.0" width="17.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="555.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="552.7" y="659.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="555.7" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="554.2" y="643.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="557.2" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="554.2" y="627.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="557.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 1.21%)</title><rect x="555.6" y="659.0" width="14.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (6 samples, 0.73%)</title><rect x="569.9" y="739.0" width="8.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="572.9" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (6 samples, 0.73%)</title><rect x="569.9" y="723.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="572.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (92 samples, 11.17%)</title><rect x="578.5" y="739.0" width="131.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="581.5" y="750.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (89 samples, 10.80%)</title><rect x="578.5" y="723.0" width="127.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.5" y="734.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (37 samples, 4.49%)</title><rect x="578.5" y="707.0" width="53.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="581.5" y="718.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (4 samples, 0.49%)</title><rect x="578.5" y="691.0" width="5.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.5" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="582.8" y="675.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="585.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (32 samples, 3.88%)</title><rect x="584.2" y="691.0" width="45.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="587.2" y="702.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (30 samples, 3.64%)</title><rect x="587.1" y="675.0" width="43.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="590.1" y="686.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.85%)</title><rect x="615.8" y="659.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="618.8" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.85%)</title><rect x="615.8" y="643.0" width="10.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="618.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.36%)</title><rect x="621.5" y="627.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="624.5" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.24%)</title><rect x="622.9" y="611.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="625.9" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.24%)</title><rect x="622.9" y="595.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="625.9" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.24%)</title><rect x="622.9" y="579.0" width="2.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="625.9" y="590.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="622.9" y="563.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="625.9" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="624.3" y="563.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="627.3" y="574.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.12%)</title><rect x="624.3" y="547.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="627.3" y="558.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.12%)</title><rect x="624.3" y="531.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.3" y="542.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.12%)</title><rect x="625.8" y="659.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="628.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.12%)</title><rect x="625.8" y="643.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="628.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="625.8" y="627.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="628.8" y="638.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="627.2" y="659.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="630.2" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="628.6" y="659.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="631.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.12%)</title><rect x="630.1" y="691.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.1" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.12%)</title><rect x="630.1" y="675.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="633.1" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.12%)</title><rect x="630.1" y="659.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="633.1" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="630.1" y="643.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="633.1" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="630.1" y="627.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="633.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="630.1" y="611.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="633.1" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="630.1" y="595.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="633.1" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="630.1" y="579.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="633.1" y="590.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (52 samples, 6.31%)</title><rect x="631.5" y="707.0" width="74.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.5" y="718.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (52 samples, 6.31%)</title><rect x="631.5" y="691.0" width="74.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="634.5" y="702.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 3.64%)</title><rect x="631.5" y="675.0" width="43.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="634.5" y="686.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.46%)</title><rect x="653.0" y="659.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.0" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.46%)</title><rect x="653.0" y="643.0" width="17.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.0" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.36%)</title><rect x="670.2" y="659.0" width="4.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="673.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.12%)</title><rect x="674.5" y="675.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (21 samples, 2.55%)</title><rect x="675.9" y="675.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.9" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (21 samples, 2.55%)</title><rect x="675.9" y="659.0" width="30.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.9" y="670.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.49%)</title><rect x="675.9" y="643.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.9" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="680.2" y="627.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.2" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="680.2" y="611.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.2" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 2.06%)</title><rect x="681.6" y="643.0" width="24.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="684.6" y="654.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="701.7" y="627.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="704.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.12%)</title><rect x="704.5" y="627.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="704.5" y="611.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.5" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="704.5" y="595.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="707.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="704.5" y="579.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="707.5" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="704.5" y="563.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="707.5" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="704.5" y="547.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="707.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="704.5" y="531.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="707.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="704.5" y="515.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="707.5" y="526.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.12%)</title><rect x="704.5" y="499.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="707.5" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.12%)</title><rect x="704.5" y="483.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="707.5" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.12%)</title><rect x="704.5" y="467.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="707.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 0.36%)</title><rect x="706.0" y="723.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 0.36%)</title><rect x="706.0" y="707.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.36%)</title><rect x="706.0" y="691.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="709.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.36%)</title><rect x="706.0" y="675.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="709.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.36%)</title><rect x="706.0" y="659.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="709.0" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.24%)</title><rect x="707.4" y="643.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="710.4" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="708.8" y="627.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="711.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 5.34%)</title><rect x="710.3" y="739.0" width="63.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="713.3" y="750.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (44 samples, 5.34%)</title><rect x="710.3" y="723.0" width="63.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="713.3" y="734.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1010779730.process (17 samples, 2.06%)</title><rect x="714.6" y="707.0" width="24.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.6" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (17 samples, 2.06%)</title><rect x="714.6" y="691.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="717.6" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (16 samples, 1.94%)</title><rect x="714.6" y="675.0" width="22.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.6" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.12%)</title><rect x="728.9" y="659.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="731.9" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.12%)</title><rect x="728.9" y="643.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="731.9" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.12%)</title><rect x="728.9" y="627.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.9" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.12%)</title><rect x="728.9" y="611.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.49%)</title><rect x="730.3" y="659.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="733.3" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.49%)</title><rect x="730.3" y="643.0" width="5.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="733.3" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="731.7" y="627.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="734.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="736.0" y="659.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.12%)</title><rect x="737.5" y="675.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.5" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="737.5" y="659.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.12%)</title><rect x="737.5" y="643.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="740.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.85%)</title><rect x="738.9" y="707.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.85%)</title><rect x="738.9" y="691.0" width="10.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="748.9" y="707.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="751.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="748.9" y="691.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="751.9" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.12%)</title><rect x="750.4" y="707.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="753.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.12%)</title><rect x="750.4" y="691.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="753.4" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="751.8" y="707.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="754.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="751.8" y="691.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="754.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.24%)</title><rect x="753.2" y="707.0" width="2.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="756.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.24%)</title><rect x="753.2" y="691.0" width="2.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="756.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="754.7" y="675.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="757.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="754.7" y="659.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="757.7" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="754.7" y="643.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="757.7" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="754.7" y="627.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.7" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="754.7" y="611.0" width="1.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="757.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.46%)</title><rect x="756.1" y="707.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="759.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.46%)</title><rect x="756.1" y="691.0" width="17.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.49%)</title><rect x="767.5" y="675.0" width="5.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="770.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.49%)</title><rect x="767.5" y="659.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="770.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$478/983121133.accept (1 samples, 0.12%)</title><rect x="769.0" y="643.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="772.0" y="654.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.24%)</title><rect x="770.4" y="643.0" width="2.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="773.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.82%)</title><rect x="773.3" y="739.0" width="21.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.3" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.82%)</title><rect x="773.3" y="723.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="776.3" y="734.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.49%)</title><rect x="779.0" y="707.0" width="5.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="782.0" y="718.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.49%)</title><rect x="779.0" y="691.0" width="5.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="782.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.85%)</title><rect x="784.7" y="707.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.24%)</title><rect x="784.7" y="691.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.61%)</title><rect x="787.6" y="691.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="790.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$479/542295536.accept (5 samples, 0.61%)</title><rect x="787.6" y="675.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.6" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.36%)</title><rect x="790.5" y="659.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="793.5" y="670.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="790.5" y="643.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="793.5" y="654.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.36%)</title><rect x="794.8" y="755.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="797.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="794.8" y="739.0" width="4.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="797.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.36%)</title><rect x="799.1" y="819.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.36%)</title><rect x="799.1" y="803.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="802.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.36%)</title><rect x="799.1" y="787.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="802.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.36%)</title><rect x="799.1" y="771.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (194 samples, 23.54%)</title><rect x="803.3" y="819.0" width="277.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.3" y="830.0">java/util/concurrent/ThreadPoolExecut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (194 samples, 23.54%)</title><rect x="803.3" y="803.0" width="277.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="806.3" y="814.0">java/util/concurrent/LinkedBlockingQu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (180 samples, 21.84%)</title><rect x="804.8" y="787.0" width="257.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.8" y="798.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 1.46%)</title><rect x="804.8" y="771.0" width="17.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (12 samples, 1.46%)</title><rect x="822.0" y="771.0" width="17.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="825.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.46%)</title><rect x="822.0" y="755.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="825.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.12%)</title><rect x="837.7" y="739.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="840.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.85%)</title><rect x="839.2" y="771.0" width="10.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="842.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.85%)</title><rect x="839.2" y="755.0" width="10.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="842.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 18.08%)</title><rect x="849.2" y="771.0" width="213.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.2" y="782.0">java/util/concurrent/locks/L..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (148 samples, 17.96%)</title><rect x="850.6" y="755.0" width="211.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.6" y="766.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Unsafe_Park (144 samples, 17.48%)</title><rect x="850.6" y="739.0" width="206.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="853.6" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="853.5" y="723.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="856.5" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (23 samples, 2.79%)</title><rect x="854.9" y="723.0" width="32.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="857.9" y="734.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (7 samples, 0.85%)</title><rect x="870.7" y="707.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.7" y="718.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="879.2" y="691.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="882.2" y="702.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.12%)</title><rect x="880.7" y="707.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="883.7" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.24%)</title><rect x="882.1" y="707.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="885.1" y="718.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="885.0" y="707.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="888.0" y="718.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="886.4" y="707.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="889.4" y="718.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="887.8" y="723.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="890.8" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (5 samples, 0.61%)</title><rect x="889.3" y="723.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="892.3" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 4.73%)</title><rect x="896.4" y="723.0" width="55.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="899.4" y="734.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 6.92%)</title><rect x="952.3" y="723.0" width="81.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="955.3" y="734.0">__pthread..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.85%)</title><rect x="1033.9" y="723.0" width="10.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1036.9" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.12%)</title><rect x="1043.9" y="723.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1046.9" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.12%)</title><rect x="1045.4" y="723.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1048.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1046.8" y="723.0" width="1.4" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1049.8" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.12%)</title><rect x="1048.2" y="723.0" width="1.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1051.2" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.12%)</title><rect x="1049.7" y="723.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1052.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1051.1" y="723.0" width="1.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1054.1" y="734.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.36%)</title><rect x="1052.5" y="723.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.5" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.49%)</title><rect x="1056.8" y="739.0" width="5.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1059.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.58%)</title><rect x="1062.5" y="787.0" width="18.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.58%)</title><rect x="1062.5" y="771.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1065.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.58%)</title><rect x="1062.5" y="755.0" width="18.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1065.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.58%)</title><rect x="1062.5" y="739.0" width="18.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1065.5" y="750.0"></text>
</g>
<g>
<title>msort_with_tmp.part.0 (1 samples, 0.12%)</title><rect x="1081.2" y="867.0" width="1.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1084.2" y="878.0"></text>
</g>
<g>
<title>edge_order(CFGEdge**, CFGEdge**) (1 samples, 0.12%)</title><rect x="1081.2" y="851.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1084.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1082.6" y="867.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1085.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.12%)</title><rect x="1082.6" y="851.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1085.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.12%)</title><rect x="1082.6" y="835.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1085.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.12%)</title><rect x="1082.6" y="819.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.12%)</title><rect x="1082.6" y="803.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1085.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.12%)</title><rect x="1082.6" y="787.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.12%)</title><rect x="1082.6" y="771.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1085.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1082.6" y="755.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1085.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1082.6" y="739.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1085.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.12%)</title><rect x="1082.6" y="723.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1085.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.responseData (1 samples, 0.12%)</title><rect x="1082.6" y="707.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1085.6" y="718.0"></text>
</g>
<g>
<title>start_thread (74 samples, 8.98%)</title><rect x="1084.0" y="867.0" width="106.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1087.0" y="878.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (74 samples, 8.98%)</title><rect x="1084.0" y="851.0" width="106.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1087.0" y="862.0">thread_native..</text>
</g>
<g>
<title>Thread::call_run() (74 samples, 8.98%)</title><rect x="1084.0" y="835.0" width="106.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1087.0" y="846.0">Thread::call_..</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.12%)</title><rect x="1084.0" y="819.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1087.0" y="830.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1084.0" y="803.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.0" y="814.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.12%)</title><rect x="1084.0" y="787.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1087.0" y="798.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.12%)</title><rect x="1084.0" y="771.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1087.0" y="782.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (72 samples, 8.74%)</title><rect x="1085.5" y="819.0" width="103.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1088.5" y="830.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (72 samples, 8.74%)</title><rect x="1085.5" y="803.0" width="103.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1088.5" y="814.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (72 samples, 8.74%)</title><rect x="1085.5" y="787.0" width="103.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.5" y="798.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (71 samples, 8.62%)</title><rect x="1085.5" y="771.0" width="101.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1088.5" y="782.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (71 samples, 8.62%)</title><rect x="1085.5" y="755.0" width="101.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1088.5" y="766.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 5.34%)</title><rect x="1085.5" y="739.0" width="63.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1088.5" y="750.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.36%)</title><rect x="1085.5" y="723.0" width="4.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.5" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.24%)</title><rect x="1085.5" y="707.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1088.5" y="718.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.12%)</title><rect x="1086.9" y="691.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1089.9" y="702.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.12%)</title><rect x="1086.9" y="675.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1089.9" y="686.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.12%)</title><rect x="1088.3" y="707.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1091.3" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.12%)</title><rect x="1088.3" y="691.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1091.3" y="702.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.12%)</title><rect x="1088.3" y="675.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1091.3" y="686.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.12%)</title><rect x="1089.8" y="723.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.8" y="734.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.36%)</title><rect x="1091.2" y="723.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.2" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.36%)</title><rect x="1091.2" y="707.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1094.2" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.12%)</title><rect x="1091.2" y="691.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.2" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1092.6" y="691.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1095.6" y="702.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.12%)</title><rect x="1094.1" y="691.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.1" y="702.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.12%)</title><rect x="1094.1" y="675.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1097.1" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.12%)</title><rect x="1095.5" y="723.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.5" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.12%)</title><rect x="1095.5" y="707.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1098.5" y="718.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="1095.5" y="691.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1098.5" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.36%)</title><rect x="1096.9" y="723.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.9" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.36%)</title><rect x="1096.9" y="707.0" width="4.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.9" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1096.9" y="691.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.9" y="702.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.12%)</title><rect x="1096.9" y="675.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1099.9" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.24%)</title><rect x="1098.3" y="691.0" width="2.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1101.3" y="702.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.12%)</title><rect x="1098.3" y="675.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.3" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1099.8" y="675.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.8" y="686.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.12%)</title><rect x="1099.8" y="659.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.8" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (33 samples, 4.00%)</title><rect x="1101.2" y="723.0" width="47.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1104.2" y="734.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.24%)</title><rect x="1101.2" y="707.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.12%)</title><rect x="1102.6" y="691.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.49%)</title><rect x="1104.1" y="707.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.36%)</title><rect x="1105.5" y="691.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1108.5" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.36%)</title><rect x="1105.5" y="675.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.5" y="686.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="1108.4" y="659.0" width="1.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1111.4" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.49%)</title><rect x="1109.8" y="707.0" width="5.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.8" y="718.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.12%)</title><rect x="1114.1" y="691.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.97%)</title><rect x="1115.5" y="707.0" width="11.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.5" y="718.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.12%)</title><rect x="1118.4" y="691.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.4" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1119.8" y="691.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.36%)</title><rect x="1121.3" y="691.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.3" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1124.1" y="675.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.1" y="686.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.12%)</title><rect x="1125.6" y="691.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.12%)</title><rect x="1127.0" y="707.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.24%)</title><rect x="1128.4" y="707.0" width="2.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.12%)</title><rect x="1131.3" y="707.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.3" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1131.3" y="691.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.12%)</title><rect x="1132.7" y="707.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.36%)</title><rect x="1134.2" y="707.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.2" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.12%)</title><rect x="1135.6" y="691.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1137.0" y="691.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1140.0" y="702.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.24%)</title><rect x="1138.4" y="707.0" width="2.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.4" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.12%)</title><rect x="1138.4" y="691.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (1 samples, 0.12%)</title><rect x="1138.4" y="675.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.4" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.12%)</title><rect x="1139.9" y="691.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.9" y="702.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.12%)</title><rect x="1139.9" y="675.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.9" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1139.9" y="659.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.9" y="670.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.24%)</title><rect x="1141.3" y="707.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="718.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1142.7" y="691.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1142.7" y="675.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.7" y="686.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (1 samples, 0.12%)</title><rect x="1144.2" y="707.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1147.2" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1145.6" y="707.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1148.6" y="718.0"></text>
</g>
<g>
<title>addP_rReg_immNode::ideal_Opcode() const (1 samples, 0.12%)</title><rect x="1147.0" y="707.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 2.43%)</title><rect x="1148.5" y="739.0" width="28.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1151.5" y="750.0">Co..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (4 samples, 0.49%)</title><rect x="1148.5" y="723.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 0.49%)</title><rect x="1148.5" y="707.0" width="5.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.24%)</title><rect x="1148.5" y="691.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1151.3" y="691.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.12%)</title><rect x="1152.8" y="691.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.12%)</title><rect x="1154.2" y="723.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.12%)</title><rect x="1154.2" y="707.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1157.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="691.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="675.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="659.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="643.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="627.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="611.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="595.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="579.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="563.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="547.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1157.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1154.2" y="531.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.12%)</title><rect x="1155.6" y="723.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.12%)</title><rect x="1155.6" y="707.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 0.73%)</title><rect x="1157.1" y="723.0" width="8.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1157.1" y="707.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.12%)</title><rect x="1157.1" y="691.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1157.1" y="675.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.49%)</title><rect x="1158.5" y="707.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.12%)</title><rect x="1162.8" y="691.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.12%)</title><rect x="1164.2" y="707.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.12%)</title><rect x="1164.2" y="691.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="702.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1164.2" y="675.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.2" y="686.0"></text>
</g>
<g>
<title>IfNode::Opcode() const (1 samples, 0.12%)</title><rect x="1164.2" y="659.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.73%)</title><rect x="1165.7" y="723.0" width="8.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.7" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.73%)</title><rect x="1165.7" y="707.0" width="8.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.7" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1167.1" y="691.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.1" y="702.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1167.1" y="675.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.1" y="686.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.12%)</title><rect x="1167.1" y="659.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.1" y="670.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.12%)</title><rect x="1167.1" y="643.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.1" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.12%)</title><rect x="1167.1" y="627.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.1" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.12%)</title><rect x="1167.1" y="611.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.1" y="622.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.12%)</title><rect x="1167.1" y="595.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.1" y="606.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1168.5" y="691.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1168.5" y="675.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1168.5" y="659.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.5" y="670.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.12%)</title><rect x="1168.5" y="643.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.5" y="654.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.36%)</title><rect x="1170.0" y="691.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1173.0" y="702.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (3 samples, 0.36%)</title><rect x="1170.0" y="675.0" width="4.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.0" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="659.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.0" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="643.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.0" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="627.0" width="4.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.0" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="611.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.0" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="595.0" width="4.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.0" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="579.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.0" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="563.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.0" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="547.0" width="4.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="531.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="515.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="499.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.36%)</title><rect x="1170.0" y="483.0" width="4.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.0" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.24%)</title><rect x="1170.0" y="467.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.0" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1170.0" y="451.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.0" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1170.0" y="435.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.0" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1170.0" y="419.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1170.0" y="403.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1173.0" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.12%)</title><rect x="1170.0" y="387.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.0" y="398.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1170.0" y="371.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.0" y="382.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1170.0" y="355.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.0" y="366.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1171.4" y="451.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="462.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1171.4" y="435.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.4" y="446.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.12%)</title><rect x="1172.8" y="467.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.8" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.12%)</title><rect x="1172.8" y="451.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.8" y="462.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.24%)</title><rect x="1174.2" y="723.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.24%)</title><rect x="1174.2" y="707.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.24%)</title><rect x="1174.2" y="691.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.2" y="702.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1174.2" y="675.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.2" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1175.7" y="675.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.7" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.12%)</title><rect x="1175.7" y="659.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.85%)</title><rect x="1177.1" y="739.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.85%)</title><rect x="1177.1" y="723.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.85%)</title><rect x="1177.1" y="707.0" width="10.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.85%)</title><rect x="1177.1" y="691.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.85%)</title><rect x="1177.1" y="675.0" width="10.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.85%)</title><rect x="1177.1" y="659.0" width="10.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1177.1" y="643.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1177.1" y="627.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.1" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1177.1" y="611.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1177.1" y="595.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1177.1" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.1" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1177.1" y="563.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1177.1" y="547.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1177.1" y="531.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1177.1" y="515.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.1" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.12%)</title><rect x="1177.1" y="499.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.73%)</title><rect x="1178.5" y="643.0" width="8.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.73%)</title><rect x="1178.5" y="627.0" width="8.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="638.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.12%)</title><rect x="1178.5" y="611.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_method_at_bci(int, bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1178.5" y="595.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.5" y="606.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1178.5" y="579.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.5" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1178.5" y="563.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.5" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1178.5" y="547.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.5" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1178.5" y="531.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.61%)</title><rect x="1180.0" y="611.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.61%)</title><rect x="1180.0" y="595.0" width="7.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.61%)</title><rect x="1180.0" y="579.0" width="7.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.61%)</title><rect x="1180.0" y="563.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.49%)</title><rect x="1180.0" y="547.0" width="5.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.49%)</title><rect x="1180.0" y="531.0" width="5.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.49%)</title><rect x="1180.0" y="515.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.49%)</title><rect x="1180.0" y="499.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.49%)</title><rect x="1180.0" y="483.0" width="5.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="494.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.12%)</title><rect x="1180.0" y="467.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.36%)</title><rect x="1181.4" y="467.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.36%)</title><rect x="1181.4" y="451.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.36%)</title><rect x="1181.4" y="435.0" width="4.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.12%)</title><rect x="1181.4" y="419.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.12%)</title><rect x="1181.4" y="403.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.12%)</title><rect x="1181.4" y="387.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.12%)</title><rect x="1181.4" y="371.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1182.8" y="419.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1182.8" y="403.0" width="2.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1182.8" y="387.0" width="2.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1182.8" y="371.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1182.8" y="355.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1182.8" y="339.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1182.8" y="323.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1182.8" y="307.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1182.8" y="291.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1182.8" y="275.0" width="2.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1182.8" y="259.0" width="2.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1182.8" y="243.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1182.8" y="227.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1182.8" y="211.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1182.8" y="195.0" width="2.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1182.8" y="179.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.12%)</title><rect x="1182.8" y="163.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.12%)</title><rect x="1182.8" y="147.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1182.8" y="131.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="142.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.12%)</title><rect x="1184.3" y="179.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="190.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.12%)</title><rect x="1184.3" y="163.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="174.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.12%)</title><rect x="1184.3" y="147.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="158.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.12%)</title><rect x="1184.3" y="131.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="142.0"></text>
</g>
<g>
<title>ConNode::make(Type const*) (1 samples, 0.12%)</title><rect x="1184.3" y="115.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="126.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.12%)</title><rect x="1184.3" y="99.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="547.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="531.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.7" y="515.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.7" y="499.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.7" y="483.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.7" y="467.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.7" y="451.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="435.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.7" y="419.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.7" y="403.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.7" y="387.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.7" y="371.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.7" y="355.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="339.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.7" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.7" y="323.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.7" y="307.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.7" y="291.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.7" y="275.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.7" y="259.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="243.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.7" y="227.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.7" y="211.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.7" y="195.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.7" y="179.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.7" y="163.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="147.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.12%)</title><rect x="1185.7" y="131.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.12%)</title><rect x="1185.7" y="115.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="126.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.12%)</title><rect x="1185.7" y="99.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="110.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.12%)</title><rect x="1185.7" y="83.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="94.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.12%)</title><rect x="1185.7" y="67.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="78.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.12%)</title><rect x="1185.7" y="51.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="62.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1185.7" y="35.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.1" y="771.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1187.1" y="755.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.12%)</title><rect x="1187.1" y="739.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.12%)</title><rect x="1187.1" y="723.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.12%)</title><rect x="1187.1" y="707.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.12%)</title><rect x="1187.1" y="691.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="702.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.12%)</title><rect x="1187.1" y="675.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="686.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.12%)</title><rect x="1187.1" y="659.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="670.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.12%)</title><rect x="1188.6" y="819.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.12%)</title><rect x="1188.6" y="803.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.12%)</title><rect x="1188.6" y="787.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.6" y="798.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.12%)</title><rect x="1188.6" y="771.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.6" y="782.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.12%)</title><rect x="1188.6" y="755.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.12%)</title><rect x="1188.6" y="739.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.12%)</title><rect x="1188.6" y="723.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="734.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.12%)</title><rect x="1188.6" y="707.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.6" y="718.0"></text>
</g>
</g>
</svg>
