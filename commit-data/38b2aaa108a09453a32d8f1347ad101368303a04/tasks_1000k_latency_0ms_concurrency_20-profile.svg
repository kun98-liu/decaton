<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="837"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="837"> </text>
<g id="frames">
<g>
<title>all (1,302 samples, 100.00%)</title><rect x="10.0" y="803.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="814.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="10.0" y="787.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.08%)</title><rect x="10.0" y="771.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (296 samples, 22.73%)</title><rect x="10.9" y="787.0" width="268.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.9" y="798.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (296 samples, 22.73%)</title><rect x="10.9" y="771.0" width="268.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.9" y="782.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (2 samples, 0.15%)</title><rect x="11.8" y="755.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (2 samples, 0.15%)</title><rect x="11.8" y="739.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (2 samples, 0.15%)</title><rect x="11.8" y="723.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.08%)</title><rect x="11.8" y="707.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.8" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.08%)</title><rect x="11.8" y="691.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.8" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.internalMemberName (1 samples, 0.08%)</title><rect x="11.8" y="675.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.8" y="686.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.08%)</title><rect x="11.8" y="659.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.08%)</title><rect x="12.7" y="707.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.08%)</title><rect x="12.7" y="691.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.08%)</title><rect x="12.7" y="675.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (293 samples, 22.50%)</title><rect x="13.6" y="755.0" width="265.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.6" y="766.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (7 samples, 0.54%)</title><rect x="13.6" y="739.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (7 samples, 0.54%)</title><rect x="13.6" y="723.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.6" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (7 samples, 0.54%)</title><rect x="13.6" y="707.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (7 samples, 0.54%)</title><rect x="13.6" y="691.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (7 samples, 0.54%)</title><rect x="13.6" y="675.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.6" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (6 samples, 0.46%)</title><rect x="13.6" y="659.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (6 samples, 0.46%)</title><rect x="13.6" y="643.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (5 samples, 0.38%)</title><rect x="13.6" y="627.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (5 samples, 0.38%)</title><rect x="13.6" y="611.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="622.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.15%)</title><rect x="15.4" y="595.0" width="1.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="18.4" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.08%)</title><rect x="17.3" y="595.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.3" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$334/545798027.test (1 samples, 0.08%)</title><rect x="17.3" y="579.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$72 (1 samples, 0.08%)</title><rect x="17.3" y="563.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pendingTasksCount (1 samples, 0.08%)</title><rect x="17.3" y="547.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.3" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.08%)</title><rect x="17.3" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="18.2" y="627.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="18.2" y="611.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="622.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="18.2" y="595.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="18.2" y="579.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="21.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.08%)</title><rect x="19.1" y="659.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (8 samples, 0.61%)</title><rect x="20.0" y="739.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (8 samples, 0.61%)</title><rect x="20.0" y="723.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.0" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (8 samples, 0.61%)</title><rect x="20.0" y="707.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.0" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.08%)</title><rect x="20.0" y="691.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="23.0" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.08%)</title><rect x="20.0" y="675.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="23.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$332/47972235.accept (7 samples, 0.54%)</title><rect x="20.9" y="691.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.54%)</title><rect x="20.9" y="675.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.54%)</title><rect x="20.9" y="659.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.9" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (7 samples, 0.54%)</title><rect x="20.9" y="643.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (223 samples, 17.13%)</title><rect x="27.2" y="739.0" width="202.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.2" y="750.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$331/1004332087.accept (214 samples, 16.44%)</title><rect x="28.1" y="723.0" width="194.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.1" y="734.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (214 samples, 16.44%)</title><rect x="28.1" y="707.0" width="194.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.1" y="718.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (184 samples, 14.13%)</title><rect x="29.9" y="691.0" width="166.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.9" y="702.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (184 samples, 14.13%)</title><rect x="29.9" y="675.0" width="166.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.9" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (184 samples, 14.13%)</title><rect x="29.9" y="659.0" width="166.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.9" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (184 samples, 14.13%)</title><rect x="29.9" y="643.0" width="166.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.9" y="654.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (184 samples, 14.13%)</title><rect x="29.9" y="627.0" width="166.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.9" y="638.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (184 samples, 14.13%)</title><rect x="29.9" y="611.0" width="166.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.9" y="622.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (127 samples, 9.75%)</title><rect x="75.3" y="595.0" width="115.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.3" y="606.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (30 samples, 2.30%)</title><rect x="76.2" y="579.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.2" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (30 samples, 2.30%)</title><rect x="76.2" y="563.0" width="27.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.2" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (30 samples, 2.30%)</title><rect x="76.2" y="547.0" width="27.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="79.2" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (13 samples, 1.00%)</title><rect x="103.3" y="579.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="106.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (13 samples, 1.00%)</title><rect x="103.3" y="563.0" width="11.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="106.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (5 samples, 0.38%)</title><rect x="108.8" y="547.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="111.8" y="558.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (5 samples, 0.38%)</title><rect x="108.8" y="531.0" width="4.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="111.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.15%)</title><rect x="113.3" y="547.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="116.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 6.37%)</title><rect x="115.1" y="579.0" width="75.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="118.1" y="590.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 6.37%)</title><rect x="115.1" y="563.0" width="75.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="118.1" y="574.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="115.1" y="547.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (82 samples, 6.30%)</title><rect x="116.0" y="547.0" width="74.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="119.0" y="558.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (82 samples, 6.30%)</title><rect x="116.0" y="531.0" width="74.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="119.0" y="542.0">java/uti..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (82 samples, 6.30%)</title><rect x="116.0" y="515.0" width="74.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="119.0" y="526.0">sun/misc..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="116.0" y="499.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="119.0" y="510.0"></text>
</g>
<g>
<title>Unsafe_Unpark (72 samples, 5.53%)</title><rect x="116.9" y="499.0" width="65.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="119.9" y="510.0">Unsafe_..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.31%)</title><rect x="117.8" y="483.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="120.8" y="494.0"></text>
</g>
<g>
<title>Parker::unpark() (2 samples, 0.15%)</title><rect x="121.5" y="483.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="124.5" y="494.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="123.3" y="483.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="126.3" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_signal (53 samples, 4.07%)</title><rect x="124.2" y="483.0" width="48.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="127.2" y="494.0">__pt..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.08%)</title><rect x="172.2" y="483.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="175.2" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 0.77%)</title><rect x="173.1" y="483.0" width="9.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="176.1" y="494.0"></text>
</g>
<g>
<title>__lll_unlock_wake (9 samples, 0.69%)</title><rect x="182.2" y="499.0" width="8.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="185.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.08%)</title><rect x="190.4" y="595.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.08%)</title><rect x="190.4" y="579.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="193.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.08%)</title><rect x="190.4" y="563.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.46%)</title><rect x="191.3" y="595.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="194.3" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.46%)</title><rect x="191.3" y="579.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="194.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="191.3" y="563.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="194.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.38%)</title><rect x="192.2" y="563.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="195.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.08%)</title><rect x="193.1" y="547.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="196.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.23%)</title><rect x="194.0" y="547.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (15 samples, 1.15%)</title><rect x="196.7" y="691.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="199.7" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (15 samples, 1.15%)</title><rect x="196.7" y="675.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="199.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.61%)</title><rect x="203.0" y="659.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.61%)</title><rect x="203.0" y="643.0" width="7.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="206.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.61%)</title><rect x="203.0" y="627.0" width="7.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="206.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.61%)</title><rect x="203.0" y="611.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 0.61%)</title><rect x="203.0" y="595.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="206.0" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (9 samples, 0.69%)</title><rect x="210.3" y="691.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="213.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.69%)</title><rect x="210.3" y="675.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.3" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.69%)</title><rect x="210.3" y="659.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.31%)</title><rect x="218.4" y="691.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.31%)</title><rect x="218.4" y="675.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.31%)</title><rect x="218.4" y="659.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="221.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.31%)</title><rect x="218.4" y="643.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.31%)</title><rect x="218.4" y="627.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="221.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.08%)</title><rect x="222.1" y="723.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="225.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.54%)</title><rect x="223.0" y="723.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.54%)</title><rect x="223.0" y="707.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="226.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.54%)</title><rect x="223.0" y="691.0" width="6.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.54%)</title><rect x="223.0" y="675.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.0" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (4 samples, 0.31%)</title><rect x="225.7" y="659.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.22%)</title><rect x="229.3" y="739.0" width="49.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="232.3" y="750.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (55 samples, 4.22%)</title><rect x="229.3" y="723.0" width="49.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.3" y="734.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (40 samples, 3.07%)</title><rect x="229.3" y="707.0" width="36.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="232.3" y="718.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (40 samples, 3.07%)</title><rect x="229.3" y="691.0" width="36.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="232.3" y="702.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (40 samples, 3.07%)</title><rect x="229.3" y="675.0" width="36.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.3" y="686.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (4 samples, 0.31%)</title><rect x="229.3" y="659.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (4 samples, 0.31%)</title><rect x="229.3" y="643.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="232.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 0.31%)</title><rect x="229.3" y="627.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 0.31%)</title><rect x="229.3" y="611.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="232.3" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (2 samples, 0.15%)</title><rect x="229.3" y="595.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="232.3" y="606.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (2 samples, 0.15%)</title><rect x="231.1" y="595.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="234.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (27 samples, 2.07%)</title><rect x="232.9" y="659.0" width="24.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.9" y="670.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 2.00%)</title><rect x="232.9" y="643.0" width="23.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="235.9" y="654.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.08%)</title><rect x="233.9" y="627.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.9" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (1 samples, 0.08%)</title><rect x="233.9" y="611.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.9" y="622.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (1 samples, 0.08%)</title><rect x="233.9" y="595.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.9" y="606.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.08%)</title><rect x="233.9" y="579.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.9" y="590.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.08%)</title><rect x="233.9" y="563.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (16 samples, 1.23%)</title><rect x="234.8" y="627.0" width="14.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeCloseRecordStream (8 samples, 0.61%)</title><rect x="234.8" y="611.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="237.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.38%)</title><rect x="242.0" y="611.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="245.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.38%)</title><rect x="242.0" y="595.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="245.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.38%)</title><rect x="242.0" y="579.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="245.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.38%)</title><rect x="242.0" y="563.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.38%)</title><rect x="242.0" y="547.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.38%)</title><rect x="242.0" y="531.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.38%)</title><rect x="242.0" y="515.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="246.5" y="611.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.08%)</title><rect x="246.5" y="595.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.15%)</title><rect x="247.5" y="611.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.15%)</title><rect x="247.5" y="595.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.15%)</title><rect x="247.5" y="579.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.15%)</title><rect x="247.5" y="563.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (2 samples, 0.15%)</title><rect x="247.5" y="547.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (2 samples, 0.15%)</title><rect x="247.5" y="531.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.5" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.08%)</title><rect x="248.4" y="515.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="251.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (8 samples, 0.61%)</title><rect x="249.3" y="627.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="252.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.08%)</title><rect x="249.3" y="611.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.54%)</title><rect x="250.2" y="611.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="253.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.54%)</title><rect x="250.2" y="595.0" width="6.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="253.2" y="606.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.54%)</title><rect x="250.2" y="579.0" width="6.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.2" y="590.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.08%)</title><rect x="255.6" y="563.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="258.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="256.5" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="259.5" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.15%)</title><rect x="257.4" y="659.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.15%)</title><rect x="257.4" y="643.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.08%)</title><rect x="257.4" y="627.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.4" y="638.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="257.4" y="611.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="260.4" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="257.4" y="595.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="260.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.08%)</title><rect x="258.3" y="627.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.08%)</title><rect x="258.3" y="611.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="261.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (5 samples, 0.38%)</title><rect x="259.2" y="659.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="262.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (5 samples, 0.38%)</title><rect x="259.2" y="643.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (3 samples, 0.23%)</title><rect x="259.2" y="627.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.23%)</title><rect x="259.2" y="611.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.08%)</title><rect x="261.0" y="595.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="262.0" y="627.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.15%)</title><rect x="262.0" y="611.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="265.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.08%)</title><rect x="262.9" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.9" y="606.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="262.9" y="579.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="265.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.08%)</title><rect x="263.8" y="659.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="266.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.08%)</title><rect x="264.7" y="659.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="267.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.08%)</title><rect x="264.7" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.08%)</title><rect x="264.7" y="627.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="267.7" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.08%)</title><rect x="264.7" y="611.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="267.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="264.7" y="595.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.08%)</title><rect x="264.7" y="579.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="267.7" y="590.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.08%)</title><rect x="264.7" y="563.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.23%)</title><rect x="265.6" y="707.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.08%)</title><rect x="265.6" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.08%)</title><rect x="265.6" y="675.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.08%)</title><rect x="265.6" y="659.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.08%)</title><rect x="265.6" y="643.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.08%)</title><rect x="265.6" y="627.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="268.6" y="638.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.08%)</title><rect x="265.6" y="611.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$304/2003082462.accept (1 samples, 0.08%)</title><rect x="265.6" y="595.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$collectPartitions$5 (1 samples, 0.08%)</title><rect x="265.6" y="579.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$303/1063403585.test (1 samples, 0.08%)</title><rect x="265.6" y="563.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$partitionsNeedingValidation$8 (1 samples, 0.08%)</title><rect x="265.6" y="547.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="268.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$700 (1 samples, 0.08%)</title><rect x="265.6" y="531.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="268.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.awaitingValidation (1 samples, 0.08%)</title><rect x="265.6" y="515.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.15%)</title><rect x="266.5" y="691.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.pollHeartbeat (1 samples, 0.08%)</title><rect x="266.5" y="675.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnready (1 samples, 0.08%)</title><rect x="267.4" y="675.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="270.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="267.4" y="659.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="270.4" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.08%)</title><rect x="268.3" y="707.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.08%)</title><rect x="268.3" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="271.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.08%)</title><rect x="268.3" y="675.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.08%)</title><rect x="268.3" y="659.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.08%)</title><rect x="268.3" y="643.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.3" y="654.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="268.3" y="627.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="271.3" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.31%)</title><rect x="269.2" y="707.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.23%)</title><rect x="269.2" y="691.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="272.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.23%)</title><rect x="269.2" y="675.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.15%)</title><rect x="270.1" y="659.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.08%)</title><rect x="270.1" y="643.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.08%)</title><rect x="270.1" y="627.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.08%)</title><rect x="270.1" y="611.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.08%)</title><rect x="270.1" y="595.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.08%)</title><rect x="270.1" y="579.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.1" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.08%)</title><rect x="270.1" y="563.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="273.1" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.08%)</title><rect x="270.1" y="547.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="273.1" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.08%)</title><rect x="270.1" y="531.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.1" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="270.1" y="515.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.1" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="270.1" y="499.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.1" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="270.1" y="483.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="273.1" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.08%)</title><rect x="270.1" y="467.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.08%)</title><rect x="271.0" y="643.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.08%)</title><rect x="271.0" y="627.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.08%)</title><rect x="271.0" y="611.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="271.0" y="595.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.08%)</title><rect x="271.0" y="579.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.08%)</title><rect x="271.0" y="563.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.08%)</title><rect x="271.0" y="547.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor$RecordingLevel.shouldRecord (1 samples, 0.08%)</title><rect x="271.0" y="531.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.08%)</title><rect x="271.0" y="515.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.08%)</title><rect x="271.9" y="691.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.08%)</title><rect x="271.9" y="675.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.08%)</title><rect x="271.9" y="659.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.08%)</title><rect x="271.9" y="643.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.08%)</title><rect x="271.9" y="627.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="274.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.08%)</title><rect x="272.8" y="707.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="275.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.08%)</title><rect x="272.8" y="691.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.08%)</title><rect x="272.8" y="675.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.next (1 samples, 0.08%)</title><rect x="272.8" y="659.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.8" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (4 samples, 0.31%)</title><rect x="273.7" y="707.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.23%)</title><rect x="273.7" y="691.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="276.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (3 samples, 0.23%)</title><rect x="273.7" y="675.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="276.7" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.08%)</title><rect x="276.5" y="691.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="279.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.15%)</title><rect x="277.4" y="707.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="280.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.15%)</title><rect x="277.4" y="691.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="280.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.15%)</title><rect x="277.4" y="675.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="280.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (2 samples, 0.15%)</title><rect x="277.4" y="659.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (901 samples, 69.20%)</title><rect x="279.2" y="787.0" width="816.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="282.2" y="798.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (901 samples, 69.20%)</title><rect x="279.2" y="771.0" width="816.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.2" y="782.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (901 samples, 69.20%)</title><rect x="279.2" y="755.0" width="816.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.2" y="766.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/1615989682.run (605 samples, 46.47%)</title><rect x="280.1" y="739.0" width="548.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.1" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/16..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (605 samples, 46.47%)</title><rect x="280.1" y="723.0" width="548.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="283.1" y="734.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (605 samples, 46.47%)</title><rect x="280.1" y="707.0" width="548.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="283.1" y="718.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (605 samples, 46.47%)</title><rect x="280.1" y="691.0" width="548.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.1" y="702.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.release (1 samples, 0.08%)</title><rect x="296.4" y="675.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (12 samples, 0.92%)</title><rect x="297.3" y="675.0" width="10.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="300.3" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (12 samples, 0.92%)</title><rect x="297.3" y="659.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 0.92%)</title><rect x="297.3" y="643.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="300.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="297.3" y="627.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.3" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (11 samples, 0.84%)</title><rect x="298.2" y="627.0" width="10.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.2" y="638.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.46%)</title><rect x="302.7" y="611.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="305.7" y="622.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.46%)</title><rect x="302.7" y="595.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="305.7" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (48 samples, 3.69%)</title><rect x="308.2" y="675.0" width="43.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="311.2" y="686.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (34 samples, 2.61%)</title><rect x="320.9" y="659.0" width="30.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="323.9" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (34 samples, 2.61%)</title><rect x="320.9" y="643.0" width="30.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.9" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (34 samples, 2.61%)</title><rect x="320.9" y="627.0" width="30.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.9" y="638.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="320.9" y="611.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="323.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (33 samples, 2.53%)</title><rect x="321.8" y="611.0" width="29.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.8" y="622.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$371/67285371.accept (33 samples, 2.53%)</title><rect x="321.8" y="595.0" width="29.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.8" y="606.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (33 samples, 2.53%)</title><rect x="321.8" y="579.0" width="29.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="324.8" y="590.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (33 samples, 2.53%)</title><rect x="321.8" y="563.0" width="29.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="324.8" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (31 samples, 2.38%)</title><rect x="323.6" y="547.0" width="28.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.6" y="558.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$353/404661302.accept (1 samples, 0.08%)</title><rect x="325.4" y="531.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="328.4" y="542.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="326.3" y="531.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="329.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (27 samples, 2.07%)</title><rect x="327.2" y="531.0" width="24.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.2" y="542.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.31%)</title><rect x="327.2" y="515.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.31%)</title><rect x="327.2" y="499.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="330.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 1.77%)</title><rect x="330.8" y="515.0" width="20.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="333.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (179 samples, 13.75%)</title><rect x="351.7" y="675.0" width="162.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.7" y="686.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (179 samples, 13.75%)</title><rect x="351.7" y="659.0" width="162.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.7" y="670.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (179 samples, 13.75%)</title><rect x="351.7" y="643.0" width="162.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.7" y="654.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (179 samples, 13.75%)</title><rect x="351.7" y="627.0" width="162.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="354.7" y="638.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (179 samples, 13.75%)</title><rect x="351.7" y="611.0" width="162.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.7" y="622.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (179 samples, 13.75%)</title><rect x="351.7" y="595.0" width="162.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="354.7" y="606.0">com/fasterxml/jackson..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (57 samples, 4.38%)</title><rect x="351.7" y="579.0" width="51.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="354.7" y="590.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (26 samples, 2.00%)</title><rect x="351.7" y="563.0" width="23.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.7" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (24 samples, 1.84%)</title><rect x="351.7" y="547.0" width="21.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.7" y="558.0">c..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.15%)</title><rect x="362.5" y="531.0" width="1.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="365.5" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.54%)</title><rect x="364.4" y="531.0" width="6.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="367.4" y="542.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="366.2" y="515.0" width="4.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="369.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="370.7" y="531.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="373.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.15%)</title><rect x="371.6" y="531.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="374.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="371.6" y="515.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="374.6" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.15%)</title><rect x="371.6" y="499.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="374.6" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="371.6" y="483.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="374.6" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.15%)</title><rect x="371.6" y="467.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="374.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.&lt;init&gt; (2 samples, 0.15%)</title><rect x="373.4" y="547.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.08%)</title><rect x="373.4" y="531.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.4" y="542.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="374.3" y="531.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="377.3" y="542.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.08%)</title><rect x="374.3" y="515.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="377.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (31 samples, 2.38%)</title><rect x="375.2" y="563.0" width="28.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="378.2" y="574.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.&lt;init&gt; (5 samples, 0.38%)</title><rect x="375.2" y="547.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="378.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.08%)</title><rect x="378.9" y="531.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (26 samples, 2.00%)</title><rect x="379.8" y="547.0" width="23.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="382.8" y="558.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="381.6" y="531.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="384.6" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.23%)</title><rect x="382.5" y="531.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="385.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (3 samples, 0.23%)</title><rect x="382.5" y="515.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="385.5" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (11 samples, 0.84%)</title><rect x="385.2" y="531.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="388.2" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.15%)</title><rect x="385.2" y="515.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.2" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.15%)</title><rect x="385.2" y="499.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="388.2" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.15%)</title><rect x="385.2" y="483.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="388.2" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.15%)</title><rect x="385.2" y="467.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="388.2" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="385.2" y="451.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="388.2" y="462.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.08%)</title><rect x="386.1" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="389.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (9 samples, 0.69%)</title><rect x="387.0" y="515.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (9 samples, 0.69%)</title><rect x="387.0" y="499.0" width="8.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 0.69%)</title><rect x="395.2" y="531.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (1 samples, 0.08%)</title><rect x="402.4" y="515.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="405.4" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="402.4" y="499.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="405.4" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="402.4" y="483.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="405.4" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="402.4" y="467.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="405.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="402.4" y="451.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="405.4" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="402.4" y="435.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="405.4" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="402.4" y="419.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="405.4" y="430.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="402.4" y="403.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="405.4" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.08%)</title><rect x="402.4" y="387.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="405.4" y="398.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.08%)</title><rect x="402.4" y="371.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="405.4" y="382.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="402.4" y="355.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="405.4" y="366.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_bytes_to_copy(HeapRegion*) (1 samples, 0.08%)</title><rect x="402.4" y="339.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="405.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (111 samples, 8.53%)</title><rect x="403.3" y="579.0" width="100.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="590.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (5 samples, 0.38%)</title><rect x="403.3" y="563.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (5 samples, 0.38%)</title><rect x="403.3" y="547.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (4 samples, 0.31%)</title><rect x="404.2" y="531.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="407.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (4 samples, 0.31%)</title><rect x="404.2" y="515.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="407.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (9 samples, 0.69%)</title><rect x="407.9" y="563.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.69%)</title><rect x="407.9" y="547.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.9" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.spread (4 samples, 0.31%)</title><rect x="410.6" y="531.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="413.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (2 samples, 0.15%)</title><rect x="414.2" y="531.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="417.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.08%)</title><rect x="416.0" y="563.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.08%)</title><rect x="416.0" y="547.0" width="12.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="419.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (9 samples, 0.69%)</title><rect x="416.9" y="531.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="419.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.23%)</title><rect x="422.4" y="515.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="425.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (4 samples, 0.31%)</title><rect x="425.1" y="531.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="428.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.31%)</title><rect x="428.7" y="563.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="431.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.31%)</title><rect x="428.7" y="547.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (4 samples, 0.31%)</title><rect x="428.7" y="531.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="431.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (4 samples, 0.31%)</title><rect x="428.7" y="515.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.23%)</title><rect x="429.6" y="499.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="432.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (79 samples, 6.07%)</title><rect x="432.3" y="563.0" width="71.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="435.3" y="574.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.useRootWrapping (2 samples, 0.15%)</title><rect x="432.3" y="547.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="435.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (77 samples, 5.91%)</title><rect x="434.1" y="547.0" width="69.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="437.1" y="558.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.isExpectedStartObjectToken (2 samples, 0.15%)</title><rect x="436.0" y="531.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="439.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.38%)</title><rect x="437.8" y="531.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.8" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.31%)</title><rect x="445.9" y="515.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.31%)</title><rect x="445.9" y="499.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="448.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.31%)</title><rect x="445.9" y="483.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="448.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.15%)</title><rect x="449.6" y="515.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="452.6" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.15%)</title><rect x="449.6" y="499.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="452.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (3 samples, 0.23%)</title><rect x="451.4" y="515.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.4" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (55 samples, 4.22%)</title><rect x="454.1" y="531.0" width="49.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="457.1" y="542.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.08%)</title><rect x="454.1" y="515.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (54 samples, 4.15%)</title><rect x="455.0" y="515.0" width="48.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.0" y="526.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (54 samples, 4.15%)</title><rect x="455.0" y="499.0" width="48.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.0" y="510.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 0.84%)</title><rect x="456.8" y="483.0" width="10.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.31%)</title><rect x="461.3" y="467.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="464.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.31%)</title><rect x="461.3" y="451.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="464.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.31%)</title><rect x="461.3" y="435.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.15%)</title><rect x="463.1" y="419.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="466.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.08%)</title><rect x="465.0" y="467.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.08%)</title><rect x="465.0" y="451.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="468.0" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.08%)</title><rect x="465.9" y="467.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="468.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (16 samples, 1.23%)</title><rect x="466.8" y="483.0" width="14.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (12 samples, 0.92%)</title><rect x="470.4" y="467.0" width="10.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="473.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (12 samples, 0.92%)</title><rect x="470.4" y="451.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (12 samples, 0.92%)</title><rect x="470.4" y="435.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="473.4" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (12 samples, 0.92%)</title><rect x="470.4" y="419.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.08%)</title><rect x="481.3" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="484.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (14 samples, 1.08%)</title><rect x="482.2" y="483.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="485.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (14 samples, 1.08%)</title><rect x="482.2" y="467.0" width="12.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="485.2" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (14 samples, 1.08%)</title><rect x="482.2" y="451.0" width="12.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="485.2" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (14 samples, 1.08%)</title><rect x="482.2" y="435.0" width="12.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="485.2" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (14 samples, 1.08%)</title><rect x="482.2" y="419.0" width="12.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="485.2" y="430.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (11 samples, 0.84%)</title><rect x="484.0" y="403.0" width="10.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="487.0" y="414.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (8 samples, 0.61%)</title><rect x="486.7" y="387.0" width="7.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.7" y="398.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.08%)</title><rect x="494.0" y="403.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (8 samples, 0.61%)</title><rect x="494.9" y="483.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="497.9" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.61%)</title><rect x="494.9" y="467.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="497.9" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.61%)</title><rect x="494.9" y="451.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.08%)</title><rect x="501.2" y="435.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="504.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (2 samples, 0.15%)</title><rect x="502.1" y="483.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="505.1" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 0.84%)</title><rect x="503.9" y="579.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="506.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (11 samples, 0.84%)</title><rect x="503.9" y="563.0" width="10.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="506.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (11 samples, 0.84%)</title><rect x="503.9" y="547.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="506.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (3 samples, 0.23%)</title><rect x="505.7" y="531.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.08%)</title><rect x="508.5" y="531.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="511.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.38%)</title><rect x="509.4" y="531.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="512.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.38%)</title><rect x="509.4" y="515.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="512.4" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (342 samples, 26.27%)</title><rect x="513.9" y="675.0" width="310.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.9" y="686.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.54%)</title><rect x="522.1" y="659.0" width="6.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="525.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.46%)</title><rect x="523.0" y="643.0" width="5.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="526.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (58 samples, 4.45%)</title><rect x="528.4" y="659.0" width="52.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="531.4" y="670.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.08%)</title><rect x="528.4" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="531.4" y="654.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (57 samples, 4.38%)</title><rect x="529.3" y="643.0" width="51.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.3" y="654.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (54 samples, 4.15%)</title><rect x="532.0" y="627.0" width="49.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="535.0" y="638.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.61%)</title><rect x="534.7" y="611.0" width="7.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="537.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.61%)</title><rect x="534.7" y="595.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="537.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.61%)</title><rect x="534.7" y="579.0" width="7.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="537.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.61%)</title><rect x="534.7" y="563.0" width="7.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="537.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.15%)</title><rect x="542.0" y="611.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.15%)</title><rect x="542.0" y="595.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="545.0" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.15%)</title><rect x="542.0" y="579.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.0" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (41 samples, 3.15%)</title><rect x="543.8" y="611.0" width="37.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="546.8" y="622.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (34 samples, 2.61%)</title><rect x="550.2" y="595.0" width="30.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="553.2" y="606.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.77%)</title><rect x="571.9" y="579.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="574.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (9 samples, 0.69%)</title><rect x="581.0" y="659.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="584.0" y="670.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (9 samples, 0.69%)</title><rect x="581.0" y="643.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="584.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (175 samples, 13.44%)</title><rect x="589.1" y="659.0" width="158.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="592.1" y="670.0">com/linecorp/decaton..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="589.1" y="643.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.1" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="589.1" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="592.1" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="589.1" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="592.1" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (165 samples, 12.67%)</title><rect x="590.0" y="643.0" width="149.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="593.0" y="654.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (46 samples, 3.53%)</title><rect x="604.5" y="627.0" width="41.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="607.5" y="638.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="604.5" y="611.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="607.5" y="622.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.08%)</title><rect x="604.5" y="595.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="607.5" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="604.5" y="579.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="607.5" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="604.5" y="563.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="607.5" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="604.5" y="547.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="607.5" y="558.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (43 samples, 3.30%)</title><rect x="605.4" y="611.0" width="39.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.4" y="622.0">jav..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (24 samples, 1.84%)</title><rect x="613.6" y="595.0" width="21.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.6" y="606.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.46%)</title><rect x="620.8" y="579.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.8" y="590.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.46%)</title><rect x="620.8" y="563.0" width="5.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="623.8" y="574.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.46%)</title><rect x="620.8" y="547.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.46%)</title><rect x="620.8" y="531.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="623.8" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.08%)</title><rect x="620.8" y="515.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="623.8" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.08%)</title><rect x="620.8" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.8" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.08%)</title><rect x="621.8" y="515.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="624.8" y="526.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="621.8" y="499.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="624.8" y="510.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="621.8" y="483.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="624.8" y="494.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="621.8" y="467.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="624.8" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.31%)</title><rect x="622.7" y="515.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="625.7" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="624.5" y="499.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="627.5" y="510.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.08%)</title><rect x="624.5" y="483.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="627.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.08%)</title><rect x="625.4" y="499.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="628.4" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.31%)</title><rect x="626.3" y="579.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="629.3" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (6 samples, 0.46%)</title><rect x="629.9" y="579.0" width="5.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="632.9" y="590.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (10 samples, 0.77%)</title><rect x="635.3" y="595.0" width="9.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="638.3" y="606.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.15%)</title><rect x="644.4" y="611.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="647.4" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="644.4" y="595.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="647.4" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="644.4" y="579.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="647.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="644.4" y="563.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="647.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.08%)</title><rect x="645.3" y="595.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.3" y="606.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.08%)</title><rect x="645.3" y="579.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.3" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="645.3" y="563.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="645.3" y="547.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="648.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="645.3" y="531.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="648.3" y="542.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (14 samples, 1.08%)</title><rect x="646.2" y="627.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="649.2" y="638.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (8 samples, 0.61%)</title><rect x="646.2" y="611.0" width="7.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="649.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (8 samples, 0.61%)</title><rect x="646.2" y="595.0" width="7.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="649.2" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.46%)</title><rect x="653.5" y="611.0" width="5.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="656.5" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.46%)</title><rect x="653.5" y="595.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="656.5" y="606.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.15%)</title><rect x="658.9" y="627.0" width="1.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="661.9" y="638.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.08%)</title><rect x="660.7" y="627.0" width="0.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="663.7" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (86 samples, 6.61%)</title><rect x="661.6" y="627.0" width="78.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="664.6" y="638.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 6.53%)</title><rect x="662.5" y="611.0" width="77.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.5" y="622.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.15%)</title><rect x="662.5" y="595.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.15%)</title><rect x="662.5" y="579.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.15%)</title><rect x="662.5" y="563.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.15%)</title><rect x="662.5" y="547.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.23%)</title><rect x="664.3" y="595.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.23%)</title><rect x="664.3" y="579.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="667.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.23%)</title><rect x="664.3" y="563.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="667.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.15%)</title><rect x="665.3" y="547.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="668.3" y="558.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (80 samples, 6.14%)</title><rect x="667.1" y="595.0" width="72.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="670.1" y="606.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (76 samples, 5.84%)</title><rect x="670.7" y="579.0" width="68.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="673.7" y="590.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (31 samples, 2.38%)</title><rect x="711.5" y="563.0" width="28.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="714.5" y="574.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.08%)</title><rect x="728.7" y="547.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="731.7" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 0.77%)</title><rect x="729.6" y="547.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.6" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="737.8" y="531.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="740.8" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="737.8" y="515.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="740.8" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="737.8" y="499.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="740.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="737.8" y="483.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="740.8" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="737.8" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="740.8" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.08%)</title><rect x="737.8" y="451.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="740.8" y="462.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.08%)</title><rect x="737.8" y="435.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="740.8" y="446.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.08%)</title><rect x="737.8" y="419.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="740.8" y="430.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.08%)</title><rect x="738.7" y="547.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="741.7" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.69%)</title><rect x="739.6" y="643.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.6" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.69%)</title><rect x="739.6" y="627.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="742.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.69%)</title><rect x="739.6" y="611.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="742.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.69%)</title><rect x="739.6" y="595.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="742.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="743.2" y="579.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="746.2" y="590.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.08%)</title><rect x="743.2" y="563.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="746.2" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.23%)</title><rect x="744.1" y="579.0" width="2.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="747.1" y="590.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.23%)</title><rect x="744.1" y="563.0" width="2.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="747.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.08%)</title><rect x="746.8" y="579.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="749.8" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (67 samples, 5.15%)</title><rect x="747.7" y="659.0" width="60.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="750.7" y="670.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (67 samples, 5.15%)</title><rect x="747.7" y="643.0" width="60.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.7" y="654.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$273/740188340.process (37 samples, 2.84%)</title><rect x="751.4" y="627.0" width="33.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.4" y="638.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (37 samples, 2.84%)</title><rect x="751.4" y="611.0" width="33.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="754.4" y="622.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (30 samples, 2.30%)</title><rect x="753.2" y="595.0" width="27.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="756.2" y="606.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.23%)</title><rect x="763.1" y="579.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="766.1" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 0.23%)</title><rect x="763.1" y="563.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.1" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.15%)</title><rect x="764.0" y="547.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="767.0" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.15%)</title><rect x="764.0" y="531.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="767.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (12 samples, 0.92%)</title><rect x="765.9" y="579.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="768.9" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.54%)</title><rect x="770.4" y="563.0" width="6.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="773.4" y="574.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.54%)</title><rect x="770.4" y="547.0" width="6.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="773.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.08%)</title><rect x="776.7" y="579.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.7" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.08%)</title><rect x="776.7" y="563.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.7" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.08%)</title><rect x="776.7" y="547.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.incrementAndGet (3 samples, 0.23%)</title><rect x="777.6" y="579.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (5 samples, 0.38%)</title><rect x="780.4" y="595.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="783.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.38%)</title><rect x="780.4" y="579.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="783.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.38%)</title><rect x="780.4" y="563.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.4" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.38%)</title><rect x="780.4" y="547.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.38%)</title><rect x="780.4" y="531.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (5 samples, 0.38%)</title><rect x="780.4" y="515.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.4" y="526.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.31%)</title><rect x="780.4" y="499.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="783.4" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.23%)</title><rect x="780.4" y="483.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="783.4" y="494.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.08%)</title><rect x="780.4" y="467.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="783.4" y="478.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.15%)</title><rect x="781.3" y="467.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="784.3" y="478.0"></text>
</g>
<g>
<title>RuntimeStub::caller_must_gc_arguments(JavaThread*) const (1 samples, 0.08%)</title><rect x="781.3" y="451.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.3" y="462.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="782.2" y="451.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="785.2" y="462.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.08%)</title><rect x="782.2" y="435.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.2" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.08%)</title><rect x="783.1" y="483.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="786.1" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="783.1" y="467.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="786.1" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.08%)</title><rect x="783.1" y="451.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="786.1" y="462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.08%)</title><rect x="784.0" y="499.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="787.0" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.08%)</title><rect x="784.0" y="483.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="787.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.08%)</title><rect x="784.9" y="627.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="787.9" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.15%)</title><rect x="785.8" y="627.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.15%)</title><rect x="785.8" y="611.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="788.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.15%)</title><rect x="785.8" y="595.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.8" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.38%)</title><rect x="787.6" y="627.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="790.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.38%)</title><rect x="787.6" y="611.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="790.6" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="792.1" y="627.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.1" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.15%)</title><rect x="792.1" y="611.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="795.1" y="622.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.08%)</title><rect x="793.0" y="595.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="796.0" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.15%)</title><rect x="793.9" y="627.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.9" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.15%)</title><rect x="793.9" y="611.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="796.9" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="795.8" y="627.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="798.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.08%)</title><rect x="795.8" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="798.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (8 samples, 0.61%)</title><rect x="796.7" y="627.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="799.7" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.15%)</title><rect x="802.1" y="611.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="805.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.38%)</title><rect x="803.9" y="627.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="806.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.38%)</title><rect x="803.9" y="611.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="806.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.38%)</title><rect x="803.9" y="595.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.08%)</title><rect x="803.9" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.9" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.08%)</title><rect x="803.9" y="563.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="806.9" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.08%)</title><rect x="803.9" y="547.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="806.9" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.08%)</title><rect x="803.9" y="531.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.9" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.08%)</title><rect x="803.9" y="515.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.31%)</title><rect x="804.8" y="579.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.31%)</title><rect x="804.8" y="563.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.31%)</title><rect x="804.8" y="547.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="807.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$364/1319855399.accept (1 samples, 0.08%)</title><rect x="807.5" y="531.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.31%)</title><rect x="808.4" y="659.0" width="15.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 1.31%)</title><rect x="808.4" y="643.0" width="15.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="811.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (17 samples, 1.31%)</title><rect x="808.4" y="627.0" width="15.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.46%)</title><rect x="808.4" y="611.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.38%)</title><rect x="808.4" y="595.0" width="4.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="811.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.38%)</title><rect x="808.4" y="579.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$367/1143578583.accept (2 samples, 0.15%)</title><rect x="810.3" y="563.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="813.3" y="574.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.08%)</title><rect x="812.1" y="563.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="815.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.08%)</title><rect x="813.0" y="595.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="816.0" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 0.84%)</title><rect x="813.9" y="611.0" width="10.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.9" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$367/1143578583.accept (11 samples, 0.84%)</title><rect x="813.9" y="595.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (11 samples, 0.84%)</title><rect x="813.9" y="579.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="816.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (11 samples, 0.84%)</title><rect x="813.9" y="563.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.9" y="574.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (11 samples, 0.84%)</title><rect x="813.9" y="547.0" width="10.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.9" y="558.0"></text>
</g>
<g>
<title>java/time/Duration.create (11 samples, 0.84%)</title><rect x="813.9" y="531.0" width="10.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="816.9" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.54%)</title><rect x="817.5" y="515.0" width="6.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="820.5" y="526.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.46%)</title><rect x="818.4" y="499.0" width="5.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="821.4" y="510.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.38%)</title><rect x="823.9" y="675.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="826.9" y="686.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.38%)</title><rect x="823.9" y="659.0" width="4.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="826.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.46%)</title><rect x="828.4" y="739.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="831.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.46%)</title><rect x="828.4" y="723.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="831.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.46%)</title><rect x="828.4" y="707.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="831.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.46%)</title><rect x="828.4" y="691.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="831.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.08%)</title><rect x="832.9" y="675.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (289 samples, 22.20%)</title><rect x="833.8" y="739.0" width="261.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.8" y="750.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (286 samples, 21.97%)</title><rect x="834.7" y="723.0" width="259.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="837.7" y="734.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (252 samples, 19.35%)</title><rect x="841.1" y="707.0" width="228.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="844.1" y="718.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.08%)</title><rect x="855.6" y="691.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="858.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.08%)</title><rect x="855.6" y="675.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (12 samples, 0.92%)</title><rect x="856.5" y="691.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="859.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.77%)</title><rect x="867.4" y="691.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.77%)</title><rect x="867.4" y="675.0" width="9.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.77%)</title><rect x="867.4" y="659.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.77%)</title><rect x="867.4" y="643.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="870.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (212 samples, 16.28%)</title><rect x="876.4" y="691.0" width="192.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="879.4" y="702.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (212 samples, 16.28%)</title><rect x="876.4" y="675.0" width="192.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.4" y="686.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.08%)</title><rect x="888.2" y="659.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.2" y="670.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="889.1" y="659.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="892.1" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.08%)</title><rect x="890.0" y="659.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="893.0" y="670.0"></text>
</g>
<g>
<title>Unsafe_Park (191 samples, 14.67%)</title><rect x="890.9" y="659.0" width="173.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="893.9" y="670.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (6 samples, 0.46%)</title><rect x="897.3" y="643.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="900.3" y="654.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.08%)</title><rect x="902.7" y="643.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="905.7" y="654.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 1.69%)</title><rect x="903.6" y="643.0" width="19.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="906.6" y="654.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (7 samples, 0.54%)</title><rect x="914.5" y="627.0" width="6.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="917.5" y="638.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.15%)</title><rect x="915.4" y="611.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="918.4" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.15%)</title><rect x="917.2" y="611.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.2" y="622.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.15%)</title><rect x="919.0" y="611.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="922.0" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.08%)</title><rect x="920.8" y="627.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="923.8" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.15%)</title><rect x="921.7" y="627.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="924.7" y="638.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="923.5" y="643.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="926.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (5 samples, 0.38%)</title><rect x="924.5" y="643.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="927.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (5 samples, 0.38%)</title><rect x="929.0" y="643.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="932.0" y="654.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.08%)</title><rect x="933.5" y="643.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="936.5" y="654.0"></text>
</g>
<g>
<title>__lll_lock_wait (3 samples, 0.23%)</title><rect x="934.4" y="643.0" width="2.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="937.4" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (49 samples, 3.76%)</title><rect x="937.1" y="643.0" width="44.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="940.1" y="654.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (71 samples, 5.45%)</title><rect x="981.6" y="643.0" width="64.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="984.6" y="654.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.61%)</title><rect x="1045.9" y="643.0" width="7.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1048.9" y="654.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.15%)</title><rect x="1053.1" y="643.0" width="1.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1056.1" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1055.0" y="643.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1058.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.31%)</title><rect x="1055.9" y="643.0" width="3.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1058.9" y="654.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.31%)</title><rect x="1059.5" y="643.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1062.5" y="654.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.08%)</title><rect x="1063.1" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.1" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.08%)</title><rect x="1064.0" y="659.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1067.0" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.08%)</title><rect x="1064.9" y="659.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1067.9" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.23%)</title><rect x="1065.8" y="659.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1068.8" y="670.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.08%)</title><rect x="1068.6" y="691.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1071.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (27 samples, 2.07%)</title><rect x="1069.5" y="707.0" width="24.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1072.5" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (27 samples, 2.07%)</title><rect x="1069.5" y="691.0" width="24.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1072.5" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (27 samples, 2.07%)</title><rect x="1069.5" y="675.0" width="24.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1072.5" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (27 samples, 2.07%)</title><rect x="1069.5" y="659.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1072.5" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.08%)</title><rect x="1093.0" y="643.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1096.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.08%)</title><rect x="1093.9" y="723.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1096.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.08%)</title><rect x="1094.8" y="723.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1097.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.15%)</title><rect x="1095.7" y="787.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1098.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.08%)</title><rect x="1095.7" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1098.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.08%)</title><rect x="1095.7" y="755.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1098.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.08%)</title><rect x="1095.7" y="739.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1098.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.08%)</title><rect x="1095.7" y="723.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1098.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.08%)</title><rect x="1095.7" y="707.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1098.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="1095.7" y="691.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1098.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="1095.7" y="675.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1098.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.08%)</title><rect x="1096.7" y="771.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1099.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.08%)</title><rect x="1096.7" y="755.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1099.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.08%)</title><rect x="1096.7" y="739.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1099.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.08%)</title><rect x="1096.7" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1099.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.08%)</title><rect x="1096.7" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1099.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.08%)</title><rect x="1096.7" y="691.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1099.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1096.7" y="675.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1099.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.08%)</title><rect x="1096.7" y="659.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1099.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sessionHandler (1 samples, 0.08%)</title><rect x="1096.7" y="643.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1099.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.08%)</title><rect x="1096.7" y="627.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1099.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.08%)</title><rect x="1096.7" y="611.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1099.7" y="622.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.08%)</title><rect x="1096.7" y="595.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1099.7" y="606.0"></text>
</g>
<g>
<title>start_thread (102 samples, 7.83%)</title><rect x="1097.6" y="787.0" width="92.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1100.6" y="798.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (102 samples, 7.83%)</title><rect x="1097.6" y="771.0" width="92.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1100.6" y="782.0">java_start(..</text>
</g>
<g>
<title>GangWorker::loop() (32 samples, 2.46%)</title><rect x="1097.6" y="755.0" width="29.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.6" y="766.0">Ga..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (12 samples, 0.92%)</title><rect x="1097.6" y="739.0" width="10.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.6" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (12 samples, 0.92%)</title><rect x="1097.6" y="723.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.6" y="734.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (3 samples, 0.23%)</title><rect x="1097.6" y="707.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.6" y="718.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.69%)</title><rect x="1100.3" y="707.0" width="8.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1103.3" y="718.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (20 samples, 1.54%)</title><rect x="1108.4" y="739.0" width="18.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1111.4" y="750.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.31%)</title><rect x="1108.4" y="723.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.4" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.08%)</title><rect x="1108.4" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1111.4" y="718.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.08%)</title><rect x="1109.3" y="707.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1112.3" y="718.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.15%)</title><rect x="1110.2" y="707.0" width="1.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1113.2" y="718.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (5 samples, 0.38%)</title><rect x="1112.1" y="723.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.1" y="734.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int) (1 samples, 0.08%)</title><rect x="1112.1" y="707.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.1" y="718.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.08%)</title><rect x="1112.1" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.1" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.23%)</title><rect x="1113.0" y="707.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.0" y="718.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.08%)</title><rect x="1113.0" y="691.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1116.0" y="702.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1113.0" y="675.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.0" y="686.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="1113.9" y="691.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.15%)</title><rect x="1113.9" y="675.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1116.9" y="686.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.08%)</title><rect x="1113.9" y="659.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1116.9" y="670.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.08%)</title><rect x="1113.9" y="643.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1116.9" y="654.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.08%)</title><rect x="1113.9" y="627.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1116.9" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.08%)</title><rect x="1113.9" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1116.9" y="622.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1114.8" y="659.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.8" y="670.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.08%)</title><rect x="1114.8" y="643.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.8" y="654.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.08%)</title><rect x="1114.8" y="627.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.8" y="638.0"></text>
</g>
<g>
<title>CompressedReadStream::read_int_mb(int) (1 samples, 0.08%)</title><rect x="1114.8" y="611.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.8" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.08%)</title><rect x="1115.7" y="707.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.7" y="718.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.08%)</title><rect x="1115.7" y="691.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1118.7" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (11 samples, 0.84%)</title><rect x="1116.6" y="723.0" width="10.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.6" y="734.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (11 samples, 0.84%)</title><rect x="1116.6" y="707.0" width="10.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.6" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.69%)</title><rect x="1117.5" y="691.0" width="8.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1120.5" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.69%)</title><rect x="1117.5" y="675.0" width="8.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.5" y="686.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.61%)</title><rect x="1118.4" y="659.0" width="7.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.4" y="670.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.61%)</title><rect x="1118.4" y="643.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.4" y="654.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (4 samples, 0.31%)</title><rect x="1122.0" y="627.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.0" y="638.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.08%)</title><rect x="1123.8" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.8" y="622.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.08%)</title><rect x="1124.7" y="611.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1127.7" y="622.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.08%)</title><rect x="1125.7" y="691.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (1 samples, 0.08%)</title><rect x="1125.7" y="675.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.7" y="686.0"></text>
</g>
<g>
<title>ScanRSClosure::doHeapRegion(HeapRegion*) (1 samples, 0.08%)</title><rect x="1125.7" y="659.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.7" y="670.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.08%)</title><rect x="1125.7" y="643.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.7" y="654.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.08%)</title><rect x="1125.7" y="627.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.7" y="638.0"></text>
</g>
<g>
<title>JavaThread::run() (67 samples, 5.15%)</title><rect x="1126.6" y="755.0" width="60.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1129.6" y="766.0">JavaTh..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (67 samples, 5.15%)</title><rect x="1126.6" y="739.0" width="60.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.6" y="750.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (67 samples, 5.15%)</title><rect x="1126.6" y="723.0" width="60.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.6" y="734.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 5.15%)</title><rect x="1126.6" y="707.0" width="60.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.6" y="718.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (64 samples, 4.92%)</title><rect x="1126.6" y="691.0" width="58.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.6" y="702.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (64 samples, 4.92%)</title><rect x="1126.6" y="675.0" width="58.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.6" y="686.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 2.53%)</title><rect x="1126.6" y="659.0" width="29.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.6" y="670.0">Co..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.15%)</title><rect x="1126.6" y="643.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.6" y="654.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.08%)</title><rect x="1126.6" y="627.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1129.6" y="638.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.08%)</title><rect x="1127.5" y="627.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="638.0"></text>
</g>
<g>
<title>CodeBuffer::initialize(int, int) (1 samples, 0.08%)</title><rect x="1127.5" y="611.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="622.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.08%)</title><rect x="1127.5" y="595.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="606.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.08%)</title><rect x="1127.5" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="590.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.08%)</title><rect x="1127.5" y="563.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="574.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.15%)</title><rect x="1128.4" y="643.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.4" y="654.0"></text>
</g>
<g>
<title>HandlerImpl::emit_deopt_handler(CodeBuffer&amp;) (1 samples, 0.08%)</title><rect x="1128.4" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.4" y="638.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.08%)</title><rect x="1129.3" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.3" y="638.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.31%)</title><rect x="1130.2" y="643.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1133.2" y="654.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.08%)</title><rect x="1130.2" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.2" y="638.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.23%)</title><rect x="1131.1" y="627.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.1" y="638.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.15%)</title><rect x="1132.0" y="611.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.0" y="622.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.15%)</title><rect x="1132.0" y="595.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.0" y="606.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.15%)</title><rect x="1132.0" y="579.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.0" y="590.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1132.0" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.0" y="574.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.08%)</title><rect x="1132.0" y="547.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.0" y="558.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.08%)</title><rect x="1132.9" y="563.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.9" y="574.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.08%)</title><rect x="1132.9" y="547.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.9" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.15%)</title><rect x="1133.8" y="643.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1136.8" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.15%)</title><rect x="1133.8" y="627.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.8" y="638.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (2 samples, 0.15%)</title><rect x="1133.8" y="611.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.8" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.08%)</title><rect x="1135.6" y="643.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (22 samples, 1.69%)</title><rect x="1136.5" y="643.0" width="20.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.5" y="654.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.08%)</title><rect x="1136.5" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.5" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.31%)</title><rect x="1137.4" y="627.0" width="3.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.54%)</title><rect x="1141.1" y="627.0" width="6.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="638.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.08%)</title><rect x="1146.5" y="611.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.5" y="622.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.08%)</title><rect x="1147.4" y="627.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.08%)</title><rect x="1148.3" y="627.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.3" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.08%)</title><rect x="1149.2" y="627.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.2" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::possibly_merge_multidef(Node*, unsigned int, Block*, GrowableArray&lt;PhaseChaitin::RegDefUse&gt;&amp;) (1 samples, 0.08%)</title><rect x="1149.2" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1152.2" y="622.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.08%)</title><rect x="1150.1" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1153.1" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.08%)</title><rect x="1150.1" y="611.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.1" y="622.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.08%)</title><rect x="1150.1" y="595.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.1" y="606.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.08%)</title><rect x="1151.0" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.0" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1151.0" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.0" y="622.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.15%)</title><rect x="1151.9" y="627.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="638.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1152.8" y="611.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.8" y="622.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.23%)</title><rect x="1153.7" y="627.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.7" y="638.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.08%)</title><rect x="1154.7" y="611.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.7" y="622.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.08%)</title><rect x="1155.6" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="622.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.08%)</title><rect x="1155.6" y="595.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="606.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 1.84%)</title><rect x="1156.5" y="659.0" width="21.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.5" y="670.0">C..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.08%)</title><rect x="1156.5" y="643.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.5" y="654.0"></text>
</g>
<g>
<title>TypeNarrowOop::remove_speculative() const (1 samples, 0.08%)</title><rect x="1156.5" y="627.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.5" y="638.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.08%)</title><rect x="1156.5" y="611.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.5" y="622.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.08%)</title><rect x="1156.5" y="595.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.5" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.08%)</title><rect x="1156.5" y="579.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.5" y="590.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1156.5" y="563.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.5" y="574.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const (1 samples, 0.08%)</title><rect x="1156.5" y="547.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.5" y="558.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.08%)</title><rect x="1157.4" y="643.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 1.23%)</title><rect x="1158.3" y="643.0" width="14.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1161.3" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::beautify_loops(PhaseIdealLoop*) (1 samples, 0.08%)</title><rect x="1158.3" y="627.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1161.3" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.23%)</title><rect x="1159.2" y="627.0" width="2.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.2" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1161.9" y="627.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.9" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.08%)</title><rect x="1161.9" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.61%)</title><rect x="1162.8" y="627.0" width="7.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1165.8" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (7 samples, 0.54%)</title><rect x="1163.7" y="611.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.7" y="622.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1164.6" y="595.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.6" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.38%)</title><rect x="1165.5" y="595.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.5" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.08%)</title><rect x="1169.2" y="579.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.2" y="590.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.08%)</title><rect x="1170.1" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.1" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.08%)</title><rect x="1171.0" y="627.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.0" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.08%)</title><rect x="1171.9" y="627.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.08%)</title><rect x="1171.9" y="611.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.9" y="622.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1171.9" y="595.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.9" y="606.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.08%)</title><rect x="1171.9" y="579.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.9" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (6 samples, 0.46%)</title><rect x="1172.8" y="643.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="654.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 0.46%)</title><rect x="1172.8" y="627.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.8" y="638.0"></text>
</g>
<g>
<title>AddPNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1172.8" y="611.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.8" y="622.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1173.7" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="622.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1173.7" y="595.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.7" y="606.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.08%)</title><rect x="1173.7" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.7" y="590.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.08%)</title><rect x="1173.7" y="563.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.7" y="574.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.08%)</title><rect x="1174.6" y="611.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.6" y="622.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.08%)</title><rect x="1174.6" y="595.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.6" y="606.0"></text>
</g>
<g>
<title>ConNode::hash() const (1 samples, 0.08%)</title><rect x="1174.6" y="579.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="590.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.08%)</title><rect x="1175.5" y="611.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>PhiNode::Opcode() const (1 samples, 0.08%)</title><rect x="1175.5" y="595.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1176.4" y="611.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="622.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.08%)</title><rect x="1176.4" y="595.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="606.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1177.3" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="622.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1177.3" y="595.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.54%)</title><rect x="1178.2" y="659.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.54%)</title><rect x="1178.2" y="643.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.54%)</title><rect x="1178.2" y="627.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.54%)</title><rect x="1178.2" y="611.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.54%)</title><rect x="1178.2" y="595.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.54%)</title><rect x="1178.2" y="579.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.2" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.31%)</title><rect x="1178.2" y="563.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.31%)</title><rect x="1178.2" y="547.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.31%)</title><rect x="1178.2" y="531.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.31%)</title><rect x="1178.2" y="515.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.08%)</title><rect x="1178.2" y="499.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.2" y="510.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.08%)</title><rect x="1178.2" y="483.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.2" y="494.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.08%)</title><rect x="1178.2" y="467.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.2" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.08%)</title><rect x="1178.2" y="451.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.2" y="462.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.08%)</title><rect x="1178.2" y="435.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.2" y="446.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.08%)</title><rect x="1178.2" y="419.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.2" y="430.0"></text>
</g>
<g>
<title>MemNode::memory_size() const (1 samples, 0.08%)</title><rect x="1178.2" y="403.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1179.1" y="499.0" width="2.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1179.1" y="483.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="494.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1179.1" y="467.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1179.1" y="451.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.15%)</title><rect x="1179.1" y="435.0" width="1.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.15%)</title><rect x="1179.1" y="419.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.15%)</title><rect x="1179.1" y="403.0" width="1.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.08%)</title><rect x="1179.1" y="387.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.08%)</title><rect x="1179.1" y="371.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.08%)</title><rect x="1179.1" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.08%)</title><rect x="1179.1" y="339.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>Node::add_req_batch(Node*, unsigned int) (1 samples, 0.08%)</title><rect x="1179.1" y="323.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="334.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.08%)</title><rect x="1180.0" y="387.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.0" y="398.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.08%)</title><rect x="1180.0" y="371.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="382.0"></text>
</g>
<g>
<title>PhiNode::size_of() const (1 samples, 0.08%)</title><rect x="1180.0" y="355.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.9" y="467.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1180.9" y="451.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1180.9" y="435.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1180.9" y="419.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1180.9" y="403.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1180.9" y="387.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1180.9" y="371.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.08%)</title><rect x="1180.9" y="355.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="366.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.9" y="339.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="350.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.08%)</title><rect x="1180.9" y="323.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="334.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.08%)</title><rect x="1180.9" y="307.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="318.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.08%)</title><rect x="1180.9" y="291.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.9" y="302.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.08%)</title><rect x="1180.9" y="275.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="286.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol_or_null() (1 samples, 0.08%)</title><rect x="1180.9" y="259.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.9" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1181.8" y="563.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1181.8" y="547.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1181.8" y="531.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1181.8" y="515.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1181.8" y="499.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1181.8" y="483.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1181.8" y="467.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1181.8" y="451.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1181.8" y="435.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1181.8" y="419.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1181.8" y="403.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1181.8" y="387.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1181.8" y="371.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.23%)</title><rect x="1181.8" y="355.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.23%)</title><rect x="1181.8" y="339.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.23%)</title><rect x="1181.8" y="323.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.23%)</title><rect x="1181.8" y="307.0" width="2.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.23%)</title><rect x="1181.8" y="291.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.23%)</title><rect x="1181.8" y="275.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.15%)</title><rect x="1181.8" y="259.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.15%)</title><rect x="1181.8" y="243.0" width="1.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.8" y="227.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.8" y="211.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.8" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.8" y="179.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.8" y="163.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.8" y="147.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.08%)</title><rect x="1181.8" y="131.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.08%)</title><rect x="1181.8" y="115.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.08%)</title><rect x="1181.8" y="99.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.08%)</title><rect x="1181.8" y="83.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1181.8" y="67.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.08%)</title><rect x="1181.8" y="51.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="62.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.08%)</title><rect x="1181.8" y="35.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.08%)</title><rect x="1182.7" y="227.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.7" y="238.0"></text>
</g>
<g>
<title>CompileBroker::maybe_block() (1 samples, 0.08%)</title><rect x="1182.7" y="211.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.7" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.7" y="259.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.7" y="270.0"></text>
</g>
<g>
<title>UncommonTrapCallGenerator::generate(JVMState*) (1 samples, 0.08%)</title><rect x="1183.7" y="243.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.7" y="254.0"></text>
</g>
<g>
<title>GraphKit::transfer_exceptions_into_jvms() (1 samples, 0.08%)</title><rect x="1183.7" y="227.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.7" y="238.0"></text>
</g>
<g>
<title>GraphKit::set_all_memory(Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="211.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.7" y="222.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="195.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.7" y="206.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.08%)</title><rect x="1183.7" y="179.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.7" y="190.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.08%)</title><rect x="1183.7" y="163.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.7" y="174.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 0.23%)</title><rect x="1184.6" y="691.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.6" y="702.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 0.23%)</title><rect x="1184.6" y="675.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="686.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 0.23%)</title><rect x="1184.6" y="659.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.6" y="670.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 0.23%)</title><rect x="1184.6" y="643.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="654.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.08%)</title><rect x="1184.6" y="627.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.6" y="638.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.08%)</title><rect x="1184.6" y="611.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="622.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.08%)</title><rect x="1184.6" y="595.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.6" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.08%)</title><rect x="1184.6" y="579.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.6" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.08%)</title><rect x="1185.5" y="627.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="638.0"></text>
</g>
<g>
<title>Compilation::emit_code_epilog(LIR_Assembler*) (1 samples, 0.08%)</title><rect x="1185.5" y="611.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="622.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (1 samples, 0.08%)</title><rect x="1185.5" y="595.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.5" y="606.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.08%)</title><rect x="1185.5" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="590.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.08%)</title><rect x="1185.5" y="563.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="574.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.08%)</title><rect x="1185.5" y="547.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="558.0"></text>
</g>
<g>
<title>IRScopeDebugInfo::record_debug_info(DebugInformationRecorder*, int, bool, bool) (1 samples, 0.08%)</title><rect x="1185.5" y="531.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="542.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.08%)</title><rect x="1185.5" y="515.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.5" y="526.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.08%)</title><rect x="1185.5" y="499.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.08%)</title><rect x="1186.4" y="627.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="638.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.08%)</title><rect x="1186.4" y="611.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="622.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.08%)</title><rect x="1186.4" y="595.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="606.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.08%)</title><rect x="1186.4" y="579.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="590.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.08%)</title><rect x="1186.4" y="563.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="574.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.08%)</title><rect x="1186.4" y="547.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.4" y="558.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.23%)</title><rect x="1187.3" y="755.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.3" y="766.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.23%)</title><rect x="1187.3" y="739.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="750.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.08%)</title><rect x="1187.3" y="723.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.08%)</title><rect x="1187.3" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="718.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.08%)</title><rect x="1187.3" y="691.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="702.0"></text>
</g>
<g>
<title>CodeCache::first_nmethod() (1 samples, 0.08%)</title><rect x="1187.3" y="675.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="686.0"></text>
</g>
<g>
<title>CodeHeap::next_free(HeapBlock*) const (1 samples, 0.08%)</title><rect x="1187.3" y="659.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="670.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (2 samples, 0.15%)</title><rect x="1188.2" y="723.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.2" y="734.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.15%)</title><rect x="1188.2" y="707.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="718.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (2 samples, 0.15%)</title><rect x="1188.2" y="691.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.2" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.15%)</title><rect x="1188.2" y="675.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.2" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1188.2" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.2" y="670.0"></text>
</g>
<g>
<title>nmethod::oops_do_marking_epilogue() (1 samples, 0.08%)</title><rect x="1188.2" y="643.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.2" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.08%)</title><rect x="1189.1" y="659.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.1" y="670.0"></text>
</g>
<g>
<title>SurvRateGroup::record_surviving_words(int, unsigned long) (1 samples, 0.08%)</title><rect x="1189.1" y="643.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1192.1" y="654.0"></text>
</g>
</g>
</svg>
