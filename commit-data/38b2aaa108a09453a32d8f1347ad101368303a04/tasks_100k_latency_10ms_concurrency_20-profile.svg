<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (313 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (24 samples, 7.67%)</title><rect x="10.0" y="963.0" width="90.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (24 samples, 7.67%)</title><rect x="10.0" y="947.0" width="90.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 7.67%)</title><rect x="10.0" y="931.0" width="90.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.32%)</title><rect x="10.0" y="915.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.32%)</title><rect x="10.0" y="899.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.32%)</title><rect x="10.0" y="883.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.32%)</title><rect x="10.0" y="867.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.32%)</title><rect x="10.0" y="851.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.32%)</title><rect x="10.0" y="835.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.32%)</title><rect x="10.0" y="819.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.32%)</title><rect x="10.0" y="803.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.32%)</title><rect x="10.0" y="787.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.32%)</title><rect x="10.0" y="771.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$334/1946208546.test (1 samples, 0.32%)</title><rect x="10.0" y="755.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$72 (1 samples, 0.32%)</title><rect x="10.0" y="739.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pendingTasksCount (1 samples, 0.32%)</title><rect x="10.0" y="723.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.96%)</title><rect x="13.8" y="915.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.96%)</title><rect x="13.8" y="899.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.96%)</title><rect x="13.8" y="883.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$332/322219096.accept (3 samples, 0.96%)</title><rect x="13.8" y="867.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.96%)</title><rect x="13.8" y="851.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.96%)</title><rect x="13.8" y="835.0" width="11.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.96%)</title><rect x="13.8" y="819.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.8" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.60%)</title><rect x="25.1" y="915.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.1" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$331/829715934.accept (5 samples, 1.60%)</title><rect x="25.1" y="899.0" width="18.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.1" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.60%)</title><rect x="25.1" y="883.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 0.64%)</title><rect x="25.1" y="867.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.1" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.64%)</title><rect x="25.1" y="851.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.64%)</title><rect x="25.1" y="835.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.64%)</title><rect x="25.1" y="819.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.64%)</title><rect x="25.1" y="803.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.32%)</title><rect x="28.8" y="787.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.64%)</title><rect x="32.6" y="867.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="35.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.64%)</title><rect x="32.6" y="851.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="35.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.32%)</title><rect x="36.4" y="835.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.32%)</title><rect x="36.4" y="819.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.32%)</title><rect x="36.4" y="803.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="39.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="36.4" y="787.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="39.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="36.4" y="771.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.32%)</title><rect x="40.2" y="867.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.32%)</title><rect x="40.2" y="851.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="43.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.32%)</title><rect x="40.2" y="835.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="43.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="40.2" y="819.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="40.2" y="803.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.79%)</title><rect x="43.9" y="915.0" width="56.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="46.9" y="926.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (15 samples, 4.79%)</title><rect x="43.9" y="899.0" width="56.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.9" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (12 samples, 3.83%)</title><rect x="43.9" y="883.0" width="45.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.9" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 2.24%)</title><rect x="43.9" y="867.0" width="26.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.9" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (7 samples, 2.24%)</title><rect x="43.9" y="851.0" width="26.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="46.9" y="862.0">o..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.32%)</title><rect x="43.9" y="835.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.32%)</title><rect x="43.9" y="819.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="46.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.32%)</title><rect x="43.9" y="803.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="46.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 1.60%)</title><rect x="47.7" y="835.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.64%)</title><rect x="47.7" y="819.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (2 samples, 0.64%)</title><rect x="47.7" y="803.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (2 samples, 0.64%)</title><rect x="47.7" y="787.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (2 samples, 0.64%)</title><rect x="47.7" y="771.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitResponse.parse (2 samples, 0.64%)</title><rect x="47.7" y="755.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.&lt;init&gt; (2 samples, 0.64%)</title><rect x="47.7" y="739.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData.read (2 samples, 0.64%)</title><rect x="47.7" y="723.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.&lt;init&gt; (2 samples, 0.64%)</title><rect x="47.7" y="707.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitResponseData$OffsetCommitResponseTopic.read (2 samples, 0.64%)</title><rect x="47.7" y="691.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/Readable.readString (2 samples, 0.64%)</title><rect x="47.7" y="675.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.7" y="686.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.32%)</title><rect x="47.7" y="659.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="50.7" y="670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.32%)</title><rect x="47.7" y="643.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="50.7" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.32%)</title><rect x="47.7" y="627.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="50.7" y="638.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.32%)</title><rect x="51.5" y="659.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="54.5" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.32%)</title><rect x="55.2" y="819.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.32%)</title><rect x="55.2" y="803.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.32%)</title><rect x="55.2" y="787.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="58.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.32%)</title><rect x="55.2" y="771.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.32%)</title><rect x="55.2" y="755.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="58.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.32%)</title><rect x="55.2" y="739.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.32%)</title><rect x="55.2" y="723.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="58.2" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.32%)</title><rect x="55.2" y="707.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="58.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.32%)</title><rect x="59.0" y="819.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.32%)</title><rect x="59.0" y="803.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="62.8" y="819.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.32%)</title><rect x="62.8" y="803.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.8" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.32%)</title><rect x="62.8" y="787.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.8" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.32%)</title><rect x="62.8" y="771.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.8" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.32%)</title><rect x="62.8" y="755.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.8" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.32%)</title><rect x="62.8" y="739.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.8" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.32%)</title><rect x="62.8" y="723.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.32%)</title><rect x="66.5" y="835.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="69.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.32%)</title><rect x="66.5" y="819.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.32%)</title><rect x="66.5" y="803.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.32%)</title><rect x="66.5" y="787.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="69.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.32%)</title><rect x="66.5" y="771.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.32%)</title><rect x="66.5" y="755.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.debug (1 samples, 0.32%)</title><rect x="66.5" y="739.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="69.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 1.60%)</title><rect x="70.3" y="867.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 1.28%)</title><rect x="70.3" y="851.0" width="15.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="73.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 0.64%)</title><rect x="70.3" y="835.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.64%)</title><rect x="70.3" y="819.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.32%)</title><rect x="70.3" y="803.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="73.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.32%)</title><rect x="70.3" y="787.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.32%)</title><rect x="70.3" y="771.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="73.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.32%)</title><rect x="70.3" y="755.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.32%)</title><rect x="70.3" y="739.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="73.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.32%)</title><rect x="70.3" y="723.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="73.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (1 samples, 0.32%)</title><rect x="70.3" y="707.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (1 samples, 0.32%)</title><rect x="70.3" y="691.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.32%)</title><rect x="74.1" y="803.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="77.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.32%)</title><rect x="74.1" y="787.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.32%)</title><rect x="74.1" y="771.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="77.1" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.32%)</title><rect x="74.1" y="755.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="77.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.32%)</title><rect x="77.9" y="835.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="80.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.32%)</title><rect x="77.9" y="819.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.32%)</title><rect x="77.9" y="803.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="80.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.32%)</title><rect x="77.9" y="787.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="80.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.32%)</title><rect x="81.6" y="835.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.32%)</title><rect x="81.6" y="819.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.32%)</title><rect x="81.6" y="803.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.32%)</title><rect x="81.6" y="787.0" width="3.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.32%)</title><rect x="81.6" y="771.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="84.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.32%)</title><rect x="81.6" y="755.0" width="3.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="84.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.32%)</title><rect x="81.6" y="739.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.32%)</title><rect x="85.4" y="851.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.32%)</title><rect x="85.4" y="835.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="88.4" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.32%)</title><rect x="85.4" y="819.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="88.4" y="830.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="85.4" y="803.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="88.4" y="814.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="85.4" y="787.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="88.4" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.32%)</title><rect x="85.4" y="771.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="88.4" y="782.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.32%)</title><rect x="85.4" y="755.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="88.4" y="766.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(methodHandle&amp;, KlassHandle&amp;, Bytecodes::Code, constantPoolHandle, int, Thread*) (1 samples, 0.32%)</title><rect x="85.4" y="739.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="88.4" y="750.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.32%)</title><rect x="85.4" y="723.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="88.4" y="734.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.32%)</title><rect x="85.4" y="707.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="88.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.32%)</title><rect x="89.2" y="883.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.32%)</title><rect x="89.2" y="867.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.32%)</title><rect x="89.2" y="851.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.64%)</title><rect x="92.9" y="883.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="95.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="92.9" y="867.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="92.9" y="851.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="95.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.32%)</title><rect x="92.9" y="835.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="95.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.32%)</title><rect x="92.9" y="819.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.32%)</title><rect x="96.7" y="867.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.32%)</title><rect x="96.7" y="851.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.32%)</title><rect x="96.7" y="835.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.32%)</title><rect x="96.7" y="819.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="99.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.32%)</title><rect x="96.7" y="803.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.32%)</title><rect x="96.7" y="787.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="99.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.32%)</title><rect x="96.7" y="771.0" width="3.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="99.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.build (1 samples, 0.32%)</title><rect x="96.7" y="755.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.flushPendingSend (1 samples, 0.32%)</title><rect x="96.7" y="739.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.7" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.32%)</title><rect x="96.7" y="723.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="99.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.32%)</title><rect x="96.7" y="707.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Thread.run (247 samples, 78.91%)</title><rect x="100.5" y="963.0" width="931.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.5" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (247 samples, 78.91%)</title><rect x="100.5" y="947.0" width="931.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="103.5" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (247 samples, 78.91%)</title><rect x="100.5" y="931.0" width="931.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.5" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (1 samples, 0.32%)</title><rect x="119.3" y="915.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="122.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/512995663.run (227 samples, 72.52%)</title><rect x="123.1" y="915.0" width="855.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.1" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/512995663.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (227 samples, 72.52%)</title><rect x="123.1" y="899.0" width="855.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="126.1" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (227 samples, 72.52%)</title><rect x="123.1" y="883.0" width="855.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="126.1" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (227 samples, 72.52%)</title><rect x="123.1" y="867.0" width="855.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="126.1" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (19 samples, 6.07%)</title><rect x="141.9" y="851.0" width="71.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="144.9" y="862.0">com/line..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (1 samples, 0.32%)</title><rect x="157.0" y="835.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="160.0" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.32%)</title><rect x="157.0" y="819.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="160.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$367/1866802916.get$Lambda (1 samples, 0.32%)</title><rect x="157.0" y="803.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.0" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="157.0" y="787.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="160.0" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="157.0" y="771.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="160.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="157.0" y="755.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="160.0" y="766.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab_event(KlassHandle, unsigned long, unsigned long) (1 samples, 0.32%)</title><rect x="157.0" y="739.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="160.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.47%)</title><rect x="160.8" y="835.0" width="52.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.8" y="846.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.47%)</title><rect x="160.8" y="819.0" width="52.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.8" y="830.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 4.47%)</title><rect x="160.8" y="803.0" width="52.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="163.8" y="814.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="160.8" y="787.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="160.8" y="771.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="163.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 4.15%)</title><rect x="164.6" y="787.0" width="49.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="167.6" y="798.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$367/1866802916.accept (13 samples, 4.15%)</title><rect x="164.6" y="771.0" width="49.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.6" y="782.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (13 samples, 4.15%)</title><rect x="164.6" y="755.0" width="49.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="167.6" y="766.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (13 samples, 4.15%)</title><rect x="164.6" y="739.0" width="49.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="167.6" y="750.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (13 samples, 4.15%)</title><rect x="164.6" y="723.0" width="49.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.6" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (13 samples, 4.15%)</title><rect x="164.6" y="707.0" width="49.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="167.6" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 1.92%)</title><rect x="164.6" y="691.0" width="22.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.6" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 1.92%)</title><rect x="164.6" y="675.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.6" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$354/1262266005.accept (2 samples, 0.64%)</title><rect x="175.9" y="659.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$353/696760435.accept (1 samples, 0.32%)</title><rect x="183.4" y="659.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.24%)</title><rect x="187.2" y="691.0" width="26.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.2" y="702.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (39 samples, 12.46%)</title><rect x="213.6" y="851.0" width="147.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="216.6" y="862.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (39 samples, 12.46%)</title><rect x="213.6" y="835.0" width="147.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="216.6" y="846.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (39 samples, 12.46%)</title><rect x="213.6" y="819.0" width="147.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="216.6" y="830.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 12.46%)</title><rect x="213.6" y="803.0" width="147.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.6" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (39 samples, 12.46%)</title><rect x="213.6" y="787.0" width="147.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.6" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (39 samples, 12.46%)</title><rect x="213.6" y="771.0" width="147.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="216.6" y="782.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (18 samples, 5.75%)</title><rect x="213.6" y="755.0" width="67.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="216.6" y="766.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.28%)</title><rect x="213.6" y="739.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.28%)</title><rect x="213.6" y="723.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="216.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (2 samples, 0.64%)</title><rect x="213.6" y="707.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.64%)</title><rect x="221.1" y="707.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.1" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.64%)</title><rect x="221.1" y="691.0" width="7.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="224.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 4.47%)</title><rect x="228.7" y="739.0" width="52.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.7" y="750.0">com/f..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="228.7" y="723.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="231.7" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="228.7" y="707.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="231.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="228.7" y="691.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="231.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 4.15%)</title><rect x="232.4" y="723.0" width="49.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.4" y="734.0">com/f..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="236.2" y="707.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="239.2" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.32%)</title><rect x="236.2" y="691.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="239.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.32%)</title><rect x="236.2" y="675.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="239.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.32%)</title><rect x="236.2" y="659.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="239.2" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.32%)</title><rect x="236.2" y="643.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="239.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 1.28%)</title><rect x="240.0" y="707.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.ensureLoaded (3 samples, 0.96%)</title><rect x="243.7" y="691.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="246.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 1.60%)</title><rect x="255.0" y="707.0" width="18.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.32%)</title><rect x="258.8" y="691.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="261.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.32%)</title><rect x="258.8" y="675.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="261.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.32%)</title><rect x="258.8" y="659.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="261.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (3 samples, 0.96%)</title><rect x="262.6" y="691.0" width="11.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.96%)</title><rect x="262.6" y="675.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.64%)</title><rect x="273.9" y="707.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 6.07%)</title><rect x="281.4" y="755.0" width="71.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.4" y="766.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.32%)</title><rect x="281.4" y="739.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._releaseBuffers (1 samples, 0.32%)</title><rect x="281.4" y="723.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._releaseBuffers (1 samples, 0.32%)</title><rect x="281.4" y="707.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="284.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.releaseBuffers (1 samples, 0.32%)</title><rect x="281.4" y="691.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="284.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.32%)</title><rect x="285.2" y="739.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.32%)</title><rect x="285.2" y="723.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.2" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="285.2" y="707.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="288.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.32%)</title><rect x="289.0" y="739.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="289.0" y="723.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.32%)</title><rect x="289.0" y="707.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.32%)</title><rect x="289.0" y="691.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.32%)</title><rect x="289.0" y="675.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.64%)</title><rect x="292.7" y="739.0" width="7.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.64%)</title><rect x="292.7" y="723.0" width="7.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="295.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.64%)</title><rect x="292.7" y="707.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.64%)</title><rect x="292.7" y="691.0" width="7.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="295.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (2 samples, 0.64%)</title><rect x="292.7" y="675.0" width="7.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="295.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (14 samples, 4.47%)</title><rect x="300.3" y="739.0" width="52.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.3" y="750.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (14 samples, 4.47%)</title><rect x="300.3" y="723.0" width="52.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="303.3" y="734.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 2.56%)</title><rect x="304.1" y="707.0" width="30.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.1" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.96%)</title><rect x="304.1" y="691.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.96%)</title><rect x="304.1" y="675.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="307.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.96%)</title><rect x="304.1" y="659.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="307.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.96%)</title><rect x="304.1" y="643.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="307.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.96%)</title><rect x="304.1" y="627.0" width="11.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="307.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 1.28%)</title><rect x="315.4" y="691.0" width="15.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.32%)</title><rect x="315.4" y="675.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.32%)</title><rect x="315.4" y="659.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.96%)</title><rect x="319.1" y="675.0" width="11.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.96%)</title><rect x="319.1" y="659.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.96%)</title><rect x="319.1" y="643.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="322.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.96%)</title><rect x="319.1" y="627.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.32%)</title><rect x="330.4" y="691.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.32%)</title><rect x="330.4" y="675.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="333.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 1.60%)</title><rect x="334.2" y="707.0" width="18.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="337.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 1.60%)</title><rect x="334.2" y="691.0" width="18.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="337.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 1.28%)</title><rect x="338.0" y="675.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="341.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.32%)</title><rect x="341.8" y="659.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.32%)</title><rect x="341.8" y="643.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.32%)</title><rect x="341.8" y="627.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="344.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.32%)</title><rect x="341.8" y="611.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="344.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.32%)</title><rect x="341.8" y="595.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.32%)</title><rect x="345.5" y="659.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.32%)</title><rect x="345.5" y="643.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="348.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.32%)</title><rect x="345.5" y="627.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="348.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.32%)</title><rect x="345.5" y="611.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="348.5" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.32%)</title><rect x="345.5" y="595.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.5" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.32%)</title><rect x="345.5" y="579.0" width="3.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.5" y="590.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.32%)</title><rect x="345.5" y="563.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.5" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.32%)</title><rect x="349.3" y="659.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="352.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="349.3" y="643.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="349.3" y="627.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="352.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.64%)</title><rect x="353.1" y="755.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="356.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.64%)</title><rect x="353.1" y="739.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="356.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.64%)</title><rect x="353.1" y="723.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="356.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.64%)</title><rect x="353.1" y="707.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.32%)</title><rect x="356.8" y="691.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="359.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (164 samples, 52.40%)</title><rect x="360.6" y="851.0" width="618.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="363.6" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (29 samples, 9.27%)</title><rect x="379.5" y="835.0" width="109.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="382.5" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 8.31%)</title><rect x="390.8" y="819.0" width="98.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="393.8" y="830.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 7.67%)</title><rect x="398.3" y="803.0" width="90.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.3" y="814.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.64%)</title><rect x="398.3" y="787.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="401.3" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.64%)</title><rect x="398.3" y="771.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.3" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.64%)</title><rect x="398.3" y="755.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.64%)</title><rect x="398.3" y="739.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="401.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.96%)</title><rect x="405.8" y="787.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.8" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.64%)</title><rect x="409.6" y="771.0" width="7.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="412.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.64%)</title><rect x="409.6" y="755.0" width="7.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="412.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (18 samples, 5.75%)</title><rect x="417.2" y="787.0" width="67.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="420.2" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 4.79%)</title><rect x="428.5" y="771.0" width="56.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.5" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 4.79%)</title><rect x="428.5" y="755.0" width="56.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="431.5" y="766.0">java/u..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.32%)</title><rect x="481.2" y="739.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="484.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.32%)</title><rect x="485.0" y="787.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="488.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="488.8" y="835.0" width="3.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="491.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.32%)</title><rect x="488.8" y="819.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (39 samples, 12.46%)</title><rect x="492.6" y="835.0" width="147.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="495.6" y="846.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (38 samples, 12.14%)</title><rect x="492.6" y="819.0" width="143.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="495.6" y="830.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (20 samples, 6.39%)</title><rect x="503.9" y="803.0" width="75.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="506.9" y="814.0">com/line..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 2.56%)</title><rect x="541.6" y="787.0" width="30.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="544.6" y="798.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 2.56%)</title><rect x="541.6" y="771.0" width="30.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.6" y="782.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 2.56%)</title><rect x="541.6" y="755.0" width="30.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="544.6" y="766.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (8 samples, 2.56%)</title><rect x="541.6" y="739.0" width="30.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="544.6" y="750.0">ja..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 2.56%)</title><rect x="541.6" y="723.0" width="30.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="544.6" y="734.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 2.24%)</title><rect x="541.6" y="707.0" width="26.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="544.6" y="718.0">O..</text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.32%)</title><rect x="549.1" y="691.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="552.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.32%)</title><rect x="549.1" y="675.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="552.1" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.32%)</title><rect x="549.1" y="659.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="552.1" y="670.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.32%)</title><rect x="549.1" y="643.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="552.1" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.32%)</title><rect x="549.1" y="627.0" width="3.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="552.1" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 1.28%)</title><rect x="552.9" y="691.0" width="15.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="555.9" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (3 samples, 0.96%)</title><rect x="556.6" y="675.0" width="11.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="559.6" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.32%)</title><rect x="560.4" y="659.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="563.4" y="670.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.32%)</title><rect x="564.2" y="659.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="567.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.32%)</title><rect x="568.0" y="707.0" width="3.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="571.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.32%)</title><rect x="568.0" y="691.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="571.0" y="702.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.64%)</title><rect x="571.7" y="787.0" width="7.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="574.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (3 samples, 0.96%)</title><rect x="579.3" y="803.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="582.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.96%)</title><rect x="579.3" y="787.0" width="11.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="582.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.96%)</title><rect x="579.3" y="771.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="582.3" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (12 samples, 3.83%)</title><rect x="590.6" y="803.0" width="45.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="593.6" y="814.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (12 samples, 3.83%)</title><rect x="590.6" y="787.0" width="45.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="593.6" y="798.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.28%)</title><rect x="590.6" y="771.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="593.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 0.96%)</title><rect x="594.3" y="755.0" width="11.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="597.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (3 samples, 0.96%)</title><rect x="594.3" y="739.0" width="11.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="597.3" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 0.96%)</title><rect x="594.3" y="723.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="597.3" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="605.7" y="771.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="608.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="605.7" y="755.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="608.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="605.7" y="739.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="608.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.32%)</title><rect x="605.7" y="723.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="608.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.32%)</title><rect x="605.7" y="707.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.7" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (7 samples, 2.24%)</title><rect x="609.4" y="771.0" width="26.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.4" y="782.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 2.24%)</title><rect x="609.4" y="755.0" width="26.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="612.4" y="766.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 2.24%)</title><rect x="609.4" y="739.0" width="26.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="612.4" y="750.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 1.28%)</title><rect x="617.0" y="723.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="620.0" y="734.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.32%)</title><rect x="632.0" y="723.0" width="3.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="635.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.32%)</title><rect x="635.8" y="819.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.8" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.32%)</title><rect x="635.8" y="803.0" width="3.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.32%)</title><rect x="635.8" y="787.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.8" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.32%)</title><rect x="635.8" y="771.0" width="3.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="635.8" y="755.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (87 samples, 27.80%)</title><rect x="639.6" y="835.0" width="328.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="642.6" y="846.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (87 samples, 27.80%)</title><rect x="639.6" y="819.0" width="328.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="642.6" y="830.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$273/1949761374.process (71 samples, 22.68%)</title><rect x="647.1" y="803.0" width="267.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="650.1" y="814.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (71 samples, 22.68%)</title><rect x="647.1" y="787.0" width="267.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="650.1" y="798.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (71 samples, 22.68%)</title><rect x="647.1" y="771.0" width="267.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="650.1" y="782.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="662.2" y="755.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.32%)</title><rect x="662.2" y="739.0" width="3.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="665.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.32%)</title><rect x="662.2" y="723.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.2" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.32%)</title><rect x="662.2" y="707.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="665.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.32%)</title><rect x="662.2" y="691.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="665.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.32%)</title><rect x="662.2" y="675.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (64 samples, 20.45%)</title><rect x="666.0" y="755.0" width="241.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.0" y="766.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (61 samples, 19.49%)</title><rect x="669.7" y="739.0" width="230.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="672.7" y="750.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (49 samples, 15.65%)</title><rect x="699.9" y="723.0" width="184.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="702.9" y="734.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.64%)</title><rect x="718.8" y="707.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.8" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="726.3" y="707.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="729.3" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.64%)</title><rect x="730.1" y="707.0" width="7.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="733.1" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="733.8" y="691.0" width="3.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="736.8" y="702.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.32%)</title><rect x="737.6" y="707.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="740.6" y="718.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (38 samples, 12.14%)</title><rect x="741.4" y="707.0" width="143.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="744.4" y="718.0">os::sleep(Thread*,..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.64%)</title><rect x="767.8" y="691.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.8" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.32%)</title><rect x="771.5" y="675.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="774.5" y="686.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.60%)</title><rect x="775.3" y="691.0" width="18.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="778.3" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_init (1 samples, 0.32%)</title><rect x="794.2" y="691.0" width="3.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="797.2" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (18 samples, 5.75%)</title><rect x="797.9" y="691.0" width="67.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="800.9" y="702.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.32%)</title><rect x="865.8" y="691.0" width="3.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="868.8" y="702.0"></text>
</g>
<g>
<title>_init (1 samples, 0.32%)</title><rect x="869.6" y="691.0" width="3.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="872.6" y="702.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.64%)</title><rect x="873.3" y="691.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.3" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.32%)</title><rect x="880.9" y="691.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="883.9" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.32%)</title><rect x="884.6" y="723.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="887.6" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.64%)</title><rect x="888.4" y="723.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="891.4" y="734.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.32%)</title><rect x="895.9" y="723.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="898.9" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.64%)</title><rect x="899.7" y="739.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="902.7" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.64%)</title><rect x="899.7" y="723.0" width="7.6" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="902.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.32%)</title><rect x="907.3" y="755.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.32%)</title><rect x="911.0" y="755.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="914.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.32%)</title><rect x="911.0" y="739.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="914.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.32%)</title><rect x="911.0" y="723.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="914.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (1 samples, 0.32%)</title><rect x="914.8" y="803.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="917.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.32%)</title><rect x="918.6" y="803.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.32%)</title><rect x="918.6" y="787.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.64%)</title><rect x="922.3" y="803.0" width="7.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="925.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.64%)</title><rect x="922.3" y="787.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="925.3" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.64%)</title><rect x="929.9" y="803.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.64%)</title><rect x="929.9" y="787.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="932.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 1.92%)</title><rect x="937.4" y="803.0" width="22.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="940.4" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.28%)</title><rect x="945.0" y="787.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="948.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.28%)</title><rect x="945.0" y="771.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="948.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.96%)</title><rect x="945.0" y="755.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="948.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.96%)</title><rect x="945.0" y="739.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="948.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.96%)</title><rect x="945.0" y="723.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$361/4976889.accept (1 samples, 0.32%)</title><rect x="952.5" y="707.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="955.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.32%)</title><rect x="956.3" y="755.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="959.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$361/4976889.accept (1 samples, 0.32%)</title><rect x="956.3" y="739.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="959.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$78 (1 samples, 0.32%)</title><rect x="956.3" y="723.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="959.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (2 samples, 0.64%)</title><rect x="960.0" y="803.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="963.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.96%)</title><rect x="967.6" y="835.0" width="11.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="970.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.96%)</title><rect x="967.6" y="819.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="970.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.96%)</title><rect x="967.6" y="803.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="970.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.32%)</title><rect x="967.6" y="787.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="970.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.32%)</title><rect x="967.6" y="771.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.32%)</title><rect x="967.6" y="755.0" width="3.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="970.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.64%)</title><rect x="971.3" y="787.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="974.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$364/362842825.accept (2 samples, 0.64%)</title><rect x="971.3" y="771.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="974.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (2 samples, 0.64%)</title><rect x="971.3" y="755.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.64%)</title><rect x="971.3" y="739.0" width="7.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="974.3" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 0.64%)</title><rect x="971.3" y="723.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="974.3" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 0.64%)</title><rect x="971.3" y="707.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (14 samples, 4.47%)</title><rect x="978.9" y="915.0" width="52.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="981.9" y="926.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 3.51%)</title><rect x="990.2" y="899.0" width="41.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="993.2" y="910.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.64%)</title><rect x="990.2" y="883.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="993.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.64%)</title><rect x="990.2" y="867.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="993.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.64%)</title><rect x="990.2" y="851.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="993.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.64%)</title><rect x="990.2" y="835.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="993.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.64%)</title><rect x="990.2" y="819.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="993.2" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (9 samples, 2.88%)</title><rect x="997.7" y="883.0" width="34.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1000.7" y="894.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 2.88%)</title><rect x="997.7" y="867.0" width="34.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1000.7" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 2.88%)</title><rect x="997.7" y="851.0" width="34.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1000.7" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 2.88%)</title><rect x="997.7" y="835.0" width="34.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1000.7" y="846.0">ja..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (3 samples, 0.96%)</title><rect x="1031.7" y="963.0" width="11.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1034.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.64%)</title><rect x="1035.4" y="947.0" width="7.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1038.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.64%)</title><rect x="1035.4" y="931.0" width="7.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1038.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.32%)</title><rect x="1039.2" y="915.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1042.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.32%)</title><rect x="1039.2" y="899.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1042.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.32%)</title><rect x="1039.2" y="883.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1042.2" y="894.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.32%)</title><rect x="1039.2" y="867.0" width="3.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1042.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.32%)</title><rect x="1039.2" y="851.0" width="3.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1042.2" y="862.0"></text>
</g>
<g>
<title>start_thread (39 samples, 12.46%)</title><rect x="1043.0" y="963.0" width="147.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1046.0" y="974.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (39 samples, 12.46%)</title><rect x="1043.0" y="947.0" width="147.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1046.0" y="958.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 4.47%)</title><rect x="1043.0" y="931.0" width="52.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.0" y="942.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.47%)</title><rect x="1043.0" y="915.0" width="52.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.0" y="926.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 4.15%)</title><rect x="1043.0" y="899.0" width="49.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.0" y="910.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.32%)</title><rect x="1043.0" y="883.0" width="3.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.0" y="894.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 3.83%)</title><rect x="1046.7" y="883.0" width="45.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.7" y="894.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.60%)</title><rect x="1069.4" y="867.0" width="18.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.4" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (3 samples, 0.96%)</title><rect x="1076.9" y="851.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.9" y="862.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.32%)</title><rect x="1088.2" y="867.0" width="3.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1091.2" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="1092.0" y="899.0" width="3.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.0" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.32%)</title><rect x="1092.0" y="883.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.0" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.32%)</title><rect x="1092.0" y="867.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1095.0" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.32%)</title><rect x="1092.0" y="851.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1095.0" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.32%)</title><rect x="1092.0" y="835.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1095.0" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.32%)</title><rect x="1092.0" y="819.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.0" y="830.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.32%)</title><rect x="1092.0" y="803.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1095.0" y="814.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.32%)</title><rect x="1092.0" y="787.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (25 samples, 7.99%)</title><rect x="1095.8" y="931.0" width="94.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.8" y="942.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (25 samples, 7.99%)</title><rect x="1095.8" y="915.0" width="94.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.8" y="926.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (25 samples, 7.99%)</title><rect x="1095.8" y="899.0" width="94.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.8" y="910.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (25 samples, 7.99%)</title><rect x="1095.8" y="883.0" width="94.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.8" y="894.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (23 samples, 7.35%)</title><rect x="1095.8" y="867.0" width="86.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1098.8" y="878.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (23 samples, 7.35%)</title><rect x="1095.8" y="851.0" width="86.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.8" y="862.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 4.47%)</title><rect x="1095.8" y="835.0" width="52.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1098.8" y="846.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.32%)</title><rect x="1095.8" y="819.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.8" y="830.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.32%)</title><rect x="1095.8" y="803.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.8" y="814.0"></text>
</g>
<g>
<title>Compile::init_scratch_buffer_blob(int) (1 samples, 0.32%)</title><rect x="1095.8" y="787.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.8" y="798.0"></text>
</g>
<g>
<title>BufferBlob::create(char const*, int) (1 samples, 0.32%)</title><rect x="1095.8" y="771.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.8" y="782.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.32%)</title><rect x="1095.8" y="755.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1098.8" y="766.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.32%)</title><rect x="1095.8" y="739.0" width="3.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1098.8" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 4.15%)</title><rect x="1099.5" y="819.0" width="49.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.5" y="830.0">Phase..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.64%)</title><rect x="1099.5" y="803.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.32%)</title><rect x="1103.3" y="787.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.3" y="798.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.32%)</title><rect x="1103.3" y="771.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.64%)</title><rect x="1107.1" y="803.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.1" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.32%)</title><rect x="1107.1" y="787.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.1" y="798.0"></text>
</g>
<g>
<title>_init (1 samples, 0.32%)</title><rect x="1107.1" y="771.0" width="3.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1110.1" y="782.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.32%)</title><rect x="1110.8" y="787.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1113.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.32%)</title><rect x="1114.6" y="803.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.64%)</title><rect x="1118.4" y="803.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.96%)</title><rect x="1125.9" y="803.0" width="11.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.9" y="814.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.32%)</title><rect x="1125.9" y="787.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.9" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.32%)</title><rect x="1129.7" y="787.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.7" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.32%)</title><rect x="1133.5" y="787.0" width="3.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.64%)</title><rect x="1137.2" y="803.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.2" y="814.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.32%)</title><rect x="1137.2" y="787.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.2" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.32%)</title><rect x="1141.0" y="787.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.0" y="798.0"></text>
</g>
<g>
<title>jmpConUNode::oper_input_base() const (1 samples, 0.32%)</title><rect x="1144.8" y="803.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.8" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 2.24%)</title><rect x="1148.5" y="835.0" width="26.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="846.0">C..</text>
</g>
<g>
<title>GrowableArray&lt;Node*&gt;::~GrowableArray() (1 samples, 0.32%)</title><rect x="1148.5" y="819.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.5" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (5 samples, 1.60%)</title><rect x="1152.3" y="819.0" width="18.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.3" y="830.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.32%)</title><rect x="1152.3" y="803.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.96%)</title><rect x="1156.1" y="803.0" width="11.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.1" y="814.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.32%)</title><rect x="1163.6" y="787.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.6" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.32%)</title><rect x="1167.4" y="803.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.4" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.32%)</title><rect x="1167.4" y="787.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.4" y="798.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.32%)</title><rect x="1171.2" y="819.0" width="3.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1174.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.64%)</title><rect x="1174.9" y="835.0" width="7.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.64%)</title><rect x="1174.9" y="819.0" width="7.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.64%)</title><rect x="1174.9" y="803.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.64%)</title><rect x="1174.9" y="787.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.64%)</title><rect x="1174.9" y="771.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="755.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="739.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="723.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="707.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="691.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="675.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="659.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="643.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="627.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="611.0" width="3.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="595.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="579.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="563.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="547.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="531.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="515.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="499.0" width="3.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="483.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1177.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="467.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="451.0" width="3.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="435.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="419.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="403.0" width="3.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="387.0" width="3.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="371.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="355.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="339.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="323.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="307.0" width="3.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="291.0" width="3.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="275.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="259.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="243.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="227.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="211.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="195.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.32%)</title><rect x="1174.9" y="179.0" width="3.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.32%)</title><rect x="1174.9" y="163.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.32%)</title><rect x="1174.9" y="147.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.32%)</title><rect x="1174.9" y="131.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.32%)</title><rect x="1174.9" y="115.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.32%)</title><rect x="1174.9" y="99.0" width="3.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.32%)</title><rect x="1174.9" y="83.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="94.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.32%)</title><rect x="1174.9" y="67.0" width="3.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.32%)</title><rect x="1174.9" y="51.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.9" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.32%)</title><rect x="1174.9" y="35.0" width="3.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.32%)</title><rect x="1178.7" y="755.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="766.0"></text>
</g>
<g>
<title>HaltNode::HaltNode(Node*, Node*) (1 samples, 0.32%)</title><rect x="1178.7" y="739.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="750.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.64%)</title><rect x="1182.5" y="867.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.5" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.64%)</title><rect x="1182.5" y="851.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.5" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.64%)</title><rect x="1182.5" y="835.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.5" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.64%)</title><rect x="1182.5" y="819.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.5" y="830.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.64%)</title><rect x="1182.5" y="803.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="814.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 0.64%)</title><rect x="1182.5" y="787.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.5" y="798.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.32%)</title><rect x="1182.5" y="771.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.5" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.32%)</title><rect x="1182.5" y="755.0" width="3.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.5" y="766.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.32%)</title><rect x="1186.2" y="771.0" width="3.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.2" y="782.0"></text>
</g>
<g>
<title>LIR_OpJavaCall::as_OpJavaCall() (1 samples, 0.32%)</title><rect x="1186.2" y="755.0" width="3.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
</g>
</svg>
