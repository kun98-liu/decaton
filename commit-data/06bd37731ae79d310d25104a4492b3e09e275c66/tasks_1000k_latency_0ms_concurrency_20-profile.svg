<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (845 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.36%)</title><rect x="10.0" y="1011.0" width="4.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.24%)</title><rect x="10.0" y="995.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.24%)</title><rect x="10.0" y="979.0" width="2.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.12%)</title><rect x="10.0" y="963.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="10.0" y="947.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.12%)</title><rect x="10.0" y="931.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="11.4" y="963.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.4" y="974.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.12%)</title><rect x="11.4" y="947.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.4" y="958.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.12%)</title><rect x="12.8" y="995.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.8" y="1006.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.81] (1 samples, 0.12%)</title><rect x="12.8" y="979.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.8" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (225 samples, 26.63%)</title><rect x="14.2" y="1011.0" width="314.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.2" y="1022.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (225 samples, 26.63%)</title><rect x="14.2" y="995.0" width="314.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.2" y="1006.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (224 samples, 26.51%)</title><rect x="15.6" y="979.0" width="312.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.6" y="990.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.12%)</title><rect x="15.6" y="963.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.6" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.12%)</title><rect x="15.6" y="947.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="15.6" y="931.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="15.6" y="915.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="15.6" y="899.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="15.6" y="883.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.6" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="15.6" y="867.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.6" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.12%)</title><rect x="15.6" y="851.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.6" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="15.6" y="835.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="15.6" y="819.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="18.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.12%)</title><rect x="17.0" y="963.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.12%)</title><rect x="17.0" y="947.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="17.0" y="931.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="17.0" y="915.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="17.0" y="899.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="17.0" y="883.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="20.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="17.0" y="867.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.12%)</title><rect x="17.0" y="851.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.12%)</title><rect x="17.0" y="835.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.0" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="17.0" y="819.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.0" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.47%)</title><rect x="18.4" y="963.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.4" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.47%)</title><rect x="18.4" y="947.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.4" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.47%)</title><rect x="18.4" y="931.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.4" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1675787348.accept (4 samples, 0.47%)</title><rect x="18.4" y="915.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.47%)</title><rect x="18.4" y="899.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.47%)</title><rect x="18.4" y="883.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.4" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.24%)</title><rect x="21.2" y="867.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.2" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (184 samples, 21.78%)</title><rect x="24.0" y="963.0" width="256.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="27.0" y="974.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/761424759.accept (176 samples, 20.83%)</title><rect x="24.0" y="947.0" width="245.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.0" y="958.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (176 samples, 20.83%)</title><rect x="24.0" y="931.0" width="245.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.0" y="942.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (155 samples, 18.34%)</title><rect x="24.0" y="915.0" width="216.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.0" y="926.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (155 samples, 18.34%)</title><rect x="24.0" y="899.0" width="216.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.0" y="910.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (155 samples, 18.34%)</title><rect x="24.0" y="883.0" width="216.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.0" y="894.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (155 samples, 18.34%)</title><rect x="24.0" y="867.0" width="216.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.0" y="878.0">java/util/concurrent/Executo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (155 samples, 18.34%)</title><rect x="24.0" y="851.0" width="216.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.0" y="862.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (132 samples, 15.62%)</title><rect x="56.1" y="835.0" width="184.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="59.1" y="846.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 13.14%)</title><rect x="56.1" y="819.0" width="155.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.1" y="830.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.66%)</title><rect x="56.1" y="803.0" width="19.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.66%)</title><rect x="56.1" y="787.0" width="19.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="59.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.66%)</title><rect x="56.1" y="771.0" width="19.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (97 samples, 11.48%)</title><rect x="75.6" y="803.0" width="135.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="78.6" y="814.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (97 samples, 11.48%)</title><rect x="75.6" y="787.0" width="135.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="78.6" y="798.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (97 samples, 11.48%)</title><rect x="75.6" y="771.0" width="135.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.6" y="782.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (97 samples, 11.48%)</title><rect x="75.6" y="755.0" width="135.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="78.6" y="766.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="82.6" y="739.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.6" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (91 samples, 10.77%)</title><rect x="84.0" y="739.0" width="127.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.0" y="750.0">jdk/internal/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (34 samples, 4.02%)</title><rect x="86.8" y="723.0" width="47.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="89.8" y="734.0">Unsa..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="92.4" y="707.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="95.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.12%)</title><rect x="93.8" y="707.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="96.8" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.24%)</title><rect x="95.2" y="707.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="98.2" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.47%)</title><rect x="98.0" y="707.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="101.0" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.47%)</title><rect x="103.6" y="707.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="106.6" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="109.1" y="707.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="112.1" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.59%)</title><rect x="110.5" y="707.0" width="7.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="113.5" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.12%)</title><rect x="117.5" y="707.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="120.5" y="718.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="118.9" y="707.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="121.9" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.12%)</title><rect x="120.3" y="707.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="123.3" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_lock (8 samples, 0.95%)</title><rect x="121.7" y="707.0" width="11.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="124.7" y="718.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="132.9" y="707.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="135.9" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (54 samples, 6.39%)</title><rect x="134.3" y="723.0" width="75.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="137.3" y="734.0">__pthrea..</text>
</g>
<g>
<title>_init (1 samples, 0.12%)</title><rect x="209.7" y="723.0" width="1.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="212.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (11 samples, 1.30%)</title><rect x="211.1" y="819.0" width="15.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="214.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (11 samples, 1.30%)</title><rect x="211.1" y="803.0" width="15.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="214.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 1.07%)</title><rect x="213.9" y="787.0" width="12.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 1.07%)</title><rect x="213.9" y="771.0" width="12.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 1.18%)</title><rect x="226.4" y="819.0" width="14.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 1.18%)</title><rect x="226.4" y="803.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 1.18%)</title><rect x="226.4" y="787.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 1.18%)</title><rect x="226.4" y="771.0" width="14.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="239.0" y="755.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="242.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.66%)</title><rect x="240.4" y="915.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.4" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.66%)</title><rect x="240.4" y="899.0" width="19.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.54%)</title><rect x="241.8" y="883.0" width="18.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.54%)</title><rect x="241.8" y="867.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.59%)</title><rect x="253.0" y="851.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (5 samples, 0.59%)</title><rect x="253.0" y="835.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.47%)</title><rect x="260.0" y="915.0" width="5.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.47%)</title><rect x="260.0" y="899.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="260.0" y="883.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.0" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.36%)</title><rect x="261.4" y="883.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="264.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (3 samples, 0.36%)</title><rect x="261.4" y="867.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.4" y="878.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (3 samples, 0.36%)</title><rect x="261.4" y="851.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="264.4" y="862.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.36%)</title><rect x="261.4" y="835.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="264.4" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.36%)</title><rect x="261.4" y="819.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="264.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.36%)</title><rect x="265.6" y="915.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.36%)</title><rect x="265.6" y="899.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.12%)</title><rect x="268.3" y="883.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="271.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="268.3" y="867.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.12%)</title><rect x="269.7" y="947.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="272.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="269.7" y="931.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="272.7" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.83%)</title><rect x="271.1" y="947.0" width="9.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.83%)</title><rect x="271.1" y="931.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.83%)</title><rect x="271.1" y="915.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.83%)</title><rect x="271.1" y="899.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.12%)</title><rect x="279.5" y="883.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 4.02%)</title><rect x="280.9" y="963.0" width="47.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.9" y="974.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 4.02%)</title><rect x="280.9" y="947.0" width="47.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.9" y="958.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 3.08%)</title><rect x="280.9" y="931.0" width="36.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.9" y="942.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (26 samples, 3.08%)</title><rect x="280.9" y="915.0" width="36.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.9" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.12%)</title><rect x="282.3" y="899.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="285.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.12%)</title><rect x="282.3" y="883.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.3" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.12%)</title><rect x="282.3" y="867.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$473/1619254917.accept (1 samples, 0.12%)</title><rect x="282.3" y="851.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="285.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.12%)</title><rect x="282.3" y="835.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="285.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="282.3" y="819.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="282.3" y="803.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="285.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.12%)</title><rect x="282.3" y="787.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.3" y="798.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.12%)</title><rect x="282.3" y="771.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="285.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="282.3" y="755.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="285.3" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="282.3" y="739.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.72%)</title><rect x="283.7" y="899.0" width="32.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="286.7" y="910.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.12%)</title><rect x="283.7" y="883.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="286.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.12%)</title><rect x="283.7" y="867.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="286.7" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="283.7" y="851.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="286.7" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.12%)</title><rect x="283.7" y="835.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (18 samples, 2.13%)</title><rect x="285.1" y="883.0" width="25.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.1" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (18 samples, 2.13%)</title><rect x="285.1" y="867.0" width="25.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.1" y="878.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.36%)</title><rect x="285.1" y="851.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.1" y="862.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.36%)</title><rect x="285.1" y="835.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="288.1" y="846.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.36%)</title><rect x="285.1" y="819.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.1" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (3 samples, 0.36%)</title><rect x="285.1" y="803.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.1" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.36%)</title><rect x="285.1" y="787.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="288.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 1.18%)</title><rect x="289.3" y="851.0" width="14.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.12%)</title><rect x="293.5" y="835.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.12%)</title><rect x="293.5" y="819.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.12%)</title><rect x="293.5" y="803.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.12%)</title><rect x="293.5" y="787.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.12%)</title><rect x="293.5" y="771.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.12%)</title><rect x="293.5" y="755.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="296.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.12%)</title><rect x="293.5" y="739.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="296.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.12%)</title><rect x="293.5" y="723.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="296.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.12%)</title><rect x="293.5" y="707.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.5" y="718.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.12%)</title><rect x="293.5" y="691.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="296.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.59%)</title><rect x="294.9" y="835.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.59%)</title><rect x="294.9" y="819.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (5 samples, 0.59%)</title><rect x="294.9" y="803.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.59%)</title><rect x="294.9" y="787.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="297.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.47%)</title><rect x="296.3" y="771.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.12%)</title><rect x="301.9" y="835.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.12%)</title><rect x="301.9" y="819.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="301.9" y="803.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="301.9" y="787.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.12%)</title><rect x="301.9" y="771.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.12%)</title><rect x="301.9" y="755.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.9" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.12%)</title><rect x="301.9" y="739.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="304.9" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="723.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="304.9" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="707.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="304.9" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="691.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="304.9" y="702.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="675.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="304.9" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method_statically(Bytecodes::Code, constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="659.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.9" y="670.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="643.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="304.9" y="654.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.12%)</title><rect x="301.9" y="627.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="304.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.59%)</title><rect x="303.3" y="851.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.47%)</title><rect x="304.7" y="835.0" width="5.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.47%)</title><rect x="304.7" y="819.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.7" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.47%)</title><rect x="304.7" y="803.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (3 samples, 0.36%)</title><rect x="310.2" y="883.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.2" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (3 samples, 0.36%)</title><rect x="310.2" y="867.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.12%)</title><rect x="310.2" y="851.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="313.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="310.2" y="835.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="313.2" y="846.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="310.2" y="819.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.2" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="310.2" y="803.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="313.2" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="310.2" y="787.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="313.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.24%)</title><rect x="311.6" y="851.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.24%)</title><rect x="311.6" y="835.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="314.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.12%)</title><rect x="314.4" y="883.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.12%)</title><rect x="314.4" y="867.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.12%)</title><rect x="314.4" y="851.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="317.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="314.4" y="835.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="317.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isPaused (1 samples, 0.12%)</title><rect x="315.8" y="899.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="318.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.12%)</title><rect x="315.8" y="883.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="318.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.12%)</title><rect x="315.8" y="867.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.24%)</title><rect x="317.2" y="931.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.2" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.12%)</title><rect x="317.2" y="915.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="320.2" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.12%)</title><rect x="317.2" y="899.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.2" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.12%)</title><rect x="318.6" y="915.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="321.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (1 samples, 0.12%)</title><rect x="318.6" y="899.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.12%)</title><rect x="318.6" y="883.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.12%)</title><rect x="318.6" y="867.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.12%)</title><rect x="318.6" y="851.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="321.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.12%)</title><rect x="318.6" y="835.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="321.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.12%)</title><rect x="318.6" y="819.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="321.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="318.6" y="803.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="318.6" y="787.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="318.6" y="771.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="321.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="318.6" y="755.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.71%)</title><rect x="320.0" y="931.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.59%)</title><rect x="320.0" y="915.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.59%)</title><rect x="320.0" y="899.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="323.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="321.4" y="883.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="324.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="321.4" y="867.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.12%)</title><rect x="321.4" y="851.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.4" y="862.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.12%)</title><rect x="321.4" y="835.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.4" y="846.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.12%)</title><rect x="321.4" y="819.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="324.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.24%)</title><rect x="322.8" y="883.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.24%)</title><rect x="322.8" y="867.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="325.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (2 samples, 0.24%)</title><rect x="322.8" y="851.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="325.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.24%)</title><rect x="322.8" y="835.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="325.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.24%)</title><rect x="322.8" y="819.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.12%)</title><rect x="322.8" y="803.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.8" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.12%)</title><rect x="322.8" y="787.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="325.8" y="798.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="322.8" y="771.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="325.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="322.8" y="755.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="325.8" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="322.8" y="739.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="325.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="322.8" y="723.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="325.8" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="322.8" y="707.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="325.8" y="718.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="322.8" y="691.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="325.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.12%)</title><rect x="324.2" y="803.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="327.2" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="324.2" y="787.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.2" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="324.2" y="771.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.2" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="324.2" y="755.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="327.2" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.12%)</title><rect x="324.2" y="739.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="327.2" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.12%)</title><rect x="324.2" y="723.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.2" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.12%)</title><rect x="324.2" y="707.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="327.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.12%)</title><rect x="325.6" y="883.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="328.6" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.12%)</title><rect x="325.6" y="867.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="328.6" y="878.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.12%)</title><rect x="325.6" y="851.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="328.6" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.12%)</title><rect x="325.6" y="835.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.6" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.12%)</title><rect x="325.6" y="819.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.6" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.12%)</title><rect x="325.6" y="803.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.12%)</title><rect x="325.6" y="787.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="325.6" y="771.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.12%)</title><rect x="327.0" y="915.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="330.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.12%)</title><rect x="327.0" y="899.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="330.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.12%)</title><rect x="327.0" y="883.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.12%)</title><rect x="327.0" y="867.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="330.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.12%)</title><rect x="327.0" y="851.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="330.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.12%)</title><rect x="327.0" y="835.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.12%)</title><rect x="327.0" y="819.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="330.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.build (1 samples, 0.12%)</title><rect x="327.0" y="803.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.flushPendingSend (1 samples, 0.12%)</title><rect x="327.0" y="787.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="330.0" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.12%)</title><rect x="327.0" y="771.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.0" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.12%)</title><rect x="327.0" y="755.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.0" y="766.0"></text>
</g>
<g>
<title>checkcast_arraycopy (1 samples, 0.12%)</title><rect x="327.0" y="739.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="330.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Thread.run (565 samples, 66.86%)</title><rect x="328.4" y="1011.0" width="789.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="331.4" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (565 samples, 66.86%)</title><rect x="328.4" y="995.0" width="789.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.4" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (565 samples, 66.86%)</title><rect x="328.4" y="979.0" width="789.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.4" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1438174593.run (354 samples, 41.89%)</title><rect x="329.8" y="963.0" width="494.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="332.8" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (354 samples, 41.89%)</title><rect x="329.8" y="947.0" width="494.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.8" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (354 samples, 41.89%)</title><rect x="329.8" y="931.0" width="494.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="332.8" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (354 samples, 41.89%)</title><rect x="329.8" y="915.0" width="494.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="332.8" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sche..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (38 samples, 4.50%)</title><rect x="335.4" y="899.0" width="53.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="338.4" y="910.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (38 samples, 4.50%)</title><rect x="335.4" y="883.0" width="53.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="338.4" y="894.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (38 samples, 4.50%)</title><rect x="335.4" y="867.0" width="53.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.4" y="878.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 2.60%)</title><rect x="357.7" y="851.0" width="30.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.7" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.36%)</title><rect x="357.7" y="835.0" width="4.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$489/410006691.accept (1 samples, 0.12%)</title><rect x="360.5" y="819.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (19 samples, 2.25%)</title><rect x="361.9" y="835.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="364.9" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$489/410006691.accept (19 samples, 2.25%)</title><rect x="361.9" y="819.0" width="26.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.9" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (19 samples, 2.25%)</title><rect x="361.9" y="803.0" width="26.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="364.9" y="814.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 2.25%)</title><rect x="361.9" y="787.0" width="26.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="364.9" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (19 samples, 2.25%)</title><rect x="361.9" y="771.0" width="26.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="364.9" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (17 samples, 2.01%)</title><rect x="364.7" y="755.0" width="23.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="367.7" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.36%)</title><rect x="364.7" y="739.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="367.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/1236495911.accept (1 samples, 0.12%)</title><rect x="367.5" y="723.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="370.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (14 samples, 1.66%)</title><rect x="368.9" y="739.0" width="19.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/384116304.accept (1 samples, 0.12%)</title><rect x="387.0" y="723.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="390.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.12%)</title><rect x="388.4" y="899.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="391.4" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.12%)</title><rect x="388.4" y="883.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.12%)</title><rect x="388.4" y="867.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="391.4" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.12%)</title><rect x="388.4" y="851.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="391.4" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="388.4" y="835.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="391.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (103 samples, 12.19%)</title><rect x="389.8" y="899.0" width="143.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="392.8" y="910.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (103 samples, 12.19%)</title><rect x="389.8" y="883.0" width="143.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="392.8" y="894.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (103 samples, 12.19%)</title><rect x="389.8" y="867.0" width="143.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="392.8" y="878.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (103 samples, 12.19%)</title><rect x="389.8" y="851.0" width="143.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="392.8" y="862.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (103 samples, 12.19%)</title><rect x="389.8" y="835.0" width="143.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="392.8" y="846.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (103 samples, 12.19%)</title><rect x="389.8" y="819.0" width="143.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="392.8" y="830.0">com/fasterxml/jack..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.24%)</title><rect x="394.0" y="803.0" width="2.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="397.0" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.71%)</title><rect x="396.8" y="803.0" width="8.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="399.8" y="814.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.47%)</title><rect x="399.6" y="787.0" width="5.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="402.6" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (20 samples, 2.37%)</title><rect x="405.2" y="803.0" width="27.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="408.2" y="814.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.12%)</title><rect x="417.8" y="787.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.12%)</title><rect x="417.8" y="771.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="417.8" y="755.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="420.8" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="417.8" y="739.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="420.8" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="417.8" y="723.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="420.8" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="417.8" y="707.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="420.8" y="718.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.12%)</title><rect x="417.8" y="691.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="420.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (10 samples, 1.18%)</title><rect x="419.2" y="787.0" width="13.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="422.2" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (10 samples, 1.18%)</title><rect x="419.2" y="771.0" width="13.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.2" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (9 samples, 1.07%)</title><rect x="419.2" y="755.0" width="12.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (9 samples, 1.07%)</title><rect x="419.2" y="739.0" width="12.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.12%)</title><rect x="431.7" y="755.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="434.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.12%)</title><rect x="431.7" y="739.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="434.7" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (58 samples, 6.86%)</title><rect x="433.1" y="803.0" width="81.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="436.1" y="814.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.47%)</title><rect x="433.1" y="787.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.47%)</title><rect x="433.1" y="771.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="436.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.12%)</title><rect x="437.3" y="755.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="440.3" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 0.36%)</title><rect x="438.7" y="787.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="441.7" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.12%)</title><rect x="441.5" y="771.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.36%)</title><rect x="442.9" y="787.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="445.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.36%)</title><rect x="442.9" y="771.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="445.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.36%)</title><rect x="442.9" y="755.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.36%)</title><rect x="442.9" y="739.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="445.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.36%)</title><rect x="442.9" y="723.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="445.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (3 samples, 0.36%)</title><rect x="442.9" y="707.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="445.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (48 samples, 5.68%)</title><rect x="447.1" y="787.0" width="67.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="450.1" y="798.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (48 samples, 5.68%)</title><rect x="447.1" y="771.0" width="67.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.1" y="782.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.54%)</title><rect x="447.1" y="755.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="450.1" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.24%)</title><rect x="447.1" y="739.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="450.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.24%)</title><rect x="447.1" y="723.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.24%)</title><rect x="447.1" y="707.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="450.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (11 samples, 1.30%)</title><rect x="449.9" y="739.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="452.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (35 samples, 4.14%)</title><rect x="465.2" y="755.0" width="48.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="468.2" y="766.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (35 samples, 4.14%)</title><rect x="465.2" y="739.0" width="48.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.2" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (35 samples, 4.14%)</title><rect x="465.2" y="723.0" width="48.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="468.2" y="734.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.30%)</title><rect x="473.6" y="707.0" width="15.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="476.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.83%)</title><rect x="476.4" y="691.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.83%)</title><rect x="476.4" y="675.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.83%)</title><rect x="476.4" y="659.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (5 samples, 0.59%)</title><rect x="479.2" y="643.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="482.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.12%)</title><rect x="486.2" y="691.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="487.6" y="691.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="490.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.12%)</title><rect x="487.6" y="675.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="487.6" y="659.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="490.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.71%)</title><rect x="489.0" y="707.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.47%)</title><rect x="491.8" y="691.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (4 samples, 0.47%)</title><rect x="491.8" y="675.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.8" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (4 samples, 0.47%)</title><rect x="491.8" y="659.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="494.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (4 samples, 0.47%)</title><rect x="491.8" y="643.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="494.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (4 samples, 0.47%)</title><rect x="491.8" y="627.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="494.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (4 samples, 0.47%)</title><rect x="491.8" y="611.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (4 samples, 0.47%)</title><rect x="491.8" y="595.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="494.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (7 samples, 0.83%)</title><rect x="497.4" y="707.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="500.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (7 samples, 0.83%)</title><rect x="497.4" y="691.0" width="9.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (7 samples, 0.83%)</title><rect x="497.4" y="675.0" width="9.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="500.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (7 samples, 0.83%)</title><rect x="497.4" y="659.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="500.4" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (7 samples, 0.83%)</title><rect x="497.4" y="643.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="500.4" y="654.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.83%)</title><rect x="497.4" y="627.0" width="9.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.12%)</title><rect x="505.7" y="611.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.59%)</title><rect x="507.1" y="707.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="510.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.59%)</title><rect x="507.1" y="691.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="510.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.36%)</title><rect x="507.1" y="675.0" width="4.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="510.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor4.newInstance (1 samples, 0.12%)</title><rect x="509.9" y="659.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="512.9" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="511.3" y="675.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="514.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="511.3" y="659.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="514.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.24%)</title><rect x="511.3" y="643.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="514.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (13 samples, 1.54%)</title><rect x="514.1" y="803.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="517.1" y="814.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (13 samples, 1.54%)</title><rect x="514.1" y="787.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="517.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (13 samples, 1.54%)</title><rect x="514.1" y="771.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (13 samples, 1.54%)</title><rect x="514.1" y="755.0" width="18.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="517.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (13 samples, 1.54%)</title><rect x="514.1" y="739.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.1" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.24%)</title><rect x="529.5" y="723.0" width="2.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="532.5" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.24%)</title><rect x="529.5" y="707.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="532.5" y="718.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="532.3" y="803.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="535.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (201 samples, 23.79%)</title><rect x="533.7" y="899.0" width="280.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="536.7" y="910.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (35 samples, 4.14%)</title><rect x="533.7" y="883.0" width="48.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="536.7" y="894.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (35 samples, 4.14%)</title><rect x="533.7" y="867.0" width="48.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="536.7" y="878.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 3.79%)</title><rect x="537.9" y="851.0" width="44.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="540.9" y="862.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.89%)</title><rect x="539.3" y="835.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="542.3" y="846.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.36%)</title><rect x="539.3" y="819.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.3" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.36%)</title><rect x="539.3" y="803.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="542.3" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 1.54%)</title><rect x="543.4" y="819.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 1.54%)</title><rect x="543.4" y="803.0" width="18.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="546.4" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.12%)</title><rect x="561.6" y="835.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="564.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.59%)</title><rect x="563.0" y="835.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="566.0" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.24%)</title><rect x="564.4" y="819.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="567.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.24%)</title><rect x="567.2" y="819.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="570.2" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.24%)</title><rect x="567.2" y="803.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="570.2" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 1.07%)</title><rect x="570.0" y="835.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.47%)</title><rect x="570.0" y="819.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="573.0" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (5 samples, 0.59%)</title><rect x="575.6" y="819.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="578.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="575.6" y="803.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="577.0" y="787.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="580.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.12%)</title><rect x="577.0" y="771.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="580.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.36%)</title><rect x="578.4" y="803.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="581.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.24%)</title><rect x="582.5" y="883.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="585.5" y="894.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.24%)</title><rect x="582.5" y="867.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="585.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (111 samples, 13.14%)</title><rect x="585.3" y="883.0" width="155.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="588.3" y="894.0">com/linecorp/decaton..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.12%)</title><rect x="586.7" y="867.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="589.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (99 samples, 11.72%)</title><rect x="588.1" y="867.0" width="138.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.1" y="878.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (36 samples, 4.26%)</title><rect x="602.1" y="851.0" width="50.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="605.1" y="862.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 2.49%)</title><rect x="618.9" y="835.0" width="29.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.9" y="846.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (21 samples, 2.49%)</title><rect x="618.9" y="819.0" width="29.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.9" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.59%)</title><rect x="628.6" y="803.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="631.6" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.59%)</title><rect x="628.6" y="787.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="631.6" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="634.2" y="771.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="637.2" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="634.2" y="755.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="637.2" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="634.2" y="739.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="637.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="634.2" y="723.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="637.2" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="634.2" y="707.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="637.2" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 1.07%)</title><rect x="635.6" y="803.0" width="12.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="638.6" y="814.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.12%)</title><rect x="648.2" y="835.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="651.2" y="846.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.12%)</title><rect x="648.2" y="819.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="651.2" y="830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.12%)</title><rect x="648.2" y="803.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="651.2" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="648.2" y="787.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="651.2" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="648.2" y="771.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.2" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="648.2" y="755.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.2" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="648.2" y="739.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="651.2" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="648.2" y="723.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="651.2" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="648.2" y="707.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="651.2" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="648.2" y="691.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="651.2" y="702.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="648.2" y="675.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="651.2" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="648.2" y="659.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="651.2" y="670.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.12%)</title><rect x="648.2" y="643.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.2" y="654.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.12%)</title><rect x="648.2" y="627.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="651.2" y="638.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.24%)</title><rect x="649.6" y="835.0" width="2.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="652.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.12%)</title><rect x="652.4" y="851.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="655.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.12%)</title><rect x="652.4" y="835.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="655.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="652.4" y="819.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="655.4" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="652.4" y="803.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="655.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="652.4" y="787.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="655.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="652.4" y="771.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="655.4" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="652.4" y="755.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="655.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="652.4" y="739.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="655.4" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.12%)</title><rect x="652.4" y="723.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="655.4" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*) (1 samples, 0.12%)</title><rect x="652.4" y="707.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="655.4" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="653.8" y="851.0" width="1.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="656.8" y="862.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (51 samples, 6.04%)</title><rect x="655.2" y="851.0" width="71.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.2" y="862.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (49 samples, 5.80%)</title><rect x="658.0" y="835.0" width="68.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="661.0" y="846.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (19 samples, 2.25%)</title><rect x="658.0" y="819.0" width="26.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="661.0" y="830.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.66%)</title><rect x="664.9" y="803.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="667.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.66%)</title><rect x="664.9" y="787.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="667.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (30 samples, 3.55%)</title><rect x="684.5" y="819.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="687.5" y="830.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (30 samples, 3.55%)</title><rect x="684.5" y="803.0" width="41.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="687.5" y="814.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.36%)</title><rect x="685.9" y="787.0" width="4.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="688.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.36%)</title><rect x="685.9" y="771.0" width="4.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.9" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.36%)</title><rect x="685.9" y="755.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="688.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.12%)</title><rect x="688.7" y="739.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 3.08%)</title><rect x="690.1" y="787.0" width="36.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="693.1" y="798.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.24%)</title><rect x="702.6" y="771.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="705.6" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.54%)</title><rect x="705.4" y="771.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="708.4" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="722.2" y="755.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="725.2" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="722.2" y="739.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="725.2" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="722.2" y="723.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.2" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="722.2" y="707.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.2" y="718.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.24%)</title><rect x="723.6" y="771.0" width="2.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="726.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (10 samples, 1.18%)</title><rect x="726.4" y="867.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.4" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (10 samples, 1.18%)</title><rect x="726.4" y="851.0" width="13.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="729.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 1.18%)</title><rect x="726.4" y="835.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="729.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 1.18%)</title><rect x="726.4" y="819.0" width="13.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (10 samples, 1.18%)</title><rect x="726.4" y="803.0" width="13.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="729.4" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.59%)</title><rect x="729.2" y="787.0" width="7.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="732.2" y="798.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.59%)</title><rect x="729.2" y="771.0" width="7.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="732.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.24%)</title><rect x="736.2" y="787.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="739.2" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="738.9" y="787.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="741.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (33 samples, 3.91%)</title><rect x="740.3" y="883.0" width="46.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="743.3" y="894.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (33 samples, 3.91%)</title><rect x="740.3" y="867.0" width="46.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="743.3" y="878.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="741.7" y="851.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="744.7" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="741.7" y="835.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="744.7" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="741.7" y="819.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="744.7" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="741.7" y="803.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="744.7" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.12%)</title><rect x="741.7" y="787.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1909581372.process (11 samples, 1.30%)</title><rect x="743.1" y="851.0" width="15.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="746.1" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (11 samples, 1.30%)</title><rect x="743.1" y="835.0" width="15.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.1" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (10 samples, 1.18%)</title><rect x="743.1" y="819.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.1" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (5 samples, 0.59%)</title><rect x="744.5" y="803.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="744.5" y="787.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="747.5" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.12%)</title><rect x="744.5" y="771.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="747.5" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.47%)</title><rect x="745.9" y="787.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="748.9" y="798.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.47%)</title><rect x="745.9" y="771.0" width="5.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="748.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.47%)</title><rect x="751.5" y="803.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="754.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.12%)</title><rect x="757.1" y="819.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="760.1" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="757.1" y="803.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="760.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="757.1" y="787.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.1" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (10 samples, 1.18%)</title><rect x="758.5" y="851.0" width="14.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="761.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.24%)</title><rect x="758.5" y="835.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="761.5" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.24%)</title><rect x="758.5" y="819.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.5" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.24%)</title><rect x="758.5" y="803.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="761.5" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.24%)</title><rect x="758.5" y="787.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="761.5" y="798.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.24%)</title><rect x="758.5" y="771.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="761.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.12%)</title><rect x="761.3" y="835.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.3" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="761.3" y="819.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="764.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="761.3" y="803.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="764.3" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="761.3" y="787.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.3" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="761.3" y="771.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="764.3" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="761.3" y="755.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="764.3" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.12%)</title><rect x="761.3" y="739.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="764.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (7 samples, 0.83%)</title><rect x="762.7" y="835.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="765.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (7 samples, 0.83%)</title><rect x="762.7" y="819.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (7 samples, 0.83%)</title><rect x="762.7" y="803.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.83%)</title><rect x="762.7" y="787.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="765.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.83%)</title><rect x="762.7" y="771.0" width="9.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.36%)</title><rect x="772.5" y="851.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="775.5" y="862.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.36%)</title><rect x="772.5" y="835.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="775.5" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="776.7" y="851.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="779.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="776.7" y="835.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.7" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (1 samples, 0.12%)</title><rect x="776.7" y="819.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.7" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.36%)</title><rect x="778.0" y="851.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="781.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (3 samples, 0.36%)</title><rect x="778.0" y="835.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="781.0" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="782.2" y="851.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="785.2" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="782.2" y="835.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.24%)</title><rect x="783.6" y="851.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.24%)</title><rect x="783.6" y="835.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="786.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.24%)</title><rect x="783.6" y="819.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="786.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.24%)</title><rect x="783.6" y="803.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="786.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$480/570438258.accept (1 samples, 0.12%)</title><rect x="783.6" y="787.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.6" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="785.0" y="787.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="788.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 2.37%)</title><rect x="786.4" y="883.0" width="28.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.4" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 2.37%)</title><rect x="786.4" y="867.0" width="28.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.4" y="878.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.47%)</title><rect x="790.6" y="851.0" width="5.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="793.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="794.8" y="835.0" width="1.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="797.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (12 samples, 1.42%)</title><rect x="796.2" y="851.0" width="16.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="799.2" y="862.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.12%)</title><rect x="796.2" y="835.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="799.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.59%)</title><rect x="797.6" y="835.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="800.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$485/205463354.accept (1 samples, 0.12%)</title><rect x="800.4" y="819.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="803.4" y="830.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.24%)</title><rect x="801.8" y="819.0" width="2.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="804.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.71%)</title><rect x="804.6" y="835.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="807.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$485/205463354.accept (5 samples, 0.59%)</title><rect x="806.0" y="819.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.0" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.47%)</title><rect x="807.4" y="803.0" width="5.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="810.4" y="814.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="808.8" y="787.0" width="4.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="811.8" y="798.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.12%)</title><rect x="813.0" y="851.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="816.0" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.83%)</title><rect x="814.4" y="899.0" width="9.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="817.4" y="910.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.83%)</title><rect x="814.4" y="883.0" width="9.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="817.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.59%)</title><rect x="824.1" y="963.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="827.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.59%)</title><rect x="824.1" y="947.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="827.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.59%)</title><rect x="824.1" y="931.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="827.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.59%)</title><rect x="824.1" y="915.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="827.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (205 samples, 24.26%)</title><rect x="831.1" y="963.0" width="286.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="834.1" y="974.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (205 samples, 24.26%)</title><rect x="831.1" y="947.0" width="286.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.1" y="958.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (172 samples, 20.36%)</title><rect x="854.9" y="931.0" width="240.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="857.9" y="942.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.12%)</title><rect x="856.2" y="915.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="856.2" y="899.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="859.2" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="856.2" y="883.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="859.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="856.2" y="867.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="859.2" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="856.2" y="851.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="859.2" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.12%)</title><rect x="856.2" y="835.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="859.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 1.07%)</title><rect x="857.6" y="915.0" width="12.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="860.6" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 1.07%)</title><rect x="857.6" y="899.0" width="12.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="860.6" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.24%)</title><rect x="867.4" y="883.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.83%)</title><rect x="870.2" y="915.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="873.2" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.83%)</title><rect x="870.2" y="899.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="873.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (154 samples, 18.22%)</title><rect x="880.0" y="915.0" width="215.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="883.0" y="926.0">java/util/concurrent/locks/L..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (154 samples, 18.22%)</title><rect x="880.0" y="899.0" width="215.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.0" y="910.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.12%)</title><rect x="881.4" y="883.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="884.4" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (149 samples, 17.63%)</title><rect x="882.8" y="883.0" width="208.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="885.8" y="894.0">Unsafe_Park</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="888.4" y="867.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="891.4" y="878.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 2.60%)</title><rect x="889.8" y="867.0" width="30.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="892.8" y="878.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.95%)</title><rect x="900.9" y="851.0" width="11.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.9" y="862.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="909.3" y="835.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="912.3" y="846.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="910.7" y="835.0" width="1.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="913.7" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.12%)</title><rect x="912.1" y="851.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="915.1" y="862.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.47%)</title><rect x="913.5" y="851.0" width="5.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="916.5" y="862.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="919.1" y="851.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.1" y="862.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (6 samples, 0.71%)</title><rect x="920.5" y="867.0" width="8.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="923.5" y="878.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.36%)</title><rect x="928.9" y="867.0" width="4.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="931.9" y="878.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 4.14%)</title><rect x="933.1" y="867.0" width="48.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="936.1" y="878.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (64 samples, 7.57%)</title><rect x="981.9" y="867.0" width="89.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="984.9" y="878.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.59%)</title><rect x="1071.3" y="867.0" width="7.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1074.3" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.24%)</title><rect x="1078.3" y="867.0" width="2.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1081.3" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.24%)</title><rect x="1081.1" y="867.0" width="2.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1084.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.12%)</title><rect x="1083.9" y="867.0" width="1.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1086.9" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1085.3" y="867.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1088.3" y="878.0"></text>
</g>
<g>
<title>_init (1 samples, 0.12%)</title><rect x="1086.7" y="867.0" width="1.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1089.7" y="878.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.24%)</title><rect x="1088.1" y="867.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1091.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.36%)</title><rect x="1090.9" y="883.0" width="4.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1093.9" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.89%)</title><rect x="1095.0" y="931.0" width="22.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1098.0" y="942.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.89%)</title><rect x="1095.0" y="915.0" width="22.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1098.0" y="926.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.89%)</title><rect x="1095.0" y="899.0" width="22.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1098.0" y="910.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.89%)</title><rect x="1095.0" y="883.0" width="22.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1098.0" y="894.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1117.4" y="1011.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1120.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.12%)</title><rect x="1117.4" y="995.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1120.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.12%)</title><rect x="1117.4" y="979.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.12%)</title><rect x="1117.4" y="963.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1120.4" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.12%)</title><rect x="1117.4" y="947.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1120.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.12%)</title><rect x="1117.4" y="931.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1120.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.12%)</title><rect x="1117.4" y="915.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1120.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.12%)</title><rect x="1117.4" y="899.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1120.4" y="910.0"></text>
</g>
<g>
<title>start_thread (51 samples, 6.04%)</title><rect x="1118.8" y="1011.0" width="71.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1121.8" y="1022.0">start_th..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (51 samples, 6.04%)</title><rect x="1118.8" y="995.0" width="71.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1121.8" y="1006.0">thread_n..</text>
</g>
<g>
<title>Thread::call_run() (51 samples, 6.04%)</title><rect x="1118.8" y="979.0" width="71.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.8" y="990.0">Thread::..</text>
</g>
<g>
<title>GangWorker::loop() (3 samples, 0.36%)</title><rect x="1118.8" y="963.0" width="4.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.8" y="974.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.36%)</title><rect x="1118.8" y="947.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.8" y="958.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.12%)</title><rect x="1118.8" y="931.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1121.8" y="942.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.12%)</title><rect x="1118.8" y="915.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1121.8" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (2 samples, 0.24%)</title><rect x="1120.2" y="931.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.2" y="942.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.24%)</title><rect x="1120.2" y="915.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.2" y="926.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.12%)</title><rect x="1120.2" y="899.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.2" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.12%)</title><rect x="1121.6" y="899.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.6" y="910.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.12%)</title><rect x="1121.6" y="883.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.6" y="894.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (48 samples, 5.68%)</title><rect x="1123.0" y="963.0" width="67.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1126.0" y="974.0">JavaThr..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (48 samples, 5.68%)</title><rect x="1123.0" y="947.0" width="67.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.0" y="958.0">Compile..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (48 samples, 5.68%)</title><rect x="1123.0" y="931.0" width="67.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.0" y="942.0">Compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (47 samples, 5.56%)</title><rect x="1123.0" y="915.0" width="65.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.0" y="926.0">C2Compi..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (47 samples, 5.56%)</title><rect x="1123.0" y="899.0" width="65.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.0" y="910.0">Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (26 samples, 3.08%)</title><rect x="1123.0" y="883.0" width="36.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.0" y="894.0">Com..</text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.36%)</title><rect x="1123.0" y="867.0" width="4.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.0" y="878.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.24%)</title><rect x="1124.4" y="851.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.4" y="862.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.12%)</title><rect x="1124.4" y="835.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.4" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1124.4" y="819.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.4" y="830.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.12%)</title><rect x="1124.4" y="803.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1127.4" y="814.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.12%)</title><rect x="1124.4" y="787.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.4" y="798.0"></text>
</g>
<g>
<title>State::_sub_Op_SafePoint(Node const*) (1 samples, 0.12%)</title><rect x="1124.4" y="771.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.4" y="782.0"></text>
</g>
<g>
<title>Assembler::is_polling_page_far() (1 samples, 0.12%)</title><rect x="1124.4" y="755.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.4" y="766.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1125.8" y="835.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.8" y="846.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.12%)</title><rect x="1125.8" y="819.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1128.8" y="830.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.12%)</title><rect x="1125.8" y="803.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.8" y="814.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.12%)</title><rect x="1125.8" y="787.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.8" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="1125.8" y="771.0" width="1.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1128.8" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.47%)</title><rect x="1127.2" y="867.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.47%)</title><rect x="1127.2" y="851.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1127.2" y="835.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.12%)</title><rect x="1127.2" y="819.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.12%)</title><rect x="1128.6" y="835.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.6" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1128.6" y="819.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.6" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1130.0" y="835.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.0" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.12%)</title><rect x="1131.3" y="835.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.3" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (19 samples, 2.25%)</title><rect x="1132.7" y="867.0" width="26.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.7" y="878.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.12%)</title><rect x="1132.7" y="851.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.7" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.12%)</title><rect x="1132.7" y="835.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.7" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1132.7" y="819.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.59%)</title><rect x="1134.1" y="851.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.59%)</title><rect x="1141.1" y="851.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.1" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.12%)</title><rect x="1141.1" y="835.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="846.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.12%)</title><rect x="1141.1" y="819.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.1" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.24%)</title><rect x="1142.5" y="835.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.5" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.24%)</title><rect x="1142.5" y="819.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.24%)</title><rect x="1145.3" y="835.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.3" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1145.3" y="819.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.3" y="830.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.12%)</title><rect x="1146.7" y="819.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.47%)</title><rect x="1148.1" y="851.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.1" y="862.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.24%)</title><rect x="1150.9" y="835.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 0.36%)</title><rect x="1153.7" y="851.0" width="4.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.7" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.36%)</title><rect x="1153.7" y="835.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.7" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.12%)</title><rect x="1157.9" y="851.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.9" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1157.9" y="835.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.9" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 1.54%)</title><rect x="1159.3" y="883.0" width="18.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.3" y="894.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (3 samples, 0.36%)</title><rect x="1159.3" y="867.0" width="4.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.3" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 0.36%)</title><rect x="1159.3" y="851.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.36%)</title><rect x="1159.3" y="835.0" width="4.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.3" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.12%)</title><rect x="1162.1" y="819.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.12%)</title><rect x="1162.1" y="803.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.1" y="814.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.12%)</title><rect x="1162.1" y="787.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.1" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1162.1" y="771.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.1" y="782.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1162.1" y="755.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="766.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1162.1" y="739.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.1" y="750.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.12%)</title><rect x="1162.1" y="723.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1165.1" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.12%)</title><rect x="1162.1" y="707.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.12%)</title><rect x="1163.5" y="867.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.12%)</title><rect x="1163.5" y="851.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.5" y="862.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.12%)</title><rect x="1163.5" y="835.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.5" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 0.59%)</title><rect x="1164.9" y="867.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.9" y="878.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1164.9" y="851.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.9" y="862.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.12%)</title><rect x="1164.9" y="835.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1167.9" y="846.0"></text>
</g>
<g>
<title>IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool) (1 samples, 0.12%)</title><rect x="1164.9" y="819.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1167.9" y="830.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.12%)</title><rect x="1166.3" y="851.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.3" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1167.7" y="851.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.12%)</title><rect x="1169.1" y="851.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1172.1" y="862.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1170.4" y="851.0" width="1.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1173.4" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.24%)</title><rect x="1171.8" y="867.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.24%)</title><rect x="1171.8" y="851.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1171.8" y="835.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1171.8" y="819.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.12%)</title><rect x="1173.2" y="835.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.2" y="846.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1174.6" y="867.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.6" y="878.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1174.6" y="851.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.6" y="862.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.12%)</title><rect x="1174.6" y="835.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.6" y="846.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.12%)</title><rect x="1176.0" y="867.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.59%)</title><rect x="1177.4" y="883.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.59%)</title><rect x="1177.4" y="867.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.59%)</title><rect x="1177.4" y="851.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.47%)</title><rect x="1177.4" y="835.0" width="5.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.47%)</title><rect x="1177.4" y="819.0" width="5.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.47%)</title><rect x="1177.4" y="803.0" width="5.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="814.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1177.4" y="787.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.4" y="798.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1177.4" y="771.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.4" y="782.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1177.4" y="755.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1177.4" y="739.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1177.4" y="723.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1177.4" y="707.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.4" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1177.4" y="691.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.4" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1177.4" y="675.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.4" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1177.4" y="659.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.4" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1177.4" y="643.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.4" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1177.4" y="627.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.4" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1177.4" y="611.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1177.4" y="595.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.4" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1177.4" y="579.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.4" y="590.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1177.4" y="563.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.4" y="574.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.12%)</title><rect x="1177.4" y="547.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.12%)</title><rect x="1177.4" y="531.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.4" y="542.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.12%)</title><rect x="1177.4" y="515.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.4" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="787.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="771.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="755.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="739.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="723.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="707.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="691.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="675.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="659.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="643.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="627.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="611.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="595.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="579.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="563.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="547.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="531.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="515.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="499.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="483.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="467.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="451.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="435.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="419.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="403.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="387.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="371.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="355.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="339.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="323.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="307.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="291.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="275.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="259.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="243.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="227.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="211.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="195.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.8" y="179.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.8" y="163.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.8" y="147.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1178.8" y="131.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.8" y="115.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.8" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.8" y="99.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="110.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.12%)</title><rect x="1178.8" y="83.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="94.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.12%)</title><rect x="1178.8" y="67.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="78.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.12%)</title><rect x="1178.8" y="51.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.8" y="62.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.12%)</title><rect x="1178.8" y="35.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.2" y="787.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.2" y="771.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1180.2" y="755.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1180.2" y="739.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1180.2" y="723.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1180.2" y="707.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1180.2" y="691.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="702.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1180.2" y="675.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="686.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.12%)</title><rect x="1180.2" y="659.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.2" y="670.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.183] (1 samples, 0.12%)</title><rect x="1180.2" y="643.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.2" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1180.2" y="627.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="638.0"></text>
</g>
<g>
<title>CatchProjNode::Identity(PhaseGVN*) (1 samples, 0.12%)</title><rect x="1180.2" y="611.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.6" y="675.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.6" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.6" y="659.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.6" y="643.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.6" y="627.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.6" y="611.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.6" y="595.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.6" y="579.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.6" y="563.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.6" y="547.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.6" y="531.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.6" y="515.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1181.6" y="499.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1181.6" y="483.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.6" y="494.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.12%)</title><rect x="1181.6" y="467.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.6" y="478.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.12%)</title><rect x="1183.0" y="835.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="846.0"></text>
</g>
<g>
<title>ReplacedNodes::merge_with(ReplacedNodes const&amp;) (1 samples, 0.12%)</title><rect x="1183.0" y="819.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="830.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.24%)</title><rect x="1184.4" y="883.0" width="2.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="894.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.24%)</title><rect x="1184.4" y="867.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.4" y="878.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.12%)</title><rect x="1187.2" y="883.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="894.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.12%)</title><rect x="1187.2" y="867.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.2" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1188.6" y="915.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.6" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.12%)</title><rect x="1188.6" y="899.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.12%)</title><rect x="1188.6" y="883.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.6" y="894.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.12%)</title><rect x="1188.6" y="867.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="878.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.12%)</title><rect x="1188.6" y="851.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>ValueRecorder&lt;_jobject*&gt;::copy_values_to(nmethod*) (1 samples, 0.12%)</title><rect x="1188.6" y="835.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
</g>
</svg>
