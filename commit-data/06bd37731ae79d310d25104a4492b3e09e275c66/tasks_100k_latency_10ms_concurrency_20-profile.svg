<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (249 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 6.43%)</title><rect x="10.0" y="1011.0" width="75.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1022.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 6.43%)</title><rect x="10.0" y="995.0" width="75.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1006.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 6.43%)</title><rect x="10.0" y="979.0" width="75.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="990.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.40%)</title><rect x="10.0" y="963.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.40%)</title><rect x="10.0" y="947.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="10.0" y="931.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="10.0" y="915.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="10.0" y="899.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="10.0" y="883.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="10.0" y="867.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.40%)</title><rect x="10.0" y="851.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="10.0" y="835.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="10.0" y="819.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="10.0" y="803.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$247/1263086258.test (1 samples, 0.40%)</title><rect x="10.0" y="787.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$5 (1 samples, 0.40%)</title><rect x="10.0" y="771.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.40%)</title><rect x="10.0" y="755.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.40%)</title><rect x="10.0" y="739.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.40%)</title><rect x="10.0" y="723.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.40%)</title><rect x="10.0" y="707.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::submit_compile(methodHandle const&amp;, int, CompLevel, JavaThread*) (1 samples, 0.40%)</title><rect x="10.0" y="691.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.40%)</title><rect x="10.0" y="675.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.40%)</title><rect x="10.0" y="659.0" width="4.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="14.7" y="963.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.7" y="974.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 0.80%)</title><rect x="19.5" y="963.0" width="9.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.5" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/37944632.accept (2 samples, 0.80%)</title><rect x="19.5" y="947.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 0.80%)</title><rect x="19.5" y="931.0" width="9.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 0.80%)</title><rect x="19.5" y="915.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 0.80%)</title><rect x="19.5" y="899.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="22.5" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 0.80%)</title><rect x="19.5" y="883.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 0.80%)</title><rect x="19.5" y="867.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.5" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.80%)</title><rect x="19.5" y="851.0" width="9.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.80%)</title><rect x="19.5" y="835.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.80%)</title><rect x="19.5" y="819.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.80%)</title><rect x="19.5" y="803.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.80%)</title><rect x="19.5" y="787.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.80%)</title><rect x="19.5" y="771.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.82%)</title><rect x="29.0" y="963.0" width="56.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.0" y="974.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (12 samples, 4.82%)</title><rect x="29.0" y="947.0" width="56.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.0" y="958.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (10 samples, 4.02%)</title><rect x="29.0" y="931.0" width="47.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.0" y="942.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.61%)</title><rect x="29.0" y="915.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.61%)</title><rect x="29.0" y="899.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.61%)</title><rect x="29.0" y="883.0" width="18.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleDisconnections (1 samples, 0.40%)</title><rect x="29.0" y="867.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (2 samples, 0.80%)</title><rect x="33.7" y="867.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="36.7" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (2 samples, 0.80%)</title><rect x="33.7" y="851.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.7" y="862.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.40%)</title><rect x="33.7" y="835.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.7" y="846.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.40%)</title><rect x="33.7" y="819.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="36.7" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.40%)</title><rect x="33.7" y="803.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="36.7" y="814.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="33.7" y="787.0" width="4.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="36.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="38.4" y="835.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.4" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="38.4" y="819.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="41.4" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="38.4" y="803.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.4" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="38.4" y="787.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.4" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.40%)</title><rect x="38.4" y="771.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.4" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.40%)</title><rect x="38.4" y="755.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.4" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.40%)</title><rect x="38.4" y="739.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.4" y="750.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.40%)</title><rect x="38.4" y="723.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.4" y="734.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.40%)</title><rect x="38.4" y="707.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="43.2" y="867.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="43.2" y="851.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="46.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.40%)</title><rect x="43.2" y="835.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="46.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.40%)</title><rect x="43.2" y="819.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="46.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.40%)</title><rect x="43.2" y="803.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.40%)</title><rect x="43.2" y="787.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="46.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.40%)</title><rect x="43.2" y="771.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="46.2" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.40%)</title><rect x="43.2" y="755.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="46.2" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.40%)</title><rect x="43.2" y="739.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="46.2" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="43.2" y="723.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="46.2" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="43.2" y="707.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="46.2" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.40%)</title><rect x="43.2" y="691.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="46.2" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="43.2" y="675.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="46.2" y="686.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="43.2" y="659.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="46.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (5 samples, 2.01%)</title><rect x="47.9" y="915.0" width="23.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.9" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (5 samples, 2.01%)</title><rect x="47.9" y="899.0" width="23.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="50.9" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (3 samples, 1.20%)</title><rect x="47.9" y="883.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (3 samples, 1.20%)</title><rect x="47.9" y="867.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.80%)</title><rect x="47.9" y="851.0" width="9.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.40%)</title><rect x="47.9" y="835.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.40%)</title><rect x="47.9" y="819.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.40%)</title><rect x="47.9" y="803.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.40%)</title><rect x="47.9" y="787.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.40%)</title><rect x="47.9" y="771.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.40%)</title><rect x="52.7" y="835.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.7" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.40%)</title><rect x="52.7" y="819.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="55.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.40%)</title><rect x="52.7" y="803.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="55.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.40%)</title><rect x="52.7" y="787.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.40%)</title><rect x="52.7" y="771.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="55.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.40%)</title><rect x="52.7" y="755.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="55.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.40%)</title><rect x="57.4" y="851.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.40%)</title><rect x="57.4" y="835.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.40%)</title><rect x="57.4" y="819.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="60.4" y="830.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.40%)</title><rect x="57.4" y="803.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.40%)</title><rect x="62.1" y="883.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.40%)</title><rect x="62.1" y="867.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="62.1" y="851.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.40%)</title><rect x="62.1" y="835.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.40%)</title><rect x="62.1" y="819.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.1" y="830.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.40%)</title><rect x="62.1" y="803.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.1" y="814.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.40%)</title><rect x="62.1" y="787.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="65.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.40%)</title><rect x="66.9" y="883.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="69.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.40%)</title><rect x="66.9" y="867.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="69.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="66.9" y="851.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.40%)</title><rect x="66.9" y="835.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="69.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.40%)</title><rect x="66.9" y="819.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="69.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.40%)</title><rect x="66.9" y="803.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="69.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.40%)</title><rect x="66.9" y="787.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="69.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="71.6" y="915.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="71.6" y="899.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="74.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.40%)</title><rect x="71.6" y="883.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.6" y="894.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.40%)</title><rect x="71.6" y="867.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="74.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.80%)</title><rect x="76.3" y="931.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="79.3" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="81.1" y="915.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.40%)</title><rect x="81.1" y="899.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.1" y="910.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.40%)</title><rect x="81.1" y="883.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="84.1" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (133 samples, 53.41%)</title><rect x="85.8" y="1011.0" width="630.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.8" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (133 samples, 53.41%)</title><rect x="85.8" y="995.0" width="630.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.8" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (133 samples, 53.41%)</title><rect x="85.8" y="979.0" width="630.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.8" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/193259095.run (126 samples, 50.60%)</title><rect x="95.3" y="963.0" width="597.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.3" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/193259095..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (126 samples, 50.60%)</title><rect x="95.3" y="947.0" width="597.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.3" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (126 samples, 50.60%)</title><rect x="95.3" y="931.0" width="597.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.3" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (126 samples, 50.60%)</title><rect x="95.3" y="915.0" width="597.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.3" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (5 samples, 2.01%)</title><rect x="104.8" y="899.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="107.8" y="910.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.01%)</title><rect x="104.8" y="883.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="107.8" y="894.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.01%)</title><rect x="104.8" y="867.0" width="23.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.8" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.20%)</title><rect x="114.3" y="851.0" width="14.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.20%)</title><rect x="114.3" y="835.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$480/1306243518.accept (3 samples, 1.20%)</title><rect x="114.3" y="819.0" width="14.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (3 samples, 1.20%)</title><rect x="114.3" y="803.0" width="14.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.20%)</title><rect x="114.3" y="787.0" width="14.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="117.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.20%)</title><rect x="114.3" y="771.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.20%)</title><rect x="114.3" y="755.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="117.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 1.20%)</title><rect x="114.3" y="739.0" width="14.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/541040868.accept (1 samples, 0.40%)</title><rect x="119.0" y="723.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="122.0" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="123.7" y="723.0" width="4.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="126.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (25 samples, 10.04%)</title><rect x="128.5" y="899.0" width="118.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="131.5" y="910.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (25 samples, 10.04%)</title><rect x="128.5" y="883.0" width="118.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.5" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 10.04%)</title><rect x="128.5" y="867.0" width="118.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="131.5" y="878.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 10.04%)</title><rect x="128.5" y="851.0" width="118.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="131.5" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 10.04%)</title><rect x="128.5" y="835.0" width="118.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="131.5" y="846.0">com/linecorp/d..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 10.04%)</title><rect x="128.5" y="819.0" width="118.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="131.5" y="830.0">com/fasterxml/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 3.61%)</title><rect x="128.5" y="803.0" width="42.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="131.5" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.40%)</title><rect x="128.5" y="787.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="131.5" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.40%)</title><rect x="128.5" y="771.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="131.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="128.5" y="755.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="131.5" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="128.5" y="739.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="131.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="128.5" y="723.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="131.5" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="128.5" y="707.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="131.5" y="718.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.40%)</title><rect x="128.5" y="691.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="131.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.01%)</title><rect x="133.2" y="787.0" width="23.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="136.2" y="798.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.01%)</title><rect x="133.2" y="771.0" width="23.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.2" y="782.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 2.01%)</title><rect x="133.2" y="755.0" width="23.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.2" y="766.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 2.01%)</title><rect x="133.2" y="739.0" width="23.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.2" y="750.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 2.01%)</title><rect x="133.2" y="723.0" width="23.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="136.2" y="734.0">j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.20%)</title><rect x="156.9" y="787.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.20%)</title><rect x="156.9" y="771.0" width="14.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.9" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.80%)</title><rect x="156.9" y="755.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="159.9" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.80%)</title><rect x="156.9" y="739.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="159.9" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.80%)</title><rect x="156.9" y="723.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="159.9" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.80%)</title><rect x="156.9" y="707.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="159.9" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="156.9" y="691.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="159.9" y="702.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.40%)</title><rect x="161.6" y="691.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="164.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.40%)</title><rect x="166.4" y="755.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="169.4" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="166.4" y="739.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="169.4" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="166.4" y="723.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="169.4" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.40%)</title><rect x="166.4" y="707.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="169.4" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="166.4" y="691.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="169.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="166.4" y="675.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="169.4" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.40%)</title><rect x="166.4" y="659.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="169.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 4.02%)</title><rect x="171.1" y="803.0" width="47.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="174.1" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.40%)</title><rect x="171.1" y="787.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="171.1" y="771.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="174.1" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.40%)</title><rect x="175.9" y="787.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.9" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="175.9" y="771.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.9" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="175.9" y="755.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="178.9" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="175.9" y="739.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.9" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="175.9" y="723.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.9" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.40%)</title><rect x="175.9" y="707.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (8 samples, 3.21%)</title><rect x="180.6" y="787.0" width="37.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.6" y="798.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (8 samples, 3.21%)</title><rect x="180.6" y="771.0" width="37.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.6" y="782.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.80%)</title><rect x="180.6" y="755.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.80%)</title><rect x="180.6" y="739.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="183.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.80%)</title><rect x="180.6" y="723.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.80%)</title><rect x="180.6" y="707.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.80%)</title><rect x="180.6" y="691.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="183.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.80%)</title><rect x="180.6" y="675.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="183.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.41%)</title><rect x="190.1" y="755.0" width="28.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.1" y="766.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.41%)</title><rect x="190.1" y="739.0" width="28.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.1" y="750.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.41%)</title><rect x="190.1" y="723.0" width="28.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.1" y="734.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.20%)</title><rect x="199.6" y="707.0" width="14.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="202.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="204.3" y="691.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="204.3" y="675.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="204.3" y="659.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="207.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="204.3" y="643.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="209.0" y="691.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="212.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.40%)</title><rect x="209.0" y="675.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="212.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.40%)</title><rect x="209.0" y="659.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.40%)</title><rect x="213.8" y="707.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="216.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="213.8" y="691.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.40%)</title><rect x="213.8" y="675.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="216.8" y="686.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.40%)</title><rect x="213.8" y="659.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.8" y="670.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.40%)</title><rect x="213.8" y="643.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (6 samples, 2.41%)</title><rect x="218.5" y="803.0" width="28.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="221.5" y="814.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (6 samples, 2.41%)</title><rect x="218.5" y="787.0" width="28.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="221.5" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (6 samples, 2.41%)</title><rect x="218.5" y="771.0" width="28.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="221.5" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (6 samples, 2.41%)</title><rect x="218.5" y="755.0" width="28.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="221.5" y="766.0">co..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (6 samples, 2.41%)</title><rect x="218.5" y="739.0" width="28.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="221.5" y="750.0">ja..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="242.2" y="723.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="245.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="242.2" y="707.0" width="4.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="245.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (94 samples, 37.75%)</title><rect x="246.9" y="899.0" width="445.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.9" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (12 samples, 4.82%)</title><rect x="246.9" y="883.0" width="56.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.9" y="894.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 4.82%)</title><rect x="246.9" y="867.0" width="56.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="249.9" y="878.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 4.82%)</title><rect x="246.9" y="851.0" width="56.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.9" y="862.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 2.41%)</title><rect x="251.7" y="835.0" width="28.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="254.7" y="846.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.20%)</title><rect x="265.9" y="819.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.20%)</title><rect x="265.9" y="803.0" width="14.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.9" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.20%)</title><rect x="280.1" y="835.0" width="14.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="283.1" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="280.1" y="819.0" width="4.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="283.1" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="280.1" y="803.0" width="4.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="283.1" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="284.9" y="819.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="289.6" y="819.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.6" y="830.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.40%)</title><rect x="289.6" y="803.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="292.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 0.80%)</title><rect x="294.3" y="835.0" width="9.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 0.80%)</title><rect x="294.3" y="819.0" width="9.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.80%)</title><rect x="294.3" y="803.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="297.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.20%)</title><rect x="303.8" y="883.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="306.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="303.8" y="867.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="306.8" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="303.8" y="851.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="306.8" y="862.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="303.8" y="835.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="306.8" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="303.8" y="819.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="306.8" y="830.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="303.8" y="803.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="306.8" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.80%)</title><rect x="308.6" y="867.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (16 samples, 6.43%)</title><rect x="318.0" y="883.0" width="75.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="321.0" y="894.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (16 samples, 6.43%)</title><rect x="318.0" y="867.0" width="75.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="321.0" y="878.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 3.61%)</title><rect x="322.8" y="851.0" width="42.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="325.8" y="862.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (9 samples, 3.61%)</title><rect x="322.8" y="835.0" width="42.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="325.8" y="846.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 1.61%)</title><rect x="341.7" y="819.0" width="19.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="344.7" y="830.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.40%)</title><rect x="351.2" y="803.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.2" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.40%)</title><rect x="351.2" y="787.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="354.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="351.2" y="771.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="354.2" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="355.9" y="803.0" width="4.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="358.9" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="360.7" y="819.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="363.7" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 2.41%)</title><rect x="365.4" y="851.0" width="28.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.4" y="862.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 2.41%)</title><rect x="365.4" y="835.0" width="28.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="368.4" y="846.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.80%)</title><rect x="365.4" y="819.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.4" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="374.9" y="819.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.9" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="374.9" y="803.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="377.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.20%)</title><rect x="379.6" y="819.0" width="14.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="382.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.20%)</title><rect x="379.6" y="803.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.20%)</title><rect x="379.6" y="787.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.40%)</title><rect x="384.4" y="771.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="387.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.40%)</title><rect x="389.1" y="771.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="392.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="389.1" y="755.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="392.1" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="389.1" y="739.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="392.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (62 samples, 24.90%)</title><rect x="393.9" y="883.0" width="293.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.9" y="894.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 24.90%)</title><rect x="393.9" y="867.0" width="293.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.9" y="878.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/926294788.process (48 samples, 19.28%)</title><rect x="412.8" y="851.0" width="227.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="415.8" y="862.0">com/linecorp/decaton/benchmark..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (47 samples, 18.88%)</title><rect x="417.6" y="835.0" width="222.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="420.6" y="846.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (46 samples, 18.47%)</title><rect x="417.6" y="819.0" width="217.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.6" y="830.0">com/linecorp/decaton/benchmar..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (43 samples, 17.27%)</title><rect x="427.0" y="803.0" width="203.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="430.0" y="814.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (42 samples, 16.87%)</title><rect x="427.0" y="787.0" width="199.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="430.0" y="798.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (41 samples, 16.47%)</title><rect x="431.8" y="771.0" width="194.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="434.8" y="782.0">JVM_Sleep</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.40%)</title><rect x="441.2" y="755.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="444.2" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.40%)</title><rect x="446.0" y="755.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="449.0" y="766.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.01%)</title><rect x="450.7" y="755.0" width="23.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="453.7" y="766.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (13 samples, 5.22%)</title><rect x="474.4" y="755.0" width="61.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="477.4" y="766.0">__pthr..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.80%)</title><rect x="536.0" y="755.0" width="9.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="539.0" y="766.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.40%)</title><rect x="545.5" y="755.0" width="4.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="548.5" y="766.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.80%)</title><rect x="550.2" y="755.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="553.2" y="766.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (11 samples, 4.42%)</title><rect x="559.7" y="755.0" width="52.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="562.7" y="766.0">os::s..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 2.41%)</title><rect x="564.5" y="739.0" width="28.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="567.5" y="750.0">Mo..</text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="588.2" y="723.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="591.2" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="592.9" y="739.0" width="4.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="595.9" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.80%)</title><rect x="597.6" y="739.0" width="9.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="600.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.80%)</title><rect x="597.6" y="723.0" width="9.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="600.6" y="734.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.40%)</title><rect x="607.1" y="739.0" width="4.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="610.1" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 1.20%)</title><rect x="611.8" y="755.0" width="14.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="614.8" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="626.1" y="787.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="626.1" y="771.0" width="4.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="629.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="630.8" y="803.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="633.8" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="630.8" y="787.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.8" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.40%)</title><rect x="635.5" y="819.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.5" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="635.5" y="803.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.80%)</title><rect x="640.3" y="851.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="643.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.80%)</title><rect x="640.3" y="835.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.80%)</title><rect x="640.3" y="819.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="643.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.80%)</title><rect x="640.3" y="803.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="643.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.80%)</title><rect x="640.3" y="787.0" width="9.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="643.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.80%)</title><rect x="640.3" y="771.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="643.3" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="649.8" y="851.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="652.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="649.8" y="835.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.61%)</title><rect x="654.5" y="851.0" width="19.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="657.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.20%)</title><rect x="673.5" y="851.0" width="14.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.20%)</title><rect x="673.5" y="835.0" width="14.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="676.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.20%)</title><rect x="673.5" y="819.0" width="14.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="676.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.80%)</title><rect x="673.5" y="803.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="676.5" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="673.5" y="787.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="676.5" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="673.5" y="771.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="676.5" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="673.5" y="755.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="676.5" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="673.5" y="739.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="676.5" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="678.2" y="787.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="681.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="682.9" y="803.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="685.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="687.7" y="883.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="690.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="687.7" y="867.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="690.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.40%)</title><rect x="687.7" y="851.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.40%)</title><rect x="687.7" y="835.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="690.7" y="846.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="687.7" y="819.0" width="4.7" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="690.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.01%)</title><rect x="692.4" y="963.0" width="23.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="695.4" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 1.61%)</title><rect x="697.1" y="947.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.61%)</title><rect x="697.1" y="931.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="700.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.61%)</title><rect x="697.1" y="915.0" width="19.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="700.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.61%)</title><rect x="697.1" y="899.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="700.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.61%)</title><rect x="697.1" y="883.0" width="19.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="700.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.80%)</title><rect x="716.1" y="1011.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.1" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.80%)</title><rect x="716.1" y="995.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="719.1" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.80%)</title><rect x="716.1" y="979.0" width="9.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.40%)</title><rect x="716.1" y="963.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="719.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.40%)</title><rect x="716.1" y="947.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="719.1" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.40%)</title><rect x="716.1" y="931.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="719.1" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.40%)</title><rect x="716.1" y="915.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="719.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.40%)</title><rect x="716.1" y="899.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="719.1" y="910.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.40%)</title><rect x="716.1" y="883.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="719.1" y="894.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.40%)</title><rect x="716.1" y="867.0" width="4.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="719.1" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.40%)</title><rect x="716.1" y="851.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="719.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="720.8" y="963.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="720.8" y="947.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="723.8" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.40%)</title><rect x="720.8" y="931.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="723.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.40%)</title><rect x="720.8" y="915.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="723.8" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.40%)</title><rect x="720.8" y="899.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.8" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.40%)</title><rect x="720.8" y="883.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="723.8" y="894.0"></text>
</g>
<g>
<title>start_thread (98 samples, 39.36%)</title><rect x="725.6" y="1011.0" width="464.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="728.6" y="1022.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (98 samples, 39.36%)</title><rect x="725.6" y="995.0" width="464.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="728.6" y="1006.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (98 samples, 39.36%)</title><rect x="725.6" y="979.0" width="464.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="728.6" y="990.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (8 samples, 3.21%)</title><rect x="725.6" y="963.0" width="37.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="728.6" y="974.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 3.21%)</title><rect x="725.6" y="947.0" width="37.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="728.6" y="958.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 2.81%)</title><rect x="725.6" y="931.0" width="33.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="728.6" y="942.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.01%)</title><rect x="735.1" y="915.0" width="23.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="738.1" y="926.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.80%)</title><rect x="749.3" y="899.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.3" y="910.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (1 samples, 0.40%)</title><rect x="754.0" y="883.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="757.0" y="894.0"></text>
</g>
<g>
<title>PLAB::retire() (1 samples, 0.40%)</title><rect x="754.0" y="867.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="757.0" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="754.0" y="851.0" width="4.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="757.0" y="862.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="758.8" y="931.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="761.8" y="942.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="758.8" y="915.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="761.8" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="758.8" y="899.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.8" y="910.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="758.8" y="883.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="761.8" y="894.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.40%)</title><rect x="758.8" y="867.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.8" y="878.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.40%)</title><rect x="758.8" y="851.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="761.8" y="862.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (89 samples, 35.74%)</title><rect x="763.5" y="963.0" width="421.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="766.5" y="974.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (89 samples, 35.74%)</title><rect x="763.5" y="947.0" width="421.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="766.5" y="958.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (89 samples, 35.74%)</title><rect x="763.5" y="931.0" width="421.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="766.5" y="942.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (84 samples, 33.73%)</title><rect x="763.5" y="915.0" width="398.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="766.5" y="926.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Dir..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (84 samples, 33.73%)</title><rect x="763.5" y="899.0" width="398.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="766.5" y="910.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (60 samples, 24.10%)</title><rect x="763.5" y="883.0" width="284.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="766.5" y="894.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.20%)</title><rect x="763.5" y="867.0" width="14.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="766.5" y="878.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 1.20%)</title><rect x="763.5" y="851.0" width="14.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="766.5" y="862.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.40%)</title><rect x="773.0" y="835.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="776.0" y="846.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.40%)</title><rect x="773.0" y="819.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="776.0" y="830.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.40%)</title><rect x="777.7" y="867.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="780.7" y="878.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.40%)</title><rect x="777.7" y="851.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="780.7" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="777.7" y="835.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="780.7" y="846.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.40%)</title><rect x="777.7" y="819.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="780.7" y="830.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.41%)</title><rect x="782.4" y="867.0" width="28.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.4" y="878.0">Ma..</text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.40%)</title><rect x="782.4" y="851.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="785.4" y="862.0"></text>
</g>
<g>
<title>Matcher::init_first_stack_mask() (1 samples, 0.40%)</title><rect x="782.4" y="835.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="785.4" y="846.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.40%)</title><rect x="787.2" y="851.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="790.2" y="862.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.61%)</title><rect x="791.9" y="851.0" width="19.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="794.9" y="862.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.40%)</title><rect x="806.1" y="835.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="809.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (10 samples, 4.02%)</title><rect x="810.9" y="867.0" width="47.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="813.9" y="878.0">Phas..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (10 samples, 4.02%)</title><rect x="810.9" y="851.0" width="47.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="813.9" y="862.0">Phas..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.40%)</title><rect x="810.9" y="835.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="813.9" y="846.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.40%)</title><rect x="815.6" y="835.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="818.6" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="820.4" y="835.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="823.4" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="825.1" y="835.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="828.1" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.40%)</title><rect x="825.1" y="819.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="828.1" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.80%)</title><rect x="829.8" y="835.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="832.8" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.40%)</title><rect x="834.6" y="819.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="837.6" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.40%)</title><rect x="839.3" y="835.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="842.3" y="846.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="839.3" y="819.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="842.3" y="830.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.20%)</title><rect x="844.1" y="835.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="847.1" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.20%)</title><rect x="844.1" y="819.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="847.1" y="830.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="853.5" y="803.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="856.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (40 samples, 16.06%)</title><rect x="858.3" y="867.0" width="189.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="861.3" y="878.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.20%)</title><rect x="858.3" y="851.0" width="14.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="861.3" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="863.0" y="835.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="866.0" y="846.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.40%)</title><rect x="867.8" y="835.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="870.8" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.80%)</title><rect x="872.5" y="851.0" width="9.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="875.5" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="872.5" y="835.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.5" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.40%)</title><rect x="877.2" y="835.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="880.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 1.61%)</title><rect x="882.0" y="851.0" width="18.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="885.0" y="862.0"></text>
</g>
<g>
<title>PhiNode::out_RegMask() const (1 samples, 0.40%)</title><rect x="896.2" y="835.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.2" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.02%)</title><rect x="900.9" y="851.0" width="47.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="903.9" y="862.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.80%)</title><rect x="910.4" y="835.0" width="9.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="913.4" y="846.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.40%)</title><rect x="915.1" y="819.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="918.1" y="830.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.40%)</title><rect x="915.1" y="803.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="918.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.20%)</title><rect x="919.9" y="835.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="922.9" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 1.20%)</title><rect x="934.1" y="835.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="937.1" y="846.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="938.8" y="819.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="941.8" y="830.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.40%)</title><rect x="943.6" y="819.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="946.6" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 1.61%)</title><rect x="948.3" y="851.0" width="19.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="951.3" y="862.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.40%)</title><rect x="957.8" y="835.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="960.8" y="846.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.40%)</title><rect x="962.5" y="835.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (7 samples, 2.81%)</title><rect x="967.3" y="851.0" width="33.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="970.3" y="862.0">Ph..</text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.40%)</title><rect x="976.7" y="835.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="979.7" y="846.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="976.7" y="819.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="979.7" y="830.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="976.7" y="803.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="979.7" y="814.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="976.7" y="787.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="979.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 1.61%)</title><rect x="981.5" y="835.0" width="18.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.5" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.40%)</title><rect x="995.7" y="819.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.7" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.40%)</title><rect x="1000.4" y="851.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.4" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.80%)</title><rect x="1005.2" y="851.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.40%)</title><rect x="1005.2" y="835.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1008.2" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.40%)</title><rect x="1009.9" y="835.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.9" y="846.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.40%)</title><rect x="1009.9" y="819.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1012.9" y="830.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.80%)</title><rect x="1014.7" y="851.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.7" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.80%)</title><rect x="1014.7" y="835.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.7" y="846.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.40%)</title><rect x="1024.1" y="851.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.1" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.80%)</title><rect x="1028.9" y="851.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.9" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="1033.6" y="835.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1036.6" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.80%)</title><rect x="1038.4" y="851.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.4" y="862.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="1038.4" y="835.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1041.4" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="1043.1" y="835.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.1" y="846.0"></text>
</g>
<g>
<title>Compile::Optimize() (17 samples, 6.83%)</title><rect x="1047.8" y="883.0" width="80.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1050.8" y="894.0">Compile::..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (5 samples, 2.01%)</title><rect x="1047.8" y="867.0" width="23.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.8" y="878.0">C..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 2.01%)</title><rect x="1047.8" y="851.0" width="23.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.8" y="862.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1047.8" y="835.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1050.8" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.80%)</title><rect x="1052.6" y="835.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.6" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.40%)</title><rect x="1057.3" y="819.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.3" y="830.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.40%)</title><rect x="1057.3" y="803.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.156] (1 samples, 0.40%)</title><rect x="1062.0" y="835.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1065.0" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1062.0" y="819.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1062.0" y="803.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1062.0" y="787.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1065.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1062.0" y="771.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.0" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1062.0" y="755.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.40%)</title><rect x="1062.0" y="739.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.0" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1066.8" y="835.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.8" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1066.8" y="819.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1069.8" y="830.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1066.8" y="803.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1069.8" y="814.0"></text>
</g>
<g>
<title>Node::set_req_X(unsigned int, Node*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1066.8" y="787.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.8" y="798.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1066.8" y="771.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.80%)</title><rect x="1071.5" y="867.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1074.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.80%)</title><rect x="1071.5" y="851.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (2 samples, 0.80%)</title><rect x="1071.5" y="835.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.80%)</title><rect x="1071.5" y="819.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.80%)</title><rect x="1071.5" y="803.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.80%)</title><rect x="1071.5" y="787.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="771.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.3" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="755.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.3" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="739.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1079.3" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="723.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.3" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="707.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="691.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="675.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1079.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="659.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="643.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1079.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="627.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="611.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="595.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1079.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="579.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1079.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="563.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="547.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1079.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="531.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="515.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="499.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="483.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="467.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="451.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1079.3" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="435.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1079.3" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.40%)</title><rect x="1076.3" y="419.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.3" y="430.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="1081.0" y="867.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1084.0" y="878.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 2.41%)</title><rect x="1085.7" y="867.0" width="28.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1088.7" y="878.0">Ph..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.40%)</title><rect x="1085.7" y="851.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.7" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.40%)</title><rect x="1090.5" y="851.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1093.5" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.61%)</title><rect x="1095.2" y="851.0" width="19.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.2" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.80%)</title><rect x="1104.7" y="835.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.7" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.80%)</title><rect x="1104.7" y="819.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.7" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.80%)</title><rect x="1104.7" y="803.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.20%)</title><rect x="1114.2" y="867.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1117.2" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.20%)</title><rect x="1114.2" y="851.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.2" y="862.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1114.2" y="835.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.2" y="846.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1114.2" y="819.0" width="4.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1117.2" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1114.2" y="803.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.2" y="814.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.40%)</title><rect x="1114.2" y="787.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.2" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1118.9" y="835.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.9" y="846.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1123.7" y="835.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.7" y="846.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1128.4" y="883.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.4" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.41%)</title><rect x="1133.1" y="883.0" width="28.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.1" y="894.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.41%)</title><rect x="1133.1" y="867.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="878.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.41%)</title><rect x="1133.1" y="851.0" width="28.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.1" y="862.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.41%)</title><rect x="1133.1" y="835.0" width="28.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="846.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.41%)</title><rect x="1133.1" y="819.0" width="28.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1136.1" y="830.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.41%)</title><rect x="1133.1" y="803.0" width="28.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="814.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.41%)</title><rect x="1133.1" y="787.0" width="28.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="798.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.41%)</title><rect x="1133.1" y="771.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="782.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.41%)</title><rect x="1133.1" y="755.0" width="28.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.1" y="766.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.41%)</title><rect x="1133.1" y="739.0" width="28.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="750.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.41%)</title><rect x="1133.1" y="723.0" width="28.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="734.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.41%)</title><rect x="1133.1" y="707.0" width="28.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.1" y="718.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1133.1" y="691.0" width="14.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1133.1" y="675.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1133.1" y="659.0" width="14.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1133.1" y="643.0" width="14.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1133.1" y="627.0" width="14.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1133.1" y="611.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.1" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1133.1" y="595.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1136.1" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1133.1" y="579.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1133.1" y="563.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1133.1" y="547.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1133.1" y="531.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1133.1" y="515.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.1" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1133.1" y="499.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.1" y="510.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.40%)</title><rect x="1133.1" y="483.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="494.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.40%)</title><rect x="1133.1" y="467.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.1" y="478.0"></text>
</g>
<g>
<title>ciMethodHandle::get_vmtarget() const (1 samples, 0.40%)</title><rect x="1133.1" y="451.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.1" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1133.1" y="435.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.1" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1133.1" y="419.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.1" y="430.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1133.1" y="403.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1136.1" y="414.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.40%)</title><rect x="1133.1" y="387.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.1" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.40%)</title><rect x="1133.1" y="371.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.1" y="382.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.40%)</title><rect x="1133.1" y="355.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.1" y="366.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.40%)</title><rect x="1133.1" y="339.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1136.1" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1137.9" y="595.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.9" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1137.9" y="579.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.9" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1137.9" y="563.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1137.9" y="547.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1137.9" y="531.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1137.9" y="515.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1137.9" y="499.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1137.9" y="483.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1137.9" y="467.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1137.9" y="451.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1137.9" y="435.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1137.9" y="419.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1137.9" y="403.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.9" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1137.9" y="387.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.9" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1137.9" y="371.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1137.9" y="355.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1137.9" y="339.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1137.9" y="323.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1137.9" y="307.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1137.9" y="291.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.9" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1137.9" y="275.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1137.9" y="259.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1137.9" y="243.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1137.9" y="227.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1137.9" y="211.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.9" y="222.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.40%)</title><rect x="1137.9" y="195.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="206.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.40%)</title><rect x="1137.9" y="179.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.9" y="190.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(Klass*, LinkInfo const&amp;) (1 samples, 0.40%)</title><rect x="1137.9" y="163.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.9" y="174.0"></text>
</g>
<g>
<title>methodHandle::methodHandle(methodHandle const&amp;) (1 samples, 0.40%)</title><rect x="1137.9" y="147.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="611.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="595.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.6" y="606.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.40%)</title><rect x="1142.6" y="579.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="590.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.40%)</title><rect x="1142.6" y="563.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="574.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.40%)</title><rect x="1142.6" y="547.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.6" y="558.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="531.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1142.6" y="515.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.6" y="526.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1142.6" y="499.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="510.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.40%)</title><rect x="1142.6" y="483.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.6" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="467.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="478.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="451.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.6" y="462.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="435.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.6" y="446.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="419.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.6" y="430.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="403.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="414.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="387.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.6" y="398.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="371.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="382.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="355.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.6" y="366.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="339.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.6" y="350.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="323.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="334.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="307.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.6" y="318.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="291.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.6" y="302.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.40%)</title><rect x="1142.6" y="275.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="286.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1142.6" y="259.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.6" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1147.3" y="691.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1147.3" y="675.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1147.3" y="659.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1147.3" y="643.0" width="14.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1147.3" y="627.0" width="14.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1147.3" y="611.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1147.3" y="595.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1147.3" y="579.0" width="14.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1147.3" y="563.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1147.3" y="547.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1147.3" y="531.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.40%)</title><rect x="1147.3" y="515.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.3" y="526.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.40%)</title><rect x="1147.3" y="499.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.3" y="510.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1147.3" y="483.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.3" y="494.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1147.3" y="467.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.1" y="515.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1152.1" y="499.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1152.1" y="483.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1152.1" y="467.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1152.1" y="451.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1155.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1152.1" y="435.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.1" y="419.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1152.1" y="403.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.1" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1152.1" y="387.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1152.1" y="371.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1152.1" y="355.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1152.1" y="339.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.1" y="323.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1152.1" y="307.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1152.1" y="291.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1152.1" y="275.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1152.1" y="259.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1152.1" y="243.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1152.1" y="227.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1152.1" y="211.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.1" y="222.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.80%)</title><rect x="1152.1" y="195.0" width="9.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.1" y="206.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1152.1" y="179.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.1" y="190.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1152.1" y="163.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1155.1" y="174.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1152.1" y="147.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1152.1" y="131.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.1" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1152.1" y="115.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.1" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1152.1" y="99.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.1" y="110.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1156.8" y="179.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.8" y="190.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1156.8" y="163.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.8" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1156.8" y="147.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.8" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1156.8" y="131.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1156.8" y="115.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1159.8" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1156.8" y="99.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.8" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1156.8" y="83.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1159.8" y="94.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1156.8" y="67.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.8" y="78.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.40%)</title><rect x="1156.8" y="51.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1159.8" y="62.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1156.8" y="35.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.8" y="46.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.61%)</title><rect x="1161.6" y="915.0" width="18.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.61%)</title><rect x="1161.6" y="899.0" width="18.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1164.6" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.61%)</title><rect x="1161.6" y="883.0" width="18.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.6" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.61%)</title><rect x="1161.6" y="867.0" width="18.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.40%)</title><rect x="1161.6" y="851.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.6" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.40%)</title><rect x="1161.6" y="835.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.40%)</title><rect x="1161.6" y="819.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1164.6" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.40%)</title><rect x="1161.6" y="803.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1161.6" y="787.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.6" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1161.6" y="771.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1161.6" y="755.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.40%)</title><rect x="1161.6" y="739.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1164.6" y="750.0"></text>
</g>
<g>
<title>ciMethod::code_size_for_inlining() (1 samples, 0.40%)</title><rect x="1161.6" y="723.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.6" y="734.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 1.20%)</title><rect x="1166.3" y="851.0" width="14.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.3" y="862.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.80%)</title><rect x="1166.3" y="835.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.3" y="846.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (2 samples, 0.80%)</title><rect x="1166.3" y="819.0" width="9.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.3" y="830.0"></text>
</g>
<g>
<title>LIRGenerator::do_NewInstance(NewInstance*) (1 samples, 0.40%)</title><rect x="1166.3" y="803.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="814.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.40%)</title><rect x="1166.3" y="787.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1169.3" y="798.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.40%)</title><rect x="1166.3" y="771.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.3" y="782.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.40%)</title><rect x="1166.3" y="755.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.3" y="766.0"></text>
</g>
<g>
<title>ResourceBitMap::ResourceBitMap(unsigned long, bool) (1 samples, 0.40%)</title><rect x="1166.3" y="739.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.3" y="750.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1166.3" y="723.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.3" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="1166.3" y="707.0" width="4.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1169.3" y="718.0"></text>
</g>
<g>
<title>LIRGenerator::do_StoreField(StoreField*) (1 samples, 0.40%)</title><rect x="1171.0" y="803.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.0" y="814.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="1171.0" y="787.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1174.0" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.40%)</title><rect x="1175.8" y="835.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.8" y="846.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.40%)</title><rect x="1175.8" y="819.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1178.8" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.40%)</title><rect x="1180.5" y="915.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="926.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1180.5" y="899.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1180.5" y="883.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.5" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1180.5" y="867.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="878.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1180.5" y="851.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.5" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.40%)</title><rect x="1180.5" y="835.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.5" y="846.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.40%)</title><rect x="1185.3" y="963.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.3" y="974.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.40%)</title><rect x="1185.3" y="947.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.3" y="958.0"></text>
</g>
<g>
<title>StatSamplerTask::task() (1 samples, 0.40%)</title><rect x="1185.3" y="931.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="942.0"></text>
</g>
<g>
<title>PerfLongVariant::sample() (1 samples, 0.40%)</title><rect x="1185.3" y="915.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="926.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.40%)</title><rect x="1185.3" y="899.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.3" y="910.0"></text>
</g>
</g>
</svg>
