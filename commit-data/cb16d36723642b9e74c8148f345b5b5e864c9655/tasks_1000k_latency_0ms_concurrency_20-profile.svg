<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1430" onload="init(evt)" viewBox="0 0 1200 1430" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1413"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1413"> </text>
<g id="frames">
<g>
<title>all (1,170 samples, 100.00%)</title><rect x="10.0" y="1379.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1390.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.17%)</title><rect x="10.0" y="1363.0" width="2.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="10.0" y="1347.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.09%)</title><rect x="10.0" y="1331.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.09%)</title><rect x="11.0" y="1331.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="1342.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.09%)</title><rect x="11.0" y="1315.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.0" y="1326.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.09%)</title><rect x="11.0" y="1299.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="1310.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.09%)</title><rect x="11.0" y="1283.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="1294.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.09%)</title><rect x="12.0" y="1363.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.0" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="12.0" y="1347.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.0" y="1358.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.09%)</title><rect x="12.0" y="1331.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (235 samples, 20.09%)</title><rect x="13.0" y="1363.0" width="237.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="1374.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (235 samples, 20.09%)</title><rect x="13.0" y="1347.0" width="237.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="16.0" y="1358.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="14.0" y="1331.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="17.0" y="1342.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="14.0" y="1315.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="17.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (230 samples, 19.66%)</title><rect x="15.0" y="1331.0" width="232.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.0" y="1342.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.09%)</title><rect x="17.1" y="1315.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.09%)</title><rect x="17.1" y="1299.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="17.1" y="1283.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="17.1" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.1" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="17.1" y="1251.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="20.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="17.1" y="1235.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="20.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="17.1" y="1219.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.1" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.1" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.1" y="1171.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="20.1" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.09%)</title><rect x="17.1" y="1155.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="20.1" y="1166.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="17.1" y="1139.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="20.1" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.17%)</title><rect x="18.1" y="1315.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.17%)</title><rect x="18.1" y="1299.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.1" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="18.1" y="1283.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.1" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="19.1" y="1267.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.1" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="19.1" y="1251.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="19.1" y="1235.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="22.1" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="19.1" y="1219.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.1" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="19.1" y="1203.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.1" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.1" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.1" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="19.1" y="1171.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.1" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="19.1" y="1155.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="22.1" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (4 samples, 0.34%)</title><rect x="20.1" y="1315.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (4 samples, 0.34%)</title><rect x="20.1" y="1299.0" width="4.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.1" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.34%)</title><rect x="20.1" y="1283.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1675787348.accept (4 samples, 0.34%)</title><rect x="20.1" y="1267.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.34%)</title><rect x="20.1" y="1251.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (4 samples, 0.34%)</title><rect x="20.1" y="1235.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.1" y="1246.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.17%)</title><rect x="22.1" y="1219.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="25.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="24.1" y="1315.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.1" y="1326.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="24.1" y="1299.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="27.1" y="1310.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="24.1" y="1283.0" width="1.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="27.1" y="1294.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (171 samples, 14.62%)</title><rect x="25.1" y="1315.0" width="172.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.1" y="1326.0">java/lang/Iterable.for..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/761424759.accept (161 samples, 13.76%)</title><rect x="26.1" y="1299.0" width="162.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.1" y="1310.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (161 samples, 13.76%)</title><rect x="26.1" y="1283.0" width="162.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="29.1" y="1294.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (148 samples, 12.65%)</title><rect x="26.1" y="1267.0" width="149.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="29.1" y="1278.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (148 samples, 12.65%)</title><rect x="26.1" y="1251.0" width="149.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.1" y="1262.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (148 samples, 12.65%)</title><rect x="26.1" y="1235.0" width="149.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="29.1" y="1246.0">com/linecorp/decato..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (148 samples, 12.65%)</title><rect x="26.1" y="1219.0" width="149.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.1" y="1230.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (148 samples, 12.65%)</title><rect x="26.1" y="1203.0" width="149.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.1" y="1214.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (134 samples, 11.45%)</title><rect x="40.3" y="1187.0" width="135.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.3" y="1198.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 9.74%)</title><rect x="40.3" y="1171.0" width="114.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="43.3" y="1182.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (11 samples, 0.94%)</title><rect x="40.3" y="1155.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (11 samples, 0.94%)</title><rect x="40.3" y="1139.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 0.94%)</title><rect x="40.3" y="1123.0" width="11.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.17%)</title><rect x="49.3" y="1107.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.26%)</title><rect x="51.4" y="1155.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.26%)</title><rect x="51.4" y="1139.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.4" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.26%)</title><rect x="51.4" y="1123.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="54.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.26%)</title><rect x="51.4" y="1107.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="54.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (100 samples, 8.55%)</title><rect x="54.4" y="1155.0" width="100.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="57.4" y="1166.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (100 samples, 8.55%)</title><rect x="54.4" y="1139.0" width="100.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.4" y="1150.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (100 samples, 8.55%)</title><rect x="54.4" y="1123.0" width="100.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.4" y="1134.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (100 samples, 8.55%)</title><rect x="54.4" y="1107.0" width="100.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.4" y="1118.0">java/util/co..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (99 samples, 8.46%)</title><rect x="55.4" y="1091.0" width="99.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="58.4" y="1102.0">jdk/internal..</text>
</g>
<g>
<title>Unsafe_Unpark (40 samples, 3.42%)</title><rect x="55.4" y="1075.0" width="40.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="58.4" y="1086.0">Uns..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.34%)</title><rect x="61.4" y="1059.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="64.4" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.09%)</title><rect x="65.5" y="1059.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="68.5" y="1070.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.26%)</title><rect x="66.5" y="1059.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="69.5" y="1070.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.60%)</title><rect x="69.5" y="1059.0" width="7.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="72.5" y="1070.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.09%)</title><rect x="74.5" y="1043.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="77.5" y="1054.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.09%)</title><rect x="75.6" y="1043.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="78.6" y="1054.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.09%)</title><rect x="76.6" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="79.6" y="1070.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.43%)</title><rect x="77.6" y="1059.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="80.6" y="1070.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (2 samples, 0.17%)</title><rect x="82.6" y="1059.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="85.6" y="1070.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.94%)</title><rect x="84.6" y="1059.0" width="11.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="87.6" y="1070.0"></text>
</g>
<g>
<title>__pthread_cond_signal (59 samples, 5.04%)</title><rect x="95.7" y="1075.0" width="59.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="98.7" y="1086.0">__pthr..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.85%)</title><rect x="155.2" y="1171.0" width="10.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (10 samples, 0.85%)</title><rect x="155.2" y="1155.0" width="10.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.51%)</title><rect x="159.3" y="1139.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="162.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.51%)</title><rect x="159.3" y="1123.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="162.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (10 samples, 0.85%)</title><rect x="165.3" y="1171.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="168.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.85%)</title><rect x="165.3" y="1155.0" width="10.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="168.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.85%)</title><rect x="165.3" y="1139.0" width="10.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="168.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.85%)</title><rect x="165.3" y="1123.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.17%)</title><rect x="173.4" y="1107.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 0.85%)</title><rect x="175.4" y="1267.0" width="10.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="178.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 0.85%)</title><rect x="175.4" y="1251.0" width="10.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.4" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.85%)</title><rect x="175.4" y="1235.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 0.85%)</title><rect x="175.4" y="1219.0" width="10.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="178.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.43%)</title><rect x="180.4" y="1203.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="183.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (5 samples, 0.43%)</title><rect x="180.4" y="1187.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="183.4" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.26%)</title><rect x="185.5" y="1267.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.26%)</title><rect x="185.5" y="1251.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="188.5" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="187.5" y="1235.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.09%)</title><rect x="187.5" y="1219.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="190.5" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (1 samples, 0.09%)</title><rect x="188.5" y="1299.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="191.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.17%)</title><rect x="189.5" y="1299.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="192.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.17%)</title><rect x="189.5" y="1283.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="192.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.51%)</title><rect x="191.5" y="1299.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.51%)</title><rect x="191.5" y="1283.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="194.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="191.5" y="1267.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="194.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.26%)</title><rect x="191.5" y="1251.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="194.5" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (3 samples, 0.26%)</title><rect x="191.5" y="1235.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="194.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (3 samples, 0.26%)</title><rect x="194.6" y="1267.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="197.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (49 samples, 4.19%)</title><rect x="197.6" y="1315.0" width="49.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.6" y="1326.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (49 samples, 4.19%)</title><rect x="197.6" y="1299.0" width="49.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="200.6" y="1310.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquireAndEnsureOpen (1 samples, 0.09%)</title><rect x="198.6" y="1283.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="201.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.acquire (1 samples, 0.09%)</title><rect x="198.6" y="1267.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="201.6" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (31 samples, 2.65%)</title><rect x="199.6" y="1283.0" width="31.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="202.6" y="1294.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (30 samples, 2.56%)</title><rect x="199.6" y="1267.0" width="30.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.6" y="1278.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.09%)</title><rect x="199.6" y="1251.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="202.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.09%)</title><rect x="199.6" y="1235.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.6" y="1246.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.09%)</title><rect x="199.6" y="1219.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$473/1366429416.accept (1 samples, 0.09%)</title><rect x="199.6" y="1203.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.09%)</title><rect x="199.6" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.6" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="199.6" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.6" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="199.6" y="1155.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="202.6" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="199.6" y="1139.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="202.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (29 samples, 2.48%)</title><rect x="200.6" y="1251.0" width="29.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.6" y="1262.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (24 samples, 2.05%)</title><rect x="200.6" y="1235.0" width="24.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="203.6" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (24 samples, 2.05%)</title><rect x="200.6" y="1219.0" width="24.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.6" y="1230.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.17%)</title><rect x="201.6" y="1203.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="204.6" y="1214.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.17%)</title><rect x="201.6" y="1187.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.6" y="1198.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.17%)</title><rect x="201.6" y="1171.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.6" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.17%)</title><rect x="201.6" y="1155.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.6" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="201.6" y="1139.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="204.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.09%)</title><rect x="202.6" y="1123.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (7 samples, 0.60%)</title><rect x="203.6" y="1203.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="206.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.51%)</title><rect x="203.6" y="1187.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="206.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.51%)</title><rect x="203.6" y="1171.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (6 samples, 0.51%)</title><rect x="203.6" y="1155.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="206.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.51%)</title><rect x="203.6" y="1139.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="206.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.43%)</title><rect x="204.6" y="1123.0" width="5.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.6" y="1134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.09%)</title><rect x="208.7" y="1107.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="211.7" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="208.7" y="1091.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="211.7" y="1102.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.09%)</title><rect x="208.7" y="1075.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="211.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.09%)</title><rect x="209.7" y="1187.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.7" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.09%)</title><rect x="209.7" y="1171.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="212.7" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.09%)</title><rect x="209.7" y="1155.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="212.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.09%)</title><rect x="209.7" y="1139.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.7" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (14 samples, 1.20%)</title><rect x="210.7" y="1203.0" width="14.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="213.7" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (14 samples, 1.20%)</title><rect x="210.7" y="1187.0" width="14.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.7" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="210.7" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="213.7" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="210.7" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="213.7" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="210.7" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="213.7" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="210.7" y="1123.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="213.7" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (13 samples, 1.11%)</title><rect x="211.7" y="1171.0" width="13.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="214.7" y="1182.0"></text>
</g>
<g>
<title>java/util/Optional.of (13 samples, 1.11%)</title><rect x="211.7" y="1155.0" width="13.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.7" y="1166.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="221.8" y="1139.0" width="3.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="224.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.17%)</title><rect x="224.8" y="1235.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="227.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.17%)</title><rect x="224.8" y="1219.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="227.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.09%)</title><rect x="224.8" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="227.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.09%)</title><rect x="224.8" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="227.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="224.8" y="1171.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="224.8" y="1155.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="227.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.09%)</title><rect x="225.8" y="1203.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.09%)</title><rect x="225.8" y="1187.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="228.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="225.8" y="1171.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="228.8" y="1182.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedValueIterator.next (1 samples, 0.09%)</title><rect x="225.8" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.8" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedHashIterator.nextNode (1 samples, 0.09%)</title><rect x="225.8" y="1139.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="228.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (2 samples, 0.17%)</title><rect x="226.8" y="1235.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="229.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.17%)</title><rect x="226.8" y="1219.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="226.8" y="1203.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="229.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.17%)</title><rect x="226.8" y="1187.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="229.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.09%)</title><rect x="226.8" y="1171.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.8" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="226.8" y="1155.0" width="1.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="229.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="227.8" y="1171.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="227.8" y="1155.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.09%)</title><rect x="227.8" y="1139.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.09%)</title><rect x="228.9" y="1235.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.09%)</title><rect x="229.9" y="1267.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.26%)</title><rect x="230.9" y="1283.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.17%)</title><rect x="230.9" y="1267.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.17%)</title><rect x="230.9" y="1251.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.17%)</title><rect x="230.9" y="1235.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.17%)</title><rect x="230.9" y="1219.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.17%)</title><rect x="230.9" y="1203.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.17%)</title><rect x="230.9" y="1187.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.17%)</title><rect x="230.9" y="1171.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="233.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.17%)</title><rect x="230.9" y="1155.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="230.9" y="1139.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="230.9" y="1123.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.9" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="230.9" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.9" y="1118.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="230.9" y="1091.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="233.9" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="231.9" y="1139.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.09%)</title><rect x="232.9" y="1267.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="235.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (1 samples, 0.09%)</title><rect x="232.9" y="1251.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.09%)</title><rect x="232.9" y="1235.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="235.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.09%)</title><rect x="232.9" y="1219.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.09%)</title><rect x="232.9" y="1203.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.09%)</title><rect x="233.9" y="1283.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="236.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.09%)</title><rect x="233.9" y="1267.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.60%)</title><rect x="234.9" y="1283.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.43%)</title><rect x="234.9" y="1267.0" width="5.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.09%)</title><rect x="234.9" y="1251.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.09%)</title><rect x="234.9" y="1235.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="237.9" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="234.9" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="237.9" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="234.9" y="1203.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.9" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="234.9" y="1187.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.9" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="234.9" y="1171.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="237.9" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="234.9" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.9" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="234.9" y="1139.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.9" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.09%)</title><rect x="234.9" y="1123.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.9" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="234.9" y="1107.0" width="1.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="237.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.34%)</title><rect x="235.9" y="1251.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.34%)</title><rect x="235.9" y="1235.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.34%)</title><rect x="235.9" y="1219.0" width="4.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.26%)</title><rect x="235.9" y="1203.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.26%)</title><rect x="235.9" y="1187.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="238.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.26%)</title><rect x="235.9" y="1171.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.09%)</title><rect x="235.9" y="1155.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.9" y="1166.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.09%)</title><rect x="235.9" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.9" y="1150.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="235.9" y="1123.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.9" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="235.9" y="1107.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="238.9" y="1118.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="235.9" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="238.9" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.09%)</title><rect x="235.9" y="1075.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="238.9" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="235.9" y="1059.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="238.9" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.09%)</title><rect x="235.9" y="1043.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="238.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.17%)</title><rect x="236.9" y="1155.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="239.9" y="1166.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.17%)</title><rect x="236.9" y="1139.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.9" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.17%)</title><rect x="236.9" y="1123.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="239.9" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.17%)</title><rect x="236.9" y="1107.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="239.9" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="237.9" y="1091.0" width="1.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="240.9" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="238.9" y="1203.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="241.9" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="238.9" y="1187.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="241.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.17%)</title><rect x="239.9" y="1267.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="242.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.09%)</title><rect x="239.9" y="1251.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.09%)</title><rect x="239.9" y="1235.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="242.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.isUpdateDue (1 samples, 0.09%)</title><rect x="239.9" y="1219.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.hasFetchInProgress (1 samples, 0.09%)</title><rect x="239.9" y="1203.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.09%)</title><rect x="241.0" y="1251.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="241.0" y="1235.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="244.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.09%)</title><rect x="241.0" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="244.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.09%)</title><rect x="241.0" y="1203.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.09%)</title><rect x="241.0" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.09%)</title><rect x="241.0" y="1171.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.0" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.09%)</title><rect x="241.0" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="244.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.26%)</title><rect x="242.0" y="1283.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.26%)</title><rect x="242.0" y="1267.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="245.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.09%)</title><rect x="242.0" y="1251.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="245.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.09%)</title><rect x="242.0" y="1235.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="245.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.09%)</title><rect x="242.0" y="1219.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.09%)</title><rect x="242.0" y="1203.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="245.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="242.0" y="1187.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="245.0" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="242.0" y="1171.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="245.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="242.0" y="1155.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="245.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.17%)</title><rect x="243.0" y="1251.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.09%)</title><rect x="243.0" y="1235.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="246.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.09%)</title><rect x="243.0" y="1219.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="243.0" y="1203.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.09%)</title><rect x="243.0" y="1187.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.09%)</title><rect x="244.0" y="1235.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.09%)</title><rect x="244.0" y="1219.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="247.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.17%)</title><rect x="245.0" y="1283.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.17%)</title><rect x="245.0" y="1267.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="248.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.17%)</title><rect x="245.0" y="1251.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="248.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.09%)</title><rect x="246.0" y="1235.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.09%)</title><rect x="246.0" y="1219.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="249.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Max.update (1 samples, 0.09%)</title><rect x="246.0" y="1203.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.09%)</title><rect x="247.0" y="1331.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="250.0" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.09%)</title><rect x="247.0" y="1315.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="250.0" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.09%)</title><rect x="247.0" y="1299.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.0" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.09%)</title><rect x="247.0" y="1283.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.0" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.09%)</title><rect x="247.0" y="1267.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="250.0" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.09%)</title><rect x="247.0" y="1251.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.09%)</title><rect x="247.0" y="1235.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.0" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="247.0" y="1219.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="250.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$253/1892477187.test (1 samples, 0.09%)</title><rect x="247.0" y="1203.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="250.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.09%)</title><rect x="248.0" y="1331.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="251.0" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.09%)</title><rect x="248.0" y="1315.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.0" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.09%)</title><rect x="249.0" y="1331.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="252.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/Thread.run (600 samples, 51.28%)</title><rect x="250.0" y="1363.0" width="605.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.0" y="1374.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (600 samples, 51.28%)</title><rect x="250.0" y="1347.0" width="605.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="253.0" y="1358.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (600 samples, 51.28%)</title><rect x="250.0" y="1331.0" width="605.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="253.0" y="1342.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/538696458.run (407 samples, 34.79%)</title><rect x="253.1" y="1315.0" width="410.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.1" y="1326.0">com/linecorp/decaton/processor/runtime/internal/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (407 samples, 34.79%)</title><rect x="253.1" y="1299.0" width="410.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="256.1" y="1310.0">com/linecorp/decaton/processor/runtime/internal/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (407 samples, 34.79%)</title><rect x="253.1" y="1283.0" width="410.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.1" y="1294.0">com/linecorp/decaton/processor/runtime/internal/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (407 samples, 34.79%)</title><rect x="253.1" y="1267.0" width="410.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.1" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessP..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.09%)</title><rect x="261.1" y="1251.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="264.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 3.16%)</title><rect x="262.1" y="1251.0" width="37.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.1" y="1262.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 3.16%)</title><rect x="262.1" y="1235.0" width="37.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.1" y="1246.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 3.16%)</title><rect x="262.1" y="1219.0" width="37.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="265.1" y="1230.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (29 samples, 2.48%)</title><rect x="270.2" y="1203.0" width="29.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.2" y="1214.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (7 samples, 0.60%)</title><rect x="270.2" y="1187.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.2" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$487/36129567.accept (3 samples, 0.26%)</title><rect x="271.2" y="1171.0" width="3.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.2" y="1182.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.26%)</title><rect x="274.2" y="1171.0" width="3.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="277.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 1.88%)</title><rect x="277.3" y="1187.0" width="22.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.3" y="1198.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$487/36129567.accept (22 samples, 1.88%)</title><rect x="277.3" y="1171.0" width="22.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.3" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (22 samples, 1.88%)</title><rect x="277.3" y="1155.0" width="22.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="280.3" y="1166.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (22 samples, 1.88%)</title><rect x="277.3" y="1139.0" width="22.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.3" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (22 samples, 1.88%)</title><rect x="277.3" y="1123.0" width="22.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.3" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (22 samples, 1.88%)</title><rect x="277.3" y="1107.0" width="22.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="280.3" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.34%)</title><rect x="277.3" y="1091.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="280.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/384116304.accept (2 samples, 0.17%)</title><rect x="277.3" y="1075.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.3" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1119683836.accept (1 samples, 0.09%)</title><rect x="279.3" y="1075.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.3" y="1086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="280.3" y="1075.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="283.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 1.54%)</title><rect x="281.3" y="1091.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1119683836.accept (1 samples, 0.09%)</title><rect x="298.4" y="1075.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.4" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (6 samples, 0.51%)</title><rect x="299.5" y="1251.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="302.5" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (6 samples, 0.51%)</title><rect x="299.5" y="1235.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.5" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.51%)</title><rect x="299.5" y="1219.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.5" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.51%)</title><rect x="299.5" y="1203.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="302.5" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.51%)</title><rect x="299.5" y="1187.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (124 samples, 10.60%)</title><rect x="305.5" y="1251.0" width="125.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.5" y="1262.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (124 samples, 10.60%)</title><rect x="305.5" y="1235.0" width="125.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.5" y="1246.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (124 samples, 10.60%)</title><rect x="305.5" y="1219.0" width="125.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="308.5" y="1230.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 10.43%)</title><rect x="305.5" y="1203.0" width="123.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.5" y="1214.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (122 samples, 10.43%)</title><rect x="305.5" y="1187.0" width="123.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.5" y="1198.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (122 samples, 10.43%)</title><rect x="305.5" y="1171.0" width="123.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.5" y="1182.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (39 samples, 3.33%)</title><rect x="305.5" y="1155.0" width="39.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.5" y="1166.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (8 samples, 0.68%)</title><rect x="305.5" y="1139.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="308.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (8 samples, 0.68%)</title><rect x="305.5" y="1123.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (8 samples, 0.68%)</title><rect x="305.5" y="1107.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="308.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (8 samples, 0.68%)</title><rect x="305.5" y="1091.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.68%)</title><rect x="305.5" y="1075.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.5" y="1086.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="311.6" y="1059.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="314.6" y="1070.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="311.6" y="1043.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="314.6" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (31 samples, 2.65%)</title><rect x="313.6" y="1139.0" width="31.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.6" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (31 samples, 2.65%)</title><rect x="313.6" y="1123.0" width="31.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.6" y="1134.0">co..</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.09%)</title><rect x="313.6" y="1107.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="316.6" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="314.6" y="1107.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="317.6" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="314.6" y="1091.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="317.6" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.17%)</title><rect x="314.6" y="1075.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="317.6" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.17%)</title><rect x="314.6" y="1059.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="317.6" y="1070.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.09%)</title><rect x="314.6" y="1043.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="317.6" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="315.6" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="318.6" y="1054.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.09%)</title><rect x="315.6" y="1027.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="318.6" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (28 samples, 2.39%)</title><rect x="316.6" y="1107.0" width="28.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="319.6" y="1118.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (28 samples, 2.39%)</title><rect x="316.6" y="1091.0" width="28.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="319.6" y="1102.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (22 samples, 1.88%)</title><rect x="316.6" y="1075.0" width="22.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="319.6" y="1086.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (22 samples, 1.88%)</title><rect x="316.6" y="1059.0" width="22.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="319.6" y="1070.0">c..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.51%)</title><rect x="332.7" y="1043.0" width="6.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="335.7" y="1054.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.43%)</title><rect x="333.7" y="1027.0" width="5.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="336.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.17%)</title><rect x="338.8" y="1075.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.17%)</title><rect x="338.8" y="1059.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="341.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (4 samples, 0.34%)</title><rect x="340.8" y="1075.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="343.8" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="340.8" y="1059.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="343.8" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="340.8" y="1043.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="343.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.26%)</title><rect x="341.8" y="1059.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="344.8" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (78 samples, 6.67%)</title><rect x="344.8" y="1155.0" width="78.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.8" y="1166.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.34%)</title><rect x="344.8" y="1139.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="347.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.34%)</title><rect x="344.8" y="1123.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="347.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="347.9" y="1107.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="350.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 0.34%)</title><rect x="348.9" y="1139.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="351.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.34%)</title><rect x="348.9" y="1123.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.9" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.09%)</title><rect x="349.9" y="1107.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="352.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.09%)</title><rect x="349.9" y="1091.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="352.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.17%)</title><rect x="350.9" y="1107.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="353.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.17%)</title><rect x="350.9" y="1091.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="353.9" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.17%)</title><rect x="350.9" y="1075.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (6 samples, 0.51%)</title><rect x="352.9" y="1139.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.34%)</title><rect x="354.9" y="1123.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.9" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="357.9" y="1107.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="360.9" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="357.9" y="1091.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="360.9" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="357.9" y="1075.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="360.9" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="357.9" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="360.9" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="357.9" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="360.9" y="1054.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="357.9" y="1027.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="360.9" y="1038.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="357.9" y="1011.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="360.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (64 samples, 5.47%)</title><rect x="359.0" y="1139.0" width="64.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="362.0" y="1150.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (64 samples, 5.47%)</title><rect x="359.0" y="1123.0" width="64.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="362.0" y="1134.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.85%)</title><rect x="361.0" y="1107.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="364.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.26%)</title><rect x="362.0" y="1091.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.26%)</title><rect x="362.0" y="1075.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.26%)</title><rect x="362.0" y="1059.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="365.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.51%)</title><rect x="365.0" y="1091.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (52 samples, 4.44%)</title><rect x="371.1" y="1107.0" width="52.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="374.1" y="1118.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (52 samples, 4.44%)</title><rect x="371.1" y="1091.0" width="52.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="374.1" y="1102.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (52 samples, 4.44%)</title><rect x="371.1" y="1075.0" width="52.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.1" y="1086.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (15 samples, 1.28%)</title><rect x="377.1" y="1059.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (8 samples, 0.68%)</title><rect x="381.1" y="1043.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="384.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (8 samples, 0.68%)</title><rect x="381.1" y="1027.0" width="8.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (8 samples, 0.68%)</title><rect x="381.1" y="1011.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (8 samples, 0.68%)</title><rect x="381.1" y="995.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="384.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.09%)</title><rect x="389.2" y="1043.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="392.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.17%)</title><rect x="390.2" y="1043.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.17%)</title><rect x="390.2" y="1027.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.2" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="391.2" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.2" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.09%)</title><rect x="392.2" y="1059.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="395.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.60%)</title><rect x="393.2" y="1059.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.51%)</title><rect x="394.3" y="1043.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.51%)</title><rect x="394.3" y="1027.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="397.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.51%)</title><rect x="394.3" y="1011.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (6 samples, 0.51%)</title><rect x="394.3" y="995.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (6 samples, 0.51%)</title><rect x="394.3" y="979.0" width="6.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (6 samples, 0.51%)</title><rect x="394.3" y="963.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="397.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (6 samples, 0.51%)</title><rect x="394.3" y="947.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.3" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (6 samples, 0.51%)</title><rect x="394.3" y="931.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.43%)</title><rect x="400.3" y="1059.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.43%)</title><rect x="400.3" y="1043.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="403.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.43%)</title><rect x="400.3" y="1027.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="403.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.43%)</title><rect x="400.3" y="1011.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="403.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.43%)</title><rect x="400.3" y="995.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="403.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.acquireConstructorAccessor (2 samples, 0.17%)</title><rect x="400.3" y="979.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.17%)</title><rect x="400.3" y="963.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="403.3" y="974.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.26%)</title><rect x="402.3" y="979.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="405.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor2.newInstance (1 samples, 0.09%)</title><rect x="404.3" y="963.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.60%)</title><rect x="405.4" y="1059.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="408.4" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.60%)</title><rect x="405.4" y="1043.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="408.4" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.26%)</title><rect x="405.4" y="1027.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="408.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.34%)</title><rect x="408.4" y="1027.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="411.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.34%)</title><rect x="408.4" y="1011.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.34%)</title><rect x="408.4" y="995.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.09%)</title><rect x="411.4" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.34%)</title><rect x="412.4" y="1059.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="415.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.assignParameter (7 samples, 0.60%)</title><rect x="416.4" y="1059.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="419.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.34%)</title><rect x="419.5" y="1043.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.5" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.43%)</title><rect x="423.5" y="1155.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="426.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.43%)</title><rect x="423.5" y="1139.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.43%)</title><rect x="423.5" y="1123.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="426.5" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.43%)</title><rect x="423.5" y="1107.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="426.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.43%)</title><rect x="423.5" y="1091.0" width="5.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.5" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonStreamContext.&lt;init&gt; (1 samples, 0.09%)</title><rect x="427.5" y="1075.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="430.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (2 samples, 0.17%)</title><rect x="428.5" y="1203.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="431.5" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.09%)</title><rect x="428.5" y="1187.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="431.5" y="1198.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.09%)</title><rect x="429.6" y="1187.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="432.6" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (225 samples, 19.23%)</title><rect x="430.6" y="1251.0" width="226.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="433.6" y="1262.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="434.6" y="1235.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="437.6" y="1246.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.09%)</title><rect x="434.6" y="1219.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="437.6" y="1230.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="435.6" y="1235.0" width="2.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="438.6" y="1246.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.60%)</title><rect x="437.6" y="1235.0" width="7.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="440.6" y="1246.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.34%)</title><rect x="440.6" y="1219.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="443.6" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (38 samples, 3.25%)</title><rect x="444.7" y="1235.0" width="38.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="447.7" y="1246.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (38 samples, 3.25%)</title><rect x="444.7" y="1219.0" width="38.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="447.7" y="1230.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (38 samples, 3.25%)</title><rect x="444.7" y="1203.0" width="38.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="447.7" y="1214.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.37%)</title><rect x="446.7" y="1187.0" width="16.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="449.7" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="446.7" y="1171.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="449.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 1.28%)</title><rect x="447.7" y="1171.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (15 samples, 1.28%)</title><rect x="447.7" y="1155.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="450.7" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.60%)</title><rect x="462.8" y="1187.0" width="7.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="462.8" y="1171.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="465.8" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.51%)</title><rect x="463.8" y="1171.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="466.8" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (13 samples, 1.11%)</title><rect x="469.9" y="1187.0" width="13.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.17%)</title><rect x="470.9" y="1171.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (10 samples, 0.85%)</title><rect x="472.9" y="1171.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (10 samples, 0.85%)</title><rect x="472.9" y="1155.0" width="10.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="475.9" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.43%)</title><rect x="483.0" y="1235.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="486.0" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.43%)</title><rect x="483.0" y="1219.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="486.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (103 samples, 8.80%)</title><rect x="488.1" y="1235.0" width="103.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="491.1" y="1246.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (90 samples, 7.69%)</title><rect x="488.1" y="1219.0" width="90.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="491.1" y="1230.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (23 samples, 1.97%)</title><rect x="488.1" y="1203.0" width="23.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="491.1" y="1214.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 0.17%)</title><rect x="504.2" y="1187.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.17%)</title><rect x="504.2" y="1171.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="507.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.17%)</title><rect x="504.2" y="1155.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="507.2" y="1166.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.17%)</title><rect x="504.2" y="1139.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.2" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.17%)</title><rect x="504.2" y="1123.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="507.2" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.09%)</title><rect x="505.2" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="508.2" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.09%)</title><rect x="505.2" y="1091.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="508.2" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="505.2" y="1075.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="508.2" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="505.2" y="1059.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="508.2" y="1070.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.09%)</title><rect x="505.2" y="1043.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="508.2" y="1054.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.09%)</title><rect x="505.2" y="1027.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="508.2" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.43%)</title><rect x="506.2" y="1187.0" width="5.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="509.2" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (67 samples, 5.73%)</title><rect x="511.2" y="1203.0" width="67.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.2" y="1214.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (57 samples, 4.87%)</title><rect x="518.3" y="1187.0" width="57.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="521.3" y="1198.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (23 samples, 1.97%)</title><rect x="519.3" y="1171.0" width="23.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="522.3" y="1182.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.03%)</title><rect x="530.4" y="1155.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.4" y="1166.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.03%)</title><rect x="530.4" y="1139.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.09%)</title><rect x="542.5" y="1171.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="545.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.09%)</title><rect x="542.5" y="1155.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="545.5" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.09%)</title><rect x="542.5" y="1139.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="545.5" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (32 samples, 2.74%)</title><rect x="543.5" y="1171.0" width="32.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.5" y="1182.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (32 samples, 2.74%)</title><rect x="543.5" y="1155.0" width="32.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="546.5" y="1166.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.34%)</title><rect x="545.5" y="1139.0" width="4.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="548.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.34%)</title><rect x="545.5" y="1123.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="548.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.34%)</title><rect x="545.5" y="1107.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.5" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 2.22%)</title><rect x="549.6" y="1139.0" width="26.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="552.6" y="1150.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.09%)</title><rect x="560.7" y="1123.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="563.7" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (12 samples, 1.03%)</title><rect x="561.7" y="1123.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="564.7" y="1134.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.09%)</title><rect x="569.7" y="1107.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="572.7" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.09%)</title><rect x="570.8" y="1107.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="573.8" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.17%)</title><rect x="571.8" y="1107.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="574.8" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.17%)</title><rect x="571.8" y="1091.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="574.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.17%)</title><rect x="571.8" y="1075.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="574.8" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.17%)</title><rect x="571.8" y="1059.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="574.8" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="572.8" y="1043.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="575.8" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="572.8" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="575.8" y="1038.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.17%)</title><rect x="573.8" y="1123.0" width="2.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="576.8" y="1134.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="575.8" y="1187.0" width="3.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="578.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (13 samples, 1.11%)</title><rect x="578.8" y="1219.0" width="13.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="581.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (13 samples, 1.11%)</title><rect x="578.8" y="1203.0" width="13.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.8" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (13 samples, 1.11%)</title><rect x="578.8" y="1187.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.8" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.34%)</title><rect x="578.8" y="1171.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="581.8" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="578.8" y="1155.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="581.8" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.26%)</title><rect x="579.8" y="1155.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="582.8" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (9 samples, 0.77%)</title><rect x="582.9" y="1171.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="585.9" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.77%)</title><rect x="582.9" y="1155.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="585.9" y="1166.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.60%)</title><rect x="584.9" y="1139.0" width="7.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="587.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 3.76%)</title><rect x="591.9" y="1235.0" width="44.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="594.9" y="1246.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (43 samples, 3.68%)</title><rect x="592.9" y="1219.0" width="43.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="595.9" y="1230.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1909581372.process (6 samples, 0.51%)</title><rect x="602.0" y="1203.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="605.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (6 samples, 0.51%)</title><rect x="602.0" y="1187.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="605.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (3 samples, 0.26%)</title><rect x="602.0" y="1171.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="605.0" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.26%)</title><rect x="602.0" y="1155.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="605.0" y="1166.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (3 samples, 0.26%)</title><rect x="602.0" y="1139.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="605.0" y="1150.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.17%)</title><rect x="603.0" y="1123.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="606.0" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="604.0" y="1107.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="607.0" y="1118.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.09%)</title><rect x="604.0" y="1091.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="607.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/Thread.getId (3 samples, 0.26%)</title><rect x="605.0" y="1171.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="608.0" y="1182.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.26%)</title><rect x="605.0" y="1155.0" width="3.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="608.0" y="1166.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.26%)</title><rect x="605.0" y="1139.0" width="3.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="608.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (7 samples, 0.60%)</title><rect x="608.1" y="1203.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="611.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.09%)</title><rect x="614.1" y="1187.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="617.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.43%)</title><rect x="615.1" y="1203.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="618.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (4 samples, 0.34%)</title><rect x="615.1" y="1187.0" width="4.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.09%)</title><rect x="619.2" y="1187.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.09%)</title><rect x="619.2" y="1171.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="622.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.09%)</title><rect x="619.2" y="1155.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="622.2" y="1166.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.09%)</title><rect x="619.2" y="1139.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="622.2" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.09%)</title><rect x="619.2" y="1123.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.2" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.09%)</title><rect x="620.2" y="1203.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.09%)</title><rect x="620.2" y="1187.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.2" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="621.2" y="1203.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="624.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.09%)</title><rect x="621.2" y="1187.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="624.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.09%)</title><rect x="621.2" y="1171.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.2" y="1182.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.17%)</title><rect x="622.2" y="1203.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="625.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.60%)</title><rect x="624.2" y="1203.0" width="7.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="627.2" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.34%)</title><rect x="627.2" y="1187.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="630.2" y="1198.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.09%)</title><rect x="630.3" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="633.3" y="1182.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="630.3" y="1155.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="633.3" y="1166.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="630.3" y="1139.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.3" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="630.3" y="1123.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="633.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.43%)</title><rect x="631.3" y="1203.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="634.3" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.43%)</title><rect x="631.3" y="1187.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="634.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.43%)</title><rect x="631.3" y="1171.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="634.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.34%)</title><rect x="631.3" y="1155.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="634.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$481/473568258.accept (1 samples, 0.09%)</title><rect x="632.3" y="1139.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.3" y="1150.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.17%)</title><rect x="633.3" y="1139.0" width="2.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="636.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.09%)</title><rect x="635.3" y="1155.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.09%)</title><rect x="636.3" y="1235.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.71%)</title><rect x="637.3" y="1235.0" width="20.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.3" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 1.71%)</title><rect x="637.3" y="1219.0" width="20.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="640.3" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.26%)</title><rect x="647.4" y="1203.0" width="3.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="650.4" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="649.4" y="1187.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="652.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (1 samples, 0.09%)</title><rect x="650.4" y="1203.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="653.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.51%)</title><rect x="651.4" y="1203.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="654.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.26%)</title><rect x="651.4" y="1187.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="654.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$484/188495713.accept (1 samples, 0.09%)</title><rect x="652.4" y="1171.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.4" y="1182.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.09%)</title><rect x="653.5" y="1171.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="656.5" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.17%)</title><rect x="654.5" y="1187.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="657.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$484/188495713.accept (2 samples, 0.17%)</title><rect x="654.5" y="1171.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="657.5" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.17%)</title><rect x="654.5" y="1155.0" width="2.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="657.5" y="1166.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.17%)</title><rect x="654.5" y="1139.0" width="2.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="657.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.09%)</title><rect x="656.5" y="1187.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="659.5" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.51%)</title><rect x="657.5" y="1251.0" width="6.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="660.5" y="1262.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.51%)</title><rect x="657.5" y="1235.0" width="6.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="660.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.17%)</title><rect x="663.5" y="1315.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.5" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.17%)</title><rect x="663.5" y="1299.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.5" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.17%)</title><rect x="663.5" y="1283.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.17%)</title><rect x="663.5" y="1267.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.5" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (188 samples, 16.07%)</title><rect x="665.6" y="1315.0" width="189.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.6" y="1326.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (188 samples, 16.07%)</title><rect x="665.6" y="1299.0" width="189.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.6" y="1310.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (165 samples, 14.10%)</title><rect x="676.6" y="1283.0" width="166.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.6" y="1294.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.60%)</title><rect x="677.7" y="1267.0" width="7.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="680.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.60%)</title><rect x="677.7" y="1251.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="680.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.09%)</title><rect x="683.7" y="1235.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="686.7" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.60%)</title><rect x="684.7" y="1267.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="687.7" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.60%)</title><rect x="684.7" y="1251.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="687.7" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 12.74%)</title><rect x="691.8" y="1267.0" width="150.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="694.8" y="1278.0">java/util/concurren..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (148 samples, 12.65%)</title><rect x="692.8" y="1251.0" width="149.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="695.8" y="1262.0">jdk/internal/misc/U..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="696.8" y="1235.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="699.8" y="1246.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.17%)</title><rect x="697.8" y="1235.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="700.8" y="1246.0"></text>
</g>
<g>
<title>Unsafe_Park (140 samples, 11.97%)</title><rect x="699.8" y="1235.0" width="141.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="702.8" y="1246.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.09%)</title><rect x="700.9" y="1219.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="703.9" y="1230.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.09%)</title><rect x="701.9" y="1219.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="704.9" y="1230.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (30 samples, 2.56%)</title><rect x="702.9" y="1219.0" width="30.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="705.9" y="1230.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.77%)</title><rect x="719.0" y="1203.0" width="9.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="722.0" y="1214.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.09%)</title><rect x="726.1" y="1187.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="729.1" y="1198.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.09%)</title><rect x="727.1" y="1187.0" width="1.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="730.1" y="1198.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.34%)</title><rect x="728.1" y="1203.0" width="4.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="731.1" y="1214.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.09%)</title><rect x="732.1" y="1203.0" width="1.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="735.1" y="1214.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.17%)</title><rect x="733.1" y="1219.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="736.1" y="1230.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.09%)</title><rect x="735.1" y="1219.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="738.1" y="1230.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 3.33%)</title><rect x="736.2" y="1219.0" width="39.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="739.2" y="1230.0">__l..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 4.36%)</title><rect x="775.5" y="1219.0" width="51.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="778.5" y="1230.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.43%)</title><rect x="826.9" y="1219.0" width="5.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="829.9" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="832.0" y="1219.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="835.0" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.26%)</title><rect x="833.0" y="1219.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="836.0" y="1230.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.43%)</title><rect x="836.0" y="1219.0" width="5.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.0" y="1230.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.09%)</title><rect x="841.0" y="1235.0" width="1.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="844.0" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.09%)</title><rect x="842.1" y="1267.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="845.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (12 samples, 1.03%)</title><rect x="843.1" y="1283.0" width="12.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="846.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (12 samples, 1.03%)</title><rect x="843.1" y="1267.0" width="12.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="846.1" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 1.03%)</title><rect x="843.1" y="1251.0" width="12.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 1.03%)</title><rect x="843.1" y="1235.0" width="12.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="846.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.09%)</title><rect x="855.2" y="1363.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="858.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.09%)</title><rect x="855.2" y="1347.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.2" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.09%)</title><rect x="855.2" y="1331.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="858.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.09%)</title><rect x="855.2" y="1315.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.09%)</title><rect x="855.2" y="1299.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="858.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.09%)</title><rect x="855.2" y="1283.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.09%)</title><rect x="855.2" y="1267.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="858.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="855.2" y="1251.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="858.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.09%)</title><rect x="855.2" y="1235.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.2" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.09%)</title><rect x="855.2" y="1219.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="858.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.09%)</title><rect x="855.2" y="1203.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="858.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.09%)</title><rect x="855.2" y="1187.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.2" y="1198.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.iterator (1 samples, 0.09%)</title><rect x="855.2" y="1171.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.2" y="1182.0"></text>
</g>
<g>
<title>start_thread (331 samples, 28.29%)</title><rect x="856.2" y="1363.0" width="333.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="859.2" y="1374.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (331 samples, 28.29%)</title><rect x="856.2" y="1347.0" width="333.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="859.2" y="1358.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (331 samples, 28.29%)</title><rect x="856.2" y="1331.0" width="333.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.2" y="1342.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.17%)</title><rect x="856.2" y="1315.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="859.2" y="1326.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (2 samples, 0.17%)</title><rect x="856.2" y="1299.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="859.2" y="1310.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.09%)</title><rect x="856.2" y="1283.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="859.2" y="1294.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.09%)</title><rect x="856.2" y="1267.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="859.2" y="1278.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.09%)</title><rect x="857.2" y="1283.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="860.2" y="1294.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.09%)</title><rect x="857.2" y="1267.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="860.2" y="1278.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="857.2" y="1251.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="860.2" y="1262.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.09%)</title><rect x="857.2" y="1235.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="860.2" y="1246.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.09%)</title><rect x="857.2" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="860.2" y="1230.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.09%)</title><rect x="857.2" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="860.2" y="1214.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.09%)</title><rect x="857.2" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="860.2" y="1198.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (328 samples, 28.03%)</title><rect x="858.2" y="1315.0" width="330.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="861.2" y="1326.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (327 samples, 27.95%)</title><rect x="858.2" y="1299.0" width="329.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="861.2" y="1310.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (327 samples, 27.95%)</title><rect x="858.2" y="1283.0" width="329.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="861.2" y="1294.0">CompileBroker::invoke_compiler_on_method(Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (326 samples, 27.86%)</title><rect x="858.2" y="1267.0" width="328.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.2" y="1278.0">C2Compiler::compile_method(ciEnv*, ciMethod*..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (326 samples, 27.86%)</title><rect x="858.2" y="1251.0" width="328.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="861.2" y="1262.0">Compile::Compile(ciEnv*, C2Compiler*, ciMeth..</text>
</g>
<g>
<title>Compile::Code_Gen() (133 samples, 11.37%)</title><rect x="858.2" y="1235.0" width="134.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="861.2" y="1246.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.17%)</title><rect x="858.2" y="1219.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="861.2" y="1230.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="858.2" y="1203.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="861.2" y="1214.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.09%)</title><rect x="859.2" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="862.2" y="1214.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.09%)</title><rect x="859.2" y="1187.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="862.2" y="1198.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.09%)</title><rect x="859.2" y="1171.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="862.2" y="1182.0"></text>
</g>
<g>
<title>rep_stosNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.09%)</title><rect x="859.2" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="862.2" y="1166.0"></text>
</g>
<g>
<title>Assembler::rep_stosb() (1 samples, 0.09%)</title><rect x="859.2" y="1139.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.2" y="1150.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.34%)</title><rect x="860.2" y="1219.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="863.2" y="1230.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (3 samples, 0.26%)</title><rect x="861.2" y="1203.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.2" y="1214.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="861.2" y="1187.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.2" y="1198.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.09%)</title><rect x="861.2" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.2" y="1182.0"></text>
</g>
<g>
<title>DebugInformationRecorder::dump_object_pool(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.09%)</title><rect x="862.2" y="1187.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.2" y="1198.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.09%)</title><rect x="862.2" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="865.2" y="1182.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="863.2" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="866.2" y="1198.0"></text>
</g>
<g>
<title>Matcher::match() (23 samples, 1.97%)</title><rect x="864.2" y="1219.0" width="23.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="867.2" y="1230.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.09%)</title><rect x="864.2" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (4 samples, 0.34%)</title><rect x="865.2" y="1203.0" width="4.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="868.2" y="1214.0"></text>
</g>
<g>
<title>ConNode::Opcode() const (2 samples, 0.17%)</title><rect x="866.3" y="1187.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="869.3" y="1198.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) [clone .part.135] (1 samples, 0.09%)</title><rect x="868.3" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="871.3" y="1198.0"></text>
</g>
<g>
<title>Matcher::is_bmi_pattern(Node*, Node*) [clone .part.135] (1 samples, 0.09%)</title><rect x="869.3" y="1203.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="872.3" y="1214.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (17 samples, 1.45%)</title><rect x="870.3" y="1203.0" width="17.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="873.3" y="1214.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (8 samples, 0.68%)</title><rect x="875.3" y="1187.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="878.3" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.09%)</title><rect x="883.4" y="1187.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="886.4" y="1198.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.09%)</title><rect x="883.4" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="886.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.09%)</title><rect x="883.4" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="886.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.26%)</title><rect x="884.4" y="1187.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="887.4" y="1198.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.17%)</title><rect x="885.4" y="1171.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="888.4" y="1182.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (2 samples, 0.17%)</title><rect x="885.4" y="1155.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.4" y="1166.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.09%)</title><rect x="885.4" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.4" y="1150.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="885.4" y="1123.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.4" y="1134.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.09%)</title><rect x="885.4" y="1107.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="888.4" y="1118.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="886.4" y="1139.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="889.4" y="1150.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="886.4" y="1123.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="889.4" y="1134.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.09%)</title><rect x="887.4" y="1219.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.4" y="1230.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (1 samples, 0.09%)</title><rect x="887.4" y="1203.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="890.4" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (12 samples, 1.03%)</title><rect x="888.4" y="1219.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.4" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (12 samples, 1.03%)</title><rect x="888.4" y="1203.0" width="12.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="891.4" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.09%)</title><rect x="888.4" y="1187.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="891.4" y="1198.0"></text>
</g>
<g>
<title>RootNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="888.4" y="1171.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.4" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="889.5" y="1187.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="892.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (2 samples, 0.17%)</title><rect x="889.5" y="1171.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="892.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="891.5" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.5" y="1182.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.17%)</title><rect x="892.5" y="1187.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="895.5" y="1198.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="893.5" y="1171.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (5 samples, 0.43%)</title><rect x="894.5" y="1187.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="897.5" y="1198.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.09%)</title><rect x="898.5" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="901.5" y="1182.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="899.5" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="902.5" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="899.5" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="902.5" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (91 samples, 7.78%)</title><rect x="900.5" y="1219.0" width="91.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="903.5" y="1230.0">PhaseChaiti..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="900.5" y="1203.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="903.5" y="1214.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.09%)</title><rect x="901.6" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="904.6" y="1214.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.26%)</title><rect x="902.6" y="1203.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="905.6" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.34%)</title><rect x="905.6" y="1203.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="908.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.26%)</title><rect x="906.6" y="1187.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="909.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="907.6" y="1171.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="910.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (6 samples, 0.51%)</title><rect x="909.6" y="1203.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="912.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (4 samples, 0.34%)</title><rect x="911.6" y="1187.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.6" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.26%)</title><rect x="912.6" y="1171.0" width="3.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="915.6" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (13 samples, 1.11%)</title><rect x="915.7" y="1203.0" width="13.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="918.7" y="1214.0"></text>
</g>
<g>
<title>Node::rematerialize() const (2 samples, 0.17%)</title><rect x="924.8" y="1187.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="927.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::insert_proj(Block*, unsigned int, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="926.8" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="929.8" y="1198.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="926.8" y="1171.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="929.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.09%)</title><rect x="927.8" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="927.8" y="1171.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="930.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (22 samples, 1.88%)</title><rect x="928.8" y="1203.0" width="22.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="931.8" y="1214.0">P..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.17%)</title><rect x="932.8" y="1187.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="935.8" y="1198.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.17%)</title><rect x="932.8" y="1171.0" width="2.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="935.8" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="934.8" y="1187.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="937.8" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.09%)</title><rect x="935.8" y="1187.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="938.8" y="1198.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.09%)</title><rect x="935.8" y="1171.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="938.8" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (9 samples, 0.77%)</title><rect x="936.9" y="1187.0" width="9.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.9" y="1198.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.17%)</title><rect x="943.9" y="1171.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="946.9" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 0.34%)</title><rect x="945.9" y="1187.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.9" y="1198.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.26%)</title><rect x="945.9" y="1171.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="948.9" y="1182.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="949.0" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.0" y="1182.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.09%)</title><rect x="950.0" y="1187.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="953.0" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.17%)</title><rect x="951.0" y="1203.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.0" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 0.17%)</title><rect x="951.0" y="1187.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="954.0" y="1198.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (2 samples, 0.17%)</title><rect x="951.0" y="1171.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="954.0" y="1182.0"></text>
</g>
<g>
<title>PhaseChaitin::de_ssa() (1 samples, 0.09%)</title><rect x="953.0" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="956.0" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (7 samples, 0.60%)</title><rect x="954.0" y="1203.0" width="7.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="957.0" y="1214.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.09%)</title><rect x="959.0" y="1187.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="962.0" y="1198.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="960.1" y="1187.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="963.1" y="1198.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.17%)</title><rect x="961.1" y="1203.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="964.1" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (12 samples, 1.03%)</title><rect x="963.1" y="1203.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="966.1" y="1214.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.51%)</title><rect x="969.1" y="1187.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="972.1" y="1198.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 0.60%)</title><rect x="975.2" y="1203.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="978.2" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.09%)</title><rect x="975.2" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="978.2" y="1198.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (6 samples, 0.51%)</title><rect x="976.2" y="1187.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.2" y="1198.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.17%)</title><rect x="976.2" y="1171.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="979.2" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="977.2" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.2" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.34%)</title><rect x="978.2" y="1171.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.2" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="981.2" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="984.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.09%)</title><rect x="982.2" y="1203.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="985.2" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.09%)</title><rect x="982.2" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="985.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.17%)</title><rect x="983.2" y="1203.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.2" y="1214.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="984.3" y="1187.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.09%)</title><rect x="985.3" y="1203.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="988.3" y="1214.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.09%)</title><rect x="985.3" y="1187.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="988.3" y="1198.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.51%)</title><rect x="986.3" y="1203.0" width="6.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="989.3" y="1214.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.17%)</title><rect x="990.3" y="1187.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="993.3" y="1198.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.09%)</title><rect x="990.3" y="1171.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.3" y="1182.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="991.3" y="1171.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.3" y="1182.0"></text>
</g>
<g>
<title>Compile::Optimize() (172 samples, 14.70%)</title><rect x="992.3" y="1235.0" width="173.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="995.3" y="1246.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="992.3" y="1219.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="995.3" y="1230.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="992.3" y="1203.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.3" y="1214.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="993.3" y="1219.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="996.3" y="1230.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.09%)</title><rect x="993.3" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="993.3" y="1187.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.3" y="1198.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (32 samples, 2.74%)</title><rect x="994.3" y="1219.0" width="32.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="997.3" y="1230.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (32 samples, 2.74%)</title><rect x="994.3" y="1203.0" width="32.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.3" y="1214.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.09%)</title><rect x="994.3" y="1187.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="995.4" y="1187.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="998.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="997.4" y="1171.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1000.4" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="997.4" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1000.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (18 samples, 1.54%)</title><rect x="998.4" y="1187.0" width="18.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1001.4" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (16 samples, 1.37%)</title><rect x="1000.4" y="1171.0" width="16.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1003.4" y="1182.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Opcode() const (1 samples, 0.09%)</title><rect x="1001.4" y="1155.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1004.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (14 samples, 1.20%)</title><rect x="1002.4" y="1155.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1002.4" y="1139.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (13 samples, 1.11%)</title><rect x="1003.4" y="1139.0" width="13.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1006.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.156] (1 samples, 0.09%)</title><rect x="1016.5" y="1187.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1019.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::collect_potentially_useful_predicates(IdealLoopTree*, Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1016.5" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1019.5" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::find_predicate(Node*) (1 samples, 0.09%)</title><rect x="1016.5" y="1155.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1019.5" y="1166.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.09%)</title><rect x="1016.5" y="1139.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1019.5" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.34%)</title><rect x="1017.5" y="1187.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.43%)</title><rect x="1021.6" y="1187.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.6" y="1198.0"></text>
</g>
<g>
<title>IfProjNode::Identity(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1021.6" y="1171.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.34%)</title><rect x="1022.6" y="1171.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1025.6" y="1182.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (3 samples, 0.26%)</title><rect x="1022.6" y="1155.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.6" y="1166.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (3 samples, 0.26%)</title><rect x="1022.6" y="1139.0" width="3.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1025.6" y="1150.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1025.6" y="1155.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1028.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.09%)</title><rect x="1025.6" y="1139.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1123.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1107.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1028.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1091.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1028.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1059.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1028.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1043.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1028.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1027.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1028.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="1011.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1028.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="995.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1028.6" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1025.6" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.6" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1025.6" y="963.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1028.6" y="974.0"></text>
</g>
<g>
<title>Compile::print_method(CompilerPhaseType, int) [clone .isra.355] (1 samples, 0.09%)</title><rect x="1026.6" y="1219.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1029.6" y="1230.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.09%)</title><rect x="1026.6" y="1203.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1029.6" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.09%)</title><rect x="1026.6" y="1187.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1029.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="1026.6" y="1171.0" width="1.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1029.6" y="1182.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (3 samples, 0.26%)</title><rect x="1027.6" y="1219.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1030.6" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1028.6" y="1203.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1028.6" y="1187.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.6" y="1198.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1028.6" y="1171.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1031.6" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.09%)</title><rect x="1028.6" y="1155.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1139.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1123.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1107.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1031.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1091.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1031.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1075.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1031.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1059.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="1027.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.6" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1028.6" y="1011.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1031.6" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1028.6" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1031.6" y="1006.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.09%)</title><rect x="1029.6" y="1203.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1032.6" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.09%)</title><rect x="1029.6" y="1187.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1032.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (30 samples, 2.56%)</title><rect x="1030.6" y="1219.0" width="30.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1033.6" y="1230.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (30 samples, 2.56%)</title><rect x="1030.6" y="1203.0" width="30.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1033.6" y="1214.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) [clone .part.175] (1 samples, 0.09%)</title><rect x="1030.6" y="1187.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.6" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::is_oop_field(Node*, int, bool*) (1 samples, 0.09%)</title><rect x="1030.6" y="1171.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.6" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1030.6" y="1155.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1033.6" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.09%)</title><rect x="1030.6" y="1139.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1033.6" y="1150.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1030.6" y="1123.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.6" y="1134.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1030.6" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1033.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1031.7" y="1187.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_init_values(JavaObjectNode*, PointsToNode*, PhaseTransform*) (1 samples, 0.09%)</title><rect x="1031.7" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1034.7" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1031.7" y="1155.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.7" y="1166.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.09%)</title><rect x="1031.7" y="1139.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1034.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (28 samples, 2.39%)</title><rect x="1032.7" y="1187.0" width="28.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1035.7" y="1198.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (28 samples, 2.39%)</title><rect x="1032.7" y="1171.0" width="28.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1035.7" y="1182.0">Co..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.43%)</title><rect x="1033.7" y="1155.0" width="5.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1036.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1033.7" y="1139.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1033.7" y="1123.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1033.7" y="1107.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1091.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1036.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1075.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1036.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1059.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1036.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1043.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1027.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1033.7" y="1011.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1036.7" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1033.7" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1036.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="1091.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="1075.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="1059.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="1043.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="1027.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="1011.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="995.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="979.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="963.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="947.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="931.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1034.7" y="915.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="867.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="835.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="819.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1037.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="803.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1037.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="755.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1037.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="723.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1037.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="707.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1037.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="659.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1037.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1037.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="627.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="611.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1037.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1037.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="579.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1037.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1034.7" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1037.7" y="558.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1034.7" y="531.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="899.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="883.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="867.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="851.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1038.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="835.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="819.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1038.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="803.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="787.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="771.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="755.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1038.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="739.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="723.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="707.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="691.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="675.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1038.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="659.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="643.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="627.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="611.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.7" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="595.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1038.7" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="579.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1038.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="563.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.7" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="547.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.7" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="531.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="515.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="499.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1038.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="483.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="467.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="451.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1038.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="435.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1038.7" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="419.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1038.7" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="403.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.7" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="387.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.7" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="371.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1038.7" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="355.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1038.7" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="339.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="323.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1038.7" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="307.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1038.7" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="291.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.7" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1035.7" y="275.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1038.7" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1035.7" y="259.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.7" y="270.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1035.7" y="243.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1038.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1036.7" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.7" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1036.7" y="243.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1039.7" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1036.7" y="227.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1039.7" y="238.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1036.7" y="211.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.7" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1139.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1123.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1040.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1091.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1075.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1059.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1040.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1043.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1040.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="1011.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="963.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1040.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="915.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="899.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1040.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1040.7" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="851.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1040.7" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="835.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1040.7" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.7" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1040.7" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1040.7" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="771.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.7" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.7" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="723.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.7" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1040.7" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="691.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1040.7" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="675.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.7" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="659.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1040.7" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="643.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1040.7" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1040.7" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1037.7" y="611.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1040.7" y="622.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1037.7" y="595.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1040.7" y="606.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1037.7" y="579.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.7" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (22 samples, 1.88%)</title><rect x="1038.7" y="1155.0" width="22.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1041.7" y="1166.0">C..</text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.09%)</title><rect x="1038.7" y="1139.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (7 samples, 0.60%)</title><rect x="1039.7" y="1139.0" width="7.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1042.7" y="1150.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (5 samples, 0.43%)</title><rect x="1041.7" y="1123.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1044.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (14 samples, 1.20%)</title><rect x="1046.8" y="1139.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1123.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1107.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1091.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1075.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1049.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1059.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1027.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="979.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1049.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="963.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="947.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1049.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="883.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="851.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="819.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="803.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="771.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1049.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="755.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="723.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1049.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="707.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="675.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="659.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="627.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="595.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1049.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1049.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="563.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1049.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="547.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="531.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="515.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="499.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="467.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1049.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="451.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1049.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="435.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1049.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="419.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="403.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1049.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="387.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1049.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="371.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="355.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="339.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="323.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1049.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="307.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="291.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1049.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="275.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1049.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="259.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1049.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="243.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1049.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="227.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="211.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1049.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="195.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.8" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="179.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1049.8" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="163.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1049.8" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="147.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.8" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="131.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1049.8" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="115.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1049.8" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="99.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.8" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1046.8" y="83.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1049.8" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (13 samples, 1.11%)</title><rect x="1047.8" y="1123.0" width="13.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (13 samples, 1.11%)</title><rect x="1047.8" y="1107.0" width="13.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1050.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (11 samples, 0.94%)</title><rect x="1047.8" y="1091.0" width="11.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1050.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (11 samples, 0.94%)</title><rect x="1047.8" y="1075.0" width="11.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1050.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1047.8" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1050.8" y="1070.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1047.8" y="1043.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1050.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.85%)</title><rect x="1048.8" y="1059.0" width="10.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="1043.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="1027.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="1011.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="995.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="979.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="947.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="915.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="899.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="851.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1051.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1051.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="771.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1051.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="755.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="739.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="723.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="707.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="691.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="675.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1051.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="643.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="627.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="611.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="595.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="579.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1051.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="547.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1051.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="531.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1051.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="515.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="499.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="483.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="467.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1051.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="451.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="435.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="419.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="403.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1051.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="387.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="371.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1048.8" y="355.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1051.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (9 samples, 0.77%)</title><rect x="1049.8" y="1043.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1049.8" y="1027.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.8" y="1038.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1049.8" y="1011.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1052.8" y="1022.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1049.8" y="995.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1052.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.68%)</title><rect x="1050.8" y="1027.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.43%)</title><rect x="1050.8" y="1011.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1053.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1050.8" y="995.0" width="4.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1050.8" y="979.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1053.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.34%)</title><rect x="1050.8" y="963.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="947.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1053.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="931.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="915.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="899.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="883.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="867.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="851.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1053.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="803.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="787.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="739.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="723.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="707.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="691.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="659.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="643.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="627.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="595.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="579.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.8" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="563.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.8" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="547.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1053.8" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="515.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.8" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="499.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.8" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="483.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1053.8" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.8" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="451.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1053.8" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="435.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1053.8" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="419.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1053.8" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="403.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.8" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.8" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1053.8" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1053.8" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="339.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1053.8" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="323.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1053.8" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="307.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.8" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="291.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.8" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1053.8" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="259.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1053.8" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="243.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1053.8" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1053.8" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1050.8" y="211.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1053.8" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1051.8" y="947.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1054.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1051.8" y="931.0" width="3.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1051.8" y="915.0" width="3.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1054.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1051.8" y="899.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1054.8" y="910.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1051.8" y="883.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1054.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1052.8" y="899.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.8" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1055.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="867.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1055.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="851.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="835.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1055.8" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="819.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="787.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="771.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1052.8" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.8" y="750.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1052.8" y="723.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1053.8" y="883.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1056.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1053.8" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1053.8" y="851.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1056.8" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1053.8" y="835.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1056.8" y="846.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1053.8" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1056.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="995.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1057.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1057.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="947.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1057.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="931.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="915.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1057.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1054.9" y="899.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1057.9" y="910.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1054.9" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1055.9" y="1011.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1058.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1055.9" y="995.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.26%)</title><rect x="1055.9" y="979.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.17%)</title><rect x="1055.9" y="963.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.9" y="974.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (2 samples, 0.17%)</title><rect x="1055.9" y="947.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1058.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="963.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="931.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="915.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="899.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="883.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="867.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1060.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="819.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1057.9" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="1091.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="1075.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="1059.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="1043.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="1027.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="1011.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="995.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="979.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="963.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="947.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="931.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="915.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="899.0" width="2.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="883.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1061.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="867.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1061.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="851.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.17%)</title><rect x="1058.9" y="835.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="803.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="787.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="771.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="755.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1061.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="723.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1061.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="707.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1061.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="691.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1061.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="675.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1061.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1058.9" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.9" y="670.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1058.9" y="643.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1061.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.9" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="803.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="787.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.9" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="771.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.9" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="755.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.9" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="739.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1062.9" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="707.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.9" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="691.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1062.9" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="675.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.9" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.9" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="643.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.9" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="611.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1062.9" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="595.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.9" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="579.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.9" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="563.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.9" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="547.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.9" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="531.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1062.9" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.9" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="499.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1062.9" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="483.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.9" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="467.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.9" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="451.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1062.9" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="435.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1062.9" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="419.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1062.9" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="403.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1062.9" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="387.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="371.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.9" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="355.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1062.9" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="339.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1062.9" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="323.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="307.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.9" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="291.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.9" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="275.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.9" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="259.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1062.9" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="243.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1062.9" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="227.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.9" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="211.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1062.9" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.09%)</title><rect x="1059.9" y="195.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.9" y="206.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1059.9" y="179.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1062.9" y="190.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1059.9" y="163.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1062.9" y="174.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1059.9" y="147.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.9" y="158.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.09%)</title><rect x="1059.9" y="131.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.9" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.09%)</title><rect x="1060.9" y="1219.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1063.9" y="1230.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (4 samples, 0.34%)</title><rect x="1061.9" y="1219.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.9" y="1230.0"></text>
</g>
<g>
<title>MemNode::detect_ptr_independence(Node*, AllocateNode*, Node*, AllocateNode*, PhaseTransform*) (1 samples, 0.09%)</title><rect x="1062.9" y="1203.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.9" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1063.9" y="1203.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1066.9" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.09%)</title><rect x="1063.9" y="1187.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1066.9" y="1198.0"></text>
</g>
<g>
<title>countedloop_phi_from_cmp(CmpINode*, Node*) (1 samples, 0.09%)</title><rect x="1064.9" y="1203.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1067.9" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (33 samples, 2.82%)</title><rect x="1065.9" y="1219.0" width="33.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1068.9" y="1230.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1065.9" y="1203.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1068.9" y="1214.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1065.9" y="1187.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1068.9" y="1198.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1065.9" y="1171.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1068.9" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.09%)</title><rect x="1065.9" y="1155.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.09%)</title><rect x="1065.9" y="1139.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1068.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.09%)</title><rect x="1065.9" y="1123.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1068.9" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.09%)</title><rect x="1065.9" y="1107.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1068.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.17%)</title><rect x="1067.0" y="1203.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.0" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1068.0" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.0" y="1198.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.09%)</title><rect x="1068.0" y="1171.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1071.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (25 samples, 2.14%)</title><rect x="1069.0" y="1203.0" width="25.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.0" y="1214.0">P..</text>
</g>
<g>
<title>IfFalseNode::Opcode() const (1 samples, 0.09%)</title><rect x="1073.0" y="1187.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1076.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 1.71%)</title><rect x="1074.0" y="1187.0" width="20.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.0" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (19 samples, 1.62%)</title><rect x="1075.0" y="1171.0" width="19.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1078.0" y="1182.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.09%)</title><rect x="1077.0" y="1155.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1080.0" y="1166.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1077.0" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.0" y="1150.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1077.0" y="1123.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (16 samples, 1.37%)</title><rect x="1078.1" y="1155.0" width="16.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1081.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.17%)</title><rect x="1094.2" y="1203.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.09%)</title><rect x="1095.2" y="1187.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.26%)</title><rect x="1096.2" y="1203.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.09%)</title><rect x="1097.2" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1100.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.09%)</title><rect x="1097.2" y="1171.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) [clone .part.47] (1 samples, 0.09%)</title><rect x="1097.2" y="1155.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1100.2" y="1166.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.09%)</title><rect x="1097.2" y="1139.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1100.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.09%)</title><rect x="1098.2" y="1187.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1101.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.09%)</title><rect x="1098.2" y="1171.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1101.2" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.09%)</title><rect x="1098.2" y="1155.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1101.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1099.2" y="1219.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1102.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (62 samples, 5.30%)</title><rect x="1100.2" y="1219.0" width="62.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.2" y="1230.0">PhaseI..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1100.2" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.2" y="1214.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1100.2" y="1187.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.2" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (61 samples, 5.21%)</title><rect x="1101.2" y="1203.0" width="61.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.2" y="1214.0">PhaseI..</text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1101.2" y="1187.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.2" y="1198.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.09%)</title><rect x="1101.2" y="1171.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.2" y="1182.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1102.3" y="1187.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.3" y="1198.0"></text>
</g>
<g>
<title>LoadNode::split_through_phi(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1102.3" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.3" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1102.3" y="1155.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1105.3" y="1166.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1102.3" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.3" y="1150.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.09%)</title><rect x="1103.3" y="1171.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.3" y="1182.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1103.3" y="1155.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.3" y="1166.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.17%)</title><rect x="1104.3" y="1187.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1107.3" y="1198.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (3 samples, 0.26%)</title><rect x="1106.3" y="1187.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.3" y="1198.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1108.3" y="1171.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.3" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::is_IterGVN() (1 samples, 0.09%)</title><rect x="1109.3" y="1187.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (24 samples, 2.05%)</title><rect x="1110.3" y="1187.0" width="24.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.3" y="1198.0">P..</text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.09%)</title><rect x="1119.4" y="1171.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.4" y="1182.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.09%)</title><rect x="1119.4" y="1155.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1122.4" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (13 samples, 1.11%)</title><rect x="1120.4" y="1171.0" width="13.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.4" y="1182.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (12 samples, 1.03%)</title><rect x="1120.4" y="1155.0" width="12.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1123.4" y="1166.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.09%)</title><rect x="1132.5" y="1155.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.5" y="1166.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1133.5" y="1171.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.5" y="1182.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.09%)</title><rect x="1133.5" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1136.5" y="1166.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (4 samples, 0.34%)</title><rect x="1134.5" y="1187.0" width="4.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="1198.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (2 samples, 0.17%)</title><rect x="1134.5" y="1171.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.5" y="1182.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (2 samples, 0.17%)</title><rect x="1134.5" y="1155.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.5" y="1166.0"></text>
</g>
<g>
<title>MultiNode::proj_out_or_null(unsigned int) const (1 samples, 0.09%)</title><rect x="1135.5" y="1139.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="1150.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (2 samples, 0.17%)</title><rect x="1136.5" y="1171.0" width="2.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.5" y="1182.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1138.6" y="1187.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.6" y="1198.0"></text>
</g>
<g>
<title>PhiNode::hash() const (3 samples, 0.26%)</title><rect x="1139.6" y="1187.0" width="3.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.6" y="1198.0"></text>
</g>
<g>
<title>TypeNode::hash() const (2 samples, 0.17%)</title><rect x="1140.6" y="1171.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.6" y="1182.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (4 samples, 0.34%)</title><rect x="1142.6" y="1187.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.6" y="1198.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.09%)</title><rect x="1142.6" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.6" y="1182.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.09%)</title><rect x="1143.6" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.6" y="1182.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.09%)</title><rect x="1143.6" y="1155.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.6" y="1166.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.09%)</title><rect x="1143.6" y="1139.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.17%)</title><rect x="1144.6" y="1171.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.17%)</title><rect x="1144.6" y="1155.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.6" y="1166.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.17%)</title><rect x="1144.6" y="1139.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.6" y="1150.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (15 samples, 1.28%)</title><rect x="1146.6" y="1187.0" width="15.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (15 samples, 1.28%)</title><rect x="1146.6" y="1171.0" width="15.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.6" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (15 samples, 1.28%)</title><rect x="1146.6" y="1155.0" width="15.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (15 samples, 1.28%)</title><rect x="1146.6" y="1139.0" width="15.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (15 samples, 1.28%)</title><rect x="1146.6" y="1123.0" width="15.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (14 samples, 1.20%)</title><rect x="1146.6" y="1107.0" width="14.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.6" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (13 samples, 1.11%)</title><rect x="1146.6" y="1091.0" width="13.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.6" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (13 samples, 1.11%)</title><rect x="1146.6" y="1075.0" width="13.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.6" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (11 samples, 0.94%)</title><rect x="1146.6" y="1059.0" width="11.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (10 samples, 0.85%)</title><rect x="1146.6" y="1043.0" width="10.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.6" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (10 samples, 0.85%)</title><rect x="1146.6" y="1027.0" width="10.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.6" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (9 samples, 0.77%)</title><rect x="1146.6" y="1011.0" width="9.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (7 samples, 0.60%)</title><rect x="1146.6" y="995.0" width="7.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.6" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.43%)</title><rect x="1146.6" y="979.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.6" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1146.6" y="963.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.6" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1146.6" y="947.0" width="2.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.6" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1146.6" y="931.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.6" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1146.6" y="915.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.6" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.17%)</title><rect x="1146.6" y="899.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.6" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1146.6" y="883.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.6" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1146.6" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.6" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1146.6" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1149.6" y="862.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1146.6" y="835.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.6" y="846.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1147.6" y="883.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.6" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1147.6" y="867.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.6" y="878.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (3 samples, 0.26%)</title><rect x="1148.6" y="963.0" width="3.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.6" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (3 samples, 0.26%)</title><rect x="1148.6" y="947.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.6" y="958.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (2 samples, 0.17%)</title><rect x="1151.7" y="979.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.7" y="990.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1151.7" y="963.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.7" y="974.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (2 samples, 0.17%)</title><rect x="1153.7" y="995.0" width="2.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.7" y="1006.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1153.7" y="979.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.7" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1155.7" y="1011.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.7" y="1022.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1155.7" y="995.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.7" y="1006.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1156.7" y="1043.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="1054.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1156.7" y="1027.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.7" y="1038.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (2 samples, 0.17%)</title><rect x="1157.7" y="1059.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.7" y="1070.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (2 samples, 0.17%)</title><rect x="1157.7" y="1043.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1160.7" y="1054.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1159.7" y="1091.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.7" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1159.7" y="1075.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.7" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.09%)</title><rect x="1160.8" y="1107.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1160.8" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.8" y="1102.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1161.8" y="1187.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.8" y="1198.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 0.17%)</title><rect x="1162.8" y="1219.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1162.8" y="1203.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.8" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1162.8" y="1187.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="1198.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.09%)</title><rect x="1162.8" y="1171.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.8" y="1182.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*) (1 samples, 0.09%)</title><rect x="1163.8" y="1203.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.8" y="1214.0"></text>
</g>
<g>
<title>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateArrayNode*, Node**, MergeMemNode*, Node**, TypePtr const*, BasicType, Node*, Node*, Node*, Node*, Node*, bool, bool, RegionNode*) (1 samples, 0.09%)</title><rect x="1163.8" y="1187.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1166.8" y="1198.0"></text>
</g>
<g>
<title>MemBarNode::make(Compile*, int, int, Node*) (1 samples, 0.09%)</title><rect x="1163.8" y="1171.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.8" y="1182.0"></text>
</g>
<g>
<title>MemBarNode::MemBarNode(Compile*, int, Node*) (1 samples, 0.09%)</title><rect x="1163.8" y="1155.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.8" y="1166.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.09%)</title><rect x="1164.8" y="1219.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.8" y="1230.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.09%)</title><rect x="1164.8" y="1203.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.8" y="1214.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1165.8" y="1235.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (17 samples, 1.45%)</title><rect x="1167.8" y="1235.0" width="17.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (17 samples, 1.45%)</title><rect x="1167.8" y="1219.0" width="17.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (17 samples, 1.45%)</title><rect x="1167.8" y="1203.0" width="17.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (17 samples, 1.45%)</title><rect x="1167.8" y="1187.0" width="17.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (17 samples, 1.45%)</title><rect x="1167.8" y="1171.0" width="17.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (17 samples, 1.45%)</title><rect x="1167.8" y="1155.0" width="17.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.8" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (12 samples, 1.03%)</title><rect x="1167.8" y="1139.0" width="12.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (12 samples, 1.03%)</title><rect x="1167.8" y="1123.0" width="12.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 1.03%)</title><rect x="1167.8" y="1107.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 1.03%)</title><rect x="1167.8" y="1091.0" width="12.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 1.03%)</title><rect x="1167.8" y="1075.0" width="12.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (12 samples, 1.03%)</title><rect x="1167.8" y="1059.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.43%)</title><rect x="1167.8" y="1043.0" width="5.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.43%)</title><rect x="1167.8" y="1027.0" width="5.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.43%)</title><rect x="1167.8" y="1011.0" width="5.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.43%)</title><rect x="1167.8" y="995.0" width="5.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1170.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.43%)</title><rect x="1167.8" y="979.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1167.8" y="963.0" width="5.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1167.8" y="947.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1167.8" y="931.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1167.8" y="915.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1167.8" y="899.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1167.8" y="883.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1170.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1167.8" y="867.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1167.8" y="851.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1167.8" y="835.0" width="3.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1167.8" y="819.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1167.8" y="803.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1167.8" y="787.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1167.8" y="771.0" width="3.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.8" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1167.8" y="755.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.8" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1167.8" y="739.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1167.8" y="723.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1167.8" y="707.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1167.8" y="691.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1167.8" y="675.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1170.8" y="686.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.09%)</title><rect x="1167.8" y="659.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="670.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.09%)</title><rect x="1167.8" y="643.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="654.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.09%)</title><rect x="1167.8" y="627.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="638.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1167.8" y="611.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.09%)</title><rect x="1167.8" y="595.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.8" y="606.0"></text>
</g>
<g>
<title>TypePtr::xmeet_speculative(TypePtr const*) const (1 samples, 0.09%)</title><rect x="1167.8" y="579.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.8" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1168.8" y="659.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.8" y="670.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1168.8" y="643.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1168.8" y="627.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1168.8" y="611.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1168.8" y="595.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1168.8" y="579.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.8" y="590.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1168.8" y="563.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.8" y="574.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.09%)</title><rect x="1168.8" y="547.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.8" y="558.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.09%)</title><rect x="1168.8" y="531.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.8" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1168.8" y="515.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.8" y="526.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1168.8" y="499.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.8" y="510.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1168.8" y="483.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.8" y="494.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.09%)</title><rect x="1169.8" y="579.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.8" y="590.0"></text>
</g>
<g>
<title>Parse::call_register_finalizer() (1 samples, 0.09%)</title><rect x="1169.8" y="563.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.8" y="574.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.09%)</title><rect x="1169.8" y="547.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.8" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1170.8" y="851.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1170.8" y="835.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1170.8" y="819.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1170.8" y="803.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1170.8" y="787.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1170.8" y="771.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1170.8" y="755.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1173.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1170.8" y="739.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1170.8" y="723.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1173.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1170.8" y="707.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1170.8" y="691.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1170.8" y="675.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1170.8" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1170.8" y="643.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1170.8" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1170.8" y="611.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1170.8" y="595.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1170.8" y="579.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1170.8" y="563.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1170.8" y="547.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1170.8" y="531.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1170.8" y="515.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1170.8" y="499.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1173.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1170.8" y="483.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.8" y="494.0"></text>
</g>
<g>
<title>Parse::add_safepoint() (1 samples, 0.09%)</title><rect x="1170.8" y="467.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.8" y="478.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.09%)</title><rect x="1170.8" y="451.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.8" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.8" y="947.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.8" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.8" y="931.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.8" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1171.8" y="915.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1171.8" y="899.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1171.8" y="883.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1171.8" y="867.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1171.8" y="851.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.8" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.8" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1171.8" y="819.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1171.8" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1171.8" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1171.8" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1171.8" y="755.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.8" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.8" y="739.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.8" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.8" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1171.8" y="707.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1171.8" y="691.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1171.8" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1171.8" y="659.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1171.8" y="643.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1171.8" y="627.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.8" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1171.8" y="611.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1171.8" y="595.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1171.8" y="579.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1171.8" y="563.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1171.8" y="547.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1171.8" y="531.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="542.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1171.8" y="515.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.8" y="526.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1171.8" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="510.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1171.8" y="483.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.8" y="494.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.09%)</title><rect x="1171.8" y="467.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.8" y="478.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.09%)</title><rect x="1171.8" y="451.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="462.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.09%)</title><rect x="1171.8" y="435.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="446.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1171.8" y="419.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.8" y="430.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.09%)</title><rect x="1171.8" y="403.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.8" y="414.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.09%)</title><rect x="1171.8" y="387.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.8" y="398.0"></text>
</g>
<g>
<title>constantPoolHandle::operator=(constantPoolHandle const&amp;) (1 samples, 0.09%)</title><rect x="1171.8" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1172.9" y="1043.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1172.9" y="1027.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.60%)</title><rect x="1172.9" y="1011.0" width="7.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1172.9" y="995.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1172.9" y="979.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.60%)</title><rect x="1172.9" y="963.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.60%)</title><rect x="1172.9" y="947.0" width="7.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.60%)</title><rect x="1172.9" y="931.0" width="7.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.60%)</title><rect x="1172.9" y="915.0" width="7.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.60%)</title><rect x="1172.9" y="899.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.60%)</title><rect x="1172.9" y="883.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.60%)</title><rect x="1172.9" y="867.0" width="7.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.60%)</title><rect x="1172.9" y="851.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.51%)</title><rect x="1172.9" y="835.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.51%)</title><rect x="1172.9" y="819.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.51%)</title><rect x="1172.9" y="803.0" width="6.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.51%)</title><rect x="1172.9" y="787.0" width="6.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.51%)</title><rect x="1172.9" y="771.0" width="6.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.43%)</title><rect x="1172.9" y="755.0" width="5.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.9" y="766.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1172.9" y="739.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.09%)</title><rect x="1172.9" y="723.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.9" y="734.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.09%)</title><rect x="1172.9" y="707.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.9" y="718.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.09%)</title><rect x="1172.9" y="691.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.9" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.09%)</title><rect x="1172.9" y="675.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1173.9" y="739.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1173.9" y="723.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1173.9" y="707.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1173.9" y="691.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1173.9" y="675.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1173.9" y="659.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1173.9" y="643.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1173.9" y="627.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1173.9" y="611.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1173.9" y="595.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1173.9" y="579.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1173.9" y="563.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1173.9" y="547.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1173.9" y="531.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1173.9" y="515.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1173.9" y="499.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1173.9" y="483.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="451.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.9" y="462.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.09%)</title><rect x="1173.9" y="435.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1176.9" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1173.9" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.9" y="430.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1173.9" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.9" y="414.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1173.9" y="387.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.9" y="398.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.9" y="382.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.09%)</title><rect x="1173.9" y="355.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.9" y="366.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1173.9" y="339.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="350.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1173.9" y="323.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.9" y="334.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.09%)</title><rect x="1173.9" y="307.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.9" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1173.9" y="291.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.9" y="302.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1173.9" y="275.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1176.9" y="286.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1173.9" y="259.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.9" y="270.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.09%)</title><rect x="1173.9" y="243.0" width="1.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1176.9" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1174.9" y="547.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1174.9" y="531.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1174.9" y="515.0" width="2.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1174.9" y="499.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1174.9" y="483.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1174.9" y="467.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1174.9" y="451.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="435.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="419.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="403.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="387.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="371.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="355.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1177.9" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="339.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="307.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1174.9" y="259.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.9" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1174.9" y="243.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.9" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1174.9" y="227.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1174.9" y="211.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1174.9" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1174.9" y="179.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.9" y="190.0"></text>
</g>
<g>
<title>Parse::array_store(BasicType) (1 samples, 0.09%)</title><rect x="1174.9" y="163.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.9" y="174.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.09%)</title><rect x="1174.9" y="147.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.9" y="158.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.09%)</title><rect x="1174.9" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1177.9" y="142.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.09%)</title><rect x="1174.9" y="115.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.9" y="126.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.09%)</title><rect x="1174.9" y="99.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.9" y="110.0"></text>
</g>
<g>
<title>GraphKit::final_sync(IdealKit&amp;) (1 samples, 0.09%)</title><rect x="1174.9" y="83.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.9" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="67.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.9" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="51.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.9" y="62.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1174.9" y="35.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.9" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="435.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1175.9" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1175.9" y="403.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1175.9" y="387.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1175.9" y="371.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1175.9" y="355.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="339.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="323.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="334.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.09%)</title><rect x="1175.9" y="307.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.9" y="318.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1175.9" y="291.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.9" y="302.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1175.9" y="275.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.9" y="286.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1175.9" y="259.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="270.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="243.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.9" y="254.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.09%)</title><rect x="1175.9" y="227.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1176.9" y="563.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.9" y="574.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1176.9" y="547.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.9" y="558.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1176.9" y="531.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.09%)</title><rect x="1177.9" y="755.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.9" y="766.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.09%)</title><rect x="1177.9" y="739.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.9" y="750.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.09%)</title><rect x="1177.9" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.9" y="734.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.09%)</title><rect x="1177.9" y="707.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.9" y="718.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.09%)</title><rect x="1177.9" y="691.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="702.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1178.9" y="835.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.9" y="846.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1179.9" y="1139.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1179.9" y="1123.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1179.9" y="1107.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1179.9" y="1091.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1179.9" y="1075.0" width="4.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.9" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1179.9" y="1059.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1179.9" y="1043.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.9" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1179.9" y="1027.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.9" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1179.9" y="1011.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1179.9" y="995.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1179.9" y="979.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1179.9" y="963.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1179.9" y="947.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.34%)</title><rect x="1179.9" y="931.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.34%)</title><rect x="1179.9" y="915.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.34%)</title><rect x="1179.9" y="899.0" width="4.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.34%)</title><rect x="1179.9" y="883.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.9" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.34%)</title><rect x="1179.9" y="867.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.34%)</title><rect x="1179.9" y="851.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="835.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="819.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="803.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="787.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="755.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.9" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="739.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.9" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="723.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="707.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="675.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="659.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1179.9" y="643.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1179.9" y="627.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1179.9" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1179.9" y="595.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1179.9" y="579.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1179.9" y="563.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.9" y="574.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1179.9" y="547.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.9" y="558.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1179.9" y="531.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.09%)</title><rect x="1179.9" y="515.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.9" y="526.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.09%)</title><rect x="1179.9" y="499.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1182.9" y="510.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="1179.9" y="483.0" width="1.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1182.9" y="494.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1180.9" y="835.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1180.9" y="819.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.9" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1180.9" y="803.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.9" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1180.9" y="787.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.9" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1180.9" y="771.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1180.9" y="755.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1180.9" y="739.0" width="3.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.26%)</title><rect x="1180.9" y="723.0" width="3.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.26%)</title><rect x="1180.9" y="707.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.9" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.26%)</title><rect x="1180.9" y="691.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.9" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.26%)</title><rect x="1180.9" y="675.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.26%)</title><rect x="1180.9" y="659.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.26%)</title><rect x="1180.9" y="643.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.17%)</title><rect x="1180.9" y="627.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.17%)</title><rect x="1180.9" y="611.0" width="2.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.17%)</title><rect x="1180.9" y="595.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.17%)</title><rect x="1180.9" y="579.0" width="2.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.17%)</title><rect x="1180.9" y="563.0" width="2.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.17%)</title><rect x="1180.9" y="547.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.9" y="531.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.9" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.9" y="515.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.9" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.9" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.9" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.9" y="467.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.9" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.9" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.9" y="435.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.9" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.9" y="419.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.9" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.9" y="403.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.9" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1180.9" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.9" y="398.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.09%)</title><rect x="1180.9" y="371.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.9" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="531.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="515.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="499.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="483.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="467.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="451.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="435.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="419.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="403.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="387.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="371.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="355.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="339.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.9" y="323.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.9" y="307.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.9" y="291.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.9" y="275.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.9" y="259.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1181.9" y="243.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.9" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1181.9" y="227.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.9" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="627.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.9" y="611.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.9" y="595.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.9" y="606.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1182.9" y="579.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.09%)</title><rect x="1183.9" y="1139.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="1150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name(ciKlass*, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="1123.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.9" y="1134.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="1107.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="1118.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1183.9" y="1091.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="1102.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.09%)</title><rect x="1183.9" y="1075.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1186.9" y="1086.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.17%)</title><rect x="1185.0" y="1235.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="1246.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 0.17%)</title><rect x="1185.0" y="1219.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.0" y="1230.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.09%)</title><rect x="1187.0" y="1267.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.0" y="1278.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.09%)</title><rect x="1187.0" y="1251.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.0" y="1262.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.09%)</title><rect x="1187.0" y="1235.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="1246.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.09%)</title><rect x="1187.0" y="1219.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.0" y="1230.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.09%)</title><rect x="1187.0" y="1203.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.0" y="1214.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.09%)</title><rect x="1187.0" y="1187.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="1198.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.09%)</title><rect x="1187.0" y="1171.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="1182.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.09%)</title><rect x="1187.0" y="1155.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="1166.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.09%)</title><rect x="1188.0" y="1299.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.0" y="1310.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.09%)</title><rect x="1188.0" y="1283.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.0" y="1294.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.09%)</title><rect x="1188.0" y="1267.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.0" y="1278.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.09%)</title><rect x="1188.0" y="1251.0" width="1.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1191.0" y="1262.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1315.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1192.0" y="1326.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.09%)</title><rect x="1189.0" y="1299.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1192.0" y="1310.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.09%)</title><rect x="1189.0" y="1283.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1192.0" y="1294.0"></text>
</g>
</g>
</svg>
