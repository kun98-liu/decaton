<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1382" onload="init(evt)" viewBox="0 0 1200 1382" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1365"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1365"> </text>
<g id="frames">
<g>
<title>all (251 samples, 100.00%)</title><rect x="10.0" y="1331.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1342.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.80%)</title><rect x="10.0" y="1315.0" width="9.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.80%)</title><rect x="10.0" y="1299.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.80%)</title><rect x="10.0" y="1283.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.40%)</title><rect x="10.0" y="1267.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.40%)</title><rect x="10.0" y="1251.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.40%)</title><rect x="14.7" y="1267.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="17.7" y="1278.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.40%)</title><rect x="14.7" y="1251.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.7" y="1262.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.40%)</title><rect x="14.7" y="1235.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="17.7" y="1246.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.40%)</title><rect x="14.7" y="1219.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="17.7" y="1230.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.40%)</title><rect x="19.4" y="1315.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="22.4" y="1326.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.40%)</title><rect x="19.4" y="1299.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="22.4" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (18 samples, 7.17%)</title><rect x="24.1" y="1315.0" width="84.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="27.1" y="1326.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (18 samples, 7.17%)</title><rect x="24.1" y="1299.0" width="84.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.1" y="1310.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.40%)</title><rect x="24.1" y="1283.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.1" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.40%)</title><rect x="24.1" y="1267.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="27.1" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 6.77%)</title><rect x="28.8" y="1283.0" width="79.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.8" y="1294.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.40%)</title><rect x="28.8" y="1267.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.40%)</title><rect x="28.8" y="1251.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.8" y="1262.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.40%)</title><rect x="28.8" y="1235.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.8" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.40%)</title><rect x="33.5" y="1267.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.40%)</title><rect x="33.5" y="1251.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="36.5" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.40%)</title><rect x="33.5" y="1235.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/2010155494.accept (1 samples, 0.40%)</title><rect x="33.5" y="1219.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="36.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.40%)</title><rect x="33.5" y="1203.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="36.5" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.40%)</title><rect x="33.5" y="1187.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="36.5" y="1198.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.40%)</title><rect x="33.5" y="1171.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="36.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (6 samples, 2.39%)</title><rect x="38.2" y="1267.0" width="28.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.2" y="1278.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/45623649.accept (5 samples, 1.99%)</title><rect x="38.2" y="1251.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="41.2" y="1262.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.99%)</title><rect x="38.2" y="1235.0" width="23.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.2" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (4 samples, 1.59%)</title><rect x="38.2" y="1219.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="41.2" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="38.2" y="1203.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="41.2" y="1214.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="38.2" y="1187.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="41.2" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="38.2" y="1171.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="41.2" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="38.2" y="1155.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.2" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="38.2" y="1139.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.2" y="1150.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.40%)</title><rect x="38.2" y="1123.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="41.2" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.40%)</title><rect x="38.2" y="1107.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="41.2" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 1.20%)</title><rect x="42.9" y="1203.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 1.20%)</title><rect x="42.9" y="1187.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.20%)</title><rect x="42.9" y="1171.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.9" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.20%)</title><rect x="42.9" y="1155.0" width="14.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.9" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.20%)</title><rect x="42.9" y="1139.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.20%)</title><rect x="42.9" y="1123.0" width="14.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="45.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.20%)</title><rect x="42.9" y="1107.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.9" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.20%)</title><rect x="42.9" y="1091.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="45.9" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.20%)</title><rect x="42.9" y="1075.0" width="14.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="45.9" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.40%)</title><rect x="52.3" y="1059.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.3" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.40%)</title><rect x="57.0" y="1219.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.40%)</title><rect x="57.0" y="1203.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="57.0" y="1187.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="57.0" y="1171.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.40%)</title><rect x="61.7" y="1251.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.40%)</title><rect x="61.7" y="1235.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.40%)</title><rect x="61.7" y="1219.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="64.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.40%)</title><rect x="61.7" y="1203.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.40%)</title><rect x="61.7" y="1187.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.7" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.40%)</title><rect x="61.7" y="1171.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.7" y="1182.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.40%)</title><rect x="61.7" y="1155.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.59%)</title><rect x="66.4" y="1267.0" width="42.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="1278.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (8 samples, 3.19%)</title><rect x="66.4" y="1251.0" width="37.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.4" y="1262.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 1.99%)</title><rect x="66.4" y="1235.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.4" y="1246.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="66.4" y="1219.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="69.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="66.4" y="1203.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="69.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="66.4" y="1187.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="69.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.40%)</title><rect x="66.4" y="1171.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="69.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.40%)</title><rect x="66.4" y="1155.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="69.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="66.4" y="1139.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="69.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="66.4" y="1123.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="66.4" y="1107.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="69.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="66.4" y="1091.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="66.4" y="1075.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="69.4" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.forEachRemaining (1 samples, 0.40%)</title><rect x="66.4" y="1059.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (4 samples, 1.59%)</title><rect x="71.1" y="1219.0" width="18.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.1" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.40%)</title><rect x="71.1" y="1203.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="74.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.20%)</title><rect x="75.8" y="1203.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 0.80%)</title><rect x="75.8" y="1187.0" width="9.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.80%)</title><rect x="75.8" y="1171.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.40%)</title><rect x="80.5" y="1155.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.40%)</title><rect x="80.5" y="1139.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (1 samples, 0.40%)</title><rect x="80.5" y="1123.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (1 samples, 0.40%)</title><rect x="80.5" y="1107.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="83.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.40%)</title><rect x="80.5" y="1091.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="83.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.40%)</title><rect x="80.5" y="1075.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="83.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.40%)</title><rect x="85.2" y="1187.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="88.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.40%)</title><rect x="85.2" y="1171.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="88.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.40%)</title><rect x="85.2" y="1155.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="88.2" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.40%)</title><rect x="85.2" y="1139.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.2" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="85.2" y="1123.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.80%)</title><rect x="89.9" y="1235.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.80%)</title><rect x="89.9" y="1219.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.80%)</title><rect x="89.9" y="1203.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="92.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.80%)</title><rect x="89.9" y="1187.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.40%)</title><rect x="89.9" y="1171.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.40%)</title><rect x="89.9" y="1155.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.40%)</title><rect x="89.9" y="1139.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.40%)</title><rect x="89.9" y="1123.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.addSize (1 samples, 0.40%)</title><rect x="89.9" y="1107.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="92.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.addSize (1 samples, 0.40%)</title><rect x="89.9" y="1091.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.40%)</title><rect x="94.6" y="1171.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="97.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.40%)</title><rect x="94.6" y="1155.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="97.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="99.3" y="1235.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.3" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.40%)</title><rect x="99.3" y="1219.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.3" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.40%)</title><rect x="99.3" y="1203.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.3" y="1214.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.40%)</title><rect x="99.3" y="1187.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.40%)</title><rect x="104.0" y="1251.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="107.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1 samples, 0.40%)</title><rect x="104.0" y="1235.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="107.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/1939107110.accept (1 samples, 0.40%)</title><rect x="108.7" y="1315.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="111.7" y="1326.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="108.7" y="1299.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="111.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/Thread.run (128 samples, 51.00%)</title><rect x="113.4" y="1315.0" width="601.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.4" y="1326.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (128 samples, 51.00%)</title><rect x="113.4" y="1299.0" width="601.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="116.4" y="1310.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (128 samples, 51.00%)</title><rect x="113.4" y="1283.0" width="601.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="116.4" y="1294.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/843831303.run (121 samples, 48.21%)</title><rect x="113.4" y="1267.0" width="568.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.4" y="1278.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/84383..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (121 samples, 48.21%)</title><rect x="113.4" y="1251.0" width="568.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="116.4" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (121 samples, 48.21%)</title><rect x="113.4" y="1235.0" width="568.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="116.4" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (121 samples, 48.21%)</title><rect x="113.4" y="1219.0" width="568.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="116.4" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.40%)</title><rect x="118.1" y="1203.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="121.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (9 samples, 3.59%)</title><rect x="122.8" y="1203.0" width="42.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="125.8" y="1214.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.59%)</title><rect x="122.8" y="1187.0" width="42.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="125.8" y="1198.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.59%)</title><rect x="122.8" y="1171.0" width="42.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.8" y="1182.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 1.59%)</title><rect x="146.3" y="1155.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 1.59%)</title><rect x="146.3" y="1139.0" width="18.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="149.3" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/287445844.accept (4 samples, 1.59%)</title><rect x="146.3" y="1123.0" width="18.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="149.3" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (4 samples, 1.59%)</title><rect x="146.3" y="1107.0" width="18.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.59%)</title><rect x="146.3" y="1091.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.59%)</title><rect x="146.3" y="1075.0" width="18.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.59%)</title><rect x="146.3" y="1059.0" width="18.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.3" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.40%)</title><rect x="146.3" y="1043.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.3" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.20%)</title><rect x="151.0" y="1043.0" width="14.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="154.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (27 samples, 10.76%)</title><rect x="165.1" y="1203.0" width="127.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="168.1" y="1214.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (27 samples, 10.76%)</title><rect x="165.1" y="1187.0" width="127.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="168.1" y="1198.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (27 samples, 10.76%)</title><rect x="165.1" y="1171.0" width="127.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.1" y="1182.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 10.76%)</title><rect x="165.1" y="1155.0" width="127.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="168.1" y="1166.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (27 samples, 10.76%)</title><rect x="165.1" y="1139.0" width="127.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="168.1" y="1150.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (27 samples, 10.76%)</title><rect x="165.1" y="1123.0" width="127.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="168.1" y="1134.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (7 samples, 2.79%)</title><rect x="165.1" y="1107.0" width="32.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="168.1" y="1118.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.40%)</title><rect x="165.1" y="1091.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="168.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.40%)</title><rect x="165.1" y="1075.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="168.1" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="165.1" y="1059.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="168.1" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="165.1" y="1043.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="168.1" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="165.1" y="1027.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="168.1" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="165.1" y="1011.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="168.1" y="1022.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.40%)</title><rect x="165.1" y="995.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="168.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.80%)</title><rect x="169.8" y="1091.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.8" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.80%)</title><rect x="169.8" y="1075.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.8" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.80%)</title><rect x="169.8" y="1059.0" width="9.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.80%)</title><rect x="169.8" y="1043.0" width="9.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.8" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.80%)</title><rect x="169.8" y="1027.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="172.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 1.59%)</title><rect x="179.2" y="1091.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 1.59%)</title><rect x="179.2" y="1075.0" width="18.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="182.2" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.80%)</title><rect x="179.2" y="1059.0" width="9.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.2" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.80%)</title><rect x="179.2" y="1043.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.2" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.80%)</title><rect x="188.6" y="1059.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="191.6" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="188.6" y="1043.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="191.6" y="1054.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="188.6" y="1027.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="191.6" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.40%)</title><rect x="188.6" y="1011.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="191.6" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="188.6" y="995.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="191.6" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="188.6" y="979.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="191.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.40%)</title><rect x="193.3" y="1043.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="196.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.40%)</title><rect x="193.3" y="1027.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="196.3" y="1038.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="193.3" y="1011.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="196.3" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="193.3" y="995.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="196.3" y="1006.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="193.3" y="979.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="196.3" y="990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="193.3" y="963.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="196.3" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="193.3" y="947.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="196.3" y="958.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.40%)</title><rect x="193.3" y="931.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="196.3" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (19 samples, 7.57%)</title><rect x="198.0" y="1107.0" width="89.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="201.0" y="1118.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 1.20%)</title><rect x="198.0" y="1091.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="201.0" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 1.20%)</title><rect x="198.0" y="1075.0" width="14.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="201.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.20%)</title><rect x="198.0" y="1059.0" width="14.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 1.59%)</title><rect x="212.2" y="1091.0" width="18.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="215.2" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.80%)</title><rect x="221.6" y="1075.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="224.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="226.3" y="1059.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.3" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="226.3" y="1043.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="226.3" y="1027.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="229.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="226.3" y="1011.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (12 samples, 4.78%)</title><rect x="231.0" y="1091.0" width="56.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.0" y="1102.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 4.78%)</title><rect x="231.0" y="1075.0" width="56.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="234.0" y="1086.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 2.39%)</title><rect x="231.0" y="1059.0" width="28.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="234.0" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="235.7" y="1043.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.7" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.40%)</title><rect x="235.7" y="1027.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="238.7" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.40%)</title><rect x="235.7" y="1011.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.80%)</title><rect x="240.4" y="1043.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="243.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.80%)</title><rect x="240.4" y="1027.0" width="9.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="243.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.80%)</title><rect x="240.4" y="1011.0" width="9.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="243.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.80%)</title><rect x="249.8" y="1043.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.8" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 2.39%)</title><rect x="259.2" y="1059.0" width="28.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="262.2" y="1070.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 2.39%)</title><rect x="259.2" y="1043.0" width="28.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.2" y="1054.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 2.39%)</title><rect x="259.2" y="1027.0" width="28.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.2" y="1038.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="263.9" y="1011.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="266.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="263.9" y="995.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="266.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="263.9" y="979.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="266.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="263.9" y="963.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="263.9" y="947.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.9" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.40%)</title><rect x="268.6" y="1011.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.40%)</title><rect x="268.6" y="995.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.40%)</title><rect x="268.6" y="979.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.40%)</title><rect x="268.6" y="963.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.6" y="974.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.40%)</title><rect x="268.6" y="947.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.6" y="958.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.40%)</title><rect x="268.6" y="931.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="942.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.40%)</title><rect x="268.6" y="915.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.80%)</title><rect x="273.3" y="1011.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.80%)</title><rect x="273.3" y="995.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.3" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.80%)</title><rect x="273.3" y="979.0" width="9.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.40%)</title><rect x="282.7" y="1011.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="285.7" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.40%)</title><rect x="287.4" y="1107.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="290.4" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.40%)</title><rect x="287.4" y="1091.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.40%)</title><rect x="287.4" y="1075.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.40%)</title><rect x="287.4" y="1059.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.4" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="287.4" y="1043.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.4" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (82 samples, 32.67%)</title><rect x="292.1" y="1203.0" width="385.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.1" y="1214.0">com/linecorp/decaton/processor/runtime/internal/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (9 samples, 3.59%)</title><rect x="296.8" y="1187.0" width="42.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.8" y="1198.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (9 samples, 3.59%)</title><rect x="296.8" y="1171.0" width="42.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="299.8" y="1182.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 3.19%)</title><rect x="301.5" y="1155.0" width="37.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.5" y="1166.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.80%)</title><rect x="301.5" y="1139.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.5" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="301.5" y="1123.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.5" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="301.5" y="1107.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="304.5" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.40%)</title><rect x="306.2" y="1123.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="309.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="306.2" y="1107.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="309.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.80%)</title><rect x="310.9" y="1139.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.9" y="1150.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.80%)</title><rect x="310.9" y="1123.0" width="9.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.9" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.59%)</title><rect x="320.3" y="1139.0" width="18.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="323.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.59%)</title><rect x="320.3" y="1123.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.40%)</title><rect x="320.3" y="1107.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.20%)</title><rect x="325.0" y="1107.0" width="14.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="328.0" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (15 samples, 5.98%)</title><rect x="339.1" y="1187.0" width="70.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="342.1" y="1198.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (12 samples, 4.78%)</title><rect x="339.1" y="1171.0" width="56.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="342.1" y="1182.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 0.80%)</title><rect x="339.1" y="1155.0" width="9.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="342.1" y="1166.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.40%)</title><rect x="343.8" y="1139.0" width="4.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="346.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.40%)</title><rect x="348.5" y="1155.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="351.5" y="1166.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.40%)</title><rect x="348.5" y="1139.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="351.5" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.40%)</title><rect x="348.5" y="1123.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="351.5" y="1134.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.40%)</title><rect x="348.5" y="1107.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="351.5" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.40%)</title><rect x="348.5" y="1091.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="351.5" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="348.5" y="1075.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="351.5" y="1086.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="348.5" y="1059.0" width="4.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="351.5" y="1070.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (9 samples, 3.59%)</title><rect x="353.2" y="1155.0" width="42.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="356.2" y="1166.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.19%)</title><rect x="357.9" y="1139.0" width="37.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="360.9" y="1150.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.59%)</title><rect x="357.9" y="1123.0" width="18.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="360.9" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.59%)</title><rect x="357.9" y="1107.0" width="18.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.9" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.40%)</title><rect x="372.0" y="1091.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="375.0" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="376.7" y="1123.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.7" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="376.7" y="1107.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="379.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.20%)</title><rect x="381.4" y="1123.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="384.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.20%)</title><rect x="381.4" y="1107.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="384.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.20%)</title><rect x="381.4" y="1091.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="384.4" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.40%)</title><rect x="390.8" y="1075.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 1.20%)</title><rect x="395.5" y="1171.0" width="14.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="398.5" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 1.20%)</title><rect x="395.5" y="1155.0" width="14.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.5" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.20%)</title><rect x="395.5" y="1139.0" width="14.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.5" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="395.5" y="1123.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="398.5" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.40%)</title><rect x="395.5" y="1107.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="398.5" y="1118.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.80%)</title><rect x="400.2" y="1123.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="403.2" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.80%)</title><rect x="400.2" y="1107.0" width="9.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="403.2" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.40%)</title><rect x="404.9" y="1091.0" width="4.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="407.9" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (53 samples, 21.12%)</title><rect x="409.6" y="1187.0" width="249.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="412.6" y="1198.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (53 samples, 21.12%)</title><rect x="409.6" y="1171.0" width="249.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="412.6" y="1182.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="423.7" y="1155.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="426.7" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="423.7" y="1139.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="426.7" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="423.7" y="1123.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="426.7" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="423.7" y="1107.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="426.7" y="1118.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="423.7" y="1091.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="426.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1438695035.process (43 samples, 17.13%)</title><rect x="428.4" y="1155.0" width="202.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="431.4" y="1166.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (43 samples, 17.13%)</title><rect x="428.4" y="1139.0" width="202.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="431.4" y="1150.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (43 samples, 17.13%)</title><rect x="428.4" y="1123.0" width="202.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="431.4" y="1134.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="433.1" y="1107.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="436.1" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.40%)</title><rect x="433.1" y="1091.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="436.1" y="1102.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.40%)</title><rect x="433.1" y="1075.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="436.1" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.40%)</title><rect x="433.1" y="1059.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="436.1" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (39 samples, 15.54%)</title><rect x="437.8" y="1107.0" width="183.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="440.8" y="1118.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>java/lang/Thread.sleep (39 samples, 15.54%)</title><rect x="437.8" y="1091.0" width="183.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="440.8" y="1102.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 13.94%)</title><rect x="447.2" y="1075.0" width="164.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="450.2" y="1086.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.40%)</title><rect x="461.3" y="1059.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="464.3" y="1070.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.40%)</title><rect x="466.0" y="1059.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="469.0" y="1070.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 1.99%)</title><rect x="470.7" y="1059.0" width="23.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="473.7" y="1070.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 3.19%)</title><rect x="494.2" y="1059.0" width="37.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="497.2" y="1070.0">__p..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.40%)</title><rect x="531.8" y="1059.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="534.8" y="1070.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (15 samples, 5.98%)</title><rect x="536.5" y="1059.0" width="70.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="539.5" y="1070.0">os::slee..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 1.99%)</title><rect x="550.6" y="1043.0" width="23.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="553.6" y="1054.0">M..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="574.1" y="1043.0" width="4.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="577.1" y="1054.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.99%)</title><rect x="578.8" y="1043.0" width="23.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="581.8" y="1054.0">_..</text>
</g>
<g>
<title>[vdso] (3 samples, 1.20%)</title><rect x="588.2" y="1027.0" width="14.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="591.2" y="1038.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.40%)</title><rect x="602.4" y="1043.0" width="4.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="605.4" y="1054.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.40%)</title><rect x="607.1" y="1059.0" width="4.7" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="610.1" y="1070.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.40%)</title><rect x="611.8" y="1075.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="614.8" y="1086.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.40%)</title><rect x="616.5" y="1075.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="619.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.80%)</title><rect x="621.2" y="1107.0" width="9.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (2 samples, 0.80%)</title><rect x="621.2" y="1091.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="624.2" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.80%)</title><rect x="630.6" y="1155.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.6" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="630.6" y="1139.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="633.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.40%)</title><rect x="635.3" y="1139.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.40%)</title><rect x="635.3" y="1123.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.40%)</title><rect x="635.3" y="1107.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.40%)</title><rect x="635.3" y="1091.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.3" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.40%)</title><rect x="635.3" y="1075.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="640.0" y="1155.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="643.0" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="640.0" y="1139.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.0" y="1150.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="640.0" y="1123.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="643.0" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="640.0" y="1107.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="643.0" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="640.0" y="1091.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="643.0" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="640.0" y="1075.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="643.0" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="644.7" y="1155.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.40%)</title><rect x="644.7" y="1139.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.40%)</title><rect x="644.7" y="1123.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="647.7" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.40%)</title><rect x="644.7" y="1107.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (2 samples, 0.80%)</title><rect x="649.4" y="1155.0" width="9.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="652.4" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.59%)</title><rect x="658.8" y="1187.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="661.8" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 1.59%)</title><rect x="658.8" y="1171.0" width="18.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="661.8" y="1182.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="672.9" y="1155.0" width="4.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="675.9" y="1166.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="672.9" y="1139.0" width="4.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="675.9" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="677.6" y="1203.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="680.6" y="1214.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="677.6" y="1187.0" width="4.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="680.6" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.79%)</title><rect x="682.3" y="1267.0" width="32.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="685.3" y="1278.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6 samples, 2.39%)</title><rect x="687.0" y="1251.0" width="28.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="690.0" y="1262.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 1.59%)</title><rect x="696.4" y="1235.0" width="18.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="699.4" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 1.59%)</title><rect x="696.4" y="1219.0" width="18.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="699.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 1.59%)</title><rect x="696.4" y="1203.0" width="18.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="699.4" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 1.59%)</title><rect x="696.4" y="1187.0" width="18.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="699.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.80%)</title><rect x="715.2" y="1315.0" width="9.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="718.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.80%)</title><rect x="715.2" y="1299.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.2" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.80%)</title><rect x="715.2" y="1283.0" width="9.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="718.2" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.80%)</title><rect x="715.2" y="1267.0" width="9.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="718.2" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.40%)</title><rect x="715.2" y="1251.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="718.2" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.40%)</title><rect x="715.2" y="1235.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="718.2" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="715.2" y="1219.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="718.2" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="715.2" y="1203.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="718.2" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="715.2" y="1187.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="718.2" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="715.2" y="1171.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="718.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.40%)</title><rect x="715.2" y="1155.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="718.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="719.9" y="1251.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="722.9" y="1262.0"></text>
</g>
<g>
<title>start_thread (99 samples, 39.44%)</title><rect x="724.6" y="1315.0" width="465.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="727.6" y="1326.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (99 samples, 39.44%)</title><rect x="724.6" y="1299.0" width="465.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="727.6" y="1310.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (99 samples, 39.44%)</title><rect x="724.6" y="1283.0" width="465.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.6" y="1294.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (12 samples, 4.78%)</title><rect x="724.6" y="1267.0" width="56.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="727.6" y="1278.0">GangWo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 4.38%)</title><rect x="724.6" y="1251.0" width="51.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.6" y="1262.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 3.98%)</title><rect x="724.6" y="1235.0" width="47.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="727.6" y="1246.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="724.6" y="1219.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="727.6" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (9 samples, 3.59%)</title><rect x="729.3" y="1219.0" width="42.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="732.3" y="1230.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 3.19%)</title><rect x="734.0" y="1203.0" width="37.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="737.0" y="1214.0">G1P..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 1.20%)</title><rect x="757.5" y="1187.0" width="14.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="760.5" y="1198.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="771.6" y="1235.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="774.6" y="1246.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="771.6" y="1219.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="774.6" y="1230.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="771.6" y="1203.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="774.6" y="1214.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="771.6" y="1187.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="774.6" y="1198.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.40%)</title><rect x="771.6" y="1171.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="774.6" y="1182.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.40%)</title><rect x="771.6" y="1155.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.6" y="1166.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.40%)</title><rect x="771.6" y="1139.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="774.6" y="1150.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.40%)</title><rect x="771.6" y="1123.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="774.6" y="1134.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (1 samples, 0.40%)</title><rect x="776.3" y="1251.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="779.3" y="1262.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (1 samples, 0.40%)</title><rect x="776.3" y="1235.0" width="4.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="779.3" y="1246.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (87 samples, 34.66%)</title><rect x="781.0" y="1267.0" width="409.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="784.0" y="1278.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (86 samples, 34.26%)</title><rect x="781.0" y="1251.0" width="404.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="784.0" y="1262.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (86 samples, 34.26%)</title><rect x="781.0" y="1235.0" width="404.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="784.0" y="1246.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (80 samples, 31.87%)</title><rect x="781.0" y="1219.0" width="376.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="784.0" y="1230.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, ..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (80 samples, 31.87%)</title><rect x="781.0" y="1203.0" width="376.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="784.0" y="1214.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, in..</text>
</g>
<g>
<title>Compile::Code_Gen() (49 samples, 19.52%)</title><rect x="781.0" y="1187.0" width="230.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="784.0" y="1198.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.40%)</title><rect x="781.0" y="1171.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="784.0" y="1182.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.40%)</title><rect x="781.0" y="1155.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="784.0" y="1166.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="781.0" y="1139.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="784.0" y="1150.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.59%)</title><rect x="785.7" y="1171.0" width="18.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="788.7" y="1182.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.59%)</title><rect x="785.7" y="1155.0" width="18.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="788.7" y="1166.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.40%)</title><rect x="790.4" y="1139.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="793.4" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (2 samples, 0.80%)</title><rect x="795.1" y="1139.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="798.1" y="1150.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.40%)</title><rect x="799.8" y="1123.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="802.8" y="1134.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.40%)</title><rect x="799.8" y="1107.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="802.8" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.99%)</title><rect x="804.5" y="1171.0" width="23.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="807.5" y="1182.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.99%)</title><rect x="804.5" y="1155.0" width="23.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="807.5" y="1166.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="804.5" y="1139.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="807.5" y="1150.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.40%)</title><rect x="804.5" y="1123.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="807.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.40%)</title><rect x="809.2" y="1139.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="812.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.40%)</title><rect x="813.9" y="1139.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="816.9" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.80%)</title><rect x="818.6" y="1139.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="821.6" y="1150.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.40%)</title><rect x="818.6" y="1123.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="821.6" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.40%)</title><rect x="823.3" y="1123.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="826.3" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="823.3" y="1107.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="826.3" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (39 samples, 15.54%)</title><rect x="828.0" y="1171.0" width="183.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="831.0" y="1182.0">PhaseChaitin::Register_A..</text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.40%)</title><rect x="832.7" y="1155.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="835.7" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.80%)</title><rect x="837.4" y="1155.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="840.4" y="1166.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.40%)</title><rect x="837.4" y="1139.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="840.4" y="1150.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.40%)</title><rect x="837.4" y="1123.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="840.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="842.1" y="1139.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="845.1" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="842.1" y="1123.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="845.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.20%)</title><rect x="846.8" y="1155.0" width="14.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="849.8" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="846.8" y="1139.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="849.8" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.80%)</title><rect x="851.5" y="1139.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="854.5" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="856.2" y="1123.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="859.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.99%)</title><rect x="860.9" y="1155.0" width="23.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="863.9" y="1166.0">P..</text>
</g>
<g>
<title>MachNode::rematerialize() const (2 samples, 0.80%)</title><rect x="860.9" y="1139.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="863.9" y="1150.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.40%)</title><rect x="865.6" y="1123.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.6" y="1134.0"></text>
</g>
<g>
<title>rRegLOper::type() const (1 samples, 0.40%)</title><rect x="865.6" y="1107.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.6" y="1118.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.40%)</title><rect x="870.3" y="1139.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="873.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.40%)</title><rect x="875.0" y="1139.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="878.0" y="1150.0"></text>
</g>
<g>
<title>MachSpillCopyNode::bottom_type() const (1 samples, 0.40%)</title><rect x="875.0" y="1123.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="878.0" y="1134.0"></text>
</g>
<g>
<title>leaPCompressedOopOffsetNode::rule() const (1 samples, 0.40%)</title><rect x="879.7" y="1139.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="882.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 3.98%)</title><rect x="884.4" y="1155.0" width="47.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="887.4" y="1166.0">Phas..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.40%)</title><rect x="884.4" y="1139.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="887.4" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 1.99%)</title><rect x="889.1" y="1139.0" width="23.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="892.1" y="1150.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="907.9" y="1123.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.9" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.40%)</title><rect x="912.6" y="1139.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="915.6" y="1150.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.40%)</title><rect x="912.6" y="1123.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.6" y="1134.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.80%)</title><rect x="917.3" y="1139.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="920.3" y="1150.0"></text>
</g>
<g>
<title>incI_rRegNode::rule() const (1 samples, 0.40%)</title><rect x="926.7" y="1139.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="929.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.20%)</title><rect x="931.4" y="1155.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="934.4" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="940.8" y="1139.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="943.8" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (2 samples, 0.80%)</title><rect x="945.5" y="1155.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="948.5" y="1166.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="950.2" y="1139.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="953.2" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.20%)</title><rect x="954.9" y="1155.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="957.9" y="1166.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.40%)</title><rect x="964.3" y="1139.0" width="4.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="967.3" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.40%)</title><rect x="969.0" y="1155.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="972.0" y="1166.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.80%)</title><rect x="973.7" y="1155.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="976.7" y="1166.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.80%)</title><rect x="973.7" y="1139.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="976.7" y="1150.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.80%)</title><rect x="973.7" y="1123.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="976.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.40%)</title><rect x="983.1" y="1155.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.1" y="1166.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="983.1" y="1139.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.40%)</title><rect x="987.8" y="1155.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.8" y="1166.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.20%)</title><rect x="992.5" y="1155.0" width="14.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.5" y="1166.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.40%)</title><rect x="997.3" y="1139.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1000.3" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="1002.0" y="1139.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1005.0" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="1002.0" y="1123.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.0" y="1134.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1006.7" y="1155.0" width="4.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1009.7" y="1166.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 7.97%)</title><rect x="1011.4" y="1187.0" width="94.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1014.4" y="1198.0">Compile::Op..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 2.79%)</title><rect x="1011.4" y="1171.0" width="32.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.4" y="1182.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 2.79%)</title><rect x="1011.4" y="1155.0" width="32.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.4" y="1166.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.40%)</title><rect x="1011.4" y="1139.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1014.4" y="1150.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.40%)</title><rect x="1011.4" y="1123.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.4" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.20%)</title><rect x="1016.1" y="1139.0" width="14.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1019.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.20%)</title><rect x="1016.1" y="1123.0" width="14.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1019.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 1.20%)</title><rect x="1016.1" y="1107.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 1.20%)</title><rect x="1016.1" y="1091.0" width="14.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.80%)</title><rect x="1030.2" y="1139.0" width="9.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1033.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.80%)</title><rect x="1030.2" y="1123.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.2" y="1134.0"></text>
</g>
<g>
<title>CheckCastPPNode::Opcode() const (1 samples, 0.40%)</title><rect x="1030.2" y="1107.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1033.2" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.40%)</title><rect x="1034.9" y="1107.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.9" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1039.6" y="1139.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1039.6" y="1123.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1042.6" y="1134.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.40%)</title><rect x="1039.6" y="1107.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1042.6" y="1118.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.40%)</title><rect x="1044.3" y="1171.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1047.3" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1049.0" y="1171.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1052.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.40%)</title><rect x="1049.0" y="1155.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1052.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field(Node*, PointsToNode::EscapeState, int) [clone .part.175] (1 samples, 0.40%)</title><rect x="1049.0" y="1139.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.0" y="1150.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1049.0" y="1123.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1052.0" y="1134.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="1049.0" y="1107.0" width="4.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1052.0" y="1118.0"></text>
</g>
<g>
<title>HaltNode::Value(PhaseGVN*) const (1 samples, 0.40%)</title><rect x="1053.7" y="1171.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1056.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (8 samples, 3.19%)</title><rect x="1058.4" y="1171.0" width="37.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.4" y="1182.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.40%)</title><rect x="1058.4" y="1155.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1061.4" y="1166.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.40%)</title><rect x="1058.4" y="1139.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.4" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.20%)</title><rect x="1063.1" y="1155.0" width="14.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1066.1" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.20%)</title><rect x="1063.1" y="1139.0" width="14.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1066.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.80%)</title><rect x="1063.1" y="1123.0" width="9.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1066.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.80%)</title><rect x="1063.1" y="1107.0" width="9.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.40%)</title><rect x="1072.5" y="1123.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.5" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.40%)</title><rect x="1077.2" y="1155.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1080.2" y="1166.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.40%)</title><rect x="1077.2" y="1139.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.40%)</title><rect x="1081.9" y="1155.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1084.9" y="1166.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.40%)</title><rect x="1081.9" y="1139.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1084.9" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.80%)</title><rect x="1086.6" y="1155.0" width="9.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.6" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.80%)</title><rect x="1086.6" y="1139.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1089.6" y="1150.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1086.6" y="1123.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1089.6" y="1134.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.40%)</title><rect x="1091.3" y="1123.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.80%)</title><rect x="1096.0" y="1171.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.0" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.80%)</title><rect x="1096.0" y="1155.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.0" y="1166.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1096.0" y="1139.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.0" y="1150.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.40%)</title><rect x="1096.0" y="1123.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1099.0" y="1134.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.40%)</title><rect x="1096.0" y="1107.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1099.0" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1096.0" y="1091.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.0" y="1102.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1100.7" y="1139.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.40%)</title><rect x="1100.7" y="1123.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1103.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.40%)</title><rect x="1100.7" y="1107.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.7" y="1118.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.40%)</title><rect x="1100.7" y="1091.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.7" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 4.38%)</title><rect x="1105.4" y="1187.0" width="51.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.4" y="1198.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 4.38%)</title><rect x="1105.4" y="1171.0" width="51.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.4" y="1182.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 4.38%)</title><rect x="1105.4" y="1155.0" width="51.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.4" y="1166.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 4.38%)</title><rect x="1105.4" y="1139.0" width="51.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1108.4" y="1150.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 4.38%)</title><rect x="1105.4" y="1123.0" width="51.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1108.4" y="1134.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (11 samples, 4.38%)</title><rect x="1105.4" y="1107.0" width="51.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.4" y="1118.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.19%)</title><rect x="1105.4" y="1091.0" width="37.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.4" y="1102.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.19%)</title><rect x="1105.4" y="1075.0" width="37.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.4" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.19%)</title><rect x="1105.4" y="1059.0" width="37.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.4" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.79%)</title><rect x="1105.4" y="1043.0" width="32.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1108.4" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.79%)</title><rect x="1105.4" y="1027.0" width="32.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1108.4" y="1038.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.39%)</title><rect x="1105.4" y="1011.0" width="28.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.4" y="1022.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.20%)</title><rect x="1110.1" y="995.0" width="14.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1113.1" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.20%)</title><rect x="1110.1" y="979.0" width="14.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.1" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.20%)</title><rect x="1110.1" y="963.0" width="14.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.1" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.20%)</title><rect x="1110.1" y="947.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.20%)</title><rect x="1110.1" y="931.0" width="14.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.20%)</title><rect x="1110.1" y="915.0" width="14.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.1" y="926.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.40%)</title><rect x="1110.1" y="899.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.1" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1114.8" y="899.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.8" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1114.8" y="883.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1114.8" y="867.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1114.8" y="851.0" width="9.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1114.8" y="835.0" width="9.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1114.8" y="819.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.8" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1114.8" y="803.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.8" y="814.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.40%)</title><rect x="1114.8" y="787.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.8" y="798.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.40%)</title><rect x="1114.8" y="771.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.8" y="782.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.40%)</title><rect x="1114.8" y="755.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1119.5" y="803.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1122.5" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1119.5" y="787.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.5" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1119.5" y="771.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.5" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1119.5" y="755.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.5" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1119.5" y="739.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.5" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1119.5" y="723.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.5" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1119.5" y="707.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1122.5" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1119.5" y="691.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.5" y="702.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.40%)</title><rect x="1119.5" y="675.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.5" y="686.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.40%)</title><rect x="1119.5" y="659.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1122.5" y="670.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::is_mature(Method*) (1 samples, 0.40%)</title><rect x="1119.5" y="643.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.5" y="654.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.40%)</title><rect x="1119.5" y="627.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1122.5" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1124.2" y="995.0" width="9.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.2" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1124.2" y="979.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.2" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1124.2" y="963.0" width="9.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1124.2" y="947.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1124.2" y="931.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1124.2" y="915.0" width="9.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.2" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1124.2" y="899.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1124.2" y="883.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.2" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1124.2" y="867.0" width="9.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1124.2" y="851.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1124.2" y="835.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1124.2" y="819.0" width="9.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1124.2" y="803.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.2" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1124.2" y="787.0" width="9.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1124.2" y="771.0" width="9.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1124.2" y="755.0" width="9.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1124.2" y="739.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.80%)</title><rect x="1124.2" y="723.0" width="9.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.80%)</title><rect x="1124.2" y="707.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1124.2" y="691.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.80%)</title><rect x="1124.2" y="675.0" width="9.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1127.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.80%)</title><rect x="1124.2" y="659.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1127.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.80%)</title><rect x="1124.2" y="643.0" width="9.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.40%)</title><rect x="1124.2" y="627.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.2" y="638.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.40%)</title><rect x="1124.2" y="611.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.2" y="622.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.40%)</title><rect x="1124.2" y="595.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.2" y="606.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.40%)</title><rect x="1124.2" y="579.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.9" y="627.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.9" y="611.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1128.9" y="595.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1128.9" y="579.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.9" y="563.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.9" y="547.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.9" y="531.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.9" y="515.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1128.9" y="499.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1128.9" y="483.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.9" y="467.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.9" y="451.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.9" y="435.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.9" y="419.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1131.9" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1128.9" y="403.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.9" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1128.9" y="387.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1131.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.9" y="371.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.9" y="355.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.9" y="339.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1131.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.9" y="323.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1128.9" y="307.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.9" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1128.9" y="291.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1131.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1128.9" y="275.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1128.9" y="259.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1128.9" y="243.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1131.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1128.9" y="227.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.9" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1128.9" y="211.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1131.9" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1128.9" y="195.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.9" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1128.9" y="179.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.9" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1128.9" y="163.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.9" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1128.9" y="147.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1131.9" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1128.9" y="131.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.9" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1128.9" y="115.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1131.9" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1128.9" y="99.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.9" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.40%)</title><rect x="1128.9" y="83.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.9" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.40%)</title><rect x="1128.9" y="67.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.9" y="78.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, ciSymbol*, ciMethodType*) (1 samples, 0.40%)</title><rect x="1128.9" y="51.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.9" y="62.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.40%)</title><rect x="1128.9" y="35.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.40%)</title><rect x="1133.6" y="1011.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.6" y="1022.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.40%)</title><rect x="1133.6" y="995.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1136.6" y="1006.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.40%)</title><rect x="1133.6" y="979.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.6" y="990.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.40%)</title><rect x="1133.6" y="963.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.6" y="974.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.40%)</title><rect x="1138.3" y="1043.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.3" y="1054.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.40%)</title><rect x="1138.3" y="1027.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.3" y="1038.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1138.3" y="1011.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.3" y="1022.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1138.3" y="995.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.3" y="1006.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.40%)</title><rect x="1138.3" y="979.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.3" y="990.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.40%)</title><rect x="1138.3" y="963.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.3" y="974.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.80%)</title><rect x="1143.0" y="1091.0" width="9.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.0" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.0" y="1075.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.0" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.0" y="1059.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.0" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.0" y="1043.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.0" y="1027.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.0" y="1011.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.0" y="995.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.0" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.0" y="979.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.0" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.0" y="963.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.0" y="947.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.0" y="931.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.0" y="915.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.0" y="899.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.0" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.0" y="883.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.0" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.0" y="867.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.0" y="851.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.0" y="835.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.0" y="819.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.0" y="803.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.0" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.0" y="787.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.0" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.0" y="771.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.0" y="755.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.0" y="739.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.0" y="723.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1143.0" y="707.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.0" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1143.0" y="691.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.0" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1143.0" y="675.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1143.0" y="659.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1143.0" y="643.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1143.0" y="627.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.0" y="638.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1143.0" y="611.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.40%)</title><rect x="1143.0" y="595.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.0" y="606.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.40%)</title><rect x="1143.0" y="579.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.0" y="590.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.40%)</title><rect x="1143.0" y="563.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.0" y="574.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.40%)</title><rect x="1143.0" y="547.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.0" y="558.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.40%)</title><rect x="1143.0" y="531.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1146.0" y="542.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1143.0" y="515.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.0" y="526.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.40%)</title><rect x="1143.0" y="499.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.0" y="510.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.7" y="1075.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.7" y="1059.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.7" y="1043.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.7" y="1027.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.7" y="1011.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.7" y="995.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.7" y="979.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.7" y="963.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.7" y="947.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.7" y="931.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.7" y="915.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.7" y="899.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1147.7" y="883.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1147.7" y="867.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1147.7" y="851.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1147.7" y="835.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1147.7" y="819.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1147.7" y="803.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.40%)</title><rect x="1147.7" y="787.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.7" y="798.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1147.7" y="771.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.7" y="782.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.40%)</title><rect x="1152.4" y="1091.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="1102.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (5 samples, 1.99%)</title><rect x="1157.1" y="1219.0" width="23.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1160.1" y="1230.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (5 samples, 1.99%)</title><rect x="1157.1" y="1203.0" width="23.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.1" y="1214.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (5 samples, 1.99%)</title><rect x="1157.1" y="1187.0" width="23.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.1" y="1198.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (5 samples, 1.99%)</title><rect x="1157.1" y="1171.0" width="23.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.1" y="1182.0">C..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 0.80%)</title><rect x="1157.1" y="1155.0" width="9.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.1" y="1166.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 0.80%)</title><rect x="1157.1" y="1139.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="1150.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 0.80%)</title><rect x="1157.1" y="1123.0" width="9.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.1" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 0.80%)</title><rect x="1157.1" y="1107.0" width="9.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.40%)</title><rect x="1157.1" y="1091.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.1" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.40%)</title><rect x="1157.1" y="1075.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.1" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1157.1" y="1059.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="1070.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.40%)</title><rect x="1157.1" y="1043.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.1" y="1054.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1157.1" y="1027.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="1038.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1157.1" y="1011.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="1022.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1157.1" y="995.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="1006.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.40%)</title><rect x="1157.1" y="979.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="990.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.40%)</title><rect x="1157.1" y="963.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1160.1" y="974.0"></text>
</g>
<g>
<title>ModuleEntry::can_read(ModuleEntry*) const (1 samples, 0.40%)</title><rect x="1157.1" y="947.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (1 samples, 0.40%)</title><rect x="1161.8" y="1091.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.8" y="1102.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.40%)</title><rect x="1161.8" y="1075.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.8" y="1086.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1161.8" y="1059.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.8" y="1070.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="1161.8" y="1043.0" width="4.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1164.8" y="1054.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 1.20%)</title><rect x="1166.5" y="1155.0" width="14.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.5" y="1166.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (2 samples, 0.80%)</title><rect x="1166.5" y="1139.0" width="9.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1169.5" y="1150.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (2 samples, 0.80%)</title><rect x="1166.5" y="1123.0" width="9.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.5" y="1134.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.40%)</title><rect x="1166.5" y="1107.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.5" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::move_to_phi(ValueStack*) (1 samples, 0.40%)</title><rect x="1166.5" y="1091.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.5" y="1102.0"></text>
</g>
<g>
<title>PhiResolverState::reset(int) (1 samples, 0.40%)</title><rect x="1166.5" y="1075.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.5" y="1086.0"></text>
</g>
<g>
<title>LIRGenerator::do_If(If*) (1 samples, 0.40%)</title><rect x="1171.2" y="1107.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.2" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::profile_branch(If*, Instruction::Condition) (1 samples, 0.40%)</title><rect x="1171.2" y="1091.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.2" y="1102.0"></text>
</g>
<g>
<title>VirtualCallData::cell_count() const (1 samples, 0.40%)</title><rect x="1171.2" y="1075.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.2" y="1086.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.40%)</title><rect x="1175.9" y="1139.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.9" y="1150.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.40%)</title><rect x="1175.9" y="1123.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.9" y="1134.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.40%)</title><rect x="1175.9" y="1107.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.9" y="1118.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.40%)</title><rect x="1180.6" y="1219.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.40%)</title><rect x="1180.6" y="1203.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.40%)</title><rect x="1185.3" y="1251.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="1262.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.40%)</title><rect x="1185.3" y="1235.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.3" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.40%)</title><rect x="1185.3" y="1219.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="1230.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.40%)</title><rect x="1185.3" y="1203.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.3" y="1214.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.40%)</title><rect x="1185.3" y="1187.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.3" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.40%)</title><rect x="1185.3" y="1171.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.3" y="1182.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1185.3" y="1155.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.3" y="1166.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="1185.3" y="1139.0" width="4.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1188.3" y="1150.0"></text>
</g>
</g>
</svg>
