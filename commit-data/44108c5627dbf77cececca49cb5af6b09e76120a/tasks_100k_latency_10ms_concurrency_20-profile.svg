<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1253"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1253"> </text>
<g id="frames">
<g>
<title>all (241 samples, 100.00%)</title><rect x="10.0" y="1219.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1230.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 7.88%)</title><rect x="10.0" y="1203.0" width="93.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1214.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (19 samples, 7.88%)</title><rect x="10.0" y="1187.0" width="93.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1198.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (19 samples, 7.88%)</title><rect x="10.0" y="1171.0" width="93.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1182.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.41%)</title><rect x="10.0" y="1155.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.41%)</title><rect x="10.0" y="1139.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.41%)</title><rect x="10.0" y="1123.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.41%)</title><rect x="10.0" y="1107.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.41%)</title><rect x="10.0" y="1091.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.41%)</title><rect x="10.0" y="1075.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.41%)</title><rect x="10.0" y="1059.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.41%)</title><rect x="10.0" y="1043.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.41%)</title><rect x="10.0" y="1027.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.41%)</title><rect x="10.0" y="1011.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.41%)</title><rect x="10.0" y="995.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.41%)</title><rect x="10.0" y="979.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$248/15430119.apply (1 samples, 0.41%)</title><rect x="10.0" y="963.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.41%)</title><rect x="14.9" y="1155.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="17.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.41%)</title><rect x="14.9" y="1139.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.9" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.41%)</title><rect x="19.8" y="1155.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.41%)</title><rect x="19.8" y="1139.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.41%)</title><rect x="19.8" y="1123.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/196385003.accept (1 samples, 0.41%)</title><rect x="19.8" y="1107.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.8" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.41%)</title><rect x="19.8" y="1091.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.41%)</title><rect x="19.8" y="1075.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.8" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.41%)</title><rect x="19.8" y="1059.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.8" y="1070.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.07%)</title><rect x="24.7" y="1155.0" width="24.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.7" y="1166.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/225050537.accept (5 samples, 2.07%)</title><rect x="24.7" y="1139.0" width="24.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.7" y="1150.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 2.07%)</title><rect x="24.7" y="1123.0" width="24.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.7" y="1134.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (4 samples, 1.66%)</title><rect x="24.7" y="1107.0" width="19.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.7" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (4 samples, 1.66%)</title><rect x="24.7" y="1091.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.24%)</title><rect x="29.6" y="1075.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.24%)</title><rect x="29.6" y="1059.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.41%)</title><rect x="39.4" y="1043.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="42.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.41%)</title><rect x="39.4" y="1027.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.41%)</title><rect x="44.3" y="1107.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.3" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.41%)</title><rect x="44.3" y="1091.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.41%)</title><rect x="44.3" y="1075.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.41%)</title><rect x="44.3" y="1059.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.41%)</title><rect x="44.3" y="1043.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.41%)</title><rect x="44.3" y="1027.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.41%)</title><rect x="44.3" y="1011.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.56%)</title><rect x="49.2" y="1155.0" width="53.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.2" y="1166.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 4.56%)</title><rect x="49.2" y="1139.0" width="53.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="52.2" y="1150.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.90%)</title><rect x="49.2" y="1123.0" width="34.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.2" y="1134.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.66%)</title><rect x="54.1" y="1107.0" width="19.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.66%)</title><rect x="54.1" y="1091.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.24%)</title><rect x="54.1" y="1075.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.41%)</title><rect x="54.1" y="1059.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.1" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.41%)</title><rect x="54.1" y="1043.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.1" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.41%)</title><rect x="54.1" y="1027.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.1" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.41%)</title><rect x="54.1" y="1011.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.1" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.41%)</title><rect x="54.1" y="995.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.1" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.41%)</title><rect x="54.1" y="979.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.1" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.nodesWithTimedOutRequests (1 samples, 0.41%)</title><rect x="54.1" y="963.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.1" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.83%)</title><rect x="59.0" y="1059.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.83%)</title><rect x="59.0" y="1043.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (2 samples, 0.83%)</title><rect x="59.0" y="1027.0" width="9.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (2 samples, 0.83%)</title><rect x="59.0" y="1011.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.0" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesSent (1 samples, 0.41%)</title><rect x="59.0" y="995.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.41%)</title><rect x="59.0" y="979.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.0" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordCompletedSend (1 samples, 0.41%)</title><rect x="63.9" y="995.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.9" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.41%)</title><rect x="63.9" y="979.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.9" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.41%)</title><rect x="63.9" y="963.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.41%)</title><rect x="68.8" y="1075.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="71.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.41%)</title><rect x="68.8" y="1059.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="71.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.41%)</title><rect x="68.8" y="1043.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="71.8" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.41%)</title><rect x="68.8" y="1027.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="71.8" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.41%)</title><rect x="68.8" y="1011.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.41%)</title><rect x="68.8" y="995.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="71.8" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.recordsOrFail (1 samples, 0.41%)</title><rect x="68.8" y="979.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="71.8" y="990.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.41%)</title><rect x="68.8" y="963.0" width="4.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="71.8" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (2 samples, 0.83%)</title><rect x="73.7" y="1107.0" width="9.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="76.7" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 0.83%)</title><rect x="73.7" y="1091.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.7" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 0.83%)</title><rect x="73.7" y="1075.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.7" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.83%)</title><rect x="73.7" y="1059.0" width="9.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="76.7" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.41%)</title><rect x="73.7" y="1043.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="76.7" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.41%)</title><rect x="73.7" y="1027.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="76.7" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.41%)</title><rect x="73.7" y="1011.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="76.7" y="1022.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.41%)</title><rect x="73.7" y="995.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="76.7" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.41%)</title><rect x="73.7" y="979.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="76.7" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.41%)</title><rect x="73.7" y="963.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="76.7" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.41%)</title><rect x="78.5" y="1043.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.5" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.41%)</title><rect x="78.5" y="1027.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.5" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.41%)</title><rect x="78.5" y="1011.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="81.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.41%)</title><rect x="78.5" y="995.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="81.5" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="78.5" y="979.0" width="4.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="81.5" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 1.24%)</title><rect x="83.4" y="1123.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.24%)</title><rect x="83.4" y="1107.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.24%)</title><rect x="83.4" y="1091.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 1.24%)</title><rect x="83.4" y="1075.0" width="14.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="86.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (2 samples, 0.83%)</title><rect x="83.4" y="1059.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (2 samples, 0.83%)</title><rect x="83.4" y="1043.0" width="9.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="86.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (2 samples, 0.83%)</title><rect x="83.4" y="1027.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="86.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (2 samples, 0.83%)</title><rect x="83.4" y="1011.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="86.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (2 samples, 0.83%)</title><rect x="83.4" y="995.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (2 samples, 0.83%)</title><rect x="83.4" y="979.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="86.4" y="990.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (2 samples, 0.83%)</title><rect x="83.4" y="963.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="86.4" y="974.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.83%)</title><rect x="83.4" y="947.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.4" y="958.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.83%)</title><rect x="83.4" y="931.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="86.4" y="942.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (2 samples, 0.83%)</title><rect x="83.4" y="915.0" width="9.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="86.4" y="926.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.41%)</title><rect x="88.3" y="899.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.3" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$BufferCache.get (1 samples, 0.41%)</title><rect x="88.3" y="883.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.3" y="894.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.41%)</title><rect x="88.3" y="867.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="91.3" y="878.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.41%)</title><rect x="88.3" y="851.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="91.3" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.41%)</title><rect x="88.3" y="835.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.hasCompletedReceive (1 samples, 0.41%)</title><rect x="93.2" y="1059.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.2" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.41%)</title><rect x="93.2" y="1043.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="96.2" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.41%)</title><rect x="93.2" y="1027.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="96.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.41%)</title><rect x="93.2" y="1011.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.41%)</title><rect x="93.2" y="995.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.2" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.41%)</title><rect x="93.2" y="979.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.2" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.41%)</title><rect x="98.1" y="1123.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.1" y="1134.0"></text>
</g>
<g>
<title>java/lang/Thread.run (122 samples, 50.62%)</title><rect x="103.0" y="1203.0" width="597.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.0" y="1214.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (122 samples, 50.62%)</title><rect x="103.0" y="1187.0" width="597.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.0" y="1198.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (122 samples, 50.62%)</title><rect x="103.0" y="1171.0" width="597.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.0" y="1182.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/603327542.run (118 samples, 48.96%)</title><rect x="103.0" y="1155.0" width="577.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="106.0" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/603327..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (118 samples, 48.96%)</title><rect x="103.0" y="1139.0" width="577.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="106.0" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (118 samples, 48.96%)</title><rect x="103.0" y="1123.0" width="577.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="106.0" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (118 samples, 48.96%)</title><rect x="103.0" y="1107.0" width="577.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.0" y="1118.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 3.32%)</title><rect x="122.6" y="1091.0" width="39.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.6" y="1102.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.32%)</title><rect x="122.6" y="1075.0" width="39.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.6" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.32%)</title><rect x="122.6" y="1059.0" width="39.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="125.6" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 2.07%)</title><rect x="137.3" y="1043.0" width="24.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.3" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.83%)</title><rect x="137.3" y="1027.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="140.3" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.41%)</title><rect x="142.2" y="1011.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="145.2" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.24%)</title><rect x="147.1" y="1027.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="150.1" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/1324515452.accept (3 samples, 1.24%)</title><rect x="147.1" y="1011.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (3 samples, 1.24%)</title><rect x="147.1" y="995.0" width="14.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="150.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.24%)</title><rect x="147.1" y="979.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="150.1" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.24%)</title><rect x="147.1" y="963.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="150.1" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.83%)</title><rect x="152.0" y="947.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="155.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.41%)</title><rect x="152.0" y="931.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.0" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/1916349189.accept (1 samples, 0.41%)</title><rect x="152.0" y="915.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.41%)</title><rect x="156.9" y="931.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.9" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.41%)</title><rect x="161.8" y="1091.0" width="4.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.8" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.41%)</title><rect x="161.8" y="1075.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="164.8" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.41%)</title><rect x="161.8" y="1059.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="164.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.41%)</title><rect x="161.8" y="1043.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="164.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.41%)</title><rect x="161.8" y="1027.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (15 samples, 6.22%)</title><rect x="166.7" y="1091.0" width="73.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.7" y="1102.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (15 samples, 6.22%)</title><rect x="166.7" y="1075.0" width="73.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.7" y="1086.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (15 samples, 6.22%)</title><rect x="166.7" y="1059.0" width="73.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.7" y="1070.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 6.22%)</title><rect x="166.7" y="1043.0" width="73.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.7" y="1054.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (15 samples, 6.22%)</title><rect x="166.7" y="1027.0" width="73.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.7" y="1038.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (15 samples, 6.22%)</title><rect x="166.7" y="1011.0" width="73.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="169.7" y="1022.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 2.49%)</title><rect x="171.6" y="995.0" width="29.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="174.6" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (6 samples, 2.49%)</title><rect x="171.6" y="979.0" width="29.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="174.6" y="990.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (6 samples, 2.49%)</title><rect x="171.6" y="963.0" width="29.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="174.6" y="974.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.41%)</title><rect x="171.6" y="947.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="174.6" y="958.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.41%)</title><rect x="171.6" y="931.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="174.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 2.07%)</title><rect x="176.5" y="947.0" width="24.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.5" y="958.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 2.07%)</title><rect x="176.5" y="931.0" width="24.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.5" y="942.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.41%)</title><rect x="186.3" y="915.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="189.3" y="926.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.41%)</title><rect x="186.3" y="899.0" width="4.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="189.3" y="910.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.41%)</title><rect x="186.3" y="883.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="189.3" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.83%)</title><rect x="191.2" y="915.0" width="9.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="194.2" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.41%)</title><rect x="196.1" y="899.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="199.1" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.41%)</title><rect x="196.1" y="883.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="199.1" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.41%)</title><rect x="196.1" y="867.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="199.1" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.41%)</title><rect x="196.1" y="851.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="199.1" y="862.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.41%)</title><rect x="196.1" y="835.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="199.1" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (6 samples, 2.49%)</title><rect x="201.0" y="995.0" width="29.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.0" y="1006.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.41%)</title><rect x="201.0" y="979.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="204.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.41%)</title><rect x="201.0" y="963.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.83%)</title><rect x="205.9" y="979.0" width="9.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.83%)</title><rect x="205.9" y="963.0" width="9.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.41%)</title><rect x="210.7" y="947.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.7" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.41%)</title><rect x="210.7" y="931.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.24%)</title><rect x="215.6" y="979.0" width="14.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.24%)</title><rect x="215.6" y="963.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.41%)</title><rect x="215.6" y="947.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="218.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.41%)</title><rect x="215.6" y="931.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="218.6" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.41%)</title><rect x="215.6" y="915.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.6" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.41%)</title><rect x="215.6" y="899.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.6" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.41%)</title><rect x="215.6" y="883.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.6" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.41%)</title><rect x="215.6" y="867.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="218.6" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.83%)</title><rect x="220.5" y="947.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="223.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.83%)</title><rect x="220.5" y="931.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.83%)</title><rect x="220.5" y="915.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="223.5" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.41%)</title><rect x="220.5" y="899.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.5" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.41%)</title><rect x="220.5" y="883.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.5" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.41%)</title><rect x="220.5" y="867.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="223.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.41%)</title><rect x="220.5" y="851.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="223.5" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.41%)</title><rect x="220.5" y="835.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="223.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.41%)</title><rect x="225.4" y="899.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.4" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.41%)</title><rect x="225.4" y="883.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.4" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.41%)</title><rect x="225.4" y="867.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.4" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.83%)</title><rect x="230.3" y="995.0" width="9.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.3" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.83%)</title><rect x="230.3" y="979.0" width="9.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.83%)</title><rect x="230.3" y="963.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="233.3" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.83%)</title><rect x="230.3" y="947.0" width="9.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.83%)</title><rect x="230.3" y="931.0" width="9.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (90 samples, 37.34%)</title><rect x="240.1" y="1091.0" width="440.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="243.1" y="1102.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipel..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 3.32%)</title><rect x="240.1" y="1075.0" width="39.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.1" y="1086.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 3.32%)</title><rect x="240.1" y="1059.0" width="39.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.1" y="1070.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (8 samples, 3.32%)</title><rect x="240.1" y="1043.0" width="39.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="243.1" y="1054.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.83%)</title><rect x="245.0" y="1027.0" width="9.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="248.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.41%)</title><rect x="245.0" y="1011.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="248.0" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.41%)</title><rect x="245.0" y="995.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="248.0" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.41%)</title><rect x="249.9" y="1011.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.9" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.41%)</title><rect x="249.9" y="995.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.41%)</title><rect x="254.8" y="1027.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.41%)</title><rect x="254.8" y="1011.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="257.8" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 1.66%)</title><rect x="259.7" y="1027.0" width="19.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="262.7" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.66%)</title><rect x="259.7" y="1011.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.7" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.66%)</title><rect x="259.7" y="995.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.7" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (12 samples, 4.98%)</title><rect x="279.3" y="1075.0" width="58.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="282.3" y="1086.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (9 samples, 3.73%)</title><rect x="279.3" y="1059.0" width="44.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.3" y="1070.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 1.66%)</title><rect x="284.2" y="1043.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="287.2" y="1054.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.24%)</title><rect x="284.2" y="1027.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="287.2" y="1038.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.24%)</title><rect x="284.2" y="1011.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="287.2" y="1022.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.24%)</title><rect x="284.2" y="995.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.2" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.24%)</title><rect x="284.2" y="979.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.2" y="990.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.83%)</title><rect x="289.1" y="963.0" width="9.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="292.1" y="974.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.83%)</title><rect x="289.1" y="947.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="292.1" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.83%)</title><rect x="289.1" y="931.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="292.1" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.41%)</title><rect x="289.1" y="915.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="292.1" y="926.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.41%)</title><rect x="289.1" y="899.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="292.1" y="910.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.41%)</title><rect x="289.1" y="883.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="292.1" y="894.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.41%)</title><rect x="294.0" y="915.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="297.0" y="926.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.41%)</title><rect x="298.9" y="1027.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.9" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.41%)</title><rect x="298.9" y="1011.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.9" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.41%)</title><rect x="298.9" y="995.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.41%)</title><rect x="298.9" y="979.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="301.9" y="990.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (4 samples, 1.66%)</title><rect x="303.8" y="1043.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.8" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.24%)</title><rect x="308.7" y="1027.0" width="14.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.7" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.83%)</title><rect x="308.7" y="1011.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="311.7" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.41%)</title><rect x="318.5" y="1011.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.41%)</title><rect x="318.5" y="995.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.5" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.41%)</title><rect x="318.5" y="979.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.5" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 1.24%)</title><rect x="323.4" y="1059.0" width="14.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.4" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 1.24%)</title><rect x="323.4" y="1043.0" width="14.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="326.4" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.24%)</title><rect x="323.4" y="1027.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="326.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.41%)</title><rect x="323.4" y="1011.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="326.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.41%)</title><rect x="323.4" y="995.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.4" y="1006.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="323.4" y="979.0" width="4.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="326.4" y="990.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (2 samples, 0.83%)</title><rect x="328.3" y="1011.0" width="9.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="331.3" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.83%)</title><rect x="328.3" y="995.0" width="9.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="331.3" y="1006.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.41%)</title><rect x="333.2" y="979.0" width="4.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="336.2" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (62 samples, 25.73%)</title><rect x="338.0" y="1075.0" width="303.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="341.0" y="1086.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (62 samples, 25.73%)</title><rect x="338.0" y="1059.0" width="303.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="341.0" y="1070.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/634158690.process (55 samples, 22.82%)</title><rect x="352.7" y="1043.0" width="269.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.7" y="1054.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (55 samples, 22.82%)</title><rect x="352.7" y="1027.0" width="269.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="355.7" y="1038.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (55 samples, 22.82%)</title><rect x="352.7" y="1011.0" width="269.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="355.7" y="1022.0">com/linecorp/decaton/benchmark/Recor..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.83%)</title><rect x="372.3" y="995.0" width="9.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="375.3" y="1006.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.83%)</title><rect x="372.3" y="979.0" width="9.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="375.3" y="990.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.83%)</title><rect x="372.3" y="963.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.3" y="974.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.83%)</title><rect x="372.3" y="947.0" width="9.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="375.3" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.41%)</title><rect x="377.2" y="931.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.2" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.41%)</title><rect x="377.2" y="915.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (49 samples, 20.33%)</title><rect x="382.1" y="995.0" width="239.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.1" y="1006.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (46 samples, 19.09%)</title><rect x="387.0" y="979.0" width="225.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.0" y="990.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (39 samples, 16.18%)</title><rect x="421.3" y="963.0" width="190.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="424.3" y="974.0">JVM_Sleep</text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 2.07%)</title><rect x="431.1" y="947.0" width="24.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="434.1" y="958.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (18 samples, 7.47%)</title><rect x="455.6" y="947.0" width="88.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="458.6" y="958.0">__pthread_..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.41%)</title><rect x="543.7" y="947.0" width="4.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="546.7" y="958.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.83%)</title><rect x="548.6" y="947.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="551.6" y="958.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (10 samples, 4.15%)</title><rect x="558.4" y="947.0" width="48.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="561.4" y="958.0">os::..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.83%)</title><rect x="587.8" y="931.0" width="9.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="590.8" y="942.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.83%)</title><rect x="597.6" y="931.0" width="9.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="600.6" y="942.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (1 samples, 0.41%)</title><rect x="607.3" y="947.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="610.3" y="958.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.83%)</title><rect x="612.2" y="979.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="615.2" y="990.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.83%)</title><rect x="612.2" y="963.0" width="9.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="615.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.41%)</title><rect x="622.0" y="1043.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="625.0" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.41%)</title><rect x="622.0" y="1027.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.41%)</title><rect x="622.0" y="1011.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="625.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.41%)</title><rect x="622.0" y="995.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.0" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.41%)</title><rect x="622.0" y="979.0" width="4.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="625.0" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.41%)</title><rect x="622.0" y="963.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="625.0" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.41%)</title><rect x="626.9" y="1043.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.41%)</title><rect x="626.9" y="1027.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="629.9" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.41%)</title><rect x="631.8" y="1043.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.8" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.41%)</title><rect x="631.8" y="1027.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="634.8" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.41%)</title><rect x="636.7" y="1043.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.7" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.41%)</title><rect x="636.7" y="1027.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.7" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.41%)</title><rect x="636.7" y="1011.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.7" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.41%)</title><rect x="636.7" y="995.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.7" y="1006.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.41%)</title><rect x="636.7" y="979.0" width="4.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="639.7" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.32%)</title><rect x="641.6" y="1075.0" width="39.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.6" y="1086.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 3.32%)</title><rect x="641.6" y="1059.0" width="39.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.6" y="1070.0">jav..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.41%)</title><rect x="661.2" y="1043.0" width="4.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="664.2" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.41%)</title><rect x="661.2" y="1027.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="664.2" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="666.1" y="1043.0" width="4.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="669.1" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="666.1" y="1027.0" width="4.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="669.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.83%)</title><rect x="671.0" y="1043.0" width="9.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="674.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.41%)</title><rect x="671.0" y="1027.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="674.0" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.41%)</title><rect x="675.9" y="1027.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.9" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$479/374845528.accept (1 samples, 0.41%)</title><rect x="675.9" y="1011.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="678.9" y="1022.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="675.9" y="995.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="678.9" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.83%)</title><rect x="680.8" y="1155.0" width="9.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="683.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.83%)</title><rect x="680.8" y="1139.0" width="9.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.83%)</title><rect x="680.8" y="1123.0" width="9.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="683.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.83%)</title><rect x="680.8" y="1107.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.8" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="685.7" y="1091.0" width="4.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="688.7" y="1102.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="685.7" y="1075.0" width="4.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="688.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.83%)</title><rect x="690.6" y="1155.0" width="9.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="693.6" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.83%)</title><rect x="690.6" y="1139.0" width="9.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="693.6" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.41%)</title><rect x="690.6" y="1123.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="693.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.41%)</title><rect x="690.6" y="1107.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="693.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.41%)</title><rect x="690.6" y="1091.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="693.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.41%)</title><rect x="695.5" y="1123.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.41%)</title><rect x="695.5" y="1107.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.41%)</title><rect x="695.5" y="1091.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="698.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.41%)</title><rect x="695.5" y="1075.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="698.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.83%)</title><rect x="700.4" y="1203.0" width="9.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="703.4" y="1214.0"></text>
</g>
<g>
<title>start_thread (98 samples, 40.66%)</title><rect x="710.2" y="1203.0" width="479.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="713.2" y="1214.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (98 samples, 40.66%)</title><rect x="710.2" y="1187.0" width="479.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="713.2" y="1198.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (98 samples, 40.66%)</title><rect x="710.2" y="1171.0" width="479.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="713.2" y="1182.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.56%)</title><rect x="710.2" y="1155.0" width="53.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="713.2" y="1166.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 4.56%)</title><rect x="710.2" y="1139.0" width="53.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="713.2" y="1150.0">G1Par..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 4.15%)</title><rect x="710.2" y="1123.0" width="48.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="713.2" y="1134.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (5 samples, 2.07%)</title><rect x="724.9" y="1107.0" width="24.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.9" y="1118.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.07%)</title><rect x="724.9" y="1091.0" width="24.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="727.9" y="1102.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 1.24%)</title><rect x="734.6" y="1075.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="737.6" y="1086.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.41%)</title><rect x="749.3" y="1107.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="752.3" y="1118.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.41%)</title><rect x="754.2" y="1107.0" width="4.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="757.2" y="1118.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.41%)</title><rect x="754.2" y="1091.0" width="4.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="757.2" y="1102.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.41%)</title><rect x="759.1" y="1123.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="762.1" y="1134.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.41%)</title><rect x="759.1" y="1107.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="762.1" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.41%)</title><rect x="759.1" y="1091.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="762.1" y="1102.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.41%)</title><rect x="759.1" y="1075.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="762.1" y="1086.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.41%)</title><rect x="759.1" y="1059.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="762.1" y="1070.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.41%)</title><rect x="759.1" y="1043.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="762.1" y="1054.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.41%)</title><rect x="759.1" y="1027.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="762.1" y="1038.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) [clone .constprop.536] (1 samples, 0.41%)</title><rect x="759.1" y="1011.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="762.1" y="1022.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (86 samples, 35.68%)</title><rect x="764.0" y="1155.0" width="421.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.0" y="1166.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 35.27%)</title><rect x="764.0" y="1139.0" width="416.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.0" y="1150.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 35.27%)</title><rect x="764.0" y="1123.0" width="416.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="767.0" y="1134.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (81 samples, 33.61%)</title><rect x="764.0" y="1107.0" width="396.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.0" y="1118.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Dir..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (81 samples, 33.61%)</title><rect x="764.0" y="1091.0" width="396.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="767.0" y="1102.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, ..</text>
</g>
<g>
<title>CallGenerator::for_osr(ciMethod*, int) (1 samples, 0.41%)</title><rect x="764.0" y="1075.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.0" y="1086.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.41%)</title><rect x="764.0" y="1059.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="767.0" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="764.0" y="1043.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="767.0" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="764.0" y="1027.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="767.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="764.0" y="1011.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="764.0" y="995.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="767.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="764.0" y="979.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="764.0" y="963.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="767.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.41%)</title><rect x="764.0" y="947.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="767.0" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.41%)</title><rect x="764.0" y="931.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="767.0" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="764.0" y="915.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="767.0" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="764.0" y="899.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="767.0" y="910.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="764.0" y="883.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="767.0" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.41%)</title><rect x="764.0" y="867.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="767.0" y="878.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.41%)</title><rect x="764.0" y="851.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="767.0" y="862.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (52 samples, 21.58%)</title><rect x="768.9" y="1075.0" width="254.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="771.9" y="1086.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.24%)</title><rect x="768.9" y="1059.0" width="14.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="771.9" y="1070.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.41%)</title><rect x="768.9" y="1043.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="771.9" y="1054.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.41%)</title><rect x="768.9" y="1027.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="771.9" y="1038.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.83%)</title><rect x="773.8" y="1043.0" width="9.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="776.8" y="1054.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.83%)</title><rect x="773.8" y="1027.0" width="9.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="776.8" y="1038.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (2 samples, 0.83%)</title><rect x="773.8" y="1011.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="776.8" y="1022.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.41%)</title><rect x="783.6" y="1059.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="786.6" y="1070.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.41%)</title><rect x="783.6" y="1043.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="786.6" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 1.66%)</title><rect x="788.5" y="1059.0" width="19.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="791.5" y="1070.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.66%)</title><rect x="788.5" y="1043.0" width="19.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="791.5" y="1054.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.24%)</title><rect x="788.5" y="1027.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="791.5" y="1038.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.41%)</title><rect x="803.2" y="1027.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.2" y="1038.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.41%)</title><rect x="803.2" y="1011.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="806.2" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.41%)</title><rect x="803.2" y="995.0" width="4.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="806.2" y="1006.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 2.90%)</title><rect x="808.1" y="1059.0" width="34.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="811.1" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.41%)</title><rect x="808.1" y="1043.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="811.1" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::create_loop_tree() (1 samples, 0.41%)</title><rect x="808.1" y="1027.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="811.1" y="1038.0"></text>
</g>
<g>
<title>CFGLoop::push_pred(Block*, int, Block_List&amp;, PhaseCFG*) (1 samples, 0.41%)</title><rect x="808.1" y="1011.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="811.1" y="1022.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 2.49%)</title><rect x="813.0" y="1043.0" width="29.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="816.0" y="1054.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.41%)</title><rect x="813.0" y="1027.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="816.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.83%)</title><rect x="817.9" y="1027.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="820.9" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.41%)</title><rect x="817.9" y="1011.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="820.9" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.41%)</title><rect x="822.8" y="1011.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="825.8" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 1.24%)</title><rect x="827.7" y="1027.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="830.7" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.83%)</title><rect x="832.6" y="1011.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="835.6" y="1022.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.41%)</title><rect x="832.6" y="995.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="835.6" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="837.5" y="995.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="840.5" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (37 samples, 15.35%)</title><rect x="842.4" y="1059.0" width="181.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="845.4" y="1070.0">PhaseChaitin::Register_..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.41%)</title><rect x="842.4" y="1043.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="845.4" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.41%)</title><rect x="847.3" y="1043.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="850.3" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.41%)</title><rect x="852.2" y="1043.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="855.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.41%)</title><rect x="852.2" y="1027.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="855.2" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.07%)</title><rect x="857.1" y="1043.0" width="24.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="860.1" y="1054.0">P..</text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.41%)</title><rect x="876.6" y="1027.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="879.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.41%)</title><rect x="876.6" y="1011.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="879.6" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.41%)</title><rect x="876.6" y="995.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="879.6" y="1006.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 4.56%)</title><rect x="881.5" y="1043.0" width="53.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="884.5" y="1054.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 2.49%)</title><rect x="881.5" y="1027.0" width="29.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="884.5" y="1038.0">Ph..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.41%)</title><rect x="901.1" y="1011.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="904.1" y="1022.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.41%)</title><rect x="901.1" y="995.0" width="4.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="904.1" y="1006.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="906.0" y="1011.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="909.0" y="1022.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 1.66%)</title><rect x="910.9" y="1027.0" width="19.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="913.9" y="1038.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.83%)</title><rect x="920.7" y="1011.0" width="9.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.7" y="1022.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.41%)</title><rect x="930.5" y="1027.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="933.5" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.24%)</title><rect x="935.4" y="1043.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="938.4" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (2 samples, 0.83%)</title><rect x="940.3" y="1027.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="943.3" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.24%)</title><rect x="950.1" y="1043.0" width="14.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="953.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.83%)</title><rect x="955.0" y="1027.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="958.0" y="1038.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.83%)</title><rect x="964.8" y="1043.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="967.8" y="1054.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.41%)</title><rect x="964.8" y="1027.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.8" y="1038.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.41%)</title><rect x="969.7" y="1027.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="972.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.41%)</title><rect x="969.7" y="1011.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="972.7" y="1022.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.83%)</title><rect x="974.6" y="1043.0" width="9.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="977.6" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.83%)</title><rect x="974.6" y="1027.0" width="9.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.83%)</title><rect x="984.4" y="1043.0" width="9.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.4" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="989.3" y="1027.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.3" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.41%)</title><rect x="994.1" y="1043.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.1" y="1054.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.41%)</title><rect x="994.1" y="1027.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="997.1" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 2.07%)</title><rect x="999.0" y="1043.0" width="24.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1002.0" y="1054.0">P..</text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (2 samples, 0.83%)</title><rect x="999.0" y="1027.0" width="9.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1002.0" y="1038.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.41%)</title><rect x="1003.9" y="1011.0" width="4.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1006.9" y="1022.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 1.24%)</title><rect x="1008.8" y="1027.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1011.8" y="1038.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.41%)</title><rect x="1018.6" y="1011.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1021.6" y="1022.0"></text>
</g>
<g>
<title>Compile::Optimize() (20 samples, 8.30%)</title><rect x="1023.5" y="1075.0" width="98.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.5" y="1086.0">Compile::Op..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 2.90%)</title><rect x="1023.5" y="1059.0" width="34.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.5" y="1070.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 2.90%)</title><rect x="1023.5" y="1043.0" width="34.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1026.5" y="1054.0">Ph..</text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.41%)</title><rect x="1023.5" y="1027.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1026.5" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.66%)</title><rect x="1028.4" y="1027.0" width="19.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.24%)</title><rect x="1033.3" y="1011.0" width="14.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1036.3" y="1022.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.41%)</title><rect x="1033.3" y="995.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1036.3" y="1006.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.41%)</title><rect x="1038.2" y="995.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1041.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.41%)</title><rect x="1043.1" y="995.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1046.1" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.41%)</title><rect x="1043.1" y="979.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.1" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.41%)</title><rect x="1048.0" y="1027.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1051.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.41%)</title><rect x="1052.9" y="1027.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.9" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.41%)</title><rect x="1052.9" y="1011.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.41%)</title><rect x="1052.9" y="995.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1055.9" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const [clone .part.148] (1 samples, 0.41%)</title><rect x="1052.9" y="979.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1055.9" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.41%)</title><rect x="1052.9" y="963.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.9" y="974.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.41%)</title><rect x="1057.8" y="1059.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1060.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.41%)</title><rect x="1057.8" y="1043.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1060.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.41%)</title><rect x="1057.8" y="1027.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.8" y="1038.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1057.8" y="1011.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1060.8" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.41%)</title><rect x="1057.8" y="995.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1060.8" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="979.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1060.8" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="963.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.8" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="947.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.8" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="931.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.8" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="915.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1060.8" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="899.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1060.8" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.41%)</title><rect x="1057.8" y="883.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1060.8" y="894.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.41%)</title><rect x="1057.8" y="867.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1060.8" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.41%)</title><rect x="1062.7" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1065.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.41%)</title><rect x="1062.7" y="1043.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1065.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.41%)</title><rect x="1062.7" y="1027.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1065.7" y="1038.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.41%)</title><rect x="1062.7" y="1011.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.7" y="1022.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.41%)</title><rect x="1062.7" y="995.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1065.7" y="1006.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.41%)</title><rect x="1062.7" y="979.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.7" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 2.49%)</title><rect x="1067.6" y="1059.0" width="29.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1070.6" y="1070.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 1.66%)</title><rect x="1067.6" y="1043.0" width="19.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1070.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 1.66%)</title><rect x="1067.6" y="1027.0" width="19.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1070.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.83%)</title><rect x="1072.5" y="1011.0" width="9.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1075.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.83%)</title><rect x="1072.5" y="995.0" width="9.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.5" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.41%)</title><rect x="1082.3" y="1011.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1085.3" y="1022.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.41%)</title><rect x="1087.2" y="1043.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1090.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.41%)</title><rect x="1092.1" y="1043.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.41%)</title><rect x="1092.1" y="1027.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.1" y="1038.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.41%)</title><rect x="1092.1" y="1011.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.1" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.24%)</title><rect x="1097.0" y="1059.0" width="14.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.0" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.24%)</title><rect x="1097.0" y="1043.0" width="14.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1100.0" y="1054.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.83%)</title><rect x="1097.0" y="1027.0" width="9.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.0" y="1038.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.41%)</title><rect x="1101.9" y="1011.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.9" y="1022.0"></text>
</g>
<g>
<title>LoadNode::hash() const (1 samples, 0.41%)</title><rect x="1101.9" y="995.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.9" y="1006.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.41%)</title><rect x="1106.8" y="1027.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.8" y="1038.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.41%)</title><rect x="1106.8" y="1011.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.8" y="1022.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.41%)</title><rect x="1106.8" y="995.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.8" y="1006.0"></text>
</g>
<g>
<title>MultiNode::proj_out_or_null(unsigned int) const (1 samples, 0.41%)</title><rect x="1106.8" y="979.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1109.8" y="990.0"></text>
</g>
<g>
<title>RegionNode::bottom_type() const (1 samples, 0.41%)</title><rect x="1111.7" y="1059.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.7" y="1070.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.41%)</title><rect x="1116.6" y="1059.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1119.6" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.32%)</title><rect x="1121.5" y="1075.0" width="39.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.5" y="1086.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.32%)</title><rect x="1121.5" y="1059.0" width="39.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.5" y="1070.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.32%)</title><rect x="1121.5" y="1043.0" width="39.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.5" y="1054.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.32%)</title><rect x="1121.5" y="1027.0" width="39.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="1038.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.32%)</title><rect x="1121.5" y="1011.0" width="39.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.5" y="1022.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.90%)</title><rect x="1121.5" y="995.0" width="34.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.5" y="1006.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.49%)</title><rect x="1121.5" y="979.0" width="29.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.5" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.49%)</title><rect x="1121.5" y="963.0" width="29.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.5" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.49%)</title><rect x="1121.5" y="947.0" width="29.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.5" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.49%)</title><rect x="1121.5" y="931.0" width="29.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="942.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.49%)</title><rect x="1121.5" y="915.0" width="29.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.5" y="926.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.49%)</title><rect x="1121.5" y="899.0" width="29.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.5" y="910.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.83%)</title><rect x="1121.5" y="883.0" width="9.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.5" y="894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1121.5" y="867.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.41%)</title><rect x="1121.5" y="851.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.5" y="862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="1121.5" y="835.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1124.5" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="1121.5" y="819.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.5" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="1121.5" y="803.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1121.5" y="787.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.5" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1121.5" y="771.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.5" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1121.5" y="755.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1124.5" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1121.5" y="739.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.5" y="750.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.41%)</title><rect x="1121.5" y="723.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.41%)</title><rect x="1121.5" y="707.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1124.5" y="718.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.41%)</title><rect x="1121.5" y="691.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.5" y="702.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1121.5" y="675.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.5" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.41%)</title><rect x="1121.5" y="659.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.5" y="670.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.41%)</title><rect x="1121.5" y="643.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.5" y="654.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.41%)</title><rect x="1121.5" y="627.0" width="4.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1124.5" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.41%)</title><rect x="1126.3" y="867.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.3" y="878.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="1126.3" y="851.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.3" y="862.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="1126.3" y="835.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.3" y="846.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="1126.3" y="819.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.3" y="830.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1126.3" y="803.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.3" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1126.3" y="787.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.41%)</title><rect x="1126.3" y="771.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.41%)</title><rect x="1126.3" y="755.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.3" y="766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.41%)</title><rect x="1126.3" y="739.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.3" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1126.3" y="723.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.3" y="734.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1126.3" y="707.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1129.3" y="718.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.41%)</title><rect x="1126.3" y="691.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.3" y="702.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.41%)</title><rect x="1126.3" y="675.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.3" y="686.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.41%)</title><rect x="1126.3" y="659.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.3" y="670.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.41%)</title><rect x="1126.3" y="643.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.3" y="654.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.41%)</title><rect x="1126.3" y="627.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1129.3" y="638.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.41%)</title><rect x="1126.3" y="611.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.3" y="622.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.41%)</title><rect x="1126.3" y="595.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1129.3" y="606.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.41%)</title><rect x="1126.3" y="579.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.3" y="590.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.24%)</title><rect x="1131.2" y="883.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.2" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.24%)</title><rect x="1131.2" y="867.0" width="14.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.2" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.24%)</title><rect x="1131.2" y="851.0" width="14.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.24%)</title><rect x="1131.2" y="835.0" width="14.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.24%)</title><rect x="1131.2" y="819.0" width="14.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.2" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.24%)</title><rect x="1131.2" y="803.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.24%)</title><rect x="1131.2" y="787.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.24%)</title><rect x="1131.2" y="771.0" width="14.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.2" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.24%)</title><rect x="1131.2" y="755.0" width="14.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.24%)</title><rect x="1131.2" y="739.0" width="14.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.24%)</title><rect x="1131.2" y="723.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.24%)</title><rect x="1131.2" y="707.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.24%)</title><rect x="1131.2" y="691.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.24%)</title><rect x="1131.2" y="675.0" width="14.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.2" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.24%)</title><rect x="1131.2" y="659.0" width="14.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.24%)</title><rect x="1131.2" y="643.0" width="14.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.24%)</title><rect x="1131.2" y="627.0" width="14.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1134.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.24%)</title><rect x="1131.2" y="611.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.2" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.24%)</title><rect x="1131.2" y="595.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.2" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.24%)</title><rect x="1131.2" y="579.0" width="14.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.2" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.24%)</title><rect x="1131.2" y="563.0" width="14.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.24%)</title><rect x="1131.2" y="547.0" width="14.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.24%)</title><rect x="1131.2" y="531.0" width="14.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.24%)</title><rect x="1131.2" y="515.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.24%)</title><rect x="1131.2" y="499.0" width="14.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.2" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.24%)</title><rect x="1131.2" y="483.0" width="14.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.2" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.24%)</title><rect x="1131.2" y="467.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.24%)</title><rect x="1131.2" y="451.0" width="14.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.24%)</title><rect x="1131.2" y="435.0" width="14.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.24%)</title><rect x="1131.2" y="419.0" width="14.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.2" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.24%)</title><rect x="1131.2" y="403.0" width="14.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.2" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.41%)</title><rect x="1131.2" y="387.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.2" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.41%)</title><rect x="1131.2" y="371.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.2" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.41%)</title><rect x="1131.2" y="355.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.2" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.41%)</title><rect x="1131.2" y="339.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.2" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.41%)</title><rect x="1131.2" y="323.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.2" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1131.2" y="307.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.2" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.41%)</title><rect x="1131.2" y="291.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.2" y="302.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.41%)</title><rect x="1131.2" y="275.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.2" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.83%)</title><rect x="1136.1" y="387.0" width="9.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.1" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.83%)</title><rect x="1136.1" y="371.0" width="9.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1136.1" y="355.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1136.1" y="339.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1136.1" y="323.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1136.1" y="307.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.1" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1136.1" y="291.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.1" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1136.1" y="275.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1136.1" y="259.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1136.1" y="243.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1136.1" y="227.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1136.1" y="211.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.1" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1136.1" y="195.0" width="4.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.1" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1136.1" y="179.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1136.1" y="163.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1136.1" y="147.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1136.1" y="131.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.1" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1136.1" y="115.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.1" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1136.1" y="99.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.1" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1136.1" y="83.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1136.1" y="67.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1136.1" y="51.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.1" y="62.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1136.1" y="35.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.1" y="46.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.41%)</title><rect x="1141.0" y="355.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.41%)</title><rect x="1141.0" y="339.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.41%)</title><rect x="1145.9" y="883.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1148.9" y="894.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1145.9" y="867.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.9" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.41%)</title><rect x="1145.9" y="851.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.9" y="862.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.41%)</title><rect x="1145.9" y="835.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.9" y="846.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.41%)</title><rect x="1145.9" y="819.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.9" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.41%)</title><rect x="1145.9" y="803.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.9" y="814.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.41%)</title><rect x="1145.9" y="787.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.9" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.41%)</title><rect x="1145.9" y="771.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.9" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.41%)</title><rect x="1145.9" y="755.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.9" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1150.8" y="979.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1150.8" y="963.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1150.8" y="947.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1150.8" y="931.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1150.8" y="915.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1150.8" y="899.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1150.8" y="883.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.8" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1150.8" y="867.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1150.8" y="851.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1150.8" y="835.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1153.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1150.8" y="819.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1150.8" y="803.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1150.8" y="787.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.8" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1150.8" y="771.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.8" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1150.8" y="755.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1150.8" y="739.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1150.8" y="723.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1153.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1150.8" y="707.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1150.8" y="691.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1150.8" y="675.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1150.8" y="659.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1150.8" y="643.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1153.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1150.8" y="627.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1150.8" y="611.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.41%)</title><rect x="1150.8" y="595.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.8" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.41%)</title><rect x="1150.8" y="579.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.41%)</title><rect x="1150.8" y="563.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.41%)</title><rect x="1150.8" y="547.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1153.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.41%)</title><rect x="1150.8" y="531.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.41%)</title><rect x="1150.8" y="515.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1153.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1150.8" y="499.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1150.8" y="483.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1153.8" y="494.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.41%)</title><rect x="1150.8" y="467.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="478.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.41%)</title><rect x="1150.8" y="451.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1153.8" y="462.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.41%)</title><rect x="1150.8" y="435.0" width="4.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1153.8" y="446.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.41%)</title><rect x="1150.8" y="419.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.8" y="430.0"></text>
</g>
<g>
<title>IdealKit::end_if() (1 samples, 0.41%)</title><rect x="1150.8" y="403.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="414.0"></text>
</g>
<g>
<title>IdealKit::goto_(Node*, bool) (1 samples, 0.41%)</title><rect x="1150.8" y="387.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.8" y="398.0"></text>
</g>
<g>
<title>IdealKit::do_memory_merge(Node*, Node*) (1 samples, 0.41%)</title><rect x="1150.8" y="371.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1153.8" y="382.0"></text>
</g>
<g>
<title>PhiNode::make(Node*, Node*, Type const*, TypePtr const*) (1 samples, 0.41%)</title><rect x="1150.8" y="355.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.41%)</title><rect x="1155.7" y="995.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.41%)</title><rect x="1155.7" y="979.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.7" y="990.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.41%)</title><rect x="1155.7" y="963.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="974.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.41%)</title><rect x="1155.7" y="947.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="958.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.41%)</title><rect x="1155.7" y="931.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.7" y="942.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.41%)</title><rect x="1155.7" y="915.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.7" y="926.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.41%)</title><rect x="1155.7" y="899.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="910.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.66%)</title><rect x="1160.6" y="1107.0" width="19.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="1118.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.66%)</title><rect x="1160.6" y="1091.0" width="19.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.66%)</title><rect x="1160.6" y="1075.0" width="19.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="1086.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.66%)</title><rect x="1160.6" y="1059.0" width="19.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1163.6" y="1070.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.41%)</title><rect x="1160.6" y="1043.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="1054.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.41%)</title><rect x="1160.6" y="1027.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="1038.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.41%)</title><rect x="1160.6" y="1011.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.6" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.41%)</title><rect x="1160.6" y="995.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.6" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1160.6" y="979.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1160.6" y="963.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.6" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.41%)</title><rect x="1160.6" y="947.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1163.6" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="931.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1163.6" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="915.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.6" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1160.6" y="899.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.6" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1160.6" y="883.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.41%)</title><rect x="1160.6" y="867.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.6" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="851.0" width="4.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1163.6" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="835.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1160.6" y="819.0" width="4.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1163.6" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1160.6" y="803.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.41%)</title><rect x="1160.6" y="787.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="771.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1163.6" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="755.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1160.6" y="739.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1160.6" y="723.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.41%)</title><rect x="1160.6" y="707.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="691.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.6" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="675.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.6" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1160.6" y="659.0" width="4.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.6" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1160.6" y="643.0" width="4.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.41%)</title><rect x="1160.6" y="627.0" width="4.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.6" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="611.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.6" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.41%)</title><rect x="1160.6" y="595.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1163.6" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.41%)</title><rect x="1160.6" y="579.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.6" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.41%)</title><rect x="1160.6" y="563.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1163.6" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.41%)</title><rect x="1160.6" y="547.0" width="4.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.6" y="558.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.41%)</title><rect x="1165.5" y="1043.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="1054.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.41%)</title><rect x="1165.5" y="1027.0" width="4.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1168.5" y="1038.0"></text>
</g>
<g>
<title>LIR_OpTypeCheck::emit_code(LIR_Assembler*) (1 samples, 0.41%)</title><rect x="1165.5" y="1011.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.5" y="1022.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_opTypeCheck(LIR_OpTypeCheck*) (1 samples, 0.41%)</title><rect x="1165.5" y="995.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1168.5" y="1006.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_typecheck_helper(LIR_OpTypeCheck*, Label*, Label*, Label*) (1 samples, 0.41%)</title><rect x="1165.5" y="979.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.5" y="990.0"></text>
</g>
<g>
<title>LIR_Assembler::type_profile_helper(RegisterImpl*, ciMethodData*, ProfileData*, RegisterImpl*, Label*) (1 samples, 0.41%)</title><rect x="1165.5" y="963.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.5" y="974.0"></text>
</g>
<g>
<title>Assembler::cmpq(RegisterImpl*, Address) (1 samples, 0.41%)</title><rect x="1165.5" y="947.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.5" y="958.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 0.83%)</title><rect x="1170.4" y="1043.0" width="9.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1173.4" y="1054.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.41%)</title><rect x="1170.4" y="1027.0" width="4.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1173.4" y="1038.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.41%)</title><rect x="1170.4" y="1011.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="1022.0"></text>
</g>
<g>
<title>LIRGenerator::do_Goto(Goto*) (1 samples, 0.41%)</title><rect x="1170.4" y="995.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.4" y="1006.0"></text>
</g>
<g>
<title>LIRGenerator::increment_counter(LIR_Address*, int) (1 samples, 0.41%)</title><rect x="1170.4" y="979.0" width="4.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1173.4" y="990.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.41%)</title><rect x="1170.4" y="963.0" width="4.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1173.4" y="974.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.41%)</title><rect x="1175.3" y="1027.0" width="4.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.3" y="1038.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.41%)</title><rect x="1175.3" y="1011.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.3" y="1022.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.41%)</title><rect x="1180.2" y="1139.0" width="4.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.2" y="1150.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.41%)</title><rect x="1180.2" y="1123.0" width="4.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.2" y="1134.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.41%)</title><rect x="1180.2" y="1107.0" width="4.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.2" y="1118.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.41%)</title><rect x="1180.2" y="1091.0" width="4.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.2" y="1102.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.41%)</title><rect x="1180.2" y="1075.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="1086.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.41%)</title><rect x="1180.2" y="1059.0" width="4.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.2" y="1070.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.41%)</title><rect x="1180.2" y="1043.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.2" y="1054.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.41%)</title><rect x="1185.1" y="1155.0" width="4.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.1" y="1166.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.41%)</title><rect x="1185.1" y="1139.0" width="4.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="1150.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.41%)</title><rect x="1185.1" y="1123.0" width="4.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.1" y="1134.0"></text>
</g>
</g>
</svg>
