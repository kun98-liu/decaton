<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="725"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="725"> </text>
<g id="frames">
<g>
<title>all (779 samples, 100.00%)</title><rect x="10.0" y="691.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="702.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.39%)</title><rect x="10.0" y="675.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.26%)</title><rect x="10.0" y="659.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.26%)</title><rect x="10.0" y="643.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.26%)</title><rect x="10.0" y="627.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>CodeBlob::oop_map_for_return_address(unsigned char*) (2 samples, 0.26%)</title><rect x="10.0" y="611.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.13%)</title><rect x="13.0" y="659.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.0" y="670.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.13%)</title><rect x="13.0" y="643.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.0" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (232 samples, 29.78%)</title><rect x="14.5" y="675.0" width="351.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.5" y="686.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (232 samples, 29.78%)</title><rect x="14.5" y="659.0" width="351.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.5" y="670.0">com/linecorp/decaton/processor/runtime/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (228 samples, 29.27%)</title><rect x="16.1" y="643.0" width="345.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.1" y="654.0">com/linecorp/decaton/processor/runtime/internal..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.51%)</title><rect x="16.1" y="627.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.51%)</title><rect x="16.1" y="611.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.51%)</title><rect x="16.1" y="595.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.1" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.51%)</title><rect x="16.1" y="579.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.1" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.51%)</title><rect x="16.1" y="563.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.51%)</title><rect x="16.1" y="547.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.39%)</title><rect x="17.6" y="531.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.13%)</title><rect x="17.6" y="515.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.13%)</title><rect x="17.6" y="499.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="19.1" y="515.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="22.1" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.13%)</title><rect x="20.6" y="515.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.6" y="526.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.13%)</title><rect x="20.6" y="499.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="510.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.13%)</title><rect x="20.6" y="483.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.6" y="494.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.13%)</title><rect x="20.6" y="467.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.6" y="478.0"></text>
</g>
<g>
<title>java/util/stream/Sink.end (1 samples, 0.13%)</title><rect x="20.6" y="451.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.6" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (10 samples, 1.28%)</title><rect x="22.1" y="627.0" width="15.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (10 samples, 1.28%)</title><rect x="22.1" y="611.0" width="15.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (10 samples, 1.28%)</title><rect x="22.1" y="595.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$242/1380416171.accept (10 samples, 1.28%)</title><rect x="22.1" y="579.0" width="15.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.1" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (10 samples, 1.28%)</title><rect x="22.1" y="563.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.1" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (10 samples, 1.28%)</title><rect x="22.1" y="547.0" width="15.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.1" y="558.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (8 samples, 1.03%)</title><rect x="25.1" y="531.0" width="12.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.1" y="542.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (180 samples, 23.11%)</title><rect x="37.3" y="627.0" width="272.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="638.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$241/51388959.accept (173 samples, 22.21%)</title><rect x="37.3" y="611.0" width="262.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.3" y="622.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (173 samples, 22.21%)</title><rect x="37.3" y="595.0" width="262.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="606.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (158 samples, 20.28%)</title><rect x="37.3" y="579.0" width="239.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.3" y="590.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (158 samples, 20.28%)</title><rect x="37.3" y="563.0" width="239.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.3" y="574.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (158 samples, 20.28%)</title><rect x="37.3" y="547.0" width="239.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="558.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (158 samples, 20.28%)</title><rect x="37.3" y="531.0" width="239.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.3" y="542.0">java/util/concurrent/Executors$D..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (158 samples, 20.28%)</title><rect x="37.3" y="515.0" width="239.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="526.0">java/util/concurrent/ThreadPoolE..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 20.15%)</title><rect x="37.3" y="499.0" width="237.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.3" y="510.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (123 samples, 15.79%)</title><rect x="37.3" y="483.0" width="186.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.3" y="494.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (26 samples, 3.34%)</title><rect x="37.3" y="467.0" width="39.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (26 samples, 3.34%)</title><rect x="37.3" y="451.0" width="39.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.3" y="462.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (26 samples, 3.34%)</title><rect x="37.3" y="435.0" width="39.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.3" y="446.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (12 samples, 1.54%)</title><rect x="76.6" y="467.0" width="18.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="79.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (12 samples, 1.54%)</title><rect x="76.6" y="451.0" width="18.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="79.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.64%)</title><rect x="87.3" y="435.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="90.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.51%)</title><rect x="88.8" y="419.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (85 samples, 10.91%)</title><rect x="94.8" y="467.0" width="128.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="97.8" y="478.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (85 samples, 10.91%)</title><rect x="94.8" y="451.0" width="128.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="97.8" y="462.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (85 samples, 10.91%)</title><rect x="94.8" y="435.0" width="128.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="97.8" y="446.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (85 samples, 10.91%)</title><rect x="94.8" y="419.0" width="128.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="97.8" y="430.0">java/util/concur..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (82 samples, 10.53%)</title><rect x="99.4" y="403.0" width="124.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.4" y="414.0">jdk/internal/mi..</text>
</g>
<g>
<title>Unsafe_Unpark (38 samples, 4.88%)</title><rect x="100.9" y="387.0" width="57.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="103.9" y="398.0">Unsafe..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.26%)</title><rect x="110.0" y="371.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="113.0" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.26%)</title><rect x="113.0" y="371.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.0" y="382.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.64%)</title><rect x="116.0" y="371.0" width="7.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="119.0" y="382.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="122.1" y="355.0" width="1.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="125.1" y="366.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.13%)</title><rect x="123.6" y="371.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="126.6" y="382.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.51%)</title><rect x="125.1" y="371.0" width="6.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="128.1" y="382.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (6 samples, 0.77%)</title><rect x="131.2" y="371.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="134.2" y="382.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.54%)</title><rect x="140.3" y="371.0" width="18.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="143.3" y="382.0"></text>
</g>
<g>
<title>__pthread_cond_signal (43 samples, 5.52%)</title><rect x="158.4" y="387.0" width="65.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="161.4" y="398.0">__pthre..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (32 samples, 4.11%)</title><rect x="223.6" y="483.0" width="48.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="226.6" y="494.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (32 samples, 4.11%)</title><rect x="223.6" y="467.0" width="48.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="226.6" y="478.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.77%)</title><rect x="263.0" y="451.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.77%)</title><rect x="263.0" y="435.0" width="9.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="266.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.26%)</title><rect x="272.1" y="483.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="275.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.26%)</title><rect x="272.1" y="467.0" width="3.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.1" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.26%)</title><rect x="272.1" y="451.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.1" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.26%)</title><rect x="272.1" y="435.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.1" y="446.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.13%)</title><rect x="275.1" y="499.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="278.1" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (9 samples, 1.16%)</title><rect x="276.6" y="579.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="279.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (9 samples, 1.16%)</title><rect x="276.6" y="563.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="279.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.03%)</title><rect x="278.1" y="547.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="281.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.03%)</title><rect x="278.1" y="531.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.26%)</title><rect x="290.2" y="579.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.2" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.26%)</title><rect x="290.2" y="563.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="293.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.13%)</title><rect x="290.2" y="547.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.13%)</title><rect x="290.2" y="531.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="291.7" y="547.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.13%)</title><rect x="291.7" y="531.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="294.7" y="542.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.13%)</title><rect x="291.7" y="515.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.7" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="291.7" y="499.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.7" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="291.7" y="483.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.7" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.51%)</title><rect x="293.3" y="579.0" width="6.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.51%)</title><rect x="293.3" y="563.0" width="6.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="296.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.51%)</title><rect x="293.3" y="547.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.51%)</title><rect x="293.3" y="531.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.13%)</title><rect x="299.3" y="611.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.13%)</title><rect x="299.3" y="595.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.13%)</title><rect x="299.3" y="579.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="302.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.64%)</title><rect x="300.8" y="611.0" width="7.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="303.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.64%)</title><rect x="300.8" y="595.0" width="7.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.64%)</title><rect x="300.8" y="579.0" width="7.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.64%)</title><rect x="300.8" y="563.0" width="7.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.13%)</title><rect x="308.4" y="611.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 4.36%)</title><rect x="309.9" y="627.0" width="51.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.9" y="638.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 4.36%)</title><rect x="309.9" y="611.0" width="51.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.9" y="622.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 3.08%)</title><rect x="309.9" y="595.0" width="36.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.9" y="606.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (24 samples, 3.08%)</title><rect x="309.9" y="579.0" width="36.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="312.9" y="590.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.95%)</title><rect x="309.9" y="563.0" width="34.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.9" y="574.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (2 samples, 0.26%)</title><rect x="309.9" y="547.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (2 samples, 0.26%)</title><rect x="309.9" y="531.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.9" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.26%)</title><rect x="309.9" y="515.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.9" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.26%)</title><rect x="309.9" y="499.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="312.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.13%)</title><rect x="311.4" y="483.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (20 samples, 2.57%)</title><rect x="313.0" y="547.0" width="30.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.0" y="558.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 2.57%)</title><rect x="313.0" y="531.0" width="30.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.0" y="542.0">or..</text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.64%)</title><rect x="313.0" y="515.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="316.0" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.64%)</title><rect x="313.0" y="499.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.0" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.64%)</title><rect x="313.0" y="483.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.0" y="494.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.64%)</title><rect x="313.0" y="467.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.0" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.64%)</title><rect x="313.0" y="451.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.13%)</title><rect x="319.0" y="435.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 1.28%)</title><rect x="320.5" y="515.0" width="15.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="323.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.64%)</title><rect x="335.7" y="515.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="338.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.64%)</title><rect x="335.7" y="499.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="338.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.64%)</title><rect x="335.7" y="483.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.7" y="494.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.64%)</title><rect x="335.7" y="467.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="338.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.13%)</title><rect x="343.2" y="547.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="346.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.13%)</title><rect x="343.2" y="531.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.13%)</title><rect x="343.2" y="515.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="346.2" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.13%)</title><rect x="343.2" y="499.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="346.2" y="510.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="343.2" y="483.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.2" y="494.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="343.2" y="467.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="346.2" y="478.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="343.2" y="451.0" width="1.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="346.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.initializeCompletedFetch (1 samples, 0.13%)</title><rect x="344.8" y="563.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="347.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.recordsOrFail (1 samples, 0.13%)</title><rect x="344.8" y="547.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="347.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.13%)</title><rect x="346.3" y="595.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="349.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.13%)</title><rect x="346.3" y="579.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="349.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.13%)</title><rect x="346.3" y="563.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="349.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.13%)</title><rect x="346.3" y="547.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="349.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.13%)</title><rect x="346.3" y="531.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="349.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.13%)</title><rect x="346.3" y="515.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="349.3" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.13%)</title><rect x="346.3" y="499.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="349.3" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.90%)</title><rect x="347.8" y="595.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.90%)</title><rect x="347.8" y="579.0" width="10.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="350.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.90%)</title><rect x="347.8" y="563.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="350.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.clear (2 samples, 0.26%)</title><rect x="347.8" y="547.0" width="3.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="350.8" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.clear (1 samples, 0.13%)</title><rect x="349.3" y="531.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="352.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.39%)</title><rect x="350.8" y="547.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="353.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.39%)</title><rect x="350.8" y="531.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="353.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.39%)</title><rect x="350.8" y="515.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.39%)</title><rect x="350.8" y="499.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="353.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.39%)</title><rect x="350.8" y="483.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.13%)</title><rect x="350.8" y="467.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.8" y="478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.13%)</title><rect x="350.8" y="451.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="353.8" y="462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.13%)</title><rect x="350.8" y="435.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.8" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.13%)</title><rect x="350.8" y="419.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="353.8" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.13%)</title><rect x="350.8" y="403.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="353.8" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.13%)</title><rect x="350.8" y="387.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="353.8" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="350.8" y="371.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="353.8" y="382.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.13%)</title><rect x="350.8" y="355.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="353.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.26%)</title><rect x="352.3" y="467.0" width="3.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="355.3" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.26%)</title><rect x="352.3" y="451.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="355.3" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.13%)</title><rect x="352.3" y="435.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="355.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="352.3" y="419.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.13%)</title><rect x="352.3" y="403.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="355.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.13%)</title><rect x="352.3" y="387.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.3" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.13%)</title><rect x="353.9" y="435.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="356.9" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.13%)</title><rect x="353.9" y="419.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="356.9" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.13%)</title><rect x="353.9" y="403.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.9" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.13%)</title><rect x="353.9" y="387.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="356.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.13%)</title><rect x="353.9" y="371.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.13%)</title><rect x="355.4" y="547.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="358.4" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.13%)</title><rect x="355.4" y="531.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.4" y="542.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.13%)</title><rect x="355.4" y="515.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="358.4" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.13%)</title><rect x="355.4" y="499.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="358.4" y="510.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processUpdateQueue (1 samples, 0.13%)</title><rect x="355.4" y="483.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.4" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.putIfAbsent (1 samples, 0.13%)</title><rect x="355.4" y="467.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="358.4" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.13%)</title><rect x="355.4" y="451.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.4" y="462.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeAccess (1 samples, 0.13%)</title><rect x="355.4" y="435.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.13%)</title><rect x="356.9" y="547.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.9" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="356.9" y="531.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="359.9" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="356.9" y="515.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="359.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.13%)</title><rect x="358.4" y="595.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="361.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.13%)</title><rect x="358.4" y="579.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="361.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validatePositionsOnMetadataChange (1 samples, 0.13%)</title><rect x="358.4" y="563.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="361.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.13%)</title><rect x="358.4" y="547.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="361.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.13%)</title><rect x="359.9" y="595.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="362.9" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.13%)</title><rect x="359.9" y="579.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.13%)</title><rect x="359.9" y="563.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.9" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.13%)</title><rect x="359.9" y="547.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="362.9" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="359.9" y="531.0" width="1.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="362.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 0.26%)</title><rect x="361.4" y="643.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="364.4" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.13%)</title><rect x="364.5" y="643.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.5" y="654.0"></text>
</g>
<g>
<title>java/lang/Thread.run (495 samples, 63.54%)</title><rect x="366.0" y="675.0" width="749.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="369.0" y="686.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (495 samples, 63.54%)</title><rect x="366.0" y="659.0" width="749.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="369.0" y="670.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (495 samples, 63.54%)</title><rect x="366.0" y="643.0" width="749.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="369.0" y="654.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$472/348932296.run (317 samples, 40.69%)</title><rect x="370.5" y="627.0" width="480.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="373.5" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (317 samples, 40.69%)</title><rect x="370.5" y="611.0" width="480.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="373.5" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lamb..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (316 samples, 40.56%)</title><rect x="372.0" y="595.0" width="478.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="375.0" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (316 samples, 40.56%)</title><rect x="372.0" y="579.0" width="478.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="375.0" y="590.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.26%)</title><rect x="376.6" y="563.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.6" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.26%)</title><rect x="376.6" y="547.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.26%)</title><rect x="376.6" y="531.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.6" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.26%)</title><rect x="376.6" y="515.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.6" y="526.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.26%)</title><rect x="376.6" y="499.0" width="3.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="379.6" y="510.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.26%)</title><rect x="376.6" y="483.0" width="3.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="379.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (28 samples, 3.59%)</title><rect x="379.6" y="563.0" width="42.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.6" y="574.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 3.59%)</title><rect x="379.6" y="547.0" width="42.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="382.6" y="558.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (28 samples, 3.59%)</title><rect x="379.6" y="531.0" width="42.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.6" y="542.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 2.57%)</title><rect x="391.7" y="515.0" width="30.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="394.7" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.26%)</title><rect x="391.7" y="499.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="394.7" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.13%)</title><rect x="393.2" y="483.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="396.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 2.31%)</title><rect x="394.7" y="499.0" width="27.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="397.7" y="510.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$480/408533155.accept (18 samples, 2.31%)</title><rect x="394.7" y="483.0" width="27.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="397.7" y="494.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (18 samples, 2.31%)</title><rect x="394.7" y="467.0" width="27.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.7" y="478.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (18 samples, 2.31%)</title><rect x="394.7" y="451.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="397.7" y="462.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (18 samples, 2.31%)</title><rect x="394.7" y="435.0" width="27.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.7" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (17 samples, 2.18%)</title><rect x="396.3" y="419.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.3" y="430.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.51%)</title><rect x="396.3" y="403.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.3" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (13 samples, 1.67%)</title><rect x="402.3" y="403.0" width="19.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="405.3" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$470/649278493.accept (1 samples, 0.13%)</title><rect x="420.5" y="387.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="423.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$0 (1 samples, 0.13%)</title><rect x="420.5" y="371.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="423.5" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (95 samples, 12.20%)</title><rect x="422.0" y="563.0" width="143.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="425.0" y="574.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (95 samples, 12.20%)</title><rect x="422.0" y="547.0" width="143.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.0" y="558.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (95 samples, 12.20%)</title><rect x="422.0" y="531.0" width="143.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="425.0" y="542.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (95 samples, 12.20%)</title><rect x="422.0" y="515.0" width="143.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="425.0" y="526.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (95 samples, 12.20%)</title><rect x="422.0" y="499.0" width="143.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="425.0" y="510.0">com/linecorp/decat..</text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.90%)</title><rect x="425.0" y="483.0" width="10.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="428.0" y="494.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.77%)</title><rect x="426.6" y="467.0" width="9.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="429.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (86 samples, 11.04%)</title><rect x="435.6" y="483.0" width="130.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="438.6" y="494.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 0.64%)</title><rect x="435.6" y="467.0" width="7.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="438.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.51%)</title><rect x="435.6" y="451.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="438.6" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="435.6" y="435.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="438.6" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="435.6" y="419.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="438.6" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="435.6" y="403.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="438.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="435.6" y="387.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="438.6" y="398.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.13%)</title><rect x="435.6" y="371.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.6" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.39%)</title><rect x="437.2" y="435.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="440.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.39%)</title><rect x="437.2" y="419.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="440.2" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.39%)</title><rect x="437.2" y="403.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.2" y="414.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.39%)</title><rect x="437.2" y="387.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="440.2" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.13%)</title><rect x="440.2" y="371.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="443.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.13%)</title><rect x="441.7" y="451.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="444.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.13%)</title><rect x="441.7" y="435.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.13%)</title><rect x="441.7" y="419.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.13%)</title><rect x="441.7" y="403.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.13%)</title><rect x="441.7" y="387.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="441.7" y="371.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="444.7" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="441.7" y="355.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="444.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="441.7" y="339.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="444.7" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="441.7" y="323.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="444.7" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="441.7" y="307.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="444.7" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="441.7" y="291.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="444.7" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.13%)</title><rect x="441.7" y="275.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="444.7" y="286.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.13%)</title><rect x="441.7" y="259.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="444.7" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.13%)</title><rect x="441.7" y="243.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="444.7" y="254.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.13%)</title><rect x="441.7" y="227.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="444.7" y="238.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.13%)</title><rect x="441.7" y="211.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="444.7" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (50 samples, 6.42%)</title><rect x="443.2" y="467.0" width="75.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.2" y="478.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.26%)</title><rect x="443.2" y="451.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.26%)</title><rect x="443.2" y="435.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.13%)</title><rect x="444.7" y="419.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="447.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 1.28%)</title><rect x="446.3" y="451.0" width="15.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 1.16%)</title><rect x="447.8" y="435.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.64%)</title><rect x="447.8" y="419.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="450.8" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.64%)</title><rect x="447.8" y="403.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="450.8" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.26%)</title><rect x="452.3" y="387.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.39%)</title><rect x="455.3" y="419.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="458.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.39%)</title><rect x="455.3" y="403.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="458.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.39%)</title><rect x="455.3" y="387.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.39%)</title><rect x="455.3" y="371.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="458.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.13%)</title><rect x="459.9" y="419.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="462.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.13%)</title><rect x="459.9" y="403.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.51%)</title><rect x="461.4" y="451.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.26%)</title><rect x="464.4" y="435.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="467.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (34 samples, 4.36%)</title><rect x="467.5" y="451.0" width="51.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="470.5" y="462.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (34 samples, 4.36%)</title><rect x="467.5" y="435.0" width="51.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="470.5" y="446.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.90%)</title><rect x="472.0" y="419.0" width="10.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="475.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.26%)</title><rect x="472.0" y="403.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="475.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.26%)</title><rect x="472.0" y="387.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.0" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.26%)</title><rect x="472.0" y="371.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="475.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.26%)</title><rect x="472.0" y="355.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="475.0" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.13%)</title><rect x="473.5" y="339.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="476.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.51%)</title><rect x="475.0" y="403.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="478.0" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.13%)</title><rect x="481.1" y="403.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="484.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.13%)</title><rect x="481.1" y="387.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="484.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (24 samples, 3.08%)</title><rect x="482.6" y="419.0" width="36.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="485.6" y="430.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (24 samples, 3.08%)</title><rect x="482.6" y="403.0" width="36.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.6" y="414.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (24 samples, 3.08%)</title><rect x="482.6" y="387.0" width="36.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.6" y="398.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.41%)</title><rect x="487.2" y="371.0" width="16.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="490.2" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.13%)</title><rect x="491.7" y="355.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="494.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.13%)</title><rect x="491.7" y="339.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="494.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.39%)</title><rect x="493.2" y="355.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.2" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.39%)</title><rect x="493.2" y="339.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.2" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.39%)</title><rect x="493.2" y="323.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="496.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.13%)</title><rect x="493.2" y="307.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="496.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.26%)</title><rect x="494.7" y="307.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="497.7" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.26%)</title><rect x="497.8" y="355.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.13%)</title><rect x="499.3" y="339.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.13%)</title><rect x="499.3" y="323.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="502.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.26%)</title><rect x="500.8" y="355.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.8" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.26%)</title><rect x="500.8" y="339.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.8" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.13%)</title><rect x="502.3" y="323.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="505.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 0.51%)</title><rect x="503.8" y="371.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.8" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.39%)</title><rect x="505.3" y="355.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.39%)</title><rect x="505.3" y="339.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.39%)</title><rect x="505.3" y="323.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.39%)</title><rect x="505.3" y="307.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="508.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.39%)</title><rect x="505.3" y="291.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.39%)</title><rect x="505.3" y="275.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="508.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.39%)</title><rect x="505.3" y="259.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="508.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.39%)</title><rect x="505.3" y="243.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (5 samples, 0.64%)</title><rect x="509.9" y="371.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (5 samples, 0.64%)</title><rect x="509.9" y="355.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (5 samples, 0.64%)</title><rect x="509.9" y="339.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="512.9" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (5 samples, 0.64%)</title><rect x="509.9" y="323.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.9" y="334.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (5 samples, 0.64%)</title><rect x="509.9" y="307.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.64%)</title><rect x="509.9" y="291.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.9" y="302.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedConstructorAccessor3.newInstance (1 samples, 0.13%)</title><rect x="509.9" y="275.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="512.9" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.51%)</title><rect x="511.4" y="275.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.13%)</title><rect x="517.4" y="371.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="520.4" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.13%)</title><rect x="517.4" y="355.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="520.4" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.13%)</title><rect x="517.4" y="339.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="520.4" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (31 samples, 3.98%)</title><rect x="519.0" y="467.0" width="46.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.0" y="478.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (31 samples, 3.98%)</title><rect x="519.0" y="451.0" width="46.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="522.0" y="462.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (31 samples, 3.98%)</title><rect x="519.0" y="435.0" width="46.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.0" y="446.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (31 samples, 3.98%)</title><rect x="519.0" y="419.0" width="46.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="522.0" y="430.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (31 samples, 3.98%)</title><rect x="519.0" y="403.0" width="46.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="522.0" y="414.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (183 samples, 23.49%)</title><rect x="565.9" y="563.0" width="277.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="568.9" y="574.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (36 samples, 4.62%)</title><rect x="567.4" y="547.0" width="54.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="570.4" y="558.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.13%)</title><rect x="567.4" y="531.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="570.4" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (35 samples, 4.49%)</title><rect x="568.9" y="531.0" width="53.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.9" y="542.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (32 samples, 4.11%)</title><rect x="572.0" y="515.0" width="48.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="575.0" y="526.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 2.05%)</title><rect x="573.5" y="499.0" width="24.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="576.5" y="510.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 1.16%)</title><rect x="584.1" y="483.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="587.1" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 1.16%)</title><rect x="584.1" y="467.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.1" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.13%)</title><rect x="597.7" y="499.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.13%)</title><rect x="597.7" y="483.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="600.7" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.13%)</title><rect x="597.7" y="467.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="600.7" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (14 samples, 1.80%)</title><rect x="599.2" y="499.0" width="21.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="602.2" y="510.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (12 samples, 1.54%)</title><rect x="602.3" y="483.0" width="18.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.3" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="602.3" y="467.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.3" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="602.3" y="451.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="605.3" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="602.3" y="435.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.3" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (11 samples, 1.41%)</title><rect x="603.8" y="467.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="606.8" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.39%)</title><rect x="611.4" y="451.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="614.4" y="462.0"></text>
</g>
<g>
<title>vtable stub (3 samples, 0.39%)</title><rect x="615.9" y="451.0" width="4.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="618.9" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.13%)</title><rect x="620.4" y="515.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.13%)</title><rect x="620.4" y="499.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="623.4" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.26%)</title><rect x="622.0" y="547.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="625.0" y="558.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.26%)</title><rect x="622.0" y="531.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="625.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (83 samples, 10.65%)</title><rect x="625.0" y="547.0" width="125.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="628.0" y="558.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="629.5" y="531.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="632.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (73 samples, 9.37%)</title><rect x="631.1" y="531.0" width="110.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="634.1" y="542.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (19 samples, 2.44%)</title><rect x="644.7" y="515.0" width="28.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.7" y="526.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 0.39%)</title><rect x="656.8" y="499.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="659.8" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 0.26%)</title><rect x="658.3" y="483.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.3" y="494.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.26%)</title><rect x="658.3" y="467.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="661.3" y="478.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.26%)</title><rect x="658.3" y="451.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="661.3" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 1.03%)</title><rect x="661.3" y="499.0" width="12.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="664.3" y="510.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.13%)</title><rect x="673.5" y="515.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="676.5" y="526.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (44 samples, 5.65%)</title><rect x="675.0" y="515.0" width="66.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.0" y="526.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (43 samples, 5.52%)</title><rect x="676.5" y="499.0" width="65.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="679.5" y="510.0">ch/qos/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (24 samples, 3.08%)</title><rect x="676.5" y="483.0" width="36.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.5" y="494.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.54%)</title><rect x="694.7" y="467.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="697.7" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.54%)</title><rect x="694.7" y="451.0" width="18.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="697.7" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.13%)</title><rect x="712.8" y="483.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="715.8" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.13%)</title><rect x="712.8" y="467.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.8" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.13%)</title><rect x="712.8" y="451.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="715.8" y="462.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (18 samples, 2.31%)</title><rect x="714.4" y="483.0" width="27.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="717.4" y="494.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (18 samples, 2.31%)</title><rect x="714.4" y="467.0" width="27.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="717.4" y="478.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.39%)</title><rect x="714.4" y="451.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="717.4" y="462.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.39%)</title><rect x="714.4" y="435.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="717.4" y="446.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.39%)</title><rect x="714.4" y="419.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="717.4" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 1.93%)</title><rect x="718.9" y="451.0" width="22.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="721.9" y="462.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.13%)</title><rect x="740.1" y="435.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="743.1" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="740.1" y="419.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="743.1" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="740.1" y="403.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="743.1" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="740.1" y="387.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="743.1" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="740.1" y="371.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="743.1" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="740.1" y="355.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="743.1" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="740.1" y="339.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="743.1" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.13%)</title><rect x="740.1" y="323.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="743.1" y="334.0"></text>
</g>
<g>
<title>Monitor::lock() (1 samples, 0.13%)</title><rect x="740.1" y="307.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="743.1" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (6 samples, 0.77%)</title><rect x="741.6" y="531.0" width="9.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="744.6" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.77%)</title><rect x="741.6" y="515.0" width="9.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="744.6" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.77%)</title><rect x="741.6" y="499.0" width="9.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="744.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.77%)</title><rect x="741.6" y="483.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="744.6" y="494.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.51%)</title><rect x="744.7" y="467.0" width="6.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="747.7" y="478.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.39%)</title><rect x="746.2" y="451.0" width="4.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="749.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (47 samples, 6.03%)</title><rect x="750.7" y="547.0" width="71.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="753.7" y="558.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (45 samples, 5.78%)</title><rect x="753.7" y="531.0" width="68.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="756.7" y="542.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$399/2140044793.process (20 samples, 2.57%)</title><rect x="761.3" y="515.0" width="30.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="764.3" y="526.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (9 samples, 1.16%)</title><rect x="778.0" y="499.0" width="13.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="781.0" y="510.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="778.0" y="483.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="781.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (8 samples, 1.03%)</title><rect x="779.5" y="483.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.5" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.13%)</title><rect x="784.0" y="467.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.0" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (1 samples, 0.13%)</title><rect x="784.0" y="451.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.0" y="462.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.buildLoggingEventAndAppend (1 samples, 0.13%)</title><rect x="784.0" y="435.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="787.0" y="446.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callAppenders (1 samples, 0.13%)</title><rect x="784.0" y="419.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="787.0" y="430.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.appendLoopOnAppenders (1 samples, 0.13%)</title><rect x="784.0" y="403.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.0" y="414.0"></text>
</g>
<g>
<title>ch/qos/logback/core/spi/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.13%)</title><rect x="784.0" y="387.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="787.0" y="398.0"></text>
</g>
<g>
<title>ch/qos/logback/core/UnsynchronizedAppenderBase.doAppend (1 samples, 0.13%)</title><rect x="784.0" y="371.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="787.0" y="382.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.append (1 samples, 0.13%)</title><rect x="784.0" y="355.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.0" y="366.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.subAppend (1 samples, 0.13%)</title><rect x="784.0" y="339.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="787.0" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/core/OutputStreamAppender.writeBytes (1 samples, 0.13%)</title><rect x="784.0" y="323.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.0" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/core/joran/spi/ConsoleTarget$2.write (1 samples, 0.13%)</title><rect x="784.0" y="307.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.0" y="318.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.write (1 samples, 0.13%)</title><rect x="784.0" y="291.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.0" y="302.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.13%)</title><rect x="784.0" y="275.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="787.0" y="286.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.13%)</title><rect x="784.0" y="259.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="787.0" y="270.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.13%)</title><rect x="784.0" y="243.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.0" y="254.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.13%)</title><rect x="784.0" y="227.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.0" y="238.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.13%)</title><rect x="784.0" y="211.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="787.0" y="222.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.13%)</title><rect x="784.0" y="195.0" width="1.6" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="787.0" y="206.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.13%)</title><rect x="784.0" y="179.0" width="1.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="787.0" y="190.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.13%)</title><rect x="784.0" y="163.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="787.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (4 samples, 0.51%)</title><rect x="785.6" y="467.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (4 samples, 0.51%)</title><rect x="785.6" y="451.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="788.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch$Sync.tryReleaseShared (2 samples, 0.26%)</title><rect x="785.6" y="435.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.26%)</title><rect x="785.6" y="419.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="788.6" y="430.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.26%)</title><rect x="785.6" y="403.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.6" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.26%)</title><rect x="785.6" y="387.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.6" y="398.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.13%)</title><rect x="787.1" y="371.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="790.1" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (2 samples, 0.26%)</title><rect x="788.6" y="435.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="791.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 0.51%)</title><rect x="791.6" y="515.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="794.6" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.13%)</title><rect x="796.2" y="499.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.2" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.13%)</title><rect x="797.7" y="515.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.7" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.13%)</title><rect x="799.2" y="515.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="802.2" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.39%)</title><rect x="800.7" y="515.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="803.7" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (3 samples, 0.39%)</title><rect x="800.7" y="499.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.7" y="510.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (2 samples, 0.26%)</title><rect x="802.2" y="483.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.2" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (7 samples, 0.90%)</title><rect x="805.3" y="515.0" width="10.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="808.3" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (3 samples, 0.39%)</title><rect x="805.3" y="499.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="808.3" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList$SubList.&lt;init&gt; (3 samples, 0.39%)</title><rect x="805.3" y="483.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="808.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.&lt;init&gt; (2 samples, 0.26%)</title><rect x="809.8" y="499.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.8" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.26%)</title><rect x="812.8" y="499.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.8" y="510.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.13%)</title><rect x="814.3" y="483.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.3" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractList.subListRangeCheck (1 samples, 0.13%)</title><rect x="814.3" y="467.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.51%)</title><rect x="815.9" y="515.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="818.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.51%)</title><rect x="815.9" y="499.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="818.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.51%)</title><rect x="815.9" y="483.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.13%)</title><rect x="815.9" y="467.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.9" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$478/567483318.accept (1 samples, 0.13%)</title><rect x="815.9" y="451.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="818.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.39%)</title><rect x="817.4" y="467.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.4" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.80%)</title><rect x="821.9" y="547.0" width="21.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="824.9" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.80%)</title><rect x="821.9" y="531.0" width="21.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.9" y="542.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.13%)</title><rect x="824.9" y="515.0" width="1.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="827.9" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="824.9" y="499.0" width="1.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="827.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.41%)</title><rect x="826.5" y="515.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="829.5" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.39%)</title><rect x="826.5" y="499.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="829.5" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$479/476458999.accept (1 samples, 0.13%)</title><rect x="829.5" y="483.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="832.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (8 samples, 1.03%)</title><rect x="831.0" y="499.0" width="12.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="834.0" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$479/476458999.accept (7 samples, 0.90%)</title><rect x="832.5" y="483.0" width="10.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (7 samples, 0.90%)</title><rect x="832.5" y="467.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="835.5" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (7 samples, 0.90%)</title><rect x="832.5" y="451.0" width="10.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="835.5" y="462.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.90%)</title><rect x="832.5" y="435.0" width="10.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="835.5" y="446.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.90%)</title><rect x="832.5" y="419.0" width="10.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.5" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.77%)</title><rect x="834.0" y="403.0" width="9.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="837.0" y="414.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.77%)</title><rect x="834.0" y="387.0" width="9.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="837.0" y="398.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.64%)</title><rect x="843.1" y="563.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="846.1" y="574.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.64%)</title><rect x="843.1" y="547.0" width="7.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="846.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (175 samples, 22.46%)</title><rect x="850.7" y="627.0" width="265.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="853.7" y="638.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (174 samples, 22.34%)</title><rect x="850.7" y="611.0" width="263.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="853.7" y="622.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (145 samples, 18.61%)</title><rect x="855.2" y="595.0" width="219.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.2" y="606.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.13%)</title><rect x="855.2" y="579.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="858.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="855.2" y="563.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="858.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="855.2" y="547.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="858.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="855.2" y="531.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="858.2" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="855.2" y="515.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="858.2" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="855.2" y="499.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="858.2" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="855.2" y="483.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="858.2" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.13%)</title><rect x="855.2" y="467.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="858.2" y="478.0"></text>
</g>
<g>
<title>Monitor::TrySpin(Thread*) [clone .part.24] (1 samples, 0.13%)</title><rect x="855.2" y="451.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="858.2" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (10 samples, 1.28%)</title><rect x="856.8" y="579.0" width="15.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 1.16%)</title><rect x="871.9" y="579.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 1.16%)</title><rect x="871.9" y="563.0" width="13.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.26%)</title><rect x="882.5" y="547.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="885.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (9 samples, 1.16%)</title><rect x="885.5" y="579.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="888.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (9 samples, 1.16%)</title><rect x="885.5" y="563.0" width="13.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="888.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (116 samples, 14.89%)</title><rect x="899.2" y="579.0" width="175.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="902.2" y="590.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (116 samples, 14.89%)</title><rect x="899.2" y="563.0" width="175.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.2" y="574.0">jdk/internal/misc/Unsaf..</text>
</g>
<g>
<title>Unsafe_Park (113 samples, 14.51%)</title><rect x="903.7" y="547.0" width="171.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="906.7" y="558.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (11 samples, 1.41%)</title><rect x="903.7" y="531.0" width="16.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="906.7" y="542.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.77%)</title><rect x="908.3" y="515.0" width="9.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="911.3" y="526.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="914.3" y="499.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="917.3" y="510.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.13%)</title><rect x="915.8" y="499.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="918.8" y="510.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.13%)</title><rect x="917.3" y="515.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="920.3" y="526.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="918.9" y="515.0" width="1.5" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="921.9" y="526.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.13%)</title><rect x="920.4" y="531.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="923.4" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (8 samples, 1.03%)</title><rect x="921.9" y="531.0" width="12.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="924.9" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.26%)</title><rect x="934.0" y="531.0" width="3.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="937.0" y="542.0"></text>
</g>
<g>
<title>__lll_unlock_wake (33 samples, 4.24%)</title><rect x="937.0" y="531.0" width="50.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="940.0" y="542.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (49 samples, 6.29%)</title><rect x="987.0" y="531.0" width="74.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="990.0" y="542.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.39%)</title><rect x="1061.2" y="531.0" width="4.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1064.2" y="542.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.13%)</title><rect x="1065.8" y="531.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1068.8" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.13%)</title><rect x="1067.3" y="531.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1070.3" y="542.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.26%)</title><rect x="1068.8" y="531.0" width="3.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1071.8" y="542.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.26%)</title><rect x="1071.8" y="531.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1074.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (26 samples, 3.34%)</title><rect x="1074.9" y="595.0" width="39.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1077.9" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 3.34%)</title><rect x="1074.9" y="579.0" width="39.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1077.9" y="590.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (26 samples, 3.34%)</title><rect x="1074.9" y="563.0" width="39.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1077.9" y="574.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (26 samples, 3.34%)</title><rect x="1074.9" y="547.0" width="39.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1077.9" y="558.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.13%)</title><rect x="1114.3" y="611.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1117.3" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.13%)</title><rect x="1115.8" y="675.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1118.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.13%)</title><rect x="1115.8" y="659.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1118.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="1115.8" y="643.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1118.8" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="1115.8" y="627.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1118.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.13%)</title><rect x="1117.3" y="675.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1120.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.13%)</title><rect x="1117.3" y="659.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1120.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.13%)</title><rect x="1117.3" y="643.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1120.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.13%)</title><rect x="1117.3" y="627.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1120.3" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.13%)</title><rect x="1117.3" y="611.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1120.3" y="622.0"></text>
</g>
<g>
<title>start_thread (47 samples, 6.03%)</title><rect x="1118.8" y="675.0" width="71.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1121.8" y="686.0">start_th..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (47 samples, 6.03%)</title><rect x="1118.8" y="659.0" width="71.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1121.8" y="670.0">thread_n..</text>
</g>
<g>
<title>Thread::call_run() (47 samples, 6.03%)</title><rect x="1118.8" y="643.0" width="71.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1121.8" y="654.0">Thread::..</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.77%)</title><rect x="1118.8" y="627.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.8" y="638.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.26%)</title><rect x="1118.8" y="611.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.8" y="622.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.13%)</title><rect x="1120.3" y="595.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1123.3" y="606.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.13%)</title><rect x="1120.3" y="579.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.3" y="590.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (3 samples, 0.39%)</title><rect x="1121.8" y="611.0" width="4.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.8" y="622.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.26%)</title><rect x="1121.8" y="595.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.8" y="606.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.13%)</title><rect x="1123.4" y="579.0" width="1.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1126.4" y="590.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.13%)</title><rect x="1124.9" y="595.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1127.9" y="606.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.13%)</title><rect x="1124.9" y="579.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1127.9" y="590.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.13%)</title><rect x="1124.9" y="563.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.9" y="574.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.13%)</title><rect x="1124.9" y="547.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1127.9" y="558.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (1 samples, 0.13%)</title><rect x="1126.4" y="611.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.4" y="622.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (40 samples, 5.13%)</title><rect x="1127.9" y="627.0" width="60.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.9" y="638.0">JavaTh..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (40 samples, 5.13%)</title><rect x="1127.9" y="611.0" width="60.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.9" y="622.0">Compil..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 5.13%)</title><rect x="1127.9" y="595.0" width="60.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.9" y="606.0">Compil..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (39 samples, 5.01%)</title><rect x="1127.9" y="579.0" width="59.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.9" y="590.0">C2Comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (39 samples, 5.01%)</title><rect x="1127.9" y="563.0" width="59.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.9" y="574.0">Compil..</text>
</g>
<g>
<title>Compile::Code_Gen() (17 samples, 2.18%)</title><rect x="1127.9" y="547.0" width="25.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="558.0">C..</text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.26%)</title><rect x="1127.9" y="531.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.9" y="542.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.26%)</title><rect x="1127.9" y="515.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.9" y="526.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.13%)</title><rect x="1129.4" y="499.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.4" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.26%)</title><rect x="1130.9" y="531.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.9" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.26%)</title><rect x="1130.9" y="515.0" width="3.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.9" y="526.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.13%)</title><rect x="1130.9" y="499.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.9" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.13%)</title><rect x="1130.9" y="483.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1133.9" y="494.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.13%)</title><rect x="1132.4" y="499.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.4" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.13%)</title><rect x="1132.4" y="483.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.4" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (13 samples, 1.67%)</title><rect x="1134.0" y="531.0" width="19.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1137.0" y="542.0"></text>
</g>
<g>
<title>MachNode::operand_index(unsigned int) const (1 samples, 0.13%)</title><rect x="1134.0" y="515.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.0" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.13%)</title><rect x="1135.5" y="515.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.5" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.13%)</title><rect x="1135.5" y="499.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.5" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.13%)</title><rect x="1137.0" y="515.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.0" y="526.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1137.0" y="499.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.0" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.13%)</title><rect x="1138.5" y="515.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.5" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (4 samples, 0.51%)</title><rect x="1140.0" y="515.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.0" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.13%)</title><rect x="1141.5" y="499.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.5" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.13%)</title><rect x="1143.0" y="499.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.0" y="510.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.13%)</title><rect x="1144.6" y="499.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.6" y="510.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.13%)</title><rect x="1144.6" y="483.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.6" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (2 samples, 0.26%)</title><rect x="1146.1" y="515.0" width="3.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.1" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.26%)</title><rect x="1149.1" y="515.0" width="3.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.1" y="526.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.13%)</title><rect x="1149.1" y="499.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="510.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.13%)</title><rect x="1150.6" y="499.0" width="1.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1153.6" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.13%)</title><rect x="1152.1" y="515.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1155.1" y="526.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.13%)</title><rect x="1152.1" y="499.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.1" y="510.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 2.05%)</title><rect x="1153.6" y="547.0" width="24.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="558.0">C..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (2 samples, 0.26%)</title><rect x="1153.6" y="531.0" width="3.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.26%)</title><rect x="1153.6" y="515.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.26%)</title><rect x="1153.6" y="499.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.26%)</title><rect x="1156.7" y="531.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.7" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.26%)</title><rect x="1156.7" y="515.0" width="3.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.7" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.13%)</title><rect x="1156.7" y="499.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.7" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.13%)</title><rect x="1156.7" y="483.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1159.7" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.13%)</title><rect x="1156.7" y="467.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.13%)</title><rect x="1156.7" y="451.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.7" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.13%)</title><rect x="1158.2" y="499.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1161.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.13%)</title><rect x="1158.2" y="483.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.2" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.13%)</title><rect x="1159.7" y="531.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.7" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 0.77%)</title><rect x="1161.2" y="531.0" width="9.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.2" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.13%)</title><rect x="1161.2" y="515.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.13%)</title><rect x="1161.2" y="499.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.2" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl_helper(IdealLoopTree*, ProjNode*, ProjNode*, CountedLoopNode*, ConNode*, Invariance&amp;, Deoptimization::DeoptReason) (1 samples, 0.13%)</title><rect x="1161.2" y="483.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dominated_by(Node*, Node*, bool, bool) (1 samples, 0.13%)</title><rect x="1161.2" y="467.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="478.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_early_ctrl(Node*) (1 samples, 0.13%)</title><rect x="1161.2" y="451.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="462.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.13%)</title><rect x="1161.2" y="435.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.2" y="446.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.13%)</title><rect x="1162.7" y="515.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.13%)</title><rect x="1164.2" y="515.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.39%)</title><rect x="1165.8" y="515.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.8" y="526.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.13%)</title><rect x="1167.3" y="499.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.3" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.13%)</title><rect x="1168.8" y="499.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.8" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.13%)</title><rect x="1168.8" y="483.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.8" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.13%)</title><rect x="1168.8" y="467.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.8" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.51%)</title><rect x="1170.3" y="531.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1173.3" y="542.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.51%)</title><rect x="1170.3" y="515.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.3" y="526.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.26%)</title><rect x="1171.8" y="499.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.8" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.13%)</title><rect x="1171.8" y="483.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.8" y="494.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.13%)</title><rect x="1171.8" y="467.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.8" y="478.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.13%)</title><rect x="1173.3" y="483.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.3" y="494.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.13%)</title><rect x="1174.9" y="499.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.9" y="510.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.13%)</title><rect x="1176.4" y="531.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.13%)</title><rect x="1176.4" y="515.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>PhaseMacroExpand::prefetch_allocation(Node*, Node*&amp;, Node*&amp;, Node*, Node*, Node*) (1 samples, 0.13%)</title><rect x="1176.4" y="499.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.4" y="510.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.13%)</title><rect x="1176.4" y="483.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.4" y="494.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.13%)</title><rect x="1176.4" y="467.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.4" y="478.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.13%)</title><rect x="1176.4" y="451.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.77%)</title><rect x="1177.9" y="547.0" width="9.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.77%)</title><rect x="1177.9" y="531.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.77%)</title><rect x="1177.9" y="515.0" width="9.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.77%)</title><rect x="1177.9" y="499.0" width="9.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.77%)</title><rect x="1177.9" y="483.0" width="9.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.64%)</title><rect x="1179.4" y="467.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.64%)</title><rect x="1179.4" y="451.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.64%)</title><rect x="1179.4" y="435.0" width="7.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.64%)</title><rect x="1179.4" y="419.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.64%)</title><rect x="1179.4" y="403.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.64%)</title><rect x="1179.4" y="387.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.64%)</title><rect x="1179.4" y="371.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.39%)</title><rect x="1179.4" y="355.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.39%)</title><rect x="1179.4" y="339.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.39%)</title><rect x="1179.4" y="323.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.39%)</title><rect x="1179.4" y="307.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.39%)</title><rect x="1179.4" y="291.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.39%)</title><rect x="1179.4" y="275.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.39%)</title><rect x="1179.4" y="259.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.39%)</title><rect x="1179.4" y="243.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1179.4" y="227.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1179.4" y="211.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1179.4" y="195.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1179.4" y="179.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1179.4" y="163.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1179.4" y="147.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1179.4" y="131.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1179.4" y="115.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1179.4" y="99.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.13%)</title><rect x="1179.4" y="83.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="94.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.13%)</title><rect x="1179.4" y="67.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="78.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.13%)</title><rect x="1179.4" y="51.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="62.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.13%)</title><rect x="1179.4" y="35.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="46.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.13%)</title><rect x="1180.9" y="227.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>GraphKit::clean_stack(int) (1 samples, 0.13%)</title><rect x="1180.9" y="211.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.9" y="222.0"></text>
</g>
<g>
<title>ciMethod::method_data() (1 samples, 0.13%)</title><rect x="1182.4" y="227.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.4" y="238.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.13%)</title><rect x="1182.4" y="211.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.4" y="222.0"></text>
</g>
<g>
<title>ciMethodData::data_at(int) (1 samples, 0.13%)</title><rect x="1182.4" y="195.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.4" y="206.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.13%)</title><rect x="1182.4" y="179.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.4" y="190.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="1182.4" y="163.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1185.4" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.26%)</title><rect x="1183.9" y="355.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="366.0"></text>
</g>
<g>
<title>GraphKit::add_exception_states_from(JVMState*) (1 samples, 0.13%)</title><rect x="1183.9" y="339.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::combine_exception_states(SafePointNode*, SafePointNode*) (1 samples, 0.13%)</title><rect x="1183.9" y="323.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="334.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.13%)</title><rect x="1183.9" y="307.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="318.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.13%)</title><rect x="1183.9" y="291.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="302.0"></text>
</g>
<g>
<title>ciKlass::least_common_ancestor(ciKlass*) (1 samples, 0.13%)</title><rect x="1183.9" y="275.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1185.5" y="339.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1185.5" y="323.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1185.5" y="307.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1185.5" y="291.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1185.5" y="275.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1185.5" y="259.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1185.5" y="243.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1185.5" y="227.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.5" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1185.5" y="211.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.5" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1185.5" y="195.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.5" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1185.5" y="179.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.5" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1185.5" y="163.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="174.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1185.5" y="147.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="158.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.13%)</title><rect x="1185.5" y="131.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="142.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.13%)</title><rect x="1185.5" y="115.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.13%)</title><rect x="1187.0" y="579.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1187.0" y="563.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="574.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1187.0" y="547.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.0" y="558.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1187.0" y="531.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.0" y="542.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.13%)</title><rect x="1187.0" y="515.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.0" y="526.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.13%)</title><rect x="1187.0" y="499.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="1187.0" y="483.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.0" y="494.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.13%)</title><rect x="1188.5" y="627.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.5" y="638.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.13%)</title><rect x="1188.5" y="611.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.5" y="622.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.13%)</title><rect x="1188.5" y="595.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.5" y="606.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.13%)</title><rect x="1188.5" y="579.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.5" y="590.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.13%)</title><rect x="1188.5" y="563.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.13%)</title><rect x="1188.5" y="547.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.13%)</title><rect x="1188.5" y="531.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (1 samples, 0.13%)</title><rect x="1188.5" y="515.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.5" y="526.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.13%)</title><rect x="1188.5" y="499.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.5" y="510.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_phantom_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.13%)</title><rect x="1188.5" y="483.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.5" y="494.0"></text>
</g>
</g>
</svg>
