<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1622" onload="init(evt)" viewBox="0 0 1200 1622" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1605"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1605"> </text>
<g id="frames">
<g>
<title>all (1,009 samples, 100.00%)</title><rect x="10.0" y="1571.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1582.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (2 samples, 0.20%)</title><rect x="10.0" y="1555.0" width="2.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="10.0" y="1539.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.10%)</title><rect x="10.0" y="1523.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="10.0" y="1507.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.10%)</title><rect x="10.0" y="1491.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.10%)</title><rect x="10.0" y="1475.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="11.2" y="1523.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="1534.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.30%)</title><rect x="12.3" y="1555.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="15.3" y="1566.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.10%)</title><rect x="12.3" y="1539.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="15.3" y="1550.0"></text>
</g>
<g>
<title>__strchrnul (1 samples, 0.10%)</title><rect x="12.3" y="1523.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="15.3" y="1534.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.10%)</title><rect x="13.5" y="1539.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="16.5" y="1550.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (1 samples, 0.10%)</title><rect x="14.7" y="1539.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.7" y="1550.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.20%)</title><rect x="15.8" y="1555.0" width="2.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="18.8" y="1566.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="15.8" y="1539.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="18.8" y="1550.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="15.8" y="1523.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="18.8" y="1534.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.10%)</title><rect x="17.0" y="1523.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="20.0" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (255 samples, 25.27%)</title><rect x="18.2" y="1555.0" width="298.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.2" y="1566.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (255 samples, 25.27%)</title><rect x="18.2" y="1539.0" width="298.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="1550.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.10%)</title><rect x="18.2" y="1523.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.10%)</title><rect x="18.2" y="1507.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.2" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.10%)</title><rect x="18.2" y="1491.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.2" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.10%)</title><rect x="18.2" y="1475.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="18.2" y="1459.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.2" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="18.2" y="1443.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="18.2" y="1427.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="21.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="18.2" y="1411.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.10%)</title><rect x="18.2" y="1395.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="18.2" y="1379.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.10%)</title><rect x="18.2" y="1363.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="21.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="18.2" y="1347.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="18.2" y="1331.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="18.2" y="1315.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.2" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="18.2" y="1299.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (253 samples, 25.07%)</title><rect x="19.4" y="1523.0" width="295.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.4" y="1534.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.10%)</title><rect x="20.5" y="1507.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.10%)</title><rect x="20.5" y="1491.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.5" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="20.5" y="1475.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.5" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="20.5" y="1459.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.5" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="20.5" y="1443.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.5" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="20.5" y="1427.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.5" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="20.5" y="1411.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.5" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="20.5" y="1395.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.5" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="20.5" y="1379.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="23.5" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$243/891302232.test (1 samples, 0.10%)</title><rect x="20.5" y="1363.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.5" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (8 samples, 0.79%)</title><rect x="21.7" y="1507.0" width="9.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="24.7" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (8 samples, 0.79%)</title><rect x="21.7" y="1491.0" width="9.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.7" y="1502.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.10%)</title><rect x="22.9" y="1475.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.9" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.59%)</title><rect x="24.0" y="1475.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.0" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$242/159712256.accept (6 samples, 0.59%)</title><rect x="24.0" y="1459.0" width="7.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="27.0" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.59%)</title><rect x="24.0" y="1443.0" width="7.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="27.0" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.59%)</title><rect x="24.0" y="1427.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="27.0" y="1438.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (5 samples, 0.50%)</title><rect x="25.2" y="1411.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.2" y="1422.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (204 samples, 20.22%)</title><rect x="31.1" y="1507.0" width="238.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.1" y="1518.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$241/374307644.accept (199 samples, 19.72%)</title><rect x="31.1" y="1491.0" width="232.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.1" y="1502.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (199 samples, 19.72%)</title><rect x="31.1" y="1475.0" width="232.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="1486.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (175 samples, 17.34%)</title><rect x="31.1" y="1459.0" width="204.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.1" y="1470.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (175 samples, 17.34%)</title><rect x="31.1" y="1443.0" width="204.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.1" y="1454.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (174 samples, 17.24%)</title><rect x="32.2" y="1427.0" width="203.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="35.2" y="1438.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (174 samples, 17.24%)</title><rect x="32.2" y="1411.0" width="203.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="35.2" y="1422.0">java/util/concurrent/Execut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (174 samples, 17.24%)</title><rect x="32.2" y="1395.0" width="203.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.2" y="1406.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (174 samples, 17.24%)</title><rect x="32.2" y="1379.0" width="203.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.2" y="1390.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (135 samples, 13.38%)</title><rect x="32.2" y="1363.0" width="157.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.2" y="1374.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.39%)</title><rect x="32.2" y="1347.0" width="16.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.2" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.39%)</title><rect x="32.2" y="1331.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.39%)</title><rect x="32.2" y="1315.0" width="16.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="35.2" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (20 samples, 1.98%)</title><rect x="48.6" y="1347.0" width="23.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="51.6" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (20 samples, 1.98%)</title><rect x="48.6" y="1331.0" width="23.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="51.6" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (5 samples, 0.50%)</title><rect x="66.1" y="1315.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="69.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.40%)</title><rect x="67.3" y="1299.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="70.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (101 samples, 10.01%)</title><rect x="72.0" y="1347.0" width="118.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="75.0" y="1358.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (101 samples, 10.01%)</title><rect x="72.0" y="1331.0" width="118.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.0" y="1342.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (101 samples, 10.01%)</title><rect x="72.0" y="1315.0" width="118.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.0" y="1326.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (101 samples, 10.01%)</title><rect x="72.0" y="1299.0" width="118.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="75.0" y="1310.0">java/util/conc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (100 samples, 9.91%)</title><rect x="73.2" y="1283.0" width="116.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="76.2" y="1294.0">jdk/internal/m..</text>
</g>
<g>
<title>Unsafe_Unpark (54 samples, 5.35%)</title><rect x="74.3" y="1267.0" width="63.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="77.3" y="1278.0">Unsafe_..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (4 samples, 0.40%)</title><rect x="87.2" y="1251.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="90.2" y="1262.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.10%)</title><rect x="91.9" y="1251.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="94.9" y="1262.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.40%)</title><rect x="93.0" y="1251.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="96.0" y="1262.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.69%)</title><rect x="97.7" y="1251.0" width="8.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="100.7" y="1262.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.10%)</title><rect x="105.9" y="1251.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="108.9" y="1262.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (8 samples, 0.79%)</title><rect x="107.1" y="1251.0" width="9.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="110.1" y="1262.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.40%)</title><rect x="116.4" y="1251.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="119.4" y="1262.0"></text>
</g>
<g>
<title>pthread_mutex_lock (14 samples, 1.39%)</title><rect x="121.1" y="1251.0" width="16.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="124.1" y="1262.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 4.46%)</title><rect x="137.5" y="1267.0" width="52.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="140.5" y="1278.0">__pth..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (37 samples, 3.67%)</title><rect x="190.1" y="1363.0" width="43.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="193.1" y="1374.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (37 samples, 3.67%)</title><rect x="190.1" y="1347.0" width="43.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.1" y="1358.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.89%)</title><rect x="222.8" y="1331.0" width="10.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="225.8" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.89%)</title><rect x="222.8" y="1315.0" width="10.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="225.8" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.20%)</title><rect x="233.4" y="1363.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.4" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="233.4" y="1347.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="233.4" y="1331.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.4" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="233.4" y="1315.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (13 samples, 1.29%)</title><rect x="235.7" y="1459.0" width="15.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.7" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 1.29%)</title><rect x="235.7" y="1443.0" width="15.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.29%)</title><rect x="235.7" y="1427.0" width="15.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.29%)</title><rect x="235.7" y="1411.0" width="15.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.7" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="248.6" y="1395.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.20%)</title><rect x="248.6" y="1379.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.6" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (8 samples, 0.79%)</title><rect x="250.9" y="1459.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.9" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.79%)</title><rect x="250.9" y="1443.0" width="9.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="253.9" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.40%)</title><rect x="250.9" y="1427.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="253.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.10%)</title><rect x="254.4" y="1411.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="257.4" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.40%)</title><rect x="255.6" y="1427.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (4 samples, 0.40%)</title><rect x="255.6" y="1411.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="258.6" y="1422.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (4 samples, 0.40%)</title><rect x="255.6" y="1395.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.40%)</title><rect x="255.6" y="1379.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.6" y="1390.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.40%)</title><rect x="255.6" y="1363.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="258.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.30%)</title><rect x="260.3" y="1459.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="263.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.30%)</title><rect x="260.3" y="1443.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.3" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="261.4" y="1427.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="264.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.20%)</title><rect x="261.4" y="1411.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="264.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.10%)</title><rect x="263.8" y="1491.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.8" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="263.8" y="1475.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.8" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.30%)</title><rect x="264.9" y="1491.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.9" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.30%)</title><rect x="264.9" y="1475.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="264.9" y="1459.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.10%)</title><rect x="264.9" y="1443.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="267.9" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="264.9" y="1427.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (2 samples, 0.20%)</title><rect x="266.1" y="1459.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="269.1" y="1470.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="268.5" y="1491.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="271.5" y="1502.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="268.5" y="1475.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="271.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (39 samples, 3.87%)</title><rect x="269.6" y="1507.0" width="45.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="272.6" y="1518.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (38 samples, 3.77%)</title><rect x="269.6" y="1491.0" width="44.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.6" y="1502.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 2.38%)</title><rect x="269.6" y="1475.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.6" y="1486.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (23 samples, 2.28%)</title><rect x="270.8" y="1459.0" width="26.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.8" y="1470.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.28%)</title><rect x="270.8" y="1443.0" width="26.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.8" y="1454.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (2 samples, 0.20%)</title><rect x="270.8" y="1427.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.8" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (2 samples, 0.20%)</title><rect x="270.8" y="1411.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.8" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 0.20%)</title><rect x="270.8" y="1395.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="273.8" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="270.8" y="1379.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="273.8" y="1390.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="270.8" y="1363.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.8" y="1374.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.newNode (1 samples, 0.10%)</title><rect x="272.0" y="1363.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (19 samples, 1.88%)</title><rect x="273.1" y="1427.0" width="22.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="276.1" y="1438.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 1.88%)</title><rect x="273.1" y="1411.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.1" y="1422.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="273.1" y="1395.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.1" y="1406.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="273.1" y="1379.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.1" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="273.1" y="1363.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.1" y="1374.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="273.1" y="1347.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.1" y="1358.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="273.1" y="1331.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (10 samples, 0.99%)</title><rect x="274.3" y="1395.0" width="11.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="277.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (3 samples, 0.30%)</title><rect x="282.5" y="1379.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="285.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (3 samples, 0.30%)</title><rect x="282.5" y="1363.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (3 samples, 0.30%)</title><rect x="282.5" y="1347.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="285.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (3 samples, 0.30%)</title><rect x="282.5" y="1331.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="285.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (3 samples, 0.30%)</title><rect x="282.5" y="1315.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (3 samples, 0.30%)</title><rect x="282.5" y="1299.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (3 samples, 0.30%)</title><rect x="282.5" y="1283.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="285.5" y="1294.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (3 samples, 0.30%)</title><rect x="282.5" y="1267.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.5" y="1278.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (3 samples, 0.30%)</title><rect x="282.5" y="1251.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="285.5" y="1262.0"></text>
</g>
<g>
<title>updateBytesCRC32C (3 samples, 0.30%)</title><rect x="282.5" y="1235.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="285.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (8 samples, 0.79%)</title><rect x="286.0" y="1395.0" width="9.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (8 samples, 0.79%)</title><rect x="286.0" y="1379.0" width="9.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (8 samples, 0.79%)</title><rect x="286.0" y="1363.0" width="9.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.0" y="1374.0"></text>
</g>
<g>
<title>java/util/Optional.of (8 samples, 0.79%)</title><rect x="286.0" y="1347.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="1358.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="294.2" y="1331.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="297.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.20%)</title><rect x="295.4" y="1427.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.20%)</title><rect x="295.4" y="1411.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="298.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.20%)</title><rect x="295.4" y="1395.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="298.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="295.4" y="1379.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.4" y="1390.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="296.5" y="1379.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="299.5" y="1390.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="296.5" y="1363.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="299.5" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 0.40%)</title><rect x="297.7" y="1475.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="300.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.10%)</title><rect x="298.9" y="1459.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.10%)</title><rect x="298.9" y="1443.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.9" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="298.9" y="1427.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.9" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="298.9" y="1411.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.9" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="298.9" y="1395.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="301.9" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="298.9" y="1379.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.9" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="298.9" y="1363.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="301.9" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="298.9" y="1347.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="301.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.20%)</title><rect x="300.0" y="1459.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.0" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnready (1 samples, 0.10%)</title><rect x="300.0" y="1443.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="303.0" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.10%)</title><rect x="300.0" y="1427.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.0" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.10%)</title><rect x="300.0" y="1411.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.0" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.10%)</title><rect x="300.0" y="1395.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="303.0" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.10%)</title><rect x="300.0" y="1379.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.0" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.10%)</title><rect x="300.0" y="1363.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="303.0" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="300.0" y="1347.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="300.0" y="1331.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.0" y="1342.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="300.0" y="1315.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="303.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="300.0" y="1299.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="303.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.invokeCompletedOffsetCommitCallbacks (1 samples, 0.10%)</title><rect x="301.2" y="1443.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="304.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.10%)</title><rect x="301.2" y="1427.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="304.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="302.4" y="1475.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="305.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.10%)</title><rect x="302.4" y="1459.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.4" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (7 samples, 0.69%)</title><rect x="303.5" y="1475.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="306.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (7 samples, 0.69%)</title><rect x="303.5" y="1459.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.10%)</title><rect x="303.5" y="1443.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="306.5" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.10%)</title><rect x="303.5" y="1427.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.5" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="303.5" y="1411.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.5" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="303.5" y="1395.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.5" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="303.5" y="1379.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.5" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="303.5" y="1363.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.5" y="1374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="303.5" y="1347.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="306.5" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (6 samples, 0.59%)</title><rect x="304.7" y="1443.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.7" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.40%)</title><rect x="304.7" y="1427.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="307.7" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.10%)</title><rect x="304.7" y="1411.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="307.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.30%)</title><rect x="305.9" y="1411.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.30%)</title><rect x="305.9" y="1395.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (2 samples, 0.20%)</title><rect x="305.9" y="1379.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (2 samples, 0.20%)</title><rect x="305.9" y="1363.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.10%)</title><rect x="305.9" y="1347.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.9" y="1358.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.10%)</title><rect x="305.9" y="1331.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.9" y="1342.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="305.9" y="1315.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.9" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="305.9" y="1299.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="308.9" y="1310.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="305.9" y="1283.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="308.9" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="305.9" y="1267.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="308.9" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="305.9" y="1251.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="308.9" y="1262.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="305.9" y="1235.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="308.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="307.0" y="1347.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="310.0" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="307.0" y="1331.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="310.0" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="307.0" y="1315.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.0" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.10%)</title><rect x="307.0" y="1299.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.0" y="1310.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.10%)</title><rect x="307.0" y="1283.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="310.0" y="1294.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.10%)</title><rect x="307.0" y="1267.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="1278.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.10%)</title><rect x="307.0" y="1251.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="310.0" y="1262.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="307.0" y="1235.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="310.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.requiredMemoryAmountKnown (1 samples, 0.10%)</title><rect x="308.2" y="1379.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (2 samples, 0.20%)</title><rect x="309.4" y="1427.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.4" y="1438.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="310.6" y="1411.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.6" y="1422.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="310.6" y="1395.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="313.6" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="310.6" y="1379.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="313.6" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.10%)</title><rect x="310.6" y="1363.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.6" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.10%)</title><rect x="310.6" y="1347.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="313.6" y="1358.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="310.6" y="1331.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="313.6" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="310.6" y="1315.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.6" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.10%)</title><rect x="310.6" y="1299.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="313.6" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.10%)</title><rect x="310.6" y="1283.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="313.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.20%)</title><rect x="311.7" y="1475.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.10%)</title><rect x="312.9" y="1459.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="315.9" y="1470.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.10%)</title><rect x="312.9" y="1443.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="315.9" y="1454.0"></text>
</g>
<g>
<title>java/lang/Integer.hashCode (1 samples, 0.10%)</title><rect x="312.9" y="1427.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="315.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.10%)</title><rect x="314.1" y="1491.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.1" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.10%)</title><rect x="314.1" y="1475.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.1" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.10%)</title><rect x="315.2" y="1523.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="318.2" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="315.2" y="1507.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.2" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="315.2" y="1491.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="318.2" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="315.2" y="1475.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="318.2" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="315.2" y="1459.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="318.2" y="1470.0"></text>
</g>
<g>
<title>free (1 samples, 0.10%)</title><rect x="316.4" y="1555.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="319.4" y="1566.0"></text>
</g>
<g>
<title>java/lang/Thread.run (551 samples, 54.61%)</title><rect x="317.6" y="1555.0" width="644.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.6" y="1566.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (551 samples, 54.61%)</title><rect x="317.6" y="1539.0" width="644.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.6" y="1550.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (551 samples, 54.61%)</title><rect x="317.6" y="1523.0" width="644.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.6" y="1534.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$472/486111574.run (340 samples, 33.70%)</title><rect x="331.6" y="1507.0" width="397.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.6" y="1518.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (340 samples, 33.70%)</title><rect x="331.6" y="1491.0" width="397.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="334.6" y="1502.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (340 samples, 33.70%)</title><rect x="331.6" y="1475.0" width="397.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="334.6" y="1486.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (340 samples, 33.70%)</title><rect x="331.6" y="1459.0" width="397.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="334.6" y="1470.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="338.6" y="1443.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="341.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.20%)</title><rect x="339.8" y="1443.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.8" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.20%)</title><rect x="339.8" y="1427.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="342.8" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="339.8" y="1411.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.8" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="339.8" y="1395.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (33 samples, 3.27%)</title><rect x="342.1" y="1443.0" width="38.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="345.1" y="1454.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 3.27%)</title><rect x="342.1" y="1427.0" width="38.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.1" y="1438.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 3.27%)</title><rect x="342.1" y="1411.0" width="38.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="345.1" y="1422.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (23 samples, 2.28%)</title><rect x="353.8" y="1395.0" width="26.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.8" y="1406.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.10%)</title><rect x="353.8" y="1379.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.8" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$478/339384199.accept (1 samples, 0.10%)</title><rect x="353.8" y="1363.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="356.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 2.18%)</title><rect x="355.0" y="1379.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="358.0" y="1390.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$478/339384199.accept (22 samples, 2.18%)</title><rect x="355.0" y="1363.0" width="25.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="358.0" y="1374.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (22 samples, 2.18%)</title><rect x="355.0" y="1347.0" width="25.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.0" y="1358.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (22 samples, 2.18%)</title><rect x="355.0" y="1331.0" width="25.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.0" y="1342.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (22 samples, 2.18%)</title><rect x="355.0" y="1315.0" width="25.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="358.0" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (22 samples, 2.18%)</title><rect x="355.0" y="1299.0" width="25.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="358.0" y="1310.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.59%)</title><rect x="355.0" y="1283.0" width="7.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="358.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$470/2065163470.accept (4 samples, 0.40%)</title><rect x="356.2" y="1267.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="359.2" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="360.8" y="1267.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="363.8" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.59%)</title><rect x="362.0" y="1283.0" width="18.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="365.0" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$470/2065163470.accept (2 samples, 0.20%)</title><rect x="378.4" y="1267.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.4" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$0 (2 samples, 0.20%)</title><rect x="378.4" y="1251.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="381.4" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (123 samples, 12.19%)</title><rect x="380.7" y="1443.0" width="143.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="383.7" y="1454.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (123 samples, 12.19%)</title><rect x="380.7" y="1427.0" width="143.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.7" y="1438.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (123 samples, 12.19%)</title><rect x="380.7" y="1411.0" width="143.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="383.7" y="1422.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (123 samples, 12.19%)</title><rect x="380.7" y="1395.0" width="143.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="383.7" y="1406.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (123 samples, 12.19%)</title><rect x="380.7" y="1379.0" width="143.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="383.7" y="1390.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (123 samples, 12.19%)</title><rect x="380.7" y="1363.0" width="143.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="383.7" y="1374.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (48 samples, 4.76%)</title><rect x="383.1" y="1347.0" width="56.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="386.1" y="1358.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.10%)</title><rect x="383.1" y="1331.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="386.1" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.10%)</title><rect x="383.1" y="1315.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="386.1" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="383.1" y="1299.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="386.1" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="383.1" y="1283.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="386.1" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="383.1" y="1267.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="386.1" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="383.1" y="1251.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="386.1" y="1262.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="383.1" y="1235.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="386.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.40%)</title><rect x="384.2" y="1331.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="387.2" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.40%)</title><rect x="384.2" y="1315.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="387.2" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.40%)</title><rect x="384.2" y="1299.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="387.2" y="1310.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.40%)</title><rect x="384.2" y="1283.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="387.2" y="1294.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.40%)</title><rect x="384.2" y="1267.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.2" y="1278.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="385.4" y="1251.0" width="3.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="388.4" y="1262.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="385.4" y="1235.0" width="3.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="388.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (43 samples, 4.26%)</title><rect x="388.9" y="1331.0" width="50.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.9" y="1342.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (43 samples, 4.26%)</title><rect x="388.9" y="1315.0" width="50.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="391.9" y="1326.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (41 samples, 4.06%)</title><rect x="388.9" y="1299.0" width="48.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.9" y="1310.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (41 samples, 4.06%)</title><rect x="388.9" y="1283.0" width="48.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="391.9" y="1294.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (37 samples, 3.67%)</title><rect x="388.9" y="1267.0" width="43.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="391.9" y="1278.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (37 samples, 3.67%)</title><rect x="388.9" y="1251.0" width="43.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="391.9" y="1262.0">com/..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.89%)</title><rect x="420.5" y="1235.0" width="10.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="423.5" y="1246.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="422.8" y="1219.0" width="8.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="425.8" y="1230.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="431.0" y="1235.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="434.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.10%)</title><rect x="432.2" y="1267.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="432.2" y="1251.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="432.2" y="1235.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="435.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (3 samples, 0.30%)</title><rect x="433.3" y="1267.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="436.3" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.30%)</title><rect x="433.3" y="1251.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="436.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (2 samples, 0.20%)</title><rect x="436.9" y="1299.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="439.9" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="436.9" y="1283.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="439.9" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="436.9" y="1267.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="439.9" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.20%)</title><rect x="436.9" y="1251.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.9" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.20%)</title><rect x="436.9" y="1235.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="439.9" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.20%)</title><rect x="436.9" y="1219.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="439.9" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.10%)</title><rect x="436.9" y="1203.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="439.9" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="438.0" y="1203.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="441.0" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.10%)</title><rect x="438.0" y="1187.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="441.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (66 samples, 6.54%)</title><rect x="439.2" y="1347.0" width="77.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.2" y="1358.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.50%)</title><rect x="439.2" y="1331.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="442.2" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.50%)</title><rect x="439.2" y="1315.0" width="5.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="442.2" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="443.9" y="1299.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.9" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.99%)</title><rect x="445.0" y="1331.0" width="11.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="448.0" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.69%)</title><rect x="448.6" y="1315.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="451.6" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.40%)</title><rect x="450.9" y="1299.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.9" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.40%)</title><rect x="450.9" y="1283.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="453.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.20%)</title><rect x="453.2" y="1267.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="455.6" y="1299.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.6" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.10%)</title><rect x="455.6" y="1283.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.6" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="455.6" y="1267.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.20%)</title><rect x="456.7" y="1331.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.7" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.20%)</title><rect x="456.7" y="1315.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="459.7" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="457.9" y="1299.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="460.9" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (49 samples, 4.86%)</title><rect x="459.1" y="1331.0" width="57.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.1" y="1342.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (49 samples, 4.86%)</title><rect x="459.1" y="1315.0" width="57.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.1" y="1326.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.59%)</title><rect x="460.2" y="1299.0" width="18.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="463.2" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.59%)</title><rect x="460.2" y="1283.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="463.2" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.59%)</title><rect x="460.2" y="1267.0" width="7.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="463.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.59%)</title><rect x="460.2" y="1251.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="463.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (6 samples, 0.59%)</title><rect x="460.2" y="1235.0" width="7.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="463.2" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (4 samples, 0.40%)</title><rect x="462.6" y="1219.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.6" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.99%)</title><rect x="467.3" y="1283.0" width="11.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.3" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.20%)</title><rect x="469.6" y="1267.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="472.6" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.20%)</title><rect x="469.6" y="1251.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.6" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 0.59%)</title><rect x="471.9" y="1267.0" width="7.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 0.59%)</title><rect x="471.9" y="1251.0" width="7.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.30%)</title><rect x="475.5" y="1235.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.30%)</title><rect x="475.5" y="1219.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="478.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (32 samples, 3.17%)</title><rect x="479.0" y="1299.0" width="37.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="482.0" y="1310.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (32 samples, 3.17%)</title><rect x="479.0" y="1283.0" width="37.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.0" y="1294.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (32 samples, 3.17%)</title><rect x="479.0" y="1267.0" width="37.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="482.0" y="1278.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.09%)</title><rect x="481.3" y="1251.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="484.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.10%)</title><rect x="481.3" y="1235.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="484.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="481.3" y="1219.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="484.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.69%)</title><rect x="482.5" y="1235.0" width="8.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="485.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.69%)</title><rect x="482.5" y="1219.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="485.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.69%)</title><rect x="482.5" y="1203.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="485.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.20%)</title><rect x="483.6" y="1187.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.6" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (4 samples, 0.40%)</title><rect x="486.0" y="1187.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="489.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.20%)</title><rect x="490.7" y="1235.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="493.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.10%)</title><rect x="491.8" y="1219.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.10%)</title><rect x="491.8" y="1203.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="494.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="493.0" y="1235.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="496.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="493.0" y="1219.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="496.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="493.0" y="1203.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="496.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.69%)</title><rect x="494.2" y="1251.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="497.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 0.40%)</title><rect x="497.7" y="1235.0" width="4.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="500.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.10%)</title><rect x="497.7" y="1219.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="500.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.10%)</title><rect x="497.7" y="1203.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="500.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (1 samples, 0.10%)</title><rect x="497.7" y="1187.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="500.7" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (1 samples, 0.10%)</title><rect x="497.7" y="1171.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="500.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (1 samples, 0.10%)</title><rect x="497.7" y="1155.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="500.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.10%)</title><rect x="497.7" y="1139.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="500.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="498.8" y="1219.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="501.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="498.8" y="1203.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="501.8" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.30%)</title><rect x="498.8" y="1187.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="501.8" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.30%)</title><rect x="498.8" y="1171.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="501.8" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.30%)</title><rect x="498.8" y="1155.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.30%)</title><rect x="498.8" y="1139.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="501.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.30%)</title><rect x="498.8" y="1123.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="501.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.20%)</title><rect x="502.3" y="1251.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.20%)</title><rect x="504.7" y="1251.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="507.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.20%)</title><rect x="504.7" y="1235.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.20%)</title><rect x="504.7" y="1219.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="507.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.20%)</title><rect x="504.7" y="1203.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="507.7" y="1214.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.20%)</title><rect x="504.7" y="1187.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="507.7" y="1198.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.20%)</title><rect x="504.7" y="1171.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.7" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.20%)</title><rect x="504.7" y="1155.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="507.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.50%)</title><rect x="507.0" y="1251.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="510.0" y="1262.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.50%)</title><rect x="507.0" y="1235.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="510.0" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="507.0" y="1219.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="510.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.20%)</title><rect x="510.5" y="1219.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="513.5" y="1230.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="510.5" y="1203.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="513.5" y="1214.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.20%)</title><rect x="510.5" y="1187.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.30%)</title><rect x="512.9" y="1251.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="515.9" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.30%)</title><rect x="512.9" y="1235.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.9" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.69%)</title><rect x="516.4" y="1347.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.4" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.69%)</title><rect x="516.4" y="1331.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.4" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.69%)</title><rect x="516.4" y="1315.0" width="8.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="519.4" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.69%)</title><rect x="516.4" y="1299.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.69%)</title><rect x="516.4" y="1283.0" width="8.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.4" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (170 samples, 16.85%)</title><rect x="524.6" y="1443.0" width="198.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="527.6" y="1454.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="524.6" y="1427.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.6" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (36 samples, 3.57%)</title><rect x="525.7" y="1427.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="528.7" y="1438.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (36 samples, 3.57%)</title><rect x="525.7" y="1411.0" width="42.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="528.7" y="1422.0">org/..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="528.1" y="1395.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="531.1" y="1406.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="528.1" y="1379.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="531.1" y="1390.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (31 samples, 3.07%)</title><rect x="531.6" y="1395.0" width="36.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="534.6" y="1406.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 0.89%)</title><rect x="539.8" y="1379.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.8" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.69%)</title><rect x="542.1" y="1363.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="545.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.69%)</title><rect x="542.1" y="1347.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="545.1" y="1358.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.10%)</title><rect x="550.3" y="1379.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.50%)</title><rect x="551.5" y="1379.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="554.5" y="1390.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.50%)</title><rect x="551.5" y="1363.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="554.5" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 0.89%)</title><rect x="557.3" y="1379.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="560.3" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="557.3" y="1363.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.3" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.79%)</title><rect x="558.5" y="1363.0" width="9.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="561.5" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="558.5" y="1347.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="561.5" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.69%)</title><rect x="559.7" y="1347.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="562.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (94 samples, 9.32%)</title><rect x="567.8" y="1427.0" width="110.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.8" y="1438.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (76 samples, 7.53%)</title><rect x="567.8" y="1411.0" width="88.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="570.8" y="1422.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (22 samples, 2.18%)</title><rect x="580.7" y="1395.0" width="25.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="583.7" y="1406.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 1.19%)</title><rect x="584.2" y="1379.0" width="14.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="587.2" y="1390.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 1.19%)</title><rect x="584.2" y="1363.0" width="14.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="587.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.30%)</title><rect x="591.2" y="1347.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="594.2" y="1358.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.30%)</title><rect x="591.2" y="1331.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="594.2" y="1342.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.30%)</title><rect x="594.7" y="1347.0" width="3.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="597.7" y="1358.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="598.2" y="1379.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="601.2" y="1390.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.59%)</title><rect x="599.4" y="1379.0" width="7.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="602.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.10%)</title><rect x="606.4" y="1395.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="609.4" y="1406.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.10%)</title><rect x="606.4" y="1379.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="609.4" y="1390.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="606.4" y="1363.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="609.4" y="1374.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (42 samples, 4.16%)</title><rect x="607.6" y="1395.0" width="49.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.6" y="1406.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (41 samples, 4.06%)</title><rect x="608.8" y="1379.0" width="47.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="611.8" y="1390.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 2.18%)</title><rect x="608.8" y="1363.0" width="25.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="611.8" y="1374.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (17 samples, 1.68%)</title><rect x="614.6" y="1347.0" width="19.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="617.6" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.68%)</title><rect x="614.6" y="1331.0" width="19.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="617.6" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.30%)</title><rect x="634.5" y="1363.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.5" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.30%)</title><rect x="634.5" y="1347.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.5" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="636.8" y="1331.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.8" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (16 samples, 1.59%)</title><rect x="638.0" y="1363.0" width="18.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.0" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.10%)</title><rect x="640.3" y="1347.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.3" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 1.29%)</title><rect x="641.5" y="1347.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.5" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (13 samples, 1.29%)</title><rect x="641.5" y="1331.0" width="15.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.5" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="648.5" y="1315.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="651.5" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.40%)</title><rect x="649.7" y="1315.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="652.7" y="1326.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.10%)</title><rect x="652.0" y="1299.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="655.0" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="653.2" y="1299.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="656.2" y="1310.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.20%)</title><rect x="654.4" y="1315.0" width="2.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="657.4" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (16 samples, 1.59%)</title><rect x="656.7" y="1411.0" width="18.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="659.7" y="1422.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (16 samples, 1.59%)</title><rect x="656.7" y="1395.0" width="18.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.7" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="664.9" y="1379.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.9" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="666.1" y="1379.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="669.1" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="666.1" y="1363.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.1" y="1374.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (6 samples, 0.59%)</title><rect x="668.4" y="1379.0" width="7.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="671.4" y="1390.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.59%)</title><rect x="668.4" y="1363.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.4" y="1374.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.30%)</title><rect x="670.8" y="1347.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="673.8" y="1358.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="670.8" y="1331.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="673.8" y="1342.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="674.3" y="1347.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="677.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.10%)</title><rect x="675.4" y="1411.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.4" y="1422.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.10%)</title><rect x="676.6" y="1411.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="676.6" y="1395.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="679.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.10%)</title><rect x="676.6" y="1379.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="679.6" y="1390.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="676.6" y="1363.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="679.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (33 samples, 3.27%)</title><rect x="677.8" y="1427.0" width="38.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="680.8" y="1438.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (32 samples, 3.17%)</title><rect x="678.9" y="1411.0" width="37.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.9" y="1422.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$399/1575596837.process (7 samples, 0.69%)</title><rect x="678.9" y="1395.0" width="8.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="681.9" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (7 samples, 0.69%)</title><rect x="678.9" y="1379.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.9" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.10%)</title><rect x="678.9" y="1363.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="681.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="678.9" y="1347.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.9" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="678.9" y="1331.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="681.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (6 samples, 0.59%)</title><rect x="680.1" y="1363.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="683.1" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 0.59%)</title><rect x="680.1" y="1347.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="683.1" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (8 samples, 0.79%)</title><rect x="687.1" y="1395.0" width="9.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.1" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.10%)</title><rect x="693.0" y="1379.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="696.0" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.20%)</title><rect x="694.1" y="1379.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.1" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (4 samples, 0.40%)</title><rect x="696.5" y="1395.0" width="4.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="699.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="696.5" y="1379.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="699.5" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="701.2" y="1395.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="704.2" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="701.2" y="1379.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="704.2" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="702.3" y="1395.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="705.3" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.20%)</title><rect x="703.5" y="1395.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="706.5" y="1406.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.20%)</title><rect x="703.5" y="1379.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="706.5" y="1390.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="703.5" y="1363.0" width="2.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="706.5" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.20%)</title><rect x="705.8" y="1395.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="708.8" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.20%)</title><rect x="705.8" y="1379.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="708.8" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.10%)</title><rect x="707.0" y="1363.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.0" y="1374.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.30%)</title><rect x="708.2" y="1395.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.2" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.30%)</title><rect x="708.2" y="1379.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="711.2" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="709.3" y="1363.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="712.3" y="1374.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="709.3" y="1347.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="712.3" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="709.3" y="1331.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="712.3" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="709.3" y="1315.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="712.3" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="709.3" y="1299.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="712.3" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="709.3" y="1283.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="712.3" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="709.3" y="1267.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.3" y="1278.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="709.3" y="1251.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="712.3" y="1262.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.10%)</title><rect x="709.3" y="1235.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="712.3" y="1246.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.10%)</title><rect x="710.5" y="1363.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="713.5" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="710.5" y="1347.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="713.5" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="710.5" y="1331.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="713.5" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="710.5" y="1315.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="713.5" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="710.5" y="1299.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="713.5" y="1310.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="710.5" y="1283.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="713.5" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.40%)</title><rect x="711.7" y="1395.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="714.7" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.40%)</title><rect x="711.7" y="1379.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="714.7" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.40%)</title><rect x="711.7" y="1363.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="714.7" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.40%)</title><rect x="711.7" y="1347.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="714.7" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$475/908626125.accept (1 samples, 0.10%)</title><rect x="711.7" y="1331.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="714.7" y="1342.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.30%)</title><rect x="712.9" y="1331.0" width="3.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="715.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.59%)</title><rect x="716.4" y="1427.0" width="7.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="719.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.59%)</title><rect x="716.4" y="1411.0" width="7.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.59%)</title><rect x="716.4" y="1395.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="719.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.30%)</title><rect x="716.4" y="1379.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="719.4" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$476/75823061.accept (2 samples, 0.20%)</title><rect x="717.5" y="1363.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="720.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.30%)</title><rect x="719.9" y="1379.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="722.9" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$476/75823061.accept (3 samples, 0.30%)</title><rect x="719.9" y="1363.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="722.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (3 samples, 0.30%)</title><rect x="719.9" y="1347.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="722.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (3 samples, 0.30%)</title><rect x="719.9" y="1331.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="722.9" y="1342.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (3 samples, 0.30%)</title><rect x="719.9" y="1315.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="722.9" y="1326.0"></text>
</g>
<g>
<title>java/time/Duration.create (3 samples, 0.30%)</title><rect x="719.9" y="1299.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.9" y="1310.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="721.0" y="1283.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="724.0" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="721.0" y="1267.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="724.0" y="1278.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="722.2" y="1283.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.2" y="1294.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.50%)</title><rect x="723.4" y="1443.0" width="5.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="726.4" y="1454.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="723.4" y="1427.0" width="5.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="726.4" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.20%)</title><rect x="729.2" y="1507.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.2" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="729.2" y="1491.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="732.2" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="729.2" y="1475.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="732.2" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="729.2" y="1459.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="732.2" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (197 samples, 19.52%)</title><rect x="731.6" y="1507.0" width="230.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="734.6" y="1518.0">java/util/concurrent/ThreadPoo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (197 samples, 19.52%)</title><rect x="731.6" y="1491.0" width="230.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.6" y="1502.0">java/util/concurrent/LinkedBlo..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (197 samples, 19.52%)</title><rect x="731.6" y="1475.0" width="230.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="734.6" y="1486.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 1.98%)</title><rect x="739.8" y="1459.0" width="23.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="742.8" y="1470.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.20%)</title><rect x="763.1" y="1459.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="766.1" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="763.1" y="1443.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="766.1" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="764.3" y="1427.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="767.3" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.10%)</title><rect x="765.5" y="1459.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="768.5" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.10%)</title><rect x="765.5" y="1443.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="768.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="765.5" y="1427.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="768.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (166 samples, 16.45%)</title><rect x="766.7" y="1459.0" width="194.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="769.7" y="1470.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (163 samples, 16.15%)</title><rect x="770.2" y="1443.0" width="190.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.2" y="1454.0">jdk/internal/misc/Unsafe...</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.20%)</title><rect x="772.5" y="1427.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="775.5" y="1438.0"></text>
</g>
<g>
<title>Unsafe_Park (158 samples, 15.66%)</title><rect x="774.8" y="1427.0" width="184.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="777.8" y="1438.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.20%)</title><rect x="778.3" y="1411.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="781.3" y="1422.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.30%)</title><rect x="780.7" y="1411.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="783.7" y="1422.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.20%)</title><rect x="784.2" y="1411.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="787.2" y="1422.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (14 samples, 1.39%)</title><rect x="786.5" y="1411.0" width="16.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="789.5" y="1422.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.10%)</title><rect x="792.4" y="1395.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="795.4" y="1406.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.59%)</title><rect x="793.5" y="1395.0" width="7.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="796.5" y="1406.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.20%)</title><rect x="800.6" y="1395.0" width="2.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="803.6" y="1406.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="802.9" y="1411.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="805.9" y="1422.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (6 samples, 0.59%)</title><rect x="805.2" y="1411.0" width="7.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="808.2" y="1422.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (2 samples, 0.20%)</title><rect x="812.3" y="1411.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.3" y="1422.0"></text>
</g>
<g>
<title>__lll_unlock_wake (43 samples, 4.26%)</title><rect x="814.6" y="1411.0" width="50.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="817.6" y="1422.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 5.95%)</title><rect x="864.9" y="1411.0" width="70.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="867.9" y="1422.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.69%)</title><rect x="935.1" y="1411.0" width="8.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="938.1" y="1422.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="943.2" y="1411.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="946.2" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.30%)</title><rect x="944.4" y="1411.0" width="3.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="947.4" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="947.9" y="1411.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="950.9" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="949.1" y="1411.0" width="2.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="952.1" y="1422.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="951.4" y="1411.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="954.4" y="1422.0"></text>
</g>
<g>
<title>_init (2 samples, 0.20%)</title><rect x="952.6" y="1411.0" width="2.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="955.6" y="1422.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="954.9" y="1411.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="957.9" y="1422.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.30%)</title><rect x="956.1" y="1411.0" width="3.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="959.1" y="1422.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="959.6" y="1427.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="962.6" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="960.8" y="1459.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="963.8" y="1470.0"></text>
</g>
<g>
<title>start_thread (195 samples, 19.33%)</title><rect x="962.0" y="1555.0" width="228.0" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="965.0" y="1566.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (195 samples, 19.33%)</title><rect x="962.0" y="1539.0" width="228.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="965.0" y="1550.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (195 samples, 19.33%)</title><rect x="962.0" y="1523.0" width="228.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="965.0" y="1534.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.20%)</title><rect x="962.0" y="1507.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.0" y="1518.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="962.0" y="1491.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.0" y="1502.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="962.0" y="1475.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="965.0" y="1486.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="962.0" y="1459.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="965.0" y="1470.0"></text>
</g>
<g>
<title>TruncatedSeq::add(double) (1 samples, 0.10%)</title><rect x="962.0" y="1443.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="965.0" y="1454.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="963.1" y="1491.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.1" y="1502.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.10%)</title><rect x="963.1" y="1475.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.1" y="1486.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="963.1" y="1459.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.1" y="1470.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="963.1" y="1443.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="966.1" y="1454.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (1 samples, 0.10%)</title><rect x="963.1" y="1427.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="966.1" y="1438.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (1 samples, 0.10%)</title><rect x="963.1" y="1411.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="966.1" y="1422.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (193 samples, 19.13%)</title><rect x="964.3" y="1507.0" width="225.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="967.3" y="1518.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (192 samples, 19.03%)</title><rect x="964.3" y="1491.0" width="224.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.3" y="1502.0">CompileBroker::compiler_thread..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (191 samples, 18.93%)</title><rect x="964.3" y="1475.0" width="223.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.3" y="1486.0">CompileBroker::invoke_compile..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (190 samples, 18.83%)</title><rect x="964.3" y="1459.0" width="222.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.3" y="1470.0">C2Compiler::compile_method(ci..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (190 samples, 18.83%)</title><rect x="964.3" y="1443.0" width="222.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.3" y="1454.0">Compile::Compile(ciEnv*, C2Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (95 samples, 9.42%)</title><rect x="964.3" y="1427.0" width="111.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.3" y="1438.0">Compile::Code..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.20%)</title><rect x="964.3" y="1411.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="967.3" y="1422.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="964.3" y="1395.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.3" y="1406.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="965.5" y="1395.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="968.5" y="1406.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="965.5" y="1379.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="968.5" y="1390.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.30%)</title><rect x="966.6" y="1411.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="969.6" y="1422.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.20%)</title><rect x="966.6" y="1395.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="969.6" y="1406.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="966.6" y="1379.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="969.6" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="967.8" y="1379.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="970.8" y="1390.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="967.8" y="1363.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.8" y="1374.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.10%)</title><rect x="969.0" y="1395.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="972.0" y="1406.0"></text>
</g>
<g>
<title>Matcher::match() (12 samples, 1.19%)</title><rect x="970.1" y="1411.0" width="14.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="973.1" y="1422.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.20%)</title><rect x="970.1" y="1395.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="973.1" y="1406.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (9 samples, 0.89%)</title><rect x="972.5" y="1395.0" width="10.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.5" y="1406.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.40%)</title><rect x="973.6" y="1379.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="976.6" y="1390.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.10%)</title><rect x="978.3" y="1379.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="981.3" y="1390.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="978.3" y="1363.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.3" y="1374.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="978.3" y="1347.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="981.3" y="1358.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.10%)</title><rect x="978.3" y="1331.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="981.3" y="1342.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="978.3" y="1315.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.3" y="1326.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.20%)</title><rect x="979.5" y="1379.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="982.5" y="1390.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.10%)</title><rect x="979.5" y="1363.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.5" y="1374.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.10%)</title><rect x="979.5" y="1347.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="982.5" y="1358.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.10%)</title><rect x="979.5" y="1331.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="982.5" y="1342.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="979.5" y="1315.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="982.5" y="1326.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.10%)</title><rect x="979.5" y="1299.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="982.5" y="1310.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="980.7" y="1363.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="983.7" y="1374.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.10%)</title><rect x="980.7" y="1347.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="983.7" y="1358.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="980.7" y="1331.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="983.7" y="1342.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="980.7" y="1315.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="983.7" y="1326.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.10%)</title><rect x="980.7" y="1299.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="983.7" y="1310.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="980.7" y="1283.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="983.7" y="1294.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="981.8" y="1379.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="984.8" y="1390.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="983.0" y="1395.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.0" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (9 samples, 0.89%)</title><rect x="984.2" y="1411.0" width="10.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.2" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (9 samples, 0.89%)</title><rect x="984.2" y="1395.0" width="10.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.2" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="984.2" y="1379.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="987.2" y="1390.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.10%)</title><rect x="985.3" y="1363.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="988.3" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.20%)</title><rect x="986.5" y="1379.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="989.5" y="1390.0"></text>
</g>
<g>
<title>Node::is_iteratively_computed() (1 samples, 0.10%)</title><rect x="987.7" y="1363.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="990.7" y="1374.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.10%)</title><rect x="987.7" y="1347.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.10%)</title><rect x="988.9" y="1379.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.9" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="990.0" y="1379.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="993.0" y="1390.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.30%)</title><rect x="991.2" y="1379.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="994.2" y="1390.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.10%)</title><rect x="992.4" y="1363.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="995.4" y="1374.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="993.5" y="1363.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.5" y="1374.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.10%)</title><rect x="993.5" y="1347.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="996.5" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (69 samples, 6.84%)</title><rect x="994.7" y="1411.0" width="80.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="997.7" y="1422.0">PhaseChai..</text>
</g>
<g>
<title>JVMState::debug_end() const (1 samples, 0.10%)</title><rect x="995.9" y="1395.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="998.9" y="1406.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.10%)</title><rect x="997.0" y="1395.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1000.0" y="1406.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="998.2" y="1395.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.2" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.40%)</title><rect x="999.4" y="1395.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1002.4" y="1406.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.20%)</title><rect x="1001.7" y="1379.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1004.7" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1001.7" y="1363.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1004.7" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.30%)</title><rect x="1004.1" y="1395.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.1" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1004.1" y="1379.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1007.1" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.20%)</title><rect x="1005.2" y="1379.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.2" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1006.4" y="1363.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1009.4" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.69%)</title><rect x="1007.6" y="1395.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1010.6" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.10%)</title><rect x="1014.6" y="1379.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.6" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1014.6" y="1363.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.6" y="1374.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1014.6" y="1347.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.6" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.29%)</title><rect x="1015.7" y="1395.0" width="15.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1018.7" y="1406.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.20%)</title><rect x="1016.9" y="1379.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1019.9" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1019.3" y="1379.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.3" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.10%)</title><rect x="1020.4" y="1379.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1023.4" y="1390.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.10%)</title><rect x="1020.4" y="1363.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1023.4" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 0.50%)</title><rect x="1021.6" y="1379.0" width="5.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1024.6" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1026.3" y="1363.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1029.3" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.30%)</title><rect x="1027.4" y="1379.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1030.4" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1027.4" y="1363.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1030.4" y="1374.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.20%)</title><rect x="1028.6" y="1363.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1031.6" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1031.0" y="1395.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1034.0" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1031.0" y="1379.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1034.0" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.10%)</title><rect x="1032.1" y="1395.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.1" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.40%)</title><rect x="1033.3" y="1395.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1036.3" y="1406.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1035.6" y="1379.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1038.6" y="1390.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1036.8" y="1379.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.8" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (5 samples, 0.50%)</title><rect x="1038.0" y="1395.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1041.0" y="1406.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1041.5" y="1379.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1044.5" y="1390.0"></text>
</g>
<g>
<title>MachNode::cisc_RegMask() const (1 samples, 0.10%)</title><rect x="1041.5" y="1363.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1044.5" y="1374.0"></text>
</g>
<g>
<title>RegMask::is_bound1() const (1 samples, 0.10%)</title><rect x="1042.6" y="1379.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1045.6" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.59%)</title><rect x="1043.8" y="1395.0" width="7.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1046.8" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (4 samples, 0.40%)</title><rect x="1046.2" y="1379.0" width="4.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1049.2" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1049.7" y="1363.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1052.7" y="1374.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1049.7" y="1347.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1052.7" y="1358.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (7 samples, 0.69%)</title><rect x="1050.8" y="1395.0" width="8.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1053.8" y="1406.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (7 samples, 0.69%)</title><rect x="1050.8" y="1379.0" width="8.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.8" y="1390.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (5 samples, 0.50%)</title><rect x="1053.2" y="1363.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1056.2" y="1374.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1057.8" y="1347.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1060.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (4 samples, 0.40%)</title><rect x="1059.0" y="1395.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1062.0" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1062.5" y="1379.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1065.5" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.30%)</title><rect x="1063.7" y="1395.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1066.7" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1066.0" y="1379.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1069.0" y="1390.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.59%)</title><rect x="1067.2" y="1395.0" width="7.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1070.2" y="1406.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (6 samples, 0.59%)</title><rect x="1067.2" y="1379.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.2" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1073.1" y="1363.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1076.1" y="1374.0"></text>
</g>
<g>
<title>compI_rRegNode::use_cisc_RegMask() (1 samples, 0.10%)</title><rect x="1074.2" y="1395.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.2" y="1406.0"></text>
</g>
<g>
<title>Compile::Optimize() (82 samples, 8.13%)</title><rect x="1075.4" y="1427.0" width="95.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1078.4" y="1438.0">Compile::Op..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (28 samples, 2.78%)</title><rect x="1075.4" y="1411.0" width="32.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.4" y="1422.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (28 samples, 2.78%)</title><rect x="1075.4" y="1395.0" width="32.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1078.4" y="1406.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1075.4" y="1379.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1078.4" y="1390.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1075.4" y="1363.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1078.4" y="1374.0"></text>
</g>
<g>
<title>IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool) (1 samples, 0.10%)</title><rect x="1075.4" y="1347.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1078.4" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1379.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1079.6" y="1390.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1363.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1079.6" y="1374.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1347.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.6" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1331.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1079.6" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1315.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1079.6" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1299.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1079.6" y="1310.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1076.6" y="1283.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1079.6" y="1294.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.10%)</title><rect x="1076.6" y="1267.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1079.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1076.6" y="1251.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1079.6" y="1262.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.10%)</title><rect x="1076.6" y="1235.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1079.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.30%)</title><rect x="1077.7" y="1379.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1080.7" y="1390.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1080.1" y="1363.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.1" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.50%)</title><rect x="1081.2" y="1379.0" width="5.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.2" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1082.4" y="1363.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1085.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.30%)</title><rect x="1083.6" y="1363.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.20%)</title><rect x="1084.7" y="1347.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1087.7" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (14 samples, 1.39%)</title><rect x="1087.1" y="1379.0" width="16.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1090.1" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (12 samples, 1.19%)</title><rect x="1089.4" y="1363.0" width="14.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1092.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 1.09%)</title><rect x="1089.4" y="1347.0" width="12.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (2 samples, 0.20%)</title><rect x="1090.6" y="1331.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.20%)</title><rect x="1090.6" y="1315.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1093.6" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (8 samples, 0.79%)</title><rect x="1092.9" y="1331.0" width="9.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1095.9" y="1342.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1102.3" y="1347.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.3" y="1358.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.10%)</title><rect x="1102.3" y="1331.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1105.3" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.30%)</title><rect x="1103.5" y="1379.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.5" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1107.0" y="1379.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.0" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1107.0" y="1363.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.0" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1107.0" y="1347.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.0" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1107.0" y="1331.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.69%)</title><rect x="1108.1" y="1411.0" width="8.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.1" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.69%)</title><rect x="1108.1" y="1395.0" width="8.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1111.1" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::add_local_var_and_edge(Node*, PointsToNode::EscapeState, Node*, Unique_Node_List*) [clone .isra.198] (1 samples, 0.10%)</title><rect x="1109.3" y="1379.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.3" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (5 samples, 0.50%)</title><rect x="1110.5" y="1379.0" width="5.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.40%)</title><rect x="1110.5" y="1363.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1110.5" y="1347.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1111.6" y="1347.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.6" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.30%)</title><rect x="1111.6" y="1331.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.6" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.6" y="1315.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.6" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1111.6" y="1299.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1114.6" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1111.6" y="1283.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.6" y="1294.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1111.6" y="1267.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.6" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1112.8" y="1315.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1115.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1112.8" y="1299.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.8" y="1310.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1112.8" y="1283.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1299.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1283.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1267.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1251.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1117.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1235.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1117.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1219.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1203.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1187.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1117.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1171.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1155.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1139.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1123.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1117.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1107.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1091.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1075.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1059.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1117.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1043.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1117.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1027.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="1011.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="995.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1117.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="979.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="963.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="947.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="931.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="915.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1117.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="899.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="883.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="867.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="851.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1114.0" y="835.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.10%)</title><rect x="1115.2" y="1363.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1115.2" y="1347.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.2" y="1358.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1116.3" y="1411.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1119.3" y="1422.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1116.3" y="1395.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1119.3" y="1406.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1116.3" y="1379.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.3" y="1390.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1116.3" y="1363.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1119.3" y="1374.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1116.3" y="1347.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.3" y="1358.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.10%)</title><rect x="1116.3" y="1331.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.3" y="1342.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 0.20%)</title><rect x="1117.5" y="1411.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1120.5" y="1422.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (2 samples, 0.20%)</title><rect x="1117.5" y="1395.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1120.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (18 samples, 1.78%)</title><rect x="1119.8" y="1411.0" width="21.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.8" y="1422.0">P..</text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.10%)</title><rect x="1119.8" y="1395.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.8" y="1406.0"></text>
</g>
<g>
<title>Node::pinned() const (2 samples, 0.20%)</title><rect x="1121.0" y="1395.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.0" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1123.3" y="1395.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.3" y="1406.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1124.5" y="1379.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.5" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1125.7" y="1395.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1128.7" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.69%)</title><rect x="1126.8" y="1395.0" width="8.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.8" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.59%)</title><rect x="1128.0" y="1379.0" width="7.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.0" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.40%)</title><rect x="1129.2" y="1363.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1132.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1129.2" y="1347.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.2" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.30%)</title><rect x="1130.4" y="1347.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.4" y="1358.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1133.9" y="1363.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.9" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.20%)</title><rect x="1135.0" y="1395.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.0" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1136.2" y="1379.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.2" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1137.4" y="1395.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1137.4" y="1379.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.10%)</title><rect x="1137.4" y="1363.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.4" y="1374.0"></text>
</g>
<g>
<title>DecodeNNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1137.4" y="1347.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1140.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.20%)</title><rect x="1138.5" y="1395.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1141.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.20%)</title><rect x="1138.5" y="1379.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.5" y="1390.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1138.5" y="1363.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.5" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1138.5" y="1347.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.5" y="1358.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1138.5" y="1331.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.5" y="1342.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1139.7" y="1347.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.7" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (2 samples, 0.20%)</title><rect x="1140.9" y="1411.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.9" y="1422.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (23 samples, 2.28%)</title><rect x="1143.2" y="1411.0" width="26.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.2" y="1422.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1143.2" y="1395.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1146.2" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (22 samples, 2.18%)</title><rect x="1144.4" y="1395.0" width="25.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1147.4" y="1406.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1144.4" y="1379.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.4" y="1390.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1144.4" y="1363.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.4" y="1374.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.10%)</title><rect x="1144.4" y="1347.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.4" y="1358.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1144.4" y="1331.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1147.4" y="1342.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1144.4" y="1315.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.4" y="1326.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_instance_klass() const (1 samples, 0.10%)</title><rect x="1144.4" y="1299.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.4" y="1310.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.59%)</title><rect x="1145.6" y="1379.0" width="7.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.6" y="1390.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1150.2" y="1363.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1151.4" y="1363.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.4" y="1374.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1151.4" y="1347.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.4" y="1358.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.30%)</title><rect x="1152.6" y="1379.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.6" y="1390.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.10%)</title><rect x="1152.6" y="1363.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.6" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1153.7" y="1363.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.7" y="1374.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1153.7" y="1347.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.7" y="1358.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1154.9" y="1363.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1157.9" y="1374.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.10%)</title><rect x="1156.1" y="1379.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1159.1" y="1390.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1157.3" y="1379.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.3" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.20%)</title><rect x="1157.3" y="1363.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.3" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.20%)</title><rect x="1157.3" y="1347.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.3" y="1358.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.20%)</title><rect x="1157.3" y="1331.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1160.3" y="1342.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (8 samples, 0.79%)</title><rect x="1159.6" y="1379.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.6" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (6 samples, 0.59%)</title><rect x="1159.6" y="1363.0" width="7.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (6 samples, 0.59%)</title><rect x="1159.6" y="1347.0" width="7.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.50%)</title><rect x="1159.6" y="1331.0" width="5.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.50%)</title><rect x="1159.6" y="1315.0" width="5.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.50%)</title><rect x="1159.6" y="1299.0" width="5.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1162.6" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.50%)</title><rect x="1159.6" y="1283.0" width="5.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.6" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.50%)</title><rect x="1159.6" y="1267.0" width="5.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.6" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (5 samples, 0.50%)</title><rect x="1159.6" y="1251.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.40%)</title><rect x="1159.6" y="1235.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.40%)</title><rect x="1159.6" y="1219.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.40%)</title><rect x="1159.6" y="1203.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.6" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1159.6" y="1187.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1159.6" y="1171.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1159.6" y="1155.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.6" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.30%)</title><rect x="1159.6" y="1139.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1159.6" y="1123.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.6" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1107.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1159.6" y="1091.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1159.6" y="1075.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.6" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1160.8" y="1107.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1163.8" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1160.8" y="1091.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.8" y="1102.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1161.9" y="1123.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.9" y="1134.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1161.9" y="1107.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.9" y="1118.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1163.1" y="1187.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.1" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1163.1" y="1171.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.1" y="1182.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1164.3" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1167.3" y="1246.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1164.3" y="1219.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.3" y="1230.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1165.4" y="1331.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.4" y="1342.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1165.4" y="1315.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.4" y="1326.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1166.6" y="1363.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.6" y="1374.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (2 samples, 0.20%)</title><rect x="1166.6" y="1347.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1169.6" y="1358.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1167.8" y="1331.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.8" y="1342.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1168.9" y="1379.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.9" y="1390.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1168.9" y="1363.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.9" y="1374.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1168.9" y="1347.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.9" y="1358.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1170.1" y="1411.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.1" y="1422.0"></text>
</g>
<g>
<title>PhaseMacroExpand::process_users_of_allocation(CallNode*) (1 samples, 0.10%)</title><rect x="1170.1" y="1395.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.10%)</title><rect x="1170.1" y="1379.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.1" y="1390.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1171.3" y="1427.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 1.09%)</title><rect x="1172.5" y="1427.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.5" y="1438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 1.09%)</title><rect x="1172.5" y="1411.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="1422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 1.09%)</title><rect x="1172.5" y="1395.0" width="12.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.5" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 1.09%)</title><rect x="1172.5" y="1379.0" width="12.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 1.09%)</title><rect x="1172.5" y="1363.0" width="12.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="1374.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 1.09%)</title><rect x="1172.5" y="1347.0" width="12.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 0.99%)</title><rect x="1172.5" y="1331.0" width="11.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 0.99%)</title><rect x="1172.5" y="1315.0" width="11.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.5" y="1326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 0.99%)</title><rect x="1172.5" y="1299.0" width="11.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.5" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 0.99%)</title><rect x="1172.5" y="1283.0" width="11.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 0.99%)</title><rect x="1172.5" y="1267.0" width="11.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.5" y="1278.0"></text>
</g>
<g>
<title>Parse::do_call() (10 samples, 0.99%)</title><rect x="1172.5" y="1251.0" width="11.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.5" y="1262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.69%)</title><rect x="1172.5" y="1235.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.5" y="1246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.69%)</title><rect x="1172.5" y="1219.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.5" y="1230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.69%)</title><rect x="1172.5" y="1203.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.69%)</title><rect x="1172.5" y="1187.0" width="8.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.69%)</title><rect x="1172.5" y="1171.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.59%)</title><rect x="1172.5" y="1155.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.59%)</title><rect x="1172.5" y="1139.0" width="7.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.5" y="1150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.59%)</title><rect x="1172.5" y="1123.0" width="7.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.5" y="1134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.59%)</title><rect x="1172.5" y="1107.0" width="7.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.5" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.59%)</title><rect x="1172.5" y="1091.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.5" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.59%)</title><rect x="1172.5" y="1075.0" width="7.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.5" y="1086.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.59%)</title><rect x="1172.5" y="1059.0" width="7.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.5" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.50%)</title><rect x="1172.5" y="1043.0" width="5.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.5" y="1054.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.50%)</title><rect x="1172.5" y="1027.0" width="5.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.5" y="1038.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1172.5" y="1011.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.40%)</title><rect x="1173.6" y="1011.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.40%)</title><rect x="1173.6" y="995.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.40%)</title><rect x="1173.6" y="979.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1176.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.40%)</title><rect x="1173.6" y="963.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.6" y="974.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1173.6" y="947.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.6" y="958.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.10%)</title><rect x="1173.6" y="931.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.6" y="942.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_reference_get() (1 samples, 0.10%)</title><rect x="1173.6" y="915.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.6" y="926.0"></text>
</g>
<g>
<title>__strlen_sse2_pminub (1 samples, 0.10%)</title><rect x="1173.6" y="899.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1176.6" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1174.8" y="947.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="958.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1174.8" y="931.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1177.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1174.8" y="915.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1174.8" y="899.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1177.8" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1174.8" y="883.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.8" y="894.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1174.8" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.8" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1174.8" y="851.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.8" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1174.8" y="835.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1177.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1174.8" y="819.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1176.0" y="867.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1176.0" y="851.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.0" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1176.0" y="835.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.0" y="846.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1176.0" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.0" y="830.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1177.1" y="947.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="958.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1177.1" y="931.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1177.1" y="915.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.1" y="926.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.10%)</title><rect x="1177.1" y="899.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="910.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.10%)</title><rect x="1177.1" y="883.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="894.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.10%)</title><rect x="1177.1" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.1" y="878.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="1043.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.3" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="1027.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.3" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.3" y="1011.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.3" y="995.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.3" y="979.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.3" y="963.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.3" y="947.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.3" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="931.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.3" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.3" y="915.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.3" y="899.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.3" y="883.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.3" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.3" y="851.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.3" y="862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="835.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.3" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.3" y="803.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.3" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.3" y="771.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.3" y="755.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.3" y="739.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.3" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.3" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.3" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.3" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.3" y="659.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1178.3" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="654.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1178.3" y="627.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1181.3" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1179.5" y="1155.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.5" y="1166.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1179.5" y="1139.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.5" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.6" y="1235.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.6" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.6" y="1219.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.6" y="1203.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1180.6" y="1187.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1180.6" y="1171.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1180.6" y="1155.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1180.6" y="1139.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.6" y="1123.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.6" y="1107.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1180.6" y="1091.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.6" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1180.6" y="1075.0" width="3.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.6" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1180.6" y="1059.0" width="3.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.6" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1180.6" y="1043.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.6" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.6" y="1027.0" width="3.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.6" y="1011.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1180.6" y="995.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1180.6" y="979.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1180.6" y="963.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1180.6" y="947.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.6" y="931.0" width="3.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.6" y="915.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1180.6" y="899.0" width="3.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1180.6" y="883.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1180.6" y="867.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1180.6" y="851.0" width="3.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.6" y="862.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1180.6" y="835.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.6" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1180.6" y="819.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.6" y="830.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.10%)</title><rect x="1180.6" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.6" y="814.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1180.6" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1181.8" y="803.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1181.8" y="787.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1181.8" y="771.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1181.8" y="755.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="739.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.8" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.8" y="691.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.8" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.8" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.8" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.8" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="627.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.8" y="611.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.8" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.8" y="579.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.8" y="563.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="547.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.8" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.8" y="499.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.8" y="483.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.8" y="467.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.8" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.8" y="451.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.8" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.8" y="435.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.8" y="419.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.8" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.8" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="371.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="355.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.10%)</title><rect x="1181.8" y="339.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="350.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1181.8" y="323.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.8" y="334.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1181.8" y="307.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.8" y="318.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.10%)</title><rect x="1181.8" y="291.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.8" y="302.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.10%)</title><rect x="1181.8" y="275.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.8" y="286.0"></text>
</g>
<g>
<title>IdealKit::copy_cvstate() (1 samples, 0.10%)</title><rect x="1181.8" y="259.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.8" y="270.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.10%)</title><rect x="1181.8" y="243.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.8" y="254.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="1181.8" y="227.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1184.8" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="739.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="723.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="707.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="643.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="579.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="547.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="531.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="515.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="499.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="483.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="467.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="451.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="462.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="435.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.0" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="419.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.0" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="403.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.0" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="387.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="371.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="355.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.0" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="339.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="307.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="291.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="275.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="259.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.0" y="243.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.0" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.0" y="227.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.0" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.0" y="211.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.0" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.0" y="195.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.0" y="179.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.0" y="163.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="147.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1183.0" y="131.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.0" y="142.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.10%)</title><rect x="1183.0" y="115.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.0" y="126.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1183.0" y="99.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.0" y="110.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1183.0" y="83.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.0" y="94.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.10%)</title><rect x="1183.0" y="67.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="78.0"></text>
</g>
<g>
<title>GraphKit::final_sync(IdealKit&amp;) (1 samples, 0.10%)</title><rect x="1183.0" y="51.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.0" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="1183.0" y="35.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1186.0" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="1331.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="1315.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="1299.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="1283.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="1267.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="1251.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1246.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.2" y="1219.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.2" y="1230.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1184.2" y="1203.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="1214.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1184.2" y="1187.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::map_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="1171.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.2" y="1182.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.10%)</title><rect x="1185.3" y="1427.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.3" y="1438.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1185.3" y="1411.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.3" y="1422.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.10%)</title><rect x="1186.5" y="1459.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="1470.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.10%)</title><rect x="1186.5" y="1443.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.5" y="1454.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1186.5" y="1427.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.5" y="1438.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1186.5" y="1411.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.5" y="1422.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (1 samples, 0.10%)</title><rect x="1186.5" y="1395.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.5" y="1406.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (1 samples, 0.10%)</title><rect x="1186.5" y="1379.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.5" y="1390.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.10%)</title><rect x="1186.5" y="1363.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="1374.0"></text>
</g>
<g>
<title>LIR_Assembler::add_debug_info_for_null_check(int, CodeEmitInfo*) (1 samples, 0.10%)</title><rect x="1186.5" y="1347.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="1358.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.10%)</title><rect x="1187.7" y="1475.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="1486.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.10%)</title><rect x="1187.7" y="1459.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="1470.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.10%)</title><rect x="1188.8" y="1491.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="1502.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.10%)</title><rect x="1188.8" y="1475.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.8" y="1486.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.10%)</title><rect x="1188.8" y="1459.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="1470.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.10%)</title><rect x="1188.8" y="1443.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1191.8" y="1454.0"></text>
</g>
</g>
</svg>
