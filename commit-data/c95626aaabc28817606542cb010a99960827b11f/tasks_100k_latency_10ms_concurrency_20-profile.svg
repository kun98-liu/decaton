<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (157 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.64%)</title><rect x="10.0" y="883.0" width="7.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.64%)</title><rect x="10.0" y="867.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.64%)</title><rect x="10.0" y="851.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.64%)</title><rect x="10.0" y="835.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.64%)</title><rect x="10.0" y="819.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.64%)</title><rect x="17.5" y="883.0" width="7.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.5" y="894.0"></text>
</g>
<g>
<title>_IO_fgets (1 samples, 0.64%)</title><rect x="17.5" y="867.0" width="7.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="20.5" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (13 samples, 8.28%)</title><rect x="25.0" y="883.0" width="97.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.0" y="894.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (13 samples, 8.28%)</title><rect x="25.0" y="867.0" width="97.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.0" y="878.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (13 samples, 8.28%)</title><rect x="25.0" y="851.0" width="97.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.0" y="862.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.64%)</title><rect x="25.0" y="835.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.64%)</title><rect x="25.0" y="819.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.64%)</title><rect x="25.0" y="803.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.64%)</title><rect x="25.0" y="787.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.0" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.64%)</title><rect x="25.0" y="771.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="28.0" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.64%)</title><rect x="25.0" y="755.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.64%)</title><rect x="25.0" y="739.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.64%)</title><rect x="25.0" y="723.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.64%)</title><rect x="25.0" y="707.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.64%)</title><rect x="25.0" y="691.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.0" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 1.27%)</title><rect x="32.5" y="835.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="35.5" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 1.27%)</title><rect x="32.5" y="819.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.27%)</title><rect x="32.5" y="803.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="35.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$242/1511831949.accept (2 samples, 1.27%)</title><rect x="32.5" y="787.0" width="15.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 1.27%)</title><rect x="32.5" y="771.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="35.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.27%)</title><rect x="32.5" y="755.0" width="15.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="35.5" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.64%)</title><rect x="40.1" y="739.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.91%)</title><rect x="47.6" y="835.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.6" y="846.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$241/650628407.accept (3 samples, 1.91%)</title><rect x="47.6" y="819.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.6" y="830.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.91%)</title><rect x="47.6" y="803.0" width="22.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.6" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 1.27%)</title><rect x="47.6" y="787.0" width="15.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.27%)</title><rect x="47.6" y="771.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.27%)</title><rect x="47.6" y="755.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.27%)</title><rect x="47.6" y="739.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.27%)</title><rect x="47.6" y="723.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.27%)</title><rect x="47.6" y="707.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.27%)</title><rect x="47.6" y="691.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="50.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.27%)</title><rect x="47.6" y="675.0" width="15.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="50.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.64%)</title><rect x="62.6" y="787.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.64%)</title><rect x="62.6" y="771.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.64%)</title><rect x="62.6" y="755.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.64%)</title><rect x="62.6" y="739.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.46%)</title><rect x="70.1" y="835.0" width="52.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="73.1" y="846.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.46%)</title><rect x="70.1" y="819.0" width="52.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="73.1" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 3.18%)</title><rect x="70.1" y="803.0" width="37.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="73.1" y="814.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 2.55%)</title><rect x="70.1" y="787.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.1" y="798.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 2.55%)</title><rect x="70.1" y="771.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.1" y="782.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.91%)</title><rect x="70.1" y="755.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.1" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.91%)</title><rect x="70.1" y="739.0" width="22.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.1" y="750.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 1.91%)</title><rect x="70.1" y="723.0" width="22.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.1" y="734.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 1.91%)</title><rect x="70.1" y="707.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.1" y="718.0">o..</text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.64%)</title><rect x="70.1" y="691.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.requiredMemoryAmountKnown (1 samples, 0.64%)</title><rect x="70.1" y="675.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="73.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (2 samples, 1.27%)</title><rect x="77.6" y="691.0" width="15.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordCompletedReceive (2 samples, 1.27%)</title><rect x="77.6" y="675.0" width="15.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.64%)</title><rect x="77.6" y="659.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="80.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.64%)</title><rect x="85.2" y="659.0" width="7.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.64%)</title><rect x="85.2" y="643.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="88.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$237/807696403.shouldBlock (1 samples, 0.64%)</title><rect x="92.7" y="755.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="95.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.64%)</title><rect x="92.7" y="739.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="95.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.64%)</title><rect x="92.7" y="723.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="95.7" y="734.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.64%)</title><rect x="92.7" y="707.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="95.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.64%)</title><rect x="92.7" y="691.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="95.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.64%)</title><rect x="100.2" y="787.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="103.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.64%)</title><rect x="100.2" y="771.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="103.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.64%)</title><rect x="100.2" y="755.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.64%)</title><rect x="100.2" y="739.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="103.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.64%)</title><rect x="100.2" y="723.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.64%)</title><rect x="100.2" y="707.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="103.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.64%)</title><rect x="100.2" y="691.0" width="7.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.2" y="702.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.64%)</title><rect x="100.2" y="675.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="103.2" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.64%)</title><rect x="100.2" y="659.0" width="7.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="103.2" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 1.27%)</title><rect x="107.7" y="803.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 1.27%)</title><rect x="107.7" y="787.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="110.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.add (1 samples, 0.64%)</title><rect x="107.7" y="771.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="110.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.64%)</title><rect x="115.2" y="771.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="118.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.64%)</title><rect x="115.2" y="755.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.64%)</title><rect x="115.2" y="739.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.2" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.64%)</title><rect x="115.2" y="723.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$236/1223579152.accept (1 samples, 0.64%)</title><rect x="115.2" y="707.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.64%)</title><rect x="115.2" y="691.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="118.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$2500 (1 samples, 0.64%)</title><rect x="115.2" y="675.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="118.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.isFetchable (1 samples, 0.64%)</title><rect x="115.2" y="659.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.2" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (65 samples, 41.40%)</title><rect x="122.7" y="883.0" width="488.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.7" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (65 samples, 41.40%)</title><rect x="122.7" y="867.0" width="488.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="125.7" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (65 samples, 41.40%)</title><rect x="122.7" y="851.0" width="488.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.7" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$472/2139136956.run (61 samples, 38.85%)</title><rect x="130.3" y="835.0" width="458.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="133.3" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (61 samples, 38.85%)</title><rect x="130.3" y="819.0" width="458.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="133.3" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (61 samples, 38.85%)</title><rect x="130.3" y="803.0" width="458.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.3" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.p..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (61 samples, 38.85%)</title><rect x="130.3" y="787.0" width="458.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="133.3" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 5.10%)</title><rect x="130.3" y="771.0" width="60.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="133.3" y="782.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 5.10%)</title><rect x="130.3" y="755.0" width="60.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.3" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 5.10%)</title><rect x="130.3" y="739.0" width="60.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.3" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 3.82%)</title><rect x="145.3" y="723.0" width="45.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="148.3" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 1.27%)</title><rect x="145.3" y="707.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$482/352721633.accept (1 samples, 0.64%)</title><rect x="152.8" y="691.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="155.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 2.55%)</title><rect x="160.3" y="707.0" width="30.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="163.3" y="718.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$482/352721633.accept (4 samples, 2.55%)</title><rect x="160.3" y="691.0" width="30.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.3" y="702.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (4 samples, 2.55%)</title><rect x="160.3" y="675.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.3" y="686.0">co..</text>
</g>
<g>
<title>itable stub (1 samples, 0.64%)</title><rect x="167.8" y="659.0" width="7.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="170.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.27%)</title><rect x="175.4" y="659.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.27%)</title><rect x="175.4" y="643.0" width="15.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="178.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.27%)</title><rect x="175.4" y="627.0" width="15.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.27%)</title><rect x="175.4" y="611.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (9 samples, 5.73%)</title><rect x="190.4" y="771.0" width="67.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="193.4" y="782.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (8 samples, 5.10%)</title><rect x="197.9" y="755.0" width="60.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.9" y="766.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (8 samples, 5.10%)</title><rect x="197.9" y="739.0" width="60.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="200.9" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 5.10%)</title><rect x="197.9" y="723.0" width="60.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.9" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (8 samples, 5.10%)</title><rect x="197.9" y="707.0" width="60.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.9" y="718.0">com/li..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (8 samples, 5.10%)</title><rect x="197.9" y="691.0" width="60.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="200.9" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1 samples, 0.64%)</title><rect x="197.9" y="675.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.9" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.64%)</title><rect x="197.9" y="659.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="200.9" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.64%)</title><rect x="197.9" y="643.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="200.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.64%)</title><rect x="197.9" y="627.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="200.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (5 samples, 3.18%)</title><rect x="205.4" y="675.0" width="37.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.4" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.64%)</title><rect x="205.4" y="659.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.64%)</title><rect x="205.4" y="643.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="208.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 2.55%)</title><rect x="212.9" y="659.0" width="30.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="215.9" y="670.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 2.55%)</title><rect x="212.9" y="643.0" width="30.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="215.9" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.64%)</title><rect x="212.9" y="627.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.9" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.64%)</title><rect x="212.9" y="611.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="215.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.91%)</title><rect x="220.4" y="627.0" width="22.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.4" y="638.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.91%)</title><rect x="220.4" y="611.0" width="22.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="223.4" y="622.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.91%)</title><rect x="220.4" y="595.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="223.4" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.64%)</title><rect x="220.4" y="579.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.64%)</title><rect x="228.0" y="579.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.64%)</title><rect x="228.0" y="563.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.64%)</title><rect x="228.0" y="547.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.64%)</title><rect x="228.0" y="531.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="231.0" y="542.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.64%)</title><rect x="228.0" y="515.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.64%)</title><rect x="235.5" y="579.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.5" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.64%)</title><rect x="235.5" y="563.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.64%)</title><rect x="235.5" y="547.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.27%)</title><rect x="243.0" y="675.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.27%)</title><rect x="243.0" y="659.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.27%)</title><rect x="243.0" y="643.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="246.0" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.27%)</title><rect x="243.0" y="627.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.27%)</title><rect x="243.0" y="611.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="246.0" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (44 samples, 28.03%)</title><rect x="258.0" y="771.0" width="330.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="261.0" y="782.0">com/linecorp/decaton/processor/runtime/intern..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (3 samples, 1.91%)</title><rect x="258.0" y="755.0" width="22.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="261.0" y="766.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.91%)</title><rect x="258.0" y="739.0" width="22.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="261.0" y="750.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.91%)</title><rect x="258.0" y="723.0" width="22.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="261.0" y="734.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.27%)</title><rect x="258.0" y="707.0" width="15.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.0" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.27%)</title><rect x="258.0" y="691.0" width="15.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="261.0" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.64%)</title><rect x="265.5" y="675.0" width="7.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (1 samples, 0.64%)</title><rect x="273.1" y="707.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="276.1" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.64%)</title><rect x="273.1" y="691.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="276.1" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.64%)</title><rect x="273.1" y="675.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="276.1" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.64%)</title><rect x="280.6" y="755.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="283.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.64%)</title><rect x="280.6" y="739.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="283.6" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.64%)</title><rect x="280.6" y="723.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="283.6" y="734.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.64%)</title><rect x="280.6" y="707.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="283.6" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (10 samples, 6.37%)</title><rect x="288.1" y="755.0" width="75.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.1" y="766.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (10 samples, 6.37%)</title><rect x="288.1" y="739.0" width="75.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.1" y="750.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.55%)</title><rect x="295.6" y="723.0" width="30.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.6" y="734.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (2 samples, 1.27%)</title><rect x="310.6" y="707.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="313.6" y="718.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (2 samples, 1.27%)</title><rect x="310.6" y="691.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.6" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.27%)</title><rect x="310.6" y="675.0" width="15.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="313.6" y="686.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.27%)</title><rect x="310.6" y="659.0" width="15.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.6" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.64%)</title><rect x="318.2" y="643.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="321.2" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.64%)</title><rect x="318.2" y="627.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="321.2" y="638.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (5 samples, 3.18%)</title><rect x="325.7" y="723.0" width="37.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.7" y="734.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (5 samples, 3.18%)</title><rect x="325.7" y="707.0" width="37.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.7" y="718.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.91%)</title><rect x="325.7" y="691.0" width="22.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.7" y="702.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.91%)</title><rect x="325.7" y="675.0" width="22.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.7" y="686.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.27%)</title><rect x="333.2" y="659.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="336.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.27%)</title><rect x="348.2" y="691.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="351.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.27%)</title><rect x="348.2" y="675.0" width="15.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.2" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 1.27%)</title><rect x="348.2" y="659.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="351.2" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (27 samples, 17.20%)</title><rect x="363.2" y="755.0" width="203.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="366.2" y="766.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (27 samples, 17.20%)</title><rect x="363.2" y="739.0" width="203.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="366.2" y="750.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$399/2049550075.process (21 samples, 13.38%)</title><rect x="370.8" y="723.0" width="157.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.8" y="734.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (21 samples, 13.38%)</title><rect x="370.8" y="707.0" width="157.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.8" y="718.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (19 samples, 12.10%)</title><rect x="370.8" y="691.0" width="142.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="373.8" y="702.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (19 samples, 12.10%)</title><rect x="370.8" y="675.0" width="142.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="373.8" y="686.0">com/linecorp/decat..</text>
</g>
<g>
<title>java/lang/Thread.sleep (19 samples, 12.10%)</title><rect x="370.8" y="659.0" width="142.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="373.8" y="670.0">java/lang/Thread.s..</text>
</g>
<g>
<title>JVM_Sleep (19 samples, 12.10%)</title><rect x="370.8" y="643.0" width="142.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="373.8" y="654.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.64%)</title><rect x="370.8" y="627.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="373.8" y="638.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 3.18%)</title><rect x="378.3" y="627.0" width="37.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="381.3" y="638.0">__l..</text>
</g>
<g>
<title>__pthread_cond_timedwait (8 samples, 5.10%)</title><rect x="415.9" y="627.0" width="60.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="418.9" y="638.0">__pthr..</text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.64%)</title><rect x="476.0" y="627.0" width="7.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="479.0" y="638.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.64%)</title><rect x="483.5" y="627.0" width="7.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="486.5" y="638.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (3 samples, 1.91%)</title><rect x="491.0" y="627.0" width="22.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="494.0" y="638.0">o..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.64%)</title><rect x="498.5" y="611.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="501.5" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.64%)</title><rect x="506.1" y="611.0" width="7.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="509.1" y="622.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.64%)</title><rect x="506.1" y="595.0" width="7.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="509.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.27%)</title><rect x="513.6" y="691.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="516.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.27%)</title><rect x="513.6" y="675.0" width="15.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="516.6" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.27%)</title><rect x="513.6" y="659.0" width="15.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="516.6" y="670.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.27%)</title><rect x="513.6" y="643.0" width="15.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="516.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 1.27%)</title><rect x="528.6" y="723.0" width="15.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="531.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.64%)</title><rect x="543.6" y="723.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="546.6" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.64%)</title><rect x="543.6" y="707.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="546.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.64%)</title><rect x="551.1" y="723.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="554.1" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.64%)</title><rect x="551.1" y="707.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="554.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.64%)</title><rect x="558.7" y="723.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="561.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.64%)</title><rect x="558.7" y="707.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="561.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.64%)</title><rect x="558.7" y="691.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="561.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.64%)</title><rect x="558.7" y="675.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="561.7" y="686.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/Counter.increment (1 samples, 0.64%)</title><rect x="566.2" y="755.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.2" y="766.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter.increment (1 samples, 0.64%)</title><rect x="566.2" y="739.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="569.2" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/74672905.linkToTargetMethod (1 samples, 0.64%)</title><rect x="566.2" y="723.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="569.2" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.64%)</title><rect x="566.2" y="707.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="569.2" y="718.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeCounter$$Lambda$471/391509268.get$Lambda (1 samples, 0.64%)</title><rect x="566.2" y="691.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="569.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.27%)</title><rect x="573.7" y="755.0" width="15.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="576.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.27%)</title><rect x="573.7" y="739.0" width="15.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="576.7" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.27%)</title><rect x="573.7" y="723.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.64%)</title><rect x="573.7" y="707.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="576.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.64%)</title><rect x="581.2" y="707.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="584.2" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/465692649.accept (1 samples, 0.64%)</title><rect x="581.2" y="691.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="584.2" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (1 samples, 0.64%)</title><rect x="581.2" y="675.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="584.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.64%)</title><rect x="581.2" y="659.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="584.2" y="670.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.64%)</title><rect x="581.2" y="643.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="584.2" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.64%)</title><rect x="581.2" y="627.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="584.2" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.91%)</title><rect x="588.7" y="835.0" width="22.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="591.7" y="846.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 1.27%)</title><rect x="596.2" y="819.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="599.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.64%)</title><rect x="611.3" y="883.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="614.3" y="894.0"></text>
</g>
<g>
<title>start_thread (76 samples, 48.41%)</title><rect x="618.8" y="883.0" width="571.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="621.8" y="894.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (76 samples, 48.41%)</title><rect x="618.8" y="867.0" width="571.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="621.8" y="878.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (76 samples, 48.41%)</title><rect x="618.8" y="851.0" width="571.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="621.8" y="862.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 10.19%)</title><rect x="618.8" y="835.0" width="120.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="621.8" y="846.0">GangWorker::loo..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 10.19%)</title><rect x="618.8" y="819.0" width="120.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="621.8" y="830.0">G1ParTask::work..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 8.92%)</title><rect x="618.8" y="803.0" width="105.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="621.8" y="814.0">G1ParEvacuate..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 1.27%)</title><rect x="701.5" y="787.0" width="15.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="704.5" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.64%)</title><rect x="709.0" y="771.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="712.0" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.64%)</title><rect x="709.0" y="755.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="712.0" y="766.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.64%)</title><rect x="716.5" y="787.0" width="7.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="719.5" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 1.27%)</title><rect x="724.0" y="803.0" width="15.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="727.0" y="814.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 1.27%)</title><rect x="724.0" y="787.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="727.0" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 1.27%)</title><rect x="724.0" y="771.0" width="15.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="727.0" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (2 samples, 1.27%)</title><rect x="724.0" y="755.0" width="15.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="727.0" y="766.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 1.27%)</title><rect x="724.0" y="739.0" width="15.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="727.0" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (2 samples, 1.27%)</title><rect x="724.0" y="723.0" width="15.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="727.0" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 1.27%)</title><rect x="724.0" y="707.0" width="15.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="727.0" y="718.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.64%)</title><rect x="731.5" y="691.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="734.5" y="702.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 38.22%)</title><rect x="739.0" y="835.0" width="451.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="742.0" y="846.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 38.22%)</title><rect x="739.0" y="819.0" width="451.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.0" y="830.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 38.22%)</title><rect x="739.0" y="803.0" width="451.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="742.0" y="814.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (58 samples, 36.94%)</title><rect x="739.0" y="787.0" width="436.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="742.0" y="798.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Directive..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (58 samples, 36.94%)</title><rect x="739.0" y="771.0" width="436.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="742.0" y="782.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (28 samples, 17.83%)</title><rect x="739.0" y="755.0" width="210.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.0" y="766.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (2 samples, 1.27%)</title><rect x="739.0" y="739.0" width="15.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.0" y="750.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 1.27%)</title><rect x="739.0" y="723.0" width="15.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="742.0" y="734.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.64%)</title><rect x="746.6" y="707.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="749.6" y="718.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 1.27%)</title><rect x="754.1" y="739.0" width="15.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="757.1" y="750.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.64%)</title><rect x="754.1" y="723.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="757.1" y="734.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.64%)</title><rect x="761.6" y="723.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="764.6" y="734.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.64%)</title><rect x="761.6" y="707.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="764.6" y="718.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.64%)</title><rect x="761.6" y="691.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.6" y="702.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.64%)</title><rect x="761.6" y="675.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="764.6" y="686.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.64%)</title><rect x="761.6" y="659.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="764.6" y="670.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.64%)</title><rect x="761.6" y="643.0" width="7.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="764.6" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 2.55%)</title><rect x="769.1" y="739.0" width="30.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.1" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 2.55%)</title><rect x="769.1" y="723.0" width="30.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.1" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::implicit_null_check(Block*, Node*, Node*, int) (1 samples, 0.64%)</title><rect x="769.1" y="707.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="772.1" y="718.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.64%)</title><rect x="769.1" y="691.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="772.1" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.64%)</title><rect x="776.6" y="707.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="779.6" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.64%)</title><rect x="776.6" y="691.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.6" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.64%)</title><rect x="784.1" y="707.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="787.1" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.64%)</title><rect x="791.7" y="707.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="794.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (20 samples, 12.74%)</title><rect x="799.2" y="739.0" width="150.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="802.2" y="750.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.64%)</title><rect x="799.2" y="723.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="802.2" y="734.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.64%)</title><rect x="806.7" y="723.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="809.7" y="734.0"></text>
</g>
<g>
<title>Block::has_uncommon_code() const (1 samples, 0.64%)</title><rect x="806.7" y="707.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="809.7" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.27%)</title><rect x="814.2" y="723.0" width="15.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="817.2" y="734.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.64%)</title><rect x="821.7" y="707.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="824.7" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.64%)</title><rect x="821.7" y="691.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="824.7" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.91%)</title><rect x="829.2" y="723.0" width="22.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="832.2" y="734.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.46%)</title><rect x="851.8" y="723.0" width="52.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="854.8" y="734.0">Phase..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.64%)</title><rect x="851.8" y="707.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="854.8" y="718.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.64%)</title><rect x="851.8" y="691.0" width="7.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="854.8" y="702.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.64%)</title><rect x="859.3" y="707.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.3" y="718.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.64%)</title><rect x="859.3" y="691.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.3" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.55%)</title><rect x="866.8" y="707.0" width="30.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.8" y="718.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.27%)</title><rect x="881.8" y="691.0" width="15.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="884.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.64%)</title><rect x="896.9" y="707.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="899.9" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.64%)</title><rect x="896.9" y="691.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="899.9" y="702.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.64%)</title><rect x="896.9" y="675.0" width="7.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="899.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.64%)</title><rect x="904.4" y="723.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="907.4" y="734.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.64%)</title><rect x="904.4" y="707.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="907.4" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.55%)</title><rect x="911.9" y="723.0" width="30.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="914.9" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.91%)</title><rect x="919.4" y="707.0" width="22.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="922.4" y="718.0">P..</text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.64%)</title><rect x="942.0" y="723.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="945.0" y="734.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 12.10%)</title><rect x="949.5" y="755.0" width="142.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="952.5" y="766.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (7 samples, 4.46%)</title><rect x="949.5" y="739.0" width="52.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="952.5" y="750.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (7 samples, 4.46%)</title><rect x="949.5" y="723.0" width="52.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="952.5" y="734.0">Phase..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.64%)</title><rect x="949.5" y="707.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="952.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.64%)</title><rect x="949.5" y="691.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="952.5" y="702.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.64%)</title><rect x="949.5" y="675.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="952.5" y="686.0"></text>
</g>
<g>
<title>Node_Stack::grow() (1 samples, 0.64%)</title><rect x="949.5" y="659.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.5" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.64%)</title><rect x="949.5" y="643.0" width="7.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="952.5" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.64%)</title><rect x="957.0" y="707.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="960.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 1.27%)</title><rect x="964.5" y="707.0" width="15.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="967.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.27%)</title><rect x="964.5" y="691.0" width="15.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.27%)</title><rect x="964.5" y="675.0" width="15.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="967.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 1.27%)</title><rect x="964.5" y="659.0" width="15.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="967.5" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 1.91%)</title><rect x="979.6" y="707.0" width="22.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="982.6" y="718.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.64%)</title><rect x="979.6" y="691.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="982.6" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.27%)</title><rect x="987.1" y="691.0" width="15.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="990.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 1.27%)</title><rect x="987.1" y="675.0" width="15.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 1.27%)</title><rect x="987.1" y="659.0" width="15.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.64%)</title><rect x="1002.1" y="739.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.64%)</title><rect x="1002.1" y="723.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="707.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="691.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="675.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="659.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1005.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="643.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="627.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="611.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="595.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="579.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="563.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1005.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="547.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1005.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="531.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1005.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="515.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="499.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="483.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="467.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="451.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1005.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="435.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1005.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="419.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1005.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="403.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="387.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1005.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="371.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1005.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="355.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1005.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="339.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1005.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="323.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1005.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="307.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="291.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.64%)</title><rect x="1002.1" y="275.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1005.1" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 3.18%)</title><rect x="1009.6" y="739.0" width="37.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1012.6" y="750.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.64%)</title><rect x="1009.6" y="723.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.6" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.55%)</title><rect x="1017.1" y="723.0" width="30.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.1" y="734.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (4 samples, 2.55%)</title><rect x="1017.1" y="707.0" width="30.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.1" y="718.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 2.55%)</title><rect x="1017.1" y="691.0" width="30.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1020.1" y="702.0">Ph..</text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.64%)</title><rect x="1017.1" y="675.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.1" y="686.0"></text>
</g>
<g>
<title>TypeAryPtr::add_offset(long) const (1 samples, 0.64%)</title><rect x="1017.1" y="659.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.1" y="670.0"></text>
</g>
<g>
<title>TypeAryPtr::make(TypePtr::PTR, ciObject*, TypeAry const*, ciKlass*, bool, int, int, TypePtr const*, int, bool) (1 samples, 0.64%)</title><rect x="1017.1" y="643.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1020.1" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 1.91%)</title><rect x="1024.6" y="675.0" width="22.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1027.6" y="686.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 3.18%)</title><rect x="1047.2" y="739.0" width="37.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1050.2" y="750.0">Pha..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 3.18%)</title><rect x="1047.2" y="723.0" width="37.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1050.2" y="734.0">Pha..</text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1054.7" y="707.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1057.7" y="718.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.64%)</title><rect x="1054.7" y="691.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1057.7" y="702.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.64%)</title><rect x="1062.2" y="707.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1065.2" y="718.0"></text>
</g>
<g>
<title>Type::filter_helper(Type const*, bool) const (1 samples, 0.64%)</title><rect x="1062.2" y="691.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.2" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.64%)</title><rect x="1062.2" y="675.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1065.2" y="686.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 1.27%)</title><rect x="1069.7" y="707.0" width="15.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1072.7" y="718.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.64%)</title><rect x="1069.7" y="691.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.7" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1069.7" y="675.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1072.7" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.64%)</title><rect x="1069.7" y="659.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1072.7" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.64%)</title><rect x="1069.7" y="643.0" width="7.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.7" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.64%)</title><rect x="1069.7" y="627.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.7" y="638.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1077.3" y="691.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1080.3" y="702.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.64%)</title><rect x="1077.3" y="675.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.3" y="686.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.64%)</title><rect x="1077.3" y="659.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.3" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.64%)</title><rect x="1084.8" y="739.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1087.8" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.64%)</title><rect x="1084.8" y="723.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1087.8" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.64%)</title><rect x="1084.8" y="707.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1087.8" y="718.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1084.8" y="691.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1087.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.64%)</title><rect x="1084.8" y="675.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1087.8" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 7.01%)</title><rect x="1092.3" y="755.0" width="82.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1095.3" y="766.0">ParseGene..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 7.01%)</title><rect x="1092.3" y="739.0" width="82.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.3" y="750.0">Parse::Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 7.01%)</title><rect x="1092.3" y="723.0" width="82.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.3" y="734.0">Parse::do..</text>
</g>
<g>
<title>GraphKit::add_empty_predicates(int) (1 samples, 0.64%)</title><rect x="1092.3" y="707.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.3" y="718.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.191] (1 samples, 0.64%)</title><rect x="1092.3" y="691.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.3" y="702.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.64%)</title><rect x="1092.3" y="675.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.3" y="686.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.64%)</title><rect x="1092.3" y="659.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1095.3" y="670.0"></text>
</g>
<g>
<title>ReplacedNodes::clone() (1 samples, 0.64%)</title><rect x="1092.3" y="643.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.3" y="654.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.64%)</title><rect x="1092.3" y="627.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_block() (9 samples, 5.73%)</title><rect x="1099.8" y="707.0" width="67.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.8" y="718.0">Parse::..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 5.73%)</title><rect x="1099.8" y="691.0" width="67.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1102.8" y="702.0">Parse::..</text>
</g>
<g>
<title>Parse::do_call() (9 samples, 5.73%)</title><rect x="1099.8" y="675.0" width="67.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.8" y="686.0">Parse::..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1099.8" y="659.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.8" y="670.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.64%)</title><rect x="1099.8" y="643.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.8" y="654.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.64%)</title><rect x="1099.8" y="627.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1102.8" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.64%)</title><rect x="1099.8" y="611.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.8" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.64%)</title><rect x="1099.8" y="595.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.8" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1099.8" y="579.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.8" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.64%)</title><rect x="1099.8" y="563.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1102.8" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.64%)</title><rect x="1099.8" y="547.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.8" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.64%)</title><rect x="1099.8" y="531.0" width="7.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1102.8" y="542.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.64%)</title><rect x="1099.8" y="515.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.8" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.64%)</title><rect x="1099.8" y="499.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1102.8" y="510.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.64%)</title><rect x="1099.8" y="483.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1102.8" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.64%)</title><rect x="1099.8" y="467.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.8" y="478.0"></text>
</g>
<g>
<title>Symbol::as_C_string() const (1 samples, 0.64%)</title><rect x="1099.8" y="451.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.8" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.46%)</title><rect x="1107.3" y="659.0" width="52.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.3" y="670.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.46%)</title><rect x="1107.3" y="643.0" width="52.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.3" y="654.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.46%)</title><rect x="1107.3" y="627.0" width="52.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.3" y="638.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.46%)</title><rect x="1107.3" y="611.0" width="52.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.3" y="622.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 4.46%)</title><rect x="1107.3" y="595.0" width="52.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.3" y="606.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 4.46%)</title><rect x="1107.3" y="579.0" width="52.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.3" y="590.0">Parse..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 3.18%)</title><rect x="1107.3" y="563.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.3" y="574.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 3.18%)</title><rect x="1107.3" y="547.0" width="37.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.3" y="558.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 3.18%)</title><rect x="1107.3" y="531.0" width="37.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.3" y="542.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 3.18%)</title><rect x="1107.3" y="515.0" width="37.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.3" y="526.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 3.18%)</title><rect x="1107.3" y="499.0" width="37.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1110.3" y="510.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 3.18%)</title><rect x="1107.3" y="483.0" width="37.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.3" y="494.0">Par..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.91%)</title><rect x="1107.3" y="467.0" width="22.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.3" y="478.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.91%)</title><rect x="1107.3" y="451.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="462.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.91%)</title><rect x="1107.3" y="435.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="446.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.91%)</title><rect x="1107.3" y="419.0" width="22.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1110.3" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.91%)</title><rect x="1107.3" y="403.0" width="22.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.3" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.27%)</title><rect x="1107.3" y="387.0" width="15.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.3" y="398.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1107.3" y="371.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.3" y="382.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1114.8" y="371.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.8" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1114.8" y="355.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.8" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1114.8" y="339.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1114.8" y="323.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.8" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1114.8" y="307.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1117.8" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1114.8" y="291.0" width="7.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1114.8" y="275.0" width="7.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1117.8" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform(Node*) (1 samples, 0.64%)</title><rect x="1114.8" y="259.0" width="7.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1117.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.64%)</title><rect x="1122.4" y="387.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.64%)</title><rect x="1122.4" y="371.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.4" y="382.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.64%)</title><rect x="1122.4" y="355.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.4" y="366.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.64%)</title><rect x="1122.4" y="339.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.4" y="350.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.64%)</title><rect x="1122.4" y="323.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.4" y="334.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.64%)</title><rect x="1122.4" y="307.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.4" y="318.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.64%)</title><rect x="1122.4" y="291.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.4" y="302.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1122.4" y="275.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.4" y="286.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.64%)</title><rect x="1122.4" y="259.0" width="7.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.4" y="270.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.64%)</title><rect x="1122.4" y="243.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.4" y="254.0"></text>
</g>
<g>
<title>MemBarAcquireNode::Opcode() const (1 samples, 0.64%)</title><rect x="1122.4" y="227.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.4" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1129.9" y="467.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1129.9" y="451.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1129.9" y="435.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1129.9" y="419.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1129.9" y="403.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1132.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1129.9" y="387.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1129.9" y="371.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1129.9" y="355.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1132.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1129.9" y="339.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1129.9" y="323.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1129.9" y="307.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1129.9" y="291.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1132.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1129.9" y="275.0" width="7.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1129.9" y="259.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1132.9" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1129.9" y="243.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1132.9" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1129.9" y="227.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1129.9" y="211.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1129.9" y="195.0" width="7.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1132.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1129.9" y="179.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.9" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1129.9" y="163.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.9" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1129.9" y="147.0" width="7.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1132.9" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1129.9" y="131.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.9" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1129.9" y="115.0" width="7.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1132.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1129.9" y="99.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.64%)</title><rect x="1129.9" y="83.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1132.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.64%)</title><rect x="1129.9" y="67.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1132.9" y="78.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.64%)</title><rect x="1129.9" y="51.0" width="7.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1132.9" y="62.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.64%)</title><rect x="1129.9" y="35.0" width="7.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1132.9" y="46.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.64%)</title><rect x="1137.4" y="467.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.4" y="478.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.64%)</title><rect x="1137.4" y="451.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.4" y="462.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.64%)</title><rect x="1137.4" y="435.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.4" y="446.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::is_witness(Klass*) (1 samples, 0.64%)</title><rect x="1137.4" y="419.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.4" y="430.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.64%)</title><rect x="1137.4" y="403.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.4" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.64%)</title><rect x="1137.4" y="387.0" width="7.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.4" y="398.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1144.9" y="563.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1144.9" y="547.0" width="15.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.27%)</title><rect x="1144.9" y="531.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.27%)</title><rect x="1144.9" y="515.0" width="15.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.27%)</title><rect x="1144.9" y="499.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.27%)</title><rect x="1144.9" y="483.0" width="15.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.27%)</title><rect x="1144.9" y="467.0" width="15.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.9" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.27%)</title><rect x="1144.9" y="451.0" width="15.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.9" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.27%)</title><rect x="1144.9" y="435.0" width="15.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.27%)</title><rect x="1144.9" y="419.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.27%)</title><rect x="1144.9" y="403.0" width="15.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1147.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.27%)</title><rect x="1144.9" y="387.0" width="15.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1147.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.27%)</title><rect x="1144.9" y="371.0" width="15.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1147.9" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1144.9" y="355.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.9" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1144.9" y="339.0" width="7.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1147.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1144.9" y="323.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1144.9" y="307.0" width="7.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1144.9" y="291.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1147.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.64%)</title><rect x="1144.9" y="275.0" width="7.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.9" y="286.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.64%)</title><rect x="1144.9" y="259.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1147.9" y="270.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.64%)</title><rect x="1144.9" y="243.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.9" y="254.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.64%)</title><rect x="1144.9" y="227.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.9" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1144.9" y="211.0" width="7.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1147.9" y="222.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.64%)</title><rect x="1144.9" y="195.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.9" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1152.4" y="355.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1152.4" y="339.0" width="7.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1152.4" y="323.0" width="7.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1152.4" y="307.0" width="7.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1152.4" y="291.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1152.4" y="275.0" width="7.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1155.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.64%)</title><rect x="1152.4" y="259.0" width="7.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1155.4" y="270.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.64%)</title><rect x="1152.4" y="243.0" width="7.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1155.4" y="254.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.64%)</title><rect x="1152.4" y="227.0" width="7.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1155.4" y="238.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.64%)</title><rect x="1152.4" y="211.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1155.4" y="222.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.64%)</title><rect x="1152.4" y="195.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.4" y="206.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1159.9" y="659.0" width="7.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.9" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1159.9" y="643.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1159.9" y="627.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1159.9" y="611.0" width="7.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.9" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1159.9" y="595.0" width="7.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1162.9" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1159.9" y="579.0" width="7.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1159.9" y="563.0" width="7.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.9" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.64%)</title><rect x="1159.9" y="547.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.64%)</title><rect x="1159.9" y="531.0" width="7.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.64%)</title><rect x="1159.9" y="515.0" width="7.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1162.9" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.64%)</title><rect x="1159.9" y="499.0" width="7.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.64%)</title><rect x="1159.9" y="483.0" width="7.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.64%)</title><rect x="1159.9" y="467.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="478.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.64%)</title><rect x="1159.9" y="451.0" width="7.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1162.9" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.64%)</title><rect x="1159.9" y="435.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.64%)</title><rect x="1159.9" y="419.0" width="7.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.9" y="430.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.64%)</title><rect x="1159.9" y="403.0" width="7.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1162.9" y="414.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.64%)</title><rect x="1159.9" y="387.0" width="7.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.9" y="398.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.64%)</title><rect x="1159.9" y="371.0" width="7.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1162.9" y="382.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.64%)</title><rect x="1159.9" y="355.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.9" y="366.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.64%)</title><rect x="1167.5" y="707.0" width="7.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.5" y="718.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.64%)</title><rect x="1167.5" y="691.0" width="7.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1170.5" y="702.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.64%)</title><rect x="1167.5" y="675.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.5" y="686.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 1.27%)</title><rect x="1175.0" y="787.0" width="15.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 1.27%)</title><rect x="1175.0" y="771.0" width="15.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.27%)</title><rect x="1175.0" y="755.0" width="15.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="766.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.27%)</title><rect x="1175.0" y="739.0" width="15.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="750.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.27%)</title><rect x="1175.0" y="723.0" width="15.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.0" y="734.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.27%)</title><rect x="1175.0" y="707.0" width="15.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="718.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.64%)</title><rect x="1175.0" y="691.0" width="7.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="702.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.64%)</title><rect x="1175.0" y="675.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.0" y="686.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.64%)</title><rect x="1175.0" y="659.0" width="7.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="670.0"></text>
</g>
<g>
<title>LinearScanWalker::split_for_spilling(Interval*) (1 samples, 0.64%)</title><rect x="1175.0" y="643.0" width="7.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.0" y="654.0"></text>
</g>
<g>
<title>Interval::split_child_before_op_id(int) (1 samples, 0.64%)</title><rect x="1175.0" y="627.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.0" y="638.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.64%)</title><rect x="1182.5" y="691.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="702.0"></text>
</g>
</g>
</svg>
