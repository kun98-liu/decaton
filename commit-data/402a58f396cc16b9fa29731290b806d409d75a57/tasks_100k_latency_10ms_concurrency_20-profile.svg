<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (184 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 8.70%)</title><rect x="10.0" y="931.0" width="102.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 8.70%)</title><rect x="10.0" y="915.0" width="102.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="926.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.54%)</title><rect x="10.0" y="899.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.54%)</title><rect x="10.0" y="883.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.54%)</title><rect x="10.0" y="867.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.54%)</title><rect x="10.0" y="851.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.54%)</title><rect x="10.0" y="835.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.54%)</title><rect x="10.0" y="819.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="10.0" y="803.0" width="6.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.54%)</title><rect x="10.0" y="787.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.54%)</title><rect x="10.0" y="771.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.54%)</title><rect x="10.0" y="755.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.54%)</title><rect x="10.0" y="739.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.54%)</title><rect x="10.0" y="723.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.54%)</title><rect x="10.0" y="707.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.54%)</title><rect x="10.0" y="691.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.54%)</title><rect x="10.0" y="675.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.54%)</title><rect x="10.0" y="659.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 8.15%)</title><rect x="16.4" y="899.0" width="96.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.4" y="910.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.54%)</title><rect x="16.4" y="883.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsPaused (1 samples, 0.54%)</title><rect x="16.4" y="867.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.4" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.63%)</title><rect x="22.8" y="883.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1217038096.accept (3 samples, 1.63%)</title><rect x="22.8" y="867.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.63%)</title><rect x="22.8" y="851.0" width="19.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.54%)</title><rect x="22.8" y="835.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.8" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.54%)</title><rect x="22.8" y="819.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.54%)</title><rect x="22.8" y="803.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.54%)</title><rect x="22.8" y="787.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.54%)</title><rect x="22.8" y="771.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.54%)</title><rect x="22.8" y="755.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.54%)</title><rect x="29.2" y="835.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.2" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.54%)</title><rect x="29.2" y="819.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.54%)</title><rect x="35.7" y="835.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="38.7" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.54%)</title><rect x="35.7" y="819.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="38.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.54%)</title><rect x="35.7" y="803.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.98%)</title><rect x="42.1" y="883.0" width="70.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.1" y="894.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (11 samples, 5.98%)</title><rect x="42.1" y="867.0" width="70.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="45.1" y="878.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.35%)</title><rect x="42.1" y="851.0" width="51.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="45.1" y="862.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.54%)</title><rect x="42.1" y="835.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.54%)</title><rect x="42.1" y="819.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="45.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.54%)</title><rect x="42.1" y="803.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="45.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.update (1 samples, 0.54%)</title><rect x="42.1" y="787.0" width="6.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.09%)</title><rect x="48.5" y="835.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="51.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.09%)</title><rect x="48.5" y="819.0" width="12.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="48.5" y="803.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="51.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.54%)</title><rect x="48.5" y="787.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="51.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.54%)</title><rect x="48.5" y="771.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.54%)</title><rect x="48.5" y="755.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="51.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.failExpiredRequests (1 samples, 0.54%)</title><rect x="54.9" y="803.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.access$300 (1 samples, 0.54%)</title><rect x="54.9" y="787.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.removeExpiredRequests (1 samples, 0.54%)</title><rect x="54.9" y="771.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValuesView.iterator (1 samples, 0.54%)</title><rect x="54.9" y="755.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="57.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ValueIterator.&lt;init&gt; (1 samples, 0.54%)</title><rect x="54.9" y="739.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$BaseIterator.&lt;init&gt; (1 samples, 0.54%)</title><rect x="54.9" y="723.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Traverser.advance (1 samples, 0.54%)</title><rect x="54.9" y="707.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (4 samples, 2.17%)</title><rect x="61.3" y="835.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (4 samples, 2.17%)</title><rect x="61.3" y="819.0" width="25.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.3" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (4 samples, 2.17%)</title><rect x="61.3" y="803.0" width="25.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.3" y="814.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (4 samples, 2.17%)</title><rect x="61.3" y="787.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="64.3" y="798.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (3 samples, 1.63%)</title><rect x="61.3" y="771.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (2 samples, 1.09%)</title><rect x="67.7" y="755.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="70.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (2 samples, 1.09%)</title><rect x="67.7" y="739.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (2 samples, 1.09%)</title><rect x="67.7" y="723.0" width="12.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="70.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (2 samples, 1.09%)</title><rect x="67.7" y="707.0" width="12.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="70.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (2 samples, 1.09%)</title><rect x="67.7" y="691.0" width="12.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="70.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (2 samples, 1.09%)</title><rect x="67.7" y="675.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="70.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (2 samples, 1.09%)</title><rect x="67.7" y="659.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (1 samples, 0.54%)</title><rect x="80.5" y="771.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.54%)</title><rect x="80.5" y="755.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.54%)</title><rect x="80.5" y="739.0" width="6.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="83.5" y="750.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.54%)</title><rect x="80.5" y="723.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.54%)</title><rect x="87.0" y="835.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.54%)</title><rect x="87.0" y="819.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="90.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.54%)</title><rect x="93.4" y="851.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.54%)</title><rect x="93.4" y="835.0" width="6.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="96.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.54%)</title><rect x="93.4" y="819.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="96.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.54%)</title><rect x="93.4" y="803.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="96.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/153051762.accept (1 samples, 0.54%)</title><rect x="93.4" y="787.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.54%)</title><rect x="93.4" y="771.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="96.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (1 samples, 0.54%)</title><rect x="93.4" y="755.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="96.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (1 samples, 0.54%)</title><rect x="93.4" y="739.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="96.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (1 samples, 0.54%)</title><rect x="93.4" y="723.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.54%)</title><rect x="99.8" y="851.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.8" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.54%)</title><rect x="99.8" y="835.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.54%)</title><rect x="99.8" y="819.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.54%)</title><rect x="99.8" y="803.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.54%)</title><rect x="99.8" y="787.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.send (1 samples, 0.54%)</title><rect x="99.8" y="771.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.54%)</title><rect x="99.8" y="755.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.54%)</title><rect x="99.8" y="739.0" width="6.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="102.8" y="750.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.54%)</title><rect x="99.8" y="723.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.8" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.54%)</title><rect x="99.8" y="707.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="102.8" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.54%)</title><rect x="99.8" y="691.0" width="6.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="102.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.54%)</title><rect x="106.2" y="851.0" width="6.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.54%)</title><rect x="106.2" y="835.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="109.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.54%)</title><rect x="106.2" y="819.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="109.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$PartitionData.equals (1 samples, 0.54%)</title><rect x="106.2" y="803.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="109.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (120 samples, 65.22%)</title><rect x="112.6" y="931.0" width="769.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="115.6" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (120 samples, 65.22%)</title><rect x="112.6" y="915.0" width="769.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.6" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (120 samples, 65.22%)</title><rect x="112.6" y="899.0" width="769.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.6" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/78234929.run (118 samples, 64.13%)</title><rect x="112.6" y="883.0" width="756.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="115.6" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/78234929.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (118 samples, 64.13%)</title><rect x="112.6" y="867.0" width="756.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.6" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (118 samples, 64.13%)</title><rect x="112.6" y="851.0" width="756.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="115.6" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (118 samples, 64.13%)</title><rect x="112.6" y="835.0" width="756.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="115.6" y="846.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 1.09%)</title><rect x="125.4" y="819.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.4" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 1.09%)</title><rect x="125.4" y="803.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="128.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.09%)</title><rect x="125.4" y="787.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="128.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 1.09%)</title><rect x="125.4" y="771.0" width="12.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="128.4" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="131.8" y="755.0" width="6.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="134.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="131.8" y="739.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="134.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (8 samples, 4.35%)</title><rect x="138.3" y="819.0" width="51.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="141.3" y="830.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.09%)</title><rect x="176.7" y="803.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.09%)</title><rect x="176.7" y="787.0" width="12.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.09%)</title><rect x="176.7" y="771.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.09%)</title><rect x="176.7" y="755.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="179.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/1248593003.accept (2 samples, 1.09%)</title><rect x="176.7" y="739.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (2 samples, 1.09%)</title><rect x="176.7" y="723.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.09%)</title><rect x="176.7" y="707.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.09%)</title><rect x="176.7" y="691.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.09%)</title><rect x="176.7" y="675.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.09%)</title><rect x="176.7" y="659.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (23 samples, 12.50%)</title><rect x="189.6" y="819.0" width="147.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="192.6" y="830.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (23 samples, 12.50%)</title><rect x="189.6" y="803.0" width="147.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.6" y="814.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (23 samples, 12.50%)</title><rect x="189.6" y="787.0" width="147.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="192.6" y="798.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (23 samples, 12.50%)</title><rect x="189.6" y="771.0" width="147.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="192.6" y="782.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (23 samples, 12.50%)</title><rect x="189.6" y="755.0" width="147.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="192.6" y="766.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (23 samples, 12.50%)</title><rect x="189.6" y="739.0" width="147.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="192.6" y="750.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (10 samples, 5.43%)</title><rect x="189.6" y="723.0" width="64.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.6" y="734.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 2.17%)</title><rect x="202.4" y="707.0" width="25.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="205.4" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 1.63%)</title><rect x="208.8" y="691.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="211.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 1.63%)</title><rect x="208.8" y="675.0" width="19.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="211.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.63%)</title><rect x="208.8" y="659.0" width="19.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="211.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 1.63%)</title><rect x="208.8" y="643.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="211.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 1.63%)</title><rect x="208.8" y="627.0" width="19.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 1.63%)</title><rect x="208.8" y="611.0" width="19.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="211.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (4 samples, 2.17%)</title><rect x="228.0" y="707.0" width="25.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.54%)</title><rect x="247.3" y="691.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.3" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="247.3" y="675.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="250.3" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.54%)</title><rect x="247.3" y="659.0" width="6.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="250.3" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.54%)</title><rect x="247.3" y="643.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="250.3" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.54%)</title><rect x="247.3" y="627.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="250.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 7.07%)</title><rect x="253.7" y="723.0" width="83.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.7" y="734.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.54%)</title><rect x="253.7" y="707.0" width="6.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="256.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.54%)</title><rect x="253.7" y="691.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="256.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (3 samples, 1.63%)</title><rect x="260.1" y="707.0" width="19.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="263.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.63%)</title><rect x="260.1" y="691.0" width="19.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 1.09%)</title><rect x="266.5" y="675.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="269.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.54%)</title><rect x="272.9" y="659.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.9" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.54%)</title><rect x="272.9" y="643.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 1.09%)</title><rect x="279.3" y="707.0" width="12.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="282.3" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 1.09%)</title><rect x="279.3" y="691.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="282.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (7 samples, 3.80%)</title><rect x="292.2" y="707.0" width="44.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.2" y="718.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.54%)</title><rect x="292.2" y="691.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.2" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.26%)</title><rect x="298.6" y="691.0" width="38.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.6" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (6 samples, 3.26%)</title><rect x="298.6" y="675.0" width="38.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (6 samples, 3.26%)</title><rect x="298.6" y="659.0" width="38.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (6 samples, 3.26%)</title><rect x="298.6" y="643.0" width="38.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.6" y="654.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.09%)</title><rect x="305.0" y="627.0" width="12.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.54%)</title><rect x="311.4" y="611.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.54%)</title><rect x="311.4" y="595.0" width="6.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="314.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.54%)</title><rect x="311.4" y="579.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="314.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.54%)</title><rect x="311.4" y="563.0" width="6.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="314.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.54%)</title><rect x="317.8" y="627.0" width="6.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.54%)</title><rect x="317.8" y="611.0" width="6.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.54%)</title><rect x="317.8" y="595.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.54%)</title><rect x="317.8" y="579.0" width="6.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="320.8" y="590.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.54%)</title><rect x="317.8" y="563.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="320.8" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 1.09%)</title><rect x="324.2" y="627.0" width="12.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 1.09%)</title><rect x="324.2" y="611.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="327.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 1.09%)</title><rect x="324.2" y="595.0" width="12.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="327.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 1.09%)</title><rect x="324.2" y="579.0" width="12.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.2" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 1.09%)</title><rect x="324.2" y="563.0" width="12.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="327.2" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (82 samples, 44.57%)</title><rect x="337.1" y="819.0" width="525.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="340.1" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (8 samples, 4.35%)</title><rect x="356.3" y="803.0" width="51.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="359.3" y="814.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (8 samples, 4.35%)</title><rect x="356.3" y="787.0" width="51.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="359.3" y="798.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (7 samples, 3.80%)</title><rect x="362.7" y="771.0" width="44.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.7" y="782.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 1.09%)</title><rect x="362.7" y="755.0" width="12.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="365.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.09%)</title><rect x="362.7" y="739.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 1.09%)</title><rect x="362.7" y="723.0" width="12.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.09%)</title><rect x="362.7" y="707.0" width="12.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="365.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.54%)</title><rect x="375.5" y="755.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="378.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.54%)</title><rect x="375.5" y="739.0" width="6.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="378.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.54%)</title><rect x="375.5" y="723.0" width="6.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="378.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.54%)</title><rect x="375.5" y="707.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="378.5" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (4 samples, 2.17%)</title><rect x="382.0" y="755.0" width="25.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="385.0" y="766.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 2.17%)</title><rect x="382.0" y="739.0" width="25.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="385.0" y="750.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.09%)</title><rect x="394.8" y="723.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 1.09%)</title><rect x="407.6" y="803.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="410.6" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 1.09%)</title><rect x="407.6" y="787.0" width="12.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="410.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (14 samples, 7.61%)</title><rect x="420.4" y="803.0" width="89.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.4" y="814.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 5.98%)</title><rect x="420.4" y="787.0" width="70.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="423.4" y="798.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (6 samples, 3.26%)</title><rect x="426.8" y="771.0" width="38.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.8" y="782.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.63%)</title><rect x="426.8" y="755.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="429.8" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.63%)</title><rect x="426.8" y="739.0" width="19.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="429.8" y="750.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.54%)</title><rect x="426.8" y="723.0" width="6.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="429.8" y="734.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.54%)</title><rect x="426.8" y="707.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="429.8" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.54%)</title><rect x="426.8" y="691.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="429.8" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.54%)</title><rect x="426.8" y="675.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="429.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.54%)</title><rect x="426.8" y="659.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="429.8" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.54%)</title><rect x="426.8" y="643.0" width="6.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="429.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 1.09%)</title><rect x="433.3" y="723.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="436.3" y="734.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 1.63%)</title><rect x="446.1" y="755.0" width="19.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="449.1" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.54%)</title><rect x="465.3" y="771.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="468.3" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.63%)</title><rect x="471.7" y="771.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="474.7" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.63%)</title><rect x="471.7" y="755.0" width="19.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.7" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.54%)</title><rect x="471.7" y="739.0" width="6.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="474.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.54%)</title><rect x="471.7" y="723.0" width="6.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="474.7" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.54%)</title><rect x="471.7" y="707.0" width="6.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="474.7" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.54%)</title><rect x="471.7" y="691.0" width="6.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="474.7" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.09%)</title><rect x="478.2" y="739.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.54%)</title><rect x="484.6" y="723.0" width="6.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="487.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 1.63%)</title><rect x="491.0" y="787.0" width="19.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.0" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.63%)</title><rect x="491.0" y="771.0" width="19.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="494.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.63%)</title><rect x="491.0" y="755.0" width="19.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="494.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 1.09%)</title><rect x="491.0" y="739.0" width="12.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="494.0" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="497.4" y="723.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="500.4" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="497.4" y="707.0" width="6.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="500.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.54%)</title><rect x="503.8" y="739.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="506.8" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (50 samples, 27.17%)</title><rect x="510.2" y="803.0" width="320.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="513.2" y="814.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (50 samples, 27.17%)</title><rect x="510.2" y="787.0" width="320.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="513.2" y="798.0">com/linecorp/decaton/processor/runtime/inte..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/1678716486.process (42 samples, 22.83%)</title><rect x="516.6" y="771.0" width="269.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="519.6" y="782.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (42 samples, 22.83%)</title><rect x="516.6" y="755.0" width="269.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="519.6" y="766.0">com/linecorp/decaton/benchmark/Decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (40 samples, 21.74%)</title><rect x="516.6" y="739.0" width="256.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="519.6" y="750.0">com/linecorp/decaton/benchmark/Rec..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 1.09%)</title><rect x="516.6" y="723.0" width="12.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.6" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 1.09%)</title><rect x="516.6" y="707.0" width="12.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="519.6" y="718.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.09%)</title><rect x="516.6" y="691.0" width="12.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="519.6" y="702.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.09%)</title><rect x="516.6" y="675.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="519.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 1.09%)</title><rect x="516.6" y="659.0" width="12.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (2 samples, 1.09%)</title><rect x="516.6" y="643.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="519.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (38 samples, 20.65%)</title><rect x="529.5" y="723.0" width="243.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="532.5" y="734.0">com/linecorp/decaton/benchmark/R..</text>
</g>
<g>
<title>java/lang/Thread.sleep (38 samples, 20.65%)</title><rect x="529.5" y="707.0" width="243.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="532.5" y="718.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (32 samples, 17.39%)</title><rect x="567.9" y="691.0" width="205.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="570.9" y="702.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.54%)</title><rect x="580.8" y="675.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="583.8" y="686.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="587.2" y="675.0" width="6.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="590.2" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.09%)</title><rect x="593.6" y="675.0" width="12.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="596.6" y="686.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.09%)</title><rect x="593.6" y="659.0" width="12.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="596.6" y="670.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (26 samples, 14.13%)</title><rect x="606.4" y="675.0" width="166.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="609.4" y="686.0">os::sleep(Thread*, lo..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.54%)</title><rect x="625.7" y="659.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="628.7" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.54%)</title><rect x="625.7" y="643.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="628.7" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (3 samples, 1.63%)</title><rect x="632.1" y="659.0" width="19.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="635.1" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 5.98%)</title><rect x="651.3" y="659.0" width="70.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="654.3" y="670.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 2.17%)</title><rect x="721.8" y="659.0" width="25.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="724.8" y="670.0">_..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.54%)</title><rect x="747.5" y="659.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.5" y="670.0"></text>
</g>
<g>
<title>pthread_cond_destroy@@GLIBC_2.3.2 (1 samples, 0.54%)</title><rect x="753.9" y="659.0" width="6.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="756.9" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.54%)</title><rect x="760.3" y="659.0" width="6.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="763.3" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.54%)</title><rect x="766.7" y="659.0" width="6.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="769.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.09%)</title><rect x="773.2" y="739.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.09%)</title><rect x="773.2" y="723.0" width="12.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="776.2" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.09%)</title><rect x="773.2" y="707.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.09%)</title><rect x="773.2" y="691.0" width="12.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="776.2" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 1.09%)</title><rect x="773.2" y="675.0" width="12.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="776.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.54%)</title><rect x="786.0" y="771.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="789.0" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.54%)</title><rect x="786.0" y="755.0" width="6.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="789.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/427663577.get$Lambda (1 samples, 0.54%)</title><rect x="786.0" y="739.0" width="6.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="789.0" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.09%)</title><rect x="792.4" y="771.0" width="12.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="795.4" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 1.09%)</title><rect x="792.4" y="755.0" width="12.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="795.4" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.54%)</title><rect x="792.4" y="739.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="795.4" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.54%)</title><rect x="798.8" y="739.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="801.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.17%)</title><rect x="805.2" y="771.0" width="25.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.2" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.63%)</title><rect x="811.6" y="755.0" width="19.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.63%)</title><rect x="811.6" y="739.0" width="19.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.63%)</title><rect x="811.6" y="723.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 1.63%)</title><rect x="811.6" y="707.0" width="19.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="814.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 1.63%)</title><rect x="811.6" y="691.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="814.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$298/427663577.accept (1 samples, 0.54%)</title><rect x="824.5" y="675.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="827.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.17%)</title><rect x="830.9" y="803.0" width="25.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.9" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.17%)</title><rect x="830.9" y="787.0" width="25.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="833.9" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.17%)</title><rect x="830.9" y="771.0" width="25.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.9" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.54%)</title><rect x="830.9" y="755.0" width="6.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="833.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.54%)</title><rect x="830.9" y="739.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="833.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.54%)</title><rect x="830.9" y="723.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="833.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.63%)</title><rect x="837.3" y="755.0" width="19.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="840.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/12330941.accept (2 samples, 1.09%)</title><rect x="843.7" y="739.0" width="12.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.7" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.54%)</title><rect x="843.7" y="723.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="846.7" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (1 samples, 0.54%)</title><rect x="850.1" y="723.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.54%)</title><rect x="850.1" y="707.0" width="6.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.1" y="718.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.54%)</title><rect x="850.1" y="691.0" width="6.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.1" y="702.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.54%)</title><rect x="850.1" y="675.0" width="6.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="853.1" y="686.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.54%)</title><rect x="850.1" y="659.0" width="6.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="853.1" y="670.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="850.1" y="643.0" width="6.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="853.1" y="654.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.54%)</title><rect x="856.5" y="803.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="859.5" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.54%)</title><rect x="862.9" y="819.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.9" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.54%)</title><rect x="862.9" y="803.0" width="6.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="865.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 1.09%)</title><rect x="869.3" y="883.0" width="12.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="872.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 1.09%)</title><rect x="869.3" y="867.0" width="12.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="872.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.54%)</title><rect x="869.3" y="851.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.54%)</title><rect x="869.3" y="835.0" width="6.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="872.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.54%)</title><rect x="875.8" y="851.0" width="6.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="878.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.54%)</title><rect x="875.8" y="835.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="878.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (1 samples, 0.54%)</title><rect x="875.8" y="819.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="878.8" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.54%)</title><rect x="882.2" y="931.0" width="6.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="885.2" y="942.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.54%)</title><rect x="882.2" y="915.0" width="6.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="885.2" y="926.0"></text>
</g>
<g>
<title>start_thread (47 samples, 25.54%)</title><rect x="888.6" y="931.0" width="301.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="891.6" y="942.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (47 samples, 25.54%)</title><rect x="888.6" y="915.0" width="301.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="891.6" y="926.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (7 samples, 3.80%)</title><rect x="888.6" y="899.0" width="44.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="891.6" y="910.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (7 samples, 3.80%)</title><rect x="888.6" y="883.0" width="44.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="891.6" y="894.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 3.80%)</title><rect x="888.6" y="867.0" width="44.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="891.6" y="878.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.80%)</title><rect x="888.6" y="851.0" width="44.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="891.6" y="862.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 1.09%)</title><rect x="914.2" y="835.0" width="12.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="917.2" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.54%)</title><rect x="920.7" y="819.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="923.7" y="830.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.54%)</title><rect x="927.1" y="835.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="930.1" y="846.0"></text>
</g>
<g>
<title>JavaThread::run() (40 samples, 21.74%)</title><rect x="933.5" y="899.0" width="256.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="936.5" y="910.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (40 samples, 21.74%)</title><rect x="933.5" y="883.0" width="256.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="936.5" y="894.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (40 samples, 21.74%)</title><rect x="933.5" y="867.0" width="256.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.5" y="878.0">CompileBroker::compiler_thread_loo..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (40 samples, 21.74%)</title><rect x="933.5" y="851.0" width="256.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="936.5" y="862.0">CompileBroker::invoke_compiler_on_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (36 samples, 19.57%)</title><rect x="933.5" y="835.0" width="230.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="936.5" y="846.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (36 samples, 19.57%)</title><rect x="933.5" y="819.0" width="230.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="936.5" y="830.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (21 samples, 11.41%)</title><rect x="933.5" y="803.0" width="134.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="936.5" y="814.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.54%)</title><rect x="933.5" y="787.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="936.5" y="798.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.54%)</title><rect x="933.5" y="771.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="936.5" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.54%)</title><rect x="939.9" y="787.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="942.9" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.54%)</title><rect x="939.9" y="771.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="942.9" y="782.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.54%)</title><rect x="939.9" y="755.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="942.9" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 1.09%)</title><rect x="946.3" y="787.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="949.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.09%)</title><rect x="946.3" y="771.0" width="12.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="949.3" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.54%)</title><rect x="946.3" y="755.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="949.3" y="766.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.54%)</title><rect x="946.3" y="739.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="949.3" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.54%)</title><rect x="952.7" y="755.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="955.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 8.70%)</title><rect x="959.1" y="787.0" width="102.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.1" y="798.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.54%)</title><rect x="965.5" y="771.0" width="6.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="968.5" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.54%)</title><rect x="972.0" y="771.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="975.0" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.54%)</title><rect x="978.4" y="771.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.35%)</title><rect x="984.8" y="771.0" width="51.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="987.8" y="782.0">Phase..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.54%)</title><rect x="997.6" y="755.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1000.6" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.17%)</title><rect x="1004.0" y="755.0" width="25.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.0" y="766.0">P..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.54%)</title><rect x="1023.3" y="739.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.3" y="750.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.54%)</title><rect x="1029.7" y="755.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1032.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.54%)</title><rect x="1036.1" y="771.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1039.1" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.54%)</title><rect x="1042.5" y="771.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="1042.5" y="755.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1045.5" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.54%)</title><rect x="1048.9" y="771.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1051.9" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.54%)</title><rect x="1048.9" y="755.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1051.9" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.54%)</title><rect x="1048.9" y="739.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.9" y="750.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.54%)</title><rect x="1055.3" y="771.0" width="6.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1058.3" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.54%)</title><rect x="1061.7" y="787.0" width="6.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1064.7" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 5.98%)</title><rect x="1068.2" y="803.0" width="70.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1071.2" y="814.0">Compile:..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (9 samples, 4.89%)</title><rect x="1068.2" y="787.0" width="57.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.2" y="798.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 1.63%)</title><rect x="1068.2" y="771.0" width="19.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1071.2" y="782.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.54%)</title><rect x="1081.0" y="755.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1084.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.72%)</title><rect x="1087.4" y="771.0" width="32.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1090.4" y="782.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.72%)</title><rect x="1087.4" y="755.0" width="32.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.4" y="766.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.72%)</title><rect x="1087.4" y="739.0" width="32.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.4" y="750.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.54%)</title><rect x="1119.5" y="771.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.5" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.54%)</title><rect x="1119.5" y="755.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.54%)</title><rect x="1119.5" y="739.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.5" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.09%)</title><rect x="1125.9" y="787.0" width="12.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.9" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.09%)</title><rect x="1125.9" y="771.0" width="12.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1128.9" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.54%)</title><rect x="1125.9" y="755.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1128.9" y="766.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.54%)</title><rect x="1125.9" y="739.0" width="6.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1128.9" y="750.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.54%)</title><rect x="1125.9" y="723.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1128.9" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.54%)</title><rect x="1125.9" y="707.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1128.9" y="718.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.54%)</title><rect x="1132.3" y="755.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.09%)</title><rect x="1138.7" y="803.0" width="12.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.09%)</title><rect x="1138.7" y="787.0" width="12.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.09%)</title><rect x="1138.7" y="771.0" width="12.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.09%)</title><rect x="1138.7" y="755.0" width="12.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.09%)</title><rect x="1138.7" y="739.0" width="12.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.09%)</title><rect x="1138.7" y="723.0" width="12.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1141.7" y="734.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1138.7" y="707.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.7" y="718.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1138.7" y="691.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.7" y="702.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1138.7" y="675.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1138.7" y="659.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.7" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1138.7" y="643.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1141.7" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1138.7" y="627.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.7" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1138.7" y="611.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.7" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1138.7" y="595.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1141.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1138.7" y="579.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.7" y="590.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.54%)</title><rect x="1138.7" y="563.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.7" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.54%)</title><rect x="1138.7" y="547.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.7" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.54%)</title><rect x="1138.7" y="531.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.7" y="542.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.54%)</title><rect x="1138.7" y="515.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.7" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.54%)</title><rect x="1138.7" y="499.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1141.7" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.54%)</title><rect x="1138.7" y="483.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.7" y="494.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.54%)</title><rect x="1138.7" y="467.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.1" y="707.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.1" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.1" y="691.0" width="6.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.1" y="675.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.1" y="659.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.1" y="643.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.1" y="627.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.1" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.1" y="611.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.1" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.1" y="595.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.1" y="579.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.1" y="563.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1148.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.1" y="547.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.1" y="531.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1148.1" y="542.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.1" y="515.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.1" y="499.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.1" y="483.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.1" y="467.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.1" y="451.0" width="6.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.1" y="435.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.1" y="419.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.1" y="403.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.1" y="387.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1148.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.1" y="371.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.1" y="355.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.1" y="339.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1148.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.1" y="323.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.54%)</title><rect x="1145.1" y="307.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.54%)</title><rect x="1145.1" y="291.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.54%)</title><rect x="1145.1" y="275.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.54%)</title><rect x="1145.1" y="259.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.54%)</title><rect x="1145.1" y="243.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.54%)</title><rect x="1145.1" y="227.0" width="6.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.1" y="238.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.54%)</title><rect x="1145.1" y="211.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.1" y="222.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.54%)</title><rect x="1145.1" y="195.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1148.1" y="206.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.54%)</title><rect x="1145.1" y="179.0" width="6.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.1" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.54%)</title><rect x="1145.1" y="163.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.1" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.54%)</title><rect x="1145.1" y="147.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.1" y="158.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1145.1" y="131.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.1" y="142.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.54%)</title><rect x="1145.1" y="115.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.1" y="126.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1145.1" y="99.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1148.1" y="110.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.54%)</title><rect x="1145.1" y="83.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.1" y="94.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.54%)</title><rect x="1145.1" y="67.0" width="6.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1148.1" y="78.0"></text>
</g>
<g>
<title>ciField::will_link(ciInstanceKlass*, Bytecodes::Code) (1 samples, 0.54%)</title><rect x="1145.1" y="51.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="62.0"></text>
</g>
<g>
<title>LinkResolver::check_field_accessability(KlassHandle, KlassHandle, KlassHandle, fieldDescriptor&amp;, Thread*) (1 samples, 0.54%)</title><rect x="1145.1" y="35.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.1" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 1.09%)</title><rect x="1151.5" y="803.0" width="12.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.5" y="814.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (2 samples, 1.09%)</title><rect x="1151.5" y="787.0" width="12.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.5" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (3 samples, 1.63%)</title><rect x="1164.3" y="835.0" width="19.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1167.3" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (3 samples, 1.63%)</title><rect x="1164.3" y="819.0" width="19.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.3" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.63%)</title><rect x="1164.3" y="803.0" width="19.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.09%)</title><rect x="1164.3" y="787.0" width="12.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.3" y="798.0"></text>
</g>
<g>
<title>Compilation::build_hir() (2 samples, 1.09%)</title><rect x="1164.3" y="771.0" width="12.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="782.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.54%)</title><rect x="1164.3" y="755.0" width="6.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.3" y="766.0"></text>
</g>
<g>
<title>ValueMap::find_insert(Instruction*) (1 samples, 0.54%)</title><rect x="1164.3" y="739.0" width="6.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1167.3" y="750.0"></text>
</g>
<g>
<title>Constant::is_equal(Instruction*) const (1 samples, 0.54%)</title><rect x="1164.3" y="723.0" width="6.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.3" y="734.0"></text>
</g>
<g>
<title>ObjectType::is_loaded() const (1 samples, 0.54%)</title><rect x="1164.3" y="707.0" width="6.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="718.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.54%)</title><rect x="1170.8" y="755.0" width="6.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.54%)</title><rect x="1170.8" y="739.0" width="6.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.54%)</title><rect x="1170.8" y="723.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (1 samples, 0.54%)</title><rect x="1170.8" y="707.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1173.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::header_block(BlockBegin*, BlockBegin::Flag, ValueStack*) (1 samples, 0.54%)</title><rect x="1170.8" y="691.0" width="6.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.8" y="702.0"></text>
</g>
<g>
<title>CompilationResourceObj::operator new(unsigned long) (1 samples, 0.54%)</title><rect x="1170.8" y="675.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.8" y="686.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (1 samples, 0.54%)</title><rect x="1177.2" y="787.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.2" y="798.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (1 samples, 0.54%)</title><rect x="1177.2" y="771.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.2" y="782.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.54%)</title><rect x="1177.2" y="755.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.2" y="766.0"></text>
</g>
<g>
<title>CHeapObj&lt;(MemoryType)1&gt;::operator new(unsigned long) (1 samples, 0.54%)</title><rect x="1177.2" y="739.0" width="6.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.2" y="750.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.54%)</title><rect x="1183.6" y="835.0" width="6.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="846.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1183.6" y="819.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1183.6" y="803.0" width="6.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="814.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.54%)</title><rect x="1183.6" y="787.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.54%)</title><rect x="1183.6" y="771.0" width="6.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="782.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.54%)</title><rect x="1183.6" y="755.0" width="6.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1183.6" y="739.0" width="6.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.54%)</title><rect x="1183.6" y="723.0" width="6.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="734.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.54%)</title><rect x="1183.6" y="707.0" width="6.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="718.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.54%)</title><rect x="1183.6" y="691.0" width="6.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="702.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.54%)</title><rect x="1183.6" y="675.0" width="6.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="686.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.54%)</title><rect x="1183.6" y="659.0" width="6.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="670.0"></text>
</g>
</g>
</svg>
