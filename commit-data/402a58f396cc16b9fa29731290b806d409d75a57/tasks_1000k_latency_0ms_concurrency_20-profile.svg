<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="917"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="917"> </text>
<g id="frames">
<g>
<title>all (994 samples, 100.00%)</title><rect x="10.0" y="883.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="894.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (251 samples, 25.25%)</title><rect x="10.0" y="867.0" width="298.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="878.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (251 samples, 25.25%)</title><rect x="10.0" y="851.0" width="298.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (249 samples, 25.05%)</title><rect x="11.2" y="835.0" width="295.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="846.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.20%)</title><rect x="11.2" y="819.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.20%)</title><rect x="11.2" y="803.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="14.2" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="11.2" y="787.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.2" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="11.2" y="771.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.2" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="11.2" y="755.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.2" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="11.2" y="739.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.2" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="11.2" y="723.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="12.4" y="707.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.4" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="12.4" y="691.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.4" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="12.4" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$277/1665273593.test (1 samples, 0.10%)</title><rect x="12.4" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$72 (1 samples, 0.10%)</title><rect x="12.4" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.pendingTasksCount (1 samples, 0.10%)</title><rect x="12.4" y="627.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="12.4" y="611.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.10%)</title><rect x="13.6" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="13.6" y="803.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.6" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="13.6" y="787.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.6" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="13.6" y="771.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.6" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="13.6" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="13.6" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.6" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="13.6" y="723.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.6" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="13.6" y="707.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.6" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="13.6" y="691.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.70%)</title><rect x="14.7" y="819.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.7" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.70%)</title><rect x="14.7" y="803.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.7" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.60%)</title><rect x="15.9" y="787.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/1403763161.accept (6 samples, 0.60%)</title><rect x="15.9" y="771.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.60%)</title><rect x="15.9" y="755.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.pendingOffsetsCount (1 samples, 0.10%)</title><rect x="15.9" y="739.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.9" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.50%)</title><rect x="17.1" y="739.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="20.1" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.40%)</title><rect x="18.3" y="723.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.3" y="734.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (192 samples, 19.32%)</title><rect x="23.1" y="819.0" width="227.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="830.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/260131618.accept (184 samples, 18.51%)</title><rect x="23.1" y="803.0" width="218.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.1" y="814.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (184 samples, 18.51%)</title><rect x="23.1" y="787.0" width="218.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.1" y="798.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (161 samples, 16.20%)</title><rect x="23.1" y="771.0" width="191.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.1" y="782.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (161 samples, 16.20%)</title><rect x="23.1" y="755.0" width="191.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="766.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (161 samples, 16.20%)</title><rect x="23.1" y="739.0" width="191.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.1" y="750.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (161 samples, 16.20%)</title><rect x="23.1" y="723.0" width="191.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="734.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (161 samples, 16.20%)</title><rect x="23.1" y="707.0" width="191.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.1" y="718.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (148 samples, 14.89%)</title><rect x="38.5" y="691.0" width="175.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.5" y="702.0">java/util/concurrent/Li..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (87 samples, 8.75%)</title><rect x="38.5" y="675.0" width="103.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.5" y="686.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 8.75%)</title><rect x="38.5" y="659.0" width="103.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.5" y="670.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 8.75%)</title><rect x="38.5" y="643.0" width="103.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.5" y="654.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (87 samples, 8.75%)</title><rect x="38.5" y="627.0" width="103.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.5" y="638.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (87 samples, 8.75%)</title><rect x="38.5" y="611.0" width="103.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="41.5" y="622.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (87 samples, 8.75%)</title><rect x="38.5" y="595.0" width="103.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="41.5" y="606.0">sun/misc/Uns..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="40.9" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="43.9" y="590.0"></text>
</g>
<g>
<title>Unsafe_Unpark (75 samples, 7.55%)</title><rect x="42.1" y="579.0" width="89.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="45.1" y="590.0">Unsafe_Unp..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="43.2" y="563.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="46.2" y="574.0"></text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.40%)</title><rect x="45.6" y="563.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="48.6" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (50 samples, 5.03%)</title><rect x="50.4" y="563.0" width="59.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="53.4" y="574.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.30%)</title><rect x="109.7" y="563.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="112.7" y="574.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.51%)</title><rect x="113.3" y="563.0" width="17.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="116.3" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (7 samples, 0.70%)</title><rect x="131.1" y="579.0" width="8.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="134.1" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.20%)</title><rect x="139.4" y="579.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="142.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.10%)</title><rect x="141.8" y="675.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.10%)</title><rect x="141.8" y="659.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="144.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.10%)</title><rect x="141.8" y="643.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="144.8" y="654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (1 samples, 0.10%)</title><rect x="141.8" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="144.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (60 samples, 6.04%)</title><rect x="143.0" y="675.0" width="71.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="146.0" y="686.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (60 samples, 6.04%)</title><rect x="143.0" y="659.0" width="71.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="146.0" y="670.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (60 samples, 6.04%)</title><rect x="143.0" y="643.0" width="71.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="146.0" y="654.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (60 samples, 6.04%)</title><rect x="143.0" y="627.0" width="71.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="146.0" y="638.0">java/uti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (17 samples, 1.71%)</title><rect x="214.2" y="771.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="217.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (9 samples, 0.91%)</title><rect x="223.7" y="755.0" width="10.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="226.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.isRegressing (1 samples, 0.10%)</title><rect x="230.8" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="232.0" y="739.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="232.0" y="723.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="232.0" y="707.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="235.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.20%)</title><rect x="232.0" y="691.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="232.0" y="675.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.30%)</title><rect x="234.4" y="771.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.30%)</title><rect x="234.4" y="755.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="237.4" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="234.4" y="739.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.30%)</title><rect x="237.9" y="771.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.30%)</title><rect x="237.9" y="755.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="240.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.30%)</title><rect x="237.9" y="739.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.30%)</title><rect x="237.9" y="723.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.30%)</title><rect x="237.9" y="707.0" width="3.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="241.5" y="803.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="241.5" y="787.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="244.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="241.5" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="244.5" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.70%)</title><rect x="242.7" y="803.0" width="8.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.40%)</title><rect x="246.2" y="787.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.40%)</title><rect x="246.2" y="771.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="249.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.40%)</title><rect x="246.2" y="755.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.73%)</title><rect x="251.0" y="819.0" width="55.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.0" y="830.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (47 samples, 4.73%)</title><rect x="251.0" y="803.0" width="55.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.0" y="814.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (32 samples, 3.22%)</title><rect x="252.2" y="787.0" width="38.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.2" y="798.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (2 samples, 0.20%)</title><rect x="252.2" y="771.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.2" y="782.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="252.2" y="755.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="255.2" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) (1 samples, 0.10%)</title><rect x="252.2" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="255.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="253.4" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="253.4" y="739.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="256.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (30 samples, 3.02%)</title><rect x="254.5" y="771.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="257.5" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (30 samples, 3.02%)</title><rect x="254.5" y="755.0" width="35.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.5" y="766.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (25 samples, 2.52%)</title><rect x="254.5" y="739.0" width="29.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="257.5" y="750.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (25 samples, 2.52%)</title><rect x="254.5" y="723.0" width="29.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.5" y="734.0">or..</text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="255.7" y="707.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="258.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.21%)</title><rect x="256.9" y="707.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.50%)</title><rect x="258.1" y="691.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="261.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.50%)</title><rect x="258.1" y="675.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="261.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.50%)</title><rect x="258.1" y="659.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="261.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.50%)</title><rect x="258.1" y="643.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="261.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.50%)</title><rect x="258.1" y="627.0" width="5.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="261.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.50%)</title><rect x="258.1" y="611.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="261.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.50%)</title><rect x="258.1" y="595.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="261.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.60%)</title><rect x="264.0" y="691.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="267.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (5 samples, 0.50%)</title><rect x="265.2" y="675.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (10 samples, 1.01%)</title><rect x="271.2" y="707.0" width="11.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 1.01%)</title><rect x="271.2" y="691.0" width="11.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (10 samples, 1.01%)</title><rect x="271.2" y="675.0" width="11.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.2" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (10 samples, 1.01%)</title><rect x="271.2" y="659.0" width="11.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.2" y="670.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (5 samples, 0.50%)</title><rect x="277.1" y="643.0" width="5.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="280.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.iterator (5 samples, 0.50%)</title><rect x="277.1" y="627.0" width="5.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.&lt;init&gt; (5 samples, 0.50%)</title><rect x="277.1" y="611.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (5 samples, 0.50%)</title><rect x="277.1" y="595.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.1" y="606.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="281.9" y="579.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="284.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.10%)</title><rect x="283.0" y="707.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="284.2" y="739.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="284.2" y="723.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="287.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="284.2" y="707.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="284.2" y="691.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (2 samples, 0.20%)</title><rect x="285.4" y="739.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (2 samples, 0.20%)</title><rect x="285.4" y="723.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="288.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLeadMetricName (1 samples, 0.10%)</title><rect x="285.4" y="707.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="288.4" y="718.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="285.4" y="691.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="288.4" y="702.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="285.4" y="675.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="288.4" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="286.6" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="289.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="286.6" y="691.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="289.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="286.6" y="675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.10%)</title><rect x="287.8" y="739.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="289.0" y="739.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="292.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (5 samples, 0.50%)</title><rect x="290.2" y="787.0" width="5.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="293.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (5 samples, 0.50%)</title><rect x="290.2" y="771.0" width="5.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="293.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (5 samples, 0.50%)</title><rect x="290.2" y="755.0" width="5.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.2" y="766.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="291.3" y="739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/1156563111.accept (1 samples, 0.10%)</title><rect x="291.3" y="723.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (1 samples, 0.10%)</title><rect x="291.3" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.leaderAndEpoch (1 samples, 0.10%)</title><rect x="291.3" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.partitionInfoIfCurrent (1 samples, 0.10%)</title><rect x="291.3" y="675.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/MetadataCache.getPartitionInfoHavingEpoch (1 samples, 0.10%)</title><rect x="291.3" y="659.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="294.3" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="291.3" y="643.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="291.3" y="627.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="292.5" y="739.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.5" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="292.5" y="723.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.5" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="292.5" y="707.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.5" y="718.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="292.5" y="691.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.5" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="292.5" y="675.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.5" y="686.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (2 samples, 0.20%)</title><rect x="292.5" y="659.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.estimateSize (1 samples, 0.10%)</title><rect x="292.5" y="643.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap$HashMapSpliterator.getFence (1 samples, 0.10%)</title><rect x="292.5" y="627.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.5" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.10%)</title><rect x="293.7" y="643.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="294.9" y="739.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="294.9" y="723.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="297.9" y="734.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="294.9" y="707.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="297.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="294.9" y="691.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="294.9" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.9" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="294.9" y="659.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.10%)</title><rect x="294.9" y="643.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.9" y="654.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.10%)</title><rect x="294.9" y="627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="294.9" y="611.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.10%)</title><rect x="296.1" y="787.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.10%)</title><rect x="296.1" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="299.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.10%)</title><rect x="296.1" y="755.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.10%)</title><rect x="296.1" y="739.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="299.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.10%)</title><rect x="296.1" y="723.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="299.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.30%)</title><rect x="297.3" y="787.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.30%)</title><rect x="297.3" y="771.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="300.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.30%)</title><rect x="297.3" y="755.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.20%)</title><rect x="297.3" y="739.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="300.3" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="297.3" y="723.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="297.3" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.3" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="297.3" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="300.3" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="297.3" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="300.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="298.5" y="723.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="301.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="298.5" y="707.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="298.5" y="691.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="301.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="298.5" y="675.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="301.5" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.10%)</title><rect x="298.5" y="659.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.5" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.10%)</title><rect x="298.5" y="643.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.5" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="298.5" y="627.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="301.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.nanoseconds (1 samples, 0.10%)</title><rect x="299.7" y="739.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.7" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="299.7" y="723.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="302.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.30%)</title><rect x="300.8" y="787.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="303.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.20%)</title><rect x="302.0" y="771.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="302.0" y="755.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="302.0" y="739.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.0" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="302.0" y="723.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.0" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="302.0" y="707.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="305.0" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="302.0" y="691.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="302.0" y="675.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.0" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="302.0" y="659.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.0" y="670.0"></text>
</g>
<g>
<title>java/util/Spliterators$IteratorSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="302.0" y="643.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.0" y="654.0"></text>
</g>
<g>
<title>java/util/Iterator.forEachRemaining (1 samples, 0.10%)</title><rect x="302.0" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.0" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="302.0" y="611.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="305.0" y="622.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="302.0" y="595.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.0" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="302.0" y="579.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="305.0" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="302.0" y="563.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="305.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="303.2" y="755.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="303.2" y="739.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="306.2" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="303.2" y="723.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="306.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="303.2" y="707.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="306.2" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="303.2" y="691.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="304.4" y="787.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="304.4" y="771.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="304.4" y="755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="307.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="304.4" y="739.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="307.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="304.4" y="723.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="304.4" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="307.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.10%)</title><rect x="305.6" y="787.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="308.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="305.6" y="771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.10%)</title><rect x="305.6" y="755.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Timer.update (1 samples, 0.10%)</title><rect x="305.6" y="739.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="308.6" y="750.0"></text>
</g>
<g>
<title>java/lang/Math.max (1 samples, 0.10%)</title><rect x="305.6" y="723.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="308.6" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="305.6" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="308.6" y="718.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="305.6" y="691.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="308.6" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="306.8" y="835.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="309.8" y="846.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="306.8" y="819.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="309.8" y="830.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="306.8" y="803.0" width="1.2" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="309.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (637 samples, 64.08%)</title><rect x="308.0" y="867.0" width="756.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="311.0" y="878.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (637 samples, 64.08%)</title><rect x="308.0" y="851.0" width="756.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.0" y="862.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (637 samples, 64.08%)</title><rect x="308.0" y="835.0" width="756.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="311.0" y="846.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/919919922.run (403 samples, 40.54%)</title><rect x="313.9" y="819.0" width="478.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="316.9" y="830.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (399 samples, 40.14%)</title><rect x="318.7" y="803.0" width="473.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="321.7" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lam..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (399 samples, 40.14%)</title><rect x="318.7" y="787.0" width="473.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.7" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (399 samples, 40.14%)</title><rect x="318.7" y="771.0" width="473.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="321.7" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.s..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="324.6" y="755.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="327.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (11 samples, 1.11%)</title><rect x="325.8" y="755.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="328.8" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (11 samples, 1.11%)</title><rect x="325.8" y="739.0" width="13.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="328.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 1.11%)</title><rect x="325.8" y="723.0" width="13.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="328.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="325.8" y="707.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="328.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.91%)</title><rect x="328.1" y="707.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="331.1" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.50%)</title><rect x="332.9" y="691.0" width="5.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="335.9" y="702.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="332.9" y="675.0" width="5.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="335.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (40 samples, 4.02%)</title><rect x="338.8" y="755.0" width="47.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="341.8" y="766.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 3.22%)</title><rect x="348.3" y="739.0" width="38.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="351.3" y="750.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 3.22%)</title><rect x="348.3" y="723.0" width="38.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.3" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 3.22%)</title><rect x="348.3" y="707.0" width="38.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="351.3" y="718.0">jav..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="348.3" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="351.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="348.3" y="675.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="351.3" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="348.3" y="659.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="351.3" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="348.3" y="643.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="351.3" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="348.3" y="627.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="351.3" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="348.3" y="611.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="351.3" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="348.3" y="595.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="351.3" y="606.0"></text>
</g>
<g>
<title>G1CollectorPolicy::is_young_list_full() (1 samples, 0.10%)</title><rect x="348.3" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="351.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 0.40%)</title><rect x="349.5" y="691.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="352.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.40%)</title><rect x="349.5" y="675.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="352.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.40%)</title><rect x="349.5" y="659.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="352.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/1508422419.accept (1 samples, 0.10%)</title><rect x="351.9" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="354.9" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="353.1" y="643.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="356.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 2.72%)</title><rect x="354.3" y="691.0" width="32.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.3" y="702.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$300/1508422419.accept (24 samples, 2.41%)</title><rect x="357.8" y="675.0" width="28.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="360.8" y="686.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (24 samples, 2.41%)</title><rect x="357.8" y="659.0" width="28.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.8" y="670.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/198445197.accept (2 samples, 0.20%)</title><rect x="361.4" y="643.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="364.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 1.91%)</title><rect x="363.8" y="643.0" width="22.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (19 samples, 1.91%)</title><rect x="363.8" y="627.0" width="22.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="366.8" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (19 samples, 1.91%)</title><rect x="363.8" y="611.0" width="22.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="366.8" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.40%)</title><rect x="363.8" y="595.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="366.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (4 samples, 0.40%)</title><rect x="363.8" y="579.0" width="4.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="366.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.51%)</title><rect x="368.5" y="595.0" width="17.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.5" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (110 samples, 11.07%)</title><rect x="386.3" y="755.0" width="130.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="389.3" y="766.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (110 samples, 11.07%)</title><rect x="386.3" y="739.0" width="130.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="389.3" y="750.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (110 samples, 11.07%)</title><rect x="386.3" y="723.0" width="130.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="389.3" y="734.0">com/linecorp/dec..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="386.3" y="707.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="389.3" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="386.3" y="691.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="389.3" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="386.3" y="675.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="389.3" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="386.3" y="659.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="389.3" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (109 samples, 10.97%)</title><rect x="387.5" y="707.0" width="129.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="390.5" y="718.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (109 samples, 10.97%)</title><rect x="387.5" y="691.0" width="129.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.5" y="702.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (109 samples, 10.97%)</title><rect x="387.5" y="675.0" width="129.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="390.5" y="686.0">com/fasterxml/ja..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="398.2" y="659.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="401.2" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.60%)</title><rect x="399.4" y="659.0" width="7.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="402.4" y="670.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.50%)</title><rect x="400.6" y="643.0" width="5.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="403.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (31 samples, 3.12%)</title><rect x="406.5" y="659.0" width="36.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.5" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (2 samples, 0.20%)</title><rect x="406.5" y="643.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (2 samples, 0.20%)</title><rect x="406.5" y="627.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="409.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.20%)</title><rect x="406.5" y="611.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.5" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.20%)</title><rect x="406.5" y="595.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.20%)</title><rect x="406.5" y="579.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.20%)</title><rect x="406.5" y="563.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (2 samples, 0.20%)</title><rect x="406.5" y="547.0" width="2.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="409.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ref/WeakReference.&lt;init&gt; (2 samples, 0.20%)</title><rect x="406.5" y="531.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="409.5" y="542.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.20%)</title><rect x="406.5" y="515.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="409.5" y="526.0"></text>
</g>
<g>
<title>java/lang/ref/Reference.&lt;init&gt; (2 samples, 0.20%)</title><rect x="406.5" y="499.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.5" y="510.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="406.5" y="483.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="409.5" y="494.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="406.5" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="409.5" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="406.5" y="451.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="409.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="406.5" y="435.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="409.5" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="406.5" y="419.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="409.5" y="430.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (1 samples, 0.10%)</title><rect x="407.7" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="410.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (29 samples, 2.92%)</title><rect x="408.9" y="643.0" width="34.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="411.9" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (29 samples, 2.92%)</title><rect x="408.9" y="627.0" width="34.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.9" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (28 samples, 2.82%)</title><rect x="408.9" y="611.0" width="33.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="411.9" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (28 samples, 2.82%)</title><rect x="408.9" y="595.0" width="33.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="411.9" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.10%)</title><rect x="442.1" y="611.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="445.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="442.1" y="595.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.1" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (1 samples, 0.10%)</title><rect x="442.1" y="579.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="445.1" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="442.1" y="563.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="445.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="442.1" y="547.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="445.1" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="442.1" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="445.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (54 samples, 5.43%)</title><rect x="443.3" y="659.0" width="64.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="446.3" y="670.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.50%)</title><rect x="443.3" y="643.0" width="5.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="446.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.50%)</title><rect x="443.3" y="627.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="446.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.10%)</title><rect x="448.0" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="451.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.80%)</title><rect x="449.2" y="643.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="452.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 0.50%)</title><rect x="452.8" y="627.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="455.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.10%)</title><rect x="452.8" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="455.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.20%)</title><rect x="454.0" y="611.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="457.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="455.2" y="595.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="458.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="456.4" y="611.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="459.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.10%)</title><rect x="456.4" y="595.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="459.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="456.4" y="579.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="457.5" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (41 samples, 4.12%)</title><rect x="458.7" y="643.0" width="48.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.7" y="654.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (41 samples, 4.12%)</title><rect x="458.7" y="627.0" width="48.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="461.7" y="638.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (14 samples, 1.41%)</title><rect x="458.7" y="611.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="461.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.10%)</title><rect x="458.7" y="595.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.40%)</title><rect x="459.9" y="595.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.40%)</title><rect x="459.9" y="579.0" width="4.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="462.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.40%)</title><rect x="459.9" y="563.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.40%)</title><rect x="459.9" y="547.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="462.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.30%)</title><rect x="461.1" y="531.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (4 samples, 0.40%)</title><rect x="464.7" y="595.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.20%)</title><rect x="464.7" y="579.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="467.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.20%)</title><rect x="467.0" y="579.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.20%)</title><rect x="467.0" y="563.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="470.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.20%)</title><rect x="467.0" y="547.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="470.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.20%)</title><rect x="467.0" y="531.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="470.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (3 samples, 0.30%)</title><rect x="469.4" y="595.0" width="3.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (3 samples, 0.30%)</title><rect x="469.4" y="579.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="472.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (2 samples, 0.20%)</title><rect x="473.0" y="595.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="476.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (27 samples, 2.72%)</title><rect x="475.4" y="611.0" width="32.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.4" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (27 samples, 2.72%)</title><rect x="475.4" y="595.0" width="32.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="478.4" y="606.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (26 samples, 2.62%)</title><rect x="476.5" y="579.0" width="30.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="479.5" y="590.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.11%)</title><rect x="480.1" y="563.0" width="13.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="483.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.10%)</title><rect x="482.5" y="547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="485.5" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (7 samples, 0.70%)</title><rect x="483.7" y="547.0" width="8.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="486.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (7 samples, 0.70%)</title><rect x="483.7" y="531.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="486.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (7 samples, 0.70%)</title><rect x="483.7" y="515.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="486.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.10%)</title><rect x="483.7" y="499.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="486.7" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (6 samples, 0.60%)</title><rect x="484.8" y="499.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="487.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="492.0" y="547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="495.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.10%)</title><rect x="492.0" y="531.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="495.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.10%)</title><rect x="492.0" y="515.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="495.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 0.30%)</title><rect x="493.2" y="563.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="496.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.30%)</title><rect x="493.2" y="547.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="496.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="493.2" y="531.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="496.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.30%)</title><rect x="493.2" y="515.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="496.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.30%)</title><rect x="493.2" y="499.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.2" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.40%)</title><rect x="496.7" y="563.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="499.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.40%)</title><rect x="496.7" y="547.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="499.7" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.40%)</title><rect x="496.7" y="531.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="499.7" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.40%)</title><rect x="496.7" y="515.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="499.7" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.40%)</title><rect x="496.7" y="499.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="499.7" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.20%)</title><rect x="499.1" y="483.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="502.1" y="494.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.20%)</title><rect x="499.1" y="467.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="502.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.10%)</title><rect x="501.5" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="504.5" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="501.5" y="547.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="504.5" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="501.5" y="531.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="504.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (4 samples, 0.40%)</title><rect x="502.7" y="563.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="505.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.10%)</title><rect x="507.4" y="659.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="510.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.70%)</title><rect x="508.6" y="659.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="511.6" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.70%)</title><rect x="508.6" y="643.0" width="8.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="511.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.70%)</title><rect x="508.6" y="627.0" width="8.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="511.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.70%)</title><rect x="508.6" y="611.0" width="8.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="511.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.70%)</title><rect x="508.6" y="595.0" width="8.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="511.6" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (229 samples, 23.04%)</title><rect x="516.9" y="755.0" width="271.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="519.9" y="766.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.60%)</title><rect x="521.6" y="739.0" width="7.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="524.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.60%)</title><rect x="521.6" y="723.0" width="7.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="524.6" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (39 samples, 3.92%)</title><rect x="528.8" y="739.0" width="46.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="531.8" y="750.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (39 samples, 3.92%)</title><rect x="528.8" y="723.0" width="46.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="531.8" y="734.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (37 samples, 3.72%)</title><rect x="531.1" y="707.0" width="44.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.1" y="718.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.70%)</title><rect x="532.3" y="691.0" width="8.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="535.3" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.70%)</title><rect x="532.3" y="675.0" width="8.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="535.3" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.70%)</title><rect x="532.3" y="659.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="535.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.70%)</title><rect x="532.3" y="643.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="535.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="540.6" y="691.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="543.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="540.6" y="675.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="540.6" y="659.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.10%)</title><rect x="540.6" y="643.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.6" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.10%)</title><rect x="540.6" y="627.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="543.6" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (28 samples, 2.82%)</title><rect x="541.8" y="691.0" width="33.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.8" y="702.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (22 samples, 2.21%)</title><rect x="549.0" y="675.0" width="26.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="552.0" y="686.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.20%)</title><rect x="572.7" y="659.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="575.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.40%)</title><rect x="575.1" y="739.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.1" y="750.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.40%)</title><rect x="575.1" y="723.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (111 samples, 11.17%)</title><rect x="579.8" y="739.0" width="131.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="582.8" y="750.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (102 samples, 10.26%)</title><rect x="585.8" y="723.0" width="121.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.8" y="734.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (41 samples, 4.12%)</title><rect x="600.0" y="707.0" width="48.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="603.0" y="718.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (28 samples, 2.82%)</title><rect x="607.1" y="691.0" width="33.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="610.1" y="702.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (16 samples, 1.61%)</title><rect x="614.2" y="675.0" width="19.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="617.2" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.60%)</title><rect x="620.2" y="659.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.2" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.60%)</title><rect x="620.2" y="643.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="623.2" y="654.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.60%)</title><rect x="620.2" y="627.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="623.2" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.50%)</title><rect x="620.2" y="611.0" width="5.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="623.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (4 samples, 0.40%)</title><rect x="620.2" y="595.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="623.2" y="606.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="620.2" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="623.2" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.30%)</title><rect x="621.4" y="579.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="624.4" y="590.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.30%)</title><rect x="621.4" y="563.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="624.4" y="574.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="621.4" y="547.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="624.4" y="558.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.10%)</title><rect x="621.4" y="531.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="624.4" y="542.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="622.6" y="547.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="625.6" y="558.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="623.7" y="547.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="626.7" y="558.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="624.9" y="595.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="627.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="624.9" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="627.9" y="590.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.10%)</title><rect x="624.9" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="627.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="626.1" y="611.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="629.1" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="626.1" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="629.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.30%)</title><rect x="627.3" y="659.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="630.3" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="630.9" y="659.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="633.9" y="670.0"></text>
</g>
<g>
<title>jshort_arraycopy (1 samples, 0.10%)</title><rect x="633.2" y="675.0" width="1.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="636.2" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.50%)</title><rect x="634.4" y="675.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="637.4" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.70%)</title><rect x="640.4" y="691.0" width="8.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="643.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.40%)</title><rect x="648.7" y="707.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="651.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.toString (4 samples, 0.40%)</title><rect x="648.7" y="691.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="651.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (4 samples, 0.40%)</title><rect x="648.7" y="675.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="651.7" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (45 samples, 4.53%)</title><rect x="653.4" y="707.0" width="53.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.4" y="718.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (45 samples, 4.53%)</title><rect x="653.4" y="691.0" width="53.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="656.4" y="702.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.20%)</title><rect x="653.4" y="675.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.4" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.20%)</title><rect x="653.4" y="659.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="656.4" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (2 samples, 0.20%)</title><rect x="653.4" y="643.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.4" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.20%)</title><rect x="653.4" y="627.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="655.8" y="675.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.8" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="655.8" y="659.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="658.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="655.8" y="643.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="658.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.10%)</title><rect x="655.8" y="627.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.8" y="638.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (42 samples, 4.23%)</title><rect x="657.0" y="675.0" width="49.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="660.0" y="686.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (35 samples, 3.52%)</title><rect x="665.3" y="659.0" width="41.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.3" y="670.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 1.71%)</title><rect x="686.7" y="643.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="689.7" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="696.2" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="699.2" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (6 samples, 0.60%)</title><rect x="697.3" y="627.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.3" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="703.3" y="611.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="706.3" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="703.3" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="706.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="703.3" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="706.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="703.3" y="563.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="706.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="703.3" y="547.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="706.3" y="558.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.20%)</title><rect x="704.5" y="627.0" width="2.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="707.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (4 samples, 0.40%)</title><rect x="706.8" y="723.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="709.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.40%)</title><rect x="706.8" y="707.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="709.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.40%)</title><rect x="706.8" y="691.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="709.8" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.30%)</title><rect x="706.8" y="675.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.8" y="686.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="709.2" y="659.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="712.2" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="710.4" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="713.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (49 samples, 4.93%)</title><rect x="711.6" y="739.0" width="58.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="714.6" y="750.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (49 samples, 4.93%)</title><rect x="711.6" y="723.0" width="58.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="714.6" y="734.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/958742860.process (21 samples, 2.11%)</title><rect x="712.8" y="707.0" width="24.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="715.8" y="718.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (21 samples, 2.11%)</title><rect x="712.8" y="691.0" width="24.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="715.8" y="702.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.81%)</title><rect x="716.3" y="675.0" width="21.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="719.3" y="686.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.40%)</title><rect x="731.8" y="659.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="734.8" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="733.0" y="643.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="736.0" y="654.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="733.0" y="627.0" width="3.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="736.0" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="736.5" y="659.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.5" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="736.5" y="643.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="739.5" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="736.5" y="627.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.50%)</title><rect x="737.7" y="707.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.7" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 0.50%)</title><rect x="737.7" y="691.0" width="5.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="740.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 0.50%)</title><rect x="737.7" y="675.0" width="5.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="740.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (5 samples, 0.50%)</title><rect x="737.7" y="659.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="740.7" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.50%)</title><rect x="737.7" y="643.0" width="5.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="740.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.50%)</title><rect x="737.7" y="627.0" width="5.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="740.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.50%)</title><rect x="737.7" y="611.0" width="5.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="740.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="743.6" y="707.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="746.6" y="718.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="743.6" y="691.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="746.6" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.20%)</title><rect x="744.8" y="707.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="747.8" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.20%)</title><rect x="744.8" y="691.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.8" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (9 samples, 0.91%)</title><rect x="747.2" y="707.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="750.2" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.50%)</title><rect x="752.0" y="691.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="755.0" y="702.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.30%)</title><rect x="752.0" y="675.0" width="3.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="755.0" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.20%)</title><rect x="755.5" y="675.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="758.5" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.40%)</title><rect x="757.9" y="707.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.9" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="761.4" y="691.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="764.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.60%)</title><rect x="762.6" y="707.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="765.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.60%)</title><rect x="762.6" y="691.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="765.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.60%)</title><rect x="762.6" y="675.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="765.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.50%)</title><rect x="762.6" y="659.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.50%)</title><rect x="762.6" y="643.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="765.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.50%)</title><rect x="762.6" y="627.0" width="6.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="765.6" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$296/1421325646.accept (4 samples, 0.40%)</title><rect x="763.8" y="611.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="768.6" y="659.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="771.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.10%)</title><rect x="769.8" y="739.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="772.8" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="769.8" y="723.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="772.8" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="769.8" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="772.8" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="769.8" y="691.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="772.8" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="769.8" y="675.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="772.8" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="769.8" y="659.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="772.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.51%)</title><rect x="770.9" y="739.0" width="17.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (15 samples, 1.51%)</title><rect x="770.9" y="723.0" width="17.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (15 samples, 1.51%)</title><rect x="770.9" y="707.0" width="17.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.30%)</title><rect x="770.9" y="691.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.30%)</title><rect x="770.9" y="675.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="773.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.30%)</title><rect x="770.9" y="659.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="773.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/538733051.accept (1 samples, 0.10%)</title><rect x="772.1" y="643.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="775.1" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="773.3" y="643.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="776.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (12 samples, 1.21%)</title><rect x="774.5" y="691.0" width="14.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="777.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/538733051.accept (10 samples, 1.01%)</title><rect x="776.9" y="675.0" width="11.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="779.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (10 samples, 1.01%)</title><rect x="776.9" y="659.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (10 samples, 1.01%)</title><rect x="776.9" y="643.0" width="11.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.9" y="654.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 1.01%)</title><rect x="776.9" y="627.0" width="11.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="779.9" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 1.01%)</title><rect x="776.9" y="611.0" width="11.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="779.9" y="622.0"></text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.91%)</title><rect x="778.1" y="595.0" width="10.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="781.1" y="606.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.91%)</title><rect x="778.1" y="579.0" width="10.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="781.1" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.30%)</title><rect x="788.8" y="755.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="791.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.30%)</title><rect x="788.8" y="739.0" width="3.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="791.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.10%)</title><rect x="792.3" y="819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="792.3" y="803.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="795.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="792.3" y="787.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="795.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="792.3" y="771.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="795.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (228 samples, 22.94%)</title><rect x="793.5" y="819.0" width="270.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="796.5" y="830.0">java/util/concurrent/ThreadPoolExecu..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (225 samples, 22.64%)</title><rect x="797.1" y="803.0" width="267.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="800.1" y="814.0">java/util/concurrent/LinkedBlockingQ..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (183 samples, 18.41%)</title><rect x="844.5" y="787.0" width="217.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="847.5" y="798.0">java/util/concurrent/locks/Ab..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.70%)</title><rect x="855.2" y="771.0" width="8.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.70%)</title><rect x="855.2" y="755.0" width="8.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 16.80%)</title><rect x="863.5" y="771.0" width="198.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="866.5" y="782.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (167 samples, 16.80%)</title><rect x="863.5" y="755.0" width="198.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="866.5" y="766.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.20%)</title><rect x="868.3" y="739.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="871.3" y="750.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="870.7" y="739.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="873.7" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.10%)</title><rect x="871.9" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="874.9" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="873.0" y="739.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="876.0" y="750.0"></text>
</g>
<g>
<title>Unsafe_Park (155 samples, 15.59%)</title><rect x="874.2" y="739.0" width="184.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="877.2" y="750.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="879.0" y="723.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="882.0" y="734.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (12 samples, 1.21%)</title><rect x="881.3" y="723.0" width="14.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="884.3" y="734.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.50%)</title><rect x="884.9" y="707.0" width="5.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="887.9" y="718.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.30%)</title><rect x="884.9" y="691.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="887.9" y="702.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (3 samples, 0.30%)</title><rect x="884.9" y="675.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="887.9" y="686.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="888.5" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="891.5" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="889.7" y="691.0" width="1.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="892.7" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.40%)</title><rect x="890.8" y="707.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="893.8" y="718.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="895.6" y="723.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="898.6" y="734.0"></text>
</g>
<g>
<title>__lll_lock_wait (8 samples, 0.80%)</title><rect x="896.8" y="723.0" width="9.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="899.8" y="734.0"></text>
</g>
<g>
<title>__lll_unlock_wake (43 samples, 4.33%)</title><rect x="906.3" y="723.0" width="51.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="909.3" y="734.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (75 samples, 7.55%)</title><rect x="957.3" y="723.0" width="89.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="960.3" y="734.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.30%)</title><rect x="1046.4" y="723.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1049.4" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="1049.9" y="723.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1052.9" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1051.1" y="723.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1054.1" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.30%)</title><rect x="1053.5" y="723.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1056.5" y="734.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1057.0" y="723.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1060.0" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.20%)</title><rect x="1058.2" y="739.0" width="2.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1061.2" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="1060.6" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1063.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.20%)</title><rect x="1061.8" y="787.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1064.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="1061.8" y="771.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1064.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="1061.8" y="755.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1064.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="1061.8" y="739.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1064.8" y="750.0"></text>
</g>
<g>
<title>start_thread (106 samples, 10.66%)</title><rect x="1064.2" y="867.0" width="125.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1067.2" y="878.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 10.66%)</title><rect x="1064.2" y="851.0" width="125.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1067.2" y="862.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (19 samples, 1.91%)</title><rect x="1064.2" y="835.0" width="22.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.2" y="846.0">G..</text>
</g>
<g>
<title>G1ParCleanupCTTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1064.2" y="819.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1067.2" y="830.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1064.2" y="803.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1067.2" y="814.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (3 samples, 0.30%)</title><rect x="1065.4" y="819.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1068.4" y="830.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.30%)</title><rect x="1065.4" y="803.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1068.4" y="814.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1065.4" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1068.4" y="798.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="1066.5" y="787.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1069.5" y="798.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.51%)</title><rect x="1068.9" y="819.0" width="17.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1071.9" y="830.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.40%)</title><rect x="1068.9" y="803.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1071.9" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1068.9" y="787.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.9" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.10%)</title><rect x="1068.9" y="771.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.9" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1068.9" y="755.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1071.9" y="766.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="1068.9" y="739.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1071.9" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1068.9" y="723.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1071.9" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.10%)</title><rect x="1068.9" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.9" y="718.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_v(oopDesc*, ExtendedOopClosure*) (1 samples, 0.10%)</title><rect x="1068.9" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1071.9" y="702.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="1070.1" y="771.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1073.1" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.20%)</title><rect x="1071.3" y="787.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.3" y="798.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.20%)</title><rect x="1071.3" y="771.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1074.3" y="782.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (11 samples, 1.11%)</title><rect x="1073.7" y="803.0" width="13.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1076.7" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (11 samples, 1.11%)</title><rect x="1073.7" y="787.0" width="13.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1076.7" y="798.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 0.91%)</title><rect x="1073.7" y="771.0" width="10.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1076.7" y="782.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 0.91%)</title><rect x="1073.7" y="755.0" width="10.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.7" y="766.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 0.91%)</title><rect x="1073.7" y="739.0" width="10.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1076.7" y="750.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.80%)</title><rect x="1074.8" y="723.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.8" y="734.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (5 samples, 0.50%)</title><rect x="1078.4" y="707.0" width="5.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1081.4" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetArray::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.10%)</title><rect x="1078.4" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1081.4" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1078.4" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1081.4" y="686.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (2 samples, 0.20%)</title><rect x="1079.6" y="691.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1082.6" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1080.8" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.8" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1082.0" y="691.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1085.0" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_is_obj(HeapWord const*) const (1 samples, 0.10%)</title><rect x="1082.0" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1085.0" y="686.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.10%)</title><rect x="1083.2" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.2" y="702.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1083.2" y="675.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1086.2" y="686.0"></text>
</g>
<g>
<title>G1RemSet::scanRS(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (2 samples, 0.20%)</title><rect x="1084.3" y="771.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1087.3" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_from(HeapRegion*, HeapRegionClosure*) (2 samples, 0.20%)</title><rect x="1084.3" y="755.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1087.3" y="766.0"></text>
</g>
<g>
<title>HeapRegionRemSet::iter_is_complete() (1 samples, 0.10%)</title><rect x="1085.5" y="739.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1088.5" y="750.0"></text>
</g>
<g>
<title>JavaThread::run() (85 samples, 8.55%)</title><rect x="1086.7" y="835.0" width="100.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.7" y="846.0">JavaThread::..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 8.55%)</title><rect x="1086.7" y="819.0" width="100.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.7" y="830.0">JavaThread::..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 8.55%)</title><rect x="1086.7" y="803.0" width="100.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.7" y="814.0">CompileBroke..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 8.55%)</title><rect x="1086.7" y="787.0" width="100.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.7" y="798.0">CompileBroke..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (85 samples, 8.55%)</title><rect x="1086.7" y="771.0" width="100.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.7" y="782.0">C2Compiler::..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (85 samples, 8.55%)</title><rect x="1086.7" y="755.0" width="100.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.7" y="766.0">Compile::Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (35 samples, 3.52%)</title><rect x="1086.7" y="739.0" width="41.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.7" y="750.0">Com..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.30%)</title><rect x="1086.7" y="723.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.7" y="734.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.20%)</title><rect x="1086.7" y="707.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.7" y="718.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (2 samples, 0.20%)</title><rect x="1086.7" y="691.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.7" y="702.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.10%)</title><rect x="1087.9" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.9" y="686.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1089.1" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.1" y="718.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1089.1" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1092.1" y="702.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.10%)</title><rect x="1089.1" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1092.1" y="686.0"></text>
</g>
<g>
<title>loadConINode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.10%)</title><rect x="1089.1" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1092.1" y="670.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1090.3" y="723.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.3" y="734.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1090.3" y="707.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1093.3" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1090.3" y="691.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1093.3" y="702.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.40%)</title><rect x="1091.5" y="723.0" width="4.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1094.5" y="734.0"></text>
</g>
<g>
<title>LoadINode::Opcode() const (1 samples, 0.10%)</title><rect x="1091.5" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1094.5" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.30%)</title><rect x="1092.7" y="707.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1095.7" y="718.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1093.8" y="691.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.8" y="702.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1095.0" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.0" y="702.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1095.0" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1098.0" y="686.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1095.0" y="659.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1098.0" y="670.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1095.0" y="643.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1098.0" y="654.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1095.0" y="627.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.0" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1095.0" y="611.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1098.0" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1095.0" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1098.0" y="606.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1095.0" y="579.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1098.0" y="590.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.10%)</title><rect x="1095.0" y="563.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.0" y="574.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.10%)</title><rect x="1096.2" y="723.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.2" y="734.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.10%)</title><rect x="1096.2" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.2" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.20%)</title><rect x="1097.4" y="723.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1100.4" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.20%)</title><rect x="1097.4" y="707.0" width="2.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1100.4" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.20%)</title><rect x="1097.4" y="691.0" width="2.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.4" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.10%)</title><rect x="1097.4" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.4" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.10%)</title><rect x="1098.6" y="675.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1101.6" y="686.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1098.6" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.6" y="670.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1098.6" y="643.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1101.6" y="654.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (24 samples, 2.41%)</title><rect x="1099.8" y="723.0" width="28.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.8" y="734.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1101.0" y="707.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.0" y="718.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.10%)</title><rect x="1102.2" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.2" y="718.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1103.3" y="707.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1104.5" y="707.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.5" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1104.5" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.5" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1104.5" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.30%)</title><rect x="1105.7" y="707.0" width="3.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.7" y="718.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (3 samples, 0.30%)</title><rect x="1105.7" y="691.0" width="3.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.7" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1106.9" y="675.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.30%)</title><rect x="1109.3" y="707.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.3" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.30%)</title><rect x="1112.8" y="707.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.8" y="718.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.10%)</title><rect x="1114.0" y="691.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1117.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1115.2" y="691.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1118.2" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.20%)</title><rect x="1116.4" y="707.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1119.4" y="718.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1117.6" y="691.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.6" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1118.8" y="707.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.20%)</title><rect x="1120.0" y="707.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.0" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1121.1" y="691.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.10%)</title><rect x="1122.3" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.3" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1122.3" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.3" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1123.5" y="707.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.20%)</title><rect x="1124.7" y="707.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1127.7" y="718.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1124.7" y="691.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1127.7" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1125.9" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.9" y="702.0"></text>
</g>
<g>
<title>loadConL0Node::bottom_type() const (1 samples, 0.10%)</title><rect x="1127.1" y="707.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.1" y="718.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 4.02%)</title><rect x="1128.3" y="739.0" width="47.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.3" y="750.0">Comp..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.20%)</title><rect x="1128.3" y="723.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.3" y="734.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.20%)</title><rect x="1128.3" y="707.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.3" y="718.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (2 samples, 0.20%)</title><rect x="1128.3" y="691.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.3" y="702.0"></text>
</g>
<g>
<title>Node::subsume_by(Node*, Compile*) (2 samples, 0.20%)</title><rect x="1128.3" y="675.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.3" y="686.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (2 samples, 0.20%)</title><rect x="1128.3" y="659.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.3" y="670.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1129.5" y="643.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1132.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.20%)</title><rect x="1130.6" y="723.0" width="2.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.20%)</title><rect x="1130.6" y="707.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1130.6" y="691.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1133.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1130.6" y="675.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1133.6" y="686.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1130.6" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="659.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="643.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.8" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="627.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="611.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.8" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="595.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.8" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="579.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.8" y="590.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.10%)</title><rect x="1131.8" y="563.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (29 samples, 2.92%)</title><rect x="1133.0" y="723.0" width="34.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1136.0" y="734.0">Ph..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1133.0" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.0" y="718.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1134.2" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.2" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (3 samples, 0.30%)</title><rect x="1135.4" y="707.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.4" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1139.0" y="707.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.0" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1139.0" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (17 samples, 1.71%)</title><rect x="1140.1" y="707.0" width="20.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (17 samples, 1.71%)</title><rect x="1140.1" y="691.0" width="20.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 1.71%)</title><rect x="1140.1" y="675.0" width="20.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.20%)</title><rect x="1157.9" y="659.0" width="2.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.9" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.20%)</title><rect x="1160.3" y="707.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.3" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="1162.7" y="707.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="718.0"></text>
</g>
<g>
<title>MemBarReleaseLockNode::Opcode() const (1 samples, 0.10%)</title><rect x="1162.7" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1163.9" y="691.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1166.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.10%)</title><rect x="1163.9" y="675.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.9" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1165.1" y="707.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1165.1" y="691.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.1" y="702.0"></text>
</g>
<g>
<title>CmpINode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1165.1" y="675.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.1" y="686.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.10%)</title><rect x="1166.3" y="707.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.3" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 0.70%)</title><rect x="1167.4" y="723.0" width="8.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1170.4" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.70%)</title><rect x="1167.4" y="707.0" width="8.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.4" y="718.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1167.4" y="691.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.4" y="702.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1167.4" y="675.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.4" y="686.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.10%)</title><rect x="1167.4" y="659.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.4" y="670.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1167.4" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="654.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1167.4" y="627.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.4" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1167.4" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.4" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1167.4" y="595.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1167.4" y="579.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.20%)</title><rect x="1168.6" y="691.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.6" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.20%)</title><rect x="1168.6" y="675.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.6" y="686.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (2 samples, 0.20%)</title><rect x="1168.6" y="659.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.6" y="670.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1171.0" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.0" y="702.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.10%)</title><rect x="1171.0" y="675.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.0" y="686.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.10%)</title><rect x="1171.0" y="659.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1174.0" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1172.2" y="691.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.2" y="702.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.10%)</title><rect x="1172.2" y="675.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.2" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="659.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="643.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.2" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="627.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.2" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="611.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.2" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="579.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.2" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="563.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.2" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="547.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.2" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.2" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="499.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.2" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="483.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="494.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="467.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.2" y="478.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.2" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1175.2" y="462.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1172.2" y="435.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.2" y="446.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1173.4" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.4" y="702.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1173.4" y="675.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1176.4" y="686.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1173.4" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.4" y="670.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1173.4" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.4" y="654.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1174.6" y="691.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1177.6" y="702.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1174.6" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.6" y="686.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1174.6" y="659.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.6" y="670.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1174.6" y="643.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.6" y="654.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1174.6" y="627.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.6" y="638.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1174.6" y="611.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 1.01%)</title><rect x="1175.8" y="739.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.8" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 1.01%)</title><rect x="1175.8" y="723.0" width="11.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 1.01%)</title><rect x="1175.8" y="707.0" width="11.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.8" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 1.01%)</title><rect x="1175.8" y="691.0" width="11.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.8" y="702.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.10%)</title><rect x="1175.8" y="675.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.8" y="686.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.10%)</title><rect x="1175.8" y="659.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.8" y="670.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.10%)</title><rect x="1175.8" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.8" y="654.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.10%)</title><rect x="1175.8" y="627.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1175.8" y="611.0" width="1.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (9 samples, 0.91%)</title><rect x="1176.9" y="675.0" width="10.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.91%)</title><rect x="1176.9" y="659.0" width="10.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.9" y="670.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1176.9" y="643.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.9" y="654.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool) (1 samples, 0.10%)</title><rect x="1176.9" y="627.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.9" y="638.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1176.9" y="611.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.9" y="622.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1176.9" y="595.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.9" y="606.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1176.9" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.9" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.50%)</title><rect x="1178.1" y="643.0" width="6.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.50%)</title><rect x="1178.1" y="627.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.50%)</title><rect x="1178.1" y="611.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.50%)</title><rect x="1178.1" y="595.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.50%)</title><rect x="1178.1" y="579.0" width="6.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.50%)</title><rect x="1178.1" y="563.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.1" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1178.1" y="547.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1178.1" y="531.0" width="3.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1178.1" y="515.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1178.1" y="499.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1178.1" y="483.0" width="3.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1178.1" y="467.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1178.1" y="451.0" width="3.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.1" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1178.1" y="435.0" width="3.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1178.1" y="419.0" width="3.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1178.1" y="403.0" width="3.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1178.1" y="387.0" width="3.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1178.1" y="371.0" width="3.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.1" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1178.1" y="355.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1178.1" y="339.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1178.1" y="323.0" width="3.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1178.1" y="307.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1178.1" y="291.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1178.1" y="275.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1178.1" y="259.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.1" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1178.1" y="243.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1178.1" y="227.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1178.1" y="211.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1178.1" y="195.0" width="2.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.1" y="179.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.1" y="163.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.1" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.1" y="147.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.1" y="158.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.10%)</title><rect x="1178.1" y="131.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.1" y="142.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1178.1" y="115.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.10%)</title><rect x="1178.1" y="99.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.1" y="110.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1178.1" y="83.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.1" y="94.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1178.1" y="67.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1179.3" y="179.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1179.3" y="163.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.3" y="174.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.10%)</title><rect x="1179.3" y="147.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.3" y="158.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.10%)</title><rect x="1179.3" y="131.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.3" y="142.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.10%)</title><rect x="1179.3" y="115.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.3" y="126.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.10%)</title><rect x="1179.3" y="99.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.3" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1179.3" y="83.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.3" y="94.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1179.3" y="67.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.3" y="78.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1179.3" y="51.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.3" y="62.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1179.3" y="35.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1180.5" y="275.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="286.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1180.5" y="259.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.5" y="270.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1180.5" y="243.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="254.0"></text>
</g>
<g>
<title>TypeOopPtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1180.5" y="227.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.5" y="238.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.10%)</title><rect x="1180.5" y="211.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1181.7" y="547.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.7" y="531.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.7" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.7" y="499.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.7" y="483.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.7" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.7" y="451.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1181.7" y="435.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.7" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1181.7" y="419.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1181.7" y="403.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1184.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1181.7" y="387.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1181.7" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1181.7" y="355.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.7" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.7" y="339.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.7" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="323.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.7" y="334.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1181.7" y="307.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.7" y="318.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.10%)</title><rect x="1181.7" y="291.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="302.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.10%)</title><rect x="1181.7" y="275.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.7" y="286.0"></text>
</g>
<g>
<title>Method::has_unloaded_classes_in_signature(methodHandle, Thread*) (1 samples, 0.10%)</title><rect x="1181.7" y="259.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="270.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1181.7" y="243.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="254.0"></text>
</g>
<g>
<title>Dictionary::find(int, unsigned int, Symbol*, ClassLoaderData*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1181.7" y="227.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.7" y="238.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.10%)</title><rect x="1181.7" y="211.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1184.7" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="531.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="499.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="467.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="451.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="435.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="419.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="371.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="355.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="339.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="323.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="307.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="291.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="275.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="259.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="243.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="227.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="211.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="195.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="179.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="163.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.9" y="147.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.9" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.9" y="131.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.9" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.9" y="115.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.9" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.9" y="99.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.9" y="83.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.9" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.9" y="67.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.9" y="78.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1184.1" y="643.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1184.1" y="627.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1184.1" y="611.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1184.1" y="595.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1184.1" y="579.0" width="3.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1184.1" y="563.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1184.1" y="547.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.30%)</title><rect x="1184.1" y="531.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.30%)</title><rect x="1184.1" y="515.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.30%)</title><rect x="1184.1" y="499.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.30%)</title><rect x="1184.1" y="483.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.30%)</title><rect x="1184.1" y="467.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.30%)</title><rect x="1184.1" y="451.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1184.1" y="435.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1187.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1184.1" y="419.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1184.1" y="403.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1184.1" y="387.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1184.1" y="371.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1184.1" y="355.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1184.1" y="339.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1184.1" y="323.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.1" y="307.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.1" y="291.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.1" y="275.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.1" y="286.0"></text>
</g>
<g>
<title>AddINode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1184.1" y="259.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1185.3" y="307.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.3" y="318.0"></text>
</g>
<g>
<title>ReplacedNodes::apply(Node*) (1 samples, 0.10%)</title><rect x="1185.3" y="291.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.3" y="302.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1185.3" y="275.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.3" y="286.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1186.4" y="435.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.4" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.4" y="419.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.4" y="430.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1186.4" y="403.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="414.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.4" y="387.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="398.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.10%)</title><rect x="1186.4" y="371.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.4" y="382.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.10%)</title><rect x="1186.4" y="355.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.4" y="366.0"></text>
</g>
<g>
<title>ResourceMark::~ResourceMark() (1 samples, 0.10%)</title><rect x="1186.4" y="339.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.4" y="350.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.20%)</title><rect x="1187.6" y="835.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.6" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.20%)</title><rect x="1187.6" y="819.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.10%)</title><rect x="1187.6" y="803.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.6" y="814.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="803.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="787.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="771.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="739.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::redirty_logged_cards() (1 samples, 0.10%)</title><rect x="1188.8" y="723.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="734.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.10%)</title><rect x="1188.8" y="707.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="718.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.10%)</title><rect x="1188.8" y="691.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="702.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.10%)</title><rect x="1188.8" y="675.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.10%)</title><rect x="1188.8" y="659.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1191.8" y="670.0"></text>
</g>
</g>
</svg>
