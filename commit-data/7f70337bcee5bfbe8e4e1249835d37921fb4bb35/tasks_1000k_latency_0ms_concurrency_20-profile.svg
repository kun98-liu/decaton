<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (732 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.14%)</title><rect x="10.0" y="947.0" width="1.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.14%)</title><rect x="10.0" y="931.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.14%)</title><rect x="10.0" y="915.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.14%)</title><rect x="10.0" y="899.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (1 samples, 0.14%)</title><rect x="10.0" y="883.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (185 samples, 25.27%)</title><rect x="11.6" y="947.0" width="298.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.6" y="958.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (185 samples, 25.27%)</title><rect x="11.6" y="931.0" width="298.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.6" y="942.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (184 samples, 25.14%)</title><rect x="11.6" y="915.0" width="296.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="14.6" y="926.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.14%)</title><rect x="11.6" y="899.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.6" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.14%)</title><rect x="11.6" y="883.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.6" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.14%)</title><rect x="11.6" y="867.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.6" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/1611338891.accept (1 samples, 0.14%)</title><rect x="11.6" y="851.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.14%)</title><rect x="11.6" y="835.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.14%)</title><rect x="11.6" y="819.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.6" y="830.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.14%)</title><rect x="11.6" y="803.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.6" y="814.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (146 samples, 19.95%)</title><rect x="13.2" y="899.0" width="235.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.2" y="910.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1790925638.accept (144 samples, 19.67%)</title><rect x="13.2" y="883.0" width="232.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="894.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (144 samples, 19.67%)</title><rect x="13.2" y="867.0" width="232.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="878.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (126 samples, 17.21%)</title><rect x="13.2" y="851.0" width="203.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.2" y="862.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (126 samples, 17.21%)</title><rect x="13.2" y="835.0" width="203.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.2" y="846.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (126 samples, 17.21%)</title><rect x="13.2" y="819.0" width="203.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.2" y="830.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (126 samples, 17.21%)</title><rect x="13.2" y="803.0" width="203.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="814.0">java/util/concurrent/Execut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (126 samples, 17.21%)</title><rect x="13.2" y="787.0" width="203.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.2" y="798.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (126 samples, 17.21%)</title><rect x="13.2" y="771.0" width="203.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="782.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (89 samples, 12.16%)</title><rect x="13.2" y="755.0" width="143.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.2" y="766.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (11 samples, 1.50%)</title><rect x="13.2" y="739.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (11 samples, 1.50%)</title><rect x="13.2" y="723.0" width="17.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="16.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (11 samples, 1.50%)</title><rect x="13.2" y="707.0" width="17.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (78 samples, 10.66%)</title><rect x="31.0" y="739.0" width="125.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.0" y="750.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (78 samples, 10.66%)</title><rect x="31.0" y="723.0" width="125.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.0" y="734.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (78 samples, 10.66%)</title><rect x="31.0" y="707.0" width="125.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.0" y="718.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (78 samples, 10.66%)</title><rect x="31.0" y="691.0" width="125.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.0" y="702.0">java/util/concu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (76 samples, 10.38%)</title><rect x="34.2" y="675.0" width="122.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.2" y="686.0">jdk/internal/mi..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.14%)</title><rect x="34.2" y="659.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="37.2" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (37 samples, 5.05%)</title><rect x="35.8" y="659.0" width="59.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="38.8" y="670.0">Unsafe..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.41%)</title><rect x="45.5" y="643.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="48.5" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.14%)</title><rect x="50.3" y="643.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="53.3" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.68%)</title><rect x="51.9" y="643.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="54.9" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.27%)</title><rect x="60.0" y="643.0" width="3.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="63.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (7 samples, 0.96%)</title><rect x="63.2" y="643.0" width="11.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="66.2" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.50%)</title><rect x="74.5" y="643.0" width="17.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="77.5" y="654.0"></text>
</g>
<g>
<title>update_get_addr (2 samples, 0.27%)</title><rect x="92.2" y="643.0" width="3.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="95.2" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (38 samples, 5.19%)</title><rect x="95.4" y="659.0" width="61.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="98.4" y="670.0">__pthr..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.14%)</title><rect x="156.7" y="755.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.14%)</title><rect x="156.7" y="739.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.7" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.14%)</title><rect x="156.7" y="723.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (36 samples, 4.92%)</title><rect x="158.3" y="755.0" width="58.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="161.3" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (36 samples, 4.92%)</title><rect x="158.3" y="739.0" width="58.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.3" y="750.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (36 samples, 4.92%)</title><rect x="158.3" y="723.0" width="58.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.3" y="734.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (36 samples, 4.92%)</title><rect x="158.3" y="707.0" width="58.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="161.3" y="718.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (13 samples, 1.78%)</title><rect x="216.3" y="851.0" width="21.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="219.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (13 samples, 1.78%)</title><rect x="216.3" y="835.0" width="21.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="219.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.78%)</title><rect x="216.3" y="819.0" width="21.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="219.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.78%)</title><rect x="216.3" y="803.0" width="21.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="219.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.41%)</title><rect x="232.5" y="787.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="235.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.41%)</title><rect x="232.5" y="771.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.41%)</title><rect x="237.3" y="851.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="240.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.41%)</title><rect x="237.3" y="835.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.41%)</title><rect x="237.3" y="819.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (3 samples, 0.41%)</title><rect x="237.3" y="803.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.3" y="814.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (3 samples, 0.41%)</title><rect x="237.3" y="787.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="240.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.41%)</title><rect x="237.3" y="771.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.3" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.41%)</title><rect x="237.3" y="755.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.27%)</title><rect x="242.1" y="851.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.27%)</title><rect x="242.1" y="835.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="245.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.14%)</title><rect x="243.7" y="819.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.14%)</title><rect x="243.7" y="803.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (1 samples, 0.14%)</title><rect x="245.4" y="883.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.4" y="894.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (1 samples, 0.14%)</title><rect x="245.4" y="867.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="248.4" y="878.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableCollection (1 samples, 0.14%)</title><rect x="245.4" y="851.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="248.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.14%)</title><rect x="247.0" y="883.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.14%)</title><rect x="247.0" y="867.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.14%)</title><rect x="247.0" y="851.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (37 samples, 5.05%)</title><rect x="248.6" y="899.0" width="59.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.6" y="910.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (36 samples, 4.92%)</title><rect x="248.6" y="883.0" width="58.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.6" y="894.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (25 samples, 3.42%)</title><rect x="250.2" y="867.0" width="40.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.2" y="878.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (25 samples, 3.42%)</title><rect x="250.2" y="851.0" width="40.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.2" y="862.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 3.42%)</title><rect x="250.2" y="835.0" width="40.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.2" y="846.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.14%)</title><rect x="250.2" y="819.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.14%)</title><rect x="250.2" y="803.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.2" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.14%)</title><rect x="250.2" y="787.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="253.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.14%)</title><rect x="250.2" y="771.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.2" y="782.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (1 samples, 0.14%)</title><rect x="250.2" y="755.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="253.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (20 samples, 2.73%)</title><rect x="251.8" y="819.0" width="32.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.8" y="830.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 2.73%)</title><rect x="251.8" y="803.0" width="32.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.8" y="814.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.64%)</title><rect x="255.0" y="787.0" width="19.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.14%)</title><rect x="255.0" y="771.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="258.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.14%)</title><rect x="255.0" y="755.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.14%)</title><rect x="255.0" y="739.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.14%)</title><rect x="255.0" y="723.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.14%)</title><rect x="255.0" y="707.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.14%)</title><rect x="255.0" y="691.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.14%)</title><rect x="255.0" y="675.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.14%)</title><rect x="255.0" y="659.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.0" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.14%)</title><rect x="255.0" y="643.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="258.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeBasic (1 samples, 0.14%)</title><rect x="255.0" y="627.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="258.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 1.37%)</title><rect x="256.6" y="771.0" width="16.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="259.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (10 samples, 1.37%)</title><rect x="256.6" y="755.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (10 samples, 1.37%)</title><rect x="256.6" y="739.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (10 samples, 1.37%)</title><rect x="256.6" y="723.0" width="16.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (5 samples, 0.68%)</title><rect x="264.7" y="707.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.7" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.14%)</title><rect x="272.8" y="771.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.8" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.14%)</title><rect x="272.8" y="755.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="275.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.14%)</title><rect x="272.8" y="739.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="275.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.14%)</title><rect x="272.8" y="723.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.8" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.14%)</title><rect x="272.8" y="707.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.8" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.14%)</title><rect x="272.8" y="691.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="275.8" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (6 samples, 0.82%)</title><rect x="274.4" y="787.0" width="9.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="277.4" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.68%)</title><rect x="276.0" y="771.0" width="8.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="279.0" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.68%)</title><rect x="276.0" y="755.0" width="8.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="279.0" y="766.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.68%)</title><rect x="276.0" y="739.0" width="8.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.14%)</title><rect x="282.4" y="723.0" width="1.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="285.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (3 samples, 0.41%)</title><rect x="284.0" y="819.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (3 samples, 0.41%)</title><rect x="284.0" y="803.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.14%)</title><rect x="284.0" y="787.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.14%)</title><rect x="284.0" y="771.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="287.0" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.14%)</title><rect x="284.0" y="755.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.27%)</title><rect x="285.7" y="787.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="288.7" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.27%)</title><rect x="285.7" y="771.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="288.7" y="782.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.27%)</title><rect x="285.7" y="755.0" width="3.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="288.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.14%)</title><rect x="288.9" y="819.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="291.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 0.55%)</title><rect x="290.5" y="867.0" width="6.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.41%)</title><rect x="290.5" y="851.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.41%)</title><rect x="290.5" y="835.0" width="4.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="293.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.14%)</title><rect x="290.5" y="819.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.5" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.14%)</title><rect x="292.1" y="819.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="295.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.14%)</title><rect x="292.1" y="803.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.14%)</title><rect x="292.1" y="787.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.14%)</title><rect x="292.1" y="771.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="295.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.14%)</title><rect x="292.1" y="755.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="295.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.14%)</title><rect x="292.1" y="739.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.14%)</title><rect x="292.1" y="723.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="295.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.14%)</title><rect x="293.7" y="819.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.7" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.14%)</title><rect x="293.7" y="803.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.7" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.14%)</title><rect x="293.7" y="787.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="296.7" y="798.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.14%)</title><rect x="293.7" y="771.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="296.7" y="782.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.14%)</title><rect x="293.7" y="755.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="296.7" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.14%)</title><rect x="293.7" y="739.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="296.7" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.14%)</title><rect x="293.7" y="723.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="296.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.14%)</title><rect x="295.3" y="851.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.rejoinNeededOrPending (1 samples, 0.14%)</title><rect x="295.3" y="835.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="298.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.subscription (1 samples, 0.14%)</title><rect x="295.3" y="819.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.14%)</title><rect x="296.9" y="867.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.hasInFlightRequests (1 samples, 0.14%)</title><rect x="296.9" y="851.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.isEmpty (1 samples, 0.14%)</title><rect x="296.9" y="835.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.9" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.14%)</title><rect x="296.9" y="819.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.14%)</title><rect x="298.6" y="867.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="301.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.14%)</title><rect x="298.6" y="851.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.14%)</title><rect x="298.6" y="835.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.14%)</title><rect x="298.6" y="819.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="301.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.14%)</title><rect x="298.6" y="803.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.14%)</title><rect x="298.6" y="787.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.14%)</title><rect x="298.6" y="771.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="301.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.14%)</title><rect x="298.6" y="755.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="301.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.14%)</title><rect x="298.6" y="739.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.14%)</title><rect x="298.6" y="723.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.6" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.14%)</title><rect x="298.6" y="707.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.14%)</title><rect x="298.6" y="691.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.6" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.14%)</title><rect x="298.6" y="675.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="301.6" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.14%)</title><rect x="298.6" y="659.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="301.6" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="298.6" y="643.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="301.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.14%)</title><rect x="298.6" y="627.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="301.6" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.14%)</title><rect x="298.6" y="611.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="301.6" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.14%)</title><rect x="298.6" y="595.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="301.6" y="606.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::set_for_starts_humongous(HeapWord*, unsigned long) (1 samples, 0.14%)</title><rect x="298.6" y="579.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.6" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.41%)</title><rect x="300.2" y="867.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.41%)</title><rect x="300.2" y="851.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.27%)</title><rect x="301.8" y="835.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (2 samples, 0.27%)</title><rect x="301.8" y="819.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.8" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.14%)</title><rect x="301.8" y="803.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.8" y="814.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.14%)</title><rect x="301.8" y="787.0" width="1.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="304.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.14%)</title><rect x="303.4" y="803.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="306.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.14%)</title><rect x="305.0" y="867.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="308.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.14%)</title><rect x="305.0" y="851.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.14%)</title><rect x="305.0" y="835.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="308.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.14%)</title><rect x="306.6" y="883.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Time.timer (1 samples, 0.14%)</title><rect x="306.6" y="867.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="309.6" y="878.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.14%)</title><rect x="306.6" y="851.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="309.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.14%)</title><rect x="306.6" y="835.0" width="1.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="309.6" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.14%)</title><rect x="308.2" y="915.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="311.2" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.14%)</title><rect x="308.2" y="899.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="311.2" y="910.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.14%)</title><rect x="308.2" y="883.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.2" y="894.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.14%)</title><rect x="308.2" y="867.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="311.2" y="878.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.14%)</title><rect x="308.2" y="851.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.2" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.14%)</title><rect x="308.2" y="835.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.2" y="846.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.14%)</title><rect x="308.2" y="819.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="311.2" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.14%)</title><rect x="308.2" y="803.0" width="1.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="311.2" y="814.0"></text>
</g>
<g>
<title>java/lang/Thread.run (520 samples, 71.04%)</title><rect x="309.8" y="947.0" width="838.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="312.8" y="958.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (520 samples, 71.04%)</title><rect x="309.8" y="931.0" width="838.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.8" y="942.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (520 samples, 71.04%)</title><rect x="309.8" y="915.0" width="838.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.8" y="926.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/1626204377.run (337 samples, 46.04%)</title><rect x="313.1" y="899.0" width="543.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="316.1" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/1..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (337 samples, 46.04%)</title><rect x="313.1" y="883.0" width="543.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.1" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (337 samples, 46.04%)</title><rect x="313.1" y="867.0" width="543.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="316.1" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (337 samples, 46.04%)</title><rect x="313.1" y="851.0" width="543.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.1" y="862.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.27%)</title><rect x="327.6" y="835.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.6" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.27%)</title><rect x="327.6" y="819.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="330.6" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.27%)</title><rect x="327.6" y="803.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.6" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.27%)</title><rect x="327.6" y="787.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="330.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (43 samples, 5.87%)</title><rect x="330.8" y="835.0" width="69.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.8" y="846.0">com/lin..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (43 samples, 5.87%)</title><rect x="330.8" y="819.0" width="69.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="333.8" y="830.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (43 samples, 5.87%)</title><rect x="330.8" y="803.0" width="69.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="333.8" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 4.37%)</title><rect x="348.5" y="787.0" width="51.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="351.5" y="798.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.68%)</title><rect x="348.5" y="771.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="351.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/405268599.accept (1 samples, 0.14%)</title><rect x="351.7" y="755.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.7" y="766.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.27%)</title><rect x="353.4" y="755.0" width="3.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="356.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (27 samples, 3.69%)</title><rect x="356.6" y="771.0" width="43.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.6" y="782.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/405268599.accept (27 samples, 3.69%)</title><rect x="356.6" y="755.0" width="43.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.6" y="766.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (27 samples, 3.69%)</title><rect x="356.6" y="739.0" width="43.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="359.6" y="750.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$469/1118265715.accept (2 samples, 0.27%)</title><rect x="358.2" y="723.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="361.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$468/1414846326.accept (1 samples, 0.14%)</title><rect x="361.4" y="723.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="364.4" y="734.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.14%)</title><rect x="363.0" y="723.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="366.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (22 samples, 3.01%)</title><rect x="364.6" y="723.0" width="35.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="367.6" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (22 samples, 3.01%)</title><rect x="364.6" y="707.0" width="35.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="367.6" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (22 samples, 3.01%)</title><rect x="364.6" y="691.0" width="35.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.6" y="702.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (4 samples, 0.55%)</title><rect x="364.6" y="675.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="367.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (18 samples, 2.46%)</title><rect x="371.1" y="675.0" width="29.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="374.1" y="686.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$468/1414846326.accept (1 samples, 0.14%)</title><rect x="398.5" y="659.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="401.5" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (82 samples, 11.20%)</title><rect x="400.1" y="835.0" width="132.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="403.1" y="846.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (82 samples, 11.20%)</title><rect x="400.1" y="819.0" width="132.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="403.1" y="830.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (82 samples, 11.20%)</title><rect x="400.1" y="803.0" width="132.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="403.1" y="814.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (81 samples, 11.07%)</title><rect x="400.1" y="787.0" width="130.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="403.1" y="798.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (81 samples, 11.07%)</title><rect x="400.1" y="771.0" width="130.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="403.1" y="782.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (81 samples, 11.07%)</title><rect x="400.1" y="755.0" width="130.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="403.1" y="766.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (28 samples, 3.83%)</title><rect x="400.1" y="739.0" width="45.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="403.1" y="750.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.55%)</title><rect x="400.1" y="723.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="403.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.14%)</title><rect x="400.1" y="707.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="403.1" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.14%)</title><rect x="400.1" y="691.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="403.1" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.14%)</title><rect x="400.1" y="675.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="403.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="400.1" y="659.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="403.1" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.14%)</title><rect x="400.1" y="643.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="403.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.41%)</title><rect x="401.7" y="707.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.7" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.41%)</title><rect x="401.7" y="691.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.7" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.41%)</title><rect x="401.7" y="675.0" width="4.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="404.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (3 samples, 0.41%)</title><rect x="401.7" y="659.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.7" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.14%)</title><rect x="403.3" y="643.0" width="1.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="406.3" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.14%)</title><rect x="403.3" y="627.0" width="1.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="406.3" y="638.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.14%)</title><rect x="404.9" y="643.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="407.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (24 samples, 3.28%)</title><rect x="406.6" y="723.0" width="38.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="409.6" y="734.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (24 samples, 3.28%)</title><rect x="406.6" y="707.0" width="38.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.6" y="718.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.55%)</title><rect x="430.7" y="691.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="433.7" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.55%)</title><rect x="430.7" y="675.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.55%)</title><rect x="430.7" y="659.0" width="6.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="433.7" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.55%)</title><rect x="430.7" y="643.0" width="6.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="433.7" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.55%)</title><rect x="430.7" y="627.0" width="6.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="433.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.41%)</title><rect x="430.7" y="611.0" width="4.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="433.7" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.27%)</title><rect x="432.3" y="595.0" width="3.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="435.3" y="606.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.27%)</title><rect x="432.3" y="579.0" width="3.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="435.3" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.27%)</title><rect x="432.3" y="563.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="435.3" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.14%)</title><rect x="432.3" y="547.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="435.3" y="558.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.14%)</title><rect x="434.0" y="547.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="437.0" y="558.0"></text>
</g>
<g>
<title>HeapRegionType::get_trace_type() (1 samples, 0.14%)</title><rect x="434.0" y="531.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="437.0" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.14%)</title><rect x="435.6" y="611.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="438.6" y="622.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.14%)</title><rect x="435.6" y="595.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="438.6" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.55%)</title><rect x="437.2" y="691.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="440.2" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.14%)</title><rect x="442.0" y="675.0" width="1.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="445.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.14%)</title><rect x="443.6" y="691.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.14%)</title><rect x="443.6" y="675.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (51 samples, 6.97%)</title><rect x="445.2" y="739.0" width="82.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="448.2" y="750.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.68%)</title><rect x="445.2" y="723.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="448.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.68%)</title><rect x="445.2" y="707.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.14%)</title><rect x="451.7" y="691.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="454.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.96%)</title><rect x="453.3" y="723.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.55%)</title><rect x="456.5" y="707.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="459.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (3 samples, 0.41%)</title><rect x="456.5" y="691.0" width="4.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="459.5" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.41%)</title><rect x="456.5" y="675.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="459.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.14%)</title><rect x="461.4" y="691.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="464.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.14%)</title><rect x="461.4" y="675.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.14%)</title><rect x="461.4" y="659.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.4" y="670.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.14%)</title><rect x="463.0" y="707.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.55%)</title><rect x="464.6" y="723.0" width="6.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="467.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.55%)</title><rect x="464.6" y="707.0" width="6.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.6" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.41%)</title><rect x="464.6" y="691.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.6" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.41%)</title><rect x="464.6" y="675.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="467.6" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.41%)</title><rect x="464.6" y="659.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="467.6" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.41%)</title><rect x="464.6" y="643.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.6" y="654.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.14%)</title><rect x="464.6" y="627.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="467.6" y="638.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.14%)</title><rect x="464.6" y="611.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="467.6" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.14%)</title><rect x="466.2" y="627.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="469.2" y="638.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.14%)</title><rect x="466.2" y="611.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="469.2" y="622.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.14%)</title><rect x="467.8" y="627.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="470.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.14%)</title><rect x="469.4" y="691.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="472.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.14%)</title><rect x="469.4" y="675.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="472.4" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.14%)</title><rect x="469.4" y="659.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="472.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.14%)</title><rect x="469.4" y="643.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="472.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (35 samples, 4.78%)</title><rect x="471.0" y="723.0" width="56.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="474.0" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (35 samples, 4.78%)</title><rect x="471.0" y="707.0" width="56.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="474.0" y="718.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 1.09%)</title><rect x="474.3" y="691.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="477.3" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.27%)</title><rect x="474.3" y="675.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.3" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.27%)</title><rect x="474.3" y="659.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.27%)</title><rect x="474.3" y="643.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.82%)</title><rect x="477.5" y="675.0" width="9.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (25 samples, 3.42%)</title><rect x="487.2" y="691.0" width="40.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="490.2" y="702.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (25 samples, 3.42%)</title><rect x="487.2" y="675.0" width="40.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="490.2" y="686.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (25 samples, 3.42%)</title><rect x="487.2" y="659.0" width="40.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="490.2" y="670.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.50%)</title><rect x="498.4" y="643.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.27%)</title><rect x="500.1" y="627.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.1" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.27%)</title><rect x="500.1" y="611.0" width="3.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="503.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.82%)</title><rect x="503.3" y="627.0" width="9.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="506.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.82%)</title><rect x="503.3" y="611.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="506.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.82%)</title><rect x="503.3" y="595.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="506.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.27%)</title><rect x="509.7" y="579.0" width="3.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="512.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.14%)</title><rect x="513.0" y="627.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="516.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.14%)</title><rect x="514.6" y="627.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="517.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.14%)</title><rect x="514.6" y="611.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="517.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.14%)</title><rect x="514.6" y="595.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="517.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.82%)</title><rect x="516.2" y="643.0" width="9.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="519.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.82%)</title><rect x="516.2" y="627.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.82%)</title><rect x="516.2" y="611.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.2" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.82%)</title><rect x="516.2" y="595.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (6 samples, 0.82%)</title><rect x="516.2" y="579.0" width="9.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="519.2" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (6 samples, 0.82%)</title><rect x="516.2" y="563.0" width="9.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="519.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (6 samples, 0.82%)</title><rect x="516.2" y="547.0" width="9.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="519.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (6 samples, 0.82%)</title><rect x="516.2" y="531.0" width="9.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="519.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (6 samples, 0.82%)</title><rect x="516.2" y="515.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.14%)</title><rect x="525.8" y="643.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="528.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.14%)</title><rect x="525.8" y="627.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.14%)</title><rect x="525.8" y="611.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="528.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 0.27%)</title><rect x="527.5" y="739.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="530.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 0.27%)</title><rect x="527.5" y="723.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 0.27%)</title><rect x="527.5" y="707.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.27%)</title><rect x="527.5" y="691.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="530.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.27%)</title><rect x="527.5" y="675.0" width="3.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="530.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.14%)</title><rect x="530.7" y="787.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.7" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.14%)</title><rect x="530.7" y="771.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="533.7" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.14%)</title><rect x="530.7" y="755.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="533.7" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.14%)</title><rect x="530.7" y="739.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="533.7" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="530.7" y="723.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="533.7" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.14%)</title><rect x="530.7" y="707.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="533.7" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.14%)</title><rect x="530.7" y="691.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="533.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.14%)</title><rect x="530.7" y="675.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="533.7" y="686.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.14%)</title><rect x="530.7" y="659.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="533.7" y="670.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.14%)</title><rect x="530.7" y="643.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="533.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (194 samples, 26.50%)</title><rect x="532.3" y="835.0" width="312.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="535.3" y="846.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.55%)</title><rect x="535.5" y="819.0" width="6.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="538.5" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.55%)</title><rect x="535.5" y="803.0" width="6.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="538.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (26 samples, 3.55%)</title><rect x="542.0" y="819.0" width="41.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="545.0" y="830.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (26 samples, 3.55%)</title><rect x="542.0" y="803.0" width="41.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.0" y="814.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 3.28%)</title><rect x="545.2" y="787.0" width="38.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.2" y="798.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (15 samples, 2.05%)</title><rect x="546.8" y="771.0" width="24.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="549.8" y="782.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 1.37%)</title><rect x="554.9" y="755.0" width="16.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 1.37%)</title><rect x="554.9" y="739.0" width="16.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="557.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (10 samples, 1.37%)</title><rect x="554.9" y="723.0" width="16.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="557.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.68%)</title><rect x="571.0" y="771.0" width="8.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="574.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (5 samples, 0.68%)</title><rect x="571.0" y="755.0" width="8.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="574.0" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 0.41%)</title><rect x="579.0" y="771.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="582.0" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 0.41%)</title><rect x="579.0" y="755.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="582.0" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.41%)</title><rect x="579.0" y="739.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="582.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.41%)</title><rect x="579.0" y="723.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="582.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.41%)</title><rect x="579.0" y="707.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="582.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.27%)</title><rect x="583.9" y="819.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="586.9" y="830.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.14%)</title><rect x="585.5" y="803.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="588.5" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (102 samples, 13.93%)</title><rect x="587.1" y="819.0" width="164.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.1" y="830.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.14%)</title><rect x="587.1" y="803.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="590.1" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.14%)</title><rect x="587.1" y="787.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="590.1" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.14%)</title><rect x="587.1" y="771.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="590.1" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="587.1" y="755.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="590.1" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.14%)</title><rect x="587.1" y="739.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="590.1" y="750.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.14%)</title><rect x="587.1" y="723.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="590.1" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (99 samples, 13.52%)</title><rect x="588.7" y="803.0" width="159.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="591.7" y="814.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (31 samples, 4.23%)</title><rect x="608.1" y="787.0" width="49.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="611.1" y="798.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (12 samples, 1.64%)</title><rect x="625.8" y="771.0" width="19.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="628.8" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (12 samples, 1.64%)</title><rect x="625.8" y="755.0" width="19.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="628.8" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.14%)</title><rect x="638.7" y="739.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="641.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.14%)</title><rect x="638.7" y="723.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.7" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.27%)</title><rect x="640.3" y="739.0" width="3.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="643.3" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.14%)</title><rect x="643.5" y="739.0" width="1.6" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="646.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (2 samples, 0.27%)</title><rect x="645.1" y="771.0" width="3.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="648.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2 samples, 0.27%)</title><rect x="645.1" y="755.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="648.1" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.27%)</title><rect x="645.1" y="739.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.1" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.27%)</title><rect x="645.1" y="723.0" width="3.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="648.1" y="734.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.14%)</title><rect x="646.7" y="707.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="649.7" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.14%)</title><rect x="646.7" y="691.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="649.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="646.7" y="675.0" width="1.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="649.7" y="686.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.14%)</title><rect x="646.7" y="659.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="649.7" y="670.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.14%)</title><rect x="648.4" y="771.0" width="1.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="651.4" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.68%)</title><rect x="650.0" y="771.0" width="8.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="653.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.14%)</title><rect x="658.0" y="787.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="661.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.14%)</title><rect x="658.0" y="771.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="661.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.14%)</title><rect x="658.0" y="755.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="661.0" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.14%)</title><rect x="658.0" y="739.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="661.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.14%)</title><rect x="658.0" y="723.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="661.0" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="658.0" y="707.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="661.0" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.14%)</title><rect x="658.0" y="691.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="661.0" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.14%)</title><rect x="658.0" y="675.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="661.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.14%)</title><rect x="658.0" y="659.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="661.0" y="670.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.14%)</title><rect x="658.0" y="643.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="661.0" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.14%)</title><rect x="658.0" y="627.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="661.0" y="638.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.14%)</title><rect x="658.0" y="611.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="661.0" y="622.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.14%)</title><rect x="658.0" y="595.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="661.0" y="606.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (1 samples, 0.14%)</title><rect x="658.0" y="579.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="661.0" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.14%)</title><rect x="659.6" y="787.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="662.6" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.14%)</title><rect x="659.6" y="771.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (1 samples, 0.14%)</title><rect x="659.6" y="755.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="662.6" y="766.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (54 samples, 7.38%)</title><rect x="661.3" y="787.0" width="87.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.3" y="798.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (52 samples, 7.10%)</title><rect x="664.5" y="771.0" width="83.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="667.5" y="782.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 3.01%)</title><rect x="664.5" y="755.0" width="35.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="667.5" y="766.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 1.78%)</title><rect x="679.0" y="739.0" width="20.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="682.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 1.78%)</title><rect x="679.0" y="723.0" width="20.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="682.0" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (13 samples, 1.78%)</title><rect x="679.0" y="707.0" width="20.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="682.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (30 samples, 4.10%)</title><rect x="699.9" y="755.0" width="48.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="702.9" y="766.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (30 samples, 4.10%)</title><rect x="699.9" y="739.0" width="48.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.9" y="750.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.68%)</title><rect x="699.9" y="723.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.68%)</title><rect x="699.9" y="707.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="702.9" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.68%)</title><rect x="699.9" y="691.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.9" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.27%)</title><rect x="704.8" y="675.0" width="3.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="707.8" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (25 samples, 3.42%)</title><rect x="708.0" y="723.0" width="40.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.0" y="734.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.newNode (10 samples, 1.37%)</title><rect x="725.7" y="707.0" width="16.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="728.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.14%)</title><rect x="740.2" y="691.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="743.2" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.14%)</title><rect x="740.2" y="675.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="743.2" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.14%)</title><rect x="740.2" y="659.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="743.2" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="740.2" y="643.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="743.2" y="654.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.14%)</title><rect x="740.2" y="627.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="743.2" y="638.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.55%)</title><rect x="741.9" y="707.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="744.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.27%)</title><rect x="748.3" y="803.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="751.3" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.27%)</title><rect x="748.3" y="787.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="751.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.27%)</title><rect x="748.3" y="771.0" width="3.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.14%)</title><rect x="748.3" y="755.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="751.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.14%)</title><rect x="749.9" y="755.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="752.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (41 samples, 5.60%)</title><rect x="751.5" y="819.0" width="66.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="754.5" y="830.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (41 samples, 5.60%)</title><rect x="751.5" y="803.0" width="66.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="754.5" y="814.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$398/1746466348.process (1 samples, 0.14%)</title><rect x="759.6" y="787.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (1 samples, 0.14%)</title><rect x="759.6" y="771.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="762.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (1 samples, 0.14%)</title><rect x="759.6" y="755.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="762.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (9 samples, 1.23%)</title><rect x="761.2" y="787.0" width="14.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="764.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.27%)</title><rect x="775.7" y="787.0" width="3.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="778.7" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.14%)</title><rect x="775.7" y="771.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="778.7" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.14%)</title><rect x="775.7" y="755.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="778.7" y="766.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.14%)</title><rect x="775.7" y="739.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="778.7" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.14%)</title><rect x="775.7" y="723.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="778.7" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.14%)</title><rect x="775.7" y="707.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.7" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.14%)</title><rect x="775.7" y="691.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="778.7" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.14%)</title><rect x="775.7" y="675.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.7" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.14%)</title><rect x="775.7" y="659.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="778.7" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.14%)</title><rect x="775.7" y="643.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.14%)</title><rect x="775.7" y="627.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="778.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.14%)</title><rect x="775.7" y="611.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="778.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.14%)</title><rect x="777.3" y="771.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="780.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.14%)</title><rect x="777.3" y="755.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (1 samples, 0.14%)</title><rect x="777.3" y="739.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="780.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.14%)</title><rect x="777.3" y="723.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="780.3" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.14%)</title><rect x="777.3" y="707.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.3" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (3 samples, 0.41%)</title><rect x="778.9" y="787.0" width="4.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$471/115810480.get (3 samples, 0.41%)</title><rect x="778.9" y="771.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$0 (3 samples, 0.41%)</title><rect x="778.9" y="755.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="781.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.14%)</title><rect x="780.5" y="739.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="783.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.14%)</title><rect x="782.2" y="739.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="785.2" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 1.09%)</title><rect x="783.8" y="787.0" width="12.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.8" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.14%)</title><rect x="785.4" y="771.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="788.4" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.82%)</title><rect x="787.0" y="771.0" width="9.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="790.0" y="782.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.68%)</title><rect x="788.6" y="755.0" width="8.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="791.6" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (4 samples, 0.55%)</title><rect x="796.7" y="787.0" width="6.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.7" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (2 samples, 0.27%)</title><rect x="799.9" y="771.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="802.9" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.27%)</title><rect x="803.1" y="787.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="806.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.96%)</title><rect x="806.3" y="787.0" width="11.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="809.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.96%)</title><rect x="806.3" y="771.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="809.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.96%)</title><rect x="806.3" y="755.0" width="11.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="809.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.41%)</title><rect x="806.3" y="739.0" width="4.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="809.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$476/77621502.accept (1 samples, 0.14%)</title><rect x="809.6" y="723.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="812.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.55%)</title><rect x="811.2" y="739.0" width="6.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 2.32%)</title><rect x="817.6" y="819.0" width="27.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.6" y="830.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (17 samples, 2.32%)</title><rect x="817.6" y="803.0" width="27.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="820.6" y="814.0">j..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.82%)</title><rect x="825.7" y="787.0" width="9.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="828.7" y="798.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.82%)</title><rect x="825.7" y="771.0" width="9.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="828.7" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.82%)</title><rect x="835.4" y="787.0" width="9.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.14%)</title><rect x="835.4" y="771.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="838.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$481/383780059.accept (1 samples, 0.14%)</title><rect x="835.4" y="755.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="838.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.68%)</title><rect x="837.0" y="771.0" width="8.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="840.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$481/383780059.accept (5 samples, 0.68%)</title><rect x="837.0" y="755.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.0" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.14%)</title><rect x="843.4" y="739.0" width="1.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="846.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.14%)</title><rect x="843.4" y="723.0" width="1.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="846.4" y="734.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.96%)</title><rect x="845.0" y="835.0" width="11.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="848.0" y="846.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.82%)</title><rect x="846.6" y="819.0" width="9.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="849.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.41%)</title><rect x="856.3" y="899.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="859.3" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.41%)</title><rect x="856.3" y="883.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="859.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.41%)</title><rect x="856.3" y="867.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="859.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.41%)</title><rect x="856.3" y="851.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="859.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (178 samples, 24.32%)</title><rect x="861.1" y="899.0" width="287.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="864.1" y="910.0">java/util/concurrent/ThreadPoolExecuto..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (177 samples, 24.18%)</title><rect x="862.8" y="883.0" width="285.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="865.8" y="894.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (165 samples, 22.54%)</title><rect x="862.8" y="867.0" width="265.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="865.8" y="878.0">java/util/concurrent/locks/Abstract..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.82%)</title><rect x="864.4" y="851.0" width="9.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="867.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (1 samples, 0.14%)</title><rect x="872.4" y="835.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="875.4" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.14%)</title><rect x="872.4" y="819.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.4" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (1 samples, 0.14%)</title><rect x="872.4" y="803.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="875.4" y="814.0"></text>
</g>
<g>
<title>java/util/Objects.requireNonNull (1 samples, 0.14%)</title><rect x="872.4" y="787.0" width="1.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="875.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.checkInterruptWhileWaiting (1 samples, 0.14%)</title><rect x="874.0" y="851.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="877.0" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (1 samples, 0.14%)</title><rect x="874.0" y="835.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="877.0" y="846.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.14%)</title><rect x="874.0" y="819.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.0" y="830.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (1 samples, 0.14%)</title><rect x="874.0" y="803.0" width="1.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="877.0" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.14%)</title><rect x="874.0" y="787.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="877.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (13 samples, 1.78%)</title><rect x="875.7" y="851.0" width="20.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.14%)</title><rect x="896.6" y="851.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="899.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.14%)</title><rect x="896.6" y="835.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="899.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.14%)</title><rect x="896.6" y="819.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="899.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.68%)</title><rect x="898.2" y="851.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="901.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.68%)</title><rect x="898.2" y="835.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="901.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (138 samples, 18.85%)</title><rect x="906.3" y="851.0" width="222.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="909.3" y="862.0">java/util/concurrent/locks/Lo..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (138 samples, 18.85%)</title><rect x="906.3" y="835.0" width="222.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="909.3" y="846.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.27%)</title><rect x="907.9" y="819.0" width="3.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="910.9" y="830.0"></text>
</g>
<g>
<title>Unsafe_Park (131 samples, 17.90%)</title><rect x="911.1" y="819.0" width="211.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="914.1" y="830.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.27%)</title><rect x="911.1" y="803.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="914.1" y="814.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.14%)</title><rect x="914.3" y="803.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="917.3" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.14%)</title><rect x="916.0" y="803.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="919.0" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 2.19%)</title><rect x="917.6" y="803.0" width="25.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="920.6" y="814.0">P..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.82%)</title><rect x="924.0" y="787.0" width="9.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="927.0" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="928.9" y="771.0" width="1.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="931.9" y="782.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.14%)</title><rect x="930.5" y="771.0" width="1.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="933.5" y="782.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.14%)</title><rect x="932.1" y="771.0" width="1.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="935.1" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.41%)</title><rect x="933.7" y="787.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="936.7" y="798.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.14%)</title><rect x="938.5" y="787.0" width="1.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="941.5" y="798.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.14%)</title><rect x="940.1" y="787.0" width="1.6" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="943.1" y="798.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.14%)</title><rect x="941.7" y="787.0" width="1.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="944.7" y="798.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (7 samples, 0.96%)</title><rect x="943.4" y="803.0" width="11.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="946.4" y="814.0"></text>
</g>
<g>
<title>__lll_unlock_wake (35 samples, 4.78%)</title><rect x="954.6" y="803.0" width="56.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="957.6" y="814.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 8.20%)</title><rect x="1011.1" y="803.0" width="96.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1014.1" y="814.0">__pthread_c..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.27%)</title><rect x="1107.8" y="803.0" width="3.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1110.8" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.14%)</title><rect x="1111.0" y="803.0" width="1.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1114.0" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.14%)</title><rect x="1112.6" y="803.0" width="1.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1115.6" y="814.0"></text>
</g>
<g>
<title>_init (2 samples, 0.27%)</title><rect x="1114.2" y="803.0" width="3.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1117.2" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.14%)</title><rect x="1117.5" y="803.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1120.5" y="814.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.14%)</title><rect x="1119.1" y="803.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.1" y="814.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.14%)</title><rect x="1120.7" y="803.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.7" y="814.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.41%)</title><rect x="1122.3" y="819.0" width="4.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1125.3" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.14%)</title><rect x="1127.1" y="819.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.14%)</title><rect x="1128.7" y="867.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1131.7" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (11 samples, 1.50%)</title><rect x="1130.4" y="867.0" width="17.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1133.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (11 samples, 1.50%)</title><rect x="1130.4" y="851.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1133.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.41%)</title><rect x="1143.3" y="835.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1146.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.41%)</title><rect x="1143.3" y="819.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1146.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.41%)</title><rect x="1143.3" y="803.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1146.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.14%)</title><rect x="1148.1" y="947.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1151.1" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.14%)</title><rect x="1148.1" y="931.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.1" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.14%)</title><rect x="1148.1" y="915.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1151.1" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.14%)</title><rect x="1148.1" y="899.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1151.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.14%)</title><rect x="1148.1" y="883.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1151.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.14%)</title><rect x="1148.1" y="867.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1151.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.14%)</title><rect x="1148.1" y="851.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1151.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.14%)</title><rect x="1148.1" y="835.0" width="1.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1151.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.14%)</title><rect x="1148.1" y="819.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1151.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.14%)</title><rect x="1148.1" y="803.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1151.1" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.14%)</title><rect x="1148.1" y="787.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1151.1" y="798.0"></text>
</g>
<g>
<title>start_thread (25 samples, 3.42%)</title><rect x="1149.7" y="947.0" width="40.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1152.7" y="958.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (25 samples, 3.42%)</title><rect x="1149.7" y="931.0" width="40.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1152.7" y="942.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (25 samples, 3.42%)</title><rect x="1149.7" y="915.0" width="40.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="926.0">Thr..</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.14%)</title><rect x="1149.7" y="899.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.7" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.14%)</title><rect x="1149.7" y="883.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.7" y="894.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.14%)</title><rect x="1149.7" y="867.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.7" y="878.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 3.28%)</title><rect x="1151.3" y="899.0" width="38.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="910.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 3.28%)</title><rect x="1151.3" y="883.0" width="38.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.3" y="894.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (24 samples, 3.28%)</title><rect x="1151.3" y="867.0" width="38.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="878.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (23 samples, 3.14%)</title><rect x="1151.3" y="851.0" width="37.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.3" y="862.0">C2C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (23 samples, 3.14%)</title><rect x="1151.3" y="835.0" width="37.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.3" y="846.0">Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (13 samples, 1.78%)</title><rect x="1151.3" y="819.0" width="21.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.3" y="830.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.14%)</title><rect x="1151.3" y="803.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.3" y="814.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.14%)</title><rect x="1151.3" y="787.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.3" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.14%)</title><rect x="1152.9" y="803.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1155.9" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.14%)</title><rect x="1152.9" y="787.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.9" y="798.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.14%)</title><rect x="1152.9" y="771.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1155.9" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.27%)</title><rect x="1154.5" y="803.0" width="3.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.5" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.27%)</title><rect x="1154.5" y="787.0" width="3.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.14%)</title><rect x="1154.5" y="771.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1157.5" y="782.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.14%)</title><rect x="1156.1" y="771.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1159.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (9 samples, 1.23%)</title><rect x="1157.8" y="803.0" width="14.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.8" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (2 samples, 0.27%)</title><rect x="1157.8" y="787.0" width="3.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.8" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.27%)</title><rect x="1157.8" y="771.0" width="3.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.8" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.14%)</title><rect x="1161.0" y="787.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.0" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.14%)</title><rect x="1161.0" y="771.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.0" y="782.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.14%)</title><rect x="1161.0" y="755.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.27%)</title><rect x="1162.6" y="787.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.6" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.27%)</title><rect x="1165.8" y="787.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1168.8" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.14%)</title><rect x="1167.4" y="771.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.4" y="782.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.14%)</title><rect x="1167.4" y="755.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.4" y="766.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.14%)</title><rect x="1167.4" y="739.0" width="1.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1170.4" y="750.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.27%)</title><rect x="1169.0" y="787.0" width="3.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1172.0" y="798.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.96%)</title><rect x="1172.3" y="819.0" width="11.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.3" y="830.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (2 samples, 0.27%)</title><rect x="1172.3" y="803.0" width="3.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.27%)</title><rect x="1172.3" y="787.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.3" y="798.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.14%)</title><rect x="1172.3" y="771.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.14%)</title><rect x="1172.3" y="755.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.14%)</title><rect x="1172.3" y="739.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="750.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.14%)</title><rect x="1172.3" y="723.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.3" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.14%)</title><rect x="1173.9" y="771.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.14%)</title><rect x="1173.9" y="755.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.14%)</title><rect x="1173.9" y="739.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.9" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.14%)</title><rect x="1175.5" y="803.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.14%)</title><rect x="1175.5" y="787.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="771.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="755.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="739.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="723.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="707.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="691.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="675.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="659.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="643.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="627.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="611.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1178.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="595.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="579.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="563.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1178.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="547.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1178.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="531.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="515.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="499.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="483.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="467.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="451.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="435.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="419.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="403.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="387.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="371.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="355.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="339.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="323.0" width="1.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="307.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="291.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="275.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="259.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="243.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.14%)</title><rect x="1175.5" y="227.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.5" y="238.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (1 samples, 0.14%)</title><rect x="1177.1" y="803.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.14%)</title><rect x="1177.1" y="787.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.14%)</title><rect x="1177.1" y="771.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.14%)</title><rect x="1177.1" y="755.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.14%)</title><rect x="1177.1" y="739.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.14%)</title><rect x="1177.1" y="723.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.14%)</title><rect x="1177.1" y="707.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.14%)</title><rect x="1177.1" y="691.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.14%)</title><rect x="1177.1" y="675.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.41%)</title><rect x="1178.7" y="803.0" width="4.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.7" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.41%)</title><rect x="1178.7" y="787.0" width="4.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.7" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.14%)</title><rect x="1178.7" y="771.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.7" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.14%)</title><rect x="1178.7" y="755.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.7" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.14%)</title><rect x="1178.7" y="739.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.7" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.14%)</title><rect x="1178.7" y="723.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.14%)</title><rect x="1178.7" y="707.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1181.7" y="718.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.14%)</title><rect x="1180.3" y="771.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.3" y="782.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.14%)</title><rect x="1181.9" y="771.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.41%)</title><rect x="1183.6" y="819.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.41%)</title><rect x="1183.6" y="803.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.41%)</title><rect x="1183.6" y="787.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.41%)</title><rect x="1183.6" y="771.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.41%)</title><rect x="1183.6" y="755.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.41%)</title><rect x="1183.6" y="739.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.6" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.41%)</title><rect x="1183.6" y="723.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.41%)</title><rect x="1183.6" y="707.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.41%)</title><rect x="1183.6" y="691.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.41%)</title><rect x="1183.6" y="675.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.41%)</title><rect x="1183.6" y="659.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.41%)</title><rect x="1183.6" y="643.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1183.6" y="627.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1183.6" y="611.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1183.6" y="595.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1183.6" y="579.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1183.6" y="563.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1183.6" y="547.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1183.6" y="531.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1183.6" y="515.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1183.6" y="499.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1183.6" y="483.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1183.6" y="467.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1183.6" y="451.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1183.6" y="435.0" width="1.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1183.6" y="419.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1183.6" y="403.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1183.6" y="387.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1183.6" y="371.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1183.6" y="355.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1183.6" y="339.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1183.6" y="323.0" width="1.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1183.6" y="307.0" width="1.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1183.6" y="291.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1183.6" y="275.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1183.6" y="259.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="270.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_return_for_speculation() (1 samples, 0.14%)</title><rect x="1183.6" y="243.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="254.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.14%)</title><rect x="1183.6" y="227.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="238.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.14%)</title><rect x="1183.6" y="211.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="222.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="627.0" width="1.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.2" y="638.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="611.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="595.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1185.2" y="579.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1185.2" y="563.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1185.2" y="547.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1185.2" y="531.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1185.2" y="515.0" width="1.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="499.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1185.2" y="483.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1185.2" y="467.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1185.2" y="451.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1185.2" y="435.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1185.2" y="419.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="403.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1185.2" y="387.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1185.2" y="371.0" width="1.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1185.2" y="355.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1185.2" y="339.0" width="1.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1185.2" y="323.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="307.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1185.2" y="291.0" width="1.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1185.2" y="275.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1185.2" y="259.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1185.2" y="243.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1185.2" y="227.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.2" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="211.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.2" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1185.2" y="195.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1185.2" y="179.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.14%)</title><rect x="1185.2" y="163.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.14%)</title><rect x="1185.2" y="147.0" width="1.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.14%)</title><rect x="1185.2" y="131.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.14%)</title><rect x="1185.2" y="115.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.14%)</title><rect x="1185.2" y="99.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.14%)</title><rect x="1185.2" y="83.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.2" y="94.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.14%)</title><rect x="1185.2" y="67.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.14%)</title><rect x="1185.2" y="51.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.2" y="62.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.14%)</title><rect x="1185.2" y="35.0" width="1.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.2" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_appendix() (1 samples, 0.14%)</title><rect x="1186.8" y="627.0" width="1.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.8" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.14%)</title><rect x="1186.8" y="611.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.8" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.14%)</title><rect x="1186.8" y="595.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.8" y="606.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.14%)</title><rect x="1188.4" y="851.0" width="1.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.4" y="862.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.14%)</title><rect x="1188.4" y="835.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.14%)</title><rect x="1188.4" y="819.0" width="1.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.4" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.14%)</title><rect x="1188.4" y="803.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="814.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.14%)</title><rect x="1188.4" y="787.0" width="1.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.4" y="798.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.14%)</title><rect x="1188.4" y="771.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.14%)</title><rect x="1188.4" y="755.0" width="1.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.4" y="766.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.14%)</title><rect x="1188.4" y="739.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.4" y="750.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (1 samples, 0.14%)</title><rect x="1188.4" y="723.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.4" y="734.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.14%)</title><rect x="1188.4" y="707.0" width="1.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.4" y="718.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.14%)</title><rect x="1188.4" y="691.0" width="1.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.4" y="702.0"></text>
</g>
</g>
</svg>
