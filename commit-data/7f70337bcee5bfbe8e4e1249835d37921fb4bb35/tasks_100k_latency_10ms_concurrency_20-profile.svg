<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1750" onload="init(evt)" viewBox="0 0 1200 1750" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1733"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1733"> </text>
<g id="frames">
<g>
<title>all (173 samples, 100.00%)</title><rect x="10.0" y="1699.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1710.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.58%)</title><rect x="10.0" y="1683.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.58%)</title><rect x="10.0" y="1667.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.94] (1 samples, 0.58%)</title><rect x="10.0" y="1651.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.58%)</title><rect x="10.0" y="1635.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.72] (1 samples, 0.58%)</title><rect x="10.0" y="1619.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.58%)</title><rect x="16.8" y="1683.0" width="6.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="19.8" y="1694.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.58%)</title><rect x="23.6" y="1683.0" width="6.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="26.6" y="1694.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.58%)</title><rect x="23.6" y="1667.0" width="6.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="26.6" y="1678.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (15 samples, 8.67%)</title><rect x="30.5" y="1683.0" width="102.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="33.5" y="1694.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (15 samples, 8.67%)</title><rect x="30.5" y="1667.0" width="102.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.5" y="1678.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 8.67%)</title><rect x="30.5" y="1651.0" width="102.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.5" y="1662.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.58%)</title><rect x="37.3" y="1635.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.3" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.58%)</title><rect x="37.3" y="1619.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.58%)</title><rect x="37.3" y="1603.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.3" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="37.3" y="1587.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.3" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.58%)</title><rect x="37.3" y="1571.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.3" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="37.3" y="1555.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.3" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="37.3" y="1539.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.58%)</title><rect x="37.3" y="1523.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.3" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.58%)</title><rect x="37.3" y="1507.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.3" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.58%)</title><rect x="37.3" y="1491.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.58%)</title><rect x="37.3" y="1475.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/2068690868.test (1 samples, 0.58%)</title><rect x="37.3" y="1459.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$7 (1 samples, 0.58%)</title><rect x="37.3" y="1443.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.3" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.shouldPartitionPaused (1 samples, 0.58%)</title><rect x="37.3" y="1427.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.3" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.58%)</title><rect x="44.1" y="1635.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.1" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.58%)</title><rect x="44.1" y="1619.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.1" y="1630.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.58%)</title><rect x="44.1" y="1603.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.1" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="44.1" y="1587.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="47.1" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.58%)</title><rect x="44.1" y="1571.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.1" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="44.1" y="1555.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.1" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="44.1" y="1539.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.1" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.58%)</title><rect x="44.1" y="1523.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="47.1" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.58%)</title><rect x="44.1" y="1507.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.1" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.58%)</title><rect x="44.1" y="1491.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.1" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$247/1330366789.test (1 samples, 0.58%)</title><rect x="44.1" y="1475.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.1" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 1.16%)</title><rect x="50.9" y="1635.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.9" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 1.16%)</title><rect x="50.9" y="1619.0" width="13.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.9" y="1630.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.16%)</title><rect x="50.9" y="1603.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.9" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/29589991.accept (2 samples, 1.16%)</title><rect x="50.9" y="1587.0" width="13.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.9" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 1.16%)</title><rect x="50.9" y="1571.0" width="13.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.9" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.16%)</title><rect x="50.9" y="1555.0" width="13.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.9" y="1566.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 1.16%)</title><rect x="50.9" y="1539.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.9" y="1550.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.73%)</title><rect x="64.6" y="1635.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.6" y="1646.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1491934710.accept (3 samples, 1.73%)</title><rect x="64.6" y="1619.0" width="20.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.6" y="1630.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.73%)</title><rect x="64.6" y="1603.0" width="20.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="67.6" y="1614.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (2 samples, 1.16%)</title><rect x="64.6" y="1587.0" width="13.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="67.6" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.16%)</title><rect x="64.6" y="1571.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.6" y="1582.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.16%)</title><rect x="64.6" y="1555.0" width="13.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="67.6" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.16%)</title><rect x="64.6" y="1539.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.6" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.16%)</title><rect x="64.6" y="1523.0" width="13.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="67.6" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.58%)</title><rect x="71.4" y="1507.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.4" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.58%)</title><rect x="71.4" y="1491.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.4" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="71.4" y="1475.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.4" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.58%)</title><rect x="71.4" y="1459.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.4" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.58%)</title><rect x="71.4" y="1443.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="74.4" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.58%)</title><rect x="78.2" y="1587.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="81.2" y="1598.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.58%)</title><rect x="78.2" y="1571.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="81.2" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="78.2" y="1555.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="81.2" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="78.2" y="1539.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.2" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.05%)</title><rect x="85.0" y="1635.0" width="47.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.0" y="1646.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 4.05%)</title><rect x="85.0" y="1619.0" width="47.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="88.0" y="1630.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.89%)</title><rect x="85.0" y="1603.0" width="34.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="88.0" y="1614.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.73%)</title><rect x="85.0" y="1587.0" width="20.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="88.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.73%)</title><rect x="85.0" y="1571.0" width="20.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.58%)</title><rect x="85.0" y="1555.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="88.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.58%)</title><rect x="85.0" y="1539.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="88.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.58%)</title><rect x="85.0" y="1523.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.0" y="1534.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.58%)</title><rect x="85.0" y="1507.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.0" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.58%)</title><rect x="85.0" y="1491.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.0" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.58%)</title><rect x="85.0" y="1475.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="88.0" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$237/220361575.shouldBlock (1 samples, 0.58%)</title><rect x="91.8" y="1555.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.8" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.58%)</title><rect x="91.8" y="1539.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.58%)</title><rect x="91.8" y="1523.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="94.8" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.58%)</title><rect x="91.8" y="1507.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="94.8" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="91.8" y="1491.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="94.8" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.58%)</title><rect x="91.8" y="1475.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="94.8" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.58%)</title><rect x="91.8" y="1459.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.8" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="91.8" y="1443.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.8" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="91.8" y="1427.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="94.8" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.58%)</title><rect x="91.8" y="1411.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="94.8" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.58%)</title><rect x="91.8" y="1395.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.8" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.58%)</title><rect x="91.8" y="1379.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.8" y="1390.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$1MatchSink.accept (1 samples, 0.58%)</title><rect x="91.8" y="1363.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.58%)</title><rect x="98.7" y="1555.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="101.7" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="98.7" y="1539.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="101.7" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="98.7" y="1523.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.7" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="98.7" y="1507.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.7" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.58%)</title><rect x="98.7" y="1491.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.7" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.58%)</title><rect x="98.7" y="1475.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="101.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.58%)</title><rect x="98.7" y="1459.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.7" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.build (1 samples, 0.58%)</title><rect x="98.7" y="1443.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="101.7" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.flushPendingSend (1 samples, 0.58%)</title><rect x="98.7" y="1427.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="101.7" y="1438.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (1 samples, 0.58%)</title><rect x="98.7" y="1411.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="101.7" y="1422.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="98.7" y="1395.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="101.7" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.58%)</title><rect x="105.5" y="1587.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="108.5" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.58%)</title><rect x="105.5" y="1571.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="108.5" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.58%)</title><rect x="105.5" y="1555.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="108.5" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.58%)</title><rect x="105.5" y="1539.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.5" y="1550.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.58%)</title><rect x="105.5" y="1523.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="108.5" y="1534.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.58%)</title><rect x="105.5" y="1507.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="108.5" y="1518.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.58%)</title><rect x="105.5" y="1491.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="108.5" y="1502.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.58%)</title><rect x="105.5" y="1475.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="108.5" y="1486.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="105.5" y="1459.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="108.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.58%)</title><rect x="112.3" y="1587.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="115.3" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.58%)</title><rect x="112.3" y="1571.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.3" y="1582.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.58%)</title><rect x="112.3" y="1555.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.3" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.58%)</title><rect x="112.3" y="1539.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.3" y="1550.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.afterNodeInsertion (1 samples, 0.58%)</title><rect x="112.3" y="1523.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="115.3" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.58%)</title><rect x="119.1" y="1603.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="122.1" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.58%)</title><rect x="119.1" y="1587.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="122.1" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.hasAllFetchPositions (1 samples, 0.58%)</title><rect x="119.1" y="1571.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="122.1" y="1582.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.58%)</title><rect x="119.1" y="1555.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="122.1" y="1566.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="119.1" y="1539.0" width="6.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="122.1" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.58%)</title><rect x="126.0" y="1603.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.0" y="1614.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.58%)</title><rect x="126.0" y="1587.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="129.0" y="1598.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.58%)</title><rect x="126.0" y="1571.0" width="6.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="129.0" y="1582.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="126.0" y="1555.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.0" y="1566.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.58%)</title><rect x="126.0" y="1539.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="129.0" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.58%)</title><rect x="126.0" y="1523.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="129.0" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.58%)</title><rect x="126.0" y="1507.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="129.0" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.58%)</title><rect x="126.0" y="1491.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="129.0" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.addSize (1 samples, 0.58%)</title><rect x="126.0" y="1475.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="129.0" y="1486.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.58%)</title><rect x="126.0" y="1459.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="129.0" y="1470.0"></text>
</g>
<g>
<title>java/lang/Thread.run (81 samples, 46.82%)</title><rect x="132.8" y="1683.0" width="552.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="135.8" y="1694.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (81 samples, 46.82%)</title><rect x="132.8" y="1667.0" width="552.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="135.8" y="1678.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (81 samples, 46.82%)</title><rect x="132.8" y="1651.0" width="552.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.8" y="1662.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/1372569390.run (79 samples, 45.66%)</title><rect x="132.8" y="1635.0" width="538.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="135.8" y="1646.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (79 samples, 45.66%)</title><rect x="132.8" y="1619.0" width="538.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="135.8" y="1630.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (79 samples, 45.66%)</title><rect x="132.8" y="1603.0" width="538.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.8" y="1614.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (79 samples, 45.66%)</title><rect x="132.8" y="1587.0" width="538.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.8" y="1598.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.58%)</title><rect x="153.2" y="1571.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.2" y="1582.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.58%)</title><rect x="153.2" y="1555.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.2" y="1566.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.58%)</title><rect x="153.2" y="1539.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="156.2" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="153.2" y="1523.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="156.2" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (4 samples, 2.31%)</title><rect x="160.1" y="1571.0" width="27.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.1" y="1582.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.31%)</title><rect x="160.1" y="1555.0" width="27.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="163.1" y="1566.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.31%)</title><rect x="160.1" y="1539.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.1" y="1550.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.73%)</title><rect x="166.9" y="1523.0" width="20.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.9" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.73%)</title><rect x="166.9" y="1507.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="169.9" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$478/1955394038.accept (3 samples, 1.73%)</title><rect x="166.9" y="1491.0" width="20.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.9" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (3 samples, 1.73%)</title><rect x="166.9" y="1475.0" width="20.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="169.9" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$469/1962493978.accept (1 samples, 0.58%)</title><rect x="166.9" y="1459.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.16%)</title><rect x="173.7" y="1459.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="176.7" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.16%)</title><rect x="173.7" y="1443.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="176.7" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 1.16%)</title><rect x="173.7" y="1427.0" width="13.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="176.7" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.16%)</title><rect x="173.7" y="1411.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.7" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (11 samples, 6.36%)</title><rect x="187.3" y="1571.0" width="75.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.3" y="1582.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (11 samples, 6.36%)</title><rect x="187.3" y="1555.0" width="75.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="190.3" y="1566.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (11 samples, 6.36%)</title><rect x="187.3" y="1539.0" width="75.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="190.3" y="1550.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 6.36%)</title><rect x="187.3" y="1523.0" width="75.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="190.3" y="1534.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (11 samples, 6.36%)</title><rect x="187.3" y="1507.0" width="75.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.3" y="1518.0">com/line..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (11 samples, 6.36%)</title><rect x="187.3" y="1491.0" width="75.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="190.3" y="1502.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.47%)</title><rect x="187.3" y="1475.0" width="41.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="190.3" y="1486.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.89%)</title><rect x="187.3" y="1459.0" width="34.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.3" y="1470.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.89%)</title><rect x="187.3" y="1443.0" width="34.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="190.3" y="1454.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 2.89%)</title><rect x="187.3" y="1427.0" width="34.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="190.3" y="1438.0">co..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 2.89%)</title><rect x="187.3" y="1411.0" width="34.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="190.3" y="1422.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 2.89%)</title><rect x="187.3" y="1395.0" width="34.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.3" y="1406.0">ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.58%)</title><rect x="221.4" y="1459.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="224.4" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.58%)</title><rect x="221.4" y="1443.0" width="6.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="224.4" y="1454.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.58%)</title><rect x="221.4" y="1427.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="224.4" y="1438.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.58%)</title><rect x="221.4" y="1411.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="224.4" y="1422.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.58%)</title><rect x="221.4" y="1395.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="224.4" y="1406.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.58%)</title><rect x="221.4" y="1379.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="224.4" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (4 samples, 2.31%)</title><rect x="228.3" y="1475.0" width="27.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.3" y="1486.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.58%)</title><rect x="228.3" y="1459.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.58%)</title><rect x="228.3" y="1443.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="231.3" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (3 samples, 1.73%)</title><rect x="235.1" y="1459.0" width="20.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.1" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (3 samples, 1.73%)</title><rect x="235.1" y="1443.0" width="20.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.1" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.73%)</title><rect x="235.1" y="1427.0" width="20.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="238.1" y="1438.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.73%)</title><rect x="235.1" y="1411.0" width="20.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="238.1" y="1422.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.73%)</title><rect x="235.1" y="1395.0" width="20.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.1" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.58%)</title><rect x="235.1" y="1379.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.1" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.58%)</title><rect x="235.1" y="1363.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.1" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.58%)</title><rect x="241.9" y="1379.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.58%)</title><rect x="241.9" y="1363.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.9" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.58%)</title><rect x="248.7" y="1379.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.7" y="1390.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.58%)</title><rect x="248.7" y="1363.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="251.7" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.58%)</title><rect x="255.5" y="1475.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="258.5" y="1486.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.58%)</title><rect x="255.5" y="1459.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="258.5" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.58%)</title><rect x="255.5" y="1443.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="258.5" y="1454.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.58%)</title><rect x="255.5" y="1427.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.5" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.58%)</title><rect x="255.5" y="1411.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="258.5" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (60 samples, 34.68%)</title><rect x="262.4" y="1571.0" width="409.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.4" y="1582.0">com/linecorp/decaton/processor/runtime/internal/ProcessP..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (6 samples, 3.47%)</title><rect x="262.4" y="1555.0" width="40.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="265.4" y="1566.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (6 samples, 3.47%)</title><rect x="262.4" y="1539.0" width="40.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.4" y="1550.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (5 samples, 2.89%)</title><rect x="269.2" y="1523.0" width="34.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.2" y="1534.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.58%)</title><rect x="269.2" y="1507.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.2" y="1518.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.58%)</title><rect x="269.2" y="1491.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="272.2" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.58%)</title><rect x="269.2" y="1475.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="272.2" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="276.0" y="1507.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.0" y="1518.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="276.0" y="1491.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="279.0" y="1502.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.73%)</title><rect x="282.8" y="1507.0" width="20.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.8" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.73%)</title><rect x="282.8" y="1491.0" width="20.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="285.8" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.73%)</title><rect x="282.8" y="1475.0" width="20.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.8" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (13 samples, 7.51%)</title><rect x="303.3" y="1555.0" width="88.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.3" y="1566.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (12 samples, 6.94%)</title><rect x="303.3" y="1539.0" width="81.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.3" y="1550.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.31%)</title><rect x="310.1" y="1523.0" width="27.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.1" y="1534.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.73%)</title><rect x="310.1" y="1507.0" width="20.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.1" y="1518.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.58%)</title><rect x="323.8" y="1491.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.8" y="1502.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.58%)</title><rect x="323.8" y="1475.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.8" y="1486.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.58%)</title><rect x="323.8" y="1459.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="326.8" y="1470.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.58%)</title><rect x="330.6" y="1507.0" width="6.8" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="333.6" y="1518.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 4.05%)</title><rect x="337.4" y="1523.0" width="47.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="340.4" y="1534.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 4.05%)</title><rect x="337.4" y="1507.0" width="47.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="340.4" y="1518.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 1.73%)</title><rect x="337.4" y="1491.0" width="20.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="340.4" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 1.16%)</title><rect x="344.2" y="1475.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.2" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 1.16%)</title><rect x="344.2" y="1459.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="347.2" y="1470.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 2.31%)</title><rect x="357.9" y="1491.0" width="27.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="360.9" y="1502.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (4 samples, 2.31%)</title><rect x="357.9" y="1475.0" width="27.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.9" y="1486.0">j..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.31%)</title><rect x="357.9" y="1459.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.9" y="1470.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.16%)</title><rect x="371.5" y="1443.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="374.5" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.58%)</title><rect x="385.1" y="1539.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="388.1" y="1550.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.58%)</title><rect x="385.1" y="1523.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="1534.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.58%)</title><rect x="385.1" y="1507.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.1" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.58%)</title><rect x="385.1" y="1491.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="388.1" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.58%)</title><rect x="385.1" y="1475.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.1" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (38 samples, 21.97%)</title><rect x="392.0" y="1555.0" width="259.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.0" y="1566.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (38 samples, 21.97%)</title><rect x="392.0" y="1539.0" width="259.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="395.0" y="1550.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$398/608019696.process (30 samples, 17.34%)</title><rect x="398.8" y="1523.0" width="204.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="401.8" y="1534.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (30 samples, 17.34%)</title><rect x="398.8" y="1507.0" width="204.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="401.8" y="1518.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 16.18%)</title><rect x="398.8" y="1491.0" width="191.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="401.8" y="1502.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (28 samples, 16.18%)</title><rect x="398.8" y="1475.0" width="191.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="401.8" y="1486.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (28 samples, 16.18%)</title><rect x="398.8" y="1459.0" width="191.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="401.8" y="1470.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (26 samples, 15.03%)</title><rect x="412.4" y="1443.0" width="177.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="415.4" y="1454.0">JVM_Sleep</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.31%)</title><rect x="419.2" y="1427.0" width="27.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="422.2" y="1438.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 4.05%)</title><rect x="446.5" y="1427.0" width="47.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="449.5" y="1438.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 1.73%)</title><rect x="494.3" y="1427.0" width="20.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="497.3" y="1438.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.58%)</title><rect x="514.7" y="1427.0" width="6.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="517.7" y="1438.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (10 samples, 5.78%)</title><rect x="521.6" y="1427.0" width="68.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="524.6" y="1438.0">os::sle..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.58%)</title><rect x="528.4" y="1411.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="531.4" y="1422.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 2.89%)</title><rect x="535.2" y="1411.0" width="34.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="538.2" y="1422.0">__..</text>
</g>
<g>
<title>[vdso] (5 samples, 2.89%)</title><rect x="535.2" y="1395.0" width="34.1" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="538.2" y="1406.0">[v..</text>
</g>
<g>
<title>__tls_get_addr (3 samples, 1.73%)</title><rect x="569.3" y="1411.0" width="20.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="572.3" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 1.16%)</title><rect x="589.8" y="1491.0" width="13.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="592.8" y="1502.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.58%)</title><rect x="596.6" y="1475.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="599.6" y="1486.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.58%)</title><rect x="596.6" y="1459.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="599.6" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 2.31%)</title><rect x="603.4" y="1523.0" width="27.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="606.4" y="1534.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.58%)</title><rect x="623.9" y="1507.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="626.9" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.58%)</title><rect x="630.7" y="1523.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.7" y="1534.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.58%)</title><rect x="630.7" y="1507.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.7" y="1518.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.58%)</title><rect x="637.5" y="1523.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.5" y="1534.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.58%)</title><rect x="637.5" y="1507.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.5" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="644.3" y="1523.0" width="6.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="647.3" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.58%)</title><rect x="644.3" y="1507.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="647.3" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.58%)</title><rect x="644.3" y="1491.0" width="6.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.3" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.58%)</title><rect x="644.3" y="1475.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.3" y="1486.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.58%)</title><rect x="644.3" y="1459.0" width="6.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="647.3" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.73%)</title><rect x="651.2" y="1555.0" width="20.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="654.2" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.73%)</title><rect x="651.2" y="1539.0" width="20.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.2" y="1550.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.58%)</title><rect x="664.8" y="1523.0" width="6.8" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="667.8" y="1534.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.58%)</title><rect x="664.8" y="1507.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="667.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.58%)</title><rect x="671.6" y="1635.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.6" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.58%)</title><rect x="671.6" y="1619.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="674.6" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.58%)</title><rect x="671.6" y="1603.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="674.6" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.58%)</title><rect x="671.6" y="1587.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.6" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.58%)</title><rect x="671.6" y="1571.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="674.6" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.58%)</title><rect x="678.4" y="1635.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.4" y="1646.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.58%)</title><rect x="678.4" y="1619.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="681.4" y="1630.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.58%)</title><rect x="678.4" y="1603.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="681.4" y="1614.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.58%)</title><rect x="678.4" y="1587.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="681.4" y="1598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.58%)</title><rect x="678.4" y="1571.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.4" y="1582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.58%)</title><rect x="678.4" y="1555.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.4" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.58%)</title><rect x="678.4" y="1539.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="681.4" y="1550.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.58%)</title><rect x="678.4" y="1523.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="681.4" y="1534.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.58%)</title><rect x="678.4" y="1507.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="681.4" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.58%)</title><rect x="685.3" y="1683.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="688.3" y="1694.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.58%)</title><rect x="685.3" y="1667.0" width="6.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="688.3" y="1678.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.58%)</title><rect x="685.3" y="1651.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="688.3" y="1662.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.58%)</title><rect x="685.3" y="1635.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="688.3" y="1646.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.58%)</title><rect x="685.3" y="1619.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.3" y="1630.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.58%)</title><rect x="685.3" y="1603.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.3" y="1614.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.58%)</title><rect x="685.3" y="1587.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.3" y="1598.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.58%)</title><rect x="685.3" y="1571.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.3" y="1582.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.58%)</title><rect x="685.3" y="1555.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="688.3" y="1566.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.58%)</title><rect x="685.3" y="1539.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="688.3" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.58%)</title><rect x="685.3" y="1523.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="688.3" y="1534.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.58%)</title><rect x="685.3" y="1507.0" width="6.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="688.3" y="1518.0"></text>
</g>
<g>
<title>start_thread (73 samples, 42.20%)</title><rect x="692.1" y="1683.0" width="497.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="695.1" y="1694.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (73 samples, 42.20%)</title><rect x="692.1" y="1667.0" width="497.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="695.1" y="1678.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (73 samples, 42.20%)</title><rect x="692.1" y="1651.0" width="497.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="695.1" y="1662.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 3.47%)</title><rect x="692.1" y="1635.0" width="40.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="695.1" y="1646.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 3.47%)</title><rect x="692.1" y="1619.0" width="40.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="695.1" y="1630.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 1.73%)</title><rect x="692.1" y="1603.0" width="20.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="695.1" y="1614.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.73%)</title><rect x="692.1" y="1587.0" width="20.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="695.1" y="1598.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.58%)</title><rect x="705.7" y="1571.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="708.7" y="1582.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 1.73%)</title><rect x="712.5" y="1603.0" width="20.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="715.5" y="1614.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 1.73%)</title><rect x="712.5" y="1587.0" width="20.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.5" y="1598.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 1.73%)</title><rect x="712.5" y="1571.0" width="20.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="715.5" y="1582.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 1.73%)</title><rect x="712.5" y="1555.0" width="20.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="715.5" y="1566.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 1.73%)</title><rect x="712.5" y="1539.0" width="20.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="715.5" y="1550.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 1.73%)</title><rect x="712.5" y="1523.0" width="20.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="715.5" y="1534.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.58%)</title><rect x="726.2" y="1507.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="729.2" y="1518.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.58%)</title><rect x="726.2" y="1491.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="729.2" y="1502.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (67 samples, 38.73%)</title><rect x="733.0" y="1635.0" width="457.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="736.0" y="1646.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (67 samples, 38.73%)</title><rect x="733.0" y="1619.0" width="457.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.0" y="1630.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 38.73%)</title><rect x="733.0" y="1603.0" width="457.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="736.0" y="1614.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (64 samples, 36.99%)</title><rect x="733.0" y="1587.0" width="436.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="736.0" y="1598.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Directive..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (64 samples, 36.99%)</title><rect x="733.0" y="1571.0" width="436.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="736.0" y="1582.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, ..</text>
</g>
<g>
<title>Compile::Code_Gen() (43 samples, 24.86%)</title><rect x="733.0" y="1555.0" width="293.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.0" y="1566.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.58%)</title><rect x="733.0" y="1539.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.0" y="1550.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.58%)</title><rect x="733.0" y="1523.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="736.0" y="1534.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.31%)</title><rect x="739.8" y="1539.0" width="27.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="742.8" y="1550.0">M..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.31%)</title><rect x="739.8" y="1523.0" width="27.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="742.8" y="1534.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.58%)</title><rect x="739.8" y="1507.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="742.8" y="1518.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.58%)</title><rect x="746.6" y="1507.0" width="6.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="749.6" y="1518.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.58%)</title><rect x="746.6" y="1491.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="749.6" y="1502.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.58%)</title><rect x="746.6" y="1475.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="749.6" y="1486.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.58%)</title><rect x="746.6" y="1459.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="749.6" y="1470.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.16%)</title><rect x="753.5" y="1507.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="756.5" y="1518.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.58%)</title><rect x="760.3" y="1491.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="763.3" y="1502.0"></text>
</g>
<g>
<title>State::MachNodeGenerator(int) (1 samples, 0.58%)</title><rect x="760.3" y="1475.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="763.3" y="1486.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 3.47%)</title><rect x="767.1" y="1539.0" width="40.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="770.1" y="1550.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 3.47%)</title><rect x="767.1" y="1523.0" width="40.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="770.1" y="1534.0">Pha..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 1.16%)</title><rect x="767.1" y="1507.0" width="13.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="770.1" y="1518.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.58%)</title><rect x="773.9" y="1491.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="776.9" y="1502.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 1.73%)</title><rect x="780.8" y="1507.0" width="20.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="783.8" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (3 samples, 1.73%)</title><rect x="780.8" y="1491.0" width="20.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="783.8" y="1502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.16%)</title><rect x="787.6" y="1475.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="790.6" y="1486.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.58%)</title><rect x="801.2" y="1507.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="804.2" y="1518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="801.2" y="1491.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.2" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 18.50%)</title><rect x="808.0" y="1539.0" width="218.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="811.0" y="1550.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.58%)</title><rect x="808.0" y="1523.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="811.0" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.58%)</title><rect x="814.9" y="1523.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="817.9" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.58%)</title><rect x="814.9" y="1507.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="817.9" y="1518.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.58%)</title><rect x="814.9" y="1491.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="817.9" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.58%)</title><rect x="821.7" y="1523.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="824.7" y="1534.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.58%)</title><rect x="821.7" y="1507.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.7" y="1518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="821.7" y="1491.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.7" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.73%)</title><rect x="828.5" y="1523.0" width="20.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="831.5" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 4.62%)</title><rect x="849.0" y="1523.0" width="54.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="852.0" y="1534.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (5 samples, 2.89%)</title><rect x="862.6" y="1507.0" width="34.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="865.6" y="1518.0">Ph..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.58%)</title><rect x="876.2" y="1491.0" width="6.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="879.2" y="1502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.16%)</title><rect x="883.1" y="1491.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="886.1" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.58%)</title><rect x="896.7" y="1507.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="899.7" y="1518.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.58%)</title><rect x="896.7" y="1491.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="899.7" y="1502.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.16%)</title><rect x="903.5" y="1523.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="906.5" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.16%)</title><rect x="903.5" y="1507.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="906.5" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.73%)</title><rect x="917.2" y="1523.0" width="20.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="920.2" y="1534.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.58%)</title><rect x="924.0" y="1507.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="927.0" y="1518.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.58%)</title><rect x="924.0" y="1491.0" width="6.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="927.0" y="1502.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.58%)</title><rect x="930.8" y="1507.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.8" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.58%)</title><rect x="937.6" y="1523.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="940.6" y="1534.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.31%)</title><rect x="944.5" y="1523.0" width="27.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.5" y="1534.0">P..</text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.58%)</title><rect x="958.1" y="1507.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="961.1" y="1518.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.58%)</title><rect x="964.9" y="1507.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.9" y="1518.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.58%)</title><rect x="971.7" y="1523.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="974.7" y="1534.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.58%)</title><rect x="971.7" y="1507.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="974.7" y="1518.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.58%)</title><rect x="971.7" y="1491.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.7" y="1502.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.16%)</title><rect x="978.6" y="1523.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="981.6" y="1534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="985.4" y="1507.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="988.4" y="1518.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.16%)</title><rect x="992.2" y="1523.0" width="13.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="995.2" y="1534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.58%)</title><rect x="999.0" y="1507.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.0" y="1518.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.58%)</title><rect x="1005.8" y="1523.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.8" y="1534.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.58%)</title><rect x="1005.8" y="1507.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1008.8" y="1518.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.16%)</title><rect x="1012.7" y="1523.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1015.7" y="1534.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.16%)</title><rect x="1012.7" y="1507.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1015.7" y="1518.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.58%)</title><rect x="1019.5" y="1491.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.5" y="1502.0"></text>
</g>
<g>
<title>Compile::Optimize() (13 samples, 7.51%)</title><rect x="1026.3" y="1555.0" width="88.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1029.3" y="1566.0">Compile::O..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (3 samples, 1.73%)</title><rect x="1026.3" y="1539.0" width="20.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1029.3" y="1550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 1.73%)</title><rect x="1026.3" y="1523.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1029.3" y="1534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.58%)</title><rect x="1026.3" y="1507.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1029.3" y="1518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.58%)</title><rect x="1026.3" y="1491.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1029.3" y="1502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.58%)</title><rect x="1026.3" y="1475.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1029.3" y="1486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.58%)</title><rect x="1026.3" y="1459.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1029.3" y="1470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.58%)</title><rect x="1033.1" y="1507.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.1" y="1518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.58%)</title><rect x="1039.9" y="1507.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1042.9" y="1518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.58%)</title><rect x="1039.9" y="1491.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1042.9" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.16%)</title><rect x="1046.8" y="1539.0" width="13.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.8" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.16%)</title><rect x="1046.8" y="1523.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1049.8" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.58%)</title><rect x="1053.6" y="1507.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1056.6" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.58%)</title><rect x="1053.6" y="1491.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.6" y="1502.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.58%)</title><rect x="1060.4" y="1539.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1063.4" y="1550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (5 samples, 2.89%)</title><rect x="1067.2" y="1539.0" width="34.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1070.2" y="1550.0">Ph..</text>
</g>
<g>
<title>CProjNode::is_CFG() const (1 samples, 0.58%)</title><rect x="1067.2" y="1523.0" width="6.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1070.2" y="1534.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1523.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1077.0" y="1534.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1507.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1077.0" y="1518.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1491.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.0" y="1502.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1475.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1077.0" y="1486.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1459.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.0" y="1470.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1443.0" width="6.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1077.0" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.58%)</title><rect x="1074.0" y="1427.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.0" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*&amp;, Node*, CountedLoopNode*&amp;) (1 samples, 0.58%)</title><rect x="1074.0" y="1411.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.0" y="1422.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.58%)</title><rect x="1074.0" y="1395.0" width="6.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="1077.0" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.58%)</title><rect x="1080.9" y="1523.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1083.9" y="1534.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1087.7" y="1523.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.7" y="1534.0"></text>
</g>
<g>
<title>RootNode::Value(PhaseGVN*) const (1 samples, 0.58%)</title><rect x="1087.7" y="1507.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1090.7" y="1518.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.58%)</title><rect x="1094.5" y="1523.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1097.5" y="1534.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.58%)</title><rect x="1101.3" y="1539.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.3" y="1550.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.58%)</title><rect x="1101.3" y="1523.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.3" y="1534.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.58%)</title><rect x="1101.3" y="1507.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.3" y="1518.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.58%)</title><rect x="1101.3" y="1491.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.3" y="1502.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.58%)</title><rect x="1101.3" y="1475.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.3" y="1486.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.58%)</title><rect x="1101.3" y="1459.0" width="6.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1104.3" y="1470.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.58%)</title><rect x="1108.2" y="1539.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1111.2" y="1550.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.58%)</title><rect x="1108.2" y="1523.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.2" y="1534.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.58%)</title><rect x="1108.2" y="1507.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1111.2" y="1518.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 4.62%)</title><rect x="1115.0" y="1555.0" width="54.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.0" y="1566.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 4.62%)</title><rect x="1115.0" y="1539.0" width="54.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1118.0" y="1550.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 4.62%)</title><rect x="1115.0" y="1523.0" width="54.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.0" y="1534.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 4.62%)</title><rect x="1115.0" y="1507.0" width="54.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.0" y="1518.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 4.62%)</title><rect x="1115.0" y="1491.0" width="54.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.0" y="1502.0">Parse..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 4.62%)</title><rect x="1115.0" y="1475.0" width="54.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1118.0" y="1486.0">Parse..</text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1115.0" y="1459.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.0" y="1470.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.58%)</title><rect x="1115.0" y="1443.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1118.0" y="1454.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) [clone .part.179] (1 samples, 0.58%)</title><rect x="1115.0" y="1427.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.0" y="1438.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.58%)</title><rect x="1115.0" y="1411.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1118.0" y="1422.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.58%)</title><rect x="1115.0" y="1395.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.0" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.58%)</title><rect x="1115.0" y="1379.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.0" y="1390.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.58%)</title><rect x="1115.0" y="1363.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1118.0" y="1374.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.58%)</title><rect x="1115.0" y="1347.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1118.0" y="1358.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.58%)</title><rect x="1115.0" y="1331.0" width="6.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1118.0" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.89%)</title><rect x="1121.8" y="1459.0" width="34.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1124.8" y="1470.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.89%)</title><rect x="1121.8" y="1443.0" width="34.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.8" y="1454.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.89%)</title><rect x="1121.8" y="1427.0" width="34.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="1438.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.89%)</title><rect x="1121.8" y="1411.0" width="34.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="1422.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.89%)</title><rect x="1121.8" y="1395.0" width="34.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.8" y="1406.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.89%)</title><rect x="1121.8" y="1379.0" width="34.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.8" y="1390.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.73%)</title><rect x="1121.8" y="1363.0" width="20.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.8" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.73%)</title><rect x="1121.8" y="1347.0" width="20.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1124.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.73%)</title><rect x="1121.8" y="1331.0" width="20.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.8" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.73%)</title><rect x="1121.8" y="1315.0" width="20.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.8" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.73%)</title><rect x="1121.8" y="1299.0" width="20.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.73%)</title><rect x="1121.8" y="1283.0" width="20.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.8" y="1294.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1121.8" y="1267.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1124.8" y="1278.0"></text>
</g>
<g>
<title>ciMethod::call_profile_at_bci(int) (1 samples, 0.58%)</title><rect x="1121.8" y="1251.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.8" y="1262.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.58%)</title><rect x="1121.8" y="1235.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1128.6" y="1267.0" width="13.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1131.6" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1128.6" y="1251.0" width="13.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.6" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1128.6" y="1235.0" width="13.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1131.6" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1128.6" y="1219.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.6" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1128.6" y="1203.0" width="13.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.6" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1128.6" y="1187.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.6" y="1198.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_return_for_speculation() (1 samples, 0.58%)</title><rect x="1128.6" y="1171.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.6" y="1182.0"></text>
</g>
<g>
<title>ciMethod::return_profiled_type(int, ciKlass*&amp;, ProfilePtrKind&amp;) (1 samples, 0.58%)</title><rect x="1128.6" y="1155.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.6" y="1166.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.58%)</title><rect x="1128.6" y="1139.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1131.6" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1135.4" y="1171.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.4" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1135.4" y="1155.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.4" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1135.4" y="1139.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.4" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1135.4" y="1123.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.4" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1135.4" y="1107.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.4" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1135.4" y="1091.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.4" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1135.4" y="1075.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.4" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1135.4" y="1059.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1135.4" y="1043.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1135.4" y="1027.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1135.4" y="1011.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1135.4" y="995.0" width="6.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.4" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.58%)</title><rect x="1135.4" y="979.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.58%)</title><rect x="1135.4" y="963.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.4" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.58%)</title><rect x="1135.4" y="947.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.4" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.58%)</title><rect x="1135.4" y="931.0" width="6.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.4" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.58%)</title><rect x="1135.4" y="915.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.4" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1135.4" y="899.0" width="6.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.4" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.58%)</title><rect x="1135.4" y="883.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.4" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.58%)</title><rect x="1135.4" y="867.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.58%)</title><rect x="1135.4" y="851.0" width="6.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.4" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.58%)</title><rect x="1135.4" y="835.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.4" y="846.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1135.4" y="819.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.4" y="830.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1135.4" y="803.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.4" y="814.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.58%)</title><rect x="1135.4" y="787.0" width="6.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.4" y="798.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.58%)</title><rect x="1135.4" y="771.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.4" y="782.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.58%)</title><rect x="1135.4" y="755.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.4" y="766.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.58%)</title><rect x="1135.4" y="739.0" width="6.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.4" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.58%)</title><rect x="1135.4" y="723.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.4" y="734.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.58%)</title><rect x="1135.4" y="707.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.4" y="718.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1142.3" y="1363.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.3" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1142.3" y="1347.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1142.3" y="1331.0" width="13.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1142.3" y="1315.0" width="13.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1142.3" y="1299.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1142.3" y="1283.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1142.3" y="1267.0" width="13.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1142.3" y="1251.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.3" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1142.3" y="1235.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1142.3" y="1219.0" width="13.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1142.3" y="1203.0" width="13.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1142.3" y="1187.0" width="13.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1142.3" y="1171.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.3" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1142.3" y="1155.0" width="13.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.3" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1142.3" y="1139.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1142.3" y="1123.0" width="13.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1142.3" y="1107.0" width="13.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1142.3" y="1091.0" width="13.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1142.3" y="1075.0" width="13.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.3" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1142.3" y="1059.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.3" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1142.3" y="1043.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1142.3" y="1027.0" width="13.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1142.3" y="1011.0" width="13.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1142.3" y="995.0" width="13.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="979.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.3" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="963.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="947.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="931.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="915.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="899.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="883.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.3" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="867.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.3" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="851.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="835.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.3" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="819.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="803.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="787.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.3" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="771.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.3" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="755.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="739.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="723.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="707.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="691.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.3" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="675.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="659.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="643.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.3" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="627.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="611.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="595.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.3" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="579.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="563.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="547.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.3" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="531.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="515.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.3" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="499.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.3" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="483.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.3" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="467.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="451.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.3" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="435.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="419.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.3" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="403.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="387.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="371.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="355.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="339.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="323.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.3" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="307.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1145.3" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="291.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.3" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="275.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.3" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="259.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="243.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1145.3" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="227.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.3" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1142.3" y="211.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.3" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1142.3" y="195.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.3" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1142.3" y="179.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1145.3" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1142.3" y="163.0" width="6.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.3" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1142.3" y="147.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.3" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1142.3" y="131.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.3" y="142.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.58%)</title><rect x="1142.3" y="115.0" width="6.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.3" y="126.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.58%)</title><rect x="1142.3" y="99.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.3" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1142.3" y="83.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.3" y="94.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.58%)</title><rect x="1142.3" y="67.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.3" y="78.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.58%)</title><rect x="1142.3" y="51.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.3" y="62.0"></text>
</g>
<g>
<title>Type::hash() const (1 samples, 0.58%)</title><rect x="1142.3" y="35.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.3" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.58%)</title><rect x="1149.1" y="979.0" width="6.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.1" y="990.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.58%)</title><rect x="1149.1" y="963.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.1" y="974.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.58%)</title><rect x="1149.1" y="947.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.1" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1155.9" y="1459.0" width="13.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.9" y="1470.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1155.9" y="1443.0" width="13.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.9" y="1454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1155.9" y="1427.0" width="13.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.16%)</title><rect x="1155.9" y="1411.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.9" y="1422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.16%)</title><rect x="1155.9" y="1395.0" width="13.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.9" y="1406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.16%)</title><rect x="1155.9" y="1379.0" width="13.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.9" y="1390.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.16%)</title><rect x="1155.9" y="1363.0" width="13.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.9" y="1374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.16%)</title><rect x="1155.9" y="1347.0" width="13.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.9" y="1358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.16%)</title><rect x="1155.9" y="1331.0" width="13.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.9" y="1342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1155.9" y="1315.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1155.9" y="1299.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.9" y="1310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1155.9" y="1283.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1294.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1155.9" y="1267.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1155.9" y="1251.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1155.9" y="1235.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.9" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1155.9" y="1219.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.9" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1155.9" y="1203.0" width="6.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.9" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1155.9" y="1187.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.9" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1155.9" y="1171.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.9" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1155.9" y="1155.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.9" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1155.9" y="1139.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.9" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1155.9" y="1123.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.9" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1155.9" y="1107.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1155.9" y="1091.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1155.9" y="1075.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1155.9" y="1059.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1155.9" y="1043.0" width="6.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.9" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1155.9" y="1027.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.9" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1155.9" y="1011.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.9" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1155.9" y="995.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.9" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1155.9" y="979.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1155.9" y="963.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.9" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1155.9" y="947.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.58%)</title><rect x="1155.9" y="931.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.58%)</title><rect x="1155.9" y="915.0" width="6.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.58%)</title><rect x="1155.9" y="899.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.9" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.58%)</title><rect x="1155.9" y="883.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.58%)</title><rect x="1155.9" y="867.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.9" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.58%)</title><rect x="1155.9" y="851.0" width="6.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.58%)</title><rect x="1155.9" y="835.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.9" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1155.9" y="819.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.9" y="830.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.58%)</title><rect x="1155.9" y="803.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.9" y="814.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.58%)</title><rect x="1162.7" y="1315.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="1326.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicates(int) (1 samples, 0.58%)</title><rect x="1162.7" y="1299.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.7" y="1310.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.191] (1 samples, 0.58%)</title><rect x="1162.7" y="1283.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.7" y="1294.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.58%)</title><rect x="1162.7" y="1267.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="1278.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.58%)</title><rect x="1162.7" y="1251.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.7" y="1262.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.58%)</title><rect x="1162.7" y="1235.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.7" y="1246.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.58%)</title><rect x="1162.7" y="1219.0" width="6.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.7" y="1230.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 1.73%)</title><rect x="1169.5" y="1587.0" width="20.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="1598.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 1.73%)</title><rect x="1169.5" y="1571.0" width="20.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="1582.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.73%)</title><rect x="1169.5" y="1555.0" width="20.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.5" y="1566.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (3 samples, 1.73%)</title><rect x="1169.5" y="1539.0" width="20.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="1550.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (3 samples, 1.73%)</title><rect x="1169.5" y="1523.0" width="20.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.5" y="1534.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (3 samples, 1.73%)</title><rect x="1169.5" y="1507.0" width="20.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.5" y="1518.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.58%)</title><rect x="1169.5" y="1491.0" width="6.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.5" y="1502.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.58%)</title><rect x="1169.5" y="1475.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.5" y="1486.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.58%)</title><rect x="1169.5" y="1459.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.5" y="1470.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.58%)</title><rect x="1169.5" y="1443.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.5" y="1454.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_any(Interval*) (1 samples, 0.58%)</title><rect x="1169.5" y="1427.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1172.5" y="1438.0"></text>
</g>
<g>
<title>Range::intersects_at(Range*) const (1 samples, 0.58%)</title><rect x="1169.5" y="1411.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.5" y="1422.0"></text>
</g>
<g>
<title>LinearScan::compute_global_live_sets() (1 samples, 0.58%)</title><rect x="1176.4" y="1491.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.4" y="1502.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (1 samples, 0.58%)</title><rect x="1183.2" y="1491.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="1502.0"></text>
</g>
</g>
</svg>
