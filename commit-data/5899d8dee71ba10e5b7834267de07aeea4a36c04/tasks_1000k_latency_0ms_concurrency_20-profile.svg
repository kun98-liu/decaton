<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1461"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1461"> </text>
<g id="frames">
<g>
<title>all (1,021 samples, 100.00%)</title><rect x="10.0" y="1427.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1438.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.10%)</title><rect x="10.0" y="1411.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_exit_helper(oopDesc*, BasicLock*, JavaThread*, bool) (1 samples, 0.10%)</title><rect x="10.0" y="1395.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.10%)</title><rect x="10.0" y="1379.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="11.2" y="1411.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.2" y="1422.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="11.2" y="1395.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (231 samples, 22.62%)</title><rect x="12.3" y="1411.0" width="267.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="1422.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (231 samples, 22.62%)</title><rect x="12.3" y="1395.0" width="267.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="1406.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (230 samples, 22.53%)</title><rect x="12.3" y="1379.0" width="265.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.3" y="1390.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.20%)</title><rect x="12.3" y="1363.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.20%)</title><rect x="12.3" y="1347.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="1358.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.20%)</title><rect x="12.3" y="1331.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.3" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.20%)</title><rect x="12.3" y="1315.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.20%)</title><rect x="12.3" y="1299.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.20%)</title><rect x="12.3" y="1283.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.3" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.20%)</title><rect x="12.3" y="1267.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="12.3" y="1251.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.3" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="12.3" y="1235.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.3" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="12.3" y="1219.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.3" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="12.3" y="1203.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$247/1735388052.test (1 samples, 0.10%)</title><rect x="12.3" y="1187.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.3" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$partitionsNeedsPause$5 (1 samples, 0.10%)</title><rect x="12.3" y="1171.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.3" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="13.5" y="1251.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.5" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="13.5" y="1235.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="16.5" y="1246.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="13.5" y="1219.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="16.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.10%)</title><rect x="14.6" y="1363.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="14.6" y="1347.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (8 samples, 0.78%)</title><rect x="15.8" y="1363.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.8" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (8 samples, 0.78%)</title><rect x="15.8" y="1347.0" width="9.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="18.8" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (8 samples, 0.78%)</title><rect x="15.8" y="1331.0" width="9.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.8" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1523818445.accept (8 samples, 0.78%)</title><rect x="15.8" y="1315.0" width="9.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="18.8" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (8 samples, 0.78%)</title><rect x="15.8" y="1299.0" width="9.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="18.8" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (8 samples, 0.78%)</title><rect x="15.8" y="1283.0" width="9.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (8 samples, 0.78%)</title><rect x="15.8" y="1267.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.8" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (187 samples, 18.32%)</title><rect x="25.0" y="1363.0" width="216.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.0" y="1374.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/199751586.accept (182 samples, 17.83%)</title><rect x="25.0" y="1347.0" width="210.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="1358.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (182 samples, 17.83%)</title><rect x="25.0" y="1331.0" width="210.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.0" y="1342.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (160 samples, 15.67%)</title><rect x="25.0" y="1315.0" width="184.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.0" y="1326.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (160 samples, 15.67%)</title><rect x="25.0" y="1299.0" width="184.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.0" y="1310.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (160 samples, 15.67%)</title><rect x="25.0" y="1283.0" width="184.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.0" y="1294.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (140 samples, 13.71%)</title><rect x="48.1" y="1267.0" width="161.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="1278.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (140 samples, 13.71%)</title><rect x="48.1" y="1251.0" width="161.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="51.1" y="1262.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 13.71%)</title><rect x="48.1" y="1235.0" width="161.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="51.1" y="1246.0">java/util/concurrent/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="48.1" y="1219.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="51.1" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="48.1" y="1203.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="51.1" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="48.1" y="1187.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="51.1" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="48.1" y="1171.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="51.1" y="1182.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="48.1" y="1155.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="51.1" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (114 samples, 11.17%)</title><rect x="49.3" y="1219.0" width="131.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.3" y="1230.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 1.86%)</title><rect x="49.3" y="1203.0" width="22.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="52.3" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 1.86%)</title><rect x="49.3" y="1187.0" width="22.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="52.3" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 1.86%)</title><rect x="49.3" y="1171.0" width="22.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.3" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (95 samples, 9.30%)</title><rect x="71.3" y="1203.0" width="109.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.3" y="1214.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (95 samples, 9.30%)</title><rect x="71.3" y="1187.0" width="109.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.3" y="1198.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (95 samples, 9.30%)</title><rect x="71.3" y="1171.0" width="109.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="74.3" y="1182.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (95 samples, 9.30%)</title><rect x="71.3" y="1155.0" width="109.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="74.3" y="1166.0">java/util/con..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (94 samples, 9.21%)</title><rect x="72.4" y="1139.0" width="108.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.4" y="1150.0">jdk/internal/..</text>
</g>
<g>
<title>Unsafe_Unpark (32 samples, 3.13%)</title><rect x="73.6" y="1123.0" width="36.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="76.6" y="1134.0">Uns..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.20%)</title><rect x="74.7" y="1107.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="77.7" y="1118.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.39%)</title><rect x="77.0" y="1107.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="80.0" y="1118.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.49%)</title><rect x="81.7" y="1107.0" width="5.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="84.7" y="1118.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="86.3" y="1091.0" width="1.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="89.3" y="1102.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.49%)</title><rect x="87.4" y="1107.0" width="5.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="90.4" y="1118.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="93.2" y="1107.0" width="1.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="96.2" y="1118.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.29%)</title><rect x="94.4" y="1107.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.4" y="1118.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 1.08%)</title><rect x="97.8" y="1107.0" width="12.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="100.8" y="1118.0"></text>
</g>
<g>
<title>__pthread_cond_signal (60 samples, 5.88%)</title><rect x="110.5" y="1123.0" width="69.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="113.5" y="1134.0">__pthre..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="179.9" y="1123.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="182.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.20%)</title><rect x="181.0" y="1219.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="184.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.20%)</title><rect x="181.0" y="1203.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (23 samples, 2.25%)</title><rect x="183.4" y="1219.0" width="26.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.4" y="1230.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 2.25%)</title><rect x="183.4" y="1203.0" width="26.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="186.4" y="1214.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (23 samples, 2.25%)</title><rect x="183.4" y="1187.0" width="26.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.4" y="1198.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (23 samples, 2.25%)</title><rect x="183.4" y="1171.0" width="26.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="1182.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (16 samples, 1.57%)</title><rect x="209.9" y="1315.0" width="18.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.37%)</title><rect x="212.3" y="1299.0" width="16.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="215.3" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.isRegressing (1 samples, 0.10%)</title><rect x="212.3" y="1283.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="215.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.27%)</title><rect x="213.4" y="1283.0" width="15.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="216.4" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.27%)</title><rect x="213.4" y="1267.0" width="15.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.4" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.29%)</title><rect x="225.0" y="1251.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.29%)</title><rect x="225.0" y="1235.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="228.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (4 samples, 0.39%)</title><rect x="228.4" y="1315.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.4" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.39%)</title><rect x="228.4" y="1299.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="231.4" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.20%)</title><rect x="228.4" y="1283.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.20%)</title><rect x="230.7" y="1283.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.20%)</title><rect x="230.7" y="1267.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.7" y="1278.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (2 samples, 0.20%)</title><rect x="230.7" y="1251.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="233.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="230.7" y="1235.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="233.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.20%)</title><rect x="230.7" y="1219.0" width="2.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.7" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="233.1" y="1315.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="233.1" y="1299.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.1" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="233.1" y="1283.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.20%)</title><rect x="233.1" y="1267.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="236.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords.iterator (2 samples, 0.20%)</title><rect x="235.4" y="1347.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable.iterator (1 samples, 0.10%)</title><rect x="235.4" y="1331.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="238.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="235.4" y="1315.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.4" y="1326.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="235.4" y="1299.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="238.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="236.5" y="1331.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="239.5" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.29%)</title><rect x="237.7" y="1347.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.7" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.29%)</title><rect x="237.7" y="1331.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.7" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.29%)</title><rect x="237.7" y="1315.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.7" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.29%)</title><rect x="237.7" y="1299.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.7" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="240.0" y="1283.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="243.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.13%)</title><rect x="241.1" y="1363.0" width="37.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="244.1" y="1374.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.13%)</title><rect x="241.1" y="1347.0" width="37.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.1" y="1358.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (22 samples, 2.15%)</title><rect x="241.1" y="1331.0" width="25.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.1" y="1342.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (22 samples, 2.15%)</title><rect x="241.1" y="1315.0" width="25.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="244.1" y="1326.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 2.15%)</title><rect x="241.1" y="1299.0" width="25.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="244.1" y="1310.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (20 samples, 1.96%)</title><rect x="241.1" y="1283.0" width="23.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.1" y="1294.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 1.96%)</title><rect x="241.1" y="1267.0" width="23.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="244.1" y="1278.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (6 samples, 0.59%)</title><rect x="245.8" y="1251.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="248.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.10%)</title><rect x="245.8" y="1235.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="248.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.39%)</title><rect x="246.9" y="1235.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (4 samples, 0.39%)</title><rect x="246.9" y="1219.0" width="4.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (4 samples, 0.39%)</title><rect x="246.9" y="1203.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.9" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.39%)</title><rect x="246.9" y="1187.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (2 samples, 0.20%)</title><rect x="249.2" y="1171.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="251.5" y="1235.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="254.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="251.5" y="1219.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.10%)</title><rect x="251.5" y="1203.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.10%)</title><rect x="251.5" y="1187.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.10%)</title><rect x="251.5" y="1171.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (10 samples, 0.98%)</title><rect x="252.7" y="1251.0" width="11.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="255.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (10 samples, 0.98%)</title><rect x="252.7" y="1235.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="255.7" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (10 samples, 0.98%)</title><rect x="252.7" y="1219.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.7" y="1230.0"></text>
</g>
<g>
<title>java/util/Optional.of (10 samples, 0.98%)</title><rect x="252.7" y="1203.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="255.7" y="1214.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="263.1" y="1187.0" width="1.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="266.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.10%)</title><rect x="264.3" y="1283.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="264.3" y="1267.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="267.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="264.3" y="1251.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="267.3" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="264.3" y="1235.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="267.3" y="1246.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="264.3" y="1219.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="267.3" y="1230.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="264.3" y="1203.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="267.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.10%)</title><rect x="265.4" y="1283.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="265.4" y="1267.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="265.4" y="1251.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="268.4" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="265.4" y="1235.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.4" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="265.4" y="1219.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="265.4" y="1203.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="268.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.10%)</title><rect x="265.4" y="1187.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (8 samples, 0.78%)</title><rect x="266.6" y="1331.0" width="9.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.6" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (6 samples, 0.59%)</title><rect x="266.6" y="1315.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="269.6" y="1326.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.isEmpty (1 samples, 0.10%)</title><rect x="266.6" y="1299.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.6" y="1310.0"></text>
</g>
<g>
<title>java/util/LinkedList.size (1 samples, 0.10%)</title><rect x="266.6" y="1283.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ensureActive (1 samples, 0.10%)</title><rect x="267.7" y="1299.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="270.7" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.10%)</title><rect x="267.7" y="1283.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="270.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.39%)</title><rect x="268.9" y="1299.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="271.9" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.39%)</title><rect x="268.9" y="1283.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="271.9" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.39%)</title><rect x="268.9" y="1267.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.9" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.39%)</title><rect x="268.9" y="1251.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.9" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.39%)</title><rect x="268.9" y="1235.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.9" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.39%)</title><rect x="268.9" y="1219.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.9" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (2 samples, 0.20%)</title><rect x="268.9" y="1203.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.9" y="1214.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.20%)</title><rect x="268.9" y="1187.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.9" y="1198.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.20%)</title><rect x="268.9" y="1171.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.9" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.20%)</title><rect x="268.9" y="1155.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="271.9" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.20%)</title><rect x="268.9" y="1139.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="271.9" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.20%)</title><rect x="268.9" y="1123.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="271.9" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.20%)</title><rect x="268.9" y="1107.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="271.9" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.20%)</title><rect x="268.9" y="1091.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="271.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.20%)</title><rect x="271.2" y="1203.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.2" y="1214.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.20%)</title><rect x="271.2" y="1187.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="274.2" y="1198.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.20%)</title><rect x="271.2" y="1171.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.2" y="1182.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.20%)</title><rect x="271.2" y="1155.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.2" y="1166.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.10%)</title><rect x="271.2" y="1139.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.2" y="1150.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.10%)</title><rect x="271.2" y="1123.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.2" y="1134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.10%)</title><rect x="271.2" y="1107.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.2" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="271.2" y="1091.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="274.2" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.10%)</title><rect x="272.4" y="1139.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.4" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.10%)</title><rect x="272.4" y="1123.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.4" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.10%)</title><rect x="272.4" y="1107.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="275.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.20%)</title><rect x="273.5" y="1315.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.5" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.20%)</title><rect x="273.5" y="1299.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="276.5" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.20%)</title><rect x="273.5" y="1283.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.5" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.10%)</title><rect x="273.5" y="1267.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="276.5" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.10%)</title><rect x="273.5" y="1251.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="276.5" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.10%)</title><rect x="273.5" y="1235.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="276.5" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.10%)</title><rect x="273.5" y="1219.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="276.5" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.addSize (1 samples, 0.10%)</title><rect x="273.5" y="1203.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="276.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.addSize (1 samples, 0.10%)</title><rect x="273.5" y="1187.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="276.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.10%)</title><rect x="274.7" y="1267.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="277.7" y="1278.0"></text>
</g>
<g>
<title>java/util/EnumMap.containsKey (1 samples, 0.10%)</title><rect x="274.7" y="1251.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.7" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.20%)</title><rect x="275.8" y="1331.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="278.8" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.20%)</title><rect x="275.8" y="1315.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="278.8" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="277.0" y="1299.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="277.0" y="1283.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.10%)</title><rect x="277.0" y="1267.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="280.0" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.10%)</title><rect x="278.1" y="1379.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.1" y="1390.0"></text>
</g>
<g>
<title>java/lang/Thread.run (609 samples, 59.65%)</title><rect x="279.3" y="1411.0" width="703.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.3" y="1422.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (609 samples, 59.65%)</title><rect x="279.3" y="1395.0" width="703.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="282.3" y="1406.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (609 samples, 59.65%)</title><rect x="279.3" y="1379.0" width="703.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="282.3" y="1390.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/621500664.run (353 samples, 34.57%)</title><rect x="283.9" y="1363.0" width="408.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="286.9" y="1374.0">com/linecorp/decaton/processor/runtime/internal/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (353 samples, 34.57%)</title><rect x="283.9" y="1347.0" width="408.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.9" y="1358.0">com/linecorp/decaton/processor/runtime/internal/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (353 samples, 34.57%)</title><rect x="283.9" y="1331.0" width="408.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.9" y="1342.0">com/linecorp/decaton/processor/runtime/internal/Processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (353 samples, 34.57%)</title><rect x="283.9" y="1315.0" width="408.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.9" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessP..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 0.29%)</title><rect x="292.0" y="1299.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.0" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (51 samples, 5.00%)</title><rect x="295.5" y="1299.0" width="58.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="298.5" y="1310.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (51 samples, 5.00%)</title><rect x="295.5" y="1283.0" width="58.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="298.5" y="1294.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (51 samples, 5.00%)</title><rect x="295.5" y="1267.0" width="58.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.5" y="1278.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (38 samples, 3.72%)</title><rect x="310.5" y="1251.0" width="43.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="313.5" y="1262.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.29%)</title><rect x="310.5" y="1235.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="313.5" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (35 samples, 3.43%)</title><rect x="314.0" y="1235.0" width="40.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.0" y="1246.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$481/602697504.accept (35 samples, 3.43%)</title><rect x="314.0" y="1219.0" width="40.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="317.0" y="1230.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (35 samples, 3.43%)</title><rect x="314.0" y="1203.0" width="40.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.0" y="1214.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (35 samples, 3.43%)</title><rect x="314.0" y="1187.0" width="40.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="317.0" y="1198.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (35 samples, 3.43%)</title><rect x="314.0" y="1171.0" width="40.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="317.0" y="1182.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (35 samples, 3.43%)</title><rect x="314.0" y="1155.0" width="40.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.0" y="1166.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (10 samples, 0.98%)</title><rect x="314.0" y="1139.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="317.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/1080160074.accept (3 samples, 0.29%)</title><rect x="320.9" y="1123.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1800658063.accept (1 samples, 0.10%)</title><rect x="324.4" y="1123.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (25 samples, 2.45%)</title><rect x="325.5" y="1139.0" width="28.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.5" y="1150.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1800658063.accept (2 samples, 0.20%)</title><rect x="352.1" y="1123.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="355.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (107 samples, 10.48%)</title><rect x="354.4" y="1299.0" width="123.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.4" y="1310.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1266265220.extract (107 samples, 10.48%)</title><rect x="354.4" y="1283.0" width="123.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.4" y="1294.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (107 samples, 10.48%)</title><rect x="354.4" y="1267.0" width="123.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="357.4" y="1278.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (107 samples, 10.48%)</title><rect x="354.4" y="1251.0" width="123.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.4" y="1262.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (107 samples, 10.48%)</title><rect x="354.4" y="1235.0" width="123.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="357.4" y="1246.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (107 samples, 10.48%)</title><rect x="354.4" y="1219.0" width="123.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="357.4" y="1230.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (34 samples, 3.33%)</title><rect x="354.4" y="1203.0" width="39.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.4" y="1214.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (34 samples, 3.33%)</title><rect x="354.4" y="1187.0" width="39.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="357.4" y="1198.0">com..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.49%)</title><rect x="371.7" y="1171.0" width="5.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="374.7" y="1182.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="374.1" y="1155.0" width="3.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="377.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (13 samples, 1.27%)</title><rect x="377.5" y="1171.0" width="15.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="380.5" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="377.5" y="1155.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="380.5" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="377.5" y="1139.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="380.5" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.20%)</title><rect x="377.5" y="1123.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="380.5" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.20%)</title><rect x="377.5" y="1107.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="380.5" y="1118.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="377.5" y="1091.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="380.5" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="377.5" y="1075.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="380.5" y="1086.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="377.5" y="1059.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="380.5" y="1070.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="377.5" y="1043.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="380.5" y="1054.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="377.5" y="1027.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.5" y="1038.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="377.5" y="1011.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="380.5" y="1022.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.10%)</title><rect x="377.5" y="995.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="380.5" y="1006.0"></text>
</g>
<g>
<title>AbsSeq::davg() const (1 samples, 0.10%)</title><rect x="377.5" y="979.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="380.5" y="990.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="378.7" y="1091.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="381.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (10 samples, 0.98%)</title><rect x="379.8" y="1155.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="382.8" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (10 samples, 0.98%)</title><rect x="379.8" y="1139.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.10%)</title><rect x="391.4" y="1155.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.4" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.10%)</title><rect x="391.4" y="1139.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="394.4" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.10%)</title><rect x="391.4" y="1123.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="394.4" y="1134.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="391.4" y="1107.0" width="1.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="394.4" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="391.4" y="1091.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="394.4" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="392.5" y="1171.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="395.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (55 samples, 5.39%)</title><rect x="393.7" y="1203.0" width="63.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.7" y="1214.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.29%)</title><rect x="393.7" y="1187.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="396.7" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.29%)</title><rect x="393.7" y="1171.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.7" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="396.0" y="1155.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="399.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (12 samples, 1.18%)</title><rect x="397.2" y="1187.0" width="13.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="400.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.59%)</title><rect x="404.1" y="1171.0" width="6.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.1" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.39%)</title><rect x="404.1" y="1155.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="407.1" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.39%)</title><rect x="404.1" y="1139.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.1" y="1150.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="406.4" y="1123.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="409.4" y="1134.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="407.6" y="1123.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="410.6" y="1134.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="407.6" y="1107.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="410.6" y="1118.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="407.6" y="1091.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="410.6" y="1102.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="407.6" y="1075.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="410.6" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.10%)</title><rect x="407.6" y="1059.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="410.6" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.20%)</title><rect x="408.7" y="1155.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.7" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.20%)</title><rect x="408.7" y="1139.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.7" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.20%)</title><rect x="408.7" y="1123.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (40 samples, 3.92%)</title><rect x="411.0" y="1187.0" width="46.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="414.0" y="1198.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (40 samples, 3.92%)</title><rect x="411.0" y="1171.0" width="46.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.0" y="1182.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.18%)</title><rect x="411.0" y="1155.0" width="13.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="414.0" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.10%)</title><rect x="411.0" y="1139.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="414.0" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="411.0" y="1123.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="414.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.20%)</title><rect x="412.2" y="1139.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.2" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.20%)</title><rect x="412.2" y="1123.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="415.2" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.20%)</title><rect x="412.2" y="1107.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="415.2" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.78%)</title><rect x="414.5" y="1139.0" width="9.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="417.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="423.8" y="1139.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="426.8" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="423.8" y="1123.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="426.8" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (28 samples, 2.74%)</title><rect x="424.9" y="1155.0" width="32.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.9" y="1166.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (28 samples, 2.74%)</title><rect x="424.9" y="1139.0" width="32.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="427.9" y="1150.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (28 samples, 2.74%)</title><rect x="424.9" y="1123.0" width="32.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="427.9" y="1134.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.88%)</title><rect x="429.5" y="1107.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="432.5" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.39%)</title><rect x="433.0" y="1091.0" width="4.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="436.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.39%)</title><rect x="433.0" y="1075.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="436.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.39%)</title><rect x="433.0" y="1059.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="436.0" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.20%)</title><rect x="435.3" y="1043.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="438.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="437.6" y="1091.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="440.6" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="437.6" y="1075.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="440.6" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (6 samples, 0.59%)</title><rect x="439.9" y="1107.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.49%)</title><rect x="441.1" y="1091.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="444.1" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.49%)</title><rect x="441.1" y="1075.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="444.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.49%)</title><rect x="441.1" y="1059.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="444.1" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (5 samples, 0.49%)</title><rect x="441.1" y="1043.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (5 samples, 0.49%)</title><rect x="441.1" y="1027.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="444.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (5 samples, 0.49%)</title><rect x="441.1" y="1011.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (5 samples, 0.49%)</title><rect x="441.1" y="995.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.1" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (5 samples, 0.49%)</title><rect x="441.1" y="979.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.1" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="446.9" y="1107.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.9" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.59%)</title><rect x="448.0" y="1107.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="451.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.59%)</title><rect x="448.0" y="1091.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="451.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.59%)</title><rect x="448.0" y="1075.0" width="7.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="451.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.59%)</title><rect x="448.0" y="1059.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.59%)</title><rect x="448.0" y="1043.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="451.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.acquireConstructorAccessor (6 samples, 0.59%)</title><rect x="448.0" y="1027.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="451.0" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.20%)</title><rect x="455.0" y="1107.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="458.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.20%)</title><rect x="455.0" y="1091.0" width="2.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="455.0" y="1075.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="456.1" y="1075.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.1" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="456.1" y="1059.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="459.1" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="456.1" y="1043.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.1" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (18 samples, 1.76%)</title><rect x="457.3" y="1203.0" width="20.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (18 samples, 1.76%)</title><rect x="457.3" y="1187.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (18 samples, 1.76%)</title><rect x="457.3" y="1171.0" width="20.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (18 samples, 1.76%)</title><rect x="457.3" y="1155.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="460.3" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (18 samples, 1.76%)</title><rect x="457.3" y="1139.0" width="20.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.3" y="1150.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="472.3" y="1123.0" width="4.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="475.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="472.3" y="1107.0" width="4.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="475.3" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.10%)</title><rect x="476.9" y="1123.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="479.9" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (179 samples, 17.53%)</title><rect x="478.1" y="1299.0" width="206.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.1" y="1310.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (36 samples, 3.53%)</title><rect x="478.1" y="1283.0" width="41.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.1" y="1294.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (36 samples, 3.53%)</title><rect x="478.1" y="1267.0" width="41.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="481.1" y="1278.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (36 samples, 3.53%)</title><rect x="478.1" y="1251.0" width="41.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="481.1" y="1262.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (20 samples, 1.96%)</title><rect x="479.2" y="1235.0" width="23.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.2" y="1246.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (20 samples, 1.96%)</title><rect x="479.2" y="1219.0" width="23.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="482.2" y="1230.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.69%)</title><rect x="490.8" y="1203.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="493.8" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 0.29%)</title><rect x="498.9" y="1203.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="501.9" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (15 samples, 1.47%)</title><rect x="502.3" y="1235.0" width="17.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="505.3" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (15 samples, 1.47%)</title><rect x="502.3" y="1219.0" width="17.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="505.3" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (15 samples, 1.47%)</title><rect x="502.3" y="1203.0" width="17.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="505.3" y="1214.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="517.4" y="1187.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.4" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.20%)</title><rect x="519.7" y="1283.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.7" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.20%)</title><rect x="519.7" y="1267.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="522.7" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (74 samples, 7.25%)</title><rect x="522.0" y="1283.0" width="85.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="525.0" y="1294.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (67 samples, 6.56%)</title><rect x="523.1" y="1267.0" width="77.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="526.1" y="1278.0">com/linec..</text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.10%)</title><rect x="534.7" y="1251.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="537.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="534.7" y="1235.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="537.7" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="534.7" y="1219.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="537.7" y="1230.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="534.7" y="1203.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="537.7" y="1214.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="534.7" y="1187.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="537.7" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="534.7" y="1171.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="537.7" y="1182.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="534.7" y="1155.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="537.7" y="1166.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.29%)</title><rect x="535.9" y="1251.0" width="3.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="538.9" y="1262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.39%)</title><rect x="539.3" y="1251.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="542.3" y="1262.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (49 samples, 4.80%)</title><rect x="543.9" y="1251.0" width="56.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="546.9" y="1262.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (48 samples, 4.70%)</title><rect x="545.1" y="1235.0" width="55.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="548.1" y="1246.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (26 samples, 2.55%)</title><rect x="545.1" y="1219.0" width="30.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="548.1" y="1230.0">ch..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (26 samples, 2.55%)</title><rect x="545.1" y="1203.0" width="30.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="548.1" y="1214.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (17 samples, 1.67%)</title><rect x="555.5" y="1187.0" width="19.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="558.5" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (22 samples, 2.15%)</title><rect x="575.2" y="1219.0" width="25.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="578.2" y="1230.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (22 samples, 2.15%)</title><rect x="575.2" y="1203.0" width="25.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="578.2" y="1214.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (8 samples, 0.78%)</title><rect x="575.2" y="1187.0" width="9.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="578.2" y="1198.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (8 samples, 0.78%)</title><rect x="575.2" y="1171.0" width="9.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="578.2" y="1182.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (8 samples, 0.78%)</title><rect x="575.2" y="1155.0" width="9.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="578.2" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (14 samples, 1.37%)</title><rect x="584.4" y="1187.0" width="16.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="587.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.29%)</title><rect x="597.1" y="1171.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="600.1" y="1182.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.20%)</title><rect x="597.1" y="1155.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="600.1" y="1166.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="599.4" y="1155.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="602.4" y="1166.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="599.4" y="1139.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="602.4" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="599.4" y="1123.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="602.4" y="1134.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="599.4" y="1107.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="602.4" y="1118.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="599.4" y="1091.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="602.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (6 samples, 0.59%)</title><rect x="600.6" y="1267.0" width="6.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.6" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (6 samples, 0.59%)</title><rect x="600.6" y="1251.0" width="6.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.6" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.59%)</title><rect x="600.6" y="1235.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.6" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.59%)</title><rect x="600.6" y="1219.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.6" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.29%)</title><rect x="600.6" y="1203.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="603.6" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.29%)</title><rect x="604.0" y="1203.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="607.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (56 samples, 5.48%)</title><rect x="607.5" y="1283.0" width="64.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="610.5" y="1294.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (56 samples, 5.48%)</title><rect x="607.5" y="1267.0" width="64.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="610.5" y="1278.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/978995460.process (14 samples, 1.37%)</title><rect x="611.0" y="1251.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="614.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (13 samples, 1.27%)</title><rect x="612.1" y="1235.0" width="15.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="615.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (13 samples, 1.27%)</title><rect x="612.1" y="1219.0" width="15.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.18%)</title><rect x="613.3" y="1203.0" width="13.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="616.3" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.49%)</title><rect x="615.6" y="1187.0" width="5.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="618.6" y="1198.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="617.9" y="1171.0" width="3.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="620.9" y="1182.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.49%)</title><rect x="621.4" y="1187.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="624.4" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.49%)</title><rect x="621.4" y="1171.0" width="5.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="624.4" y="1182.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.49%)</title><rect x="621.4" y="1155.0" width="5.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="624.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.49%)</title><rect x="627.2" y="1251.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="630.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.20%)</title><rect x="630.6" y="1235.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="633.6" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.10%)</title><rect x="631.8" y="1219.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="634.8" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.metadata (1 samples, 0.10%)</title><rect x="632.9" y="1251.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.20%)</title><rect x="634.1" y="1251.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="635.2" y="1235.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.49%)</title><rect x="636.4" y="1251.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.4" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.49%)</title><rect x="636.4" y="1235.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="639.4" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.10%)</title><rect x="642.2" y="1251.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.2" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$477/961326582.get (1 samples, 0.10%)</title><rect x="642.2" y="1235.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.2" y="1246.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.49%)</title><rect x="643.3" y="1251.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.49%)</title><rect x="643.3" y="1235.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.3" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$477/961326582.get$Lambda (5 samples, 0.49%)</title><rect x="643.3" y="1219.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.3" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.49%)</title><rect x="643.3" y="1203.0" width="5.8" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="646.3" y="1214.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.49%)</title><rect x="643.3" y="1187.0" width="5.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="646.3" y="1198.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.20%)</title><rect x="649.1" y="1251.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.1" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.20%)</title><rect x="649.1" y="1235.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="652.1" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (2 samples, 0.20%)</title><rect x="649.1" y="1219.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="652.1" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (7 samples, 0.69%)</title><rect x="651.4" y="1251.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="654.4" y="1262.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.10%)</title><rect x="651.4" y="1235.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.4" y="1246.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (1 samples, 0.10%)</title><rect x="651.4" y="1219.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="654.4" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (6 samples, 0.59%)</title><rect x="652.6" y="1235.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="655.6" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.10%)</title><rect x="656.1" y="1219.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.1" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="657.2" y="1219.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.2" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.10%)</title><rect x="658.4" y="1219.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="661.4" y="1230.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (1 samples, 0.10%)</title><rect x="658.4" y="1203.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="661.4" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.29%)</title><rect x="659.5" y="1251.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="662.5" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="661.8" y="1235.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.8" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.78%)</title><rect x="663.0" y="1251.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 0.78%)</title><rect x="663.0" y="1235.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="666.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.78%)</title><rect x="663.0" y="1219.0" width="9.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="666.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (7 samples, 0.69%)</title><rect x="663.0" y="1203.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$479/1932339300.accept (3 samples, 0.29%)</title><rect x="666.5" y="1187.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.5" y="1198.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="669.9" y="1187.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="672.9" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="671.1" y="1203.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.1" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$479/1932339300.accept (1 samples, 0.10%)</title><rect x="671.1" y="1187.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="674.1" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.10%)</title><rect x="671.1" y="1171.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="674.1" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.08%)</title><rect x="672.2" y="1283.0" width="12.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="675.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (11 samples, 1.08%)</title><rect x="672.2" y="1267.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.08%)</title><rect x="672.2" y="1251.0" width="12.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.20%)</title><rect x="672.2" y="1235.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.2" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/479891181.accept (1 samples, 0.10%)</title><rect x="673.4" y="1219.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.4" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.88%)</title><rect x="674.5" y="1235.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.5" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/479891181.accept (9 samples, 0.88%)</title><rect x="674.5" y="1219.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.5" y="1230.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.59%)</title><rect x="675.7" y="1203.0" width="6.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="678.7" y="1214.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.59%)</title><rect x="675.7" y="1187.0" width="6.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="678.7" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.20%)</title><rect x="682.6" y="1203.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="685.6" y="1214.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.59%)</title><rect x="684.9" y="1299.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="687.9" y="1310.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.49%)</title><rect x="686.1" y="1283.0" width="5.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="689.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.20%)</title><rect x="691.9" y="1363.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="694.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.20%)</title><rect x="691.9" y="1347.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="694.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.20%)</title><rect x="691.9" y="1331.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="694.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.20%)</title><rect x="691.9" y="1315.0" width="2.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="694.9" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/621500664.run (1 samples, 0.10%)</title><rect x="693.0" y="1299.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="696.0" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (250 samples, 24.49%)</title><rect x="694.2" y="1363.0" width="288.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.2" y="1374.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (247 samples, 24.19%)</title><rect x="697.7" y="1347.0" width="285.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="700.7" y="1358.0">java/util/concurrent/LinkedBlockingQue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (230 samples, 22.53%)</title><rect x="697.7" y="1331.0" width="265.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="700.7" y="1342.0">java/util/concurrent/locks/Abstract..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.10%)</title><rect x="698.8" y="1315.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.8" y="1326.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="698.8" y="1299.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="701.8" y="1310.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="698.8" y="1283.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="701.8" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="698.8" y="1267.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="701.8" y="1278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="698.8" y="1251.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="701.8" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="698.8" y="1235.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="701.8" y="1246.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.10%)</title><rect x="698.8" y="1219.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="701.8" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (22 samples, 2.15%)</title><rect x="700.0" y="1315.0" width="25.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.0" y="1326.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (16 samples, 1.57%)</title><rect x="725.4" y="1315.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="728.4" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.57%)</title><rect x="725.4" y="1299.0" width="18.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="728.4" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.39%)</title><rect x="739.3" y="1283.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="742.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (13 samples, 1.27%)</title><rect x="743.9" y="1315.0" width="15.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="746.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (13 samples, 1.27%)</title><rect x="743.9" y="1299.0" width="15.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="746.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (177 samples, 17.34%)</title><rect x="758.9" y="1315.0" width="204.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="761.9" y="1326.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (176 samples, 17.24%)</title><rect x="760.1" y="1299.0" width="203.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="763.1" y="1310.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.20%)</title><rect x="761.2" y="1283.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="764.2" y="1294.0"></text>
</g>
<g>
<title>Unsafe_Park (172 samples, 16.85%)</title><rect x="763.5" y="1283.0" width="198.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="766.5" y="1294.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.29%)</title><rect x="769.3" y="1267.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="772.3" y="1278.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (34 samples, 3.33%)</title><rect x="772.8" y="1267.0" width="39.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="775.8" y="1278.0">Par..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.10%)</title><rect x="787.8" y="1251.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="790.8" y="1262.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (12 samples, 1.18%)</title><rect x="789.0" y="1251.0" width="13.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="792.0" y="1262.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.29%)</title><rect x="795.9" y="1235.0" width="3.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="798.9" y="1246.0"></text>
</g>
<g>
<title>update_get_addr (3 samples, 0.29%)</title><rect x="799.4" y="1235.0" width="3.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="802.4" y="1246.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.39%)</title><rect x="802.8" y="1251.0" width="4.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="805.8" y="1262.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.10%)</title><rect x="807.5" y="1251.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="810.5" y="1262.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.29%)</title><rect x="808.6" y="1251.0" width="3.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="811.6" y="1262.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (2 samples, 0.20%)</title><rect x="812.1" y="1267.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="815.1" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.10%)</title><rect x="814.4" y="1267.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="817.4" y="1278.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.29%)</title><rect x="815.5" y="1267.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="818.5" y="1278.0"></text>
</g>
<g>
<title>__lll_unlock_wake (52 samples, 5.09%)</title><rect x="819.0" y="1267.0" width="60.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="822.0" y="1278.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (57 samples, 5.58%)</title><rect x="879.1" y="1267.0" width="65.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="882.1" y="1278.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.20%)</title><rect x="945.0" y="1267.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="948.0" y="1278.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="947.3" y="1267.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="950.3" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="948.5" y="1267.0" width="1.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="951.5" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.59%)</title><rect x="949.6" y="1267.0" width="6.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="952.6" y="1278.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.20%)</title><rect x="956.5" y="1267.0" width="2.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="959.5" y="1278.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="958.9" y="1267.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="961.9" y="1278.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="960.0" y="1267.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="963.0" y="1278.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="961.2" y="1267.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="964.2" y="1278.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="962.3" y="1283.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="965.3" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.29%)</title><rect x="963.5" y="1331.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="966.5" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.37%)</title><rect x="966.9" y="1331.0" width="16.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="969.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.37%)</title><rect x="966.9" y="1315.0" width="16.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="969.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.37%)</title><rect x="966.9" y="1299.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="969.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.37%)</title><rect x="966.9" y="1283.0" width="16.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="969.9" y="1294.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.10%)</title><rect x="983.1" y="1411.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="986.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.20%)</title><rect x="984.3" y="1411.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.3" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (2 samples, 0.20%)</title><rect x="984.3" y="1395.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="987.3" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 0.20%)</title><rect x="984.3" y="1379.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.3" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.10%)</title><rect x="984.3" y="1363.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="987.3" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.10%)</title><rect x="984.3" y="1347.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="987.3" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.10%)</title><rect x="984.3" y="1331.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="987.3" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="984.3" y="1315.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="987.3" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.10%)</title><rect x="984.3" y="1299.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="987.3" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.10%)</title><rect x="984.3" y="1283.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="987.3" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.10%)</title><rect x="984.3" y="1267.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.10%)</title><rect x="984.3" y="1251.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="987.3" y="1262.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.10%)</title><rect x="984.3" y="1235.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="987.3" y="1246.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="984.3" y="1219.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="987.3" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="984.3" y="1203.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.3" y="1214.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="984.3" y="1187.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.3" y="1198.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="984.3" y="1171.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="987.3" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="984.3" y="1155.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.3" y="1166.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="984.3" y="1139.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="987.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="985.4" y="1363.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.4" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="985.4" y="1347.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="988.4" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="985.4" y="1331.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="988.4" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="985.4" y="1315.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.4" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="985.4" y="1299.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.4" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="985.4" y="1283.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="988.4" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="985.4" y="1267.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="988.4" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.topicIds (1 samples, 0.10%)</title><rect x="985.4" y="1251.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="988.4" y="1262.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="985.4" y="1235.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="988.4" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="985.4" y="1219.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="988.4" y="1230.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="985.4" y="1203.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.4" y="1214.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="985.4" y="1187.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="988.4" y="1198.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="985.4" y="1171.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="988.4" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="985.4" y="1155.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="988.4" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.10%)</title><rect x="985.4" y="1139.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="988.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="985.4" y="1123.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="988.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.10%)</title><rect x="985.4" y="1107.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="988.4" y="1118.0"></text>
</g>
<g>
<title>start_thread (176 samples, 17.24%)</title><rect x="986.6" y="1411.0" width="203.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="989.6" y="1422.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (176 samples, 17.24%)</title><rect x="986.6" y="1395.0" width="203.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="989.6" y="1406.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (176 samples, 17.24%)</title><rect x="986.6" y="1379.0" width="203.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.6" y="1390.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.10%)</title><rect x="986.6" y="1363.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.6" y="1374.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="986.6" y="1347.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="989.6" y="1358.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="986.6" y="1331.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.6" y="1342.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="986.6" y="1315.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="989.6" y="1326.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (174 samples, 17.04%)</title><rect x="987.7" y="1363.0" width="201.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.7" y="1374.0">JavaThread::thread_main_in..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (173 samples, 16.94%)</title><rect x="987.7" y="1347.0" width="200.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="990.7" y="1358.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (173 samples, 16.94%)</title><rect x="987.7" y="1331.0" width="200.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.7" y="1342.0">CompileBroker::invoke_comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (171 samples, 16.75%)</title><rect x="987.7" y="1315.0" width="197.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.7" y="1326.0">C2Compiler::compile_method..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (171 samples, 16.75%)</title><rect x="987.7" y="1299.0" width="197.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="990.7" y="1310.0">Compile::Compile(ciEnv*, C..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.10%)</title><rect x="987.7" y="1283.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="990.7" y="1294.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.10%)</title><rect x="987.7" y="1267.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.7" y="1278.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="987.7" y="1251.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="990.7" y="1262.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="987.7" y="1235.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="990.7" y="1246.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="987.7" y="1219.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.7" y="1230.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="987.7" y="1203.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.7" y="1214.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="987.7" y="1187.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.7" y="1198.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="987.7" y="1171.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="990.7" y="1182.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="987.7" y="1155.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.7" y="1166.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="987.7" y="1139.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.7" y="1150.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="987.7" y="1123.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.7" y="1134.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (68 samples, 6.66%)</title><rect x="988.9" y="1283.0" width="78.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="991.9" y="1294.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="988.9" y="1267.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="991.9" y="1278.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="988.9" y="1251.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="991.9" y="1262.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="990.1" y="1267.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.1" y="1278.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="990.1" y="1251.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.1" y="1262.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="990.1" y="1235.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="993.1" y="1246.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.10%)</title><rect x="990.1" y="1219.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="993.1" y="1230.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="990.1" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="993.1" y="1214.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="990.1" y="1187.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="993.1" y="1198.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 0.69%)</title><rect x="991.2" y="1267.0" width="8.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="994.2" y="1278.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (2 samples, 0.20%)</title><rect x="991.2" y="1251.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="994.2" y="1262.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.10%)</title><rect x="992.4" y="1235.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.4" y="1246.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.49%)</title><rect x="993.5" y="1251.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.5" y="1262.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (4 samples, 0.39%)</title><rect x="993.5" y="1235.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="996.5" y="1246.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="998.1" y="1235.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1001.1" y="1246.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.59%)</title><rect x="999.3" y="1267.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1002.3" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 0.59%)</title><rect x="999.3" y="1251.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1002.3" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.20%)</title><rect x="999.3" y="1235.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.3" y="1246.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.10%)</title><rect x="999.3" y="1219.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1002.3" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.10%)</title><rect x="1000.5" y="1219.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1003.5" y="1230.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1000.5" y="1203.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1003.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1001.6" y="1235.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1004.6" y="1246.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1001.6" y="1219.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.6" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.29%)</title><rect x="1002.8" y="1235.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.8" y="1246.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1003.9" y="1219.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1006.9" y="1230.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.10%)</title><rect x="1005.1" y="1219.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1008.1" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1005.1" y="1203.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1008.1" y="1214.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.10%)</title><rect x="1006.2" y="1267.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1009.2" y="1278.0"></text>
</g>
<g>
<title>jmpConNode::negate() (1 samples, 0.10%)</title><rect x="1006.2" y="1251.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1009.2" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (52 samples, 5.09%)</title><rect x="1007.4" y="1267.0" width="60.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.4" y="1278.0">PhaseC..</text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.49%)</title><rect x="1008.6" y="1251.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.6" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1008.6" y="1235.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1011.6" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (3 samples, 0.29%)</title><rect x="1010.9" y="1235.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1013.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1012.0" y="1219.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.29%)</title><rect x="1014.3" y="1251.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1017.3" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1014.3" y="1235.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1017.3" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.20%)</title><rect x="1015.5" y="1235.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1018.5" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1016.6" y="1219.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1019.6" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.59%)</title><rect x="1017.8" y="1251.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.8" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (13 samples, 1.27%)</title><rect x="1024.7" y="1251.0" width="15.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.7" y="1262.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.10%)</title><rect x="1029.4" y="1235.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.4" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.10%)</title><rect x="1030.5" y="1235.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1033.5" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.39%)</title><rect x="1031.7" y="1235.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1034.7" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1034.0" y="1219.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1037.0" y="1230.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1035.1" y="1219.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1038.1" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (3 samples, 0.29%)</title><rect x="1036.3" y="1235.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1039.3" y="1246.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1036.3" y="1219.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1039.3" y="1230.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.20%)</title><rect x="1037.4" y="1219.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1040.4" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.10%)</title><rect x="1039.8" y="1251.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1042.8" y="1262.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1039.8" y="1235.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1042.8" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.59%)</title><rect x="1040.9" y="1251.0" width="6.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1043.9" y="1262.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1044.4" y="1235.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1047.4" y="1246.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1045.5" y="1235.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1048.5" y="1246.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="1046.7" y="1235.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1049.7" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.10%)</title><rect x="1047.8" y="1251.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1050.8" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1049.0" y="1251.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1052.0" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 0.49%)</title><rect x="1050.2" y="1251.0" width="5.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1053.2" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.29%)</title><rect x="1052.5" y="1235.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1055.5" y="1246.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1055.9" y="1251.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1058.9" y="1262.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1055.9" y="1235.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1058.9" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.20%)</title><rect x="1057.1" y="1251.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1060.1" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1058.2" y="1235.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1061.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.20%)</title><rect x="1059.4" y="1251.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.4" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1059.4" y="1235.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.4" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1060.6" y="1235.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1063.6" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.49%)</title><rect x="1061.7" y="1251.0" width="5.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1064.7" y="1262.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.10%)</title><rect x="1062.9" y="1235.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1065.9" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.29%)</title><rect x="1064.0" y="1235.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1067.0" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1066.3" y="1219.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1069.3" y="1230.0"></text>
</g>
<g>
<title>Compile::Optimize() (93 samples, 9.11%)</title><rect x="1067.5" y="1283.0" width="107.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1070.5" y="1294.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1067.5" y="1267.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.5" y="1278.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1067.5" y="1251.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1070.5" y="1262.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (32 samples, 3.13%)</title><rect x="1068.6" y="1267.0" width="37.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.6" y="1278.0">Com..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (32 samples, 3.13%)</title><rect x="1068.6" y="1251.0" width="37.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1071.6" y="1262.0">Pha..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1068.6" y="1235.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1071.6" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1068.6" y="1219.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.6" y="1230.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1068.6" y="1203.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1071.6" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::partial_peel(IdealLoopTree*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1068.6" y="1187.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1071.6" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::recompute_dom_depth() (1 samples, 0.10%)</title><rect x="1068.6" y="1171.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.6" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1069.8" y="1235.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.8" y="1246.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1071.0" y="1219.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1074.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1072.1" y="1235.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1075.1" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1072.1" y="1219.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1075.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (24 samples, 2.35%)</title><rect x="1073.3" y="1235.0" width="27.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.3" y="1246.0">P..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.10%)</title><rect x="1076.7" y="1219.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (20 samples, 1.96%)</title><rect x="1077.9" y="1219.0" width="23.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1080.9" y="1230.0">P..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.10%)</title><rect x="1079.0" y="1203.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.0" y="1214.0"></text>
</g>
<g>
<title>MergeMemNode::Opcode() const (1 samples, 0.10%)</title><rect x="1080.2" y="1203.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1083.2" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (17 samples, 1.67%)</title><rect x="1081.4" y="1203.0" width="19.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1082.5" y="1187.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1085.5" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (15 samples, 1.47%)</title><rect x="1083.7" y="1187.0" width="17.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1086.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1101.0" y="1235.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.10%)</title><rect x="1101.0" y="1219.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.29%)</title><rect x="1102.2" y="1235.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.29%)</title><rect x="1102.2" y="1219.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.2" y="1230.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1103.3" y="1203.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.3" y="1214.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.10%)</title><rect x="1103.3" y="1187.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.3" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1104.5" y="1203.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.5" y="1214.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1104.5" y="1187.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1107.5" y="1198.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.10%)</title><rect x="1105.6" y="1267.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1108.6" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1105.6" y="1251.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1105.6" y="1235.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1108.6" y="1246.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1105.6" y="1219.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.6" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.10%)</title><rect x="1105.6" y="1203.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1108.6" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1105.6" y="1187.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1108.6" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1105.6" y="1171.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1108.6" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1105.6" y="1155.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1108.6" y="1166.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1105.6" y="1139.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.6" y="1150.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1105.6" y="1123.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1108.6" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (24 samples, 2.35%)</title><rect x="1106.8" y="1267.0" width="27.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.8" y="1278.0">C..</text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (24 samples, 2.35%)</title><rect x="1106.8" y="1251.0" width="27.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.8" y="1262.0">C..</text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (23 samples, 2.25%)</title><rect x="1107.9" y="1235.0" width="26.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1110.9" y="1246.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (23 samples, 2.25%)</title><rect x="1107.9" y="1219.0" width="26.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1110.9" y="1230.0">C..</text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.29%)</title><rect x="1107.9" y="1203.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.9" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1187.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.9" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1171.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.9" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1155.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1139.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1110.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1123.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1107.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1110.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1091.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1075.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.9" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1059.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1110.9" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1043.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.9" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1027.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.9" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="1011.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.9" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="995.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1110.9" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="979.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="963.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="947.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="931.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1110.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="915.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.9" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="899.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="883.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1110.9" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="867.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.9" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1110.9" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="835.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1110.9" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1107.9" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.9" y="830.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1107.9" y="803.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.9" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.1" y="1187.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1112.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.1" y="1171.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.1" y="1155.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1112.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.1" y="1139.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.1" y="1123.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1109.1" y="1107.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="1091.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="1075.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="1059.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="1043.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1112.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="1027.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="1011.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="995.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="979.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="963.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="947.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="931.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1112.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="915.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="899.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="883.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="867.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="851.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="835.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1112.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="819.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="803.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="787.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="755.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1112.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="723.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1112.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="707.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1112.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="691.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="659.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="643.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="627.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="611.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="595.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="579.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="563.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1112.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="547.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="531.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="515.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1112.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="499.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1112.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="483.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="451.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="435.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="403.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="387.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="371.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1112.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="355.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1112.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1109.1" y="339.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="1091.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1113.3" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="1075.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="1059.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="1043.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.3" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.3" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="995.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.3" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="979.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1113.3" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="963.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.3" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1110.3" y="947.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.3" y="958.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1110.3" y="931.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.3" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (20 samples, 1.96%)</title><rect x="1111.4" y="1203.0" width="23.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.4" y="1214.0">C..</text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (7 samples, 0.69%)</title><rect x="1111.4" y="1187.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1114.4" y="1198.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (7 samples, 0.69%)</title><rect x="1111.4" y="1171.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.4" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (13 samples, 1.27%)</title><rect x="1119.5" y="1187.0" width="15.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.29%)</title><rect x="1119.5" y="1171.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1122.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1155.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1139.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1123.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1107.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1091.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1122.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1075.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1059.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1043.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1027.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="1011.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="995.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="979.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="963.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1122.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="947.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="931.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="915.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1122.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="899.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="883.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1122.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="867.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="851.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="835.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1122.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1122.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="803.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="787.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="771.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="755.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1122.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="739.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1122.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="707.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="691.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="675.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="659.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="643.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1122.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="627.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="611.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="595.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="579.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="563.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="547.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1122.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1122.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1119.5" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.5" y="526.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1119.5" y="499.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.5" y="510.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1119.5" y="483.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1122.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1120.7" y="1155.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1123.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1120.7" y="1139.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1123.7" y="1150.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1120.7" y="1123.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1123.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1139.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1123.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.8" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1107.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1124.8" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1091.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1075.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1059.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1043.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.8" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1027.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1124.8" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="1011.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.8" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="995.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.8" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.8" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.8" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="947.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1124.8" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="931.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1124.8" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="915.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1124.8" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1121.8" y="899.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1124.8" y="910.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1121.8" y="883.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.8" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (10 samples, 0.98%)</title><rect x="1123.0" y="1171.0" width="11.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1123.0" y="1155.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (9 samples, 0.88%)</title><rect x="1124.1" y="1155.0" width="10.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.49%)</title><rect x="1124.1" y="1139.0" width="5.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.49%)</title><rect x="1124.1" y="1123.0" width="5.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1127.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.49%)</title><rect x="1124.1" y="1107.0" width="5.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1127.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.49%)</title><rect x="1124.1" y="1091.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1124.1" y="1075.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.1" y="1086.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1124.1" y="1059.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1127.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.39%)</title><rect x="1125.3" y="1075.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1128.3" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.39%)</title><rect x="1125.3" y="1059.0" width="4.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.3" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1125.3" y="1043.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.3" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.29%)</title><rect x="1126.4" y="1043.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1129.4" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.29%)</title><rect x="1126.4" y="1027.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.4" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1126.4" y="1011.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.4" y="1022.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1126.4" y="995.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.4" y="1006.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1126.4" y="979.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1129.4" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1127.6" y="1011.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1127.6" y="995.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.20%)</title><rect x="1127.6" y="979.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.6" y="990.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (2 samples, 0.20%)</title><rect x="1127.6" y="963.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.39%)</title><rect x="1129.9" y="1139.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.9" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1129.9" y="1123.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.9" y="1134.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1129.9" y="1107.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1132.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.29%)</title><rect x="1131.1" y="1123.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.29%)</title><rect x="1131.1" y="1107.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="1091.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.1" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="1075.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.1" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="1027.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="1011.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="995.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="979.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="963.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="947.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="931.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="915.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="883.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="867.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="851.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1134.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="771.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="755.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="707.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="675.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1134.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.1" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="595.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="579.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.1" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="547.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="531.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1134.1" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="515.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.1" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.1" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="483.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.1" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1134.1" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="435.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.1" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="419.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="387.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1134.1" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="371.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.1" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="355.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1134.1" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="339.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.1" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="323.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.1" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="307.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.1" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1134.1" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="275.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.1" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="259.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.1" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="243.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.1" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="227.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1134.1" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="211.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1134.1" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="195.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="179.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.1" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="163.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1134.1" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="147.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.1" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="131.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.1" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="115.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.1" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1131.1" y="99.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.1" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="1091.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="1075.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="1059.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="1043.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="1027.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="1011.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="995.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="979.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="963.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="947.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="931.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="915.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="899.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="883.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="867.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="851.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="835.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="819.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="803.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="787.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1135.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="771.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="755.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="739.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="723.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="707.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="691.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="675.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="659.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="643.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="627.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="611.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="595.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="579.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="563.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1132.2" y="547.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="499.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="483.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="467.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="451.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="435.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="419.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="403.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="387.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="371.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="355.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1135.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="339.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="291.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="275.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="259.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="243.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="227.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="211.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="195.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="179.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1135.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="163.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1135.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="147.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="131.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="115.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1135.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="99.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="83.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="67.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="51.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.2" y="62.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1132.2" y="35.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.2" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1136.4" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="515.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1136.4" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1136.4" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.4" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="467.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.4" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1136.4" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="435.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.4" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.4" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="403.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.4" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1136.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="355.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.4" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="339.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.4" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.4" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="307.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1136.4" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1133.4" y="291.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1136.4" y="302.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.10%)</title><rect x="1133.4" y="275.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.4" y="286.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1134.5" y="1267.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.5" y="1278.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1134.5" y="1251.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.5" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (12 samples, 1.18%)</title><rect x="1135.7" y="1267.0" width="13.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.7" y="1278.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1135.7" y="1251.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.7" y="1262.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1135.7" y="1235.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.7" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.82] (1 samples, 0.10%)</title><rect x="1135.7" y="1219.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1135.7" y="1203.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.7" y="1214.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.10%)</title><rect x="1135.7" y="1187.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.7" y="1198.0"></text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.10%)</title><rect x="1135.7" y="1171.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.7" y="1182.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.20%)</title><rect x="1136.8" y="1251.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.8" y="1262.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.10%)</title><rect x="1138.0" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1139.1" y="1251.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.1" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.59%)</title><rect x="1140.3" y="1251.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.3" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.59%)</title><rect x="1140.3" y="1235.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.3" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (6 samples, 0.59%)</title><rect x="1140.3" y="1219.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1143.3" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (6 samples, 0.59%)</title><rect x="1140.3" y="1203.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.3" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.10%)</title><rect x="1147.2" y="1251.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.2" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1148.4" y="1251.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.4" y="1262.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (20 samples, 1.96%)</title><rect x="1149.5" y="1267.0" width="23.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.5" y="1278.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (20 samples, 1.96%)</title><rect x="1149.5" y="1251.0" width="23.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.5" y="1262.0">P..</text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1149.5" y="1235.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.5" y="1246.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1149.5" y="1219.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.5" y="1230.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.10%)</title><rect x="1149.5" y="1203.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1149.5" y="1187.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1152.5" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1149.5" y="1171.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.5" y="1182.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.10%)</title><rect x="1149.5" y="1155.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.5" y="1166.0"></text>
</g>
<g>
<title>MemBarNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1150.7" y="1235.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.7" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1150.7" y="1219.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1153.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1150.7" y="1203.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1153.7" y="1214.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1150.7" y="1187.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (9 samples, 0.88%)</title><rect x="1151.9" y="1235.0" width="10.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="1246.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.10%)</title><rect x="1158.8" y="1219.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.8" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.20%)</title><rect x="1160.0" y="1219.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.0" y="1230.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (2 samples, 0.20%)</title><rect x="1160.0" y="1203.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="1214.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.29%)</title><rect x="1162.3" y="1235.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.3" y="1246.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.10%)</title><rect x="1163.4" y="1219.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1166.4" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1164.6" y="1219.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1167.6" y="1230.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1164.6" y="1203.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.6" y="1214.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1165.7" y="1235.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="1246.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.20%)</title><rect x="1165.7" y="1219.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1168.7" y="1230.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (4 samples, 0.39%)</title><rect x="1168.0" y="1235.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.0" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (4 samples, 0.39%)</title><rect x="1168.0" y="1219.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1168.0" y="1203.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="1214.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1168.0" y="1187.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.0" y="1198.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1168.0" y="1171.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1171.0" y="1182.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1168.0" y="1155.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1171.0" y="1166.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1168.0" y="1139.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.0" y="1150.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.39%)</title><rect x="1168.0" y="1123.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.0" y="1134.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.29%)</title><rect x="1168.0" y="1107.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.0" y="1118.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1168.0" y="1091.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.0" y="1102.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1168.0" y="1075.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.0" y="1086.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1168.0" y="1059.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.0" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1168.0" y="1043.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.0" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="1027.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="1011.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.0" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="995.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="979.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="963.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.0" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="947.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="931.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.0" y="942.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1168.0" y="915.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.0" y="926.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1168.0" y="899.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.0" y="910.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1169.2" y="1027.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.2" y="1038.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.2" y="1011.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.2" y="1022.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1170.4" y="1091.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.4" y="1102.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1170.4" y="1075.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1173.4" y="1086.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.10%)</title><rect x="1171.5" y="1107.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.5" y="1118.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="1091.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="1102.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1172.7" y="1267.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.7" y="1278.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1172.7" y="1251.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1175.7" y="1262.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1172.7" y="1235.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="1246.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1172.7" y="1219.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.7" y="1230.0"></text>
</g>
<g>
<title>Type::operator new(unsigned long) (1 samples, 0.10%)</title><rect x="1172.7" y="1203.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.7" y="1214.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.10%)</title><rect x="1173.8" y="1267.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="1278.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1175.0" y="1283.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.0" y="1294.0"></text>
</g>
<g>
<title>IfTrueNode::Opcode() const (1 samples, 0.10%)</title><rect x="1175.0" y="1267.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1178.0" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.69%)</title><rect x="1176.1" y="1283.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.69%)</title><rect x="1176.1" y="1267.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.69%)</title><rect x="1176.1" y="1251.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.69%)</title><rect x="1176.1" y="1235.0" width="8.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.69%)</title><rect x="1176.1" y="1219.0" width="8.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.69%)</title><rect x="1176.1" y="1203.0" width="8.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.59%)</title><rect x="1176.1" y="1187.0" width="7.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.1" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.59%)</title><rect x="1176.1" y="1171.0" width="7.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.1" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.59%)</title><rect x="1176.1" y="1155.0" width="7.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.59%)</title><rect x="1176.1" y="1139.0" width="7.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.59%)</title><rect x="1176.1" y="1123.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.49%)</title><rect x="1176.1" y="1107.0" width="5.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.1" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1176.1" y="1091.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1176.1" y="1075.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1176.1" y="1059.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1176.1" y="1043.0" width="4.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1176.1" y="1027.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1176.1" y="1011.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.1" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1176.1" y="995.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.1" y="1006.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.10%)</title><rect x="1176.1" y="979.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="990.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool&amp;) (1 samples, 0.10%)</title><rect x="1176.1" y="963.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="974.0"></text>
</g>
<g>
<title>ciMemberName::get_vmtarget() const (1 samples, 0.10%)</title><rect x="1176.1" y="947.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.1" y="958.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1176.1" y="931.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="942.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1176.1" y="915.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1176.1" y="899.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="910.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.10%)</title><rect x="1176.1" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="894.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.10%)</title><rect x="1176.1" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.1" y="878.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.10%)</title><rect x="1176.1" y="851.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.1" y="862.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.10%)</title><rect x="1176.1" y="835.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.1" y="846.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1177.3" y="995.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.3" y="1006.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.10%)</title><rect x="1177.3" y="979.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.3" y="990.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_native_hashcode(bool, bool) (1 samples, 0.10%)</title><rect x="1177.3" y="963.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.3" y="974.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.10%)</title><rect x="1177.3" y="947.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="958.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.10%)</title><rect x="1177.3" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.4" y="995.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.4" y="979.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.4" y="963.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.4" y="947.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.4" y="931.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.4" y="915.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="926.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.4" y="899.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1178.4" y="883.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1178.4" y="867.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1178.4" y="851.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1178.4" y="835.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1178.4" y="819.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1178.4" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.10%)</title><rect x="1178.4" y="787.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.10%)</title><rect x="1178.4" y="771.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1178.4" y="755.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1178.4" y="739.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1179.6" y="1011.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="1022.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1179.6" y="995.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.6" y="1006.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.10%)</title><rect x="1179.6" y="979.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="990.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_ptr_type(TypePtr::PTR) const (1 samples, 0.10%)</title><rect x="1179.6" y="963.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.6" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1179.6" y="947.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="958.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="1091.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="1075.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.8" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="1043.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="1011.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="995.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.8" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="947.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.8" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="931.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="915.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="899.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="883.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.8" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="867.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.8" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="851.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="835.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.8" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="803.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="739.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="707.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="691.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="675.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="659.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="643.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="611.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.8" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.8" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.8" y="563.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.8" y="547.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.8" y="531.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.8" y="515.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1180.8" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.8" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1180.8" y="483.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.8" y="494.0"></text>
</g>
<g>
<title>ciType::is_subtype_of(ciType*) (1 samples, 0.10%)</title><rect x="1180.8" y="467.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="1107.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.9" y="1118.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="1091.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.9" y="1102.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.10%)</title><rect x="1181.9" y="1075.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.9" y="1086.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1181.9" y="1059.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.9" y="1070.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.10%)</title><rect x="1181.9" y="1043.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.9" y="1054.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.10%)</title><rect x="1181.9" y="1027.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.9" y="1038.0"></text>
</g>
<g>
<title>IdealKit::IdealKit(GraphKit*, bool, bool) (1 samples, 0.10%)</title><rect x="1181.9" y="1011.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.9" y="1022.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="1187.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.1" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="1171.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.1" y="1155.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.1" y="1139.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.1" y="1123.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.1" y="1107.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.1" y="1091.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.1" y="1102.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="1075.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.1" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="1059.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.1" y="1043.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.1" y="1027.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.1" y="1011.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.1" y="995.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.1" y="979.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="963.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.1" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.1" y="947.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.1" y="931.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.1" y="915.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.1" y="899.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.1" y="883.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.1" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.1" y="835.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.1" y="819.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.1" y="803.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.1" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="771.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1183.1" y="755.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1183.1" y="739.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.1" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1183.1" y="723.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1183.1" y="707.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.10%)</title><rect x="1183.1" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1183.1" y="675.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.10%)</title><rect x="1184.2" y="1283.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="1294.0"></text>
</g>
<g>
<title>Unique_Node_List::remove_useless_nodes(VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1184.2" y="1267.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="1278.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.20%)</title><rect x="1185.4" y="1315.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="1326.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.20%)</title><rect x="1185.4" y="1299.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.4" y="1310.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.20%)</title><rect x="1185.4" y="1283.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.20%)</title><rect x="1185.4" y="1267.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.4" y="1278.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.10%)</title><rect x="1185.4" y="1251.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="1262.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1185.4" y="1235.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="1246.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1185.4" y="1219.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1185.4" y="1203.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="1187.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="1171.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.4" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="1155.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="1139.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="1150.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="1123.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="1134.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="1107.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="1091.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="1075.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.4" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="1059.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.4" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="1043.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="1027.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="1011.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.4" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="995.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="979.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="963.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="947.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.4" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="931.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.4" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="915.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.4" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="883.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="894.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="867.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="878.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="851.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.4" y="862.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="835.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="846.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.4" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (1 samples, 0.10%)</title><rect x="1185.4" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1185.4" y="771.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.4" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1185.4" y="755.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1185.4" y="739.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.4" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1185.4" y="723.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.4" y="734.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1185.4" y="707.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.4" y="718.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1185.4" y="691.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.4" y="702.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1185.4" y="675.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.4" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1185.4" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="670.0"></text>
</g>
<g>
<title>ciEnv::check_klass_accessibility(ciKlass*, Klass*) (1 samples, 0.10%)</title><rect x="1185.4" y="643.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.4" y="654.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.10%)</title><rect x="1185.4" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="638.0"></text>
</g>
<g>
<title>Klass::is_subclass_of(Klass const*) const (1 samples, 0.10%)</title><rect x="1185.4" y="611.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="622.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.10%)</title><rect x="1186.5" y="1251.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="1262.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.10%)</title><rect x="1186.5" y="1235.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.5" y="1246.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.10%)</title><rect x="1186.5" y="1219.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="1230.0"></text>
</g>
<g>
<title>Interval::add_use_pos(int, IntervalUseKind) (1 samples, 0.10%)</title><rect x="1186.5" y="1203.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.5" y="1214.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.10%)</title><rect x="1187.7" y="1347.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.7" y="1358.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.10%)</title><rect x="1187.7" y="1331.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="1342.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.10%)</title><rect x="1187.7" y="1315.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="1326.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.10%)</title><rect x="1187.7" y="1299.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1190.7" y="1310.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.10%)</title><rect x="1187.7" y="1283.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.7" y="1294.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.10%)</title><rect x="1187.7" y="1267.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="1278.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="1363.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.8" y="1374.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="1347.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="1358.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.10%)</title><rect x="1188.8" y="1331.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.8" y="1342.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="1315.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="1326.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="1299.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="1310.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="1283.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.8" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (1 samples, 0.10%)</title><rect x="1188.8" y="1267.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="1278.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.10%)</title><rect x="1188.8" y="1251.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="1262.0"></text>
</g>
</g>
</svg>
