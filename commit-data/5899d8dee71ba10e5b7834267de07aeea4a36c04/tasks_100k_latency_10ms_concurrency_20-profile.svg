<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (248 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (19 samples, 7.66%)</title><rect x="10.0" y="1235.0" width="90.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (19 samples, 7.66%)</title><rect x="10.0" y="1219.0" width="90.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1230.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.40%)</title><rect x="14.8" y="1203.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.40%)</title><rect x="14.8" y="1187.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="17.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.commitReadyOffsets (1 samples, 0.40%)</title><rect x="14.8" y="1171.0" width="4.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="17.8" y="1182.0"></text>
</g>
<g>
<title>java/util/OptionalLong.ifPresent (1 samples, 0.40%)</title><rect x="14.8" y="1155.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="17.8" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$483/1402566594.accept (1 samples, 0.40%)</title><rect x="14.8" y="1139.0" width="4.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="17.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.lambda$commitReadyOffsets$0 (1 samples, 0.40%)</title><rect x="14.8" y="1123.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="17.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.40%)</title><rect x="14.8" y="1107.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="17.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="14.8" y="1091.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.8" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.40%)</title><rect x="14.8" y="1075.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="17.8" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (17 samples, 6.85%)</title><rect x="19.5" y="1203.0" width="80.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="22.5" y="1214.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.81%)</title><rect x="19.5" y="1187.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="22.5" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.81%)</title><rect x="19.5" y="1171.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="22.5" y="1182.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.40%)</title><rect x="19.5" y="1155.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.5" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.40%)</title><rect x="19.5" y="1139.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.5" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.40%)</title><rect x="19.5" y="1123.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="22.5" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.40%)</title><rect x="24.3" y="1155.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.3" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.40%)</title><rect x="24.3" y="1139.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.3" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.40%)</title><rect x="24.3" y="1123.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="27.3" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.40%)</title><rect x="24.3" y="1107.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="27.3" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.40%)</title><rect x="24.3" y="1091.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.3" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.40%)</title><rect x="24.3" y="1075.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="27.3" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="24.3" y="1059.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="24.3" y="1043.0" width="4.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.3" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.40%)</title><rect x="24.3" y="1027.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.accept (1 samples, 0.40%)</title><rect x="24.3" y="1011.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="27.3" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.accept (1 samples, 0.40%)</title><rect x="24.3" y="995.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.3" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/Collectors$$Lambda$134/238564722.accept (1 samples, 0.40%)</title><rect x="24.3" y="979.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.3" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.40%)</title><rect x="29.0" y="1187.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.0" y="1198.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="29.0" y="1171.0" width="4.8" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="32.0" y="1182.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="29.0" y="1155.0" width="4.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="32.0" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.02%)</title><rect x="33.8" y="1187.0" width="23.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1198.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/397538605.accept (5 samples, 2.02%)</title><rect x="33.8" y="1171.0" width="23.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="36.8" y="1182.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 2.02%)</title><rect x="33.8" y="1155.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="1166.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (4 samples, 1.61%)</title><rect x="33.8" y="1139.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="36.8" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 1.61%)</title><rect x="33.8" y="1123.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="36.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 1.61%)</title><rect x="33.8" y="1107.0" width="19.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="36.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 1.61%)</title><rect x="33.8" y="1091.0" width="19.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="36.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 1.61%)</title><rect x="33.8" y="1075.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="36.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.21%)</title><rect x="38.5" y="1059.0" width="14.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="41.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 1.21%)</title><rect x="38.5" y="1043.0" width="14.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.5" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 1.21%)</title><rect x="38.5" y="1027.0" width="14.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="41.5" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 1.21%)</title><rect x="38.5" y="1011.0" width="14.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="41.5" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 1.21%)</title><rect x="38.5" y="995.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="41.5" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.40%)</title><rect x="52.8" y="1139.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="55.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.40%)</title><rect x="52.8" y="1123.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.8" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/1343881024.get$Lambda (1 samples, 0.40%)</title><rect x="52.8" y="1107.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.8" y="1118.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="52.8" y="1091.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="55.8" y="1102.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="52.8" y="1075.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="55.8" y="1086.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="52.8" y="1059.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="55.8" y="1070.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="52.8" y="1043.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="55.8" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="52.8" y="1027.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="55.8" y="1038.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.40%)</title><rect x="52.8" y="1011.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="55.8" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.63%)</title><rect x="57.6" y="1187.0" width="42.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.6" y="1198.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.63%)</title><rect x="57.6" y="1171.0" width="42.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.6" y="1182.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (6 samples, 2.42%)</title><rect x="57.6" y="1155.0" width="28.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="60.6" y="1166.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.21%)</title><rect x="57.6" y="1139.0" width="14.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="60.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.21%)</title><rect x="57.6" y="1123.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="60.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.40%)</title><rect x="57.6" y="1107.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.40%)</title><rect x="57.6" y="1091.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="60.6" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.40%)</title><rect x="57.6" y="1075.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="60.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.40%)</title><rect x="57.6" y="1059.0" width="4.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="60.6" y="1070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.40%)</title><rect x="57.6" y="1043.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="60.6" y="1054.0"></text>
</g>
<g>
<title>Unsafe_Unpark (1 samples, 0.40%)</title><rect x="57.6" y="1027.0" width="4.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="60.6" y="1038.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.40%)</title><rect x="57.6" y="1011.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="60.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="62.3" y="1107.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="65.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.40%)</title><rect x="62.3" y="1091.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.40%)</title><rect x="62.3" y="1075.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.40%)</title><rect x="62.3" y="1059.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.3" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.40%)</title><rect x="62.3" y="1043.0" width="4.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.3" y="1054.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="62.3" y="1027.0" width="4.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="65.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.40%)</title><rect x="67.1" y="1107.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.ready (1 samples, 0.40%)</title><rect x="67.1" y="1091.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.1" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.isReady (1 samples, 0.40%)</title><rect x="67.1" y="1075.0" width="4.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.1" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient$DefaultMetadataUpdater.isUpdateDue (1 samples, 0.40%)</title><rect x="67.1" y="1059.0" width="4.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.1" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.timeToNextUpdate (1 samples, 0.40%)</title><rect x="67.1" y="1043.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.1" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (3 samples, 1.21%)</title><rect x="71.9" y="1139.0" width="14.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="74.9" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.40%)</title><rect x="76.6" y="1123.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.6" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.next (1 samples, 0.40%)</title><rect x="76.6" y="1107.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="79.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.40%)</title><rect x="81.4" y="1123.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.40%)</title><rect x="81.4" y="1107.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.40%)</title><rect x="81.4" y="1091.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.40%)</title><rect x="81.4" y="1075.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.40%)</title><rect x="81.4" y="1059.0" width="4.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="84.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.40%)</title><rect x="81.4" y="1043.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.4" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.40%)</title><rect x="81.4" y="1027.0" width="4.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.4" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.40%)</title><rect x="81.4" y="1011.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.40%)</title><rect x="81.4" y="995.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.40%)</title><rect x="81.4" y="979.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.4" y="990.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.40%)</title><rect x="81.4" y="963.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.4" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.40%)</title><rect x="81.4" y="947.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.4" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.81%)</title><rect x="86.1" y="1155.0" width="9.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.1" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.81%)</title><rect x="86.1" y="1139.0" width="9.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleConnections (1 samples, 0.40%)</title><rect x="86.1" y="1123.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.1" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.40%)</title><rect x="90.9" y="1123.0" width="4.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.40%)</title><rect x="90.9" y="1107.0" width="4.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.40%)</title><rect x="90.9" y="1091.0" width="4.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.40%)</title><rect x="90.9" y="1075.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.40%)</title><rect x="90.9" y="1059.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.40%)</title><rect x="90.9" y="1043.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="93.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.40%)</title><rect x="90.9" y="1027.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="93.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.40%)</title><rect x="95.6" y="1155.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/Thread.run (149 samples, 60.08%)</title><rect x="100.4" y="1235.0" width="709.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="103.4" y="1246.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (149 samples, 60.08%)</title><rect x="100.4" y="1219.0" width="709.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="103.4" y="1230.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (149 samples, 60.08%)</title><rect x="100.4" y="1203.0" width="709.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.4" y="1214.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/2128997968.run (140 samples, 56.45%)</title><rect x="109.9" y="1187.0" width="666.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="112.9" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/2128997968.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (140 samples, 56.45%)</title><rect x="109.9" y="1171.0" width="666.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="112.9" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (140 samples, 56.45%)</title><rect x="109.9" y="1155.0" width="666.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="112.9" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (140 samples, 56.45%)</title><rect x="109.9" y="1139.0" width="666.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="112.9" y="1150.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="129.0" y="1123.0" width="4.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="132.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (12 samples, 4.84%)</title><rect x="133.7" y="1123.0" width="57.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="136.7" y="1134.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 4.84%)</title><rect x="133.7" y="1107.0" width="57.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="136.7" y="1118.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 4.84%)</title><rect x="133.7" y="1091.0" width="57.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="136.7" y="1102.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 2.82%)</title><rect x="157.5" y="1075.0" width="33.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="160.5" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.40%)</title><rect x="157.5" y="1059.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="160.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 2.42%)</title><rect x="162.3" y="1059.0" width="28.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.3" y="1070.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$482/62055867.accept (6 samples, 2.42%)</title><rect x="162.3" y="1043.0" width="28.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.3" y="1054.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (6 samples, 2.42%)</title><rect x="162.3" y="1027.0" width="28.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.3" y="1038.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/1343881024.accept (1 samples, 0.40%)</title><rect x="162.3" y="1011.0" width="4.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="165.3" y="1022.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.40%)</title><rect x="167.0" y="1011.0" width="4.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="170.0" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 1.61%)</title><rect x="171.8" y="1011.0" width="19.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="174.8" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (4 samples, 1.61%)</title><rect x="171.8" y="995.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="174.8" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (4 samples, 1.61%)</title><rect x="171.8" y="979.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="174.8" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.81%)</title><rect x="171.8" y="963.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="174.8" y="974.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.81%)</title><rect x="181.3" y="963.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (6 samples, 2.42%)</title><rect x="190.8" y="1123.0" width="28.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.8" y="1134.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (6 samples, 2.42%)</title><rect x="190.8" y="1107.0" width="28.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="193.8" y="1118.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 2.42%)</title><rect x="190.8" y="1091.0" width="28.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="193.8" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 2.42%)</title><rect x="190.8" y="1075.0" width="28.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="193.8" y="1086.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="190.8" y="1059.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="193.8" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 2.02%)</title><rect x="195.6" y="1059.0" width="23.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="198.6" y="1070.0">j..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="214.6" y="1043.0" width="4.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="217.6" y="1054.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="214.6" y="1027.0" width="4.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="217.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (26 samples, 10.48%)</title><rect x="219.4" y="1123.0" width="123.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.4" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1266265220.extract (26 samples, 10.48%)</title><rect x="219.4" y="1107.0" width="123.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="222.4" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (26 samples, 10.48%)</title><rect x="219.4" y="1091.0" width="123.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="222.4" y="1102.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 10.48%)</title><rect x="219.4" y="1075.0" width="123.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.4" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (26 samples, 10.48%)</title><rect x="219.4" y="1059.0" width="123.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="222.4" y="1070.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (26 samples, 10.48%)</title><rect x="219.4" y="1043.0" width="123.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="222.4" y="1054.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (2 samples, 0.81%)</title><rect x="219.4" y="1027.0" width="9.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.81%)</title><rect x="219.4" y="1011.0" width="9.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="222.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 0.81%)</title><rect x="219.4" y="995.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.4" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.81%)</title><rect x="219.4" y="979.0" width="9.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="222.4" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.81%)</title><rect x="219.4" y="963.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="222.4" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.81%)</title><rect x="219.4" y="947.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="222.4" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.81%)</title><rect x="219.4" y="931.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="222.4" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="224.1" y="915.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="227.1" y="926.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.40%)</title><rect x="224.1" y="899.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="227.1" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (14 samples, 5.65%)</title><rect x="228.9" y="1027.0" width="66.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="231.9" y="1038.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.40%)</title><rect x="228.9" y="1011.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.9" y="1022.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.40%)</title><rect x="228.9" y="995.0" width="4.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="228.9" y="979.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="231.9" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.40%)</title><rect x="233.6" y="1011.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.6" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.40%)</title><rect x="233.6" y="995.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.6" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.40%)</title><rect x="233.6" y="979.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="236.6" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.40%)</title><rect x="233.6" y="963.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.6" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.40%)</title><rect x="233.6" y="947.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.6" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (12 samples, 4.84%)</title><rect x="238.4" y="1011.0" width="57.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.4" y="1022.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (12 samples, 4.84%)</title><rect x="238.4" y="995.0" width="57.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.4" y="1006.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.21%)</title><rect x="238.4" y="979.0" width="14.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.4" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.40%)</title><rect x="238.4" y="963.0" width="4.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="241.4" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.40%)</title><rect x="238.4" y="947.0" width="4.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="241.4" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.40%)</title><rect x="238.4" y="931.0" width="4.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="241.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.81%)</title><rect x="243.1" y="963.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.1" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.63%)</title><rect x="252.7" y="979.0" width="42.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.7" y="990.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.63%)</title><rect x="252.7" y="963.0" width="42.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="255.7" y="974.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (9 samples, 3.63%)</title><rect x="252.7" y="947.0" width="42.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.7" y="958.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.21%)</title><rect x="257.4" y="931.0" width="14.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="260.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.81%)</title><rect x="262.2" y="915.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.40%)</title><rect x="266.9" y="899.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (3 samples, 1.21%)</title><rect x="271.7" y="931.0" width="14.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.7" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.81%)</title><rect x="271.7" y="915.0" width="9.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.81%)</title><rect x="271.7" y="899.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 0.81%)</title><rect x="271.7" y="883.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (2 samples, 0.81%)</title><rect x="271.7" y="867.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (2 samples, 0.81%)</title><rect x="271.7" y="851.0" width="9.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="274.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.40%)</title><rect x="281.2" y="915.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.81%)</title><rect x="286.0" y="931.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="289.0" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.81%)</title><rect x="286.0" y="915.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="289.0" y="926.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="286.0" y="899.0" width="4.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.0" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.40%)</title><rect x="290.7" y="899.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.7" y="910.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.40%)</title><rect x="290.7" y="883.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.7" y="894.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.40%)</title><rect x="290.7" y="867.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (10 samples, 4.03%)</title><rect x="295.5" y="1027.0" width="47.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="298.5" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (10 samples, 4.03%)</title><rect x="295.5" y="1011.0" width="47.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.5" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (10 samples, 4.03%)</title><rect x="295.5" y="995.0" width="47.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.5" y="1006.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (10 samples, 4.03%)</title><rect x="295.5" y="979.0" width="47.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.5" y="990.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (10 samples, 4.03%)</title><rect x="295.5" y="963.0" width="47.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.5" y="974.0">java..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (90 samples, 36.29%)</title><rect x="343.1" y="1123.0" width="428.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.1" y="1134.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipe..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="347.8" y="1107.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="350.8" y="1118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="347.8" y="1091.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="350.8" y="1102.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="347.8" y="1075.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="350.8" y="1086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="347.8" y="1059.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="350.8" y="1070.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.40%)</title><rect x="347.8" y="1043.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="350.8" y="1054.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.40%)</title><rect x="347.8" y="1027.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="350.8" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (12 samples, 4.84%)</title><rect x="352.6" y="1107.0" width="57.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.6" y="1118.0">com/li..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (12 samples, 4.84%)</title><rect x="352.6" y="1091.0" width="57.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.6" y="1102.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (12 samples, 4.84%)</title><rect x="352.6" y="1075.0" width="57.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.6" y="1086.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.61%)</title><rect x="352.6" y="1059.0" width="19.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.40%)</title><rect x="352.6" y="1043.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="355.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.40%)</title><rect x="352.6" y="1027.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="355.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.21%)</title><rect x="357.3" y="1043.0" width="14.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="360.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.21%)</title><rect x="357.3" y="1027.0" width="14.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="360.3" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.21%)</title><rect x="371.6" y="1059.0" width="14.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.40%)</title><rect x="381.1" y="1043.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.1" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (5 samples, 2.02%)</title><rect x="385.9" y="1059.0" width="23.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="388.9" y="1070.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 1.61%)</title><rect x="390.6" y="1043.0" width="19.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="393.6" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 1.61%)</title><rect x="390.6" y="1027.0" width="19.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="409.7" y="1107.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.7" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.40%)</title><rect x="409.7" y="1091.0" width="4.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.7" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (10 samples, 4.03%)</title><rect x="414.4" y="1107.0" width="47.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="417.4" y="1118.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (9 samples, 3.63%)</title><rect x="414.4" y="1091.0" width="42.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="417.4" y="1102.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.put (3 samples, 1.21%)</title><rect x="443.0" y="1075.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="446.0" y="1086.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (3 samples, 1.21%)</title><rect x="443.0" y="1059.0" width="14.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.0" y="1070.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.81%)</title><rect x="443.0" y="1043.0" width="9.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="446.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.81%)</title><rect x="443.0" y="1027.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="446.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.81%)</title><rect x="443.0" y="1011.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="446.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.40%)</title><rect x="452.5" y="1043.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.40%)</title><rect x="452.5" y="1027.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.5" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.40%)</title><rect x="452.5" y="1011.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="455.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.40%)</title><rect x="452.5" y="995.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="455.5" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="452.5" y="979.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="455.5" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="452.5" y="963.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="455.5" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="452.5" y="947.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="455.5" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="452.5" y="931.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="455.5" y="942.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.40%)</title><rect x="452.5" y="915.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="455.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.40%)</title><rect x="457.3" y="1091.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="460.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.40%)</title><rect x="457.3" y="1075.0" width="4.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="460.3" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.40%)</title><rect x="457.3" y="1059.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="460.3" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.40%)</title><rect x="457.3" y="1043.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="460.3" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.40%)</title><rect x="457.3" y="1027.0" width="4.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="460.3" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (56 samples, 22.58%)</title><rect x="462.0" y="1107.0" width="266.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="465.0" y="1118.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (56 samples, 22.58%)</title><rect x="462.0" y="1091.0" width="266.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.0" y="1102.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/996764840.process (44 samples, 17.74%)</title><rect x="466.8" y="1075.0" width="209.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.8" y="1086.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (44 samples, 17.74%)</title><rect x="466.8" y="1059.0" width="209.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.8" y="1070.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (40 samples, 16.13%)</title><rect x="466.8" y="1043.0" width="190.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.8" y="1054.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (40 samples, 16.13%)</title><rect x="466.8" y="1027.0" width="190.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="469.8" y="1038.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (39 samples, 15.73%)</title><rect x="471.5" y="1011.0" width="185.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="474.5" y="1022.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (38 samples, 15.32%)</title><rect x="471.5" y="995.0" width="180.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="474.5" y="1006.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.81%)</title><rect x="471.5" y="979.0" width="9.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="474.5" y="990.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.40%)</title><rect x="481.0" y="979.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="484.0" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.40%)</title><rect x="485.8" y="979.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="488.8" y="990.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.61%)</title><rect x="490.6" y="979.0" width="19.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="493.6" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (16 samples, 6.45%)</title><rect x="509.6" y="979.0" width="76.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="512.6" y="990.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.40%)</title><rect x="585.7" y="979.0" width="4.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="588.7" y="990.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.40%)</title><rect x="590.5" y="979.0" width="4.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="593.5" y="990.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.40%)</title><rect x="595.2" y="979.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="598.2" y="990.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (11 samples, 4.44%)</title><rect x="600.0" y="979.0" width="52.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="603.0" y="990.0">os::s..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 2.02%)</title><rect x="604.8" y="963.0" width="23.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="607.8" y="974.0">M..</text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="623.8" y="947.0" width="4.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="626.8" y="958.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.81%)</title><rect x="628.5" y="963.0" width="9.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="631.5" y="974.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.81%)</title><rect x="628.5" y="947.0" width="9.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="631.5" y="958.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 1.21%)</title><rect x="638.1" y="963.0" width="14.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="641.1" y="974.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.40%)</title><rect x="652.3" y="995.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="655.3" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (4 samples, 1.61%)</title><rect x="657.1" y="1043.0" width="19.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="660.1" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.61%)</title><rect x="657.1" y="1027.0" width="19.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="660.1" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.61%)</title><rect x="657.1" y="1011.0" width="19.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="660.1" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 2.02%)</title><rect x="676.1" y="1075.0" width="23.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="679.1" y="1086.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.40%)</title><rect x="695.2" y="1059.0" width="4.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="698.2" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.40%)</title><rect x="699.9" y="1075.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="702.9" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.40%)</title><rect x="699.9" y="1059.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.9" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.81%)</title><rect x="704.7" y="1075.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="707.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.81%)</title><rect x="704.7" y="1059.0" width="9.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="707.7" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.81%)</title><rect x="704.7" y="1043.0" width="9.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="707.7" y="1054.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.81%)</title><rect x="714.2" y="1075.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="717.2" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (2 samples, 0.81%)</title><rect x="714.2" y="1059.0" width="9.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="717.2" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="723.7" y="1075.0" width="4.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="726.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.40%)</title><rect x="723.7" y="1059.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="726.7" y="1070.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.40%)</title><rect x="723.7" y="1043.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="726.7" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.40%)</title><rect x="723.7" y="1027.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="726.7" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.40%)</title><rect x="723.7" y="1011.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.7" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.40%)</title><rect x="723.7" y="995.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="726.7" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.40%)</title><rect x="723.7" y="979.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="726.7" y="990.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.40%)</title><rect x="723.7" y="963.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="726.7" y="974.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.40%)</title><rect x="723.7" y="947.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="726.7" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.63%)</title><rect x="728.5" y="1107.0" width="42.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="731.5" y="1118.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (9 samples, 3.63%)</title><rect x="728.5" y="1091.0" width="42.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="731.5" y="1102.0">java..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.40%)</title><rect x="757.0" y="1075.0" width="4.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="760.0" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="757.0" y="1059.0" width="4.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="760.0" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.81%)</title><rect x="761.8" y="1075.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="764.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.81%)</title><rect x="761.8" y="1059.0" width="9.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="764.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$481/141759739.accept (1 samples, 0.40%)</title><rect x="766.5" y="1043.0" width="4.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="769.5" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.40%)</title><rect x="771.3" y="1123.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="774.3" y="1134.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.40%)</title><rect x="771.3" y="1107.0" width="4.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="774.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (7 samples, 2.82%)</title><rect x="776.0" y="1187.0" width="33.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.0" y="1198.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 2.02%)</title><rect x="780.8" y="1171.0" width="23.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="783.8" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 2.02%)</title><rect x="780.8" y="1155.0" width="23.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="783.8" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 2.02%)</title><rect x="780.8" y="1139.0" width="23.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="783.8" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 2.02%)</title><rect x="780.8" y="1123.0" width="23.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.8" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 2.02%)</title><rect x="780.8" y="1107.0" width="23.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="783.8" y="1118.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (1 samples, 0.40%)</title><rect x="804.6" y="1171.0" width="4.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.81%)</title><rect x="809.4" y="1235.0" width="9.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="812.4" y="1246.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.40%)</title><rect x="809.4" y="1219.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="812.4" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.40%)</title><rect x="814.1" y="1219.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.1" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.40%)</title><rect x="814.1" y="1203.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.40%)</title><rect x="814.1" y="1187.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="817.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutRequests (1 samples, 0.40%)</title><rect x="814.1" y="1171.0" width="4.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.1" y="1182.0"></text>
</g>
<g>
<title>start_thread (78 samples, 31.45%)</title><rect x="818.9" y="1235.0" width="371.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="821.9" y="1246.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (78 samples, 31.45%)</title><rect x="818.9" y="1219.0" width="371.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="821.9" y="1230.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (78 samples, 31.45%)</title><rect x="818.9" y="1203.0" width="371.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.9" y="1214.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (11 samples, 4.44%)</title><rect x="818.9" y="1187.0" width="52.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="821.9" y="1198.0">GangW..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 4.03%)</title><rect x="818.9" y="1171.0" width="47.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="821.9" y="1182.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (9 samples, 3.63%)</title><rect x="818.9" y="1155.0" width="42.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="821.9" y="1166.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (2 samples, 0.81%)</title><rect x="847.4" y="1139.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="850.4" y="1150.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.81%)</title><rect x="847.4" y="1123.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="850.4" y="1134.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.40%)</title><rect x="852.2" y="1107.0" width="4.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="855.2" y="1118.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.40%)</title><rect x="856.9" y="1139.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="859.9" y="1150.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="861.7" y="1155.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.7" y="1166.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.40%)</title><rect x="861.7" y="1139.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.7" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="861.7" y="1123.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.7" y="1134.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.40%)</title><rect x="861.7" y="1107.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="864.7" y="1118.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.40%)</title><rect x="861.7" y="1091.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="864.7" y="1102.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.40%)</title><rect x="861.7" y="1075.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="864.7" y="1086.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.40%)</title><rect x="866.5" y="1171.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="869.5" y="1182.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.40%)</title><rect x="866.5" y="1155.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="869.5" y="1166.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.40%)</title><rect x="866.5" y="1139.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="869.5" y="1150.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.40%)</title><rect x="866.5" y="1123.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.5" y="1134.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (66 samples, 26.61%)</title><rect x="871.2" y="1187.0" width="314.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="874.2" y="1198.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (65 samples, 26.21%)</title><rect x="871.2" y="1171.0" width="309.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="874.2" y="1182.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (65 samples, 26.21%)</title><rect x="871.2" y="1155.0" width="309.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="874.2" y="1166.0">CompileBroker::invoke_compiler_on_method(C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (63 samples, 25.40%)</title><rect x="871.2" y="1139.0" width="299.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="874.2" y="1150.0">C2Compiler::compile_method(ciEnv*, ciMet..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (63 samples, 25.40%)</title><rect x="871.2" y="1123.0" width="299.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="874.2" y="1134.0">Compile::Compile(ciEnv*, C2Compiler*, ci..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 17.74%)</title><rect x="871.2" y="1107.0" width="209.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="874.2" y="1118.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.40%)</title><rect x="871.2" y="1091.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="874.2" y="1102.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.40%)</title><rect x="871.2" y="1075.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="874.2" y="1086.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.40%)</title><rect x="871.2" y="1059.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="874.2" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.81%)</title><rect x="876.0" y="1091.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="879.0" y="1102.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.40%)</title><rect x="876.0" y="1075.0" width="4.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="879.0" y="1086.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.40%)</title><rect x="880.7" y="1075.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="883.7" y="1086.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.40%)</title><rect x="880.7" y="1059.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.7" y="1070.0"></text>
</g>
<g>
<title>ValueRecorder&lt;Metadata*&gt;::maybe_find_index(Metadata*) (1 samples, 0.40%)</title><rect x="880.7" y="1043.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="883.7" y="1054.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 1.21%)</title><rect x="885.5" y="1091.0" width="14.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="888.5" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.40%)</title><rect x="885.5" y="1075.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="888.5" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.81%)</title><rect x="890.2" y="1075.0" width="9.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="893.2" y="1086.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.81%)</title><rect x="890.2" y="1059.0" width="9.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="893.2" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 2.42%)</title><rect x="899.8" y="1091.0" width="28.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="902.8" y="1102.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (6 samples, 2.42%)</title><rect x="899.8" y="1075.0" width="28.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="902.8" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.81%)</title><rect x="899.8" y="1059.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="902.8" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::mark_ssa() (1 samples, 0.40%)</title><rect x="909.3" y="1059.0" width="4.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="912.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.81%)</title><rect x="914.0" y="1059.0" width="9.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="917.0" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="918.8" y="1043.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="921.8" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="923.5" y="1059.0" width="4.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="926.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 12.90%)</title><rect x="928.3" y="1091.0" width="152.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.3" y="1102.0">PhaseChaitin::Regis..</text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.40%)</title><rect x="928.3" y="1075.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="931.3" y="1086.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.40%)</title><rect x="933.1" y="1075.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="936.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.21%)</title><rect x="937.8" y="1075.0" width="14.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="940.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.40%)</title><rect x="947.3" y="1059.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="950.3" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.81%)</title><rect x="952.1" y="1075.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="955.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.03%)</title><rect x="961.6" y="1075.0" width="47.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="964.6" y="1086.0">Phas..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.40%)</title><rect x="971.1" y="1059.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.1" y="1070.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="971.1" y="1043.0" width="4.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="974.1" y="1054.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.40%)</title><rect x="975.9" y="1059.0" width="4.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="978.9" y="1070.0"></text>
</g>
<g>
<title>rFlagsRegOper::type() const (1 samples, 0.40%)</title><rect x="975.9" y="1043.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.40%)</title><rect x="980.6" y="1059.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="983.6" y="1070.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.40%)</title><rect x="980.6" y="1043.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="983.6" y="1054.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.40%)</title><rect x="980.6" y="1027.0" width="4.8" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="983.6" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (5 samples, 2.02%)</title><rect x="985.4" y="1059.0" width="23.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="988.4" y="1070.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="994.9" y="1043.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="997.9" y="1054.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 0.81%)</title><rect x="999.7" y="1043.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1002.7" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.40%)</title><rect x="1009.2" y="1075.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1012.2" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.40%)</title><rect x="1009.2" y="1059.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1012.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.21%)</title><rect x="1014.0" y="1075.0" width="14.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.0" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.81%)</title><rect x="1018.7" y="1059.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.7" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.40%)</title><rect x="1028.2" y="1075.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1031.2" y="1086.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.40%)</title><rect x="1028.2" y="1059.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1031.2" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.40%)</title><rect x="1033.0" y="1075.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (3 samples, 1.21%)</title><rect x="1037.7" y="1075.0" width="14.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.40%)</title><rect x="1047.3" y="1059.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1050.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.21%)</title><rect x="1052.0" y="1075.0" width="14.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1055.0" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 1.21%)</title><rect x="1052.0" y="1059.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1055.0" y="1070.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.40%)</title><rect x="1061.5" y="1043.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1064.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.40%)</title><rect x="1066.3" y="1075.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1069.3" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.40%)</title><rect x="1066.3" y="1059.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1069.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.40%)</title><rect x="1071.0" y="1075.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1074.0" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.40%)</title><rect x="1071.0" y="1059.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1074.0" y="1070.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.40%)</title><rect x="1071.0" y="1043.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1074.0" y="1054.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.40%)</title><rect x="1075.8" y="1075.0" width="4.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1078.8" y="1086.0"></text>
</g>
<g>
<title>Compile::Optimize() (12 samples, 4.84%)</title><rect x="1080.6" y="1107.0" width="57.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.6" y="1118.0">Compil..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (3 samples, 1.21%)</title><rect x="1080.6" y="1091.0" width="14.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1083.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (3 samples, 1.21%)</title><rect x="1080.6" y="1075.0" width="14.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1080.6" y="1059.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1083.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.40%)</title><rect x="1080.6" y="1043.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1083.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.40%)</title><rect x="1080.6" y="1027.0" width="4.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1083.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1085.3" y="1059.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1088.3" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.40%)</title><rect x="1090.1" y="1059.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.40%)</title><rect x="1090.1" y="1043.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.1" y="1054.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1090.1" y="1027.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1093.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.40%)</title><rect x="1090.1" y="1011.0" width="4.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1093.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1090.1" y="995.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1090.1" y="979.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1093.1" y="990.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.40%)</title><rect x="1090.1" y="963.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1093.1" y="974.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.40%)</title><rect x="1090.1" y="947.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1093.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.40%)</title><rect x="1094.8" y="1091.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.8" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.40%)</title><rect x="1094.8" y="1075.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1097.8" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1094.8" y="1059.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1097.8" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.40%)</title><rect x="1094.8" y="1043.0" width="4.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1097.8" y="1054.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.40%)</title><rect x="1099.6" y="1091.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1102.6" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 1.61%)</title><rect x="1104.4" y="1091.0" width="19.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.40%)</title><rect x="1104.4" y="1075.0" width="4.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.4" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.81%)</title><rect x="1109.1" y="1075.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.81%)</title><rect x="1109.1" y="1059.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.40%)</title><rect x="1109.1" y="1043.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1112.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.40%)</title><rect x="1109.1" y="1027.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.40%)</title><rect x="1113.9" y="1043.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1116.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.40%)</title><rect x="1118.6" y="1075.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.40%)</title><rect x="1118.6" y="1059.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.40%)</title><rect x="1118.6" y="1043.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1121.6" y="1054.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.40%)</title><rect x="1118.6" y="1027.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.6" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.81%)</title><rect x="1123.4" y="1091.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.4" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.81%)</title><rect x="1123.4" y="1075.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.4" y="1086.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1123.4" y="1059.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.4" y="1070.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.40%)</title><rect x="1123.4" y="1043.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.4" y="1054.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.40%)</title><rect x="1128.1" y="1059.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1131.1" y="1070.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.40%)</title><rect x="1128.1" y="1043.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.1" y="1054.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="1027.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.1" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="1011.0" width="4.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.1" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="995.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.1" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="979.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="963.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1131.1" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="947.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1131.1" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.40%)</title><rect x="1128.1" y="931.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.1" y="942.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.40%)</title><rect x="1132.9" y="1091.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.9" y="1102.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.40%)</title><rect x="1132.9" y="1075.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1135.9" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.82%)</title><rect x="1137.7" y="1107.0" width="33.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.7" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.82%)</title><rect x="1137.7" y="1091.0" width="33.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.7" y="1102.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.82%)</title><rect x="1137.7" y="1075.0" width="33.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="1086.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.82%)</title><rect x="1137.7" y="1059.0" width="33.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="1070.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.82%)</title><rect x="1137.7" y="1043.0" width="33.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.7" y="1054.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 2.82%)</title><rect x="1137.7" y="1027.0" width="33.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.7" y="1038.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 2.42%)</title><rect x="1137.7" y="1011.0" width="28.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.7" y="1022.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 2.42%)</title><rect x="1137.7" y="995.0" width="28.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.7" y="1006.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 2.42%)</title><rect x="1137.7" y="979.0" width="28.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.7" y="990.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 2.42%)</title><rect x="1137.7" y="963.0" width="28.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="974.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 2.42%)</title><rect x="1137.7" y="947.0" width="28.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.7" y="958.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 2.42%)</title><rect x="1137.7" y="931.0" width="28.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.7" y="942.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.7" y="915.0" width="9.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.7" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.7" y="899.0" width="9.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.7" y="883.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.7" y="867.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.7" y="851.0" width="9.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.7" y="835.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.7" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.7" y="819.0" width="9.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.7" y="803.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.7" y="787.0" width="9.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.7" y="771.0" width="9.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.7" y="755.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.7" y="739.0" width="9.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.7" y="723.0" width="9.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.7" y="707.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.7" y="691.0" width="9.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.7" y="675.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.7" y="659.0" width="9.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.7" y="643.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1137.7" y="627.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1140.7" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1137.7" y="611.0" width="9.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1137.7" y="595.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1137.7" y="579.0" width="9.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1137.7" y="563.0" width="9.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1137.7" y="547.0" width="9.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1137.7" y="531.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.40%)</title><rect x="1137.7" y="515.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.40%)</title><rect x="1137.7" y="499.0" width="4.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.7" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.40%)</title><rect x="1137.7" y="483.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.40%)</title><rect x="1137.7" y="467.0" width="4.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.7" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1137.7" y="451.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.7" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.40%)</title><rect x="1137.7" y="435.0" width="4.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.7" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1137.7" y="419.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.7" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.40%)</title><rect x="1137.7" y="403.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.7" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.40%)</title><rect x="1137.7" y="387.0" width="4.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.7" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1137.7" y="371.0" width="4.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.7" y="382.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.40%)</title><rect x="1137.7" y="355.0" width="4.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.7" y="366.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.40%)</title><rect x="1137.7" y="339.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.40%)</title><rect x="1137.7" y="323.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.7" y="334.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.40%)</title><rect x="1137.7" y="307.0" width="4.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.7" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="531.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.4" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="515.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1142.4" y="499.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1145.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1142.4" y="483.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="467.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1142.4" y="451.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.4" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="435.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="419.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1142.4" y="403.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1142.4" y="387.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="371.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1142.4" y="355.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="339.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="323.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1142.4" y="307.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1142.4" y="291.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="275.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1142.4" y="259.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="243.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="227.0" width="4.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1142.4" y="211.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1142.4" y="195.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1142.4" y="179.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1142.4" y="163.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1142.4" y="147.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1145.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1142.4" y="131.0" width="4.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1145.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.40%)</title><rect x="1142.4" y="115.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.40%)</title><rect x="1142.4" y="99.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="110.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.40%)</title><rect x="1142.4" y="83.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1145.4" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 1.61%)</title><rect x="1147.2" y="915.0" width="19.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.2" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 1.61%)</title><rect x="1147.2" y="899.0" width="19.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 1.61%)</title><rect x="1147.2" y="883.0" width="19.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 1.61%)</title><rect x="1147.2" y="867.0" width="19.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.2" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 1.61%)</title><rect x="1147.2" y="851.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 1.61%)</title><rect x="1147.2" y="835.0" width="19.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.2" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 1.61%)</title><rect x="1147.2" y="819.0" width="19.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.2" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.21%)</title><rect x="1147.2" y="803.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.21%)</title><rect x="1147.2" y="787.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.2" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.21%)</title><rect x="1147.2" y="771.0" width="14.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.21%)</title><rect x="1147.2" y="755.0" width="14.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.21%)</title><rect x="1147.2" y="739.0" width="14.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.21%)</title><rect x="1147.2" y="723.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.21%)</title><rect x="1147.2" y="707.0" width="14.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.2" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.21%)</title><rect x="1147.2" y="691.0" width="14.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1147.2" y="675.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1147.2" y="659.0" width="9.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1147.2" y="643.0" width="9.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1150.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1147.2" y="627.0" width="9.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.2" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.81%)</title><rect x="1147.2" y="611.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.81%)</title><rect x="1147.2" y="595.0" width="9.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.81%)</title><rect x="1147.2" y="579.0" width="9.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.81%)</title><rect x="1147.2" y="563.0" width="9.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.81%)</title><rect x="1147.2" y="547.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.81%)</title><rect x="1147.2" y="531.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="542.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.40%)</title><rect x="1147.2" y="515.0" width="4.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.2" y="526.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.40%)</title><rect x="1147.2" y="499.0" width="4.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.2" y="510.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.40%)</title><rect x="1147.2" y="483.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.2" y="494.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.40%)</title><rect x="1147.2" y="467.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.2" y="478.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.40%)</title><rect x="1147.2" y="451.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.2" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="515.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.9" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="499.0" width="4.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="483.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="467.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="451.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="435.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="419.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="403.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="387.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="371.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="355.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="339.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="323.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="307.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="291.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="275.0" width="4.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.9" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="259.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.9" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="243.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.9" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1151.9" y="227.0" width="4.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.9" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1151.9" y="211.0" width="4.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.9" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1151.9" y="195.0" width="4.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.9" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1151.9" y="179.0" width="4.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.9" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1151.9" y="163.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1154.9" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1151.9" y="147.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.9" y="158.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.40%)</title><rect x="1151.9" y="131.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="142.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.40%)</title><rect x="1151.9" y="115.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.9" y="126.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1151.9" y="99.0" width="4.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.9" y="110.0"></text>
</g>
<g>
<title>TypeOopPtr::cleanup_speculative() const (1 samples, 0.40%)</title><rect x="1151.9" y="83.0" width="4.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="94.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.40%)</title><rect x="1151.9" y="67.0" width="4.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1151.9" y="51.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1154.9" y="62.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="1151.9" y="35.0" width="4.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1154.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.40%)</title><rect x="1156.7" y="675.0" width="4.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.7" y="686.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.40%)</title><rect x="1156.7" y="659.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.7" y="670.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.40%)</title><rect x="1156.7" y="643.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="654.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1161.5" y="803.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.5" y="814.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.40%)</title><rect x="1161.5" y="787.0" width="4.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.5" y="798.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.40%)</title><rect x="1161.5" y="771.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::uncommon_trap_Type() (1 samples, 0.40%)</title><rect x="1161.5" y="755.0" width="4.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.5" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.40%)</title><rect x="1161.5" y="739.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.5" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.2" y="1011.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.40%)</title><rect x="1166.2" y="995.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.2" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.40%)</title><rect x="1166.2" y="979.0" width="4.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.2" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.40%)</title><rect x="1166.2" y="963.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1169.2" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.40%)</title><rect x="1166.2" y="947.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.2" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.40%)</title><rect x="1166.2" y="931.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.40%)</title><rect x="1166.2" y="915.0" width="4.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.2" y="926.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.40%)</title><rect x="1166.2" y="899.0" width="4.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.2" y="910.0"></text>
</g>
<g>
<title>InlineTree::find_subtree_from_root(InlineTree*, JVMState*, ciMethod*) (1 samples, 0.40%)</title><rect x="1166.2" y="883.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.2" y="894.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.40%)</title><rect x="1166.2" y="867.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.2" y="878.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.81%)</title><rect x="1171.0" y="1139.0" width="9.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.0" y="1150.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.81%)</title><rect x="1171.0" y="1123.0" width="9.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.0" y="1134.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.40%)</title><rect x="1175.7" y="1107.0" width="4.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1178.7" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.40%)</title><rect x="1175.7" y="1091.0" width="4.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.7" y="1102.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.40%)</title><rect x="1175.7" y="1075.0" width="4.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.7" y="1086.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.40%)</title><rect x="1175.7" y="1059.0" width="4.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.7" y="1070.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.40%)</title><rect x="1175.7" y="1043.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.7" y="1054.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.40%)</title><rect x="1180.5" y="1171.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1182.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.40%)</title><rect x="1180.5" y="1155.0" width="4.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.5" y="1166.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.40%)</title><rect x="1180.5" y="1139.0" width="4.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.5" y="1150.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.40%)</title><rect x="1180.5" y="1123.0" width="4.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.5" y="1134.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.40%)</title><rect x="1180.5" y="1107.0" width="4.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.5" y="1118.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.40%)</title><rect x="1180.5" y="1091.0" width="4.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.5" y="1102.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.40%)</title><rect x="1180.5" y="1075.0" width="4.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1183.5" y="1086.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.40%)</title><rect x="1185.2" y="1187.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.2" y="1198.0"></text>
</g>
<g>
<title>PeriodicTask::real_time_tick(int) (1 samples, 0.40%)</title><rect x="1185.2" y="1171.0" width="4.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.2" y="1182.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.40%)</title><rect x="1185.2" y="1155.0" width="4.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.2" y="1166.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.40%)</title><rect x="1185.2" y="1139.0" width="4.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1188.2" y="1150.0"></text>
</g>
</g>
</svg>
