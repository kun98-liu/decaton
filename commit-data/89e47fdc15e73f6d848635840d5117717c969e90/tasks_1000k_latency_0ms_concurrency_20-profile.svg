<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="581"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="581"> </text>
<g id="frames">
<g>
<title>all (867 samples, 100.00%)</title><rect x="10.0" y="547.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="558.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (214 samples, 24.68%)</title><rect x="10.0" y="531.0" width="291.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="542.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (214 samples, 24.68%)</title><rect x="10.0" y="515.0" width="291.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="526.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (214 samples, 24.68%)</title><rect x="10.0" y="499.0" width="291.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="510.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.23%)</title><rect x="10.0" y="483.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.23%)</title><rect x="10.0" y="467.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.12%)</title><rect x="10.0" y="451.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.12%)</title><rect x="10.0" y="435.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.12%)</title><rect x="10.0" y="419.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="11.4" y="451.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="14.4" y="462.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="11.4" y="435.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="14.4" y="446.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="11.4" y="419.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.4" y="430.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="11.4" y="403.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="14.4" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="11.4" y="387.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="14.4" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="11.4" y="371.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.4" y="382.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="11.4" y="355.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="14.4" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.58%)</title><rect x="12.7" y="483.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="15.7" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.58%)</title><rect x="12.7" y="467.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.7" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.58%)</title><rect x="12.7" y="451.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$135/533795875.accept (5 samples, 0.58%)</title><rect x="12.7" y="435.0" width="6.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (5 samples, 0.58%)</title><rect x="12.7" y="419.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.7" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (5 samples, 0.58%)</title><rect x="12.7" y="403.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.7" y="414.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (175 samples, 20.18%)</title><rect x="19.5" y="483.0" width="238.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.5" y="494.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$134/618821375.accept (172 samples, 19.84%)</title><rect x="19.5" y="467.0" width="234.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="22.5" y="478.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (172 samples, 19.84%)</title><rect x="19.5" y="451.0" width="234.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="22.5" y="462.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (160 samples, 18.45%)</title><rect x="19.5" y="435.0" width="217.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.5" y="446.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (160 samples, 18.45%)</title><rect x="19.5" y="419.0" width="217.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="430.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (160 samples, 18.45%)</title><rect x="19.5" y="403.0" width="217.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.5" y="414.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 18.45%)</title><rect x="19.5" y="387.0" width="217.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.5" y="398.0">java/util/concurrent/Executor..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (149 samples, 17.19%)</title><rect x="34.5" y="371.0" width="202.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="37.5" y="382.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (149 samples, 17.19%)</title><rect x="34.5" y="355.0" width="202.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.5" y="366.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (111 samples, 12.80%)</title><rect x="34.5" y="339.0" width="151.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="37.5" y="350.0">java/util/concurren..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (13 samples, 1.50%)</title><rect x="34.5" y="323.0" width="17.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (13 samples, 1.50%)</title><rect x="34.5" y="307.0" width="17.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="37.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (13 samples, 1.50%)</title><rect x="34.5" y="291.0" width="17.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (13 samples, 1.50%)</title><rect x="34.5" y="275.0" width="17.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.69%)</title><rect x="52.2" y="323.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (6 samples, 0.69%)</title><rect x="52.2" y="307.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.69%)</title><rect x="52.2" y="291.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (92 samples, 10.61%)</title><rect x="60.4" y="323.0" width="125.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.4" y="334.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (92 samples, 10.61%)</title><rect x="60.4" y="307.0" width="125.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.4" y="318.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (92 samples, 10.61%)</title><rect x="60.4" y="291.0" width="125.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.4" y="302.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (92 samples, 10.61%)</title><rect x="60.4" y="275.0" width="125.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="63.4" y="286.0">java/util/concu..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (79 samples, 9.11%)</title><rect x="78.1" y="259.0" width="107.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="81.1" y="270.0">sun/misc/Unsa..</text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.23%)</title><rect x="79.4" y="243.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="82.4" y="254.0"></text>
</g>
<g>
<title>Unsafe_Unpark (68 samples, 7.84%)</title><rect x="82.1" y="243.0" width="92.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="85.1" y="254.0">Unsafe_Unpark</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.35%)</title><rect x="83.5" y="227.0" width="4.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="86.5" y="238.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.12%)</title><rect x="87.6" y="227.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="90.6" y="238.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 4.84%)</title><rect x="88.9" y="227.0" width="57.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="91.9" y="238.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.12%)</title><rect x="146.1" y="227.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="149.1" y="238.0"></text>
</g>
<g>
<title>pthread_mutex_lock (20 samples, 2.31%)</title><rect x="147.5" y="227.0" width="27.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="150.5" y="238.0">p..</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 0.46%)</title><rect x="174.7" y="243.0" width="5.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="177.7" y="254.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.46%)</title><rect x="180.1" y="243.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="183.1" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.12%)</title><rect x="185.6" y="339.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.6" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.12%)</title><rect x="185.6" y="323.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (37 samples, 4.27%)</title><rect x="186.9" y="339.0" width="50.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="189.9" y="350.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (37 samples, 4.27%)</title><rect x="186.9" y="323.0" width="50.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.9" y="334.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (37 samples, 4.27%)</title><rect x="186.9" y="307.0" width="50.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="189.9" y="318.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (37 samples, 4.27%)</title><rect x="186.9" y="291.0" width="50.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="189.9" y="302.0">java/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 1.15%)</title><rect x="237.3" y="435.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="240.3" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 1.15%)</title><rect x="237.3" y="419.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.69%)</title><rect x="242.7" y="403.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="245.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.69%)</title><rect x="242.7" y="387.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.7" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.12%)</title><rect x="249.5" y="371.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="252.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.12%)</title><rect x="249.5" y="355.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="252.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.12%)</title><rect x="249.5" y="339.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="252.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.23%)</title><rect x="250.9" y="435.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.23%)</title><rect x="250.9" y="419.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="253.9" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.23%)</title><rect x="250.9" y="403.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.9" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.23%)</title><rect x="250.9" y="387.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.9" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.23%)</title><rect x="250.9" y="371.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="253.9" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.35%)</title><rect x="253.6" y="467.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="256.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.35%)</title><rect x="253.6" y="451.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.35%)</title><rect x="253.6" y="435.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.35%)</title><rect x="253.6" y="419.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.69%)</title><rect x="257.7" y="483.0" width="43.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.7" y="494.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (32 samples, 3.69%)</title><rect x="257.7" y="467.0" width="43.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.7" y="478.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 2.42%)</title><rect x="257.7" y="451.0" width="28.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.7" y="462.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (21 samples, 2.42%)</title><rect x="257.7" y="435.0" width="28.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.7" y="446.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 2.42%)</title><rect x="257.7" y="419.0" width="28.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.7" y="430.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.12%)</title><rect x="257.7" y="403.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.7" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.12%)</title><rect x="257.7" y="387.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="260.7" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="257.7" y="371.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.7" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.12%)</title><rect x="257.7" y="355.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="260.7" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (20 samples, 2.31%)</title><rect x="259.1" y="403.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="262.1" y="414.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (20 samples, 2.31%)</title><rect x="259.1" y="387.0" width="27.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.1" y="398.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.61%)</title><rect x="259.1" y="371.0" width="19.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="262.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.58%)</title><rect x="271.3" y="355.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.58%)</title><rect x="271.3" y="339.0" width="6.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="274.3" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.58%)</title><rect x="271.3" y="323.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.58%)</title><rect x="271.3" y="307.0" width="6.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="274.3" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.58%)</title><rect x="271.3" y="291.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="274.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.58%)</title><rect x="271.3" y="275.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.3" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.58%)</title><rect x="271.3" y="259.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="274.3" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (6 samples, 0.69%)</title><rect x="278.1" y="371.0" width="8.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.1" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.69%)</title><rect x="278.1" y="355.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.1" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.69%)</title><rect x="278.1" y="339.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.1" y="350.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.69%)</title><rect x="278.1" y="323.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (3 samples, 0.35%)</title><rect x="286.3" y="451.0" width="4.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="289.3" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (3 samples, 0.35%)</title><rect x="286.3" y="435.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="289.3" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (3 samples, 0.35%)</title><rect x="286.3" y="419.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="289.3" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySpliterator.characteristics (1 samples, 0.12%)</title><rect x="286.3" y="403.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.3" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="287.6" y="403.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="290.6" y="414.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="287.6" y="387.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.6" y="398.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="287.6" y="371.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="290.6" y="382.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="287.6" y="355.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="290.6" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="287.6" y="339.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.6" y="350.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="287.6" y="323.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="290.6" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.12%)</title><rect x="287.6" y="307.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="290.6" y="318.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="287.6" y="291.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="290.6" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.12%)</title><rect x="289.0" y="403.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.12%)</title><rect x="290.4" y="451.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.12%)</title><rect x="290.4" y="435.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="293.4" y="446.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.12%)</title><rect x="290.4" y="419.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="293.4" y="430.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::event(methodHandle, methodHandle, int, int, CompLevel, nmethod*, JavaThread*) (1 samples, 0.12%)</title><rect x="290.4" y="403.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.4" y="414.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::method_invocation_event(methodHandle, methodHandle, CompLevel, nmethod*, JavaThread*) (1 samples, 0.12%)</title><rect x="290.4" y="387.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="293.4" y="398.0"></text>
</g>
<g>
<title>SimpleThresholdPolicy::compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.12%)</title><rect x="290.4" y="371.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="293.4" y="382.0"></text>
</g>
<g>
<title>AdvancedThresholdPolicy::submit_compile(methodHandle, int, CompLevel, JavaThread*) (1 samples, 0.12%)</title><rect x="290.4" y="355.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="293.4" y="366.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.12%)</title><rect x="290.4" y="339.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="293.4" y="350.0"></text>
</g>
<g>
<title>CompileBroker::compile_method_base(methodHandle, int, int, methodHandle, int, char const*, Thread*) (1 samples, 0.12%)</title><rect x="290.4" y="323.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="293.4" y="334.0"></text>
</g>
<g>
<title>CompileBroker::create_compile_task(CompileQueue*, int, methodHandle, int, int, methodHandle, int, char const*, bool) (1 samples, 0.12%)</title><rect x="290.4" y="307.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="293.4" y="318.0"></text>
</g>
<g>
<title>Monitor::notify_all() (1 samples, 0.12%)</title><rect x="290.4" y="291.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="293.4" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.69%)</title><rect x="291.7" y="451.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="294.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 0.35%)</title><rect x="291.7" y="435.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="294.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.35%)</title><rect x="291.7" y="419.0" width="4.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="294.7" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.35%)</title><rect x="291.7" y="403.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="294.7" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.12%)</title><rect x="293.1" y="387.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="296.1" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.12%)</title><rect x="293.1" y="371.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="296.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="293.1" y="355.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="296.1" y="366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="293.1" y="339.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="296.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.12%)</title><rect x="294.5" y="387.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="297.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.12%)</title><rect x="294.5" y="371.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.12%)</title><rect x="294.5" y="355.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="297.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.12%)</title><rect x="294.5" y="339.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="297.5" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.12%)</title><rect x="294.5" y="323.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.5" y="334.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.12%)</title><rect x="294.5" y="307.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="297.5" y="318.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.12%)</title><rect x="294.5" y="291.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.5" y="302.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (1 samples, 0.12%)</title><rect x="294.5" y="275.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="297.5" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="294.5" y="259.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.5" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.12%)</title><rect x="294.5" y="243.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.5" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="294.5" y="227.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="297.5" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.12%)</title><rect x="294.5" y="211.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="297.5" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 0.35%)</title><rect x="295.8" y="435.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.8" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (3 samples, 0.35%)</title><rect x="295.8" y="419.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.35%)</title><rect x="295.8" y="403.0" width="4.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.8" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.35%)</title><rect x="295.8" y="387.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="298.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (3 samples, 0.35%)</title><rect x="295.8" y="371.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="298.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (3 samples, 0.35%)</title><rect x="295.8" y="355.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="298.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (3 samples, 0.35%)</title><rect x="295.8" y="339.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.write (1 samples, 0.12%)</title><rect x="295.8" y="323.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="298.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchTopic.write (1 samples, 0.12%)</title><rect x="295.8" y="307.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.8" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchPartition.write (1 samples, 0.12%)</title><rect x="295.8" y="291.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="298.8" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.addSize (2 samples, 0.23%)</title><rect x="297.2" y="323.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.12%)</title><rect x="297.2" y="307.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="300.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.12%)</title><rect x="297.2" y="291.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ObjectSerializationCache.cacheSerializedValue (1 samples, 0.12%)</title><rect x="298.5" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.5" y="318.0"></text>
</g>
<g>
<title>java/util/IdentityHashMap.put (1 samples, 0.12%)</title><rect x="298.5" y="291.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.5" y="302.0"></text>
</g>
<g>
<title>java/lang/System.identityHashCode (1 samples, 0.12%)</title><rect x="298.5" y="275.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.12%)</title><rect x="299.9" y="451.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.9" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.12%)</title><rect x="299.9" y="435.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.9" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.12%)</title><rect x="299.9" y="419.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.9" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.12%)</title><rect x="299.9" y="403.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.9" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.12%)</title><rect x="299.9" y="387.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="302.9" y="398.0"></text>
</g>
<g>
<title>java/lang/Thread.run (592 samples, 68.28%)</title><rect x="301.3" y="531.0" width="805.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.3" y="542.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (592 samples, 68.28%)</title><rect x="301.3" y="515.0" width="805.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.3" y="526.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (592 samples, 68.28%)</title><rect x="301.3" y="499.0" width="805.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="304.3" y="510.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/245439147.run (399 samples, 46.02%)</title><rect x="304.0" y="483.0" width="543.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="307.0" y="494.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$359/2..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$81 (399 samples, 46.02%)</title><rect x="304.0" y="467.0" width="543.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="307.0" y="478.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTas..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (399 samples, 46.02%)</title><rect x="304.0" y="451.0" width="543.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="307.0" y="462.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (399 samples, 46.02%)</title><rect x="304.0" y="435.0" width="543.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.0" y="446.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThe..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (1 samples, 0.12%)</title><rect x="308.1" y="419.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.1" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.35%)</title><rect x="309.4" y="419.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.4" y="430.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.35%)</title><rect x="309.4" y="403.0" width="4.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.4" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.35%)</title><rect x="309.4" y="387.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.4" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.35%)</title><rect x="309.4" y="371.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.4" y="382.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.23%)</title><rect x="310.8" y="355.0" width="2.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="313.8" y="366.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.23%)</title><rect x="310.8" y="339.0" width="2.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="313.8" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (40 samples, 4.61%)</title><rect x="313.5" y="419.0" width="54.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="316.5" y="430.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (40 samples, 4.61%)</title><rect x="313.5" y="403.0" width="54.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.5" y="414.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (40 samples, 4.61%)</title><rect x="313.5" y="387.0" width="54.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.5" y="398.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (25 samples, 2.88%)</title><rect x="333.9" y="371.0" width="34.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="336.9" y="382.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.12%)</title><rect x="333.9" y="355.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="336.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.12%)</title><rect x="333.9" y="339.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="336.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.12%)</title><rect x="333.9" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.9" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (24 samples, 2.77%)</title><rect x="335.3" y="355.0" width="32.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="338.3" y="366.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$370/2125562877.accept (23 samples, 2.65%)</title><rect x="336.6" y="339.0" width="31.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="339.6" y="350.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$2 (23 samples, 2.65%)</title><rect x="336.6" y="323.0" width="31.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="339.6" y="334.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (23 samples, 2.65%)</title><rect x="336.6" y="307.0" width="31.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="339.6" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (23 samples, 2.65%)</title><rect x="336.6" y="291.0" width="31.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="339.6" y="302.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (22 samples, 2.54%)</title><rect x="338.0" y="275.0" width="29.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="341.0" y="286.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.69%)</title><rect x="338.0" y="259.0" width="8.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="341.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.69%)</title><rect x="338.0" y="243.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="341.0" y="254.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.23%)</title><rect x="343.4" y="227.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="346.4" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.85%)</title><rect x="346.2" y="259.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="349.2" y="270.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (111 samples, 12.80%)</title><rect x="367.9" y="419.0" width="151.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="370.9" y="430.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1624820151.extract (111 samples, 12.80%)</title><rect x="367.9" y="403.0" width="151.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="370.9" y="414.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$4 (111 samples, 12.80%)</title><rect x="367.9" y="387.0" width="151.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.9" y="398.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (111 samples, 12.80%)</title><rect x="367.9" y="371.0" width="151.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="370.9" y="382.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (111 samples, 12.80%)</title><rect x="367.9" y="355.0" width="151.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="370.9" y="366.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (111 samples, 12.80%)</title><rect x="367.9" y="339.0" width="151.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="370.9" y="350.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (40 samples, 4.61%)</title><rect x="367.9" y="323.0" width="54.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="370.9" y="334.0">com/f..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="380.2" y="307.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="383.2" y="318.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.58%)</title><rect x="381.6" y="307.0" width="6.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="384.6" y="318.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.58%)</title><rect x="381.6" y="291.0" width="6.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="384.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.12%)</title><rect x="388.4" y="307.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="391.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.12%)</title><rect x="388.4" y="291.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="391.4" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="388.4" y="275.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="391.4" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="388.4" y="259.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="391.4" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="388.4" y="243.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="391.4" y="254.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (1 samples, 0.12%)</title><rect x="388.4" y="227.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="391.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 0.69%)</title><rect x="389.7" y="307.0" width="8.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="392.7" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="391.1" y="291.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="394.1" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.12%)</title><rect x="391.1" y="275.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.1" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.12%)</title><rect x="391.1" y="259.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="394.1" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.46%)</title><rect x="392.4" y="291.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.35%)</title><rect x="393.8" y="275.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.8" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.35%)</title><rect x="393.8" y="259.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.8" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.35%)</title><rect x="393.8" y="243.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.35%)</title><rect x="393.8" y="227.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.35%)</title><rect x="393.8" y="211.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 2.08%)</title><rect x="397.9" y="307.0" width="24.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="400.9" y="318.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="402.0" y="291.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="405.0" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="402.0" y="275.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="405.0" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="402.0" y="259.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="405.0" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="402.0" y="243.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="405.0" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.12%)</title><rect x="402.0" y="227.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="405.0" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.12%)</title><rect x="402.0" y="211.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="405.0" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (14 samples, 1.61%)</title><rect x="403.3" y="291.0" width="19.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="406.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.35%)</title><rect x="403.3" y="275.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="406.3" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="403.3" y="259.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="406.3" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="403.3" y="243.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="406.3" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="403.3" y="227.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="406.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 0.23%)</title><rect x="404.7" y="259.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.7" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.23%)</title><rect x="407.4" y="275.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="410.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.23%)</title><rect x="407.4" y="259.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.23%)</title><rect x="407.4" y="243.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="410.4" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="407.4" y="227.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="410.4" y="238.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="407.4" y="211.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="410.4" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="407.4" y="195.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="410.4" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="407.4" y="179.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="410.4" y="190.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.12%)</title><rect x="407.4" y="163.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="410.4" y="174.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.12%)</title><rect x="407.4" y="147.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="410.4" y="158.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="408.8" y="227.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="411.8" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="408.8" y="211.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="411.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (9 samples, 1.04%)</title><rect x="410.1" y="275.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="413.1" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (66 samples, 7.61%)</title><rect x="422.4" y="323.0" width="89.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.4" y="334.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (3 samples, 0.35%)</title><rect x="422.4" y="307.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="425.4" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.12%)</title><rect x="426.5" y="307.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="429.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (6 samples, 0.69%)</title><rect x="427.8" y="307.0" width="8.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="430.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.46%)</title><rect x="430.6" y="291.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="433.6" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (7 samples, 0.81%)</title><rect x="436.0" y="307.0" width="9.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="439.0" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.69%)</title><rect x="437.4" y="291.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.23%)</title><rect x="438.7" y="275.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="441.7" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.12%)</title><rect x="441.4" y="275.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="444.4" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.12%)</title><rect x="441.4" y="259.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.12%)</title><rect x="441.4" y="243.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="444.4" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.12%)</title><rect x="441.4" y="227.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.23%)</title><rect x="442.8" y="275.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="445.8" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.23%)</title><rect x="442.8" y="259.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="445.8" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.23%)</title><rect x="442.8" y="243.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="445.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 0.23%)</title><rect x="445.5" y="307.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.5" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 0.23%)</title><rect x="445.5" y="291.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.5" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (46 samples, 5.31%)</title><rect x="448.2" y="307.0" width="62.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="451.2" y="318.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (46 samples, 5.31%)</title><rect x="448.2" y="291.0" width="62.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="451.2" y="302.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.85%)</title><rect x="449.6" y="275.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.6" y="286.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.35%)</title><rect x="452.3" y="259.0" width="4.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="455.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.35%)</title><rect x="452.3" y="243.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.35%)</title><rect x="452.3" y="227.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="455.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.12%)</title><rect x="455.1" y="211.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.12%)</title><rect x="455.1" y="195.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="458.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 1.15%)</title><rect x="456.4" y="259.0" width="13.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.4" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (4 samples, 0.46%)</title><rect x="456.4" y="243.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="459.4" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (6 samples, 0.69%)</title><rect x="461.9" y="243.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.9" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (6 samples, 0.69%)</title><rect x="461.9" y="227.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.9" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (6 samples, 0.69%)</title><rect x="461.9" y="211.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.9" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (6 samples, 0.69%)</title><rect x="461.9" y="195.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.9" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.12%)</title><rect x="470.0" y="259.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="473.0" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (29 samples, 3.34%)</title><rect x="471.4" y="275.0" width="39.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="474.4" y="286.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (29 samples, 3.34%)</title><rect x="471.4" y="259.0" width="39.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="474.4" y="270.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (29 samples, 3.34%)</title><rect x="471.4" y="243.0" width="39.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="474.4" y="254.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.15%)</title><rect x="472.7" y="227.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.7" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.12%)</title><rect x="475.5" y="211.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="478.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (5 samples, 0.58%)</title><rect x="476.8" y="211.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.8" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (5 samples, 0.58%)</title><rect x="476.8" y="195.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.8" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (5 samples, 0.58%)</title><rect x="476.8" y="179.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.8" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.12%)</title><rect x="480.9" y="163.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="483.9" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="482.3" y="163.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="485.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.12%)</title><rect x="483.6" y="211.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="486.6" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.12%)</title><rect x="483.6" y="195.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="486.6" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.12%)</title><rect x="483.6" y="179.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="486.6" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="485.0" y="211.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="488.0" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.12%)</title><rect x="485.0" y="195.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="488.0" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="485.0" y="179.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="488.0" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.92%)</title><rect x="486.4" y="227.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="489.4" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.69%)</title><rect x="489.1" y="211.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="492.1" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.69%)</title><rect x="489.1" y="195.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.1" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (6 samples, 0.69%)</title><rect x="489.1" y="179.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="492.1" y="190.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (6 samples, 0.69%)</title><rect x="489.1" y="163.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="492.1" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.23%)</title><rect x="497.2" y="227.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="500.2" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.23%)</title><rect x="497.2" y="211.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="500.2" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.23%)</title><rect x="497.2" y="195.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.2" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.23%)</title><rect x="497.2" y="179.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.2" y="190.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.23%)</title><rect x="497.2" y="163.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="500.2" y="174.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.23%)</title><rect x="497.2" y="147.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="500.2" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.81%)</title><rect x="500.0" y="227.0" width="9.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.0" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.81%)</title><rect x="500.0" y="211.0" width="9.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="503.0" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.81%)</title><rect x="500.0" y="195.0" width="9.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.0" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.12%)</title><rect x="509.5" y="227.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="512.5" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="509.5" y="211.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="512.5" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.12%)</title><rect x="510.9" y="307.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="513.9" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.58%)</title><rect x="512.2" y="323.0" width="6.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.2" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.58%)</title><rect x="512.2" y="307.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="515.2" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.58%)</title><rect x="512.2" y="291.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="515.2" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.58%)</title><rect x="512.2" y="275.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.58%)</title><rect x="512.2" y="259.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.2" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (237 samples, 27.34%)</title><rect x="519.0" y="419.0" width="322.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="522.0" y="430.0">com/linecorp/decaton/processor/runtime/inter..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="520.4" y="403.0" width="1.3" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="523.4" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.46%)</title><rect x="521.7" y="403.0" width="5.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="524.7" y="414.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.46%)</title><rect x="521.7" y="387.0" width="5.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="524.7" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (42 samples, 4.84%)</title><rect x="527.2" y="403.0" width="57.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.2" y="414.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.12%)</title><rect x="527.2" y="387.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.2" y="398.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (41 samples, 4.73%)</title><rect x="528.5" y="387.0" width="55.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="531.5" y="398.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 4.61%)</title><rect x="529.9" y="371.0" width="54.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.9" y="382.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 0.69%)</title><rect x="531.3" y="355.0" width="8.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="534.3" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (6 samples, 0.69%)</title><rect x="531.3" y="339.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="534.3" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (6 samples, 0.69%)</title><rect x="531.3" y="323.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.3" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.69%)</title><rect x="531.3" y="307.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="534.3" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="539.4" y="355.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="542.4" y="366.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.12%)</title><rect x="539.4" y="339.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="542.4" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="539.4" y="323.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="542.4" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.12%)</title><rect x="539.4" y="307.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="542.4" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (32 samples, 3.69%)</title><rect x="540.8" y="355.0" width="43.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.8" y="366.0">java..</text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 0.92%)</title><rect x="573.5" y="339.0" width="10.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="576.5" y="350.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.23%)</title><rect x="573.5" y="323.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="576.5" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.23%)</title><rect x="576.2" y="323.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="579.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.12%)</title><rect x="576.2" y="307.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="579.2" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.12%)</title><rect x="577.5" y="307.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="580.5" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.46%)</title><rect x="578.9" y="323.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="581.9" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.46%)</title><rect x="584.3" y="403.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="587.3" y="414.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.46%)</title><rect x="584.3" y="387.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="587.3" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="588.4" y="371.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="591.4" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (107 samples, 12.34%)</title><rect x="589.8" y="403.0" width="145.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="592.8" y="414.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (104 samples, 12.00%)</title><rect x="589.8" y="387.0" width="141.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="592.8" y="398.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (30 samples, 3.46%)</title><rect x="600.7" y="371.0" width="40.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.7" y="382.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="619.7" y="355.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="622.7" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.12%)</title><rect x="619.7" y="339.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="622.7" y="350.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="619.7" y="323.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="622.7" y="334.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="619.7" y="307.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="622.7" y="318.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="619.7" y="291.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="622.7" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="619.7" y="275.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="622.7" y="286.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.12%)</title><rect x="619.7" y="259.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="622.7" y="270.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (10 samples, 1.15%)</title><rect x="621.1" y="355.0" width="13.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="624.1" y="366.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (9 samples, 1.04%)</title><rect x="622.5" y="339.0" width="12.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="625.5" y="350.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.58%)</title><rect x="623.8" y="323.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="626.8" y="334.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (5 samples, 0.58%)</title><rect x="623.8" y="307.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="626.8" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.58%)</title><rect x="623.8" y="291.0" width="6.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.8" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (5 samples, 0.58%)</title><rect x="623.8" y="275.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="626.8" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.12%)</title><rect x="623.8" y="259.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="626.8" y="270.0"></text>
</g>
<g>
<title>CodeHeap::find_start(void*) const (1 samples, 0.12%)</title><rect x="623.8" y="243.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="626.8" y="254.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="625.2" y="259.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="628.2" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.35%)</title><rect x="626.5" y="259.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="629.5" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.23%)</title><rect x="626.5" y="243.0" width="2.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="629.5" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (2 samples, 0.23%)</title><rect x="626.5" y="227.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="629.5" y="238.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.12%)</title><rect x="626.5" y="211.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="629.5" y="222.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.12%)</title><rect x="626.5" y="195.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="629.5" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.12%)</title><rect x="626.5" y="179.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="629.5" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.12%)</title><rect x="626.5" y="163.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="629.5" y="174.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.12%)</title><rect x="627.9" y="211.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="630.9" y="222.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.12%)</title><rect x="629.3" y="243.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="632.3" y="254.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.12%)</title><rect x="630.6" y="323.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.6" y="334.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="632.0" y="323.0" width="2.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="635.0" y="334.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.23%)</title><rect x="634.7" y="355.0" width="2.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="637.7" y="366.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.35%)</title><rect x="637.4" y="355.0" width="4.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="640.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.69%)</title><rect x="641.5" y="371.0" width="8.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.5" y="382.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.12%)</title><rect x="641.5" y="355.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.5" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="641.5" y="339.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="644.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.12%)</title><rect x="641.5" y="323.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="644.5" y="334.0"></text>
</g>
<g>
<title>java/lang/Long.toString (5 samples, 0.58%)</title><rect x="642.9" y="355.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.9" y="366.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.58%)</title><rect x="642.9" y="339.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.9" y="350.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="649.7" y="371.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="652.7" y="382.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (59 samples, 6.81%)</title><rect x="651.0" y="371.0" width="80.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="654.0" y="382.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (59 samples, 6.81%)</title><rect x="651.0" y="355.0" width="80.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="654.0" y="366.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.58%)</title><rect x="651.0" y="339.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.0" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.58%)</title><rect x="651.0" y="323.0" width="6.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.0" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.58%)</title><rect x="651.0" y="307.0" width="6.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="654.0" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.58%)</title><rect x="651.0" y="291.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.0" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.12%)</title><rect x="657.8" y="339.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="660.8" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.12%)</title><rect x="657.8" y="323.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.8" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.12%)</title><rect x="657.8" y="307.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="660.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.12%)</title><rect x="657.8" y="291.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="660.8" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (53 samples, 6.11%)</title><rect x="659.2" y="339.0" width="72.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="662.2" y="350.0">java/uti..</text>
</g>
<g>
<title>java/util/HashMap.put (47 samples, 5.42%)</title><rect x="667.4" y="323.0" width="63.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="670.4" y="334.0">java/ut..</text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.12%)</title><rect x="702.8" y="307.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="705.8" y="318.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.12%)</title><rect x="702.8" y="291.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="705.8" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (20 samples, 2.31%)</title><rect x="704.1" y="307.0" width="27.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="707.1" y="318.0">j..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.12%)</title><rect x="716.4" y="291.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="719.4" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 1.04%)</title><rect x="717.7" y="291.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="720.7" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.23%)</title><rect x="727.3" y="275.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="730.3" y="286.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.23%)</title><rect x="727.3" y="259.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="730.3" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.23%)</title><rect x="727.3" y="243.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="730.3" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="728.6" y="227.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="731.6" y="238.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.12%)</title><rect x="730.0" y="291.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="733.0" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 0.35%)</title><rect x="731.3" y="387.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.3" y="398.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.35%)</title><rect x="731.3" y="371.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="734.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.35%)</title><rect x="731.3" y="355.0" width="4.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="734.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.35%)</title><rect x="731.3" y="339.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="734.3" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (49 samples, 5.65%)</title><rect x="735.4" y="403.0" width="66.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="738.4" y="414.0">com/lin..</text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.12%)</title><rect x="735.4" y="387.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="738.4" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (2 samples, 0.23%)</title><rect x="736.8" y="387.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.8" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (46 samples, 5.31%)</title><rect x="739.5" y="387.0" width="62.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="742.5" y="398.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$290/1729252325.process (22 samples, 2.54%)</title><rect x="740.9" y="371.0" width="29.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.9" y="382.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$5 (22 samples, 2.54%)</title><rect x="740.9" y="355.0" width="29.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="743.9" y="366.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (20 samples, 2.31%)</title><rect x="740.9" y="339.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="743.9" y="350.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.23%)</title><rect x="744.9" y="323.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="747.9" y="334.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.23%)</title><rect x="744.9" y="307.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="747.9" y="318.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.23%)</title><rect x="744.9" y="291.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="747.9" y="302.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.23%)</title><rect x="744.9" y="275.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.23%)</title><rect x="744.9" y="259.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="747.9" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.12%)</title><rect x="746.3" y="243.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="749.3" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (4 samples, 0.46%)</title><rect x="747.7" y="323.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="750.7" y="334.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.35%)</title><rect x="749.0" y="307.0" width="4.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="752.0" y="318.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.35%)</title><rect x="749.0" y="291.0" width="4.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="752.0" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (11 samples, 1.27%)</title><rect x="753.1" y="323.0" width="15.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.1" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.23%)</title><rect x="768.1" y="339.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="771.1" y="350.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.23%)</title><rect x="768.1" y="323.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="771.1" y="334.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.23%)</title><rect x="768.1" y="307.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="771.1" y="318.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.23%)</title><rect x="768.1" y="291.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="771.1" y="302.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.23%)</title><rect x="768.1" y="275.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="771.1" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.23%)</title><rect x="770.8" y="371.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="773.8" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 0.35%)</title><rect x="773.5" y="371.0" width="4.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.5" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (3 samples, 0.35%)</title><rect x="773.5" y="355.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="776.5" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 0.35%)</title><rect x="773.5" y="339.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="776.5" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.35%)</title><rect x="773.5" y="323.0" width="4.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="776.5" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.35%)</title><rect x="773.5" y="307.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.35%)</title><rect x="773.5" y="291.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="776.5" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.23%)</title><rect x="777.6" y="371.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="780.6" y="382.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.23%)</title><rect x="777.6" y="355.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="780.6" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (2 samples, 0.23%)</title><rect x="780.3" y="371.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.3" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$361/1439430192.get (2 samples, 0.23%)</title><rect x="780.3" y="355.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.3" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$93 (2 samples, 0.23%)</title><rect x="780.3" y="339.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="783.3" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/2100961961.linkToTargetMethod (1 samples, 0.12%)</title><rect x="783.1" y="371.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="786.1" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/842326585.invokeStatic_L_L (1 samples, 0.12%)</title><rect x="783.1" y="355.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="786.1" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$367/1604548233.get$Lambda (1 samples, 0.12%)</title><rect x="783.1" y="339.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="786.1" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="784.4" y="371.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="787.4" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.12%)</title><rect x="784.4" y="355.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.4" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="785.8" y="371.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="788.8" y="382.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="785.8" y="355.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.8" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.69%)</title><rect x="787.1" y="371.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="788.5" y="355.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="791.5" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="788.5" y="339.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="791.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="788.5" y="323.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="791.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="788.5" y="307.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="791.5" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.12%)</title><rect x="788.5" y="291.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.5" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.12%)</title><rect x="788.5" y="275.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="791.5" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="788.5" y="259.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="791.5" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.12%)</title><rect x="788.5" y="243.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="791.5" y="254.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.12%)</title><rect x="788.5" y="227.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="791.5" y="238.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.12%)</title><rect x="788.5" y="211.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="791.5" y="222.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.12%)</title><rect x="788.5" y="195.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="791.5" y="206.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.46%)</title><rect x="789.9" y="355.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="792.9" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.58%)</title><rect x="795.3" y="371.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="798.3" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.58%)</title><rect x="795.3" y="355.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="798.3" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.58%)</title><rect x="795.3" y="339.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="798.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.58%)</title><rect x="795.3" y="323.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="798.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.58%)</title><rect x="795.3" y="307.0" width="6.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="798.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.58%)</title><rect x="795.3" y="291.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="798.3" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$367/1604548233.accept (3 samples, 0.35%)</title><rect x="798.0" y="275.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.0" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.12%)</title><rect x="802.1" y="403.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="805.1" y="414.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.12%)</title><rect x="802.1" y="387.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.1" y="398.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.12%)</title><rect x="802.1" y="371.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="802.1" y="355.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="805.1" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="802.1" y="339.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="805.1" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="802.1" y="323.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="805.1" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1164107853.linkToTargetMethod (1 samples, 0.12%)</title><rect x="803.5" y="403.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="806.5" y="414.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/438135304.invokeStatic_L3_L (1 samples, 0.12%)</title><rect x="803.5" y="387.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="806.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$368/801801034.get$Lambda (1 samples, 0.12%)</title><rect x="803.5" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.5" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="803.5" y="355.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="806.5" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="803.5" y="339.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.5" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.12%)</title><rect x="803.5" y="323.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="806.5" y="334.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.12%)</title><rect x="803.5" y="307.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="806.5" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.12%)</title><rect x="803.5" y="291.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="806.5" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.12%)</title><rect x="803.5" y="275.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="806.5" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.12%)</title><rect x="803.5" y="259.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="806.5" y="270.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.12%)</title><rect x="803.5" y="243.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="806.5" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 3.00%)</title><rect x="804.8" y="403.0" width="35.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.8" y="414.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (26 samples, 3.00%)</title><rect x="804.8" y="387.0" width="35.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="807.8" y="398.0">jav..</text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.35%)</title><rect x="811.6" y="371.0" width="4.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="814.6" y="382.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.35%)</title><rect x="811.6" y="355.0" width="4.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="814.6" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (18 samples, 2.08%)</title><rect x="815.7" y="371.0" width="24.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="818.7" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (8 samples, 0.92%)</title><rect x="815.7" y="355.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="818.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.81%)</title><rect x="815.7" y="339.0" width="9.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.81%)</title><rect x="815.7" y="323.0" width="9.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="818.7" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$368/801801034.accept (5 samples, 0.58%)</title><rect x="817.1" y="307.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="820.1" y="318.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="823.9" y="307.0" width="1.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="826.9" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.12%)</title><rect x="825.2" y="339.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="828.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 1.15%)</title><rect x="826.6" y="355.0" width="13.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="829.6" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$368/801801034.accept (10 samples, 1.15%)</title><rect x="826.6" y="339.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="829.6" y="350.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$74 (10 samples, 1.15%)</title><rect x="826.6" y="323.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="829.6" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (10 samples, 1.15%)</title><rect x="826.6" y="307.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="829.6" y="318.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (10 samples, 1.15%)</title><rect x="826.6" y="291.0" width="13.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="829.6" y="302.0"></text>
</g>
<g>
<title>java/time/Duration.create (10 samples, 1.15%)</title><rect x="826.6" y="275.0" width="13.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="829.6" y="286.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.92%)</title><rect x="829.3" y="259.0" width="10.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="832.3" y="270.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.81%)</title><rect x="830.7" y="243.0" width="9.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="833.7" y="254.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="840.2" y="403.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="843.2" y="414.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.46%)</title><rect x="841.6" y="419.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="844.6" y="430.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.46%)</title><rect x="841.6" y="403.0" width="5.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="844.6" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.69%)</title><rect x="847.0" y="483.0" width="8.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.0" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.69%)</title><rect x="847.0" y="467.0" width="8.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="850.0" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.69%)</title><rect x="847.0" y="451.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.0" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.69%)</title><rect x="847.0" y="435.0" width="8.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.0" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (185 samples, 21.34%)</title><rect x="855.2" y="483.0" width="251.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="858.2" y="494.0">java/util/concurrent/ThreadPoolEx..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (184 samples, 21.22%)</title><rect x="856.6" y="467.0" width="250.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="859.6" y="478.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.dequeue (4 samples, 0.46%)</title><rect x="867.4" y="451.0" width="5.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="870.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (157 samples, 18.11%)</title><rect x="872.9" y="451.0" width="213.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="875.9" y="462.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.12%)</title><rect x="878.3" y="435.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="881.3" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (16 samples, 1.85%)</title><rect x="879.7" y="435.0" width="21.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.7" y="446.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.12%)</title><rect x="901.5" y="435.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="904.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="901.5" y="419.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.58%)</title><rect x="902.8" y="435.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="905.8" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.58%)</title><rect x="902.8" y="419.0" width="6.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="905.8" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (130 samples, 14.99%)</title><rect x="909.6" y="435.0" width="177.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.6" y="446.0">java/util/concurrent/lo..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (130 samples, 14.99%)</title><rect x="909.6" y="419.0" width="177.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="912.6" y="430.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.12%)</title><rect x="912.4" y="403.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="915.4" y="414.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.12%)</title><rect x="913.7" y="403.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="916.7" y="414.0"></text>
</g>
<g>
<title>Unsafe_Park (122 samples, 14.07%)</title><rect x="915.1" y="403.0" width="166.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="918.1" y="414.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.12%)</title><rect x="917.8" y="387.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="920.8" y="398.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.85%)</title><rect x="919.2" y="387.0" width="21.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="922.2" y="398.0">P..</text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (8 samples, 0.92%)</title><rect x="926.0" y="371.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="929.0" y="382.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.35%)</title><rect x="928.7" y="355.0" width="4.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="931.7" y="366.0"></text>
</g>
<g>
<title>pthread_getspecific (3 samples, 0.35%)</title><rect x="932.8" y="355.0" width="4.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="935.8" y="366.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (3 samples, 0.35%)</title><rect x="936.9" y="371.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="939.9" y="382.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.12%)</title><rect x="940.9" y="387.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="943.9" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.12%)</title><rect x="942.3" y="387.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="945.3" y="398.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.12%)</title><rect x="943.7" y="387.0" width="1.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="946.7" y="398.0"></text>
</g>
<g>
<title>__lll_unlock_wake (31 samples, 3.58%)</title><rect x="945.0" y="387.0" width="42.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="948.0" y="398.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (51 samples, 5.88%)</title><rect x="987.2" y="387.0" width="69.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="990.2" y="398.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.46%)</title><rect x="1056.6" y="387.0" width="5.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1059.6" y="398.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.23%)</title><rect x="1062.1" y="387.0" width="2.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1065.1" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.23%)</title><rect x="1064.8" y="387.0" width="2.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1067.8" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.23%)</title><rect x="1067.5" y="387.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1070.5" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.35%)</title><rect x="1070.2" y="387.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1073.2" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.23%)</title><rect x="1074.3" y="387.0" width="2.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1077.3" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.35%)</title><rect x="1077.0" y="387.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1080.0" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.46%)</title><rect x="1081.1" y="403.0" width="5.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1084.1" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (12 samples, 1.38%)</title><rect x="1086.6" y="451.0" width="16.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1089.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (12 samples, 1.38%)</title><rect x="1086.6" y="435.0" width="16.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1089.6" y="446.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (9 samples, 1.04%)</title><rect x="1089.3" y="419.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1092.3" y="430.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.12%)</title><rect x="1100.2" y="403.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1103.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.12%)</title><rect x="1101.5" y="419.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1104.5" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.12%)</title><rect x="1101.5" y="403.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1104.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.12%)</title><rect x="1101.5" y="387.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1104.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.35%)</title><rect x="1102.9" y="451.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1105.9" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.35%)</title><rect x="1102.9" y="435.0" width="4.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1105.9" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.23%)</title><rect x="1104.3" y="419.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1107.3" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.23%)</title><rect x="1104.3" y="403.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1107.3" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1107.0" y="531.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1110.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.12%)</title><rect x="1107.0" y="515.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1110.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.12%)</title><rect x="1107.0" y="499.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1110.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.12%)</title><rect x="1107.0" y="483.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1110.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.12%)</title><rect x="1107.0" y="467.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1110.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.12%)</title><rect x="1107.0" y="451.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1110.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.12%)</title><rect x="1107.0" y="435.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1110.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1107.0" y="419.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1110.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.12%)</title><rect x="1107.0" y="403.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1110.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.12%)</title><rect x="1107.0" y="387.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1110.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.12%)</title><rect x="1107.0" y="371.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1110.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.12%)</title><rect x="1107.0" y="355.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1110.0" y="366.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="1107.0" y="339.0" width="1.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1110.0" y="350.0"></text>
</g>
<g>
<title>start_thread (60 samples, 6.92%)</title><rect x="1108.3" y="531.0" width="81.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1111.3" y="542.0">start_thr..</text>
</g>
<g>
<title>java_start(Thread*) (60 samples, 6.92%)</title><rect x="1108.3" y="515.0" width="81.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1111.3" y="526.0">java_star..</text>
</g>
<g>
<title>FlexibleWorkGang::needs_more_workers() const (1 samples, 0.12%)</title><rect x="1108.3" y="499.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.3" y="510.0"></text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 2.08%)</title><rect x="1109.7" y="499.0" width="24.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1112.7" y="510.0">G..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.23%)</title><rect x="1109.7" y="483.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1112.7" y="494.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.23%)</title><rect x="1109.7" y="467.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.7" y="478.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.23%)</title><rect x="1109.7" y="451.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1112.7" y="462.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (15 samples, 1.73%)</title><rect x="1112.4" y="483.0" width="20.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.4" y="494.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.23%)</title><rect x="1112.4" y="467.0" width="2.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.4" y="478.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.12%)</title><rect x="1112.4" y="451.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.4" y="462.0"></text>
</g>
<g>
<title>Klass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.12%)</title><rect x="1112.4" y="435.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.4" y="446.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.12%)</title><rect x="1113.8" y="451.0" width="1.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1116.8" y="462.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.46%)</title><rect x="1115.1" y="467.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.1" y="478.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (3 samples, 0.35%)</title><rect x="1115.1" y="451.0" width="4.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1118.1" y="462.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (1 samples, 0.12%)</title><rect x="1115.1" y="435.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.1" y="446.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.12%)</title><rect x="1115.1" y="419.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.1" y="430.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.12%)</title><rect x="1115.1" y="403.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1118.1" y="414.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.23%)</title><rect x="1116.5" y="435.0" width="2.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1119.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.23%)</title><rect x="1116.5" y="419.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1119.5" y="430.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.12%)</title><rect x="1116.5" y="403.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1119.5" y="414.0"></text>
</g>
<g>
<title>frame::oops_entry_do(OopClosure*, RegisterMap const*) (1 samples, 0.12%)</title><rect x="1117.9" y="403.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1120.9" y="414.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.12%)</title><rect x="1117.9" y="387.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.9" y="398.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.12%)</title><rect x="1119.2" y="451.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1122.2" y="462.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.12%)</title><rect x="1119.2" y="435.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.2" y="446.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (9 samples, 1.04%)</title><rect x="1120.6" y="467.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.6" y="478.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (9 samples, 1.04%)</title><rect x="1120.6" y="451.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1123.6" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (9 samples, 1.04%)</title><rect x="1120.6" y="435.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.6" y="446.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (9 samples, 1.04%)</title><rect x="1120.6" y="419.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.6" y="430.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (9 samples, 1.04%)</title><rect x="1120.6" y="403.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.6" y="414.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.92%)</title><rect x="1121.9" y="387.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1124.9" y="398.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.23%)</title><rect x="1130.1" y="371.0" width="2.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.1" y="382.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.12%)</title><rect x="1130.1" y="355.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.1" y="366.0"></text>
</g>
<g>
<title>InstanceRefKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.12%)</title><rect x="1131.5" y="355.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.5" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.12%)</title><rect x="1131.5" y="339.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.5" y="350.0"></text>
</g>
<g>
<title>G1Mux2Closure::do_oop(unsigned int*) (1 samples, 0.12%)</title><rect x="1131.5" y="323.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.5" y="334.0"></text>
</g>
<g>
<title>G1InvokeIfNotTriggeredClosure::do_oop(unsigned int*) (1 samples, 0.12%)</title><rect x="1131.5" y="307.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.5" y="318.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.12%)</title><rect x="1132.8" y="483.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.8" y="494.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.12%)</title><rect x="1132.8" y="467.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.8" y="478.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.12%)</title><rect x="1132.8" y="451.0" width="1.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1135.8" y="462.0"></text>
</g>
<g>
<title>JavaThread::run() (39 samples, 4.50%)</title><rect x="1134.2" y="499.0" width="53.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1137.2" y="510.0">JavaT..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (39 samples, 4.50%)</title><rect x="1134.2" y="483.0" width="53.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.2" y="494.0">JavaT..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (39 samples, 4.50%)</title><rect x="1134.2" y="467.0" width="53.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.2" y="478.0">Compi..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (39 samples, 4.50%)</title><rect x="1134.2" y="451.0" width="53.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.2" y="462.0">Compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (39 samples, 4.50%)</title><rect x="1134.2" y="435.0" width="53.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1137.2" y="446.0">C2Com..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (39 samples, 4.50%)</title><rect x="1134.2" y="419.0" width="53.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.2" y="430.0">Compi..</text>
</g>
<g>
<title>Compile::Code_Gen() (20 samples, 2.31%)</title><rect x="1134.2" y="403.0" width="27.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.2" y="414.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.12%)</title><rect x="1134.2" y="387.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.2" y="398.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.12%)</title><rect x="1134.2" y="371.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.2" y="382.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.12%)</title><rect x="1134.2" y="355.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1137.2" y="366.0"></text>
</g>
<g>
<title>Matcher::match() (2 samples, 0.23%)</title><rect x="1135.6" y="387.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="398.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.23%)</title><rect x="1135.6" y="371.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="382.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.12%)</title><rect x="1135.6" y="355.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="366.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.12%)</title><rect x="1136.9" y="355.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.9" y="366.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.12%)</title><rect x="1136.9" y="339.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="350.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.12%)</title><rect x="1136.9" y="323.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.9" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.12%)</title><rect x="1136.9" y="307.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.9" y="318.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.12%)</title><rect x="1136.9" y="291.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.9" y="302.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.12%)</title><rect x="1136.9" y="275.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.9" y="286.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.12%)</title><rect x="1138.3" y="387.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.3" y="398.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.12%)</title><rect x="1138.3" y="371.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1141.3" y="382.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.12%)</title><rect x="1138.3" y="355.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.3" y="366.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.12%)</title><rect x="1138.3" y="339.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.3" y="350.0"></text>
</g>
<g>
<title>CFGLoop::update_succ_freq(Block*, float) (1 samples, 0.12%)</title><rect x="1138.3" y="323.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1141.3" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 1.85%)</title><rect x="1139.6" y="387.0" width="21.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="398.0">P..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.12%)</title><rect x="1141.0" y="371.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.35%)</title><rect x="1142.4" y="371.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.4" y="382.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1142.4" y="355.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.4" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.12%)</title><rect x="1143.7" y="355.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.7" y="366.0"></text>
</g>
<g>
<title>compL_rReg_immNode::rule() const (1 samples, 0.12%)</title><rect x="1145.1" y="355.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.1" y="366.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.12%)</title><rect x="1146.4" y="371.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.4" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.46%)</title><rect x="1147.8" y="371.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.8" y="382.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.35%)</title><rect x="1149.2" y="355.0" width="4.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.2" y="366.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.12%)</title><rect x="1153.3" y="371.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.3" y="382.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.12%)</title><rect x="1153.3" y="355.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.3" y="366.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.12%)</title><rect x="1154.6" y="371.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.6" y="382.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1154.6" y="355.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1157.6" y="366.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.23%)</title><rect x="1156.0" y="371.0" width="2.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.0" y="382.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1158.7" y="371.0" width="1.4" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1161.7" y="382.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1160.1" y="371.0" width="1.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1163.1" y="382.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 1.85%)</title><rect x="1161.4" y="403.0" width="21.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1164.4" y="414.0">C..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.12%)</title><rect x="1161.4" y="387.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.4" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.12%)</title><rect x="1161.4" y="371.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.4" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1161.4" y="355.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.4" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (12 samples, 1.38%)</title><rect x="1162.8" y="387.0" width="16.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.8" y="398.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.12%)</title><rect x="1162.8" y="371.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.8" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.23%)</title><rect x="1164.1" y="371.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.1" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.12%)</title><rect x="1165.5" y="355.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1168.5" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.12%)</title><rect x="1165.5" y="339.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1168.5" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (8 samples, 0.92%)</title><rect x="1166.9" y="371.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.9" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.69%)</title><rect x="1169.6" y="355.0" width="8.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.6" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.12%)</title><rect x="1169.6" y="339.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.6" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.58%)</title><rect x="1170.9" y="339.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.9" y="350.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.12%)</title><rect x="1176.4" y="323.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.4" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1177.8" y="371.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.8" y="382.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.12%)</title><rect x="1177.8" y="355.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.8" y="366.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.12%)</title><rect x="1177.8" y="339.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.35%)</title><rect x="1179.1" y="387.0" width="4.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="398.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.35%)</title><rect x="1179.1" y="371.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="382.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.23%)</title><rect x="1179.1" y="355.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.1" y="366.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.12%)</title><rect x="1179.1" y="339.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.1" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.12%)</title><rect x="1180.5" y="339.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.5" y="350.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.12%)</title><rect x="1180.5" y="323.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.5" y="334.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1181.8" y="355.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1183.2" y="403.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1183.2" y="387.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1183.2" y="371.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1183.2" y="355.0" width="2.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1183.2" y="339.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1183.2" y="323.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1183.2" y="307.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1183.2" y="291.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1183.2" y="275.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1183.2" y="259.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1183.2" y="243.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1183.2" y="227.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="238.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1183.2" y="211.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1183.2" y="195.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1183.2" y="179.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1183.2" y="163.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1183.2" y="147.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1183.2" y="131.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.2" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1183.2" y="115.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1183.2" y="99.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1183.2" y="83.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.12%)</title><rect x="1183.2" y="67.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="78.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1183.2" y="51.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="62.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1183.2" y="35.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.12%)</title><rect x="1184.6" y="323.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="334.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.12%)</title><rect x="1184.6" y="307.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.6" y="318.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.12%)</title><rect x="1184.6" y="291.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="302.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1184.6" y="275.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="286.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1184.6" y="259.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.6" y="270.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1184.6" y="243.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.6" y="254.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.12%)</title><rect x="1184.6" y="227.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.6" y="238.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.12%)</title><rect x="1185.9" y="403.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="414.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.12%)</title><rect x="1185.9" y="387.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="398.0"></text>
</g>
<g>
<title>VMThread::run() (2 samples, 0.23%)</title><rect x="1187.3" y="499.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.3" y="510.0"></text>
</g>
<g>
<title>VMThread::loop() (2 samples, 0.23%)</title><rect x="1187.3" y="483.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.3" y="494.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.12%)</title><rect x="1187.3" y="467.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="478.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.12%)</title><rect x="1187.3" y="451.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.3" y="462.0"></text>
</g>
<g>
<title>NMethodSweeper::mark_active_nmethods() (1 samples, 0.12%)</title><rect x="1187.3" y="435.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.3" y="446.0"></text>
</g>
<g>
<title>Threads::nmethods_do(CodeBlobClosure*) (1 samples, 0.12%)</title><rect x="1187.3" y="419.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="430.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.12%)</title><rect x="1187.3" y="403.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.3" y="414.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1187.3" y="387.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="398.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.12%)</title><rect x="1187.3" y="371.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="382.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.12%)</title><rect x="1188.6" y="467.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="478.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.12%)</title><rect x="1188.6" y="451.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="462.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.12%)</title><rect x="1188.6" y="435.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.6" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.12%)</title><rect x="1188.6" y="419.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.6" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.12%)</title><rect x="1188.6" y="403.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="414.0"></text>
</g>
<g>
<title>G1RemSet::prepare_for_oops_into_collection_set_do() (1 samples, 0.12%)</title><rect x="1188.6" y="387.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.6" y="398.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::concatenate_logs() (1 samples, 0.12%)</title><rect x="1188.6" y="371.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.6" y="382.0"></text>
</g>
</g>
</svg>
