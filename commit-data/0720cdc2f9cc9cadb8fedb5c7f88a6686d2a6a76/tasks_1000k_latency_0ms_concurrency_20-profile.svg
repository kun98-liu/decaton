<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="773"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="773"> </text>
<g id="frames">
<g>
<title>all (1,045 samples, 100.00%)</title><rect x="10.0" y="739.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="750.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.10%)</title><rect x="10.0" y="723.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (274 samples, 26.22%)</title><rect x="11.1" y="723.0" width="309.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="734.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (274 samples, 26.22%)</title><rect x="11.1" y="707.0" width="309.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="14.1" y="718.0">com/linecorp/decaton/processor/runtime/Pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (273 samples, 26.12%)</title><rect x="12.3" y="691.0" width="308.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="702.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.10%)</title><rect x="12.3" y="675.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.3" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.10%)</title><rect x="12.3" y="659.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="12.3" y="643.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="12.3" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="12.3" y="611.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="12.3" y="595.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.10%)</title><rect x="12.3" y="579.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3.opWrapSink (1 samples, 0.10%)</title><rect x="12.3" y="563.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$3$1.&lt;init&gt; (1 samples, 0.10%)</title><rect x="12.3" y="547.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="558.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.10%)</title><rect x="12.3" y="531.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="15.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.10%)</title><rect x="12.3" y="515.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.10%)</title><rect x="13.4" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.4" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="13.4" y="659.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.10%)</title><rect x="13.4" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.4" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="13.4" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.4" y="638.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.10%)</title><rect x="13.4" y="611.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.4" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.67%)</title><rect x="14.5" y="675.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="17.5" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.67%)</title><rect x="14.5" y="659.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.67%)</title><rect x="14.5" y="643.0" width="7.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="17.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$271/1379490540.accept (7 samples, 0.67%)</title><rect x="14.5" y="627.0" width="7.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="17.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.67%)</title><rect x="14.5" y="611.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="17.5" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.67%)</title><rect x="14.5" y="595.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.5" y="606.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.57%)</title><rect x="14.5" y="579.0" width="6.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.5" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="20.2" y="563.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.2" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="20.2" y="547.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="20.2" y="531.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="20.2" y="515.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="23.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetStateReaper.maybeReapOffset (1 samples, 0.10%)</title><rect x="21.3" y="579.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.3" y="590.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.10%)</title><rect x="21.3" y="563.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.3" y="574.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (201 samples, 19.23%)</title><rect x="22.4" y="675.0" width="227.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="25.4" y="686.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$270/1353122448.accept (190 samples, 18.18%)</title><rect x="23.6" y="659.0" width="214.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="670.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (190 samples, 18.18%)</title><rect x="23.6" y="643.0" width="214.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.6" y="654.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (177 samples, 16.94%)</title><rect x="23.6" y="627.0" width="199.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.6" y="638.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (177 samples, 16.94%)</title><rect x="23.6" y="611.0" width="199.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.6" y="622.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (177 samples, 16.94%)</title><rect x="23.6" y="595.0" width="199.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.6" y="606.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (177 samples, 16.94%)</title><rect x="23.6" y="579.0" width="199.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.6" y="590.0">java/util/concurrent/Execu..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (177 samples, 16.94%)</title><rect x="23.6" y="563.0" width="199.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.6" y="574.0">java/util/concurrent/Threa..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (177 samples, 16.94%)</title><rect x="23.6" y="547.0" width="199.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.6" y="558.0">java/util/concurrent/Linke..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (128 samples, 12.25%)</title><rect x="73.2" y="531.0" width="144.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="76.2" y="542.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.58%)</title><rect x="74.4" y="515.0" width="30.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="77.4" y="526.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.58%)</title><rect x="74.4" y="499.0" width="30.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.4" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (27 samples, 2.58%)</title><rect x="74.4" y="483.0" width="30.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="77.4" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.86%)</title><rect x="104.9" y="515.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="107.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (9 samples, 0.86%)</title><rect x="104.9" y="499.0" width="10.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="107.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="108.2" y="483.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="111.2" y="494.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="108.2" y="467.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="111.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.48%)</title><rect x="109.4" y="483.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.4" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (91 samples, 8.71%)</title><rect x="115.0" y="515.0" width="102.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="118.0" y="526.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (91 samples, 8.71%)</title><rect x="115.0" y="499.0" width="102.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="118.0" y="510.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (91 samples, 8.71%)</title><rect x="115.0" y="483.0" width="102.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.0" y="494.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (91 samples, 8.71%)</title><rect x="115.0" y="467.0" width="102.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="118.0" y="478.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (90 samples, 8.61%)</title><rect x="116.1" y="451.0" width="101.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.1" y="462.0">sun/misc/Uns..</text>
</g>
<g>
<title>Unsafe_Unpark (80 samples, 7.66%)</title><rect x="116.1" y="435.0" width="90.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="119.1" y="446.0">Unsafe_Unp..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.19%)</title><rect x="117.3" y="419.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="120.3" y="430.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="119.5" y="419.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="122.5" y="430.0"></text>
</g>
<g>
<title>__pthread_cond_signal (62 samples, 5.93%)</title><rect x="120.7" y="419.0" width="70.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="123.7" y="430.0">__pthrea..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (1 samples, 0.10%)</title><rect x="190.7" y="419.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="193.7" y="430.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.24%)</title><rect x="191.8" y="419.0" width="14.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="194.8" y="430.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.77%)</title><rect x="206.5" y="435.0" width="9.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="209.5" y="446.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.19%)</title><rect x="215.5" y="435.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="218.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.38%)</title><rect x="217.8" y="531.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="220.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (4 samples, 0.38%)</title><rect x="217.8" y="515.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="220.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.38%)</title><rect x="217.8" y="499.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.8" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="222.3" y="531.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="222.3" y="515.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.10%)</title><rect x="222.3" y="499.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="222.3" y="483.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 0.96%)</title><rect x="223.4" y="627.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="226.4" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 0.96%)</title><rect x="223.4" y="611.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="226.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="232.4" y="595.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="235.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="232.4" y="579.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="235.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.19%)</title><rect x="232.4" y="563.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="235.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="232.4" y="547.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="235.4" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="232.4" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="235.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::flush_deferred_store_barrier(JavaThread*) (1 samples, 0.10%)</title><rect x="232.4" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="235.4" y="526.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::write_region_work(MemRegion) (1 samples, 0.10%)</title><rect x="232.4" y="499.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="235.4" y="510.0"></text>
</g>
<g>
<title>G1SATBCardTableLoggingModRefBS::invalidate(MemRegion, bool) (1 samples, 0.10%)</title><rect x="232.4" y="483.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="235.4" y="494.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (1 samples, 0.10%)</title><rect x="232.4" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="235.4" y="478.0"></text>
</g>
<g>
<title>PtrQueueSet::allocate_buffer() (1 samples, 0.10%)</title><rect x="232.4" y="451.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="235.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.10%)</title><rect x="233.6" y="547.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="236.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="233.6" y="531.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.6" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.10%)</title><rect x="234.7" y="627.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="237.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="234.7" y="611.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="237.7" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="234.7" y="595.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="237.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="235.8" y="627.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.19%)</title><rect x="235.8" y="611.0" width="2.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.19%)</title><rect x="235.8" y="595.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.19%)</title><rect x="235.8" y="579.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.8" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.19%)</title><rect x="235.8" y="563.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="238.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (9 samples, 0.86%)</title><rect x="238.1" y="659.0" width="10.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (9 samples, 0.86%)</title><rect x="238.1" y="643.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="241.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.86%)</title><rect x="238.1" y="627.0" width="10.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (9 samples, 0.86%)</title><rect x="238.1" y="611.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="241.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.10%)</title><rect x="248.3" y="659.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.10%)</title><rect x="248.3" y="643.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="251.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (63 samples, 6.03%)</title><rect x="249.4" y="675.0" width="71.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="252.4" y="686.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (63 samples, 6.03%)</title><rect x="249.4" y="659.0" width="71.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="252.4" y="670.0">org/apac..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (42 samples, 4.02%)</title><rect x="249.4" y="643.0" width="47.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="252.4" y="654.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.10%)</title><rect x="249.4" y="627.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="252.4" y="638.0"></text>
</g>
<g>
<title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.10%)</title><rect x="249.4" y="611.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="252.4" y="622.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="249.4" y="595.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (41 samples, 3.92%)</title><rect x="250.5" y="627.0" width="46.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.5" y="638.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (41 samples, 3.92%)</title><rect x="250.5" y="611.0" width="46.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="253.5" y="622.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (34 samples, 3.25%)</title><rect x="251.6" y="595.0" width="38.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.6" y="606.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (34 samples, 3.25%)</title><rect x="251.6" y="579.0" width="38.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="254.6" y="590.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.19%)</title><rect x="255.0" y="563.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.0" y="574.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureCapacityInternal (2 samples, 0.19%)</title><rect x="255.0" y="547.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.0" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.ensureExplicitCapacity (2 samples, 0.19%)</title><rect x="255.0" y="531.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.0" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (2 samples, 0.19%)</title><rect x="255.0" y="515.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="258.0" y="526.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.19%)</title><rect x="255.0" y="499.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="258.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (14 samples, 1.34%)</title><rect x="257.3" y="563.0" width="15.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="260.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (7 samples, 0.67%)</title><rect x="265.2" y="547.0" width="7.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (7 samples, 0.67%)</title><rect x="265.2" y="531.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (7 samples, 0.67%)</title><rect x="265.2" y="515.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (7 samples, 0.67%)</title><rect x="265.2" y="499.0" width="7.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (7 samples, 0.67%)</title><rect x="265.2" y="483.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (7 samples, 0.67%)</title><rect x="265.2" y="467.0" width="7.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (7 samples, 0.67%)</title><rect x="265.2" y="451.0" width="7.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="268.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3500 (15 samples, 1.44%)</title><rect x="273.1" y="563.0" width="16.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="276.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (15 samples, 1.44%)</title><rect x="273.1" y="547.0" width="16.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="276.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/header/internals/RecordHeaders.&lt;init&gt; (15 samples, 1.44%)</title><rect x="273.1" y="531.0" width="16.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="276.1" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (15 samples, 1.44%)</title><rect x="273.1" y="515.0" width="16.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="276.1" y="526.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (12 samples, 1.15%)</title><rect x="276.5" y="499.0" width="13.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="279.5" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="286.7" y="483.0" width="3.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="289.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.10%)</title><rect x="290.0" y="595.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.10%)</title><rect x="290.0" y="579.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="293.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="290.0" y="563.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="293.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="290.0" y="547.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="293.0" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="290.0" y="531.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="293.0" y="542.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="290.0" y="515.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="293.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2000 (5 samples, 0.48%)</title><rect x="291.2" y="595.0" width="5.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="294.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (5 samples, 0.48%)</title><rect x="291.2" y="579.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.2" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.19%)</title><rect x="291.2" y="563.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.19%)</title><rect x="291.2" y="547.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.2" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="292.3" y="531.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="295.3" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.29%)</title><rect x="293.4" y="563.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (3 samples, 0.29%)</title><rect x="293.4" y="547.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="296.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="294.6" y="531.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (6 samples, 0.57%)</title><rect x="296.8" y="643.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (6 samples, 0.57%)</title><rect x="296.8" y="627.0" width="6.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="299.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (6 samples, 0.57%)</title><rect x="296.8" y="611.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="299.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 0.29%)</title><rect x="296.8" y="595.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="299.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$238/262593772.accept (3 samples, 0.29%)</title><rect x="296.8" y="579.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="299.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$validateOffsetsIfNeeded$1 (3 samples, 0.29%)</title><rect x="296.8" y="563.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeValidatePositionForCurrentLeader (3 samples, 0.29%)</title><rect x="296.8" y="547.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="299.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.access$500 (2 samples, 0.19%)</title><rect x="296.8" y="531.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="299.8" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$TopicPartitionState.maybeValidatePosition (2 samples, 0.19%)</title><rect x="296.8" y="515.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="299.8" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.equals (1 samples, 0.10%)</title><rect x="296.8" y="499.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="299.8" y="510.0"></text>
</g>
<g>
<title>java/util/Optional.equals (1 samples, 0.10%)</title><rect x="296.8" y="483.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="299.8" y="494.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.10%)</title><rect x="296.8" y="467.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="299.8" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="297.9" y="499.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="300.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedState (1 samples, 0.10%)</title><rect x="299.1" y="531.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="302.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.10%)</title><rect x="299.1" y="515.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.1" y="526.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.10%)</title><rect x="299.1" y="499.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="302.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="299.1" y="483.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="302.1" y="494.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="300.2" y="595.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.2" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="300.2" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.2" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="300.2" y="563.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="303.2" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="300.2" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="300.2" y="531.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.10%)</title><rect x="300.2" y="515.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="301.3" y="595.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.3" y="606.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (1 samples, 0.10%)</title><rect x="301.3" y="579.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="304.3" y="590.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (1 samples, 0.10%)</title><rect x="301.3" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.3" y="574.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.10%)</title><rect x="301.3" y="547.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.10%)</title><rect x="301.3" y="531.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="304.3" y="542.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeyIterator.next (1 samples, 0.10%)</title><rect x="301.3" y="515.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.3" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.10%)</title><rect x="302.5" y="595.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="305.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.10%)</title><rect x="302.5" y="579.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="305.5" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="302.5" y="563.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="305.5" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="302.5" y="547.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="305.5" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="302.5" y="531.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="305.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.19%)</title><rect x="303.6" y="643.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="306.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.10%)</title><rect x="303.6" y="627.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="306.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.10%)</title><rect x="303.6" y="611.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.10%)</title><rect x="303.6" y="595.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="306.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (1 samples, 0.10%)</title><rect x="303.6" y="579.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="306.6" y="590.0"></text>
</g>
<g>
<title>java/lang/Thread.currentThread (1 samples, 0.10%)</title><rect x="303.6" y="563.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.6" y="574.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.10%)</title><rect x="303.6" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="306.6" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="304.7" y="627.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="307.7" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="304.7" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="307.7" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="304.7" y="595.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="307.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="304.7" y="579.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (9 samples, 0.86%)</title><rect x="305.8" y="643.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="308.8" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (9 samples, 0.86%)</title><rect x="305.8" y="627.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (2 samples, 0.19%)</title><rect x="305.8" y="611.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (2 samples, 0.19%)</title><rect x="305.8" y="595.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (2 samples, 0.19%)</title><rect x="305.8" y="579.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="308.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="307.0" y="563.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="310.0" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/ArrayOf.read (1 samples, 0.10%)</title><rect x="307.0" y="547.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="307.0" y="531.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.0" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.10%)</title><rect x="307.0" y="515.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.0" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.10%)</title><rect x="307.0" y="499.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.0" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$8.read (1 samples, 0.10%)</title><rect x="307.0" y="483.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="307.0" y="467.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="310.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.10%)</title><rect x="307.0" y="451.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.0" y="462.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="307.0" y="435.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="310.0" y="446.0"></text>
</g>
<g>
<title>java/lang/StringCoding.decode (1 samples, 0.10%)</title><rect x="307.0" y="419.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="310.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (7 samples, 0.67%)</title><rect x="308.1" y="611.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="311.1" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="308.1" y="595.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="311.1" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.19%)</title><rect x="308.1" y="579.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="311.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.10%)</title><rect x="308.1" y="563.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="311.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.10%)</title><rect x="309.2" y="563.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.10%)</title><rect x="309.2" y="547.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="309.2" y="531.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="309.2" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/WindowedSum.update (1 samples, 0.10%)</title><rect x="309.2" y="499.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.2" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.38%)</title><rect x="310.4" y="595.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="313.4" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/410654129.linkToTargetMethod (1 samples, 0.10%)</title><rect x="310.4" y="579.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="313.4" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1669455896.invokeStatic_JJ_L (1 samples, 0.10%)</title><rect x="310.4" y="563.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="313.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$$Lambda$91/2085412232.get$Lambda (1 samples, 0.10%)</title><rect x="310.4" y="547.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="313.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (3 samples, 0.29%)</title><rect x="311.5" y="579.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="314.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (3 samples, 0.29%)</title><rect x="311.5" y="563.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (3 samples, 0.29%)</title><rect x="311.5" y="547.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="314.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (3 samples, 0.29%)</title><rect x="311.5" y="531.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="314.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (3 samples, 0.29%)</title><rect x="311.5" y="515.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.5" y="526.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.29%)</title><rect x="311.5" y="499.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="314.5" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="311.5" y="483.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="314.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.19%)</title><rect x="312.6" y="483.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="315.6" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.10%)</title><rect x="312.6" y="467.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="315.6" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.10%)</title><rect x="312.6" y="451.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="315.6" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.10%)</title><rect x="312.6" y="435.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="315.6" y="446.0"></text>
</g>
<g>
<title>__read (1 samples, 0.10%)</title><rect x="312.6" y="419.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="315.6" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.10%)</title><rect x="313.8" y="467.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="316.8" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="313.8" y="451.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="316.8" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.10%)</title><rect x="313.8" y="435.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.8" y="446.0"></text>
</g>
<g>
<title>sun/nio/ch/Util$1.initialValue (1 samples, 0.10%)</title><rect x="313.8" y="419.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="316.8" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.10%)</title><rect x="314.9" y="595.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.10%)</title><rect x="314.9" y="579.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.10%)</title><rect x="314.9" y="563.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.9" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.10%)</title><rect x="314.9" y="547.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="317.9" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.10%)</title><rect x="314.9" y="531.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="317.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.29%)</title><rect x="316.0" y="643.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="319.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.29%)</title><rect x="316.0" y="627.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="319.0" y="638.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (1 samples, 0.10%)</title><rect x="316.0" y="611.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="319.0" y="622.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="316.0" y="595.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="319.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="317.1" y="611.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.10%)</title><rect x="317.1" y="595.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="320.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.10%)</title><rect x="317.1" y="579.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="320.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedPartitions (1 samples, 0.10%)</title><rect x="318.3" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="321.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.10%)</title><rect x="319.4" y="643.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="322.4" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="319.4" y="627.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="322.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="319.4" y="611.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="322.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="319.4" y="595.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="322.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="319.4" y="579.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="319.4" y="563.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.4" y="574.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="319.4" y="547.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="322.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Thread.run (710 samples, 67.94%)</title><rect x="320.5" y="723.0" width="801.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.5" y="734.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (710 samples, 67.94%)</title><rect x="320.5" y="707.0" width="801.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.5" y="718.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (710 samples, 67.94%)</title><rect x="320.5" y="691.0" width="801.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.5" y="702.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/302039048.run (496 samples, 47.46%)</title><rect x="325.0" y="675.0" width="560.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.0" y="686.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/3020..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (495 samples, 47.37%)</title><rect x="326.2" y="659.0" width="558.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.2" y="670.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (495 samples, 47.37%)</title><rect x="326.2" y="643.0" width="558.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.2" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (495 samples, 47.37%)</title><rect x="326.2" y="627.0" width="558.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.2" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenP..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="330.7" y="611.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="333.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.86%)</title><rect x="331.8" y="611.0" width="10.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="334.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.86%)</title><rect x="331.8" y="595.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.86%)</title><rect x="331.8" y="579.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="334.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.86%)</title><rect x="331.8" y="563.0" width="10.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="334.8" y="574.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.67%)</title><rect x="334.1" y="547.0" width="7.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="337.1" y="558.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.67%)</title><rect x="334.1" y="531.0" width="7.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="337.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (53 samples, 5.07%)</title><rect x="342.0" y="611.0" width="59.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="345.0" y="622.0">com/li..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.10%)</title><rect x="354.4" y="595.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.4" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.10%)</title><rect x="354.4" y="579.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="357.4" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1041928940.get$Lambda (1 samples, 0.10%)</title><rect x="354.4" y="563.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.4" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="354.4" y="547.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="357.4" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="354.4" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="357.4" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="354.4" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="357.4" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (41 samples, 3.92%)</title><rect x="355.5" y="595.0" width="46.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="358.5" y="606.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (41 samples, 3.92%)</title><rect x="355.5" y="579.0" width="46.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="358.5" y="590.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (41 samples, 3.92%)</title><rect x="355.5" y="563.0" width="46.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.5" y="574.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.57%)</title><rect x="355.5" y="547.0" width="6.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="358.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.57%)</title><rect x="355.5" y="531.0" width="6.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (6 samples, 0.57%)</title><rect x="355.5" y="515.0" width="6.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="358.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1041928940.accept (5 samples, 0.48%)</title><rect x="355.5" y="499.0" width="5.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="358.5" y="510.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="361.2" y="499.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="364.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (35 samples, 3.35%)</title><rect x="362.3" y="547.0" width="39.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="365.3" y="558.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$297/1041928940.accept (35 samples, 3.35%)</title><rect x="362.3" y="531.0" width="39.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.3" y="542.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (35 samples, 3.35%)</title><rect x="362.3" y="515.0" width="39.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.3" y="526.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (35 samples, 3.35%)</title><rect x="362.3" y="499.0" width="39.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="365.3" y="510.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (35 samples, 3.35%)</title><rect x="362.3" y="483.0" width="39.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="365.3" y="494.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (33 samples, 3.16%)</title><rect x="364.6" y="467.0" width="37.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="367.6" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (11 samples, 1.05%)</title><rect x="364.6" y="451.0" width="12.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="367.6" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (11 samples, 1.05%)</title><rect x="364.6" y="435.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/165941758.accept (6 samples, 0.57%)</title><rect x="370.2" y="419.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="373.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 2.11%)</title><rect x="377.0" y="451.0" width="24.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.0" y="462.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$288/165941758.accept (1 samples, 0.10%)</title><rect x="398.4" y="435.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.4" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.lambda$receive$85 (1 samples, 0.10%)</title><rect x="398.4" y="419.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="401.4" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/659321748.accept (2 samples, 0.19%)</title><rect x="399.6" y="435.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="402.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (123 samples, 11.77%)</title><rect x="401.8" y="611.0" width="138.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="404.8" y="622.0">com/linecorp/deca..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.19%)</title><rect x="404.1" y="595.0" width="2.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="407.1" y="606.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.19%)</title><rect x="404.1" y="579.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="407.1" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.77%)</title><rect x="406.3" y="595.0" width="9.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="409.3" y="606.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 0.77%)</title><rect x="406.3" y="579.0" width="9.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="409.3" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (111 samples, 10.62%)</title><rect x="415.4" y="595.0" width="125.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.4" y="606.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (111 samples, 10.62%)</title><rect x="415.4" y="579.0" width="125.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="418.4" y="590.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="415.4" y="563.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="418.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (110 samples, 10.53%)</title><rect x="416.5" y="563.0" width="124.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="419.5" y="574.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (110 samples, 10.53%)</title><rect x="416.5" y="547.0" width="124.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="419.5" y="558.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (110 samples, 10.53%)</title><rect x="416.5" y="531.0" width="124.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="419.5" y="542.0">com/fasterxml/j..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="416.5" y="515.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="419.5" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="416.5" y="499.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="419.5" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="416.5" y="483.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="419.5" y="494.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="416.5" y="467.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="419.5" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="416.5" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="419.5" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="416.5" y="435.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="419.5" y="446.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="416.5" y="419.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="419.5" y="430.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="416.5" y="403.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="419.5" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="416.5" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="419.5" y="398.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.10%)</title><rect x="416.5" y="371.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="419.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (31 samples, 2.97%)</title><rect x="417.6" y="515.0" width="35.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.6" y="526.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (12 samples, 1.15%)</title><rect x="417.6" y="499.0" width="13.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.6" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (12 samples, 1.15%)</title><rect x="417.6" y="483.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="420.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (12 samples, 1.15%)</title><rect x="417.6" y="467.0" width="13.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.6" y="478.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (12 samples, 1.15%)</title><rect x="417.6" y="451.0" width="13.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.6" y="462.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (5 samples, 0.48%)</title><rect x="424.4" y="435.0" width="5.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="427.4" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReferenceArray.set (1 samples, 0.10%)</title><rect x="430.1" y="435.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="433.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (19 samples, 1.82%)</title><rect x="431.2" y="499.0" width="21.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="434.2" y="510.0">c..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="431.2" y="483.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="434.2" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="431.2" y="467.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="434.2" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="431.2" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="434.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="431.2" y="435.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="434.2" y="446.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="431.2" y="419.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="434.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (18 samples, 1.72%)</title><rect x="432.3" y="483.0" width="20.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="435.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (4 samples, 0.38%)</title><rect x="432.3" y="467.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (4 samples, 0.38%)</title><rect x="432.3" y="451.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="435.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (13 samples, 1.24%)</title><rect x="436.8" y="467.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="439.8" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (13 samples, 1.24%)</title><rect x="436.8" y="451.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="439.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (4 samples, 0.38%)</title><rect x="436.8" y="435.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="439.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (3 samples, 0.29%)</title><rect x="441.3" y="435.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (2 samples, 0.19%)</title><rect x="442.5" y="419.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="445.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (6 samples, 0.57%)</title><rect x="444.7" y="435.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="447.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="445.9" y="419.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (3 samples, 0.29%)</title><rect x="448.1" y="419.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="451.1" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.10%)</title><rect x="451.5" y="467.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="454.5" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="451.5" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="454.5" y="462.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="451.5" y="435.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="454.5" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="451.5" y="419.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="454.5" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="451.5" y="403.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="454.5" y="414.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="451.5" y="387.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="454.5" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.10%)</title><rect x="451.5" y="371.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="454.5" y="382.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="451.5" y="355.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="454.5" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="451.5" y="339.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="454.5" y="350.0"></text>
</g>
<g>
<title>G1CollectorPolicy::predict_region_elapsed_time_ms(HeapRegion*, bool) (1 samples, 0.10%)</title><rect x="451.5" y="323.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="454.5" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (63 samples, 6.03%)</title><rect x="452.6" y="515.0" width="71.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="455.6" y="526.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (2 samples, 0.19%)</title><rect x="452.6" y="499.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="455.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.19%)</title><rect x="452.6" y="483.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="455.6" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (8 samples, 0.77%)</title><rect x="454.9" y="499.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="457.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.77%)</title><rect x="454.9" y="483.0" width="9.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.9" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.10%)</title><rect x="454.9" y="467.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="457.9" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (5 samples, 0.48%)</title><rect x="456.0" y="467.0" width="5.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="459.0" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (5 samples, 0.48%)</title><rect x="456.0" y="451.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="459.0" y="462.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_tlab_store_barriers() const (1 samples, 0.10%)</title><rect x="459.4" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="462.4" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="460.5" y="435.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="463.5" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="460.5" y="419.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="463.5" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="460.5" y="403.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="463.5" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="460.5" y="387.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="463.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.19%)</title><rect x="461.7" y="467.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.7" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (2 samples, 0.19%)</title><rect x="461.7" y="451.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="464.7" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.10%)</title><rect x="462.8" y="435.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.8" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.29%)</title><rect x="463.9" y="499.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.29%)</title><rect x="463.9" y="483.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.9" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="463.9" y="467.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="466.9" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="463.9" y="451.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="466.9" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="465.1" y="467.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="468.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (2 samples, 0.19%)</title><rect x="465.1" y="451.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="468.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="466.2" y="435.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="469.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (50 samples, 4.78%)</title><rect x="467.3" y="499.0" width="56.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="470.3" y="510.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (50 samples, 4.78%)</title><rect x="467.3" y="483.0" width="56.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.3" y="494.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (16 samples, 1.53%)</title><rect x="468.4" y="467.0" width="18.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.4" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.38%)</title><rect x="469.6" y="451.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="472.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.38%)</title><rect x="469.6" y="435.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.38%)</title><rect x="469.6" y="419.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="472.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (4 samples, 0.38%)</title><rect x="469.6" y="403.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="472.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (3 samples, 0.29%)</title><rect x="470.7" y="387.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="473.7" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (10 samples, 0.96%)</title><rect x="474.1" y="451.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="477.1" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (7 samples, 0.67%)</title><rect x="474.1" y="435.0" width="7.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="477.1" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.29%)</title><rect x="482.0" y="435.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.0" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.29%)</title><rect x="482.0" y="419.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.0" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.19%)</title><rect x="483.1" y="403.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="486.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.19%)</title><rect x="483.1" y="387.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.1" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="485.4" y="451.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="488.4" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="485.4" y="435.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="488.4" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (33 samples, 3.16%)</title><rect x="486.5" y="467.0" width="37.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="489.5" y="478.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (33 samples, 3.16%)</title><rect x="486.5" y="451.0" width="37.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="489.5" y="462.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (32 samples, 3.06%)</title><rect x="487.6" y="435.0" width="36.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="490.6" y="446.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 0.96%)</title><rect x="489.9" y="419.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="492.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (4 samples, 0.38%)</title><rect x="489.9" y="403.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="492.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.38%)</title><rect x="494.4" y="403.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="497.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.38%)</title><rect x="494.4" y="387.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.38%)</title><rect x="494.4" y="371.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="497.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (2 samples, 0.19%)</title><rect x="494.4" y="355.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="497.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.19%)</title><rect x="496.7" y="355.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="499.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="498.9" y="403.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="501.9" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="498.9" y="387.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="501.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.10%)</title><rect x="500.1" y="403.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="503.1" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.77%)</title><rect x="501.2" y="419.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.67%)</title><rect x="502.3" y="403.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.67%)</title><rect x="502.3" y="387.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="505.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (7 samples, 0.67%)</title><rect x="502.3" y="371.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="505.3" y="382.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (7 samples, 0.67%)</title><rect x="502.3" y="355.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="505.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.10%)</title><rect x="510.2" y="419.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="513.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (9 samples, 0.86%)</title><rect x="511.4" y="419.0" width="10.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.4" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (9 samples, 0.86%)</title><rect x="511.4" y="403.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (9 samples, 0.86%)</title><rect x="511.4" y="387.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (9 samples, 0.86%)</title><rect x="511.4" y="371.0" width="10.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="514.4" y="382.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (9 samples, 0.86%)</title><rect x="511.4" y="355.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="514.4" y="366.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (7 samples, 0.67%)</title><rect x="513.6" y="339.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="516.6" y="350.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.10%)</title><rect x="520.4" y="323.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="523.4" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.19%)</title><rect x="521.5" y="419.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="524.5" y="430.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.19%)</title><rect x="521.5" y="403.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="524.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.19%)</title><rect x="521.5" y="387.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="524.5" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (15 samples, 1.44%)</title><rect x="523.8" y="515.0" width="16.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="526.8" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (15 samples, 1.44%)</title><rect x="523.8" y="499.0" width="16.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="526.8" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (15 samples, 1.44%)</title><rect x="523.8" y="483.0" width="16.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="526.8" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (15 samples, 1.44%)</title><rect x="523.8" y="467.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="526.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (15 samples, 1.44%)</title><rect x="523.8" y="451.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="526.8" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="539.6" y="435.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="542.6" y="446.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (302 samples, 28.90%)</title><rect x="540.7" y="611.0" width="341.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="543.7" y="622.0">com/linecorp/decaton/processor/runtime/interna..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.48%)</title><rect x="549.8" y="595.0" width="5.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="552.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="550.9" y="579.0" width="4.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="553.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (36 samples, 3.44%)</title><rect x="555.4" y="595.0" width="40.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="558.4" y="606.0">com..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (36 samples, 3.44%)</title><rect x="555.4" y="579.0" width="40.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.4" y="590.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (33 samples, 3.16%)</title><rect x="558.8" y="563.0" width="37.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="561.8" y="574.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 0.38%)</title><rect x="559.9" y="547.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="562.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 0.38%)</title><rect x="559.9" y="531.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="562.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 0.38%)</title><rect x="559.9" y="515.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="562.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 0.38%)</title><rect x="559.9" y="499.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="562.9" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="564.4" y="547.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="567.4" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="564.4" y="531.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.4" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="564.4" y="515.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="567.4" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.19%)</title><rect x="564.4" y="499.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.4" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (26 samples, 2.49%)</title><rect x="566.7" y="547.0" width="29.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="569.7" y="558.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (20 samples, 1.91%)</title><rect x="573.5" y="531.0" width="22.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="576.5" y="542.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 0.29%)</title><rect x="592.7" y="515.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="595.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="596.0" y="595.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="599.0" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="596.0" y="579.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (174 samples, 16.65%)</title><rect x="597.2" y="595.0" width="196.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="600.2" y="606.0">com/linecorp/decaton/proce..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="597.2" y="579.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="600.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="597.2" y="563.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="600.2" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.10%)</title><rect x="597.2" y="547.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="600.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (165 samples, 15.79%)</title><rect x="598.3" y="579.0" width="186.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="601.3" y="590.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (59 samples, 5.65%)</title><rect x="609.6" y="563.0" width="66.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="612.6" y="574.0">com/lin..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (41 samples, 3.92%)</title><rect x="620.9" y="547.0" width="46.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.9" y="558.0">java..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (27 samples, 2.58%)</title><rect x="628.8" y="531.0" width="30.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="631.8" y="542.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="635.6" y="515.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.6" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.67%)</title><rect x="636.7" y="515.0" width="7.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="639.7" y="526.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (7 samples, 0.67%)</title><rect x="636.7" y="499.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="639.7" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.67%)</title><rect x="636.7" y="483.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="639.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (7 samples, 0.67%)</title><rect x="636.7" y="467.0" width="7.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="639.7" y="478.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.10%)</title><rect x="636.7" y="451.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="639.7" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.29%)</title><rect x="637.8" y="451.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="640.8" y="462.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="637.8" y="435.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="640.8" y="446.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.19%)</title><rect x="639.0" y="435.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="642.0" y="446.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="640.1" y="419.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="643.1" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.29%)</title><rect x="641.2" y="451.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="644.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="642.3" y="435.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="645.3" y="446.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="642.3" y="419.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="645.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.10%)</title><rect x="642.3" y="403.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="645.3" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="643.5" y="435.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="646.5" y="446.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.57%)</title><rect x="644.6" y="515.0" width="6.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.6" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="651.4" y="515.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="654.4" y="526.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (4 samples, 0.38%)</title><rect x="654.8" y="515.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="657.8" y="526.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.19%)</title><rect x="659.3" y="531.0" width="2.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="662.3" y="542.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (5 samples, 0.48%)</title><rect x="661.5" y="531.0" width="5.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="664.5" y="542.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="667.2" y="547.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.2" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.10%)</title><rect x="667.2" y="531.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="670.2" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="667.2" y="515.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.2" y="526.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.10%)</title><rect x="667.2" y="499.0" width="1.1" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="670.2" y="510.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.67%)</title><rect x="668.3" y="547.0" width="7.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="671.3" y="558.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (7 samples, 0.67%)</title><rect x="676.2" y="563.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="679.2" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.10%)</title><rect x="676.2" y="547.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="679.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.10%)</title><rect x="676.2" y="531.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="679.2" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.10%)</title><rect x="676.2" y="515.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.2" y="526.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.57%)</title><rect x="677.3" y="547.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.3" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="677.3" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="680.3" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="677.3" y="515.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="680.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.10%)</title><rect x="677.3" y="499.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="680.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (5 samples, 0.48%)</title><rect x="678.5" y="531.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="681.5" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (89 samples, 8.52%)</title><rect x="684.1" y="563.0" width="100.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="687.1" y="574.0">org/slf4j/MD..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (85 samples, 8.13%)</title><rect x="688.6" y="547.0" width="96.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="691.6" y="558.0">ch/qos/logb..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (8 samples, 0.77%)</title><rect x="688.6" y="531.0" width="9.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (8 samples, 0.77%)</title><rect x="688.6" y="515.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="691.6" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (8 samples, 0.77%)</title><rect x="688.6" y="499.0" width="9.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="691.6" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (8 samples, 0.77%)</title><rect x="688.6" y="483.0" width="9.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="691.6" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.19%)</title><rect x="697.7" y="531.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="700.7" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.19%)</title><rect x="697.7" y="515.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="700.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.19%)</title><rect x="697.7" y="499.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="700.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.19%)</title><rect x="697.7" y="483.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="700.7" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (75 samples, 7.18%)</title><rect x="699.9" y="531.0" width="84.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="702.9" y="542.0">java/util/..</text>
</g>
<g>
<title>java/util/HashMap.put (71 samples, 6.79%)</title><rect x="704.4" y="515.0" width="80.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="707.4" y="526.0">java/util..</text>
</g>
<g>
<title>java/util/HashMap.putVal (36 samples, 3.44%)</title><rect x="744.0" y="499.0" width="40.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="747.0" y="510.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.38%)</title><rect x="763.2" y="483.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="766.2" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (13 samples, 1.24%)</title><rect x="767.7" y="483.0" width="14.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="770.7" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="781.2" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="784.2" y="478.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="781.2" y="451.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="784.2" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="781.2" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="784.2" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="781.2" y="419.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="784.2" y="430.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="781.2" y="403.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="784.2" y="414.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.19%)</title><rect x="782.4" y="483.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="785.4" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.77%)</title><rect x="784.6" y="579.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="787.6" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.77%)</title><rect x="784.6" y="563.0" width="9.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="787.6" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.77%)</title><rect x="784.6" y="547.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="787.6" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.48%)</title><rect x="784.6" y="531.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="787.6" y="542.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.29%)</title><rect x="786.9" y="515.0" width="3.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="789.9" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="789.1" y="499.0" width="1.2" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="792.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.29%)</title><rect x="790.3" y="531.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="793.3" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (65 samples, 6.22%)</title><rect x="793.7" y="595.0" width="73.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="796.7" y="606.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (64 samples, 6.12%)</title><rect x="794.8" y="579.0" width="72.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="797.8" y="590.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/893555317.process (20 samples, 1.91%)</title><rect x="806.1" y="563.0" width="22.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.1" y="574.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (20 samples, 1.91%)</title><rect x="806.1" y="547.0" width="22.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="809.1" y="558.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.63%)</title><rect x="806.1" y="531.0" width="19.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="809.1" y="542.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="816.2" y="515.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="819.2" y="526.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.19%)</title><rect x="816.2" y="499.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="819.2" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.19%)</title><rect x="816.2" y="483.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="819.2" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.19%)</title><rect x="816.2" y="467.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="819.2" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.19%)</title><rect x="816.2" y="451.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="819.2" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (3 samples, 0.29%)</title><rect x="818.5" y="515.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="821.5" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.29%)</title><rect x="818.5" y="499.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="821.5" y="510.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="818.5" y="483.0" width="3.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="821.5" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.29%)</title><rect x="821.9" y="515.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="824.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.29%)</title><rect x="825.3" y="531.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="828.3" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="825.3" y="515.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="828.3" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="825.3" y="499.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.3" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.29%)</title><rect x="825.3" y="483.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.3" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.29%)</title><rect x="825.3" y="467.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="828.3" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (2 samples, 0.19%)</title><rect x="828.7" y="563.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.19%)</title><rect x="830.9" y="563.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.9" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="830.9" y="547.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="833.9" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.10%)</title><rect x="832.0" y="547.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="835.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.10%)</title><rect x="832.0" y="531.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="835.0" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.10%)</title><rect x="832.0" y="515.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.10%)</title><rect x="832.0" y="499.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="835.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="832.0" y="483.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="835.0" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.19%)</title><rect x="833.2" y="563.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.2" y="574.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.19%)</title><rect x="833.2" y="547.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.2" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.loggingExceptions (1 samples, 0.10%)</title><rect x="835.4" y="563.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="838.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$292/1076277468.get (1 samples, 0.10%)</title><rect x="835.4" y="547.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$77 (1 samples, 0.10%)</title><rect x="835.4" y="531.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="838.4" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.19%)</title><rect x="836.6" y="563.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="839.6" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (2 samples, 0.19%)</title><rect x="836.6" y="547.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="839.6" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.10%)</title><rect x="837.7" y="531.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="840.7" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (13 samples, 1.24%)</title><rect x="838.8" y="563.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="841.8" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (11 samples, 1.05%)</title><rect x="841.1" y="547.0" width="12.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.1" y="558.0"></text>
</g>
<g>
<title>itable stub (9 samples, 0.86%)</title><rect x="841.1" y="531.0" width="10.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="844.1" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (2 samples, 0.19%)</title><rect x="851.2" y="531.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="854.2" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.57%)</title><rect x="853.5" y="563.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.57%)</title><rect x="860.3" y="563.0" width="6.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="863.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.57%)</title><rect x="860.3" y="547.0" width="6.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="863.3" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.57%)</title><rect x="860.3" y="531.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (5 samples, 0.48%)</title><rect x="860.3" y="515.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="863.3" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.48%)</title><rect x="860.3" y="499.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.3" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.48%)</title><rect x="860.3" y="483.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="863.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$295/1367265495.accept (2 samples, 0.19%)</title><rect x="861.4" y="467.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="864.4" y="478.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.19%)</title><rect x="863.7" y="467.0" width="2.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="866.7" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="865.9" y="515.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.9" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.24%)</title><rect x="867.1" y="595.0" width="14.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="870.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.24%)</title><rect x="867.1" y="579.0" width="14.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="870.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (13 samples, 1.24%)</title><rect x="867.1" y="563.0" width="14.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="870.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.57%)</title><rect x="867.1" y="547.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.48%)</title><rect x="867.1" y="531.0" width="5.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="870.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (5 samples, 0.48%)</title><rect x="867.1" y="515.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1131664877.accept (4 samples, 0.38%)</title><rect x="868.2" y="499.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="871.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="872.7" y="531.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="875.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 0.67%)</title><rect x="873.8" y="547.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="876.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$296/1131664877.accept (7 samples, 0.67%)</title><rect x="873.8" y="531.0" width="7.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="876.8" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (7 samples, 0.67%)</title><rect x="873.8" y="515.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="876.8" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (7 samples, 0.67%)</title><rect x="873.8" y="499.0" width="7.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.8" y="510.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (7 samples, 0.67%)</title><rect x="873.8" y="483.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.8" y="494.0"></text>
</g>
<g>
<title>java/time/Duration.create (7 samples, 0.67%)</title><rect x="873.8" y="467.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="876.8" y="478.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="876.1" y="451.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="879.1" y="462.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.38%)</title><rect x="877.2" y="451.0" width="4.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="880.2" y="462.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.38%)</title><rect x="877.2" y="435.0" width="4.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="880.2" y="446.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.29%)</title><rect x="881.7" y="611.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="884.7" y="622.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.29%)</title><rect x="881.7" y="595.0" width="3.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="884.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (210 samples, 20.10%)</title><rect x="885.1" y="675.0" width="237.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="888.1" y="686.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (210 samples, 20.10%)</title><rect x="885.1" y="659.0" width="237.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="888.1" y="670.0">java/util/concurrent/LinkedBloc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (190 samples, 18.18%)</title><rect x="886.2" y="643.0" width="214.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="889.2" y="654.0">java/util/concurrent/locks/A..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.82%)</title><rect x="903.2" y="627.0" width="21.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.2" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.10%)</title><rect x="924.6" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="924.6" y="611.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="927.6" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="924.6" y="595.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="927.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="924.6" y="579.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="927.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.10%)</title><rect x="924.6" y="563.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="927.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (6 samples, 0.57%)</title><rect x="925.8" y="627.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="928.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (6 samples, 0.57%)</title><rect x="925.8" y="611.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="928.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 14.26%)</title><rect x="932.5" y="627.0" width="168.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="935.5" y="638.0">java/util/concurrent/l..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (149 samples, 14.26%)</title><rect x="932.5" y="611.0" width="168.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="935.5" y="622.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="935.9" y="595.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="938.9" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.10%)</title><rect x="937.1" y="595.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="940.1" y="606.0"></text>
</g>
<g>
<title>Unsafe_Park (138 samples, 13.21%)</title><rect x="938.2" y="595.0" width="155.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="941.2" y="606.0">Unsafe_Park</text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 1.63%)</title><rect x="941.6" y="579.0" width="19.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="944.6" y="590.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.19%)</title><rect x="951.7" y="563.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="954.7" y="574.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="954.0" y="563.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="957.0" y="574.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="955.1" y="563.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="958.1" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (4 samples, 0.38%)</title><rect x="956.3" y="563.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.3" y="574.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="960.8" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="963.8" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.19%)</title><rect x="961.9" y="579.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.9" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.19%)</title><rect x="964.2" y="579.0" width="2.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="967.2" y="590.0"></text>
</g>
<g>
<title>__lll_lock_wait (6 samples, 0.57%)</title><rect x="966.4" y="579.0" width="6.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="969.4" y="590.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 3.64%)</title><rect x="973.2" y="579.0" width="42.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="976.2" y="590.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (60 samples, 5.74%)</title><rect x="1016.1" y="579.0" width="67.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1019.1" y="590.0">__pthre..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="1083.9" y="579.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1086.9" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.19%)</title><rect x="1085.0" y="579.0" width="2.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1088.0" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.19%)</title><rect x="1087.2" y="579.0" width="2.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1090.2" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="1089.5" y="579.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1092.5" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.29%)</title><rect x="1090.6" y="579.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1093.6" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.29%)</title><rect x="1094.0" y="595.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1097.0" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.10%)</title><rect x="1097.4" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1100.4" y="606.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.19%)</title><rect x="1098.5" y="595.0" width="2.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 1.82%)</title><rect x="1100.8" y="643.0" width="21.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1103.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 1.82%)</title><rect x="1100.8" y="627.0" width="21.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1103.8" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 1.82%)</title><rect x="1100.8" y="611.0" width="21.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1103.8" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 1.82%)</title><rect x="1100.8" y="595.0" width="21.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1103.8" y="606.0">j..</text>
</g>
<g>
<title>start_thread (60 samples, 5.74%)</title><rect x="1122.2" y="723.0" width="67.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1125.2" y="734.0">start_t..</text>
</g>
<g>
<title>java_start(Thread*) (60 samples, 5.74%)</title><rect x="1122.2" y="707.0" width="67.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1125.2" y="718.0">java_st..</text>
</g>
<g>
<title>GangWorker::loop() (18 samples, 1.72%)</title><rect x="1122.2" y="691.0" width="20.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="702.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.19%)</title><rect x="1122.2" y="675.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="686.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.19%)</title><rect x="1122.2" y="659.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.2" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="1122.2" y="643.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.2" y="654.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.10%)</title><rect x="1123.4" y="643.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1126.4" y="654.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (16 samples, 1.53%)</title><rect x="1124.5" y="675.0" width="18.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.5" y="686.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.19%)</title><rect x="1124.5" y="659.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1127.5" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="1124.5" y="643.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1127.5" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.10%)</title><rect x="1125.6" y="643.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1128.6" y="654.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (7 samples, 0.67%)</title><rect x="1126.8" y="659.0" width="7.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1129.8" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.48%)</title><rect x="1126.8" y="643.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.8" y="654.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.19%)</title><rect x="1126.8" y="627.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1129.8" y="638.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (1 samples, 0.10%)</title><rect x="1126.8" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.8" y="622.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1126.8" y="595.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.8" y="606.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (1 samples, 0.10%)</title><rect x="1127.9" y="611.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.9" y="622.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (3 samples, 0.29%)</title><rect x="1129.0" y="627.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.0" y="638.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (2 samples, 0.19%)</title><rect x="1130.2" y="611.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1133.2" y="622.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (2 samples, 0.19%)</title><rect x="1130.2" y="595.0" width="2.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1133.2" y="606.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1131.3" y="579.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1134.3" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="1131.3" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.3" y="574.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.10%)</title><rect x="1131.3" y="547.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.3" y="558.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.10%)</title><rect x="1131.3" y="531.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.3" y="542.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="1131.3" y="515.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1134.3" y="526.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.10%)</title><rect x="1131.3" y="499.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1134.3" y="510.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.19%)</title><rect x="1132.4" y="643.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.4" y="654.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.19%)</title><rect x="1132.4" y="627.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.4" y="638.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (7 samples, 0.67%)</title><rect x="1134.7" y="659.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1137.7" y="670.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (7 samples, 0.67%)</title><rect x="1134.7" y="643.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1137.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (7 samples, 0.67%)</title><rect x="1134.7" y="627.0" width="7.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.7" y="638.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (7 samples, 0.67%)</title><rect x="1134.7" y="611.0" width="7.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1137.7" y="622.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="1134.7" y="595.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.7" y="606.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.10%)</title><rect x="1134.7" y="579.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="590.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (6 samples, 0.57%)</title><rect x="1135.8" y="595.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.8" y="606.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (5 samples, 0.48%)</title><rect x="1136.9" y="579.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1139.9" y="590.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (2 samples, 0.19%)</title><rect x="1140.3" y="563.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (2 samples, 0.19%)</title><rect x="1140.3" y="547.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.3" y="558.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.10%)</title><rect x="1141.4" y="531.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.4" y="542.0"></text>
</g>
<g>
<title>JavaThread::run() (42 samples, 4.02%)</title><rect x="1142.6" y="691.0" width="47.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.6" y="702.0">Java..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (42 samples, 4.02%)</title><rect x="1142.6" y="675.0" width="47.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.6" y="686.0">Java..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (42 samples, 4.02%)</title><rect x="1142.6" y="659.0" width="47.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.6" y="670.0">Comp..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (41 samples, 3.92%)</title><rect x="1142.6" y="643.0" width="46.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.6" y="654.0">Comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (39 samples, 3.73%)</title><rect x="1142.6" y="627.0" width="44.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.6" y="638.0">C2Co..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (39 samples, 3.73%)</title><rect x="1142.6" y="611.0" width="44.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1145.6" y="622.0">Comp..</text>
</g>
<g>
<title>Compile::Code_Gen() (22 samples, 2.11%)</title><rect x="1142.6" y="595.0" width="24.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.6" y="606.0">C..</text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.19%)</title><rect x="1142.6" y="579.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.6" y="590.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="1142.6" y="563.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.6" y="574.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="1142.6" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.6" y="558.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::append(DIR_Chunk* const&amp;) (1 samples, 0.10%)</title><rect x="1142.6" y="531.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.6" y="542.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="1143.7" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.7" y="574.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.29%)</title><rect x="1144.8" y="579.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1147.8" y="590.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.10%)</title><rect x="1144.8" y="563.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1147.8" y="574.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1146.0" y="563.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.0" y="574.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1147.1" y="547.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.1" y="558.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.10%)</title><rect x="1147.1" y="531.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.1" y="542.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1147.1" y="515.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.1" y="526.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1147.1" y="499.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.1" y="510.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.10%)</title><rect x="1148.2" y="579.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.2" y="590.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.10%)</title><rect x="1148.2" y="563.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.2" y="574.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1148.2" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (16 samples, 1.53%)</title><rect x="1149.3" y="579.0" width="18.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.3" y="590.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.10%)</title><rect x="1149.3" y="563.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.3" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1150.5" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1153.5" y="574.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1150.5" y="547.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.5" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1150.5" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 0.19%)</title><rect x="1151.6" y="563.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.6" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.48%)</title><rect x="1153.9" y="563.0" width="5.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.9" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.29%)</title><rect x="1156.1" y="547.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1159.1" y="558.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.19%)</title><rect x="1157.3" y="531.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.3" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.38%)</title><rect x="1159.5" y="563.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.5" y="574.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1161.8" y="547.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1164.8" y="558.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.10%)</title><rect x="1162.9" y="547.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.9" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.10%)</title><rect x="1164.0" y="563.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.0" y="574.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1164.0" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.0" y="558.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.10%)</title><rect x="1165.2" y="563.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.2" y="574.0"></text>
</g>
<g>
<title>loadBNode::oper_input_base() const (1 samples, 0.10%)</title><rect x="1166.3" y="563.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1169.3" y="574.0"></text>
</g>
<g>
<title>Compile::Optimize() (11 samples, 1.05%)</title><rect x="1167.4" y="595.0" width="12.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.4" y="606.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1167.4" y="579.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.4" y="590.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1167.4" y="563.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.4" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1168.5" y="579.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1168.5" y="563.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1168.5" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) (1 samples, 0.10%)</title><rect x="1168.5" y="531.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.5" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (7 samples, 0.67%)</title><rect x="1169.7" y="579.0" width="7.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.7" y="590.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="563.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1172.7" y="574.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.7" y="558.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="542.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="515.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="526.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="499.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.7" y="510.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="483.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="494.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="467.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.7" y="478.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="451.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.7" y="462.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1169.7" y="435.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.7" y="446.0"></text>
</g>
<g>
<title>IdealLoopTree::adjust_loop_exit_prob(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1169.7" y="419.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.7" y="430.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.19%)</title><rect x="1170.8" y="563.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.8" y="574.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.10%)</title><rect x="1171.9" y="547.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.9" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.9" y="531.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.9" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1171.9" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.9" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 0.38%)</title><rect x="1173.1" y="563.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="574.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 0.38%)</title><rect x="1173.1" y="547.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.1" y="558.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.2" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.2" y="542.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.2" y="515.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.2" y="526.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1175.3" y="531.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.3" y="542.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1175.3" y="515.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.3" y="526.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1175.3" y="499.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.3" y="510.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1175.3" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1178.3" y="494.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_canonical_holder(int) (1 samples, 0.10%)</title><rect x="1175.3" y="467.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.3" y="478.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1176.4" y="531.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.4" y="542.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.10%)</title><rect x="1176.4" y="515.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.4" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.19%)</title><rect x="1177.6" y="579.0" width="2.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.6" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.19%)</title><rect x="1177.6" y="563.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.6" y="574.0"></text>
</g>
<g>
<title>URShiftLNode::Opcode() const (1 samples, 0.10%)</title><rect x="1178.7" y="547.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.7" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.57%)</title><rect x="1179.8" y="595.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.57%)</title><rect x="1179.8" y="579.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.57%)</title><rect x="1179.8" y="563.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.57%)</title><rect x="1179.8" y="547.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.57%)</title><rect x="1179.8" y="531.0" width="6.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.48%)</title><rect x="1179.8" y="515.0" width="5.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.8" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1179.8" y="499.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.8" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1179.8" y="483.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1179.8" y="467.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1179.8" y="451.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.8" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1179.8" y="435.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.8" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1179.8" y="419.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.8" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1179.8" y="403.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.8" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1179.8" y="387.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.8" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_new(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1179.8" y="371.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.8" y="382.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass_index() const (1 samples, 0.10%)</title><rect x="1179.8" y="355.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.8" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1181.0" y="499.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1181.0" y="483.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.10%)</title><rect x="1181.0" y="467.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="467.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="451.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="419.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="371.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="355.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="339.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.1" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="323.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.1" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="307.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="275.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="259.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="243.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="227.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.1" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="211.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.1" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="195.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="179.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="163.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.1" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="147.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="158.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1182.1" y="131.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.1" y="142.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1182.1" y="115.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="126.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1182.1" y="99.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.1" y="110.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1182.1" y="83.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.1" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1182.1" y="67.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.1" y="78.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1182.1" y="51.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.1" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::has_appendix() (1 samples, 0.10%)</title><rect x="1182.1" y="35.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.1" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.10%)</title><rect x="1183.2" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1183.2" y="451.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="462.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1183.2" y="435.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="499.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="483.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.4" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.4" y="467.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.4" y="451.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.4" y="435.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.4" y="419.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.4" y="403.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.4" y="387.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.4" y="371.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.4" y="355.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.4" y="339.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.4" y="323.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.4" y="307.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="318.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.4" y="291.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.4" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1184.4" y="275.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.4" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1184.4" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1184.4" y="243.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.4" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1184.4" y="227.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.4" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1184.4" y="211.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.4" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1184.4" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.4" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1184.4" y="179.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.4" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1184.4" y="163.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.4" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.10%)</title><rect x="1184.4" y="147.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.4" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1184.4" y="131.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1185.5" y="515.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.5" y="526.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.10%)</title><rect x="1185.5" y="499.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.5" y="510.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.10%)</title><rect x="1185.5" y="483.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="494.0"></text>
</g>
<g>
<title>ConNode::make(Compile*, Type const*) (1 samples, 0.10%)</title><rect x="1185.5" y="467.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.5" y="478.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.6" y="627.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="638.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1186.6" y="611.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="622.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1186.6" y="595.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.6" y="606.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1186.6" y="579.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="590.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.10%)</title><rect x="1186.6" y="563.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.6" y="574.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.10%)</title><rect x="1186.6" y="547.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.6" y="558.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.10%)</title><rect x="1186.6" y="531.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="542.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.10%)</title><rect x="1186.6" y="515.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="526.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.10%)</title><rect x="1186.6" y="499.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="510.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.10%)</title><rect x="1186.6" y="483.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>LinearScanWalker::split_and_spill_interval(Interval*) (1 samples, 0.10%)</title><rect x="1186.6" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.10%)</title><rect x="1186.6" y="451.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>Interval::split(int) (1 samples, 0.10%)</title><rect x="1186.6" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (1 samples, 0.10%)</title><rect x="1187.7" y="627.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1187.7" y="611.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="622.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1187.7" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="606.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1187.7" y="579.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="590.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1187.7" y="563.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="574.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.10%)</title><rect x="1187.7" y="547.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="558.0"></text>
</g>
<g>
<title>java_lang_Class::protection_domain(oopDesc*) (1 samples, 0.10%)</title><rect x="1187.7" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="542.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.10%)</title><rect x="1188.9" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.9" y="654.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.10%)</title><rect x="1188.9" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="638.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.10%)</title><rect x="1188.9" y="611.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.9" y="622.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.10%)</title><rect x="1188.9" y="595.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.9" y="606.0"></text>
</g>
</g>
</svg>
