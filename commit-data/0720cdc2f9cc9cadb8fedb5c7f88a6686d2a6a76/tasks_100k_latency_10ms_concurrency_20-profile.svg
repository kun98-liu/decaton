<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (343 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.29%)</title><rect x="10.0" y="851.0" width="3.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>_IO_old_init (1 samples, 0.29%)</title><rect x="10.0" y="835.0" width="3.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (26 samples, 7.58%)</title><rect x="13.4" y="851.0" width="89.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.4" y="862.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (26 samples, 7.58%)</title><rect x="13.4" y="835.0" width="89.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.4" y="846.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.29%)</title><rect x="16.9" y="819.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.9" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.29%)</title><rect x="16.9" y="803.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.29%)</title><rect x="16.9" y="787.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.29%)</title><rect x="16.9" y="771.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.9" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="16.9" y="755.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.9" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="16.9" y="739.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="16.9" y="723.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="16.9" y="707.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="16.9" y="691.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="16.9" y="675.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="16.9" y="659.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="16.9" y="643.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.toStruct (1 samples, 0.29%)</title><rect x="16.9" y="627.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/OffsetCommitRequestData.toStruct (1 samples, 0.29%)</title><rect x="16.9" y="611.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.&lt;init&gt; (1 samples, 0.29%)</title><rect x="16.9" y="595.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (24 samples, 7.00%)</title><rect x="20.3" y="819.0" width="82.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="23.3" y="830.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.29%)</title><rect x="20.3" y="803.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.29%)</title><rect x="20.3" y="787.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.29%)</title><rect x="20.3" y="771.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$275/707384511.accept (1 samples, 0.29%)</title><rect x="20.3" y="755.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.29%)</title><rect x="20.3" y="739.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.29%)</title><rect x="20.3" y="723.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.3" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="23.8" y="803.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.8" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.29%)</title><rect x="23.8" y="787.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.46%)</title><rect x="27.2" y="803.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.2" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$274/157056683.accept (5 samples, 1.46%)</title><rect x="27.2" y="787.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.2" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.17%)</title><rect x="30.6" y="771.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 0.87%)</title><rect x="30.6" y="755.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 0.87%)</title><rect x="30.6" y="739.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 0.87%)</title><rect x="30.6" y="723.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 0.87%)</title><rect x="30.6" y="707.0" width="10.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.87%)</title><rect x="30.6" y="691.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.87%)</title><rect x="30.6" y="675.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.29%)</title><rect x="41.0" y="755.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.0" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.29%)</title><rect x="41.0" y="739.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.29%)</title><rect x="41.0" y="723.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="44.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.29%)</title><rect x="41.0" y="707.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="44.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.29%)</title><rect x="41.0" y="691.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="44.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.29%)</title><rect x="41.0" y="675.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="44.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="41.0" y="659.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.29%)</title><rect x="41.0" y="643.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="44.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.96%)</title><rect x="44.4" y="803.0" width="58.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.4" y="814.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (17 samples, 4.96%)</title><rect x="44.4" y="787.0" width="58.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="47.4" y="798.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (11 samples, 3.21%)</title><rect x="47.8" y="771.0" width="37.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.8" y="782.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 1.75%)</title><rect x="47.8" y="755.0" width="20.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.8" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 1.46%)</title><rect x="51.3" y="739.0" width="17.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 1.17%)</title><rect x="51.3" y="723.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.29%)</title><rect x="51.3" y="707.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseStructMaybeUpdateThrottleTimeMetrics (1 samples, 0.29%)</title><rect x="51.3" y="691.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="54.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.parseResponse (1 samples, 0.29%)</title><rect x="51.3" y="675.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.read (1 samples, 0.29%)</title><rect x="51.3" y="659.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/CompactArrayOf.read (1 samples, 0.29%)</title><rect x="51.3" y="643.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleInitiateApiVersionRequests (1 samples, 0.29%)</title><rect x="54.7" y="707.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="57.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySet.iterator (1 samples, 0.29%)</title><rect x="54.7" y="691.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="57.7" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap$EntryIterator.&lt;init&gt; (1 samples, 0.29%)</title><rect x="54.7" y="675.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="57.7" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.29%)</title><rect x="54.7" y="659.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="57.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.58%)</title><rect x="58.2" y="707.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="58.2" y="691.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.29%)</title><rect x="58.2" y="675.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.2" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.29%)</title><rect x="61.6" y="691.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.6" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.29%)</title><rect x="61.6" y="675.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.6" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.29%)</title><rect x="61.6" y="659.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="64.6" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.29%)</title><rect x="61.6" y="643.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="64.6" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.29%)</title><rect x="61.6" y="627.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.6" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="61.6" y="611.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="61.6" y="595.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.6" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="65.0" y="723.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="68.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="65.0" y="707.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="65.0" y="691.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="65.0" y="675.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="68.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="65.0" y="659.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="68.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="65.0" y="643.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.29%)</title><rect x="65.0" y="627.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="68.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.29%)</title><rect x="65.0" y="611.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.29%)</title><rect x="65.0" y="595.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$10.write (1 samples, 0.29%)</title><rect x="65.0" y="579.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.0" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.utf8 (1 samples, 0.29%)</title><rect x="65.0" y="563.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.0" y="574.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.29%)</title><rect x="65.0" y="547.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.0" y="558.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.29%)</title><rect x="65.0" y="531.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.0" y="542.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (1 samples, 0.29%)</title><rect x="65.0" y="515.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="68.0" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="65.0" y="499.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="68.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="65.0" y="483.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="68.0" y="494.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="65.0" y="467.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.0" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="65.0" y="451.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="68.0" y="462.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.replaceWith (1 samples, 0.29%)</title><rect x="65.0" y="435.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="68.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (5 samples, 1.46%)</title><rect x="68.5" y="755.0" width="17.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="71.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="68.5" y="739.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="71.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="68.5" y="723.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="71.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.29%)</title><rect x="68.5" y="707.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="71.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.peek (1 samples, 0.29%)</title><rect x="71.9" y="739.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="74.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 0.87%)</title><rect x="75.4" y="739.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.4" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (2 samples, 0.58%)</title><rect x="75.4" y="723.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="78.4" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 0.58%)</title><rect x="75.4" y="707.0" width="6.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.4" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 0.58%)</title><rect x="75.4" y="691.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.4" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$1900 (1 samples, 0.29%)</title><rect x="82.2" y="723.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.29%)</title><rect x="82.2" y="707.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="85.2" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.partitionLagMetricName (1 samples, 0.29%)</title><rect x="82.2" y="691.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="85.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="82.2" y="675.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="85.2" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.29%)</title><rect x="82.2" y="659.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.2" y="670.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="82.2" y="643.0" width="3.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="85.2" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.29%)</title><rect x="85.7" y="771.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.29%)</title><rect x="85.7" y="755.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.29%)</title><rect x="85.7" y="739.0" width="3.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.87%)</title><rect x="89.1" y="771.0" width="10.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.58%)</title><rect x="89.1" y="755.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.58%)</title><rect x="89.1" y="739.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.58%)</title><rect x="89.1" y="723.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1750808408.linkToTargetMethod (1 samples, 0.29%)</title><rect x="89.1" y="707.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.1" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1279708574.invokeStatic_JJ_L (1 samples, 0.29%)</title><rect x="89.1" y="691.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.maybeRegisterConnectionMetrics (1 samples, 0.29%)</title><rect x="92.6" y="707.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="95.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.29%)</title><rect x="92.6" y="691.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="95.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="92.6" y="675.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="95.6" y="686.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="92.6" y="659.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="95.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.29%)</title><rect x="96.0" y="755.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="99.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.29%)</title><rect x="96.0" y="739.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.0" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="96.0" y="723.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.29%)</title><rect x="96.0" y="707.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="99.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.29%)</title><rect x="96.0" y="691.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="99.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.serialize (1 samples, 0.29%)</title><rect x="96.0" y="675.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.0" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestUtils.serialize (1 samples, 0.29%)</title><rect x="96.0" y="659.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Struct.writeTo (1 samples, 0.29%)</title><rect x="96.0" y="643.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="99.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Schema.write (1 samples, 0.29%)</title><rect x="96.0" y="627.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.0" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/types/Type$2.write (1 samples, 0.29%)</title><rect x="96.0" y="611.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.29%)</title><rect x="96.0" y="595.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.0" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (1 samples, 0.29%)</title><rect x="96.0" y="579.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.0" y="590.0"></text>
</g>
<g>
<title>Runtime1::counter_overflow(JavaThread*, int, Method*) (1 samples, 0.29%)</title><rect x="96.0" y="563.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="99.0" y="574.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.29%)</title><rect x="96.0" y="547.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="99.0" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.29%)</title><rect x="99.4" y="771.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="102.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.29%)</title><rect x="99.4" y="755.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.29%)</title><rect x="99.4" y="739.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="102.4" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.&lt;init&gt; (1 samples, 0.29%)</title><rect x="99.4" y="723.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putMapEntries (1 samples, 0.29%)</title><rect x="99.4" y="707.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="102.4" y="718.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.29%)</title><rect x="99.4" y="691.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.4" y="702.0"></text>
</g>
<g>
<title>java/lang/Thread.run (208 samples, 60.64%)</title><rect x="102.9" y="851.0" width="715.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="105.9" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (208 samples, 60.64%)</title><rect x="102.9" y="835.0" width="715.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.9" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (208 samples, 60.64%)</title><rect x="102.9" y="819.0" width="715.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="105.9" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/387589008.run (191 samples, 55.69%)</title><rect x="120.1" y="803.0" width="657.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="123.1" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$290/387589008.run</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (191 samples, 55.69%)</title><rect x="120.1" y="787.0" width="657.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="123.1" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (191 samples, 55.69%)</title><rect x="120.1" y="771.0" width="657.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="123.1" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (191 samples, 55.69%)</title><rect x="120.1" y="755.0" width="657.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="123.1" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (20 samples, 5.83%)</title><rect x="140.7" y="739.0" width="68.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="143.7" y="750.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.29%)</title><rect x="157.9" y="723.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="160.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.08%)</title><rect x="161.4" y="723.0" width="48.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="164.4" y="734.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 4.08%)</title><rect x="161.4" y="707.0" width="48.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.4" y="718.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 4.08%)</title><rect x="161.4" y="691.0" width="48.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="164.4" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 0.87%)</title><rect x="161.4" y="675.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.87%)</title><rect x="161.4" y="659.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$302/1846635065.accept (1 samples, 0.29%)</title><rect x="161.4" y="643.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="164.4" y="654.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.58%)</title><rect x="164.8" y="643.0" width="6.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="167.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 3.21%)</title><rect x="171.7" y="675.0" width="37.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="174.7" y="686.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$302/1846635065.accept (11 samples, 3.21%)</title><rect x="171.7" y="659.0" width="37.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.7" y="670.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (11 samples, 3.21%)</title><rect x="171.7" y="643.0" width="37.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.7" y="654.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (11 samples, 3.21%)</title><rect x="171.7" y="627.0" width="37.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="174.7" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (10 samples, 2.92%)</title><rect x="175.1" y="611.0" width="34.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.1" y="622.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 2.92%)</title><rect x="175.1" y="595.0" width="34.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="178.1" y="606.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (3 samples, 0.87%)</title><rect x="175.1" y="579.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (3 samples, 0.87%)</title><rect x="175.1" y="563.0" width="10.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.1" y="574.0"></text>
</g>
<g>
<title>itable stub (3 samples, 0.87%)</title><rect x="175.1" y="547.0" width="10.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="178.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (7 samples, 2.04%)</title><rect x="185.5" y="579.0" width="24.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.5" y="590.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$287/351681542.accept (1 samples, 0.29%)</title><rect x="185.5" y="563.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="188.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (6 samples, 1.75%)</title><rect x="188.9" y="563.0" width="20.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (1 samples, 0.29%)</title><rect x="206.1" y="547.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="209.1" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (38 samples, 11.08%)</title><rect x="209.5" y="739.0" width="130.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="212.5" y="750.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/1264213713.extract (38 samples, 11.08%)</title><rect x="209.5" y="723.0" width="130.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="212.5" y="734.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (38 samples, 11.08%)</title><rect x="209.5" y="707.0" width="130.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="212.5" y="718.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 11.08%)</title><rect x="209.5" y="691.0" width="130.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.5" y="702.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (38 samples, 11.08%)</title><rect x="209.5" y="675.0" width="130.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.5" y="686.0">com/linecorp/dec..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (38 samples, 11.08%)</title><rect x="209.5" y="659.0" width="130.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="212.5" y="670.0">com/fasterxml/ja..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (17 samples, 4.96%)</title><rect x="209.5" y="643.0" width="58.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="212.5" y="654.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 1.75%)</title><rect x="209.5" y="627.0" width="20.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 1.75%)</title><rect x="209.5" y="611.0" width="20.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="212.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (5 samples, 1.46%)</title><rect x="209.5" y="595.0" width="17.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.29%)</title><rect x="226.7" y="595.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="229.7" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="226.7" y="579.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="229.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (11 samples, 3.21%)</title><rect x="230.2" y="627.0" width="37.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="233.2" y="638.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (11 samples, 3.21%)</title><rect x="230.2" y="611.0" width="37.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.2" y="622.0">com..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="230.2" y="595.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="233.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="230.2" y="579.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="233.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="230.2" y="563.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="233.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (3 samples, 0.87%)</title><rect x="233.6" y="595.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.setEncoding (1 samples, 0.29%)</title><rect x="237.1" y="579.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.1" y="590.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.29%)</title><rect x="237.1" y="563.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="240.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.29%)</title><rect x="240.5" y="579.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.5" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (3 samples, 0.87%)</title><rect x="243.9" y="595.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="246.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="250.8" y="579.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="253.8" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="250.8" y="563.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="253.8" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="250.8" y="547.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="253.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (4 samples, 1.17%)</title><rect x="254.3" y="595.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.3" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="254.3" y="579.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="257.3" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="254.3" y="563.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="257.3" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="254.3" y="547.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="257.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="254.3" y="531.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="257.3" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.29%)</title><rect x="254.3" y="515.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="257.3" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.29%)</title><rect x="254.3" y="499.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="257.3" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory$Feature.enabledIn (3 samples, 0.87%)</title><rect x="257.7" y="579.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="260.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (21 samples, 6.12%)</title><rect x="268.0" y="643.0" width="72.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="271.0" y="654.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.29%)</title><rect x="268.0" y="627.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="271.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.29%)</title><rect x="268.0" y="611.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="271.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.58%)</title><rect x="271.5" y="627.0" width="6.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="274.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.58%)</title><rect x="271.5" y="611.0" width="6.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.29%)</title><rect x="271.5" y="595.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="274.5" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (1 samples, 0.29%)</title><rect x="274.9" y="595.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (18 samples, 5.25%)</title><rect x="278.3" y="627.0" width="62.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.3" y="638.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (18 samples, 5.25%)</title><rect x="278.3" y="611.0" width="62.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.3" y="622.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 1.75%)</title><rect x="278.3" y="595.0" width="20.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.3" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.87%)</title><rect x="278.3" y="579.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.3" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.87%)</title><rect x="278.3" y="563.0" width="10.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="281.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.87%)</title><rect x="278.3" y="547.0" width="10.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="281.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.87%)</title><rect x="278.3" y="531.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 0.87%)</title><rect x="288.7" y="579.0" width="10.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="291.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.29%)</title><rect x="288.7" y="563.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="291.7" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 0.58%)</title><rect x="292.1" y="563.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 0.58%)</title><rect x="292.1" y="547.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="295.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 0.58%)</title><rect x="292.1" y="531.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 0.58%)</title><rect x="292.1" y="515.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (12 samples, 3.50%)</title><rect x="299.0" y="595.0" width="41.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="302.0" y="606.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (12 samples, 3.50%)</title><rect x="299.0" y="579.0" width="41.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="302.0" y="590.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (12 samples, 3.50%)</title><rect x="299.0" y="563.0" width="41.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="302.0" y="574.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.87%)</title><rect x="299.0" y="547.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.29%)</title><rect x="299.0" y="531.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="302.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.29%)</title><rect x="299.0" y="515.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="302.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.29%)</title><rect x="299.0" y="499.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="302.0" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.29%)</title><rect x="299.0" y="483.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="302.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.29%)</title><rect x="302.4" y="531.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="305.4" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.29%)</title><rect x="305.9" y="531.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="308.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.29%)</title><rect x="305.9" y="515.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="308.9" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.29%)</title><rect x="305.9" y="499.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="308.9" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (4 samples, 1.17%)</title><rect x="309.3" y="547.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (4 samples, 1.17%)</title><rect x="309.3" y="531.0" width="13.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="312.3" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.17%)</title><rect x="309.3" y="515.0" width="13.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="312.3" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 1.17%)</title><rect x="309.3" y="499.0" width="13.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.3" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 1.17%)</title><rect x="309.3" y="483.0" width="13.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="312.3" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.87%)</title><rect x="323.1" y="547.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.87%)</title><rect x="323.1" y="531.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.1" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.87%)</title><rect x="323.1" y="515.0" width="10.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="326.1" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.87%)</title><rect x="323.1" y="499.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.1" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.58%)</title><rect x="326.5" y="483.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.5" y="494.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (2 samples, 0.58%)</title><rect x="326.5" y="467.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="329.5" y="478.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (2 samples, 0.58%)</title><rect x="326.5" y="451.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.29%)</title><rect x="333.4" y="547.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="336.4" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.29%)</title><rect x="333.4" y="531.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="336.4" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.29%)</title><rect x="333.4" y="515.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="336.4" y="526.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.29%)</title><rect x="333.4" y="499.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="336.4" y="510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.29%)</title><rect x="336.8" y="547.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="339.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (127 samples, 37.03%)</title><rect x="340.3" y="739.0" width="436.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="343.3" y="750.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipel..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="360.9" y="723.0" width="3.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="363.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="360.9" y="707.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="363.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (16 samples, 4.66%)</title><rect x="364.3" y="723.0" width="55.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="367.3" y="734.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (15 samples, 4.37%)</title><rect x="367.8" y="707.0" width="51.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="370.8" y="718.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (15 samples, 4.37%)</title><rect x="367.8" y="691.0" width="51.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="370.8" y="702.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.29%)</title><rect x="374.7" y="675.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.7" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="374.7" y="659.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="377.7" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="374.7" y="643.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="377.7" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="374.7" y="627.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.7" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="374.7" y="611.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="377.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.87%)</title><rect x="378.1" y="675.0" width="10.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="381.1" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.87%)</title><rect x="378.1" y="659.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.1" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.87%)</title><rect x="378.1" y="643.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="381.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (9 samples, 2.62%)</title><rect x="388.4" y="675.0" width="31.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="391.4" y="686.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 2.04%)</title><rect x="391.9" y="659.0" width="24.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="394.9" y="670.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.29%)</title><rect x="391.9" y="643.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="394.9" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 1.75%)</title><rect x="395.3" y="643.0" width="20.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="398.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.29%)</title><rect x="415.9" y="659.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="418.9" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 1.17%)</title><rect x="419.4" y="723.0" width="13.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 1.17%)</title><rect x="419.4" y="707.0" width="13.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (23 samples, 6.71%)</title><rect x="433.1" y="723.0" width="79.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="436.1" y="734.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (21 samples, 6.12%)</title><rect x="433.1" y="707.0" width="72.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.1" y="718.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (10 samples, 2.92%)</title><rect x="443.5" y="691.0" width="34.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="446.5" y="702.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 2.04%)</title><rect x="453.8" y="675.0" width="24.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="456.8" y="686.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 1.46%)</title><rect x="453.8" y="659.0" width="17.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="456.8" y="670.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 0.87%)</title><rect x="453.8" y="643.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.8" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 0.87%)</title><rect x="453.8" y="627.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.8" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 0.87%)</title><rect x="453.8" y="611.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="456.8" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.87%)</title><rect x="453.8" y="595.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="456.8" y="606.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.87%)</title><rect x="453.8" y="579.0" width="10.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="456.8" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="457.2" y="563.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="460.2" y="574.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.29%)</title><rect x="457.2" y="547.0" width="3.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="460.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::post_allocation_setup_array(KlassHandle, HeapWord*, int) (1 samples, 0.29%)</title><rect x="460.7" y="563.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="463.7" y="574.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="464.1" y="643.0" width="3.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="467.1" y="654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.29%)</title><rect x="467.6" y="643.0" width="3.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="470.6" y="654.0"></text>
</g>
<g>
<title>jshort_arraycopy (2 samples, 0.58%)</title><rect x="471.0" y="659.0" width="6.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="474.0" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 2.33%)</title><rect x="477.9" y="691.0" width="27.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="480.9" y="702.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 2.33%)</title><rect x="477.9" y="675.0" width="27.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="480.9" y="686.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (3 samples, 0.87%)</title><rect x="481.3" y="659.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.3" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.87%)</title><rect x="481.3" y="643.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.3" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.87%)</title><rect x="481.3" y="627.0" width="10.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="484.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.87%)</title><rect x="481.3" y="611.0" width="10.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.87%)</title><rect x="481.3" y="595.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="484.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="491.6" y="659.0" width="3.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="491.6" y="643.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="494.6" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="491.6" y="627.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="494.6" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="491.6" y="611.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.6" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.29%)</title><rect x="491.6" y="595.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="494.6" y="606.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 0.87%)</title><rect x="495.1" y="659.0" width="10.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="498.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.87%)</title><rect x="495.1" y="643.0" width="10.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="498.1" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 0.87%)</title><rect x="495.1" y="627.0" width="10.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="498.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 0.58%)</title><rect x="498.5" y="611.0" width="6.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="501.5" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="502.0" y="595.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="505.0" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.29%)</title><rect x="502.0" y="579.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="505.0" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.29%)</title><rect x="502.0" y="563.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="505.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.29%)</title><rect x="502.0" y="547.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="505.0" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.29%)</title><rect x="502.0" y="531.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="505.0" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 0.58%)</title><rect x="505.4" y="707.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="508.4" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.58%)</title><rect x="505.4" y="691.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.58%)</title><rect x="505.4" y="675.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="508.4" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.58%)</title><rect x="505.4" y="659.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.4" y="670.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.29%)</title><rect x="508.8" y="643.0" width="3.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="511.8" y="654.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="508.8" y="627.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="511.8" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (74 samples, 21.57%)</title><rect x="512.3" y="723.0" width="254.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="515.3" y="734.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (73 samples, 21.28%)</title><rect x="512.3" y="707.0" width="251.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="515.3" y="718.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$211/2009657287.process (62 samples, 18.08%)</title><rect x="512.3" y="691.0" width="213.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="515.3" y="702.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (62 samples, 18.08%)</title><rect x="512.3" y="675.0" width="213.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="515.3" y="686.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (62 samples, 18.08%)</title><rect x="512.3" y="659.0" width="213.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.3" y="670.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.17%)</title><rect x="519.2" y="643.0" width="13.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="522.2" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (4 samples, 1.17%)</title><rect x="519.2" y="627.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="522.2" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (4 samples, 1.17%)</title><rect x="519.2" y="611.0" width="13.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="522.2" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (4 samples, 1.17%)</title><rect x="519.2" y="595.0" width="13.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="522.2" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.29%)</title><rect x="529.5" y="579.0" width="3.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="532.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.29%)</title><rect x="529.5" y="563.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="532.5" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (55 samples, 16.03%)</title><rect x="532.9" y="643.0" width="189.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="535.9" y="654.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (54 samples, 15.74%)</title><rect x="532.9" y="627.0" width="185.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.9" y="638.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (49 samples, 14.29%)</title><rect x="546.7" y="611.0" width="168.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="549.7" y="622.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.58%)</title><rect x="560.4" y="595.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="563.4" y="606.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.29%)</title><rect x="567.3" y="595.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="570.3" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 1.46%)</title><rect x="570.8" y="595.0" width="17.2" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="573.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.58%)</title><rect x="581.1" y="579.0" width="6.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="584.1" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.87%)</title><rect x="588.0" y="595.0" width="10.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="591.0" y="606.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (34 samples, 9.91%)</title><rect x="598.3" y="595.0" width="116.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="601.3" y="606.0">os::sleep(Thre..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.58%)</title><rect x="625.8" y="579.0" width="6.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="628.8" y="590.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.29%)</title><rect x="629.2" y="563.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="632.2" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.17%)</title><rect x="632.7" y="579.0" width="13.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="635.7" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (15 samples, 4.37%)</title><rect x="646.4" y="579.0" width="51.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="649.4" y="590.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.29%)</title><rect x="698.0" y="579.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="701.0" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.29%)</title><rect x="701.5" y="579.0" width="3.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="704.5" y="590.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.58%)</title><rect x="704.9" y="579.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="707.9" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.29%)</title><rect x="711.8" y="579.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="714.8" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.29%)</title><rect x="715.2" y="611.0" width="3.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="718.2" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.29%)</title><rect x="718.7" y="627.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.7" y="638.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.29%)</title><rect x="718.7" y="611.0" width="3.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="721.7" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.29%)</title><rect x="722.1" y="643.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="725.1" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.29%)</title><rect x="722.1" y="627.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="725.1" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.29%)</title><rect x="722.1" y="611.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.1" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.29%)</title><rect x="722.1" y="595.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.1" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.87%)</title><rect x="725.6" y="691.0" width="10.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="728.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 0.87%)</title><rect x="725.6" y="675.0" width="10.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="728.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.29%)</title><rect x="735.9" y="691.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="738.9" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="735.9" y="675.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="738.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.29%)</title><rect x="739.3" y="691.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="742.3" y="702.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.29%)</title><rect x="739.3" y="675.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="742.3" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/557023567.linkToTargetMethod (1 samples, 0.29%)</title><rect x="742.8" y="691.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="745.8" y="702.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (1 samples, 0.29%)</title><rect x="742.8" y="675.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="745.8" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$297/1422637884.get$Lambda (1 samples, 0.29%)</title><rect x="742.8" y="659.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="745.8" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="746.2" y="691.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="749.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (1 samples, 0.29%)</title><rect x="746.2" y="675.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="749.2" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.size (1 samples, 0.29%)</title><rect x="746.2" y="659.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="749.2" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.29%)</title><rect x="749.7" y="691.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="752.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="753.1" y="691.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="756.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="753.1" y="675.0" width="6.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="756.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.58%)</title><rect x="753.1" y="659.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="756.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.58%)</title><rect x="753.1" y="643.0" width="6.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="756.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.58%)</title><rect x="753.1" y="627.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="756.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.29%)</title><rect x="760.0" y="691.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="763.0" y="702.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.29%)</title><rect x="763.4" y="707.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="766.4" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.29%)</title><rect x="766.9" y="723.0" width="3.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="769.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.29%)</title><rect x="766.9" y="707.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="769.9" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.29%)</title><rect x="766.9" y="691.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="769.9" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.29%)</title><rect x="766.9" y="675.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="769.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="770.3" y="723.0" width="6.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="773.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.58%)</title><rect x="770.3" y="707.0" width="6.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="773.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.58%)</title><rect x="770.3" y="691.0" width="6.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.29%)</title><rect x="770.3" y="675.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="773.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="770.3" y="659.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="773.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.29%)</title><rect x="773.7" y="675.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="776.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$299/538667698.accept (1 samples, 0.29%)</title><rect x="773.7" y="659.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="776.7" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (1 samples, 0.29%)</title><rect x="773.7" y="643.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="776.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.29%)</title><rect x="773.7" y="627.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="776.7" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.29%)</title><rect x="773.7" y="611.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="776.7" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.29%)</title><rect x="773.7" y="595.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="776.7" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (12 samples, 3.50%)</title><rect x="777.2" y="803.0" width="41.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="780.2" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (11 samples, 3.21%)</title><rect x="780.6" y="787.0" width="37.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="783.6" y="798.0">jav..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 0.58%)</title><rect x="818.5" y="851.0" width="6.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="821.5" y="862.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.29%)</title><rect x="818.5" y="835.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="821.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.29%)</title><rect x="821.9" y="835.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.29%)</title><rect x="821.9" y="819.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="824.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.29%)</title><rect x="821.9" y="803.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="824.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.29%)</title><rect x="821.9" y="787.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="824.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.29%)</title><rect x="821.9" y="771.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="824.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.29%)</title><rect x="821.9" y="755.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.29%)</title><rect x="821.9" y="739.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.29%)</title><rect x="821.9" y="723.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.9" y="734.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.park (1 samples, 0.29%)</title><rect x="821.9" y="707.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.9" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.29%)</title><rect x="821.9" y="691.0" width="3.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="824.9" y="702.0"></text>
</g>
<g>
<title>start_thread (106 samples, 30.90%)</title><rect x="825.3" y="851.0" width="364.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="828.3" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (106 samples, 30.90%)</title><rect x="825.3" y="835.0" width="364.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="828.3" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 4.08%)</title><rect x="825.3" y="819.0" width="48.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="828.3" y="830.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 4.08%)</title><rect x="825.3" y="803.0" width="48.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="828.3" y="814.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 3.79%)</title><rect x="825.3" y="787.0" width="44.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="828.3" y="798.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (13 samples, 3.79%)</title><rect x="825.3" y="771.0" width="44.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="828.3" y="782.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 2.62%)</title><rect x="839.1" y="755.0" width="31.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="842.1" y="766.0">G1..</text>
</g>
<g>
<title>G1ParGCAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, unsigned char) (1 samples, 0.29%)</title><rect x="859.7" y="739.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="862.7" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::par_allocate_during_gc(InCSetState, unsigned long, unsigned char) (1 samples, 0.29%)</title><rect x="859.7" y="723.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="862.7" y="734.0"></text>
</g>
<g>
<title>G1AllocRegion::attempt_allocation_locked(unsigned long, bool) (1 samples, 0.29%)</title><rect x="859.7" y="707.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="862.7" y="718.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.29%)</title><rect x="859.7" y="691.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="862.7" y="702.0"></text>
</g>
<g>
<title>G1AllocRegion::fill_up_remaining_space(HeapRegion*, bool) (1 samples, 0.29%)</title><rect x="859.7" y="675.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="862.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.29%)</title><rect x="859.7" y="659.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="862.7" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (2 samples, 0.58%)</title><rect x="863.2" y="739.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.2" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (1 samples, 0.29%)</title><rect x="870.1" y="787.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="873.1" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (1 samples, 0.29%)</title><rect x="870.1" y="771.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="873.1" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (1 samples, 0.29%)</title><rect x="870.1" y="755.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="873.1" y="766.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (1 samples, 0.29%)</title><rect x="870.1" y="739.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="873.1" y="750.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.29%)</title><rect x="870.1" y="723.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="873.1" y="734.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (1 samples, 0.29%)</title><rect x="870.1" y="707.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.1" y="718.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (1 samples, 0.29%)</title><rect x="870.1" y="691.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="873.1" y="702.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.29%)</title><rect x="870.1" y="675.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="873.1" y="686.0"></text>
</g>
<g>
<title>G1UpdateRSOrPushRefOopClosure::do_oop(unsigned int*) (1 samples, 0.29%)</title><rect x="870.1" y="659.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="873.1" y="670.0"></text>
</g>
<g>
<title>JavaThread::run() (92 samples, 26.82%)</title><rect x="873.5" y="819.0" width="316.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="876.5" y="830.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (92 samples, 26.82%)</title><rect x="873.5" y="803.0" width="316.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.5" y="814.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (92 samples, 26.82%)</title><rect x="873.5" y="787.0" width="316.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.5" y="798.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 26.53%)</title><rect x="873.5" y="771.0" width="313.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="876.5" y="782.0">CompileBroker::invoke_compiler_on_method(C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (89 samples, 25.95%)</title><rect x="873.5" y="755.0" width="306.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.5" y="766.0">C2Compiler::compile_method(ciEnv*, ciMeth..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (89 samples, 25.95%)</title><rect x="873.5" y="739.0" width="306.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="876.5" y="750.0">Compile::Compile(ciEnv*, C2Compiler*, ciM..</text>
</g>
<g>
<title>Compile::Code_Gen() (42 samples, 12.24%)</title><rect x="873.5" y="723.0" width="144.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.5" y="734.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.29%)</title><rect x="873.5" y="707.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="876.5" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.29%)</title><rect x="873.5" y="691.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="876.5" y="702.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.29%)</title><rect x="873.5" y="675.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="876.5" y="686.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.58%)</title><rect x="876.9" y="707.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="879.9" y="718.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.29%)</title><rect x="880.4" y="691.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="883.4" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.29%)</title><rect x="880.4" y="675.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.4" y="686.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.29%)</title><rect x="880.4" y="659.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="883.4" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (7 samples, 2.04%)</title><rect x="883.8" y="707.0" width="24.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="886.8" y="718.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.29%)</title><rect x="883.8" y="691.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="886.8" y="702.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.29%)</title><rect x="887.3" y="691.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="890.3" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 1.46%)</title><rect x="890.7" y="691.0" width="17.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="893.7" y="702.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.29%)</title><rect x="901.0" y="675.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="904.0" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.29%)</title><rect x="904.5" y="675.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.5" y="686.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.29%)</title><rect x="907.9" y="707.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="910.9" y="718.0"></text>
</g>
<g>
<title>PhaseBlockLayout::grow_traces() (1 samples, 0.29%)</title><rect x="907.9" y="691.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="910.9" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.58%)</title><rect x="911.3" y="707.0" width="6.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="914.3" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 0.58%)</title><rect x="911.3" y="691.0" width="6.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="914.3" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (2 samples, 0.58%)</title><rect x="911.3" y="675.0" width="6.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="914.3" y="686.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.58%)</title><rect x="911.3" y="659.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="914.3" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (29 samples, 8.45%)</title><rect x="918.2" y="707.0" width="99.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="921.2" y="718.0">PhaseChaitin..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.29%)</title><rect x="925.1" y="691.0" width="3.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="928.1" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.58%)</title><rect x="928.5" y="691.0" width="6.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="931.5" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.29%)</title><rect x="932.0" y="675.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="935.0" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="932.0" y="659.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.0" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.29%)</title><rect x="935.4" y="691.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="938.4" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.29%)</title><rect x="935.4" y="675.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="938.4" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 1.46%)</title><rect x="938.9" y="691.0" width="17.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="941.9" y="702.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.29%)</title><rect x="949.2" y="675.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="952.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.29%)</title><rect x="952.6" y="675.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="955.6" y="686.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.29%)</title><rect x="952.6" y="659.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="955.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 2.62%)</title><rect x="956.1" y="691.0" width="30.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="959.1" y="702.0">Ph..</text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.29%)</title><rect x="959.5" y="675.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="962.5" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 1.75%)</title><rect x="962.9" y="675.0" width="20.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.9" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.87%)</title><rect x="973.3" y="659.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.3" y="670.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.29%)</title><rect x="983.6" y="675.0" width="3.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="986.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.29%)</title><rect x="987.0" y="691.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="990.0" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.29%)</title><rect x="990.5" y="691.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="993.5" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.29%)</title><rect x="990.5" y="675.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="993.5" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.29%)</title><rect x="993.9" y="691.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.9" y="702.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.29%)</title><rect x="993.9" y="675.0" width="3.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="996.9" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 1.46%)</title><rect x="997.3" y="691.0" width="17.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1000.3" y="702.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 1.17%)</title><rect x="1000.8" y="675.0" width="13.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1003.8" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.29%)</title><rect x="1007.7" y="659.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1010.7" y="670.0"></text>
</g>
<g>
<title>PhaseLive::getfreeset() (1 samples, 0.29%)</title><rect x="1011.1" y="659.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1014.1" y="670.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.29%)</title><rect x="1011.1" y="643.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1014.1" y="654.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.29%)</title><rect x="1014.5" y="691.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1017.5" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 11.66%)</title><rect x="1018.0" y="723.0" width="137.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1021.0" y="734.0">Compile::Optimize()</text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.29%)</title><rect x="1018.0" y="707.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1021.0" y="718.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.29%)</title><rect x="1018.0" y="691.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1021.0" y="702.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.29%)</title><rect x="1018.0" y="675.0" width="3.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1021.0" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (31 samples, 9.04%)</title><rect x="1021.4" y="707.0" width="106.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="718.0">PhaseIdealLoo..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1021.4" y="691.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1024.4" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1021.4" y="675.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1021.4" y="659.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1024.4" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.29%)</title><rect x="1021.4" y="643.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1024.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, Node*) (1 samples, 0.29%)</title><rect x="1021.4" y="627.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1024.4" y="638.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.29%)</title><rect x="1021.4" y="611.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1024.4" y="622.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.29%)</title><rect x="1021.4" y="595.0" width="3.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1024.4" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.29%)</title><rect x="1024.9" y="691.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1027.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.29%)</title><rect x="1024.9" y="675.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (22 samples, 6.41%)</title><rect x="1028.3" y="691.0" width="75.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1031.3" y="702.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (21 samples, 6.12%)</title><rect x="1031.7" y="675.0" width="72.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1034.7" y="686.0">PhaseIde..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.29%)</title><rect x="1038.6" y="659.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1041.6" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (18 samples, 5.25%)</title><rect x="1042.1" y="659.0" width="61.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1045.1" y="670.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (4 samples, 1.17%)</title><rect x="1086.8" y="643.0" width="13.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.29%)</title><rect x="1100.6" y="643.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.6" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (3 samples, 0.87%)</title><rect x="1104.0" y="691.0" width="10.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.0" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.87%)</title><rect x="1114.3" y="691.0" width="10.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.3" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.87%)</title><rect x="1114.3" y="675.0" width="10.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1117.3" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.58%)</title><rect x="1114.3" y="659.0" width="6.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1117.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.58%)</title><rect x="1114.3" y="643.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1117.3" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.29%)</title><rect x="1121.2" y="659.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1124.2" y="670.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1121.2" y="643.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.2" y="654.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.29%)</title><rect x="1121.2" y="627.0" width="3.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1124.2" y="638.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1121.2" y="611.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1124.2" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1121.2" y="595.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.2" y="606.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.29%)</title><rect x="1121.2" y="579.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1124.2" y="590.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.29%)</title><rect x="1124.6" y="691.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1127.6" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.29%)</title><rect x="1124.6" y="675.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1127.6" y="686.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1124.6" y="659.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.6" y="670.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1124.6" y="643.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.6" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="627.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1127.6" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="611.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.6" y="622.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="595.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1127.6" y="606.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="579.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1127.6" y="590.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="563.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.6" y="574.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="547.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.6" y="558.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="531.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.6" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="515.0" width="3.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1127.6" y="526.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1124.6" y="499.0" width="3.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.6" y="510.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1124.6" y="483.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1127.6" y="494.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (7 samples, 2.04%)</title><rect x="1128.1" y="707.0" width="24.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.1" y="718.0">P..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (6 samples, 1.75%)</title><rect x="1131.5" y="691.0" width="20.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1134.5" y="702.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1131.5" y="675.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1134.5" y="686.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1131.5" y="659.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1134.5" y="670.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1135.0" y="675.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.0" y="686.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1135.0" y="659.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.0" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1135.0" y="643.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.0" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1135.0" y="627.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.0" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.29%)</title><rect x="1138.4" y="675.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1141.4" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1141.8" y="675.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.8" y="686.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.29%)</title><rect x="1141.8" y="659.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.8" y="670.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.29%)</title><rect x="1145.3" y="675.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.3" y="686.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.29%)</title><rect x="1145.3" y="659.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1148.3" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.29%)</title><rect x="1145.3" y="643.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1148.3" y="654.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1145.3" y="627.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.3" y="638.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1145.3" y="611.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.3" y="622.0"></text>
</g>
<g>
<title>StoreNode::Identity(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1148.7" y="675.0" width="3.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.7" y="686.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.29%)</title><rect x="1148.7" y="659.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.7" y="670.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.29%)</title><rect x="1148.7" y="643.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.7" y="654.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.29%)</title><rect x="1148.7" y="627.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.7" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.29%)</title><rect x="1152.2" y="707.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.2" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.29%)</title><rect x="1152.2" y="691.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.2" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.29%)</title><rect x="1152.2" y="675.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="686.0"></text>
</g>
<g>
<title>MulNode::Value(PhaseTransform*) const (1 samples, 0.29%)</title><rect x="1152.2" y="659.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.2" y="670.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.29%)</title><rect x="1152.2" y="643.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.2" y="654.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.29%)</title><rect x="1152.2" y="627.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1155.2" y="638.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.29%)</title><rect x="1152.2" y="611.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.2" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.29%)</title><rect x="1152.2" y="595.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1155.2" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.29%)</title><rect x="1152.2" y="579.0" width="3.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.2" y="590.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.29%)</title><rect x="1152.2" y="563.0" width="3.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.2" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.75%)</title><rect x="1155.6" y="723.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.75%)</title><rect x="1155.6" y="707.0" width="20.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.6" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.75%)</title><rect x="1155.6" y="691.0" width="20.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1158.6" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.75%)</title><rect x="1155.6" y="675.0" width="20.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.75%)</title><rect x="1155.6" y="659.0" width="20.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1158.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.75%)</title><rect x="1155.6" y="643.0" width="20.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.6" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 1.75%)</title><rect x="1155.6" y="627.0" width="20.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 1.75%)</title><rect x="1155.6" y="611.0" width="20.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1158.6" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 1.75%)</title><rect x="1155.6" y="595.0" width="20.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 1.75%)</title><rect x="1155.6" y="579.0" width="20.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 1.75%)</title><rect x="1155.6" y="563.0" width="20.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 1.75%)</title><rect x="1155.6" y="547.0" width="20.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.6" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.87%)</title><rect x="1155.6" y="531.0" width="10.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1158.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.87%)</title><rect x="1155.6" y="515.0" width="10.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1158.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.87%)</title><rect x="1155.6" y="499.0" width="10.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.87%)</title><rect x="1155.6" y="483.0" width="10.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1158.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.87%)</title><rect x="1155.6" y="467.0" width="10.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.87%)</title><rect x="1155.6" y="451.0" width="10.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1158.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1155.6" y="435.0" width="6.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1155.6" y="419.0" width="6.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1155.6" y="403.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1155.6" y="387.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1158.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1155.6" y="371.0" width="3.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1155.6" y="355.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1158.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1155.6" y="339.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1155.6" y="323.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1155.6" y="307.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1155.6" y="291.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1155.6" y="275.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1155.6" y="259.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1155.6" y="243.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1155.6" y="227.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1155.6" y="211.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1155.6" y="195.0" width="3.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1155.6" y="179.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1155.6" y="163.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.6" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1155.6" y="147.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1158.6" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1155.6" y="131.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1158.6" y="142.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.29%)</title><rect x="1155.6" y="115.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.6" y="126.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.29%)</title><rect x="1155.6" y="99.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.6" y="110.0"></text>
</g>
<g>
<title>MergeMemNode::make(Compile*, Node*) (1 samples, 0.29%)</title><rect x="1155.6" y="83.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.6" y="94.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.29%)</title><rect x="1155.6" y="67.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1158.6" y="78.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.29%)</title><rect x="1155.6" y="51.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.6" y="62.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.29%)</title><rect x="1155.6" y="35.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.6" y="46.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.29%)</title><rect x="1159.0" y="403.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::transfer_exceptions_into_jvms() (1 samples, 0.29%)</title><rect x="1159.0" y="387.0" width="3.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.0" y="398.0"></text>
</g>
<g>
<title>Node::add_prec(Node*) (1 samples, 0.29%)</title><rect x="1159.0" y="371.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.0" y="382.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.29%)</title><rect x="1159.0" y="355.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.0" y="366.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.29%)</title><rect x="1159.0" y="339.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1162.0" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.5" y="435.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.5" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.5" y="419.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.5" y="403.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.5" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.5" y="387.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.5" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.5" y="371.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.5" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.5" y="355.0" width="3.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.5" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1162.5" y="339.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.5" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.29%)</title><rect x="1162.5" y="323.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.5" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.29%)</title><rect x="1162.5" y="307.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.29%)</title><rect x="1162.5" y="291.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.5" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.29%)</title><rect x="1162.5" y="275.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.29%)</title><rect x="1162.5" y="259.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.5" y="270.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1162.5" y="243.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.5" y="254.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.29%)</title><rect x="1162.5" y="227.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.5" y="238.0"></text>
</g>
<g>
<title>Type_Array::grow(unsigned int) (1 samples, 0.29%)</title><rect x="1162.5" y="211.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.5" y="222.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.29%)</title><rect x="1162.5" y="195.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1165.5" y="206.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.29%)</title><rect x="1165.9" y="531.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.9" y="542.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.29%)</title><rect x="1165.9" y="515.0" width="3.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.9" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1169.4" y="531.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1172.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1169.4" y="515.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1172.4" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1169.4" y="499.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1169.4" y="483.0" width="6.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1169.4" y="467.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.4" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1169.4" y="451.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1172.4" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1169.4" y="435.0" width="6.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1172.4" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1169.4" y="419.0" width="6.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1172.4" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1169.4" y="403.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1169.4" y="387.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1169.4" y="371.0" width="6.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1172.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1169.4" y="355.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.58%)</title><rect x="1169.4" y="339.0" width="6.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.4" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.58%)</title><rect x="1169.4" y="323.0" width="6.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1172.4" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.58%)</title><rect x="1169.4" y="307.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.58%)</title><rect x="1169.4" y="291.0" width="6.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.58%)</title><rect x="1169.4" y="275.0" width="6.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.58%)</title><rect x="1169.4" y="259.0" width="6.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1172.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.29%)</title><rect x="1169.4" y="243.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.4" y="254.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.29%)</title><rect x="1169.4" y="227.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.4" y="238.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.29%)</title><rect x="1169.4" y="211.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="222.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.29%)</title><rect x="1169.4" y="195.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.4" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.29%)</title><rect x="1169.4" y="179.0" width="3.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1172.4" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.29%)</title><rect x="1169.4" y="163.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.4" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.29%)</title><rect x="1169.4" y="147.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.29%)</title><rect x="1172.8" y="243.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.29%)</title><rect x="1172.8" y="227.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.8" y="238.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.29%)</title><rect x="1172.8" y="211.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="222.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.29%)</title><rect x="1172.8" y="195.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.8" y="206.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.29%)</title><rect x="1172.8" y="179.0" width="3.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.8" y="190.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.29%)</title><rect x="1172.8" y="163.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1175.8" y="174.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.29%)</title><rect x="1172.8" y="147.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.8" y="158.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (1 samples, 0.29%)</title><rect x="1176.2" y="723.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.2" y="734.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.29%)</title><rect x="1176.2" y="707.0" width="3.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1179.2" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.58%)</title><rect x="1179.7" y="755.0" width="6.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.58%)</title><rect x="1179.7" y="739.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.58%)</title><rect x="1179.7" y="723.0" width="6.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.7" y="734.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (2 samples, 0.58%)</title><rect x="1179.7" y="707.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.7" y="718.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, bool, bool, RTMState) (2 samples, 0.58%)</title><rect x="1179.7" y="691.0" width="6.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="702.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (2 samples, 0.58%)</title><rect x="1179.7" y="675.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="686.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, bool) (1 samples, 0.29%)</title><rect x="1179.7" y="659.0" width="3.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.7" y="670.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long, bool) (1 samples, 0.29%)</title><rect x="1179.7" y="643.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="654.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int) (1 samples, 0.29%)</title><rect x="1183.1" y="659.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (1 samples, 0.29%)</title><rect x="1183.1" y="643.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.29%)</title><rect x="1183.1" y="627.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>G1CodeRootSet::add(nmethod*) (1 samples, 0.29%)</title><rect x="1183.1" y="611.0" width="3.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.29%)</title><rect x="1186.6" y="771.0" width="3.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.6" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.29%)</title><rect x="1186.6" y="755.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.29%)</title><rect x="1186.6" y="739.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="750.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.29%)</title><rect x="1186.6" y="723.0" width="3.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.6" y="734.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.29%)</title><rect x="1186.6" y="707.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.6" y="718.0"></text>
</g>
</g>
</svg>
