<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (786 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.38%)</title><rect x="10.0" y="467.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.38%)</title><rect x="10.0" y="451.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.13%)</title><rect x="10.0" y="435.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.25%)</title><rect x="11.5" y="435.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.5" y="446.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.13%)</title><rect x="11.5" y="419.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.5" y="430.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.13%)</title><rect x="11.5" y="403.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.5" y="414.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.13%)</title><rect x="11.5" y="387.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.5" y="398.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.13%)</title><rect x="13.0" y="419.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="16.0" y="430.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.13%)</title><rect x="13.0" y="403.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="16.0" y="414.0"></text>
</g>
<g>
<title>[unknown_Java] (3 samples, 0.38%)</title><rect x="14.5" y="467.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="17.5" y="478.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.13%)</title><rect x="14.5" y="451.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.5" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.13%)</title><rect x="16.0" y="451.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="19.0" y="462.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.13%)</title><rect x="16.0" y="435.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="19.0" y="446.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.13%)</title><rect x="17.5" y="451.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="20.5" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (203 samples, 25.83%)</title><rect x="19.0" y="467.0" width="304.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="22.0" y="478.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (203 samples, 25.83%)</title><rect x="19.0" y="451.0" width="304.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.0" y="462.0">com/linecorp/decaton/processor/runtime/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (202 samples, 25.70%)</title><rect x="20.5" y="435.0" width="303.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="23.5" y="446.0">com/linecorp/decaton/processor/runtime/in..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 0.38%)</title><rect x="22.0" y="419.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.0" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (3 samples, 0.38%)</title><rect x="22.0" y="403.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.0" y="414.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (3 samples, 0.38%)</title><rect x="22.0" y="387.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="25.0" y="398.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.38%)</title><rect x="22.0" y="371.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.0" y="382.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.38%)</title><rect x="22.0" y="355.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.0" y="366.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.38%)</title><rect x="22.0" y="339.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.0" y="350.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.38%)</title><rect x="22.0" y="323.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.0" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.25%)</title><rect x="22.0" y="307.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.0" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.25%)</title><rect x="22.0" y="291.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.0" y="302.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.25%)</title><rect x="22.0" y="275.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="25.0" y="286.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="25.0" y="307.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.0" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="25.0" y="291.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="28.0" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.13%)</title><rect x="25.0" y="275.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="286.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.begin (1 samples, 0.13%)</title><rect x="25.0" y="259.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.0" y="270.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.13%)</title><rect x="25.0" y="243.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.0" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.13%)</title><rect x="26.5" y="419.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.5" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.13%)</title><rect x="26.5" y="403.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.5" y="414.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.13%)</title><rect x="26.5" y="387.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/2131315665.accept (1 samples, 0.13%)</title><rect x="26.5" y="371.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="29.5" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.13%)</title><rect x="26.5" y="355.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.5" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.13%)</title><rect x="26.5" y="339.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="29.5" y="350.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.13%)</title><rect x="26.5" y="323.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.5" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.13%)</title><rect x="28.0" y="419.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.0" y="430.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (1 samples, 0.13%)</title><rect x="28.0" y="403.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.0" y="414.0"></text>
</g>
<g>
<title>java/time/Duration.create (1 samples, 0.13%)</title><rect x="28.0" y="387.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.0" y="398.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.13%)</title><rect x="29.5" y="419.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.5" y="430.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.13%)</title><rect x="29.5" y="403.0" width="1.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="32.5" y="414.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="29.5" y="387.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="32.5" y="398.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (164 samples, 20.87%)</title><rect x="31.0" y="419.0" width="246.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.0" y="430.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (1 samples, 0.13%)</title><rect x="32.5" y="403.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="35.5" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1072452175.accept (158 samples, 20.10%)</title><rect x="34.0" y="403.0" width="237.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="37.0" y="414.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (157 samples, 19.97%)</title><rect x="34.0" y="387.0" width="235.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.0" y="398.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (144 samples, 18.32%)</title><rect x="34.0" y="371.0" width="216.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="37.0" y="382.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.maybeRecordQuotaUsage (1 samples, 0.13%)</title><rect x="35.5" y="355.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="38.5" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (140 samples, 17.81%)</title><rect x="37.0" y="355.0" width="210.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.0" y="366.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (140 samples, 17.81%)</title><rect x="37.0" y="339.0" width="210.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.0" y="350.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (140 samples, 17.81%)</title><rect x="37.0" y="323.0" width="210.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.0" y="334.0">java/util/concurrent/Executo..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (140 samples, 17.81%)</title><rect x="37.0" y="307.0" width="210.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.0" y="318.0">java/util/concurrent/ThreadP..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (139 samples, 17.68%)</title><rect x="38.5" y="291.0" width="208.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.5" y="302.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (115 samples, 14.63%)</title><rect x="38.5" y="275.0" width="172.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.5" y="286.0">java/util/concurrent/L..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.91%)</title><rect x="38.5" y="259.0" width="22.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.5" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.91%)</title><rect x="38.5" y="243.0" width="22.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.5" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.91%)</title><rect x="38.5" y="227.0" width="22.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.5" y="238.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.13%)</title><rect x="59.5" y="211.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.5" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (17 samples, 2.16%)</title><rect x="61.0" y="259.0" width="25.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="64.0" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (17 samples, 2.16%)</title><rect x="61.0" y="243.0" width="25.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.0" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.51%)</title><rect x="80.6" y="227.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="83.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.51%)</title><rect x="80.6" y="211.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="83.6" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 10.56%)</title><rect x="86.6" y="259.0" width="124.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.6" y="270.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 10.56%)</title><rect x="86.6" y="243.0" width="124.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="89.6" y="254.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 10.56%)</title><rect x="86.6" y="227.0" width="124.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.6" y="238.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 10.56%)</title><rect x="86.6" y="211.0" width="124.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.6" y="222.0">java/util/concu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (83 samples, 10.56%)</title><rect x="86.6" y="195.0" width="124.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.6" y="206.0">jdk/internal/mi..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.13%)</title><rect x="91.1" y="179.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="94.1" y="190.0"></text>
</g>
<g>
<title>Unsafe_Unpark (31 samples, 3.94%)</title><rect x="92.6" y="179.0" width="46.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="95.6" y="190.0">Unsa..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.13%)</title><rect x="97.1" y="163.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="100.1" y="174.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.25%)</title><rect x="98.6" y="163.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="101.6" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.38%)</title><rect x="101.6" y="163.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="104.6" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.38%)</title><rect x="106.1" y="163.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="109.1" y="174.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.13%)</title><rect x="110.6" y="163.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="113.6" y="174.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.76%)</title><rect x="112.1" y="163.0" width="9.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="115.1" y="174.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="121.1" y="163.0" width="1.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="124.1" y="174.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.38%)</title><rect x="122.6" y="163.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="125.6" y="174.0"></text>
</g>
<g>
<title>pthread_mutex_lock (7 samples, 0.89%)</title><rect x="127.1" y="163.0" width="10.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="130.1" y="174.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.13%)</title><rect x="137.6" y="163.0" width="1.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="140.6" y="174.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 5.73%)</title><rect x="139.1" y="179.0" width="67.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="142.1" y="190.0">__pthre..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.25%)</title><rect x="206.7" y="179.0" width="3.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="209.7" y="190.0"></text>
</g>
<g>
<title>_init (1 samples, 0.13%)</title><rect x="209.7" y="179.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="212.7" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (18 samples, 2.29%)</title><rect x="211.2" y="275.0" width="27.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.2" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (18 samples, 2.29%)</title><rect x="211.2" y="259.0" width="27.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="214.2" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.76%)</title><rect x="229.2" y="243.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.76%)</title><rect x="229.2" y="227.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.76%)</title><rect x="238.2" y="275.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="241.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.76%)</title><rect x="238.2" y="259.0" width="9.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.76%)</title><rect x="238.2" y="243.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="241.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (6 samples, 0.76%)</title><rect x="238.2" y="227.0" width="9.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="241.2" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.25%)</title><rect x="247.2" y="355.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.2" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (8 samples, 1.02%)</title><rect x="250.2" y="371.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="253.2" y="382.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (8 samples, 1.02%)</title><rect x="250.2" y="355.0" width="12.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.02%)</title><rect x="250.2" y="339.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="253.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (8 samples, 1.02%)</title><rect x="250.2" y="323.0" width="12.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.51%)</title><rect x="256.2" y="307.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.51%)</title><rect x="256.2" y="291.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.2" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (1 samples, 0.13%)</title><rect x="262.2" y="371.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="265.2" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.13%)</title><rect x="262.2" y="355.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.2" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="262.2" y="339.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="265.2" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.13%)</title><rect x="262.2" y="323.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.2" y="334.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.13%)</title><rect x="262.2" y="307.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.2" y="318.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="262.2" y="291.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="265.2" y="302.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="262.2" y="275.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.51%)</title><rect x="263.7" y="371.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 0.51%)</title><rect x="263.7" y="355.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="266.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.51%)</title><rect x="263.7" y="339.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="266.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.51%)</title><rect x="263.7" y="323.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.7" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.next (1 samples, 0.13%)</title><rect x="269.7" y="387.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.7" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (4 samples, 0.51%)</title><rect x="271.2" y="403.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (4 samples, 0.51%)</title><rect x="271.2" y="387.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.2" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.51%)</title><rect x="271.2" y="371.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="274.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (4 samples, 0.51%)</title><rect x="271.2" y="355.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="274.2" y="366.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.13%)</title><rect x="275.7" y="339.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.7" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.94%)</title><rect x="277.2" y="419.0" width="46.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="280.2" y="430.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.94%)</title><rect x="277.2" y="403.0" width="46.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="280.2" y="414.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (28 samples, 3.56%)</title><rect x="277.2" y="387.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.2" y="398.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (28 samples, 3.56%)</title><rect x="277.2" y="371.0" width="42.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="280.2" y="382.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (28 samples, 3.56%)</title><rect x="277.2" y="355.0" width="42.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="280.2" y="366.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (26 samples, 3.31%)</title><rect x="277.2" y="339.0" width="39.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.2" y="350.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (26 samples, 3.31%)</title><rect x="277.2" y="323.0" width="39.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.2" y="334.0">org..</text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.51%)</title><rect x="277.2" y="307.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="280.2" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (4 samples, 0.51%)</title><rect x="277.2" y="291.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="280.2" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.51%)</title><rect x="277.2" y="275.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.2" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.51%)</title><rect x="277.2" y="259.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="280.2" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.51%)</title><rect x="277.2" y="243.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="280.2" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 1.40%)</title><rect x="283.2" y="307.0" width="16.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.2" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.drain (2 samples, 0.25%)</title><rect x="283.2" y="291.0" width="3.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="286.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchResponseMetricAggregator.record (2 samples, 0.25%)</title><rect x="283.2" y="275.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.2" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.remove (1 samples, 0.13%)</title><rect x="283.2" y="259.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.2" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.13%)</title><rect x="284.7" y="259.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="287.7" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.13%)</title><rect x="284.7" y="243.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.7" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.13%)</title><rect x="286.2" y="291.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="289.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.13%)</title><rect x="286.2" y="275.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="289.2" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.13%)</title><rect x="286.2" y="259.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.2" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.13%)</title><rect x="286.2" y="243.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.2" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.13%)</title><rect x="286.2" y="227.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="289.2" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.13%)</title><rect x="286.2" y="211.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="289.2" y="222.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.13%)</title><rect x="286.2" y="195.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="289.2" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.13%)</title><rect x="286.2" y="179.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.2" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.checkCustomized (1 samples, 0.13%)</title><rect x="286.2" y="163.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.2" y="174.0"></text>
</g>
<g>
<title>updateBytesCRC32C (1 samples, 0.13%)</title><rect x="286.2" y="147.0" width="1.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="289.2" y="158.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.89%)</title><rect x="287.7" y="291.0" width="10.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="290.7" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (7 samples, 0.89%)</title><rect x="287.7" y="275.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.7" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (4 samples, 0.51%)</title><rect x="292.2" y="259.0" width="6.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="295.2" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.51%)</title><rect x="292.2" y="243.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="295.2" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (2 samples, 0.25%)</title><rect x="295.2" y="227.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="298.2" y="238.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.13%)</title><rect x="298.2" y="291.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.13%)</title><rect x="298.2" y="275.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="301.2" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="298.2" y="259.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="301.2" y="270.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="298.2" y="243.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="301.2" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="298.2" y="227.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="301.2" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="298.2" y="211.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="301.2" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="298.2" y="195.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="301.2" y="206.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="298.2" y="179.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="301.2" y="190.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.13%)</title><rect x="298.2" y="163.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="301.2" y="174.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (10 samples, 1.27%)</title><rect x="299.7" y="307.0" width="15.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="302.7" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (9 samples, 1.15%)</title><rect x="301.2" y="291.0" width="13.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.2" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (9 samples, 1.15%)</title><rect x="301.2" y="275.0" width="13.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.2" y="286.0"></text>
</g>
<g>
<title>java/util/Optional.of (9 samples, 1.15%)</title><rect x="301.2" y="259.0" width="13.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="304.2" y="270.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.13%)</title><rect x="310.3" y="243.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="313.3" y="254.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.25%)</title><rect x="311.8" y="243.0" width="3.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="314.8" y="254.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (1 samples, 0.13%)</title><rect x="314.8" y="307.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="317.8" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.13%)</title><rect x="316.3" y="339.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="319.3" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.13%)</title><rect x="316.3" y="323.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="319.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.13%)</title><rect x="316.3" y="307.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="319.3" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.13%)</title><rect x="316.3" y="291.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="319.3" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="316.3" y="275.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="319.3" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="316.3" y="259.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="319.3" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.13%)</title><rect x="317.8" y="339.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.13%)</title><rect x="317.8" y="323.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.8" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.13%)</title><rect x="317.8" y="307.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.13%)</title><rect x="317.8" y="291.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="317.8" y="275.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="320.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="317.8" y="259.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.8" y="270.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.13%)</title><rect x="319.3" y="387.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="322.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.13%)</title><rect x="319.3" y="371.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="322.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.13%)</title><rect x="319.3" y="355.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="322.3" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionsNeedingValidation (1 samples, 0.13%)</title><rect x="319.3" y="339.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="322.3" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.collectPartitions (1 samples, 0.13%)</title><rect x="319.3" y="323.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="322.3" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.13%)</title><rect x="319.3" y="307.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="322.3" y="318.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.13%)</title><rect x="319.3" y="291.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="322.3" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.13%)</title><rect x="320.8" y="387.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="323.8" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.13%)</title><rect x="320.8" y="371.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.8" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.13%)</title><rect x="320.8" y="355.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.8" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.13%)</title><rect x="320.8" y="339.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.8" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.13%)</title><rect x="322.3" y="387.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="325.3" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.13%)</title><rect x="322.3" y="371.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="325.3" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.13%)</title><rect x="322.3" y="355.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashSet.add (1 samples, 0.13%)</title><rect x="322.3" y="339.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="325.3" y="350.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.13%)</title><rect x="322.3" y="323.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="325.3" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.13%)</title><rect x="322.3" y="307.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="325.3" y="318.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.13%)</title><rect x="322.3" y="291.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="325.3" y="302.0"></text>
</g>
<g>
<title>java/lang/Thread.run (548 samples, 69.72%)</title><rect x="323.8" y="467.0" width="822.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="326.8" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (548 samples, 69.72%)</title><rect x="323.8" y="451.0" width="822.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="326.8" y="462.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (548 samples, 69.72%)</title><rect x="323.8" y="435.0" width="822.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="326.8" y="446.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/819239503.run (329 samples, 41.86%)</title><rect x="325.3" y="419.0" width="493.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.3" y="430.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambd..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (329 samples, 41.86%)</title><rect x="325.3" y="403.0" width="493.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.3" y="414.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (329 samples, 41.86%)</title><rect x="325.3" y="387.0" width="493.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.3" y="398.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (329 samples, 41.86%)</title><rect x="325.3" y="371.0" width="493.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.3" y="382.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sche..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (31 samples, 3.94%)</title><rect x="331.3" y="355.0" width="46.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="334.3" y="366.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (31 samples, 3.94%)</title><rect x="331.3" y="339.0" width="46.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="334.3" y="350.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (31 samples, 3.94%)</title><rect x="331.3" y="323.0" width="46.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="334.3" y="334.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (20 samples, 2.54%)</title><rect x="347.8" y="307.0" width="30.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="350.8" y="318.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (20 samples, 2.54%)</title><rect x="347.8" y="291.0" width="30.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.8" y="302.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/249981772.accept (18 samples, 2.29%)</title><rect x="350.8" y="275.0" width="27.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="353.8" y="286.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (18 samples, 2.29%)</title><rect x="350.8" y="259.0" width="27.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="353.8" y="270.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (18 samples, 2.29%)</title><rect x="350.8" y="243.0" width="27.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.8" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (8 samples, 1.02%)</title><rect x="350.8" y="227.0" width="12.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="353.8" y="238.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (8 samples, 1.02%)</title><rect x="350.8" y="211.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="353.8" y="222.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (8 samples, 1.02%)</title><rect x="350.8" y="195.0" width="12.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="353.8" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/193196880.accept (1 samples, 0.13%)</title><rect x="359.8" y="179.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="362.8" y="190.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.13%)</title><rect x="361.3" y="179.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="364.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (10 samples, 1.27%)</title><rect x="362.8" y="227.0" width="15.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.8" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 0.76%)</title><rect x="368.8" y="211.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.8" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.76%)</title><rect x="368.8" y="195.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="371.8" y="206.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/166999253.accept (1 samples, 0.13%)</title><rect x="368.8" y="179.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="371.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (5 samples, 0.64%)</title><rect x="370.3" y="179.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="373.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (4 samples, 0.51%)</title><rect x="371.8" y="163.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="374.8" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.51%)</title><rect x="371.8" y="147.0" width="6.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="374.8" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.weakCompareAndSet (4 samples, 0.51%)</title><rect x="371.8" y="131.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="374.8" y="142.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (3 samples, 0.38%)</title><rect x="377.8" y="355.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="380.8" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (3 samples, 0.38%)</title><rect x="377.8" y="339.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="380.8" y="350.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 0.38%)</title><rect x="377.8" y="323.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.8" y="334.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.38%)</title><rect x="377.8" y="307.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="380.8" y="318.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.38%)</title><rect x="377.8" y="291.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="380.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.13%)</title><rect x="380.8" y="275.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="383.8" y="286.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (95 samples, 12.09%)</title><rect x="382.3" y="355.0" width="142.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.3" y="366.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (95 samples, 12.09%)</title><rect x="382.3" y="339.0" width="142.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.3" y="350.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (95 samples, 12.09%)</title><rect x="382.3" y="323.0" width="142.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="385.3" y="334.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (95 samples, 12.09%)</title><rect x="382.3" y="307.0" width="142.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="385.3" y="318.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (95 samples, 12.09%)</title><rect x="382.3" y="291.0" width="142.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="385.3" y="302.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (95 samples, 12.09%)</title><rect x="382.3" y="275.0" width="142.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.3" y="286.0">com/fasterxml/jack..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (8 samples, 1.02%)</title><rect x="382.3" y="259.0" width="12.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="385.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 0.64%)</title><rect x="382.3" y="243.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="385.3" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 0.64%)</title><rect x="382.3" y="227.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="385.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (5 samples, 0.64%)</title><rect x="382.3" y="211.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.3" y="222.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.64%)</title><rect x="382.3" y="195.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.3" y="206.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.64%)</title><rect x="382.3" y="179.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="385.3" y="190.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="382.3" y="163.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="385.3" y="174.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.51%)</title><rect x="383.8" y="163.0" width="6.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="386.8" y="174.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.38%)</title><rect x="385.3" y="147.0" width="4.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="388.3" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 0.38%)</title><rect x="389.8" y="243.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="392.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 0.38%)</title><rect x="389.8" y="227.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="392.8" y="238.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.38%)</title><rect x="389.8" y="211.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="392.8" y="222.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.38%)</title><rect x="389.8" y="195.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.8" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.25%)</title><rect x="389.8" y="179.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="392.8" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.25%)</title><rect x="389.8" y="163.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="392.8" y="174.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.25%)</title><rect x="389.8" y="147.0" width="3.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="392.8" y="158.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.13%)</title><rect x="389.8" y="131.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="392.8" y="142.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.13%)</title><rect x="391.3" y="131.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.3" y="142.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.13%)</title><rect x="391.3" y="115.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="394.3" y="126.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.13%)</title><rect x="391.3" y="99.0" width="1.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="394.3" y="110.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="392.8" y="179.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="395.8" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (51 samples, 6.49%)</title><rect x="394.3" y="259.0" width="76.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="397.3" y="270.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.38%)</title><rect x="394.3" y="243.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.3" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.38%)</title><rect x="394.3" y="227.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="397.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (9 samples, 1.15%)</title><rect x="398.8" y="243.0" width="13.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="401.8" y="254.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.25%)</title><rect x="409.3" y="227.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.3" y="238.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (39 samples, 4.96%)</title><rect x="412.3" y="243.0" width="58.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.3" y="254.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (39 samples, 4.96%)</title><rect x="412.3" y="227.0" width="58.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="415.3" y="238.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.89%)</title><rect x="418.3" y="211.0" width="10.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="421.3" y="222.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.25%)</title><rect x="418.3" y="195.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="421.3" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.25%)</title><rect x="418.3" y="179.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="421.3" y="190.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.25%)</title><rect x="418.3" y="163.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="421.3" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.64%)</title><rect x="421.3" y="195.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="424.3" y="206.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (28 samples, 3.56%)</title><rect x="428.9" y="211.0" width="42.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="431.9" y="222.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (28 samples, 3.56%)</title><rect x="428.9" y="195.0" width="42.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="431.9" y="206.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (28 samples, 3.56%)</title><rect x="428.9" y="179.0" width="42.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="431.9" y="190.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.27%)</title><rect x="436.4" y="163.0" width="15.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="439.4" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.13%)</title><rect x="437.9" y="147.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="440.9" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.13%)</title><rect x="437.9" y="131.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.9" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.51%)</title><rect x="439.4" y="147.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="442.4" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.51%)</title><rect x="439.4" y="131.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="442.4" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.51%)</title><rect x="439.4" y="115.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="442.4" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.13%)</title><rect x="443.9" y="99.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="446.9" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.25%)</title><rect x="445.4" y="147.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.4" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.13%)</title><rect x="448.4" y="147.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="451.4" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.13%)</title><rect x="448.4" y="131.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="451.4" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.13%)</title><rect x="449.9" y="147.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.9" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.89%)</title><rect x="451.4" y="163.0" width="10.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.4" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.64%)</title><rect x="454.4" y="147.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="457.4" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.64%)</title><rect x="454.4" y="131.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="457.4" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.64%)</title><rect x="454.4" y="115.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="457.4" y="126.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (5 samples, 0.64%)</title><rect x="454.4" y="99.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.4" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (5 samples, 0.64%)</title><rect x="454.4" y="83.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.4" y="94.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (5 samples, 0.64%)</title><rect x="454.4" y="67.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="457.4" y="78.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (5 samples, 0.64%)</title><rect x="454.4" y="51.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.4" y="62.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (5 samples, 0.64%)</title><rect x="454.4" y="35.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="457.4" y="46.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.51%)</title><rect x="461.9" y="163.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.9" y="174.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.51%)</title><rect x="461.9" y="147.0" width="6.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.9" y="158.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.51%)</title><rect x="461.9" y="131.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.9" y="142.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.51%)</title><rect x="461.9" y="115.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.9" y="126.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.51%)</title><rect x="461.9" y="99.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="464.9" y="110.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.51%)</title><rect x="461.9" y="83.0" width="6.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.9" y="94.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.51%)</title><rect x="461.9" y="67.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="464.9" y="78.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.25%)</title><rect x="467.9" y="163.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="470.9" y="174.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.25%)</title><rect x="467.9" y="147.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.9" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.13%)</title><rect x="467.9" y="131.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.9" y="142.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="469.4" y="131.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="472.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.13%)</title><rect x="469.4" y="115.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="472.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.13%)</title><rect x="469.4" y="99.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="472.4" y="110.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (36 samples, 4.58%)</title><rect x="470.9" y="259.0" width="54.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="473.9" y="270.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (36 samples, 4.58%)</title><rect x="470.9" y="243.0" width="54.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="473.9" y="254.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (36 samples, 4.58%)</title><rect x="470.9" y="227.0" width="54.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.9" y="238.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (36 samples, 4.58%)</title><rect x="470.9" y="211.0" width="54.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.9" y="222.0">com/f..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (36 samples, 4.58%)</title><rect x="470.9" y="195.0" width="54.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="473.9" y="206.0">java/..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.13%)</title><rect x="509.9" y="179.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="512.9" y="190.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.13%)</title><rect x="509.9" y="163.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="512.9" y="174.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 1.02%)</title><rect x="511.4" y="179.0" width="12.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="514.4" y="190.0"></text>
</g>
<g>
<title>[vdso] (8 samples, 1.02%)</title><rect x="511.4" y="163.0" width="12.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="514.4" y="174.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.13%)</title><rect x="523.4" y="179.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="526.4" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (190 samples, 24.17%)</title><rect x="524.9" y="355.0" width="285.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="527.9" y="366.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (33 samples, 4.20%)</title><rect x="526.4" y="339.0" width="49.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="529.4" y="350.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.25%)</title><rect x="526.4" y="323.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="529.4" y="334.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (31 samples, 3.94%)</title><rect x="529.4" y="323.0" width="46.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="532.4" y="334.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (30 samples, 3.82%)</title><rect x="530.9" y="307.0" width="45.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.9" y="318.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.78%)</title><rect x="543.0" y="291.0" width="21.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="546.0" y="302.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.78%)</title><rect x="543.0" y="275.0" width="21.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="546.0" y="286.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.78%)</title><rect x="543.0" y="259.0" width="21.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.0" y="270.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 1.02%)</title><rect x="564.0" y="291.0" width="12.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="567.0" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (8 samples, 1.02%)</title><rect x="564.0" y="275.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.0" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.38%)</title><rect x="564.0" y="259.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="567.0" y="270.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.38%)</title><rect x="564.0" y="243.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.0" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.38%)</title><rect x="564.0" y="227.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.0" y="238.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.13%)</title><rect x="567.0" y="211.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="570.0" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (5 samples, 0.64%)</title><rect x="568.5" y="259.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="571.5" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.51%)</title><rect x="576.0" y="339.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="579.0" y="350.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.51%)</title><rect x="576.0" y="323.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="579.0" y="334.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (96 samples, 12.21%)</title><rect x="582.0" y="339.0" width="144.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="585.0" y="350.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (75 samples, 9.54%)</title><rect x="582.0" y="323.0" width="112.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="585.0" y="334.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (27 samples, 3.44%)</title><rect x="589.5" y="307.0" width="40.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="592.5" y="318.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.13%)</title><rect x="607.5" y="291.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="610.5" y="302.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (1 samples, 0.13%)</title><rect x="607.5" y="275.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="610.5" y="286.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.13%)</title><rect x="607.5" y="259.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="610.5" y="270.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.13%)</title><rect x="607.5" y="243.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="610.5" y="254.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.13%)</title><rect x="607.5" y="227.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="610.5" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="607.5" y="211.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="610.5" y="222.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.13%)</title><rect x="607.5" y="195.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="610.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (6 samples, 0.76%)</title><rect x="609.0" y="291.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="612.0" y="302.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (5 samples, 0.64%)</title><rect x="610.5" y="275.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="613.5" y="286.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (5 samples, 0.64%)</title><rect x="610.5" y="259.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.64%)</title><rect x="610.5" y="243.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="613.5" y="254.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.38%)</title><rect x="613.5" y="227.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="616.5" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.13%)</title><rect x="613.5" y="211.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="616.5" y="222.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.25%)</title><rect x="615.0" y="211.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="618.0" y="222.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.25%)</title><rect x="615.0" y="195.0" width="3.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="618.0" y="206.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.25%)</title><rect x="615.0" y="179.0" width="3.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="618.0" y="190.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.25%)</title><rect x="615.0" y="163.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="618.0" y="174.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.13%)</title><rect x="615.0" y="147.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="618.0" y="158.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="616.5" y="147.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="619.5" y="158.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 1.02%)</title><rect x="618.0" y="291.0" width="12.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="621.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.13%)</title><rect x="630.0" y="307.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="633.0" y="318.0"></text>
</g>
<g>
<title>java/lang/Long.toString (1 samples, 0.13%)</title><rect x="630.0" y="291.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.0" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.13%)</title><rect x="630.0" y="275.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="633.0" y="286.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.13%)</title><rect x="630.0" y="259.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="633.0" y="270.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.13%)</title><rect x="630.0" y="243.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="633.0" y="254.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="630.0" y="227.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="633.0" y="238.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="630.0" y="211.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="633.0" y="222.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.13%)</title><rect x="630.0" y="195.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="633.0" y="206.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.13%)</title><rect x="630.0" y="179.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="633.0" y="190.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="630.0" y="163.0" width="1.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="633.0" y="174.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.25%)</title><rect x="631.5" y="307.0" width="3.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="634.5" y="318.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (40 samples, 5.09%)</title><rect x="634.5" y="307.0" width="60.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.5" y="318.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (39 samples, 4.96%)</title><rect x="636.0" y="291.0" width="58.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.0" y="302.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (18 samples, 2.29%)</title><rect x="648.0" y="275.0" width="27.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="651.0" y="286.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (18 samples, 2.29%)</title><rect x="648.0" y="259.0" width="27.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="651.0" y="270.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (18 samples, 2.29%)</title><rect x="648.0" y="243.0" width="27.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="651.0" y="254.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (13 samples, 1.65%)</title><rect x="675.1" y="275.0" width="19.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="678.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.put (13 samples, 1.65%)</title><rect x="675.1" y="259.0" width="19.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="678.1" y="270.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.25%)</title><rect x="676.6" y="243.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.25%)</title><rect x="676.6" y="227.0" width="3.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="679.6" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.25%)</title><rect x="676.6" y="211.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.6" y="222.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (10 samples, 1.27%)</title><rect x="679.6" y="243.0" width="15.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.6" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (21 samples, 2.67%)</title><rect x="694.6" y="323.0" width="31.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.6" y="334.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (21 samples, 2.67%)</title><rect x="694.6" y="307.0" width="31.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="697.6" y="318.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (21 samples, 2.67%)</title><rect x="694.6" y="291.0" width="31.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="697.6" y="302.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.get (12 samples, 1.53%)</title><rect x="694.6" y="275.0" width="18.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="697.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 1.40%)</title><rect x="694.6" y="259.0" width="16.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="697.6" y="270.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.64%)</title><rect x="703.6" y="243.0" width="7.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="706.6" y="254.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.64%)</title><rect x="703.6" y="227.0" width="7.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="706.6" y="238.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.13%)</title><rect x="711.1" y="259.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="714.1" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (9 samples, 1.15%)</title><rect x="712.6" y="275.0" width="13.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="715.6" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 1.15%)</title><rect x="712.6" y="259.0" width="13.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="715.6" y="270.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.51%)</title><rect x="720.1" y="243.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="723.1" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (43 samples, 5.47%)</title><rect x="726.1" y="339.0" width="64.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="729.1" y="350.0">com/lin..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (39 samples, 4.96%)</title><rect x="732.1" y="323.0" width="58.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="735.1" y="334.0">com/li..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="733.6" y="307.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.6" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="733.6" y="291.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="736.6" y="302.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="733.6" y="275.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="736.6" y="286.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="733.6" y="259.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="736.6" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.13%)</title><rect x="733.6" y="243.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="736.6" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/519322175.process (1 samples, 0.13%)</title><rect x="735.1" y="307.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.1" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (1 samples, 0.13%)</title><rect x="735.1" y="291.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="738.1" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.13%)</title><rect x="735.1" y="275.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.1" y="286.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.13%)</title><rect x="735.1" y="259.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="738.1" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.13%)</title><rect x="735.1" y="243.0" width="1.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="738.1" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 0.51%)</title><rect x="736.6" y="307.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="739.6" y="318.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.64%)</title><rect x="742.6" y="307.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="745.6" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="742.6" y="291.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="745.6" y="302.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="742.6" y="275.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="745.6" y="286.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="742.6" y="259.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="745.6" y="270.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="742.6" y="243.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="745.6" y="254.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.13%)</title><rect x="742.6" y="227.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="745.6" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (4 samples, 0.51%)</title><rect x="744.1" y="291.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="747.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (4 samples, 0.51%)</title><rect x="744.1" y="275.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.1" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (4 samples, 0.51%)</title><rect x="744.1" y="259.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.1" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (4 samples, 0.51%)</title><rect x="744.1" y="243.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.1" y="254.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.51%)</title><rect x="744.1" y="227.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="747.1" y="238.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.64%)</title><rect x="750.1" y="307.0" width="7.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="753.1" y="318.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.64%)</title><rect x="750.1" y="291.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="753.1" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (8 samples, 1.02%)</title><rect x="757.6" y="307.0" width="12.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.6" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.13%)</title><rect x="769.6" y="307.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="772.6" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.13%)</title><rect x="769.6" y="291.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="772.6" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.13%)</title><rect x="769.6" y="275.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="772.6" y="286.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (1 samples, 0.13%)</title><rect x="769.6" y="259.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.6" y="270.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.51%)</title><rect x="771.1" y="307.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="774.1" y="318.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.25%)</title><rect x="774.1" y="291.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="777.1" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.76%)</title><rect x="777.2" y="307.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.76%)</title><rect x="777.2" y="291.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (6 samples, 0.76%)</title><rect x="777.2" y="275.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.64%)</title><rect x="777.2" y="259.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.2" y="270.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.13%)</title><rect x="777.2" y="243.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="780.2" y="254.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.13%)</title><rect x="777.2" y="227.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="780.2" y="238.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.13%)</title><rect x="777.2" y="211.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="780.2" y="222.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.13%)</title><rect x="777.2" y="195.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="780.2" y="206.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.13%)</title><rect x="777.2" y="179.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="780.2" y="190.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$481/171848760.accept (3 samples, 0.38%)</title><rect x="778.7" y="243.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.7" y="254.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.13%)</title><rect x="783.2" y="243.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="786.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.13%)</title><rect x="784.7" y="259.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="787.7" y="270.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$481/171848760.accept (1 samples, 0.13%)</title><rect x="784.7" y="243.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="787.7" y="254.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.13%)</title><rect x="784.7" y="227.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="787.7" y="238.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.38%)</title><rect x="786.2" y="307.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="789.2" y="318.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.38%)</title><rect x="786.2" y="291.0" width="4.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="789.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.65%)</title><rect x="790.7" y="339.0" width="19.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.65%)</title><rect x="790.7" y="323.0" width="19.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="793.7" y="334.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.76%)</title><rect x="795.2" y="307.0" width="9.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="798.2" y="318.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.64%)</title><rect x="796.7" y="291.0" width="7.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="799.7" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.51%)</title><rect x="804.2" y="307.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="807.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.51%)</title><rect x="804.2" y="291.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="807.2" y="302.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$482/182054607.accept (3 samples, 0.38%)</title><rect x="805.7" y="275.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="808.7" y="286.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.25%)</title><rect x="807.2" y="259.0" width="3.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="810.2" y="270.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.13%)</title><rect x="808.7" y="243.0" width="1.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="811.7" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.76%)</title><rect x="810.2" y="355.0" width="9.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="813.2" y="366.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.64%)</title><rect x="811.7" y="339.0" width="7.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="814.7" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.13%)</title><rect x="819.2" y="419.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="822.2" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.13%)</title><rect x="819.2" y="403.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="822.2" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.13%)</title><rect x="819.2" y="387.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="822.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.13%)</title><rect x="819.2" y="371.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="822.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (217 samples, 27.61%)</title><rect x="820.7" y="419.0" width="325.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="823.7" y="430.0">java/util/concurrent/ThreadPoolExecutor.getT..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (215 samples, 27.35%)</title><rect x="823.7" y="403.0" width="322.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="826.7" y="414.0">java/util/concurrent/LinkedBlockingQueue.take</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (197 samples, 25.06%)</title><rect x="828.2" y="387.0" width="295.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="831.2" y="398.0">java/util/concurrent/locks/AbstractQueue..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (15 samples, 1.91%)</title><rect x="829.7" y="371.0" width="22.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.7" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.38%)</title><rect x="834.2" y="355.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="837.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (3 samples, 0.38%)</title><rect x="838.7" y="355.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="841.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.76%)</title><rect x="843.2" y="355.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="846.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.76%)</title><rect x="843.2" y="339.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.76%)</title><rect x="843.2" y="323.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.2" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.76%)</title><rect x="843.2" y="307.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="846.2" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (6 samples, 0.76%)</title><rect x="843.2" y="291.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="846.2" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (3 samples, 0.38%)</title><rect x="852.2" y="371.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.38%)</title><rect x="852.2" y="355.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="855.2" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.13%)</title><rect x="855.2" y="339.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.13%)</title><rect x="855.2" y="323.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.2" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.13%)</title><rect x="855.2" y="307.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="858.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (11 samples, 1.40%)</title><rect x="856.7" y="371.0" width="16.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="859.7" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (11 samples, 1.40%)</title><rect x="856.7" y="355.0" width="16.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="859.7" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (167 samples, 21.25%)</title><rect x="873.2" y="371.0" width="250.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="876.2" y="382.0">java/util/concurrent/locks/LockSu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (166 samples, 21.12%)</title><rect x="874.7" y="355.0" width="249.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="877.7" y="366.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.13%)</title><rect x="879.2" y="339.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="882.2" y="350.0"></text>
</g>
<g>
<title>Unsafe_Park (158 samples, 20.10%)</title><rect x="880.7" y="339.0" width="237.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="883.7" y="350.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.13%)</title><rect x="886.7" y="323.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="889.7" y="334.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.13%)</title><rect x="888.2" y="323.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="891.2" y="334.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 2.80%)</title><rect x="889.7" y="323.0" width="33.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="892.7" y="334.0">Pa..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.13%)</title><rect x="904.8" y="307.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="907.8" y="318.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 1.15%)</title><rect x="906.3" y="307.0" width="13.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.3" y="318.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.13%)</title><rect x="916.8" y="291.0" width="1.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="919.8" y="302.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.13%)</title><rect x="918.3" y="291.0" width="1.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="921.3" y="302.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.25%)</title><rect x="919.8" y="307.0" width="3.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="922.8" y="318.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.13%)</title><rect x="922.8" y="323.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="925.8" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.25%)</title><rect x="924.3" y="323.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="927.3" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.38%)</title><rect x="927.3" y="323.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="930.3" y="334.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.13%)</title><rect x="931.8" y="323.0" width="1.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="934.8" y="334.0"></text>
</g>
<g>
<title>__lll_unlock_wake (40 samples, 5.09%)</title><rect x="933.3" y="323.0" width="60.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="936.3" y="334.0">__lll_..</text>
</g>
<g>
<title>__pthread_cond_wait (65 samples, 8.27%)</title><rect x="993.3" y="323.0" width="97.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="996.3" y="334.0">__pthread_c..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.64%)</title><rect x="1090.9" y="323.0" width="7.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1093.9" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.25%)</title><rect x="1098.4" y="323.0" width="3.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1101.4" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.13%)</title><rect x="1101.4" y="323.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1104.4" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (6 samples, 0.76%)</title><rect x="1102.9" y="323.0" width="9.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1105.9" y="334.0"></text>
</g>
<g>
<title>_init (2 samples, 0.25%)</title><rect x="1111.9" y="323.0" width="3.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1114.9" y="334.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (2 samples, 0.25%)</title><rect x="1114.9" y="323.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1117.9" y="334.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.51%)</title><rect x="1117.9" y="339.0" width="6.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1120.9" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (15 samples, 1.91%)</title><rect x="1123.9" y="387.0" width="22.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1126.9" y="398.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (15 samples, 1.91%)</title><rect x="1123.9" y="371.0" width="22.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1126.9" y="382.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (15 samples, 1.91%)</title><rect x="1123.9" y="355.0" width="22.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1126.9" y="366.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (15 samples, 1.91%)</title><rect x="1123.9" y="339.0" width="22.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1126.9" y="350.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.13%)</title><rect x="1145.0" y="323.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1148.0" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.13%)</title><rect x="1146.5" y="467.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1149.5" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.13%)</title><rect x="1146.5" y="451.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1149.5" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.13%)</title><rect x="1146.5" y="435.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1149.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.13%)</title><rect x="1146.5" y="419.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1149.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.13%)</title><rect x="1146.5" y="403.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1149.5" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.13%)</title><rect x="1146.5" y="387.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1149.5" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.13%)</title><rect x="1146.5" y="371.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1149.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.13%)</title><rect x="1146.5" y="355.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1149.5" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.13%)</title><rect x="1146.5" y="339.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1149.5" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.13%)</title><rect x="1146.5" y="323.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1149.5" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.13%)</title><rect x="1146.5" y="307.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1149.5" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Meter.record (1 samples, 0.13%)</title><rect x="1146.5" y="291.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1149.5" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Rate.record (1 samples, 0.13%)</title><rect x="1146.5" y="275.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1149.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.13%)</title><rect x="1146.5" y="259.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1149.5" y="270.0"></text>
</g>
<g>
<title>start_thread (28 samples, 3.56%)</title><rect x="1148.0" y="467.0" width="42.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1151.0" y="478.0">star..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (28 samples, 3.56%)</title><rect x="1148.0" y="451.0" width="42.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1151.0" y="462.0">thre..</text>
</g>
<g>
<title>Thread::call_run() (28 samples, 3.56%)</title><rect x="1148.0" y="435.0" width="42.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.0" y="446.0">Thre..</text>
</g>
<g>
<title>GangWorker::loop() (4 samples, 0.51%)</title><rect x="1148.0" y="419.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.0" y="430.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (4 samples, 0.51%)</title><rect x="1148.0" y="403.0" width="6.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1151.0" y="414.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (3 samples, 0.38%)</title><rect x="1148.0" y="387.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.0" y="398.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.13%)</title><rect x="1148.0" y="371.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.0" y="382.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.13%)</title><rect x="1148.0" y="355.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.0" y="366.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.13%)</title><rect x="1148.0" y="339.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.0" y="350.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.25%)</title><rect x="1149.5" y="371.0" width="3.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1152.5" y="382.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (1 samples, 0.13%)</title><rect x="1152.5" y="387.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1155.5" y="398.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.13%)</title><rect x="1152.5" y="371.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1155.5" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (1 samples, 0.13%)</title><rect x="1152.5" y="355.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.5" y="366.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (1 samples, 0.13%)</title><rect x="1152.5" y="339.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.5" y="350.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (1 samples, 0.13%)</title><rect x="1152.5" y="323.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1155.5" y="334.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (1 samples, 0.13%)</title><rect x="1152.5" y="307.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.5" y="318.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.13%)</title><rect x="1152.5" y="291.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1155.5" y="302.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples, 0.13%)</title><rect x="1152.5" y="275.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1155.5" y="286.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 3.05%)</title><rect x="1154.0" y="419.0" width="36.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.0" y="430.0">Jav..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 3.05%)</title><rect x="1154.0" y="403.0" width="36.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.0" y="414.0">Com..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (24 samples, 3.05%)</title><rect x="1154.0" y="387.0" width="36.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.0" y="398.0">Com..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (23 samples, 2.93%)</title><rect x="1154.0" y="371.0" width="34.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.0" y="382.0">C2..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (23 samples, 2.93%)</title><rect x="1154.0" y="355.0" width="34.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="366.0">Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (14 samples, 1.78%)</title><rect x="1154.0" y="339.0" width="21.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.0" y="350.0">C..</text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.13%)</title><rect x="1154.0" y="323.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.0" y="334.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.13%)</title><rect x="1154.0" y="307.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="318.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.13%)</title><rect x="1154.0" y="291.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.0" y="302.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.13%)</title><rect x="1154.0" y="275.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.0" y="286.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.13%)</title><rect x="1155.5" y="323.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.5" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (12 samples, 1.53%)</title><rect x="1157.0" y="323.0" width="18.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.0" y="334.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.13%)</title><rect x="1157.0" y="307.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.0" y="318.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.13%)</title><rect x="1157.0" y="291.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.0" y="302.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1157.0" y="275.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.0" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.25%)</title><rect x="1158.5" y="307.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1161.5" y="318.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1158.5" y="291.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1161.5" y="302.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.13%)</title><rect x="1160.0" y="291.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.0" y="302.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.13%)</title><rect x="1160.0" y="275.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1163.0" y="286.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.13%)</title><rect x="1161.5" y="307.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.5" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.13%)</title><rect x="1163.0" y="307.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.0" y="318.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.13%)</title><rect x="1163.0" y="291.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.0" y="302.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.25%)</title><rect x="1164.5" y="307.0" width="3.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1167.5" y="318.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (1 samples, 0.13%)</title><rect x="1167.5" y="307.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.5" y="318.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.13%)</title><rect x="1169.0" y="307.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.0" y="318.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.13%)</title><rect x="1169.0" y="291.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.0" y="302.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.13%)</title><rect x="1169.0" y="275.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1172.0" y="286.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.13%)</title><rect x="1170.5" y="307.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.5" y="318.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.13%)</title><rect x="1172.0" y="307.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.0" y="318.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.13%)</title><rect x="1172.0" y="291.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.0" y="302.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.13%)</title><rect x="1173.5" y="307.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.5" y="318.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.13%)</title><rect x="1173.5" y="291.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1176.5" y="302.0"></text>
</g>
<g>
<title>Compile::Optimize() (7 samples, 0.89%)</title><rect x="1175.0" y="339.0" width="10.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.0" y="350.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (1 samples, 0.13%)</title><rect x="1175.0" y="323.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.0" y="334.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (1 samples, 0.13%)</title><rect x="1175.0" y="307.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.0" y="318.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.13%)</title><rect x="1175.0" y="291.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1178.0" y="302.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.13%)</title><rect x="1175.0" y="275.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.0" y="286.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (2 samples, 0.25%)</title><rect x="1176.5" y="323.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.5" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.25%)</title><rect x="1176.5" y="307.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.5" y="318.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.25%)</title><rect x="1176.5" y="291.0" width="3.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.5" y="302.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1178.0" y="275.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.0" y="286.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.13%)</title><rect x="1178.0" y="259.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.38%)</title><rect x="1179.5" y="323.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.5" y="334.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.38%)</title><rect x="1179.5" y="307.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.5" y="318.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1179.5" y="291.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.5" y="302.0"></text>
</g>
<g>
<title>IfNode::fold_compares(PhaseIterGVN*) (1 samples, 0.13%)</title><rect x="1179.5" y="275.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.5" y="286.0"></text>
</g>
<g>
<title>IfNode::fold_compares_helper(ProjNode*, ProjNode*, ProjNode*, PhaseIterGVN*) (1 samples, 0.13%)</title><rect x="1179.5" y="259.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="270.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.13%)</title><rect x="1179.5" y="243.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.5" y="254.0"></text>
</g>
<g>
<title>SubINode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1179.5" y="227.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.5" y="238.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.13%)</title><rect x="1179.5" y="211.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="222.0"></text>
</g>
<g>
<title>TypeNode::cmp(Node const&amp;) const (1 samples, 0.13%)</title><rect x="1179.5" y="195.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.5" y="206.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.13%)</title><rect x="1181.0" y="291.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="302.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.13%)</title><rect x="1182.5" y="291.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.5" y="302.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.13%)</title><rect x="1182.5" y="275.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.5" y="286.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.13%)</title><rect x="1184.0" y="323.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.0" y="334.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.13%)</title><rect x="1184.0" y="307.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.0" y="318.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.13%)</title><rect x="1184.0" y="291.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.0" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.25%)</title><rect x="1185.5" y="339.0" width="3.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.5" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.25%)</title><rect x="1185.5" y="323.0" width="3.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.5" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.25%)</title><rect x="1185.5" y="307.0" width="3.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.5" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.25%)</title><rect x="1185.5" y="291.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.5" y="302.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.13%)</title><rect x="1185.5" y="275.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.5" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1187.0" y="275.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.13%)</title><rect x="1187.0" y="259.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.0" y="270.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1187.0" y="243.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="254.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1187.0" y="227.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.0" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.13%)</title><rect x="1187.0" y="211.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.0" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.13%)</title><rect x="1187.0" y="195.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.0" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.13%)</title><rect x="1187.0" y="179.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.0" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.13%)</title><rect x="1187.0" y="163.0" width="1.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.0" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.13%)</title><rect x="1187.0" y="147.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.0" y="158.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.13%)</title><rect x="1187.0" y="131.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.0" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.13%)</title><rect x="1187.0" y="115.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.0" y="126.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.13%)</title><rect x="1187.0" y="99.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.0" y="110.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.13%)</title><rect x="1188.5" y="371.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.5" y="382.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.13%)</title><rect x="1188.5" y="355.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.5" y="366.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.13%)</title><rect x="1188.5" y="339.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.5" y="350.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.13%)</title><rect x="1188.5" y="323.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.5" y="334.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.13%)</title><rect x="1188.5" y="307.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.5" y="318.0"></text>
</g>
<g>
<title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.13%)</title><rect x="1188.5" y="291.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="302.0"></text>
</g>
<g>
<title>DependencyContext::add_dependent_nmethod(nmethod*, bool) (1 samples, 0.13%)</title><rect x="1188.5" y="275.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.5" y="286.0"></text>
</g>
</g>
</svg>
