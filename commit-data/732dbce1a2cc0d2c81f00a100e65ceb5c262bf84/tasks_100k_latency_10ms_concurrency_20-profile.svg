<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (164 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.61%)</title><rect x="10.0" y="851.0" width="7.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.61%)</title><rect x="10.0" y="835.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.61%)</title><rect x="10.0" y="819.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.61%)</title><rect x="10.0" y="803.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.61%)</title><rect x="10.0" y="787.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.61%)</title><rect x="17.2" y="851.0" width="7.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="20.2" y="862.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.61%)</title><rect x="17.2" y="835.0" width="7.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="20.2" y="846.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.61%)</title><rect x="17.2" y="819.0" width="7.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="20.2" y="830.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.61%)</title><rect x="24.4" y="851.0" width="7.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="27.4" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.61%)</title><rect x="24.4" y="835.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.4" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 9.76%)</title><rect x="31.6" y="851.0" width="115.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.6" y="862.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 9.76%)</title><rect x="31.6" y="835.0" width="115.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.6" y="846.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.61%)</title><rect x="31.6" y="819.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.61%)</title><rect x="31.6" y="803.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.61%)</title><rect x="31.6" y="787.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.61%)</title><rect x="31.6" y="771.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.doCommitOffsetsAsync (1 samples, 0.61%)</title><rect x="31.6" y="755.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.sendOffsetCommitRequest (1 samples, 0.61%)</title><rect x="31.6" y="739.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 9.15%)</title><rect x="38.8" y="819.0" width="107.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.8" y="830.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (3 samples, 1.83%)</title><rect x="38.8" y="803.0" width="21.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.8" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.61%)</title><rect x="38.8" y="787.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.8" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.61%)</title><rect x="38.8" y="771.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.8" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.61%)</title><rect x="38.8" y="755.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="41.8" y="766.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.61%)</title><rect x="38.8" y="739.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="41.8" y="750.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.61%)</title><rect x="38.8" y="723.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.8" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.61%)</title><rect x="38.8" y="707.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.61%)</title><rect x="38.8" y="691.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="41.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.61%)</title><rect x="46.0" y="787.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="49.0" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.resume (1 samples, 0.61%)</title><rect x="46.0" y="771.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="49.0" y="782.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.61%)</title><rect x="46.0" y="755.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.0" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.61%)</title><rect x="53.2" y="787.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.resume (1 samples, 0.61%)</title><rect x="53.2" y="771.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.61%)</title><rect x="60.4" y="803.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.4" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.61%)</title><rect x="60.4" y="787.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.4" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.61%)</title><rect x="60.4" y="771.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="63.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/196385003.accept (1 samples, 0.61%)</title><rect x="60.4" y="755.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.4" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.61%)</title><rect x="60.4" y="739.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.4" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.61%)</title><rect x="60.4" y="723.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="63.4" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.61%)</title><rect x="60.4" y="707.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (2 samples, 1.22%)</title><rect x="67.6" y="803.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.6" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/225050537.accept (2 samples, 1.22%)</title><rect x="67.6" y="787.0" width="14.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="70.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (2 samples, 1.22%)</title><rect x="67.6" y="771.0" width="14.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="70.6" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (2 samples, 1.22%)</title><rect x="67.6" y="755.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="70.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (2 samples, 1.22%)</title><rect x="67.6" y="739.0" width="14.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (2 samples, 1.22%)</title><rect x="67.6" y="723.0" width="14.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="70.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (2 samples, 1.22%)</title><rect x="67.6" y="707.0" width="14.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="70.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 1.22%)</title><rect x="67.6" y="691.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 1.22%)</title><rect x="67.6" y="675.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="70.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 1.22%)</title><rect x="67.6" y="659.0" width="14.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="70.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 1.22%)</title><rect x="67.6" y="643.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="70.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.61%)</title><rect x="74.8" y="627.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="77.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.61%)</title><rect x="74.8" y="611.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="77.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.49%)</title><rect x="82.0" y="803.0" width="64.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="85.0" y="814.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.49%)</title><rect x="82.0" y="787.0" width="64.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="85.0" y="798.0">org/apa..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 4.27%)</title><rect x="82.0" y="771.0" width="50.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="85.0" y="782.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.83%)</title><rect x="82.0" y="755.0" width="21.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.0" y="766.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (3 samples, 1.83%)</title><rect x="82.0" y="739.0" width="21.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="85.0" y="750.0">o..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.61%)</title><rect x="82.0" y="723.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="85.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.61%)</title><rect x="82.0" y="707.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="85.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.61%)</title><rect x="82.0" y="691.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="85.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.61%)</title><rect x="82.0" y="675.0" width="7.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="85.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (1 samples, 0.61%)</title><rect x="82.0" y="659.0" width="7.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.0" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.61%)</title><rect x="89.1" y="723.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.61%)</title><rect x="89.1" y="707.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.61%)</title><rect x="89.1" y="691.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.61%)</title><rect x="89.1" y="675.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.1" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.61%)</title><rect x="89.1" y="659.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.1" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.61%)</title><rect x="89.1" y="643.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.1" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.61%)</title><rect x="89.1" y="627.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.1" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.61%)</title><rect x="89.1" y="611.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.1" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.61%)</title><rect x="89.1" y="595.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.1" y="606.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="89.1" y="579.0" width="7.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="92.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$240/904525732.shouldBlock (1 samples, 0.61%)</title><rect x="96.3" y="723.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.61%)</title><rect x="96.3" y="707.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.61%)</title><rect x="96.3" y="691.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="99.3" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.anyMatch (1 samples, 0.61%)</title><rect x="96.3" y="675.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.3" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.61%)</title><rect x="96.3" y="659.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.3" y="670.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.61%)</title><rect x="96.3" y="643.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.3" y="654.0"></text>
</g>
<g>
<title>java/util/stream/MatchOps$MatchOp.evaluateSequential (1 samples, 0.61%)</title><rect x="96.3" y="627.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.61%)</title><rect x="96.3" y="611.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="99.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.61%)</title><rect x="96.3" y="595.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="99.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyIntoWithCancel (1 samples, 0.61%)</title><rect x="96.3" y="579.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="99.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.forEachWithCancel (1 samples, 0.61%)</title><rect x="96.3" y="563.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="99.3" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$CLQSpliterator.tryAdvance (1 samples, 0.61%)</title><rect x="96.3" y="547.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="99.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (4 samples, 2.44%)</title><rect x="103.5" y="755.0" width="28.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="106.5" y="766.0">or..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.61%)</title><rect x="103.5" y="739.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="106.5" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayDeque$DeqIterator.next (1 samples, 0.61%)</title><rect x="103.5" y="723.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="106.5" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayDeque.nonNullElementAt (1 samples, 0.61%)</title><rect x="103.5" y="707.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="106.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.empty (1 samples, 0.61%)</title><rect x="110.7" y="739.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.7" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.&lt;init&gt; (1 samples, 0.61%)</title><rect x="110.7" y="723.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="113.7" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.22%)</title><rect x="117.9" y="739.0" width="14.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="120.9" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.61%)</title><rect x="117.9" y="723.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.61%)</title><rect x="117.9" y="707.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="120.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.61%)</title><rect x="117.9" y="691.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="120.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.61%)</title><rect x="117.9" y="675.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.61%)</title><rect x="117.9" y="659.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="120.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.61%)</title><rect x="117.9" y="643.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.61%)</title><rect x="117.9" y="627.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.61%)</title><rect x="117.9" y="611.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.9" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.61%)</title><rect x="117.9" y="595.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.61%)</title><rect x="117.9" y="579.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="120.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.61%)</title><rect x="125.1" y="723.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="128.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 1.22%)</title><rect x="132.3" y="771.0" width="14.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="135.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.61%)</title><rect x="132.3" y="755.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="135.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.61%)</title><rect x="132.3" y="739.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.61%)</title><rect x="132.3" y="723.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="135.3" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.61%)</title><rect x="132.3" y="707.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="135.3" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.61%)</title><rect x="132.3" y="691.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="135.3" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.61%)</title><rect x="132.3" y="675.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.3" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.61%)</title><rect x="132.3" y="659.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="135.3" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.61%)</title><rect x="132.3" y="643.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.3" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.61%)</title><rect x="132.3" y="627.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="135.3" y="638.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.61%)</title><rect x="132.3" y="611.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.3" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.61%)</title><rect x="132.3" y="595.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.3" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.61%)</title><rect x="132.3" y="579.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="135.3" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.61%)</title><rect x="132.3" y="563.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="135.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.61%)</title><rect x="139.5" y="755.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="142.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.61%)</title><rect x="139.5" y="739.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="142.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.61%)</title><rect x="139.5" y="723.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="142.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.61%)</title><rect x="139.5" y="707.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.61%)</title><rect x="139.5" y="691.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="142.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.61%)</title><rect x="139.5" y="675.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="142.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Thread.run (77 samples, 46.95%)</title><rect x="146.7" y="851.0" width="554.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.7" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (77 samples, 46.95%)</title><rect x="146.7" y="835.0" width="554.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.7" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (77 samples, 46.95%)</title><rect x="146.7" y="819.0" width="554.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.7" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/338725033.run (76 samples, 46.34%)</title><rect x="146.7" y="803.0" width="546.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="149.7" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/33..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (76 samples, 46.34%)</title><rect x="146.7" y="787.0" width="546.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.7" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (76 samples, 46.34%)</title><rect x="146.7" y="771.0" width="546.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.7" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (76 samples, 46.34%)</title><rect x="146.7" y="755.0" width="546.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.7" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThen..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (7 samples, 4.27%)</title><rect x="153.9" y="739.0" width="50.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.9" y="750.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 4.27%)</title><rect x="153.9" y="723.0" width="50.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.9" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 4.27%)</title><rect x="153.9" y="707.0" width="50.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="156.9" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 2.44%)</title><rect x="175.5" y="691.0" width="28.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="178.5" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.61%)</title><rect x="175.5" y="675.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.83%)</title><rect x="182.7" y="675.0" width="21.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="185.7" y="686.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$485/2016430689.accept (3 samples, 1.83%)</title><rect x="182.7" y="659.0" width="21.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="185.7" y="670.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (3 samples, 1.83%)</title><rect x="182.7" y="643.0" width="21.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="185.7" y="654.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.83%)</title><rect x="182.7" y="627.0" width="21.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="185.7" y="638.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.83%)</title><rect x="182.7" y="611.0" width="21.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="185.7" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.83%)</title><rect x="182.7" y="595.0" width="21.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="185.7" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.61%)</title><rect x="182.7" y="579.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="185.7" y="590.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.61%)</title><rect x="182.7" y="563.0" width="7.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="185.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.22%)</title><rect x="189.9" y="579.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="192.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (12 samples, 7.32%)</title><rect x="204.3" y="739.0" width="86.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.3" y="750.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (12 samples, 7.32%)</title><rect x="204.3" y="723.0" width="86.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.3" y="734.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (12 samples, 7.32%)</title><rect x="204.3" y="707.0" width="86.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.3" y="718.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 7.32%)</title><rect x="204.3" y="691.0" width="86.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="207.3" y="702.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (12 samples, 7.32%)</title><rect x="204.3" y="675.0" width="86.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.3" y="686.0">com/lineco..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (12 samples, 7.32%)</title><rect x="204.3" y="659.0" width="86.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="207.3" y="670.0">com/faster..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (3 samples, 1.83%)</title><rect x="204.3" y="643.0" width="21.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="207.3" y="654.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.61%)</title><rect x="204.3" y="627.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="207.3" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.61%)</title><rect x="204.3" y="611.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.3" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.61%)</title><rect x="204.3" y="595.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.61%)</title><rect x="204.3" y="579.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="207.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.61%)</title><rect x="204.3" y="563.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="207.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 1.22%)</title><rect x="211.5" y="627.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (2 samples, 1.22%)</title><rect x="211.5" y="611.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="214.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 4.88%)</title><rect x="225.9" y="643.0" width="57.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="228.9" y="654.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.61%)</title><rect x="225.9" y="627.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.61%)</title><rect x="225.9" y="611.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="228.9" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.61%)</title><rect x="233.0" y="627.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.61%)</title><rect x="233.0" y="611.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.61%)</title><rect x="233.0" y="595.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.61%)</title><rect x="233.0" y="579.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.61%)</title><rect x="233.0" y="563.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (2 samples, 1.22%)</title><rect x="240.2" y="627.0" width="14.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="243.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (2 samples, 1.22%)</title><rect x="240.2" y="611.0" width="14.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="243.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.61%)</title><rect x="240.2" y="595.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="243.2" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.61%)</title><rect x="240.2" y="579.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="243.2" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.61%)</title><rect x="240.2" y="563.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="243.2" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.61%)</title><rect x="240.2" y="547.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="243.2" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.61%)</title><rect x="240.2" y="531.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="243.2" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.61%)</title><rect x="240.2" y="515.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="243.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.61%)</title><rect x="247.4" y="595.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="250.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.61%)</title><rect x="247.4" y="579.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="250.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.61%)</title><rect x="247.4" y="563.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (1 samples, 0.61%)</title><rect x="247.4" y="547.0" width="7.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="250.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (4 samples, 2.44%)</title><rect x="254.6" y="627.0" width="28.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (4 samples, 2.44%)</title><rect x="254.6" y="611.0" width="28.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="257.6" y="622.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.61%)</title><rect x="254.6" y="595.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="257.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.61%)</title><rect x="254.6" y="579.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="257.6" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.83%)</title><rect x="261.8" y="595.0" width="21.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="264.8" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.83%)</title><rect x="261.8" y="579.0" width="21.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.8" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (3 samples, 1.83%)</title><rect x="261.8" y="563.0" width="21.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.8" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.22%)</title><rect x="261.8" y="547.0" width="14.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.61%)</title><rect x="269.0" y="531.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.0" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.61%)</title><rect x="269.0" y="515.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="272.0" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.61%)</title><rect x="269.0" y="499.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="272.0" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.61%)</title><rect x="269.0" y="483.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="272.0" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (1 samples, 0.61%)</title><rect x="276.2" y="547.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.2" y="558.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.61%)</title><rect x="276.2" y="531.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="279.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.61%)</title><rect x="283.4" y="643.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.61%)</title><rect x="283.4" y="627.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.61%)</title><rect x="283.4" y="611.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="286.4" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.61%)</title><rect x="283.4" y="595.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.61%)</title><rect x="283.4" y="579.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.4" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.61%)</title><rect x="283.4" y="563.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (54 samples, 32.93%)</title><rect x="290.6" y="739.0" width="388.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.6" y="750.0">com/linecorp/decaton/processor/runtime/internal/Proce..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (3 samples, 1.83%)</title><rect x="297.8" y="723.0" width="21.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.8" y="734.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (3 samples, 1.83%)</title><rect x="297.8" y="707.0" width="21.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.8" y="718.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.83%)</title><rect x="297.8" y="691.0" width="21.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.8" y="702.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.61%)</title><rect x="297.8" y="675.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="300.8" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.22%)</title><rect x="305.0" y="675.0" width="14.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="308.0" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.22%)</title><rect x="305.0" y="659.0" width="14.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.0" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.61%)</title><rect x="305.0" y="643.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="308.0" y="654.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.61%)</title><rect x="305.0" y="627.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="308.0" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.61%)</title><rect x="305.0" y="611.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="308.0" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.61%)</title><rect x="305.0" y="595.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.0" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.61%)</title><rect x="312.2" y="643.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="315.2" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.61%)</title><rect x="319.4" y="723.0" width="7.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="322.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (12 samples, 7.32%)</title><rect x="326.6" y="723.0" width="86.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="329.6" y="734.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (12 samples, 7.32%)</title><rect x="326.6" y="707.0" width="86.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="329.6" y="718.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (2 samples, 1.22%)</title><rect x="326.6" y="691.0" width="14.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="329.6" y="702.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.61%)</title><rect x="326.6" y="675.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="329.6" y="686.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.61%)</title><rect x="326.6" y="659.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="329.6" y="670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.61%)</title><rect x="333.8" y="675.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.61%)</title><rect x="333.8" y="659.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.8" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.61%)</title><rect x="333.8" y="643.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.8" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.61%)</title><rect x="333.8" y="627.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="336.8" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.61%)</title><rect x="333.8" y="611.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="336.8" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.61%)</title><rect x="333.8" y="595.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="336.8" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.61%)</title><rect x="333.8" y="579.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="336.8" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.61%)</title><rect x="333.8" y="563.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="336.8" y="574.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (10 samples, 6.10%)</title><rect x="341.0" y="691.0" width="71.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="344.0" y="702.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 4.27%)</title><rect x="355.4" y="675.0" width="50.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.4" y="686.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.61%)</title><rect x="355.4" y="659.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="358.4" y="670.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (6 samples, 3.66%)</title><rect x="362.6" y="659.0" width="43.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="365.6" y="670.0">java..</text>
</g>
<g>
<title>java/util/HashMap.put (6 samples, 3.66%)</title><rect x="362.6" y="643.0" width="43.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="365.6" y="654.0">java..</text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.61%)</title><rect x="369.8" y="627.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.61%)</title><rect x="369.8" y="611.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.8" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.61%)</title><rect x="369.8" y="595.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.44%)</title><rect x="377.0" y="627.0" width="28.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="380.0" y="638.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.newNode (2 samples, 1.22%)</title><rect x="377.0" y="611.0" width="14.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="380.0" y="622.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 1.22%)</title><rect x="391.3" y="611.0" width="14.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="394.3" y="622.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.61%)</title><rect x="405.7" y="675.0" width="7.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="408.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (34 samples, 20.73%)</title><rect x="412.9" y="723.0" width="244.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="415.9" y="734.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (34 samples, 20.73%)</title><rect x="412.9" y="707.0" width="244.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.9" y="718.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/1703245346.process (28 samples, 17.07%)</title><rect x="412.9" y="691.0" width="201.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.9" y="702.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (28 samples, 17.07%)</title><rect x="412.9" y="675.0" width="201.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="415.9" y="686.0">com/linecorp/decaton/bench..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (26 samples, 15.85%)</title><rect x="420.1" y="659.0" width="187.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="423.1" y="670.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (25 samples, 15.24%)</title><rect x="420.1" y="643.0" width="179.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.1" y="654.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>java/lang/Thread.sleep (25 samples, 15.24%)</title><rect x="420.1" y="627.0" width="179.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.1" y="638.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (25 samples, 15.24%)</title><rect x="420.1" y="611.0" width="179.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="423.1" y="622.0">JVM_Sleep</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (1 samples, 0.61%)</title><rect x="427.3" y="595.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="430.3" y="606.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.44%)</title><rect x="434.5" y="595.0" width="28.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="437.5" y="606.0">__..</text>
</g>
<g>
<title>__pthread_cond_timedwait (11 samples, 6.71%)</title><rect x="463.3" y="595.0" width="79.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="466.3" y="606.0">__pthread..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.61%)</title><rect x="542.4" y="595.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="545.4" y="606.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (6 samples, 3.66%)</title><rect x="549.6" y="595.0" width="43.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="552.6" y="606.0">os::..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 1.83%)</title><rect x="564.0" y="579.0" width="21.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="567.0" y="590.0">M..</text>
</g>
<g>
<title>update_get_addr (1 samples, 0.61%)</title><rect x="578.4" y="563.0" width="7.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="581.4" y="574.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.61%)</title><rect x="585.6" y="579.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="588.6" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.61%)</title><rect x="592.8" y="595.0" width="7.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="595.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (1 samples, 0.61%)</title><rect x="600.0" y="643.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="603.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.61%)</title><rect x="600.0" y="627.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (1 samples, 0.61%)</title><rect x="600.0" y="611.0" width="7.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="603.0" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (1 samples, 0.61%)</title><rect x="600.0" y="595.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="603.0" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.61%)</title><rect x="600.0" y="579.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="603.0" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.61%)</title><rect x="600.0" y="563.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="603.0" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.61%)</title><rect x="607.2" y="659.0" width="7.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="610.2" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.61%)</title><rect x="607.2" y="643.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="610.2" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.61%)</title><rect x="607.2" y="627.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="610.2" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (4 samples, 2.44%)</title><rect x="614.4" y="691.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="617.4" y="702.0">co..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.61%)</title><rect x="643.2" y="691.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.2" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.61%)</title><rect x="643.2" y="675.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.2" y="686.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.61%)</title><rect x="643.2" y="659.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.61%)</title><rect x="650.4" y="691.0" width="7.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="653.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.61%)</title><rect x="650.4" y="675.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.61%)</title><rect x="650.4" y="659.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.61%)</title><rect x="650.4" y="643.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="653.4" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$480/118223822.accept (1 samples, 0.61%)</title><rect x="650.4" y="627.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="653.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.83%)</title><rect x="657.6" y="723.0" width="21.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="660.6" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.83%)</title><rect x="657.6" y="707.0" width="21.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.6" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.61%)</title><rect x="672.0" y="691.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.61%)</title><rect x="672.0" y="675.0" width="7.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="675.0" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$484/413405006.accept (1 samples, 0.61%)</title><rect x="672.0" y="659.0" width="7.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.0" y="670.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.22%)</title><rect x="679.1" y="739.0" width="14.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="682.1" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.22%)</title><rect x="679.1" y="723.0" width="14.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="682.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.61%)</title><rect x="693.5" y="803.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.61%)</title><rect x="693.5" y="787.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="696.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.61%)</title><rect x="693.5" y="771.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="696.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.61%)</title><rect x="693.5" y="755.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="696.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.61%)</title><rect x="693.5" y="739.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="696.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.61%)</title><rect x="693.5" y="723.0" width="7.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="696.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 1.22%)</title><rect x="700.7" y="851.0" width="14.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.7" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.61%)</title><rect x="707.9" y="835.0" width="7.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="710.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.61%)</title><rect x="707.9" y="819.0" width="7.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="710.9" y="830.0"></text>
</g>
<g>
<title>start_thread (66 samples, 40.24%)</title><rect x="715.1" y="851.0" width="474.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="718.1" y="862.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (66 samples, 40.24%)</title><rect x="715.1" y="835.0" width="474.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="718.1" y="846.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (66 samples, 40.24%)</title><rect x="715.1" y="819.0" width="474.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.1" y="830.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 3.66%)</title><rect x="715.1" y="803.0" width="43.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="718.1" y="814.0">Gang..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 3.66%)</title><rect x="715.1" y="787.0" width="43.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="718.1" y="798.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 2.44%)</title><rect x="715.1" y="771.0" width="28.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="718.1" y="782.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (3 samples, 1.83%)</title><rect x="722.3" y="755.0" width="21.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="725.3" y="766.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 1.83%)</title><rect x="722.3" y="739.0" width="21.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="725.3" y="750.0">G..</text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.61%)</title><rect x="743.9" y="771.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="746.9" y="782.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.61%)</title><rect x="743.9" y="755.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="746.9" y="766.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.61%)</title><rect x="743.9" y="739.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="746.9" y="750.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (1 samples, 0.61%)</title><rect x="743.9" y="723.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="746.9" y="734.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (1 samples, 0.61%)</title><rect x="743.9" y="707.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="746.9" y="718.0"></text>
</g>
<g>
<title>oop_Relocation::unpack_data() (1 samples, 0.61%)</title><rect x="743.9" y="691.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="746.9" y="702.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.61%)</title><rect x="751.1" y="771.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="754.1" y="782.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (1 samples, 0.61%)</title><rect x="751.1" y="755.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="754.1" y="766.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 36.59%)</title><rect x="758.3" y="803.0" width="431.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="761.3" y="814.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 36.59%)</title><rect x="758.3" y="787.0" width="431.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.3" y="798.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (60 samples, 36.59%)</title><rect x="758.3" y="771.0" width="431.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="761.3" y="782.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (56 samples, 34.15%)</title><rect x="758.3" y="755.0" width="402.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="761.3" y="766.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Dire..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (56 samples, 34.15%)</title><rect x="758.3" y="739.0" width="402.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="761.3" y="750.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (32 samples, 19.51%)</title><rect x="758.3" y="723.0" width="230.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.3" y="734.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.61%)</title><rect x="758.3" y="707.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.3" y="718.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.61%)</title><rect x="758.3" y="691.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.3" y="702.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.61%)</title><rect x="758.3" y="675.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="761.3" y="686.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.61%)</title><rect x="758.3" y="659.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="761.3" y="670.0"></text>
</g>
<g>
<title>Matcher::match() (1 samples, 0.61%)</title><rect x="765.5" y="707.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="768.5" y="718.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.61%)</title><rect x="765.5" y="691.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="768.5" y="702.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (1 samples, 0.61%)</title><rect x="765.5" y="675.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="768.5" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.61%)</title><rect x="765.5" y="659.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="768.5" y="670.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.83%)</title><rect x="772.7" y="707.0" width="21.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="775.7" y="718.0">P..</text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.61%)</title><rect x="772.7" y="691.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="775.7" y="702.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.61%)</title><rect x="772.7" y="675.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="775.7" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (2 samples, 1.22%)</title><rect x="779.9" y="691.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="782.9" y="702.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.61%)</title><rect x="779.9" y="675.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="782.9" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.61%)</title><rect x="787.1" y="675.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.1" y="686.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.61%)</title><rect x="787.1" y="659.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="790.1" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (27 samples, 16.46%)</title><rect x="794.3" y="707.0" width="194.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="797.3" y="718.0">PhaseChaitin::Register_Al..</text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 1.83%)</title><rect x="794.3" y="691.0" width="21.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="797.3" y="702.0">P..</text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (2 samples, 1.22%)</title><rect x="794.3" y="675.0" width="14.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="797.3" y="686.0"></text>
</g>
<g>
<title>RegMask::find_first_set(int) const (1 samples, 0.61%)</title><rect x="801.5" y="659.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="804.5" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.61%)</title><rect x="808.7" y="675.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="811.7" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="808.7" y="659.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="811.7" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.61%)</title><rect x="815.9" y="691.0" width="7.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="818.9" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.61%)</title><rect x="815.9" y="675.0" width="7.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.9" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.22%)</title><rect x="823.0" y="691.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="826.0" y="702.0"></text>
</g>
<g>
<title>loadNNode::rule() const (1 samples, 0.61%)</title><rect x="830.2" y="675.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="833.2" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 4.27%)</title><rect x="837.4" y="691.0" width="50.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="840.4" y="702.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 1.22%)</title><rect x="837.4" y="675.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="840.4" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.61%)</title><rect x="844.6" y="659.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="847.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 2.44%)</title><rect x="851.8" y="675.0" width="28.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="854.8" y="686.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.61%)</title><rect x="880.6" y="675.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="883.6" y="686.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.61%)</title><rect x="880.6" y="659.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="883.6" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.83%)</title><rect x="887.8" y="691.0" width="21.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="890.8" y="702.0">P..</text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.61%)</title><rect x="895.0" y="675.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="898.0" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="902.2" y="675.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="905.2" y="686.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.61%)</title><rect x="902.2" y="659.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="905.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.22%)</title><rect x="909.4" y="691.0" width="14.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="912.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.61%)</title><rect x="916.6" y="675.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.6" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.22%)</title><rect x="923.8" y="691.0" width="14.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="926.8" y="702.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.61%)</title><rect x="923.8" y="675.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="926.8" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.61%)</title><rect x="931.0" y="675.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="934.0" y="686.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.61%)</title><rect x="931.0" y="659.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="934.0" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.61%)</title><rect x="938.2" y="691.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="941.2" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 1.22%)</title><rect x="945.4" y="691.0" width="14.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="948.4" y="702.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.61%)</title><rect x="952.6" y="675.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="955.6" y="686.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.61%)</title><rect x="952.6" y="659.0" width="7.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="955.6" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.61%)</title><rect x="959.8" y="691.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="962.8" y="702.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.61%)</title><rect x="959.8" y="675.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="962.8" y="686.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.61%)</title><rect x="967.0" y="691.0" width="7.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="970.0" y="702.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.61%)</title><rect x="974.1" y="691.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.1" y="702.0"></text>
</g>
<g>
<title>storeImmCM0Node::oper_input_base() const (1 samples, 0.61%)</title><rect x="981.3" y="691.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.3" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (15 samples, 9.15%)</title><rect x="988.5" y="723.0" width="108.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.5" y="734.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (4 samples, 2.44%)</title><rect x="988.5" y="707.0" width="28.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.5" y="718.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (4 samples, 2.44%)</title><rect x="988.5" y="691.0" width="28.8" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="991.5" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.61%)</title><rect x="988.5" y="675.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="991.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.61%)</title><rect x="995.7" y="675.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="998.7" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (1 samples, 0.61%)</title><rect x="995.7" y="659.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.7" y="670.0"></text>
</g>
<g>
<title>ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason) (1 samples, 0.61%)</title><rect x="995.7" y="643.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.7" y="654.0"></text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.61%)</title><rect x="995.7" y="627.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="998.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.61%)</title><rect x="1002.9" y="675.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.9" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.61%)</title><rect x="1010.1" y="675.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.61%)</title><rect x="1017.3" y="707.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1020.3" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.61%)</title><rect x="1017.3" y="691.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1020.3" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="675.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.3" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="659.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1020.3" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="643.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1020.3" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="627.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.3" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="611.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.3" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="595.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1020.3" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="579.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.3" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="563.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.3" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="547.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.3" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="531.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1020.3" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="515.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1020.3" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="499.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1020.3" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="483.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1020.3" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="467.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1020.3" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="451.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.3" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="435.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.3" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="419.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.3" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="403.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.3" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="387.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1020.3" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="371.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.3" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="355.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.3" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.61%)</title><rect x="1017.3" y="339.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.3" y="350.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.61%)</title><rect x="1017.3" y="323.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1020.3" y="334.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.61%)</title><rect x="1024.5" y="707.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.5" y="718.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.61%)</title><rect x="1024.5" y="691.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.5" y="702.0"></text>
</g>
<g>
<title>Type::xmeet(Type const*) const (1 samples, 0.61%)</title><rect x="1024.5" y="675.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1027.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 3.66%)</title><rect x="1031.7" y="707.0" width="43.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.7" y="718.0">Phas..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1031.7" y="691.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1034.7" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1031.7" y="675.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1034.7" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1031.7" y="659.0" width="7.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1034.7" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1031.7" y="643.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.7" y="654.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.61%)</title><rect x="1031.7" y="627.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.7" y="638.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.61%)</title><rect x="1031.7" y="611.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1034.7" y="622.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*, Node*) (1 samples, 0.61%)</title><rect x="1031.7" y="595.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1034.7" y="606.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.61%)</title><rect x="1038.9" y="691.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1041.9" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 2.44%)</title><rect x="1046.1" y="691.0" width="28.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1049.1" y="702.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (2 samples, 1.22%)</title><rect x="1046.1" y="675.0" width="14.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1049.1" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.61%)</title><rect x="1053.3" y="659.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1056.3" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.22%)</title><rect x="1060.5" y="675.0" width="14.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1063.5" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.61%)</title><rect x="1067.7" y="659.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.7" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.61%)</title><rect x="1067.7" y="643.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1070.7" y="654.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.61%)</title><rect x="1067.7" y="627.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1070.7" y="638.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.83%)</title><rect x="1074.9" y="707.0" width="21.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.9" y="718.0">P..</text>
</g>
<g>
<title>IfProjNode::Identity(PhaseGVN*) (1 samples, 0.61%)</title><rect x="1074.9" y="691.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.9" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.22%)</title><rect x="1082.1" y="691.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1085.1" y="702.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.61%)</title><rect x="1082.1" y="675.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.1" y="686.0"></text>
</g>
<g>
<title>CastIINode::Opcode() const (1 samples, 0.61%)</title><rect x="1082.1" y="659.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.1" y="670.0"></text>
</g>
<g>
<title>ConvI2LNode::Ideal(PhaseGVN*, bool) (1 samples, 0.61%)</title><rect x="1089.3" y="675.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.3" y="686.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="1089.3" y="659.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1092.3" y="670.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.61%)</title><rect x="1089.3" y="643.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1092.3" y="654.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.61%)</title><rect x="1089.3" y="627.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1092.3" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 4.27%)</title><rect x="1096.5" y="723.0" width="50.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.5" y="734.0">Parse..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 4.27%)</title><rect x="1096.5" y="707.0" width="50.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.5" y="718.0">Parse..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 4.27%)</title><rect x="1096.5" y="691.0" width="50.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.5" y="702.0">Parse..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 4.27%)</title><rect x="1096.5" y="675.0" width="50.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.5" y="686.0">Parse..</text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.61%)</title><rect x="1096.5" y="659.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1099.5" y="670.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.61%)</title><rect x="1096.5" y="643.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.5" y="654.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.61%)</title><rect x="1096.5" y="627.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.5" y="638.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1096.5" y="611.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1099.5" y="622.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="1096.5" y="595.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.5" y="606.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.61%)</title><rect x="1096.5" y="579.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.66%)</title><rect x="1103.7" y="659.0" width="43.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="670.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (6 samples, 3.66%)</title><rect x="1103.7" y="643.0" width="43.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.7" y="654.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 1.22%)</title><rect x="1103.7" y="627.0" width="14.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.7" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 1.22%)</title><rect x="1103.7" y="611.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.7" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 1.22%)</title><rect x="1103.7" y="595.0" width="14.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 1.22%)</title><rect x="1103.7" y="579.0" width="14.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 1.22%)</title><rect x="1103.7" y="563.0" width="14.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.22%)</title><rect x="1103.7" y="547.0" width="14.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 1.22%)</title><rect x="1103.7" y="531.0" width="14.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 1.22%)</title><rect x="1103.7" y="515.0" width="14.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 1.22%)</title><rect x="1103.7" y="499.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.7" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 1.22%)</title><rect x="1103.7" y="483.0" width="14.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.7" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 1.22%)</title><rect x="1103.7" y="467.0" width="14.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.7" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (2 samples, 1.22%)</title><rect x="1103.7" y="451.0" width="14.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.7" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 1.22%)</title><rect x="1103.7" y="435.0" width="14.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.7" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 1.22%)</title><rect x="1103.7" y="419.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.7" y="430.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 1.22%)</title><rect x="1103.7" y="403.0" width="14.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.7" y="414.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (2 samples, 1.22%)</title><rect x="1103.7" y="387.0" width="14.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.7" y="398.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.61%)</title><rect x="1103.7" y="371.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.7" y="382.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.61%)</title><rect x="1103.7" y="355.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.7" y="366.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.61%)</title><rect x="1103.7" y="339.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.61%)</title><rect x="1110.9" y="371.0" width="7.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.9" y="382.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.61%)</title><rect x="1110.9" y="355.0" width="7.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1113.9" y="366.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.61%)</title><rect x="1110.9" y="339.0" width="7.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1113.9" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.83%)</title><rect x="1118.0" y="627.0" width="21.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.0" y="638.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.83%)</title><rect x="1118.0" y="611.0" width="21.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.0" y="622.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.83%)</title><rect x="1118.0" y="595.0" width="21.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.0" y="606.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.83%)</title><rect x="1118.0" y="579.0" width="21.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.0" y="590.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.83%)</title><rect x="1118.0" y="563.0" width="21.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="574.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.83%)</title><rect x="1118.0" y="547.0" width="21.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.0" y="558.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.83%)</title><rect x="1118.0" y="531.0" width="21.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="542.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.83%)</title><rect x="1118.0" y="515.0" width="21.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.0" y="526.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.83%)</title><rect x="1118.0" y="499.0" width="21.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.0" y="510.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.83%)</title><rect x="1118.0" y="483.0" width="21.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.0" y="494.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.83%)</title><rect x="1118.0" y="467.0" width="21.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="478.0">P..</text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.83%)</title><rect x="1118.0" y="451.0" width="21.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1121.0" y="462.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.83%)</title><rect x="1118.0" y="435.0" width="21.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.0" y="446.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.83%)</title><rect x="1118.0" y="419.0" width="21.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.0" y="430.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.83%)</title><rect x="1118.0" y="403.0" width="21.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.0" y="414.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.83%)</title><rect x="1118.0" y="387.0" width="21.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1121.0" y="398.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.83%)</title><rect x="1118.0" y="371.0" width="21.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.0" y="382.0">P..</text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1118.0" y="355.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1118.0" y="339.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.0" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1118.0" y="323.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1118.0" y="307.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1121.0" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1118.0" y="291.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.0" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1118.0" y="275.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.0" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1118.0" y="259.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.0" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1118.0" y="243.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1121.0" y="254.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.61%)</title><rect x="1118.0" y="227.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.0" y="238.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.61%)</title><rect x="1118.0" y="211.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1121.0" y="222.0"></text>
</g>
<g>
<title>GraphKit::add_empty_predicate_impl(Deoptimization::DeoptReason, int) [clone .part.191] (1 samples, 0.61%)</title><rect x="1118.0" y="195.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.0" y="206.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.61%)</title><rect x="1118.0" y="179.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.0" y="190.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.61%)</title><rect x="1118.0" y="163.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.0" y="174.0"></text>
</g>
<g>
<title>GraphKit::set_predefined_output_for_runtime_call(Node*, Node*, TypePtr const*) (1 samples, 0.61%)</title><rect x="1118.0" y="147.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1121.0" y="158.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.61%)</title><rect x="1118.0" y="131.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.0" y="142.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.61%)</title><rect x="1118.0" y="115.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.0" y="126.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.61%)</title><rect x="1118.0" y="99.0" width="7.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1121.0" y="110.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.61%)</title><rect x="1125.2" y="355.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.61%)</title><rect x="1125.2" y="339.0" width="7.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1128.2" y="350.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.61%)</title><rect x="1125.2" y="323.0" width="7.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1128.2" y="334.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.61%)</title><rect x="1125.2" y="307.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.2" y="318.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.61%)</title><rect x="1125.2" y="291.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1128.2" y="302.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.61%)</title><rect x="1125.2" y="275.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1128.2" y="286.0"></text>
</g>
<g>
<title>G1BarrierSetC2::g1_mark_card(GraphKit*, IdealKit&amp;, Node*, Node*, unsigned int, Node*, Node*, Node*, TypeFunc const*) const (1 samples, 0.61%)</title><rect x="1125.2" y="259.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1128.2" y="270.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.61%)</title><rect x="1125.2" y="243.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.2" y="254.0"></text>
</g>
<g>
<title>AddPNode::Value(PhaseGVN*) const (1 samples, 0.61%)</title><rect x="1125.2" y="227.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1128.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.61%)</title><rect x="1132.4" y="355.0" width="7.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.4" y="366.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.61%)</title><rect x="1132.4" y="339.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.4" y="350.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.61%)</title><rect x="1132.4" y="323.0" width="7.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1135.4" y="334.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.6" y="627.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.6" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.6" y="611.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.6" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1139.6" y="595.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1139.6" y="579.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1139.6" y="563.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1139.6" y="547.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1139.6" y="531.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.6" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.6" y="515.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.6" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1139.6" y="499.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1139.6" y="483.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1139.6" y="467.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1139.6" y="451.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1139.6" y="435.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.6" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.6" y="419.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.6" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1139.6" y="403.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1139.6" y="387.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1139.6" y="371.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1139.6" y="355.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1139.6" y="339.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.6" y="323.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.6" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1139.6" y="307.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1139.6" y="291.0" width="7.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1142.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1139.6" y="275.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1139.6" y="259.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.61%)</title><rect x="1139.6" y="243.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.61%)</title><rect x="1139.6" y="227.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1142.6" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.61%)</title><rect x="1139.6" y="211.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.61%)</title><rect x="1139.6" y="195.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.61%)</title><rect x="1139.6" y="179.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.61%)</title><rect x="1139.6" y="163.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.61%)</title><rect x="1139.6" y="147.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.61%)</title><rect x="1139.6" y="131.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.6" y="142.0"></text>
</g>
<g>
<title>GraphKit::make_constant_from_field(ciField*, Node*) (1 samples, 0.61%)</title><rect x="1139.6" y="115.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.6" y="126.0"></text>
</g>
<g>
<title>Type::make_constant_from_field(ciField*, ciInstance*, BasicType, bool) (1 samples, 0.61%)</title><rect x="1139.6" y="99.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1142.6" y="110.0"></text>
</g>
<g>
<title>ciField::constant_value() (1 samples, 0.61%)</title><rect x="1139.6" y="83.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.6" y="94.0"></text>
</g>
<g>
<title>ciInstance::field_value_impl(BasicType, int) (1 samples, 0.61%)</title><rect x="1139.6" y="67.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.6" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.61%)</title><rect x="1139.6" y="51.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1142.6" y="62.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1139.6" y="35.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.6" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.61%)</title><rect x="1146.8" y="723.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.8" y="734.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.61%)</title><rect x="1146.8" y="707.0" width="7.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1149.8" y="718.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.61%)</title><rect x="1154.0" y="723.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1157.0" y="734.0"></text>
</g>
<g>
<title>TypeTuple::make_domain(ciInstanceKlass*, ciSignature*) (1 samples, 0.61%)</title><rect x="1154.0" y="707.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.0" y="718.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.61%)</title><rect x="1154.0" y="691.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1157.0" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.61%)</title><rect x="1154.0" y="675.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1157.0" y="686.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.61%)</title><rect x="1154.0" y="659.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.0" y="670.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 2.44%)</title><rect x="1161.2" y="755.0" width="28.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="766.0">Co..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 2.44%)</title><rect x="1161.2" y="739.0" width="28.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="750.0">Co..</text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 2.44%)</title><rect x="1161.2" y="723.0" width="28.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="734.0">Co..</text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 2.44%)</title><rect x="1161.2" y="707.0" width="28.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1164.2" y="718.0">Co..</text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (2 samples, 1.22%)</title><rect x="1161.2" y="691.0" width="14.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="702.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (2 samples, 1.22%)</title><rect x="1161.2" y="675.0" width="14.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.2" y="686.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (2 samples, 1.22%)</title><rect x="1161.2" y="659.0" width="14.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="670.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (2 samples, 1.22%)</title><rect x="1161.2" y="643.0" width="14.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="654.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 1.22%)</title><rect x="1161.2" y="627.0" width="14.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.2" y="638.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 1.22%)</title><rect x="1161.2" y="611.0" width="14.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1164.2" y="622.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 1.22%)</title><rect x="1161.2" y="595.0" width="14.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="606.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.61%)</title><rect x="1161.2" y="579.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.2" y="590.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.61%)</title><rect x="1161.2" y="563.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="574.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.61%)</title><rect x="1161.2" y="547.0" width="7.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.2" y="558.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.61%)</title><rect x="1161.2" y="531.0" width="7.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1164.2" y="542.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.61%)</title><rect x="1161.2" y="515.0" width="7.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.2" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.61%)</title><rect x="1161.2" y="499.0" width="7.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.2" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1161.2" y="483.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1161.2" y="467.0" width="7.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1164.2" y="478.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1161.2" y="451.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.2" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.61%)</title><rect x="1161.2" y="435.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.2" y="446.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.61%)</title><rect x="1161.2" y="419.0" width="7.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1164.2" y="430.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.61%)</title><rect x="1161.2" y="403.0" width="7.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.2" y="414.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.61%)</title><rect x="1161.2" y="387.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1164.2" y="398.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.61%)</title><rect x="1161.2" y="371.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1164.2" y="382.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.61%)</title><rect x="1161.2" y="355.0" width="7.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1164.2" y="366.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.61%)</title><rect x="1168.4" y="579.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.4" y="590.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.61%)</title><rect x="1168.4" y="563.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.4" y="574.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call_or_null(Klass*, LinkInfo const&amp;) (1 samples, 0.61%)</title><rect x="1168.4" y="547.0" width="7.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.4" y="558.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_interface_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.61%)</title><rect x="1168.4" y="531.0" width="7.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.4" y="542.0"></text>
</g>
<g>
<title>LinkResolver::lookup_instance_method_in_klasses(Klass*, Symbol*, Symbol*, Klass::PrivateLookupMode, Thread*) (1 samples, 0.61%)</title><rect x="1168.4" y="515.0" width="7.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.4" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.61%)</title><rect x="1168.4" y="499.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1171.4" y="510.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.61%)</title><rect x="1168.4" y="483.0" width="7.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1171.4" y="494.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (2 samples, 1.22%)</title><rect x="1175.6" y="691.0" width="14.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.6" y="702.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (2 samples, 1.22%)</title><rect x="1175.6" y="675.0" width="14.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.6" y="686.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.61%)</title><rect x="1175.6" y="659.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="670.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.61%)</title><rect x="1175.6" y="643.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1178.6" y="654.0"></text>
</g>
<g>
<title>Interval::split_child_at_op_id(int, LIR_OpVisitState::OprMode) (1 samples, 0.61%)</title><rect x="1175.6" y="627.0" width="7.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.6" y="638.0"></text>
</g>
<g>
<title>LinearScan::sort_intervals_before_allocation() (1 samples, 0.61%)</title><rect x="1182.8" y="659.0" width="7.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
</g>
</svg>
