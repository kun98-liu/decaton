<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1318" onload="init(evt)" viewBox="0 0 1200 1318" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1301"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1301"> </text>
<g id="frames">
<g>
<title>all (825 samples, 100.00%)</title><rect x="10.0" y="1267.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1278.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.12%)</title><rect x="10.0" y="1251.0" width="1.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="1235.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.12%)</title><rect x="10.0" y="1219.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.12%)</title><rect x="10.0" y="1203.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.12%)</title><rect x="10.0" y="1187.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.12%)</title><rect x="10.0" y="1171.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.12%)</title><rect x="11.4" y="1251.0" width="1.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.4" y="1262.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="11.4" y="1235.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.4" y="1246.0"></text>
</g>
<g>
<title>RegisterMap::RegisterMap(JavaThread*, bool) (1 samples, 0.12%)</title><rect x="11.4" y="1219.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.4" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (210 samples, 25.45%)</title><rect x="12.9" y="1251.0" width="300.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.9" y="1262.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (210 samples, 25.45%)</title><rect x="12.9" y="1235.0" width="300.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.9" y="1246.0">com/linecorp/decaton/processor/runtime/P..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.12%)</title><rect x="12.9" y="1219.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (209 samples, 25.33%)</title><rect x="14.3" y="1219.0" width="298.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.3" y="1230.0">com/linecorp/decaton/processor/runtime/i..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (3 samples, 0.36%)</title><rect x="15.7" y="1203.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (3 samples, 0.36%)</title><rect x="15.7" y="1187.0" width="4.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.7" y="1198.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.12%)</title><rect x="17.2" y="1171.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="20.2" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.12%)</title><rect x="17.2" y="1155.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.2" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.12%)</title><rect x="17.2" y="1139.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.2" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="18.6" y="1171.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.6" y="1182.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="18.6" y="1155.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.6" y="1166.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="18.6" y="1139.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="21.6" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="18.6" y="1123.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.6" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.12%)</title><rect x="18.6" y="1107.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.6" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.12%)</title><rect x="20.0" y="1203.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.0" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.12%)</title><rect x="20.0" y="1187.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.36%)</title><rect x="21.4" y="1203.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.36%)</title><rect x="21.4" y="1187.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.4" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.36%)</title><rect x="21.4" y="1171.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="24.4" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/1274269114.accept (3 samples, 0.36%)</title><rect x="21.4" y="1155.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="24.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.36%)</title><rect x="21.4" y="1139.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.4" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.36%)</title><rect x="21.4" y="1123.0" width="4.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.4" y="1134.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.24%)</title><rect x="21.4" y="1107.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="24.4" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OffsetStateReaper.maybeReapOffset (1 samples, 0.12%)</title><rect x="24.3" y="1107.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.3" y="1118.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_0_Or3Plus (1 samples, 0.12%)</title><rect x="24.3" y="1091.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.12%)</title><rect x="25.7" y="1203.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.7" y="1214.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.12%)</title><rect x="25.7" y="1187.0" width="1.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="28.7" y="1198.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="25.7" y="1171.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="28.7" y="1182.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (176 samples, 21.33%)</title><rect x="27.2" y="1203.0" width="251.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.2" y="1214.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/37944632.accept (173 samples, 20.97%)</title><rect x="28.6" y="1187.0" width="247.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.6" y="1198.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (173 samples, 20.97%)</title><rect x="28.6" y="1171.0" width="247.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.6" y="1182.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (157 samples, 19.03%)</title><rect x="28.6" y="1155.0" width="224.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="31.6" y="1166.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (156 samples, 18.91%)</title><rect x="30.0" y="1139.0" width="223.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.0" y="1150.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (156 samples, 18.91%)</title><rect x="30.0" y="1123.0" width="223.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.0" y="1134.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (156 samples, 18.91%)</title><rect x="30.0" y="1107.0" width="223.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.0" y="1118.0">java/util/concurrent/Executor..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (156 samples, 18.91%)</title><rect x="30.0" y="1091.0" width="223.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.0" y="1102.0">java/util/concurrent/ThreadPo..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (136 samples, 16.48%)</title><rect x="58.6" y="1075.0" width="194.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="61.6" y="1086.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (117 samples, 14.18%)</title><rect x="58.6" y="1059.0" width="167.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.6" y="1070.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (23 samples, 2.79%)</title><rect x="58.6" y="1043.0" width="32.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="61.6" y="1054.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (23 samples, 2.79%)</title><rect x="58.6" y="1027.0" width="32.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.6" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (23 samples, 2.79%)</title><rect x="58.6" y="1011.0" width="32.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.6" y="1022.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (94 samples, 11.39%)</title><rect x="91.5" y="1043.0" width="134.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="94.5" y="1054.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (94 samples, 11.39%)</title><rect x="91.5" y="1027.0" width="134.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="94.5" y="1038.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (94 samples, 11.39%)</title><rect x="91.5" y="1011.0" width="134.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="94.5" y="1022.0">java/util/concurr..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (94 samples, 11.39%)</title><rect x="91.5" y="995.0" width="134.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.5" y="1006.0">java/util/concurr..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (89 samples, 10.79%)</title><rect x="98.7" y="979.0" width="127.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="101.7" y="990.0">jdk/internal/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (36 samples, 4.36%)</title><rect x="103.0" y="963.0" width="51.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="106.0" y="974.0">Unsaf..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.24%)</title><rect x="110.1" y="947.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="113.1" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.36%)</title><rect x="113.0" y="947.0" width="4.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="116.0" y="958.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.73%)</title><rect x="117.3" y="947.0" width="8.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="120.3" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.24%)</title><rect x="121.6" y="931.0" width="2.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="124.6" y="942.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="124.4" y="931.0" width="1.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="127.4" y="942.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.12%)</title><rect x="125.9" y="947.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="128.9" y="958.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.36%)</title><rect x="127.3" y="947.0" width="4.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="130.3" y="958.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.24%)</title><rect x="131.6" y="947.0" width="2.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="134.6" y="958.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.48%)</title><rect x="134.4" y="947.0" width="5.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="137.4" y="958.0"></text>
</g>
<g>
<title>pthread_mutex_lock (10 samples, 1.21%)</title><rect x="140.2" y="947.0" width="14.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="143.2" y="958.0"></text>
</g>
<g>
<title>__pthread_cond_signal (50 samples, 6.06%)</title><rect x="154.5" y="963.0" width="71.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="157.5" y="974.0">__pthrea..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 2.30%)</title><rect x="226.0" y="1059.0" width="27.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.0" y="1070.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 2.30%)</title><rect x="226.0" y="1043.0" width="27.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.0" y="1054.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 2.30%)</title><rect x="226.0" y="1027.0" width="27.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="229.0" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 2.30%)</title><rect x="226.0" y="1011.0" width="27.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.0" y="1022.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 1.33%)</title><rect x="253.2" y="1155.0" width="15.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="256.2" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 1.33%)</title><rect x="253.2" y="1139.0" width="15.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="256.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.21%)</title><rect x="254.6" y="1123.0" width="14.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="257.6" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.21%)</title><rect x="254.6" y="1107.0" width="14.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="257.6" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.61%)</title><rect x="261.7" y="1091.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="264.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (5 samples, 0.61%)</title><rect x="261.7" y="1075.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="264.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.24%)</title><rect x="268.9" y="1155.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="271.9" y="1166.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.24%)</title><rect x="268.9" y="1139.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.9" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="268.9" y="1123.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (2 samples, 0.24%)</title><rect x="268.9" y="1107.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="271.9" y="1118.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (2 samples, 0.24%)</title><rect x="268.9" y="1091.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="271.9" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="268.9" y="1075.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="271.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.24%)</title><rect x="268.9" y="1059.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.9" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.36%)</title><rect x="271.7" y="1155.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="274.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.36%)</title><rect x="271.7" y="1139.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="274.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.24%)</title><rect x="273.2" y="1123.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="276.2" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.24%)</title><rect x="273.2" y="1107.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="276.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (2 samples, 0.24%)</title><rect x="276.0" y="1187.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (2 samples, 0.24%)</title><rect x="276.0" y="1171.0" width="2.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="279.0" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.12%)</title><rect x="276.0" y="1155.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="279.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (1 samples, 0.12%)</title><rect x="276.0" y="1139.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="279.0" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.12%)</title><rect x="276.0" y="1123.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="279.0" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.12%)</title><rect x="277.5" y="1155.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="280.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (24 samples, 2.91%)</title><rect x="278.9" y="1203.0" width="34.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.9" y="1214.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (24 samples, 2.91%)</title><rect x="278.9" y="1187.0" width="34.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="281.9" y="1198.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (15 samples, 1.82%)</title><rect x="278.9" y="1171.0" width="21.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="281.9" y="1182.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (15 samples, 1.82%)</title><rect x="278.9" y="1155.0" width="21.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="281.9" y="1166.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.12%)</title><rect x="278.9" y="1139.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.12%)</title><rect x="278.9" y="1123.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="281.9" y="1134.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.12%)</title><rect x="278.9" y="1107.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="281.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$473/66270990.accept (1 samples, 0.12%)</title><rect x="278.9" y="1091.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="281.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.12%)</title><rect x="278.9" y="1075.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.12%)</title><rect x="278.9" y="1059.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.12%)</title><rect x="278.9" y="1043.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="281.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.12%)</title><rect x="278.9" y="1027.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (14 samples, 1.70%)</title><rect x="280.3" y="1139.0" width="20.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="283.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (12 samples, 1.45%)</title><rect x="280.3" y="1123.0" width="17.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="283.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (12 samples, 1.45%)</title><rect x="280.3" y="1107.0" width="17.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (5 samples, 0.61%)</title><rect x="283.2" y="1091.0" width="7.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="286.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.36%)</title><rect x="286.0" y="1075.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="289.0" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (3 samples, 0.36%)</title><rect x="286.0" y="1059.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="289.0" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (3 samples, 0.36%)</title><rect x="286.0" y="1043.0" width="4.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (3 samples, 0.36%)</title><rect x="286.0" y="1027.0" width="4.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="289.0" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (2 samples, 0.24%)</title><rect x="287.5" y="1011.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="290.5" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.61%)</title><rect x="290.3" y="1091.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="293.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (5 samples, 0.61%)</title><rect x="290.3" y="1075.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="293.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (5 samples, 0.61%)</title><rect x="290.3" y="1059.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="293.3" y="1070.0"></text>
</g>
<g>
<title>java/util/Optional.of (5 samples, 0.61%)</title><rect x="290.3" y="1043.0" width="7.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.3" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="296.1" y="1027.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="299.1" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.12%)</title><rect x="297.5" y="1123.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.12%)</title><rect x="297.5" y="1107.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="300.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.12%)</title><rect x="297.5" y="1091.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="300.5" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.12%)</title><rect x="297.5" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.5" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.12%)</title><rect x="298.9" y="1123.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="301.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.assignedStateOrNull (1 samples, 0.12%)</title><rect x="298.9" y="1107.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="301.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.stateValue (1 samples, 0.12%)</title><rect x="298.9" y="1091.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.9" y="1102.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.12%)</title><rect x="298.9" y="1075.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="298.9" y="1059.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="301.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.12%)</title><rect x="298.9" y="1043.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="301.9" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.12%)</title><rect x="300.4" y="1171.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="303.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.12%)</title><rect x="300.4" y="1155.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="303.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.12%)</title><rect x="300.4" y="1139.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="303.4" y="1150.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.12%)</title><rect x="300.4" y="1123.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.4" y="1134.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.12%)</title><rect x="300.4" y="1107.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="303.4" y="1118.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.12%)</title><rect x="300.4" y="1091.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.4" y="1102.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.12%)</title><rect x="300.4" y="1075.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="303.4" y="1086.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.12%)</title><rect x="300.4" y="1059.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="303.4" y="1070.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.12%)</title><rect x="300.4" y="1043.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3ReducingSink.begin (1 samples, 0.12%)</title><rect x="300.4" y="1027.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="303.4" y="1038.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="300.4" y="1011.0" width="1.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="303.4" y="1022.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (2 samples, 0.24%)</title><rect x="301.8" y="1171.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="304.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.24%)</title><rect x="301.8" y="1155.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="304.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.24%)</title><rect x="301.8" y="1139.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="304.8" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.24%)</title><rect x="301.8" y="1123.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="304.8" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.24%)</title><rect x="301.8" y="1107.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="304.8" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.12%)</title><rect x="301.8" y="1091.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="304.8" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.12%)</title><rect x="301.8" y="1075.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.8" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.12%)</title><rect x="301.8" y="1059.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.8" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (1 samples, 0.12%)</title><rect x="301.8" y="1043.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="304.8" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.12%)</title><rect x="301.8" y="1027.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="304.8" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.12%)</title><rect x="301.8" y="1011.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="304.8" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.12%)</title><rect x="301.8" y="995.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="304.8" y="1006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.12%)</title><rect x="301.8" y="979.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="304.8" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.12%)</title><rect x="301.8" y="963.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.8" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="301.8" y="947.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="304.8" y="958.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="301.8" y="931.0" width="1.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="304.8" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.12%)</title><rect x="303.2" y="1091.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="306.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="303.2" y="1075.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="306.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="303.2" y="1059.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (3 samples, 0.36%)</title><rect x="304.6" y="1171.0" width="4.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="307.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (3 samples, 0.36%)</title><rect x="304.6" y="1155.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="307.6" y="1166.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedEntrySet.iterator (1 samples, 0.12%)</title><rect x="306.1" y="1139.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="309.1" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.12%)</title><rect x="307.5" y="1139.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.5" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.12%)</title><rect x="307.5" y="1123.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="310.5" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.12%)</title><rect x="307.5" y="1107.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="310.5" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.updateHead (1 samples, 0.12%)</title><rect x="307.5" y="1091.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="310.5" y="1102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (1 samples, 0.12%)</title><rect x="307.5" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="310.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.setRelease (1 samples, 0.12%)</title><rect x="307.5" y="1059.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="310.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (2 samples, 0.24%)</title><rect x="308.9" y="1171.0" width="2.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="311.9" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.24%)</title><rect x="308.9" y="1155.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="308.9" y="1139.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="311.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.12%)</title><rect x="308.9" y="1123.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.12%)</title><rect x="310.4" y="1139.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="313.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.12%)</title><rect x="311.8" y="1171.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="314.8" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.12%)</title><rect x="311.8" y="1155.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="314.8" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.12%)</title><rect x="311.8" y="1139.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="314.8" y="1150.0"></text>
</g>
<g>
<title>java/lang/Thread.run (519 samples, 62.91%)</title><rect x="313.2" y="1251.0" width="742.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="316.2" y="1262.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (519 samples, 62.91%)</title><rect x="313.2" y="1235.0" width="742.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.2" y="1246.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (519 samples, 62.91%)</title><rect x="313.2" y="1219.0" width="742.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="316.2" y="1230.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1505472313.run (309 samples, 37.45%)</title><rect x="321.8" y="1203.0" width="442.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="324.8" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (309 samples, 37.45%)</title><rect x="321.8" y="1187.0" width="442.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.8" y="1198.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (309 samples, 37.45%)</title><rect x="321.8" y="1171.0" width="442.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="324.8" y="1182.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (309 samples, 37.45%)</title><rect x="321.8" y="1155.0" width="442.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.8" y="1166.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeli..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 4.48%)</title><rect x="334.7" y="1139.0" width="52.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="337.7" y="1150.0">com/l..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 4.48%)</title><rect x="334.7" y="1123.0" width="52.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="337.7" y="1134.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (37 samples, 4.48%)</title><rect x="334.7" y="1107.0" width="52.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.7" y="1118.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.91%)</title><rect x="353.3" y="1091.0" width="34.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="356.3" y="1102.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.12%)</title><rect x="353.3" y="1075.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="356.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (23 samples, 2.79%)</title><rect x="354.7" y="1075.0" width="32.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="357.7" y="1086.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/612533309.accept (23 samples, 2.79%)</title><rect x="354.7" y="1059.0" width="32.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.7" y="1070.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (23 samples, 2.79%)</title><rect x="354.7" y="1043.0" width="32.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="357.7" y="1054.0">co..</text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="360.4" y="1027.0" width="1.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="363.4" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (18 samples, 2.18%)</title><rect x="361.9" y="1027.0" width="25.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="364.9" y="1038.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (18 samples, 2.18%)</title><rect x="361.9" y="1011.0" width="25.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="364.9" y="1022.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (17 samples, 2.06%)</title><rect x="363.3" y="995.0" width="24.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.3" y="1006.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (6 samples, 0.73%)</title><rect x="363.3" y="979.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="366.3" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.33%)</title><rect x="371.9" y="979.0" width="15.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="374.9" y="990.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1535092502.accept (1 samples, 0.12%)</title><rect x="386.2" y="963.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="389.2" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (4 samples, 0.48%)</title><rect x="387.6" y="1139.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.6" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (4 samples, 0.48%)</title><rect x="387.6" y="1123.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="390.6" y="1134.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (4 samples, 0.48%)</title><rect x="387.6" y="1107.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.6" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.48%)</title><rect x="387.6" y="1091.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="390.6" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.48%)</title><rect x="387.6" y="1075.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="390.6" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (88 samples, 10.67%)</title><rect x="393.3" y="1139.0" width="125.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="396.3" y="1150.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (88 samples, 10.67%)</title><rect x="393.3" y="1123.0" width="125.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="396.3" y="1134.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (88 samples, 10.67%)</title><rect x="393.3" y="1107.0" width="125.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="396.3" y="1118.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (88 samples, 10.67%)</title><rect x="393.3" y="1091.0" width="125.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="396.3" y="1102.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (88 samples, 10.67%)</title><rect x="393.3" y="1075.0" width="125.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="396.3" y="1086.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (88 samples, 10.67%)</title><rect x="393.3" y="1059.0" width="125.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="396.3" y="1070.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (14 samples, 1.70%)</title><rect x="393.3" y="1043.0" width="20.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.3" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (13 samples, 1.58%)</title><rect x="393.3" y="1027.0" width="18.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="396.3" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (13 samples, 1.58%)</title><rect x="393.3" y="1011.0" width="18.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="396.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (13 samples, 1.58%)</title><rect x="393.3" y="995.0" width="18.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="396.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (13 samples, 1.58%)</title><rect x="393.3" y="979.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (13 samples, 1.58%)</title><rect x="393.3" y="963.0" width="18.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="396.3" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.85%)</title><rect x="401.9" y="947.0" width="10.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="404.9" y="958.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.85%)</title><rect x="401.9" y="931.0" width="10.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="404.9" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.12%)</title><rect x="411.9" y="1027.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="414.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (1 samples, 0.12%)</title><rect x="411.9" y="1011.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="414.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.makeChild (1 samples, 0.12%)</title><rect x="411.9" y="995.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="414.9" y="1006.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="411.9" y="979.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="414.9" y="990.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="411.9" y="963.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="414.9" y="974.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="411.9" y="947.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="414.9" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="411.9" y="931.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="414.9" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="411.9" y="915.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="414.9" y="926.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.12%)</title><rect x="411.9" y="899.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="414.9" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (44 samples, 5.33%)</title><rect x="413.3" y="1043.0" width="63.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="416.3" y="1054.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.48%)</title><rect x="413.3" y="1027.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="416.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.48%)</title><rect x="413.3" y="1011.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="416.3" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.24%)</title><rect x="416.2" y="995.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="419.2" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.12%)</title><rect x="419.1" y="1027.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="422.1" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.12%)</title><rect x="419.1" y="1011.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="422.1" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (39 samples, 4.73%)</title><rect x="420.5" y="1027.0" width="55.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.5" y="1038.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (39 samples, 4.73%)</title><rect x="420.5" y="1011.0" width="55.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="423.5" y="1022.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.21%)</title><rect x="420.5" y="995.0" width="14.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.48%)</title><rect x="420.5" y="979.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.48%)</title><rect x="420.5" y="963.0" width="5.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.48%)</title><rect x="420.5" y="947.0" width="5.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="423.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.73%)</title><rect x="426.2" y="979.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.2" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (29 samples, 3.52%)</title><rect x="434.8" y="995.0" width="41.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.8" y="1006.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (29 samples, 3.52%)</title><rect x="434.8" y="979.0" width="41.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="437.8" y="990.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.12%)</title><rect x="434.8" y="963.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="437.8" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (28 samples, 3.39%)</title><rect x="436.2" y="963.0" width="40.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="439.2" y="974.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (6 samples, 0.73%)</title><rect x="442.0" y="947.0" width="8.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="445.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.24%)</title><rect x="443.4" y="931.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="446.4" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.24%)</title><rect x="443.4" y="915.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="446.4" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.24%)</title><rect x="446.2" y="931.0" width="2.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="449.2" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.24%)</title><rect x="446.2" y="915.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.2" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.24%)</title><rect x="446.2" y="899.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.2" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.12%)</title><rect x="447.7" y="883.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.12%)</title><rect x="449.1" y="931.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="452.1" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.12%)</title><rect x="449.1" y="915.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="452.1" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (8 samples, 0.97%)</title><rect x="450.5" y="947.0" width="11.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="453.5" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (7 samples, 0.85%)</title><rect x="452.0" y="931.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="455.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (4 samples, 0.48%)</title><rect x="452.0" y="915.0" width="5.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (4 samples, 0.48%)</title><rect x="452.0" y="899.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (4 samples, 0.48%)</title><rect x="452.0" y="883.0" width="5.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.0" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (4 samples, 0.48%)</title><rect x="452.0" y="867.0" width="5.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="455.0" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (4 samples, 0.48%)</title><rect x="452.0" y="851.0" width="5.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="455.0" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (4 samples, 0.48%)</title><rect x="452.0" y="835.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.0" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.36%)</title><rect x="457.7" y="915.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="460.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.36%)</title><rect x="457.7" y="899.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.7" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (2 samples, 0.24%)</title><rect x="457.7" y="883.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="460.7" y="894.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (2 samples, 0.24%)</title><rect x="457.7" y="867.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="460.7" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (2 samples, 0.24%)</title><rect x="457.7" y="851.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="460.7" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (2 samples, 0.24%)</title><rect x="457.7" y="835.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="460.7" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (2 samples, 0.24%)</title><rect x="457.7" y="819.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.12%)</title><rect x="460.5" y="883.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="463.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="460.5" y="867.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="463.5" y="878.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.48%)</title><rect x="462.0" y="947.0" width="5.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.48%)</title><rect x="462.0" y="931.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.48%)</title><rect x="462.0" y="915.0" width="5.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="465.0" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.12%)</title><rect x="462.0" y="899.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.0" y="910.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.36%)</title><rect x="463.4" y="899.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.4" y="910.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.36%)</title><rect x="463.4" y="883.0" width="4.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="466.4" y="894.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.36%)</title><rect x="463.4" y="867.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="466.4" y="878.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (3 samples, 0.36%)</title><rect x="463.4" y="851.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="466.4" y="862.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (6 samples, 0.73%)</title><rect x="467.7" y="947.0" width="8.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="470.7" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.73%)</title><rect x="467.7" y="931.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="470.7" y="942.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.73%)</title><rect x="467.7" y="915.0" width="8.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.7" y="926.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (30 samples, 3.64%)</title><rect x="476.3" y="1043.0" width="42.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.3" y="1054.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (30 samples, 3.64%)</title><rect x="476.3" y="1027.0" width="42.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="479.3" y="1038.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (30 samples, 3.64%)</title><rect x="476.3" y="1011.0" width="42.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.3" y="1022.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (30 samples, 3.64%)</title><rect x="476.3" y="995.0" width="42.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.3" y="1006.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (30 samples, 3.64%)</title><rect x="476.3" y="979.0" width="42.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="479.3" y="990.0">java..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.12%)</title><rect x="507.7" y="963.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="510.7" y="974.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="507.7" y="947.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="510.7" y="958.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="509.2" y="963.0" width="1.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="512.2" y="974.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.73%)</title><rect x="510.6" y="963.0" width="8.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="513.6" y="974.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="514.9" y="947.0" width="4.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="517.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (168 samples, 20.36%)</title><rect x="519.2" y="1139.0" width="240.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="522.2" y="1150.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.12%)</title><rect x="523.5" y="1123.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="526.5" y="1134.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.24%)</title><rect x="524.9" y="1123.0" width="2.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="527.9" y="1134.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.24%)</title><rect x="524.9" y="1107.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="527.9" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (31 samples, 3.76%)</title><rect x="527.8" y="1123.0" width="44.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.8" y="1134.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (31 samples, 3.76%)</title><rect x="527.8" y="1107.0" width="44.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.8" y="1118.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (30 samples, 3.64%)</title><rect x="529.2" y="1091.0" width="42.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="532.2" y="1102.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (10 samples, 1.21%)</title><rect x="529.2" y="1075.0" width="14.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="532.2" y="1086.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (1 samples, 0.12%)</title><rect x="529.2" y="1059.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="532.2" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 1.09%)</title><rect x="530.6" y="1059.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 1.09%)</title><rect x="530.6" y="1043.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.6" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.wasLastOpReadOrNull (1 samples, 0.12%)</title><rect x="543.5" y="1075.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="546.5" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.85%)</title><rect x="544.9" y="1075.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="547.9" y="1086.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (5 samples, 0.61%)</title><rect x="547.8" y="1059.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="550.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 1.33%)</title><rect x="554.9" y="1075.0" width="15.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.9" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (11 samples, 1.33%)</title><rect x="554.9" y="1059.0" width="15.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="557.9" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.48%)</title><rect x="554.9" y="1043.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="557.9" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.85%)</title><rect x="560.7" y="1043.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="563.7" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="567.8" y="1027.0" width="2.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="570.8" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.12%)</title><rect x="570.7" y="1075.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="573.7" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (68 samples, 8.24%)</title><rect x="572.1" y="1123.0" width="97.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="575.1" y="1134.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (66 samples, 8.00%)</title><rect x="572.1" y="1107.0" width="94.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="575.1" y="1118.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (21 samples, 2.55%)</title><rect x="582.1" y="1091.0" width="30.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="585.1" y="1102.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 2.55%)</title><rect x="582.1" y="1075.0" width="30.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="585.1" y="1086.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.97%)</title><rect x="596.4" y="1059.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="599.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 0.24%)</title><rect x="597.9" y="1043.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="600.9" y="1054.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.24%)</title><rect x="597.9" y="1027.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.9" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.61%)</title><rect x="600.7" y="1043.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="603.7" y="1054.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.12%)</title><rect x="607.9" y="1059.0" width="1.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="610.9" y="1070.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.24%)</title><rect x="609.3" y="1059.0" width="2.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="612.3" y="1070.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.12%)</title><rect x="612.2" y="1091.0" width="1.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="615.2" y="1102.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (37 samples, 4.48%)</title><rect x="613.6" y="1091.0" width="52.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.6" y="1102.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (37 samples, 4.48%)</title><rect x="613.6" y="1075.0" width="52.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="616.6" y="1086.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (12 samples, 1.45%)</title><rect x="613.6" y="1059.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="616.6" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.61%)</title><rect x="623.6" y="1043.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="626.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.61%)</title><rect x="623.6" y="1027.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.6" y="1038.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (25 samples, 3.03%)</title><rect x="630.8" y="1059.0" width="35.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.8" y="1070.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.put (25 samples, 3.03%)</title><rect x="630.8" y="1043.0" width="35.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.8" y="1054.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.24%)</title><rect x="630.8" y="1027.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="633.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.24%)</title><rect x="630.8" y="1011.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="633.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.24%)</title><rect x="630.8" y="995.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="633.8" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (23 samples, 2.79%)</title><rect x="633.6" y="1027.0" width="32.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.6" y="1038.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.12%)</title><rect x="646.5" y="1011.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="649.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (11 samples, 1.33%)</title><rect x="647.9" y="1011.0" width="15.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="650.9" y="1022.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="662.2" y="995.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="665.2" y="1006.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="662.2" y="979.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="665.2" y="990.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="662.2" y="963.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="665.2" y="974.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="662.2" y="947.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="665.2" y="958.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.12%)</title><rect x="662.2" y="931.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="665.2" y="942.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.24%)</title><rect x="663.6" y="1011.0" width="2.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="666.6" y="1022.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.24%)</title><rect x="666.5" y="1107.0" width="2.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="669.5" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (2 samples, 0.24%)</title><rect x="666.5" y="1091.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.5" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.24%)</title><rect x="666.5" y="1075.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.24%)</title><rect x="666.5" y="1059.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="669.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.12%)</title><rect x="666.5" y="1043.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="669.5" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.12%)</title><rect x="667.9" y="1043.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.9" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (43 samples, 5.21%)</title><rect x="669.4" y="1123.0" width="61.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="672.4" y="1134.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (43 samples, 5.21%)</title><rect x="669.4" y="1107.0" width="61.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.4" y="1118.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/680166558.process (23 samples, 2.79%)</title><rect x="679.4" y="1091.0" width="32.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.4" y="1102.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (22 samples, 2.67%)</title><rect x="680.8" y="1075.0" width="31.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.8" y="1086.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 2.06%)</title><rect x="683.7" y="1059.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="686.7" y="1070.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.61%)</title><rect x="685.1" y="1043.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="688.1" y="1054.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (5 samples, 0.61%)</title><rect x="685.1" y="1027.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="688.1" y="1038.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (5 samples, 0.61%)</title><rect x="685.1" y="1011.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="688.1" y="1022.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (5 samples, 0.61%)</title><rect x="685.1" y="995.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="688.1" y="1006.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (4 samples, 0.48%)</title><rect x="686.5" y="979.0" width="5.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.5" y="990.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.12%)</title><rect x="690.8" y="963.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="693.8" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.73%)</title><rect x="692.3" y="1043.0" width="8.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="695.3" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.73%)</title><rect x="692.3" y="1027.0" width="8.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="695.3" y="1038.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.61%)</title><rect x="693.7" y="1011.0" width="7.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="696.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.61%)</title><rect x="700.8" y="1043.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="703.8" y="1054.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (3 samples, 0.36%)</title><rect x="708.0" y="1059.0" width="4.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="711.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.36%)</title><rect x="708.0" y="1043.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="711.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.36%)</title><rect x="708.0" y="1027.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="711.0" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.12%)</title><rect x="712.3" y="1091.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="715.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (1 samples, 0.12%)</title><rect x="712.3" y="1075.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="715.3" y="1086.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.12%)</title><rect x="712.3" y="1059.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="715.3" y="1070.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.12%)</title><rect x="712.3" y="1043.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.3" y="1054.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.12%)</title><rect x="712.3" y="1027.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="715.3" y="1038.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.12%)</title><rect x="712.3" y="1011.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="715.3" y="1022.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.12%)</title><rect x="712.3" y="995.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="715.3" y="1006.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.48%)</title><rect x="713.7" y="1091.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="716.7" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (4 samples, 0.48%)</title><rect x="713.7" y="1075.0" width="5.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="716.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="719.4" y="1091.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="722.4" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.12%)</title><rect x="719.4" y="1075.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.4" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.24%)</title><rect x="720.9" y="1091.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="723.9" y="1102.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.12%)</title><rect x="722.3" y="1075.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="725.3" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.61%)</title><rect x="723.7" y="1091.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 0.61%)</title><rect x="723.7" y="1075.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="726.7" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.36%)</title><rect x="726.6" y="1059.0" width="4.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="729.6" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.12%)</title><rect x="726.6" y="1043.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="729.6" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.12%)</title><rect x="728.0" y="1043.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="731.0" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="729.4" y="1043.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="732.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 2.42%)</title><rect x="730.9" y="1123.0" width="28.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="733.9" y="1134.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (20 samples, 2.42%)</title><rect x="730.9" y="1107.0" width="28.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="733.9" y="1118.0">ja..</text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.61%)</title><rect x="738.0" y="1091.0" width="7.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="741.0" y="1102.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.48%)</title><rect x="739.5" y="1075.0" width="5.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="742.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.97%)</title><rect x="745.2" y="1091.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="748.2" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.48%)</title><rect x="745.2" y="1075.0" width="5.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="748.2" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/198904031.accept (2 samples, 0.24%)</title><rect x="746.6" y="1059.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="749.6" y="1070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.12%)</title><rect x="749.5" y="1059.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="752.5" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 0.36%)</title><rect x="750.9" y="1075.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="753.9" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/198904031.accept (3 samples, 0.36%)</title><rect x="750.9" y="1059.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="753.9" y="1070.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.24%)</title><rect x="752.3" y="1043.0" width="2.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="755.3" y="1054.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.24%)</title><rect x="752.3" y="1027.0" width="2.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="755.3" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.12%)</title><rect x="755.2" y="1075.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="758.2" y="1086.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.12%)</title><rect x="756.6" y="1091.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="759.6" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.12%)</title><rect x="758.0" y="1091.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="761.0" y="1102.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.36%)</title><rect x="759.5" y="1139.0" width="4.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="762.5" y="1150.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.36%)</title><rect x="759.5" y="1123.0" width="4.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="762.5" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.12%)</title><rect x="763.8" y="1203.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="766.8" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.12%)</title><rect x="765.2" y="1203.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="768.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.12%)</title><rect x="765.2" y="1187.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="768.2" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.12%)</title><rect x="765.2" y="1171.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="768.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.12%)</title><rect x="765.2" y="1155.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="768.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (202 samples, 24.48%)</title><rect x="766.6" y="1203.0" width="289.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.6" y="1214.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (202 samples, 24.48%)</title><rect x="766.6" y="1187.0" width="289.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="769.6" y="1198.0">java/util/concurrent/LinkedBlockingQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (181 samples, 21.94%)</title><rect x="769.5" y="1171.0" width="258.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="772.5" y="1182.0">java/util/concurrent/locks/Abstrac..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 2.30%)</title><rect x="776.6" y="1155.0" width="27.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="779.6" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.85%)</title><rect x="803.8" y="1155.0" width="10.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="806.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.85%)</title><rect x="803.8" y="1139.0" width="10.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="806.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.12%)</title><rect x="812.4" y="1123.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.4" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.12%)</title><rect x="812.4" y="1107.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.4" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (8 samples, 0.97%)</title><rect x="813.8" y="1155.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (8 samples, 0.97%)</title><rect x="813.8" y="1139.0" width="11.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (142 samples, 17.21%)</title><rect x="825.3" y="1155.0" width="203.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="828.3" y="1166.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (141 samples, 17.09%)</title><rect x="826.7" y="1139.0" width="201.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="829.7" y="1150.0">jdk/internal/misc/Unsafe.p..</text>
</g>
<g>
<title>Parker::park(bool, long) (1 samples, 0.12%)</title><rect x="831.0" y="1123.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="834.0" y="1134.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.12%)</title><rect x="832.4" y="1123.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="835.4" y="1134.0"></text>
</g>
<g>
<title>Unsafe_Park (135 samples, 16.36%)</title><rect x="833.9" y="1123.0" width="193.0" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="836.9" y="1134.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.12%)</title><rect x="833.9" y="1107.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.9" y="1118.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.12%)</title><rect x="835.3" y="1107.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="838.3" y="1118.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 2.30%)</title><rect x="836.7" y="1107.0" width="27.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="839.7" y="1118.0">P..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.12%)</title><rect x="846.7" y="1091.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="849.7" y="1102.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.61%)</title><rect x="848.2" y="1091.0" width="7.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="851.2" y="1102.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.12%)</title><rect x="853.9" y="1075.0" width="1.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="856.9" y="1086.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.36%)</title><rect x="855.3" y="1091.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="858.3" y="1102.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.12%)</title><rect x="859.6" y="1091.0" width="1.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="862.6" y="1102.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="861.0" y="1091.0" width="1.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="864.0" y="1102.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="862.5" y="1091.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="865.5" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (1 samples, 0.12%)</title><rect x="863.9" y="1107.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.9" y="1118.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.36%)</title><rect x="865.3" y="1107.0" width="4.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="868.3" y="1118.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.12%)</title><rect x="869.6" y="1107.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="872.6" y="1118.0"></text>
</g>
<g>
<title>__lll_unlock_wake (37 samples, 4.48%)</title><rect x="871.0" y="1107.0" width="53.0" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="874.0" y="1118.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 7.15%)</title><rect x="924.0" y="1107.0" width="84.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="927.0" y="1118.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.61%)</title><rect x="1008.4" y="1107.0" width="7.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1011.4" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.24%)</title><rect x="1015.5" y="1107.0" width="2.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1018.5" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1018.4" y="1107.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1021.4" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.36%)</title><rect x="1019.8" y="1107.0" width="4.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1022.8" y="1118.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.12%)</title><rect x="1024.1" y="1107.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.1" y="1118.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.12%)</title><rect x="1025.5" y="1107.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1028.5" y="1118.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.12%)</title><rect x="1026.9" y="1123.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1029.9" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (19 samples, 2.30%)</title><rect x="1028.4" y="1171.0" width="27.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1031.4" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (19 samples, 2.30%)</title><rect x="1028.4" y="1155.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1031.4" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 2.30%)</title><rect x="1028.4" y="1139.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1031.4" y="1150.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 2.30%)</title><rect x="1028.4" y="1123.0" width="27.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1031.4" y="1134.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.12%)</title><rect x="1054.1" y="1107.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1057.1" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.12%)</title><rect x="1055.6" y="1251.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1058.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.12%)</title><rect x="1055.6" y="1235.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.12%)</title><rect x="1055.6" y="1219.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1058.6" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.12%)</title><rect x="1055.6" y="1203.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1058.6" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.12%)</title><rect x="1055.6" y="1187.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1058.6" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.12%)</title><rect x="1055.6" y="1171.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1058.6" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.12%)</title><rect x="1055.6" y="1155.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.6" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.12%)</title><rect x="1055.6" y="1139.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1058.6" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.12%)</title><rect x="1055.6" y="1123.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.6" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.12%)</title><rect x="1055.6" y="1107.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1058.6" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.12%)</title><rect x="1055.6" y="1091.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1058.6" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.12%)</title><rect x="1055.6" y="1075.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1058.6" y="1086.0"></text>
</g>
<g>
<title>start_thread (93 samples, 11.27%)</title><rect x="1057.0" y="1251.0" width="133.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1060.0" y="1262.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (93 samples, 11.27%)</title><rect x="1057.0" y="1235.0" width="133.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1060.0" y="1246.0">thread_native_ent..</text>
</g>
<g>
<title>Thread::call_run() (93 samples, 11.27%)</title><rect x="1057.0" y="1219.0" width="133.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1060.0" y="1230.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (1 samples, 0.12%)</title><rect x="1057.0" y="1203.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.0" y="1214.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.12%)</title><rect x="1057.0" y="1187.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1060.0" y="1198.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.12%)</title><rect x="1057.0" y="1171.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1060.0" y="1182.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.12%)</title><rect x="1057.0" y="1155.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1060.0" y="1166.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (91 samples, 11.03%)</title><rect x="1058.4" y="1203.0" width="130.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1061.4" y="1214.0">JavaThread::thre..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (91 samples, 11.03%)</title><rect x="1058.4" y="1187.0" width="130.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1061.4" y="1198.0">CompileBroker::c..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (91 samples, 11.03%)</title><rect x="1058.4" y="1171.0" width="130.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.4" y="1182.0">CompileBroker::i..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (90 samples, 10.91%)</title><rect x="1058.4" y="1155.0" width="128.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1061.4" y="1166.0">C2Compiler::comp..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (90 samples, 10.91%)</title><rect x="1058.4" y="1139.0" width="128.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1061.4" y="1150.0">Compile::Compile..</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 5.45%)</title><rect x="1058.4" y="1123.0" width="64.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1061.4" y="1134.0">Compile..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.12%)</title><rect x="1058.4" y="1107.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1061.4" y="1118.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.12%)</title><rect x="1058.4" y="1091.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.4" y="1102.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.12%)</title><rect x="1058.4" y="1075.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.4" y="1086.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.12%)</title><rect x="1058.4" y="1059.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1061.4" y="1070.0"></text>
</g>
<g>
<title>compB_mem_immNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.12%)</title><rect x="1058.4" y="1043.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1061.4" y="1054.0"></text>
</g>
<g>
<title>Assembler::cmpb(Address, int) (1 samples, 0.12%)</title><rect x="1058.4" y="1027.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1061.4" y="1038.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.24%)</title><rect x="1059.8" y="1107.0" width="2.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1062.8" y="1118.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.12%)</title><rect x="1059.8" y="1091.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1062.8" y="1102.0"></text>
</g>
<g>
<title>Compile::FillLocArray(int, MachSafePointNode*, Node*, GrowableArray&lt;ScopeValue*&gt;*, GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.12%)</title><rect x="1059.8" y="1075.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1062.8" y="1086.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.12%)</title><rect x="1061.3" y="1091.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1064.3" y="1102.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.12%)</title><rect x="1061.3" y="1075.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1064.3" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.36%)</title><rect x="1062.7" y="1107.0" width="4.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1065.7" y="1118.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.12%)</title><rect x="1062.7" y="1091.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.12%)</title><rect x="1064.1" y="1091.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1067.1" y="1102.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (1 samples, 0.12%)</title><rect x="1065.6" y="1091.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1068.6" y="1102.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.12%)</title><rect x="1065.6" y="1075.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1068.6" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.48%)</title><rect x="1067.0" y="1107.0" width="5.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1070.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.48%)</title><rect x="1067.0" y="1091.0" width="5.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.0" y="1102.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1067.0" y="1075.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1070.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.12%)</title><rect x="1068.4" y="1075.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1071.4" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.12%)</title><rect x="1069.9" y="1075.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1072.9" y="1086.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.12%)</title><rect x="1071.3" y="1075.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1074.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (35 samples, 4.24%)</title><rect x="1072.7" y="1107.0" width="50.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.7" y="1118.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.61%)</title><rect x="1072.7" y="1091.0" width="7.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.7" y="1102.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.12%)</title><rect x="1077.0" y="1075.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1080.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.12%)</title><rect x="1078.4" y="1075.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1081.4" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.12%)</title><rect x="1078.4" y="1059.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.4" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 0.73%)</title><rect x="1079.9" y="1091.0" width="8.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1082.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.12%)</title><rect x="1081.3" y="1075.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1084.3" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.36%)</title><rect x="1082.7" y="1075.0" width="4.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1085.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.12%)</title><rect x="1087.0" y="1075.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.0" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (6 samples, 0.73%)</title><rect x="1088.4" y="1091.0" width="8.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1091.4" y="1102.0"></text>
</g>
<g>
<title>RegMask::Size() const (3 samples, 0.36%)</title><rect x="1092.7" y="1075.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1095.7" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.12%)</title><rect x="1097.0" y="1091.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1100.0" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.12%)</title><rect x="1098.5" y="1091.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.5" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.48%)</title><rect x="1099.9" y="1091.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1102.9" y="1102.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.24%)</title><rect x="1102.8" y="1075.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.8" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.12%)</title><rect x="1105.6" y="1091.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.6" y="1102.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 0.36%)</title><rect x="1107.0" y="1091.0" width="4.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.0" y="1102.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.12%)</title><rect x="1107.0" y="1075.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.0" y="1086.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.24%)</title><rect x="1108.5" y="1075.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.12%)</title><rect x="1108.5" y="1059.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1111.5" y="1070.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1108.5" y="1043.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1111.5" y="1054.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.12%)</title><rect x="1109.9" y="1059.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1112.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.12%)</title><rect x="1111.3" y="1091.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1114.3" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1111.3" y="1075.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.36%)</title><rect x="1112.8" y="1091.0" width="4.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.8" y="1102.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.12%)</title><rect x="1114.2" y="1075.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1117.2" y="1086.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.12%)</title><rect x="1115.6" y="1075.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1118.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.12%)</title><rect x="1117.1" y="1091.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.1" y="1102.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.12%)</title><rect x="1117.1" y="1075.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1120.1" y="1086.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.12%)</title><rect x="1117.1" y="1059.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1120.1" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.24%)</title><rect x="1118.5" y="1091.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.5" y="1102.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.12%)</title><rect x="1121.3" y="1091.0" width="1.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1124.3" y="1102.0"></text>
</g>
<g>
<title>Compile::Optimize() (38 samples, 4.61%)</title><rect x="1122.8" y="1123.0" width="54.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.8" y="1134.0">Compi..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (9 samples, 1.09%)</title><rect x="1122.8" y="1107.0" width="12.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (9 samples, 1.09%)</title><rect x="1122.8" y="1091.0" width="12.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.85%)</title><rect x="1122.8" y="1075.0" width="10.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.73%)</title><rect x="1124.2" y="1059.0" width="8.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1127.2" y="1070.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.12%)</title><rect x="1125.6" y="1043.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1128.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 0.48%)</title><rect x="1127.1" y="1043.0" width="5.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.1" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (4 samples, 0.48%)</title><rect x="1127.1" y="1027.0" width="5.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.1" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.24%)</title><rect x="1132.8" y="1075.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.8" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.12%)</title><rect x="1132.8" y="1059.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.8" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.12%)</title><rect x="1132.8" y="1043.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.12%)</title><rect x="1134.2" y="1059.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1137.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (5 samples, 0.61%)</title><rect x="1135.6" y="1107.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (5 samples, 0.61%)</title><rect x="1135.6" y="1091.0" width="7.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (5 samples, 0.61%)</title><rect x="1135.6" y="1075.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.6" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (5 samples, 0.61%)</title><rect x="1135.6" y="1059.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.6" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="1043.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="1027.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="1011.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.6" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="995.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.6" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="979.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="963.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.6" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="947.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.6" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="931.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="915.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.6" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="899.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="883.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.6" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="867.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.6" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="851.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="835.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="819.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.6" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="803.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.6" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="787.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="771.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="755.0" width="1.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1138.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="739.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="723.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="707.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="691.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="675.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="659.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="643.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="627.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="611.0" width="1.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.6" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="595.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="579.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.6" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="563.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="547.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="531.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="515.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.6" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="499.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="483.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="467.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="451.0" width="1.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="435.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="419.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="403.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="387.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="371.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.6" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="355.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1138.6" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="339.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="323.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1138.6" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="307.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="291.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="275.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="259.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1138.6" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="243.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="227.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="211.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="195.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="179.0" width="1.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1138.6" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1135.6" y="163.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="174.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.12%)</title><rect x="1135.6" y="147.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1138.6" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.48%)</title><rect x="1137.1" y="1043.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1140.1" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (4 samples, 0.48%)</title><rect x="1137.1" y="1027.0" width="5.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.1" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.36%)</title><rect x="1137.1" y="1011.0" width="4.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1140.1" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="995.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="979.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="963.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="947.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="931.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.1" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="915.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="899.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="883.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="867.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="851.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="835.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1140.1" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="819.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="803.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="787.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="771.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="755.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="739.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.1" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="723.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="707.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="691.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="675.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="659.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1140.1" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="643.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="627.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1140.1" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1137.1" y="611.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1140.1" y="622.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1137.1" y="595.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1140.1" y="606.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.12%)</title><rect x="1137.1" y="579.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.24%)</title><rect x="1138.5" y="995.0" width="2.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.24%)</title><rect x="1138.5" y="979.0" width="2.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1141.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.5" y="963.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1138.5" y="947.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.5" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.12%)</title><rect x="1138.5" y="931.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1141.5" y="942.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.12%)</title><rect x="1138.5" y="915.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1141.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1139.9" y="963.0" width="1.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.9" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1139.9" y="947.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.9" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1139.9" y="931.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.9" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.12%)</title><rect x="1139.9" y="915.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.9" y="926.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.12%)</title><rect x="1139.9" y="899.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.9" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1141.4" y="1011.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1141.4" y="995.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.4" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.12%)</title><rect x="1141.4" y="979.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.4" y="990.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (12 samples, 1.45%)</title><rect x="1142.8" y="1107.0" width="17.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.12%)</title><rect x="1142.8" y="1091.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1145.8" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.85%)</title><rect x="1144.2" y="1091.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (6 samples, 0.73%)</title><rect x="1145.7" y="1075.0" width="8.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1148.7" y="1086.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.12%)</title><rect x="1145.7" y="1059.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1148.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 0.61%)</title><rect x="1147.1" y="1059.0" width="7.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.1" y="1070.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.12%)</title><rect x="1148.5" y="1043.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.12%)</title><rect x="1150.0" y="1043.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1153.0" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.12%)</title><rect x="1150.0" y="1027.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1153.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.24%)</title><rect x="1151.4" y="1043.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.12%)</title><rect x="1154.2" y="1091.0" width="1.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.12%)</title><rect x="1155.7" y="1091.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1158.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.12%)</title><rect x="1157.1" y="1091.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.12%)</title><rect x="1157.1" y="1075.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1160.1" y="1086.0"></text>
</g>
<g>
<title>BoolNode::Value(PhaseGVN*) const (1 samples, 0.12%)</title><rect x="1157.1" y="1059.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.1" y="1070.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.12%)</title><rect x="1158.5" y="1091.0" width="1.5" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1161.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (11 samples, 1.33%)</title><rect x="1160.0" y="1107.0" width="15.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.0" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (9 samples, 1.09%)</title><rect x="1160.0" y="1091.0" width="12.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.0" y="1102.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.12%)</title><rect x="1161.4" y="1075.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.4" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1162.8" y="1075.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="1086.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.12%)</title><rect x="1162.8" y="1059.0" width="1.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.8" y="1070.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.12%)</title><rect x="1162.8" y="1043.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.8" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (5 samples, 0.61%)</title><rect x="1164.3" y="1075.0" width="7.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.24%)</title><rect x="1168.5" y="1059.0" width="2.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.5" y="1070.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (2 samples, 0.24%)</title><rect x="1168.5" y="1043.0" width="2.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.5" y="1054.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1171.4" y="1075.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1174.4" y="1086.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.12%)</title><rect x="1171.4" y="1059.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.4" y="1070.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.12%)</title><rect x="1172.8" y="1091.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.8" y="1102.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.12%)</title><rect x="1174.3" y="1091.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.3" y="1102.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.12%)</title><rect x="1175.7" y="1107.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1178.7" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.85%)</title><rect x="1177.1" y="1123.0" width="10.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.1" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.85%)</title><rect x="1177.1" y="1107.0" width="10.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.85%)</title><rect x="1177.1" y="1091.0" width="10.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.1" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.85%)</title><rect x="1177.1" y="1075.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.85%)</title><rect x="1177.1" y="1059.0" width="10.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.85%)</title><rect x="1177.1" y="1043.0" width="10.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="1054.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1177.1" y="1027.0" width="1.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="1038.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.12%)</title><rect x="1177.1" y="1011.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.1" y="1022.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.183] (1 samples, 0.12%)</title><rect x="1177.1" y="995.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.1" y="1006.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.12%)</title><rect x="1177.1" y="979.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.1" y="990.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.12%)</title><rect x="1177.1" y="963.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.1" y="974.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.36%)</title><rect x="1178.6" y="1027.0" width="4.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.36%)</title><rect x="1178.6" y="1011.0" width="4.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.36%)</title><rect x="1178.6" y="995.0" width="4.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.6" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.36%)</title><rect x="1178.6" y="979.0" width="4.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.36%)</title><rect x="1178.6" y="963.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.36%)</title><rect x="1178.6" y="947.0" width="4.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="958.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1178.6" y="931.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.6" y="942.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1178.6" y="915.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="926.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1178.6" y="899.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.6" y="910.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1178.6" y="883.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.6" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1178.6" y="867.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.12%)</title><rect x="1178.6" y="851.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.6" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.12%)</title><rect x="1178.6" y="835.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="846.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.12%)</title><rect x="1178.6" y="819.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.6" y="830.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.12%)</title><rect x="1178.6" y="803.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.0" y="931.0" width="2.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.0" y="915.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1180.0" y="899.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1180.0" y="883.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1180.0" y="867.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1180.0" y="851.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1180.0" y="835.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.0" y="819.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1180.0" y="803.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1180.0" y="787.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1180.0" y="771.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1180.0" y="755.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1180.0" y="739.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.0" y="723.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1180.0" y="707.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1180.0" y="691.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1180.0" y="675.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1180.0" y="659.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1180.0" y="643.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.0" y="627.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1180.0" y="611.0" width="2.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1180.0" y="595.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1180.0" y="579.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1180.0" y="563.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1180.0" y="547.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1180.0" y="531.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1180.0" y="515.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1180.0" y="499.0" width="2.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1180.0" y="483.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1180.0" y="467.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1180.0" y="451.0" width="2.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.0" y="462.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1180.0" y="435.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.0" y="446.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.12%)</title><rect x="1180.0" y="419.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.0" y="430.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_load_store(BasicType, LibraryCallKit::LoadStoreKind, LibraryCallKit::AccessKind) [clone .part.171] (1 samples, 0.12%)</title><rect x="1180.0" y="403.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::access_atomic_cmpxchg_bool_at(Node*, Node*, Node*, TypePtr const*, int, Node*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.12%)</title><rect x="1180.0" y="387.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.0" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.4" y="435.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.4" y="419.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.4" y="403.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.4" y="387.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.4" y="371.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.4" y="355.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.4" y="339.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.4" y="323.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.4" y="307.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.4" y="291.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.4" y="275.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.4" y="259.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.4" y="243.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.4" y="227.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.4" y="211.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.4" y="195.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.4" y="179.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1181.4" y="163.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1184.4" y="174.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1181.4" y="147.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="158.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1181.4" y="131.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1181.4" y="115.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1181.4" y="99.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1181.4" y="83.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="94.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.12%)</title><rect x="1181.4" y="67.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="78.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.12%)</title><rect x="1181.4" y="51.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.4" y="62.0"></text>
</g>
<g>
<title>TypeNode::cmp(Node const&amp;) const (1 samples, 0.12%)</title><rect x="1181.4" y="35.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.36%)</title><rect x="1182.8" y="1027.0" width="4.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.36%)</title><rect x="1182.8" y="1011.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.8" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.36%)</title><rect x="1182.8" y="995.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1184.3" y="979.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1184.3" y="963.0" width="2.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1184.3" y="947.0" width="2.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1184.3" y="931.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.24%)</title><rect x="1184.3" y="915.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.3" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.24%)</title><rect x="1184.3" y="899.0" width="2.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.24%)</title><rect x="1184.3" y="883.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.24%)</title><rect x="1184.3" y="867.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.24%)</title><rect x="1184.3" y="851.0" width="2.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.24%)</title><rect x="1184.3" y="835.0" width="2.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.3" y="846.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1184.3" y="819.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="830.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1184.3" y="803.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.3" y="814.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1184.3" y="787.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1184.3" y="771.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1184.3" y="755.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1184.3" y="739.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1184.3" y="723.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1184.3" y="707.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.3" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1184.3" y="691.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.3" y="702.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1184.3" y="675.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="686.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1184.3" y="659.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.3" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1184.3" y="643.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="654.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1184.3" y="627.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.3" y="638.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1184.3" y="611.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.3" y="622.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1184.3" y="595.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.3" y="606.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.12%)</title><rect x="1184.3" y="579.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="590.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.12%)</title><rect x="1184.3" y="563.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.3" y="574.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.12%)</title><rect x="1184.3" y="547.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.3" y="558.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.12%)</title><rect x="1184.3" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="819.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.7" y="803.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.7" y="787.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.7" y="771.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.7" y="755.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.7" y="739.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.7" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.12%)</title><rect x="1185.7" y="723.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.12%)</title><rect x="1185.7" y="707.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.12%)</title><rect x="1185.7" y="691.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.12%)</title><rect x="1185.7" y="675.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.12%)</title><rect x="1185.7" y="659.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.12%)</title><rect x="1185.7" y="643.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.7" y="654.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.12%)</title><rect x="1185.7" y="627.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.7" y="638.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.12%)</title><rect x="1185.7" y="611.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="622.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.12%)</title><rect x="1185.7" y="595.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.12%)</title><rect x="1185.7" y="579.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.7" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.12%)</title><rect x="1185.7" y="563.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.7" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1185.7" y="547.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.7" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.12%)</title><rect x="1185.7" y="531.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.7" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.12%)</title><rect x="1185.7" y="515.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="526.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.12%)</title><rect x="1185.7" y="499.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.7" y="510.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.12%)</title><rect x="1185.7" y="483.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.7" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1185.7" y="467.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.7" y="478.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1185.7" y="451.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.7" y="462.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1185.7" y="435.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="446.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.12%)</title><rect x="1185.7" y="419.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.7" y="430.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.12%)</title><rect x="1185.7" y="403.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.7" y="414.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.12%)</title><rect x="1185.7" y="387.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.7" y="398.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.12%)</title><rect x="1185.7" y="371.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="382.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.12%)</title><rect x="1185.7" y="355.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.7" y="366.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.12%)</title><rect x="1185.7" y="339.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.7" y="350.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.12%)</title><rect x="1187.1" y="1155.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.1" y="1166.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.12%)</title><rect x="1187.1" y="1139.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="1150.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.12%)</title><rect x="1188.6" y="1203.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.6" y="1214.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.12%)</title><rect x="1188.6" y="1187.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.6" y="1198.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.12%)</title><rect x="1188.6" y="1171.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.6" y="1182.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.12%)</title><rect x="1188.6" y="1155.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.6" y="1166.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.12%)</title><rect x="1188.6" y="1139.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.6" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.12%)</title><rect x="1188.6" y="1123.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1191.6" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.12%)</title><rect x="1188.6" y="1107.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.6" y="1118.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (1 samples, 0.12%)</title><rect x="1188.6" y="1091.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.6" y="1102.0"></text>
</g>
</g>
</svg>
