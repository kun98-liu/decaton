<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2102" onload="init(evt)" viewBox="0 0 1200 2102" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="2085"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="2085"> </text>
<g id="frames">
<g>
<title>all (949 samples, 100.00%)</title><rect x="10.0" y="2051.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="2062.0">all</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.11%)</title><rect x="10.0" y="2035.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="2046.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (1 samples, 0.11%)</title><rect x="10.0" y="2019.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2030.0"></text>
</g>
<g>
<title>Compile::Optimize() (1 samples, 0.11%)</title><rect x="10.0" y="2003.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="10.0" y="1987.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="10.0" y="1971.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1955.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1939.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1923.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1907.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1891.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1875.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1859.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1827.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1811.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1795.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1779.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1763.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1747.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1731.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1715.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1699.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1683.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1667.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1651.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1635.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1619.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1603.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1587.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1571.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1555.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1539.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1523.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1507.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1491.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1475.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1459.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1443.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1427.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1411.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1395.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1379.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1363.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1347.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1331.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1315.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1299.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1283.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1267.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1251.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1235.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1219.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1203.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1187.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1171.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1155.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1139.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="13.0" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1123.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1107.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1091.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1075.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1059.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1043.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1027.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="13.0" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="995.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="979.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="963.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="947.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="931.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="915.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="899.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="867.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="755.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="723.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="659.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="643.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="627.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="611.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="595.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="563.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="515.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="499.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="483.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="467.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="451.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="435.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="419.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="387.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="371.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="355.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="339.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="323.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="307.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="291.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="259.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="243.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="227.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="211.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="195.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="179.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="163.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="131.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="115.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="99.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="83.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="10.0" y="67.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="10.0" y="51.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.11%)</title><rect x="10.0" y="35.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="2035.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="2046.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="2019.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="2030.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="2003.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="2014.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1987.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.2" y="1998.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1971.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="1982.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1955.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="1966.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1939.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="1950.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1923.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.2" y="1934.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1907.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.2" y="1918.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1891.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.2" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1875.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1859.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1843.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1827.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1811.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.2" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1795.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1779.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.2" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1763.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.2" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1747.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1731.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1715.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1699.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.2" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1683.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1667.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.2" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1651.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1635.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1619.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.2" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1603.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.2" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1587.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1571.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1555.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1539.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1523.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1507.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1491.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1475.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.2" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1459.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.2" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1443.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1427.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1411.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1395.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1379.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1363.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1347.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1331.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1315.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1299.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1283.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1267.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1251.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1235.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1219.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1203.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1187.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1171.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1155.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1139.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1123.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1107.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1091.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1075.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1059.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1043.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1027.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="1011.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="995.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="979.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="963.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="947.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="931.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="915.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="899.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="883.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="867.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="851.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="14.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="835.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="819.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="803.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="787.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="771.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="14.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="755.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="739.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="14.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="723.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="707.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="691.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="675.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="659.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="643.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="627.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="611.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="595.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="579.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="563.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="547.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="14.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="531.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="515.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="499.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="14.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="483.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="467.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="451.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="435.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="14.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="419.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="403.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="387.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="371.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="355.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="339.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="14.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="323.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="307.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="14.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="291.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="275.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="14.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="259.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="243.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="227.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="211.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="195.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="179.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="14.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="163.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="14.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="147.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="131.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="115.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="99.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="14.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="83.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="67.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.2" y="78.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="11.2" y="51.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.2" y="62.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.11%)</title><rect x="11.2" y="35.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="46.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.11%)</title><rect x="12.5" y="2035.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="15.5" y="2046.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.11%)</title><rect x="12.5" y="2019.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.5" y="2030.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.94] (1 samples, 0.11%)</title><rect x="12.5" y="2003.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.5" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (225 samples, 23.71%)</title><rect x="13.7" y="2035.0" width="279.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.7" y="2046.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (225 samples, 23.71%)</title><rect x="13.7" y="2019.0" width="279.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="16.7" y="2030.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.11%)</title><rect x="13.7" y="2003.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="16.7" y="2014.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.11%)</title><rect x="13.7" y="1987.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.7" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.11%)</title><rect x="13.7" y="1971.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.7" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap.forEach (1 samples, 0.11%)</title><rect x="13.7" y="1955.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="16.7" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$484/1054195516.accept (1 samples, 0.11%)</title><rect x="13.7" y="1939.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="16.7" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateLastSeenEpochIfNewer (1 samples, 0.11%)</title><rect x="13.7" y="1923.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.7" y="1934.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.11%)</title><rect x="13.7" y="1907.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.7" y="1918.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.11%)</title><rect x="13.7" y="1891.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="16.7" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$485/44701367.get$Lambda (1 samples, 0.11%)</title><rect x="13.7" y="1875.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="16.7" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$485/44701367.&lt;init&gt; (1 samples, 0.11%)</title><rect x="13.7" y="1859.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.7" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (224 samples, 23.60%)</title><rect x="15.0" y="2003.0" width="278.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.0" y="2014.0">com/linecorp/decaton/processor/runtim..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (4 samples, 0.42%)</title><rect x="16.2" y="1987.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (4 samples, 0.42%)</title><rect x="16.2" y="1971.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.42%)</title><rect x="16.2" y="1955.0" width="5.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.42%)</title><rect x="16.2" y="1939.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.42%)</title><rect x="16.2" y="1923.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="19.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.42%)</title><rect x="16.2" y="1907.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.32%)</title><rect x="16.2" y="1891.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (2 samples, 0.21%)</title><rect x="16.2" y="1875.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (2 samples, 0.21%)</title><rect x="16.2" y="1859.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="17.5" y="1843.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.5" y="1854.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="17.5" y="1827.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="20.5" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.7" y="1875.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.7" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.7" y="1859.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.7" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.7" y="1843.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="21.7" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="18.7" y="1827.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.7" y="1838.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="18.7" y="1811.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="21.7" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.11%)</title><rect x="19.9" y="1891.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="22.9" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.11%)</title><rect x="21.2" y="1987.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.2" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.11%)</title><rect x="21.2" y="1971.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.2" y="1982.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="21.2" y="1955.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="24.2" y="1966.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="21.2" y="1939.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.2" y="1950.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="21.2" y="1923.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="24.2" y="1934.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="21.2" y="1907.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="24.2" y="1918.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="21.2" y="1891.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="24.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="21.2" y="1875.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.2" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="21.2" y="1859.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="24.2" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="21.2" y="1843.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="24.2" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$247/1368427144.test (1 samples, 0.11%)</title><rect x="21.2" y="1827.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="24.2" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (6 samples, 0.63%)</title><rect x="22.4" y="1987.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.4" y="1998.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (6 samples, 0.63%)</title><rect x="22.4" y="1971.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="25.4" y="1982.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (6 samples, 0.63%)</title><rect x="22.4" y="1955.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="25.4" y="1966.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/1328089507.accept (6 samples, 0.63%)</title><rect x="22.4" y="1939.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="25.4" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (6 samples, 0.63%)</title><rect x="22.4" y="1923.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="1934.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (6 samples, 0.63%)</title><rect x="22.4" y="1907.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="25.4" y="1918.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (4 samples, 0.42%)</title><rect x="24.9" y="1891.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="27.9" y="1902.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (179 samples, 18.86%)</title><rect x="29.9" y="1987.0" width="222.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.9" y="1998.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1460434207.accept (172 samples, 18.12%)</title><rect x="29.9" y="1971.0" width="213.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.9" y="1982.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (172 samples, 18.12%)</title><rect x="29.9" y="1955.0" width="213.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.9" y="1966.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (157 samples, 16.54%)</title><rect x="29.9" y="1939.0" width="195.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.9" y="1950.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (157 samples, 16.54%)</title><rect x="29.9" y="1923.0" width="195.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.9" y="1934.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (157 samples, 16.54%)</title><rect x="29.9" y="1907.0" width="195.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.9" y="1918.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (157 samples, 16.54%)</title><rect x="29.9" y="1891.0" width="195.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.9" y="1902.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (157 samples, 16.54%)</title><rect x="29.9" y="1875.0" width="195.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.9" y="1886.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (157 samples, 16.54%)</title><rect x="29.9" y="1859.0" width="195.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.9" y="1870.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="29.9" y="1843.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="32.9" y="1854.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="29.9" y="1827.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="32.9" y="1838.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="29.9" y="1811.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="32.9" y="1822.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="29.9" y="1795.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="32.9" y="1806.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="29.9" y="1779.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="32.9" y="1790.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="29.9" y="1763.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="32.9" y="1774.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (104 samples, 10.96%)</title><rect x="31.1" y="1843.0" width="129.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="34.1" y="1854.0">java/util/concur..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (15 samples, 1.58%)</title><rect x="31.1" y="1827.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.1" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 1.58%)</title><rect x="31.1" y="1811.0" width="18.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.1" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (89 samples, 9.38%)</title><rect x="49.8" y="1827.0" width="110.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.8" y="1838.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (89 samples, 9.38%)</title><rect x="49.8" y="1811.0" width="110.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="52.8" y="1822.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (89 samples, 9.38%)</title><rect x="49.8" y="1795.0" width="110.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.8" y="1806.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (89 samples, 9.38%)</title><rect x="49.8" y="1779.0" width="110.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.8" y="1790.0">java/util/con..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (88 samples, 9.27%)</title><rect x="51.0" y="1763.0" width="109.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="54.0" y="1774.0">jdk/internal/..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (1 samples, 0.11%)</title><rect x="54.8" y="1747.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="57.8" y="1758.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.11%)</title><rect x="56.0" y="1747.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="59.0" y="1758.0"></text>
</g>
<g>
<title>Unsafe_Unpark (37 samples, 3.90%)</title><rect x="57.2" y="1747.0" width="46.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="60.2" y="1758.0">Unsa..</text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.21%)</title><rect x="63.5" y="1731.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="66.5" y="1742.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.11%)</title><rect x="66.0" y="1731.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="69.0" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.42%)</title><rect x="67.2" y="1731.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="70.2" y="1742.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.11%)</title><rect x="72.2" y="1731.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="75.2" y="1742.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.32%)</title><rect x="73.4" y="1731.0" width="3.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="76.4" y="1742.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (7 samples, 0.74%)</title><rect x="77.1" y="1731.0" width="8.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="80.1" y="1742.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.37%)</title><rect x="85.8" y="1731.0" width="16.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="88.8" y="1742.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="102.0" y="1731.0" width="1.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="105.0" y="1742.0"></text>
</g>
<g>
<title>__pthread_cond_signal (45 samples, 4.74%)</title><rect x="103.3" y="1747.0" width="55.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="106.3" y="1758.0">__pth..</text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="159.2" y="1747.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="162.2" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (52 samples, 5.48%)</title><rect x="160.5" y="1843.0" width="64.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="163.5" y="1854.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (52 samples, 5.48%)</title><rect x="160.5" y="1827.0" width="64.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.5" y="1838.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (52 samples, 5.48%)</title><rect x="160.5" y="1811.0" width="64.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.5" y="1822.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (52 samples, 5.48%)</title><rect x="160.5" y="1795.0" width="64.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="163.5" y="1806.0">java/ut..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (10 samples, 1.05%)</title><rect x="225.1" y="1939.0" width="12.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.1" y="1950.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (10 samples, 1.05%)</title><rect x="225.1" y="1923.0" width="12.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.1" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.05%)</title><rect x="225.1" y="1907.0" width="12.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="228.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (10 samples, 1.05%)</title><rect x="225.1" y="1891.0" width="12.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.32%)</title><rect x="233.8" y="1875.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="236.8" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.32%)</title><rect x="233.8" y="1859.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.32%)</title><rect x="237.5" y="1939.0" width="3.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="240.5" y="1950.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.32%)</title><rect x="237.5" y="1923.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="240.5" y="1934.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.32%)</title><rect x="237.5" y="1907.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.21%)</title><rect x="238.8" y="1891.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.8" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="241.3" y="1939.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="244.3" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.21%)</title><rect x="241.3" y="1923.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.3" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.21%)</title><rect x="241.3" y="1907.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.21%)</title><rect x="241.3" y="1891.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="244.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (7 samples, 0.74%)</title><rect x="243.8" y="1971.0" width="8.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.8" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (7 samples, 0.74%)</title><rect x="243.8" y="1955.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="246.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.74%)</title><rect x="243.8" y="1939.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (7 samples, 0.74%)</title><rect x="243.8" y="1923.0" width="8.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.8" y="1934.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (3 samples, 0.32%)</title><rect x="248.7" y="1907.0" width="3.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.48%)</title><rect x="252.5" y="1987.0" width="41.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="255.5" y="1998.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.48%)</title><rect x="252.5" y="1971.0" width="41.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="255.5" y="1982.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (23 samples, 2.42%)</title><rect x="252.5" y="1955.0" width="28.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.5" y="1966.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.11%)</title><rect x="252.5" y="1939.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="255.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.11%)</title><rect x="252.5" y="1923.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="255.5" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.11%)</title><rect x="252.5" y="1907.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="255.5" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (22 samples, 2.32%)</title><rect x="253.7" y="1939.0" width="27.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.7" y="1950.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (22 samples, 2.32%)</title><rect x="253.7" y="1923.0" width="27.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.7" y="1934.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.forPartition (1 samples, 0.11%)</title><rect x="253.7" y="1907.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="256.7" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Utils.mkMap (1 samples, 0.11%)</title><rect x="253.7" y="1891.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.7" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="253.7" y="1875.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="256.7" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="253.7" y="1859.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="256.7" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (19 samples, 2.00%)</title><rect x="255.0" y="1907.0" width="23.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="258.0" y="1918.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (19 samples, 2.00%)</title><rect x="255.0" y="1891.0" width="23.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="258.0" y="1902.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.11%)</title><rect x="255.0" y="1875.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="258.0" y="1886.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.11%)</title><rect x="255.0" y="1859.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="258.0" y="1870.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.11%)</title><rect x="255.0" y="1843.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="258.0" y="1854.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.11%)</title><rect x="255.0" y="1827.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="258.0" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.11%)</title><rect x="255.0" y="1811.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.0" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 1.16%)</title><rect x="256.2" y="1875.0" width="13.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="259.2" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.95%)</title><rect x="257.4" y="1859.0" width="11.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="260.4" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.95%)</title><rect x="257.4" y="1843.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="260.4" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (9 samples, 0.95%)</title><rect x="257.4" y="1827.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="260.4" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (9 samples, 0.95%)</title><rect x="257.4" y="1811.0" width="11.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="260.4" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (6 samples, 0.63%)</title><rect x="261.2" y="1795.0" width="7.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="264.2" y="1806.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.11%)</title><rect x="267.4" y="1779.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="270.4" y="1790.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="267.4" y="1763.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="270.4" y="1774.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="267.4" y="1747.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="270.4" y="1758.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="267.4" y="1731.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="270.4" y="1742.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.11%)</title><rect x="268.6" y="1859.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="271.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.11%)</title><rect x="268.6" y="1843.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="271.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="268.6" y="1827.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.6" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="268.6" y="1811.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="271.6" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (7 samples, 0.74%)</title><rect x="269.9" y="1875.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="272.9" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.63%)</title><rect x="271.1" y="1859.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.1" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.63%)</title><rect x="271.1" y="1843.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="274.1" y="1854.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.63%)</title><rect x="271.1" y="1827.0" width="7.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="274.1" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.11%)</title><rect x="278.6" y="1907.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="281.6" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.11%)</title><rect x="278.6" y="1891.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.6" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="278.6" y="1875.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.6" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="278.6" y="1859.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.6" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="278.6" y="1843.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="281.6" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.11%)</title><rect x="279.8" y="1907.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="282.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.11%)</title><rect x="279.8" y="1891.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="282.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="279.8" y="1875.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="282.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="279.8" y="1859.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.checkQuotas (1 samples, 0.11%)</title><rect x="279.8" y="1843.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="282.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/MetricConfig.quota (1 samples, 0.11%)</title><rect x="279.8" y="1827.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="282.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.21%)</title><rect x="281.1" y="1955.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="284.1" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.11%)</title><rect x="281.1" y="1939.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.1" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.11%)</title><rect x="281.1" y="1923.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.1" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="281.1" y="1907.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="284.1" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="281.1" y="1891.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.1" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="281.1" y="1875.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.1" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="281.1" y="1859.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="284.1" y="1870.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="281.1" y="1843.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="1854.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="281.1" y="1827.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="284.1" y="1838.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="281.1" y="1811.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="284.1" y="1822.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="281.1" y="1795.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="281.1" y="1779.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.1" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (1 samples, 0.11%)</title><rect x="282.3" y="1939.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="285.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (1 samples, 0.11%)</title><rect x="282.3" y="1923.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.11%)</title><rect x="282.3" y="1907.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="285.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.11%)</title><rect x="282.3" y="1891.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="285.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.11%)</title><rect x="282.3" y="1875.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="285.3" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.11%)</title><rect x="282.3" y="1859.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="285.3" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.11%)</title><rect x="282.3" y="1843.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="285.3" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="282.3" y="1827.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="285.3" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="282.3" y="1811.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.3" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.11%)</title><rect x="283.6" y="1955.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="286.6" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (3 samples, 0.32%)</title><rect x="284.8" y="1955.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="287.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.21%)</title><rect x="284.8" y="1939.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.11%)</title><rect x="284.8" y="1923.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.11%)</title><rect x="284.8" y="1907.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.11%)</title><rect x="284.8" y="1891.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="287.8" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.11%)</title><rect x="284.8" y="1875.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="287.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.parse (1 samples, 0.11%)</title><rect x="284.8" y="1859.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.&lt;init&gt; (1 samples, 0.11%)</title><rect x="284.8" y="1843.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="287.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData.read (1 samples, 0.11%)</title><rect x="284.8" y="1827.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="287.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData$FetchableTopicResponse.&lt;init&gt; (1 samples, 0.11%)</title><rect x="284.8" y="1811.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.8" y="1822.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData$FetchableTopicResponse.read (1 samples, 0.11%)</title><rect x="284.8" y="1795.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="287.8" y="1806.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData$PartitionData.&lt;init&gt; (1 samples, 0.11%)</title><rect x="284.8" y="1779.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="287.8" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchResponseData$PartitionData.read (1 samples, 0.11%)</title><rect x="284.8" y="1763.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="287.8" y="1774.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (1 samples, 0.11%)</title><rect x="284.8" y="1747.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="287.8" y="1758.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.11%)</title><rect x="286.0" y="1923.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="289.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.11%)</title><rect x="286.0" y="1907.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="289.0" y="1918.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.11%)</title><rect x="286.0" y="1891.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="289.0" y="1902.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.11%)</title><rect x="286.0" y="1875.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="289.0" y="1886.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.11%)</title><rect x="286.0" y="1859.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="289.0" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="286.0" y="1843.0" width="1.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="289.0" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.11%)</title><rect x="287.3" y="1939.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="290.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.11%)</title><rect x="287.3" y="1923.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.3" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="287.3" y="1907.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="290.3" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.11%)</title><rect x="287.3" y="1891.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="290.3" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.11%)</title><rect x="287.3" y="1875.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="290.3" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.11%)</title><rect x="287.3" y="1859.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="290.3" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.11%)</title><rect x="287.3" y="1843.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="290.3" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/RequestHeaderData.addSize (1 samples, 0.11%)</title><rect x="287.3" y="1827.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.11%)</title><rect x="287.3" y="1811.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="290.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.11%)</title><rect x="287.3" y="1795.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="290.3" y="1806.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.11%)</title><rect x="287.3" y="1779.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="290.3" y="1790.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.records (1 samples, 0.11%)</title><rect x="288.5" y="1955.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="291.5" y="1966.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableMap (1 samples, 0.11%)</title><rect x="288.5" y="1939.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="291.5" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.21%)</title><rect x="289.8" y="1955.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.8" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.21%)</title><rect x="289.8" y="1939.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.8" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.11%)</title><rect x="289.8" y="1923.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="292.8" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.11%)</title><rect x="289.8" y="1907.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.11%)</title><rect x="289.8" y="1891.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="292.8" y="1902.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.11%)</title><rect x="289.8" y="1875.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.8" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$$Lambda$236/433875349.accept (1 samples, 0.11%)</title><rect x="289.8" y="1859.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="292.8" y="1870.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.lambda$fetchablePartitions$1 (1 samples, 0.11%)</title><rect x="289.8" y="1843.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.8" y="1854.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$$Lambda$235/657355876.test (1 samples, 0.11%)</title><rect x="289.8" y="1827.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.8" y="1838.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.lambda$fetchablePartitions$7 (1 samples, 0.11%)</title><rect x="289.8" y="1811.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="292.8" y="1822.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.11%)</title><rect x="289.8" y="1795.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.8" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.11%)</title><rect x="289.8" y="1779.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="292.8" y="1790.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="289.8" y="1763.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.8" y="1774.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validatePositionsOnMetadataChange (1 samples, 0.11%)</title><rect x="291.0" y="1923.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.11%)</title><rect x="291.0" y="1907.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollEnd (1 samples, 0.11%)</title><rect x="292.3" y="1955.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="295.3" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="292.3" y="1939.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="295.3" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/SystemTime.milliseconds (1 samples, 0.11%)</title><rect x="292.3" y="1923.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="295.3" y="1934.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="292.3" y="1907.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="295.3" y="1918.0"></text>
</g>
<g>
<title>java/lang/Thread.run (532 samples, 56.06%)</title><rect x="293.5" y="2035.0" width="661.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="296.5" y="2046.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (532 samples, 56.06%)</title><rect x="293.5" y="2019.0" width="661.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="296.5" y="2030.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (532 samples, 56.06%)</title><rect x="293.5" y="2003.0" width="661.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="296.5" y="2014.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$470/2052012172.run (318 samples, 33.51%)</title><rect x="297.2" y="1987.0" width="395.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="300.2" y="1998.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (318 samples, 33.51%)</title><rect x="297.2" y="1971.0" width="395.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="300.2" y="1982.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (317 samples, 33.40%)</title><rect x="298.5" y="1955.0" width="394.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="301.5" y="1966.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (317 samples, 33.40%)</title><rect x="298.5" y="1939.0" width="394.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="301.5" y="1950.0">com/linecorp/decaton/processor/runtime/internal/Proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (32 samples, 3.37%)</title><rect x="305.9" y="1923.0" width="39.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.9" y="1934.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 3.37%)</title><rect x="305.9" y="1907.0" width="39.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="308.9" y="1918.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 3.37%)</title><rect x="305.9" y="1891.0" width="39.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="308.9" y="1902.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (21 samples, 2.21%)</title><rect x="319.6" y="1875.0" width="26.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="322.6" y="1886.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (5 samples, 0.53%)</title><rect x="319.6" y="1859.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="322.6" y="1870.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="324.6" y="1843.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="327.6" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.69%)</title><rect x="325.8" y="1859.0" width="19.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$478/670007846.accept (16 samples, 1.69%)</title><rect x="325.8" y="1843.0" width="19.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="328.8" y="1854.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (16 samples, 1.69%)</title><rect x="325.8" y="1827.0" width="19.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="328.8" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (16 samples, 1.69%)</title><rect x="325.8" y="1811.0" width="19.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="328.8" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (16 samples, 1.69%)</title><rect x="325.8" y="1795.0" width="19.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="328.8" y="1806.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (16 samples, 1.69%)</title><rect x="325.8" y="1779.0" width="19.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="328.8" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (5 samples, 0.53%)</title><rect x="325.8" y="1763.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="328.8" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$469/762518941.accept (1 samples, 0.11%)</title><rect x="330.8" y="1747.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="333.8" y="1758.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (11 samples, 1.16%)</title><rect x="332.0" y="1763.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="335.0" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (100 samples, 10.54%)</title><rect x="345.7" y="1923.0" width="124.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.7" y="1934.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$139/461698165.extract (100 samples, 10.54%)</title><rect x="345.7" y="1907.0" width="124.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="348.7" y="1918.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (100 samples, 10.54%)</title><rect x="345.7" y="1891.0" width="124.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.7" y="1902.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (99 samples, 10.43%)</title><rect x="345.7" y="1875.0" width="123.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.7" y="1886.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (99 samples, 10.43%)</title><rect x="345.7" y="1859.0" width="123.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="348.7" y="1870.0">com/linecorp/de..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (99 samples, 10.43%)</title><rect x="345.7" y="1843.0" width="123.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="348.7" y="1854.0">com/fasterxml/j..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (39 samples, 4.11%)</title><rect x="345.7" y="1827.0" width="48.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="348.7" y="1838.0">com/..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="368.1" y="1811.0" width="2.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="371.1" y="1822.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.32%)</title><rect x="370.6" y="1811.0" width="3.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="373.6" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="371.8" y="1795.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="374.8" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 0.42%)</title><rect x="374.3" y="1811.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="377.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 0.42%)</title><rect x="374.3" y="1795.0" width="5.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 0.42%)</title><rect x="374.3" y="1779.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.3" y="1790.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 0.42%)</title><rect x="374.3" y="1763.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="377.3" y="1774.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 0.42%)</title><rect x="374.3" y="1747.0" width="5.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="377.3" y="1758.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.21%)</title><rect x="376.8" y="1731.0" width="2.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="379.8" y="1742.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="376.8" y="1715.0" width="2.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="379.8" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (12 samples, 1.26%)</title><rect x="379.3" y="1811.0" width="14.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.3" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (12 samples, 1.26%)</title><rect x="379.3" y="1795.0" width="14.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="382.3" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (11 samples, 1.16%)</title><rect x="379.3" y="1779.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="382.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (11 samples, 1.16%)</title><rect x="379.3" y="1763.0" width="13.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="382.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="393.0" y="1779.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.0" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.11%)</title><rect x="393.0" y="1763.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="396.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.11%)</title><rect x="393.0" y="1747.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="396.0" y="1758.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="393.0" y="1731.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="396.0" y="1742.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.11%)</title><rect x="393.0" y="1715.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="396.0" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (55 samples, 5.80%)</title><rect x="394.2" y="1827.0" width="68.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="397.2" y="1838.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (4 samples, 0.42%)</title><rect x="394.2" y="1811.0" width="5.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="397.2" y="1822.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (4 samples, 0.42%)</title><rect x="394.2" y="1795.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="397.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.48%)</title><rect x="399.2" y="1811.0" width="17.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="402.2" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (10 samples, 1.05%)</title><rect x="404.2" y="1795.0" width="12.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="407.2" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (6 samples, 0.63%)</title><rect x="406.6" y="1779.0" width="7.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.6" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (6 samples, 0.63%)</title><rect x="406.6" y="1763.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="411.6" y="1747.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="414.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.21%)</title><rect x="414.1" y="1779.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="417.1" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.21%)</title><rect x="414.1" y="1763.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="417.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.21%)</title><rect x="414.1" y="1747.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="417.1" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (2 samples, 0.21%)</title><rect x="414.1" y="1731.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="417.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (37 samples, 3.90%)</title><rect x="416.6" y="1811.0" width="46.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="419.6" y="1822.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (37 samples, 3.90%)</title><rect x="416.6" y="1795.0" width="46.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="419.6" y="1806.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (12 samples, 1.26%)</title><rect x="420.3" y="1779.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.3" y="1790.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.11%)</title><rect x="420.3" y="1763.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="423.3" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.11%)</title><rect x="420.3" y="1747.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="423.3" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (2 samples, 0.21%)</title><rect x="421.6" y="1763.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="424.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (2 samples, 0.21%)</title><rect x="421.6" y="1747.0" width="2.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.6" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (2 samples, 0.21%)</title><rect x="421.6" y="1731.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="424.6" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (8 samples, 0.84%)</title><rect x="424.1" y="1763.0" width="9.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="427.1" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="434.0" y="1763.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="437.0" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="434.0" y="1747.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="437.0" y="1758.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (22 samples, 2.32%)</title><rect x="435.2" y="1779.0" width="27.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="438.2" y="1790.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (22 samples, 2.32%)</title><rect x="435.2" y="1763.0" width="27.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="438.2" y="1774.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (22 samples, 2.32%)</title><rect x="435.2" y="1747.0" width="27.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="438.2" y="1758.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.84%)</title><rect x="436.5" y="1731.0" width="9.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="439.5" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.11%)</title><rect x="440.2" y="1715.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="443.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.11%)</title><rect x="440.2" y="1699.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="443.2" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.32%)</title><rect x="441.5" y="1715.0" width="3.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="444.5" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.32%)</title><rect x="441.5" y="1699.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.5" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.32%)</title><rect x="441.5" y="1683.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="444.5" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.32%)</title><rect x="441.5" y="1667.0" width="3.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="444.5" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.11%)</title><rect x="445.2" y="1715.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.2" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.74%)</title><rect x="446.4" y="1731.0" width="8.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="449.4" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (6 samples, 0.63%)</title><rect x="447.7" y="1715.0" width="7.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.7" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (3 samples, 0.32%)</title><rect x="447.7" y="1699.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="450.7" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (3 samples, 0.32%)</title><rect x="447.7" y="1683.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="450.7" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (3 samples, 0.32%)</title><rect x="447.7" y="1667.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="450.7" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (3 samples, 0.32%)</title><rect x="447.7" y="1651.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.7" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (3 samples, 0.32%)</title><rect x="447.7" y="1635.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="450.7" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.32%)</title><rect x="447.7" y="1619.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.7" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.32%)</title><rect x="451.4" y="1699.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.4" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.32%)</title><rect x="451.4" y="1683.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="454.4" y="1694.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (3 samples, 0.32%)</title><rect x="451.4" y="1667.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="454.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (3 samples, 0.32%)</title><rect x="451.4" y="1651.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="454.4" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (3 samples, 0.32%)</title><rect x="451.4" y="1635.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.4" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (3 samples, 0.32%)</title><rect x="451.4" y="1619.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.4" y="1630.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (3 samples, 0.32%)</title><rect x="451.4" y="1603.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="454.4" y="1614.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.11%)</title><rect x="455.1" y="1731.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.1" y="1742.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.11%)</title><rect x="455.1" y="1715.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="458.1" y="1726.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.11%)</title><rect x="455.1" y="1699.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.1" y="1710.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.11%)</title><rect x="455.1" y="1683.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="458.1" y="1694.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.11%)</title><rect x="455.1" y="1667.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="458.1" y="1678.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.11%)</title><rect x="455.1" y="1651.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="458.1" y="1662.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.11%)</title><rect x="455.1" y="1635.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="458.1" y="1646.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (5 samples, 0.53%)</title><rect x="456.4" y="1731.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="459.4" y="1742.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.53%)</title><rect x="456.4" y="1715.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="459.4" y="1726.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.42%)</title><rect x="456.4" y="1699.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="459.4" y="1710.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="461.4" y="1699.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.4" y="1710.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="461.4" y="1683.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="464.4" y="1694.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="461.4" y="1667.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="464.4" y="1678.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="461.4" y="1651.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.4" y="1662.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.53%)</title><rect x="462.6" y="1827.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="465.6" y="1838.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.53%)</title><rect x="462.6" y="1811.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.6" y="1822.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.53%)</title><rect x="462.6" y="1795.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="465.6" y="1806.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.53%)</title><rect x="462.6" y="1779.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="465.6" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.53%)</title><rect x="462.6" y="1763.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="465.6" y="1774.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (1 samples, 0.11%)</title><rect x="467.6" y="1747.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.6" y="1758.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.11%)</title><rect x="468.8" y="1875.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.8" y="1886.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.11%)</title><rect x="468.8" y="1859.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="471.8" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (169 samples, 17.81%)</title><rect x="470.1" y="1923.0" width="210.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.1" y="1934.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (24 samples, 2.53%)</title><rect x="471.3" y="1907.0" width="29.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="474.3" y="1918.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (23 samples, 2.42%)</title><rect x="472.6" y="1891.0" width="28.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="475.6" y="1902.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 2.00%)</title><rect x="476.3" y="1875.0" width="23.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.3" y="1886.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (11 samples, 1.16%)</title><rect x="476.3" y="1859.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="479.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (11 samples, 1.16%)</title><rect x="476.3" y="1843.0" width="13.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (11 samples, 1.16%)</title><rect x="476.3" y="1827.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.3" y="1838.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (8 samples, 0.84%)</title><rect x="490.0" y="1859.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="493.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="490.0" y="1843.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="493.0" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.74%)</title><rect x="491.2" y="1843.0" width="8.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="494.2" y="1854.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="491.2" y="1827.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="494.2" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="491.2" y="1811.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="494.2" y="1822.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="491.2" y="1795.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="494.2" y="1806.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 0.63%)</title><rect x="492.4" y="1827.0" width="7.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="495.4" y="1838.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.11%)</title><rect x="498.7" y="1811.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="501.7" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="499.9" y="1875.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="502.9" y="1886.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="499.9" y="1859.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.9" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.42%)</title><rect x="501.1" y="1907.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="504.1" y="1918.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.42%)</title><rect x="501.1" y="1891.0" width="5.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="504.1" y="1902.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (90 samples, 9.48%)</title><rect x="506.1" y="1907.0" width="111.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="509.1" y="1918.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (81 samples, 8.54%)</title><rect x="506.1" y="1891.0" width="100.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="509.1" y="1902.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (15 samples, 1.58%)</title><rect x="506.1" y="1875.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="509.1" y="1886.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.11%)</title><rect x="511.1" y="1859.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="514.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (3 samples, 0.32%)</title><rect x="512.3" y="1859.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="515.3" y="1870.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (7 samples, 0.74%)</title><rect x="516.1" y="1859.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="519.1" y="1870.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.74%)</title><rect x="516.1" y="1843.0" width="8.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="519.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (4 samples, 0.42%)</title><rect x="516.1" y="1827.0" width="4.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="519.1" y="1838.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4 samples, 0.42%)</title><rect x="516.1" y="1811.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="519.1" y="1822.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.21%)</title><rect x="518.6" y="1795.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="521.6" y="1806.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="519.8" y="1779.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="522.8" y="1790.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="519.8" y="1763.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="522.8" y="1774.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="519.8" y="1747.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="522.8" y="1758.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="519.8" y="1731.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="522.8" y="1742.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="519.8" y="1715.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="522.8" y="1726.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.11%)</title><rect x="519.8" y="1699.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="522.8" y="1710.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.11%)</title><rect x="519.8" y="1683.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="522.8" y="1694.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.11%)</title><rect x="519.8" y="1667.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="522.8" y="1678.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.11%)</title><rect x="519.8" y="1651.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="522.8" y="1662.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.11%)</title><rect x="519.8" y="1635.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="522.8" y="1646.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (3 samples, 0.32%)</title><rect x="521.0" y="1827.0" width="3.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="524.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.32%)</title><rect x="521.0" y="1811.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.0" y="1822.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.11%)</title><rect x="523.5" y="1795.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="526.5" y="1806.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.11%)</title><rect x="524.8" y="1875.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="527.8" y="1886.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.11%)</title><rect x="524.8" y="1859.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="527.8" y="1870.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="524.8" y="1843.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="527.8" y="1854.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (65 samples, 6.85%)</title><rect x="526.0" y="1875.0" width="80.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="529.0" y="1886.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (65 samples, 6.85%)</title><rect x="526.0" y="1859.0" width="80.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="529.0" y="1870.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (34 samples, 3.58%)</title><rect x="526.0" y="1843.0" width="42.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="529.0" y="1854.0">ch/q..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (14 samples, 1.48%)</title><rect x="549.6" y="1827.0" width="17.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="552.6" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (14 samples, 1.48%)</title><rect x="549.6" y="1811.0" width="17.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="552.6" y="1822.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="567.0" y="1827.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="570.0" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (7 samples, 0.74%)</title><rect x="568.3" y="1843.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="571.3" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="568.3" y="1827.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="571.3" y="1838.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (6 samples, 0.63%)</title><rect x="569.5" y="1827.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="572.5" y="1838.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.32%)</title><rect x="573.3" y="1811.0" width="3.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="576.3" y="1822.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="577.0" y="1843.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="580.0" y="1854.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (23 samples, 2.42%)</title><rect x="578.2" y="1843.0" width="28.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="581.2" y="1854.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (23 samples, 2.42%)</title><rect x="578.2" y="1827.0" width="28.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="581.2" y="1838.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.53%)</title><rect x="578.2" y="1811.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="581.2" y="1822.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 1.90%)</title><rect x="584.5" y="1811.0" width="22.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="587.5" y="1822.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.95%)</title><rect x="606.8" y="1891.0" width="11.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="609.8" y="1902.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.95%)</title><rect x="606.8" y="1875.0" width="11.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="609.8" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.95%)</title><rect x="606.8" y="1859.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="609.8" y="1870.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.95%)</title><rect x="606.8" y="1843.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="609.8" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.21%)</title><rect x="614.3" y="1827.0" width="2.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="617.3" y="1838.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="614.3" y="1811.0" width="2.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="617.3" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.11%)</title><rect x="616.8" y="1827.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="619.8" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (38 samples, 4.00%)</title><rect x="618.0" y="1907.0" width="47.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.0" y="1918.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (38 samples, 4.00%)</title><rect x="618.0" y="1891.0" width="47.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="621.0" y="1902.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$398/201167406.process (19 samples, 2.00%)</title><rect x="621.8" y="1875.0" width="23.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="624.8" y="1886.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (19 samples, 2.00%)</title><rect x="621.8" y="1859.0" width="23.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="624.8" y="1870.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (18 samples, 1.90%)</title><rect x="621.8" y="1843.0" width="22.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="624.8" y="1854.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.21%)</title><rect x="634.2" y="1827.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.2" y="1838.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.21%)</title><rect x="634.2" y="1811.0" width="2.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.2" y="1822.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.21%)</title><rect x="634.2" y="1795.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="637.2" y="1806.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.21%)</title><rect x="634.2" y="1779.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.2" y="1790.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (2 samples, 0.21%)</title><rect x="634.2" y="1763.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.2" y="1774.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (6 samples, 0.63%)</title><rect x="636.7" y="1827.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="639.7" y="1838.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.11%)</title><rect x="640.4" y="1811.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="643.4" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.11%)</title><rect x="640.4" y="1795.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="643.4" y="1806.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.21%)</title><rect x="641.7" y="1811.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="644.7" y="1822.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="641.7" y="1795.0" width="2.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="644.7" y="1806.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.11%)</title><rect x="644.1" y="1843.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="647.1" y="1854.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="644.1" y="1827.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.1" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (3 samples, 0.32%)</title><rect x="645.4" y="1875.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.taskDataBytes (1 samples, 0.11%)</title><rect x="649.1" y="1875.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="652.1" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (2 samples, 0.21%)</title><rect x="650.4" y="1875.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="653.4" y="1886.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (2 samples, 0.21%)</title><rect x="650.4" y="1859.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="653.4" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.21%)</title><rect x="650.4" y="1843.0" width="2.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="653.4" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.completeValue (2 samples, 0.21%)</title><rect x="650.4" y="1827.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="653.4" y="1838.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (2 samples, 0.21%)</title><rect x="652.8" y="1875.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="655.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.21%)</title><rect x="652.8" y="1859.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.8" y="1870.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.11%)</title><rect x="655.3" y="1875.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.3" y="1886.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.11%)</title><rect x="655.3" y="1859.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="658.3" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$473/1598593179.get$Lambda (1 samples, 0.11%)</title><rect x="655.3" y="1843.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="658.3" y="1854.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="655.3" y="1827.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.3" y="1838.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="655.3" y="1811.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="658.3" y="1822.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="655.3" y="1795.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="658.3" y="1806.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="655.3" y="1779.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="658.3" y="1790.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="655.3" y="1763.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="658.3" y="1774.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.11%)</title><rect x="655.3" y="1747.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="658.3" y="1758.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="656.6" y="1875.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.6" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.11%)</title><rect x="656.6" y="1859.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="659.6" y="1870.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.53%)</title><rect x="657.8" y="1875.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="660.8" y="1886.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.53%)</title><rect x="657.8" y="1859.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="660.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="664.0" y="1875.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="664.0" y="1859.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="667.0" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="664.0" y="1843.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="667.0" y="1854.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="664.0" y="1827.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="667.0" y="1838.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.26%)</title><rect x="665.3" y="1907.0" width="14.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="668.3" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 1.26%)</title><rect x="665.3" y="1891.0" width="14.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="668.3" y="1902.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.63%)</title><rect x="666.5" y="1875.0" width="7.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="669.5" y="1886.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.53%)</title><rect x="667.8" y="1859.0" width="6.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="670.8" y="1870.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (5 samples, 0.53%)</title><rect x="674.0" y="1875.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="677.0" y="1886.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.53%)</title><rect x="674.0" y="1859.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.0" y="1870.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$475/545778676.accept (5 samples, 0.53%)</title><rect x="674.0" y="1843.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.0" y="1854.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.53%)</title><rect x="674.0" y="1827.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="677.0" y="1838.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.53%)</title><rect x="674.0" y="1811.0" width="6.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="677.0" y="1822.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (10 samples, 1.05%)</title><rect x="680.2" y="1923.0" width="12.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="683.2" y="1934.0"></text>
</g>
<g>
<title>[vdso] (10 samples, 1.05%)</title><rect x="680.2" y="1907.0" width="12.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="683.2" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.53%)</title><rect x="692.6" y="1987.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="695.6" y="1998.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.53%)</title><rect x="692.6" y="1971.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.6" y="1982.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.53%)</title><rect x="692.6" y="1955.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="695.6" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.53%)</title><rect x="692.6" y="1939.0" width="6.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="695.6" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (206 samples, 21.71%)</title><rect x="698.9" y="1987.0" width="256.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.9" y="1998.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (205 samples, 21.60%)</title><rect x="700.1" y="1971.0" width="254.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="703.1" y="1982.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (185 samples, 19.49%)</title><rect x="700.1" y="1955.0" width="230.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="703.1" y="1966.0">java/util/concurrent/locks/Abs..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (20 samples, 2.11%)</title><rect x="702.6" y="1939.0" width="24.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="705.6" y="1950.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (14 samples, 1.48%)</title><rect x="727.4" y="1939.0" width="17.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="730.4" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.48%)</title><rect x="727.4" y="1923.0" width="17.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="730.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.11%)</title><rect x="741.1" y="1907.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="744.1" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.11%)</title><rect x="741.1" y="1891.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="744.1" y="1902.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.21%)</title><rect x="742.4" y="1907.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="745.4" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (149 samples, 15.70%)</title><rect x="744.9" y="1939.0" width="185.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="747.9" y="1950.0">java/util/concurrent/loc..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (149 samples, 15.70%)</title><rect x="744.9" y="1923.0" width="185.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="747.9" y="1934.0">jdk/internal/misc/Unsafe..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (1 samples, 0.11%)</title><rect x="747.3" y="1907.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.3" y="1918.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.11%)</title><rect x="748.6" y="1907.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="751.6" y="1918.0"></text>
</g>
<g>
<title>Unsafe_Park (140 samples, 14.75%)</title><rect x="749.8" y="1907.0" width="174.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="752.8" y="1918.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.21%)</title><rect x="751.1" y="1891.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="754.1" y="1902.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.32%)</title><rect x="753.6" y="1891.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="756.6" y="1902.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="757.3" y="1891.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="760.3" y="1902.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.69%)</title><rect x="758.5" y="1891.0" width="19.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="761.5" y="1902.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (5 samples, 0.53%)</title><rect x="767.2" y="1875.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="770.2" y="1886.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.11%)</title><rect x="771.0" y="1859.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="774.0" y="1870.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="772.2" y="1859.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="775.2" y="1870.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.32%)</title><rect x="773.5" y="1875.0" width="3.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="776.5" y="1886.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="777.2" y="1875.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="780.2" y="1886.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (3 samples, 0.32%)</title><rect x="778.4" y="1891.0" width="3.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="781.4" y="1902.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.32%)</title><rect x="782.2" y="1891.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="785.2" y="1902.0"></text>
</g>
<g>
<title>__lll_unlock_wake (38 samples, 4.00%)</title><rect x="785.9" y="1891.0" width="47.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="788.9" y="1902.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (59 samples, 6.22%)</title><rect x="833.1" y="1891.0" width="73.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="836.1" y="1902.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.53%)</title><rect x="906.5" y="1891.0" width="6.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="909.5" y="1902.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.11%)</title><rect x="912.7" y="1891.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="915.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.11%)</title><rect x="914.0" y="1891.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="917.0" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="915.2" y="1891.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="918.2" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="916.4" y="1891.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="919.4" y="1902.0"></text>
</g>
<g>
<title>_init (2 samples, 0.21%)</title><rect x="917.7" y="1891.0" width="2.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="920.7" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.11%)</title><rect x="920.2" y="1891.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="923.2" y="1902.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="921.4" y="1891.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="924.4" y="1902.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.11%)</title><rect x="922.7" y="1891.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="925.7" y="1902.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (5 samples, 0.53%)</title><rect x="923.9" y="1907.0" width="6.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="926.9" y="1918.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.11%)</title><rect x="930.1" y="1955.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="933.1" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (6 samples, 0.63%)</title><rect x="931.4" y="1955.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="934.4" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (6 samples, 0.63%)</title><rect x="931.4" y="1939.0" width="7.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="934.4" y="1950.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (6 samples, 0.63%)</title><rect x="931.4" y="1923.0" width="7.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="934.4" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 1.37%)</title><rect x="938.8" y="1955.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="941.8" y="1966.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 1.37%)</title><rect x="938.8" y="1939.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="941.8" y="1950.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 1.37%)</title><rect x="938.8" y="1923.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.8" y="1934.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (13 samples, 1.37%)</title><rect x="938.8" y="1907.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="941.8" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="955.0" y="2035.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="958.0" y="2046.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="955.0" y="2019.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="958.0" y="2030.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="955.0" y="2003.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="958.0" y="2014.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.11%)</title><rect x="955.0" y="1987.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="958.0" y="1998.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.11%)</title><rect x="955.0" y="1971.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="958.0" y="1982.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.11%)</title><rect x="955.0" y="1955.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="958.0" y="1966.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.11%)</title><rect x="955.0" y="1939.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="958.0" y="1950.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.11%)</title><rect x="955.0" y="1923.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="958.0" y="1934.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.11%)</title><rect x="955.0" y="1907.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="958.0" y="1918.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.11%)</title><rect x="955.0" y="1891.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="958.0" y="1902.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.11%)</title><rect x="955.0" y="1875.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="958.0" y="1886.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.11%)</title><rect x="955.0" y="1859.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="958.0" y="1870.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.11%)</title><rect x="955.0" y="1843.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="958.0" y="1854.0"></text>
</g>
<g>
<title>start_thread (188 samples, 19.81%)</title><rect x="956.2" y="2035.0" width="233.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="959.2" y="2046.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (188 samples, 19.81%)</title><rect x="956.2" y="2019.0" width="233.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="959.2" y="2030.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (188 samples, 19.81%)</title><rect x="956.2" y="2003.0" width="233.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="959.2" y="2014.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.21%)</title><rect x="956.2" y="1987.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="959.2" y="1998.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="956.2" y="1971.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.2" y="1982.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.11%)</title><rect x="956.2" y="1955.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.2" y="1966.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="957.5" y="1971.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="960.5" y="1982.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.11%)</title><rect x="957.5" y="1955.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="960.5" y="1966.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.11%)</title><rect x="957.5" y="1939.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="960.5" y="1950.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (186 samples, 19.60%)</title><rect x="958.7" y="1987.0" width="231.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="961.7" y="1998.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (186 samples, 19.60%)</title><rect x="958.7" y="1971.0" width="231.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="961.7" y="1982.0">CompileBroker::compiler_thread_..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (185 samples, 19.49%)</title><rect x="958.7" y="1955.0" width="230.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.7" y="1966.0">CompileBroker::invoke_compiler..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (185 samples, 19.49%)</title><rect x="958.7" y="1939.0" width="230.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="961.7" y="1950.0">C2Compiler::compile_method(ciE..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (185 samples, 19.49%)</title><rect x="958.7" y="1923.0" width="230.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="961.7" y="1934.0">Compile::Compile(ciEnv*, C2Com..</text>
</g>
<g>
<title>Compile::Code_Gen() (69 samples, 7.27%)</title><rect x="958.7" y="1907.0" width="85.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="961.7" y="1918.0">Compile::C..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.21%)</title><rect x="958.7" y="1891.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="961.7" y="1902.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (2 samples, 0.21%)</title><rect x="958.7" y="1875.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="961.7" y="1886.0"></text>
</g>
<g>
<title>OopFlow::make(Arena*, int, Compile*) (1 samples, 0.11%)</title><rect x="960.0" y="1859.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="963.0" y="1870.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="960.0" y="1843.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="963.0" y="1854.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="960.0" y="1827.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="963.0" y="1838.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="961.2" y="1891.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="964.2" y="1902.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.11%)</title><rect x="961.2" y="1875.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="964.2" y="1886.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.11%)</title><rect x="961.2" y="1859.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="964.2" y="1870.0"></text>
</g>
<g>
<title>CompressedWriteStream::write_int_mb(int) (1 samples, 0.11%)</title><rect x="961.2" y="1843.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="964.2" y="1854.0"></text>
</g>
<g>
<title>Matcher::match() (10 samples, 1.05%)</title><rect x="962.5" y="1891.0" width="12.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="965.5" y="1902.0"></text>
</g>
<g>
<title>Arena::destruct_contents() (1 samples, 0.11%)</title><rect x="962.5" y="1875.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.5" y="1886.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.11%)</title><rect x="963.7" y="1875.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="966.7" y="1886.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (8 samples, 0.84%)</title><rect x="964.9" y="1875.0" width="10.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.9" y="1886.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (5 samples, 0.53%)</title><rect x="967.4" y="1859.0" width="6.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="970.4" y="1870.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.11%)</title><rect x="973.6" y="1859.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="976.6" y="1870.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="973.6" y="1843.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="976.6" y="1854.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="973.6" y="1827.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="976.6" y="1838.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="973.6" y="1811.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="976.6" y="1822.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (7 samples, 0.74%)</title><rect x="974.9" y="1891.0" width="8.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="977.9" y="1902.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (7 samples, 0.74%)</title><rect x="974.9" y="1875.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.9" y="1886.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="974.9" y="1859.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="977.9" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.11%)</title><rect x="974.9" y="1843.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.9" y="1854.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.11%)</title><rect x="974.9" y="1827.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="977.9" y="1838.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.11%)</title><rect x="974.9" y="1811.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="977.9" y="1822.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="974.9" y="1795.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="977.9" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="974.9" y="1779.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="977.9" y="1790.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.32%)</title><rect x="976.1" y="1859.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="979.1" y="1870.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="976.1" y="1843.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="979.1" y="1854.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="976.1" y="1827.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.1" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.11%)</title><rect x="977.4" y="1843.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="980.4" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_entry_block_pressure(Block*) (1 samples, 0.11%)</title><rect x="978.6" y="1843.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="981.6" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="978.6" y="1827.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.6" y="1838.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.11%)</title><rect x="979.9" y="1859.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.11%)</title><rect x="981.1" y="1859.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.11%)</title><rect x="982.3" y="1859.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.3" y="1870.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.11%)</title><rect x="982.3" y="1843.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="985.3" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (49 samples, 5.16%)</title><rect x="983.6" y="1891.0" width="60.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="986.6" y="1902.0">PhaseC..</text>
</g>
<g>
<title>MachProjNode::ideal_reg() const (1 samples, 0.11%)</title><rect x="983.6" y="1875.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.6" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.11%)</title><rect x="984.8" y="1875.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="987.8" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.21%)</title><rect x="986.1" y="1875.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="989.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="986.1" y="1859.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="989.1" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.11%)</title><rect x="987.3" y="1859.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="990.3" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.21%)</title><rect x="988.6" y="1875.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="991.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="988.6" y="1859.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="991.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.11%)</title><rect x="989.8" y="1859.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="992.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="989.8" y="1843.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="992.8" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (7 samples, 0.74%)</title><rect x="991.1" y="1875.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="994.1" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.84%)</title><rect x="999.8" y="1875.0" width="9.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1002.8" y="1886.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.11%)</title><rect x="1002.2" y="1859.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1005.2" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.11%)</title><rect x="1003.5" y="1859.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1006.5" y="1870.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.11%)</title><rect x="1003.5" y="1843.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.32%)</title><rect x="1004.7" y="1859.0" width="3.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1007.7" y="1870.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="1006.0" y="1843.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.0" y="1854.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1007.2" y="1843.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1010.2" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.11%)</title><rect x="1008.5" y="1859.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1011.5" y="1870.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.11%)</title><rect x="1008.5" y="1843.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1011.5" y="1854.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.11%)</title><rect x="1009.7" y="1875.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1012.7" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1009.7" y="1859.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.11%)</title><rect x="1010.9" y="1875.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1013.9" y="1886.0"></text>
</g>
<g>
<title>TraceTime::TraceTime(char const*, elapsedTimer*, bool, bool) (1 samples, 0.11%)</title><rect x="1010.9" y="1859.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1013.9" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.21%)</title><rect x="1012.2" y="1875.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1015.2" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.11%)</title><rect x="1014.7" y="1875.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1017.7" y="1886.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.11%)</title><rect x="1014.7" y="1859.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1017.7" y="1870.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (9 samples, 0.95%)</title><rect x="1015.9" y="1875.0" width="11.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.9" y="1886.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (6 samples, 0.63%)</title><rect x="1019.7" y="1859.0" width="7.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1022.7" y="1870.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 0.42%)</title><rect x="1027.1" y="1875.0" width="5.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1030.1" y="1886.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.11%)</title><rect x="1027.1" y="1859.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1030.1" y="1870.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (3 samples, 0.32%)</title><rect x="1028.4" y="1859.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1031.4" y="1870.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.11%)</title><rect x="1028.4" y="1843.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1031.4" y="1854.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.21%)</title><rect x="1029.6" y="1843.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1032.6" y="1854.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.21%)</title><rect x="1032.1" y="1875.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1035.1" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1033.3" y="1859.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1036.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.11%)</title><rect x="1034.6" y="1875.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.6" y="1886.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1034.6" y="1859.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1037.6" y="1870.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.11%)</title><rect x="1035.8" y="1875.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.8" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (5 samples, 0.53%)</title><rect x="1037.1" y="1875.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1040.1" y="1886.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.21%)</title><rect x="1040.8" y="1859.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1043.8" y="1870.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1042.0" y="1843.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1045.0" y="1854.0"></text>
</g>
<g>
<title>jmpConUNode::ideal_Opcode() const (1 samples, 0.11%)</title><rect x="1043.3" y="1875.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.3" y="1886.0"></text>
</g>
<g>
<title>Compile::Optimize() (106 samples, 11.17%)</title><rect x="1044.5" y="1907.0" width="131.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1047.5" y="1918.0">Compile::Optimiz..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.11%)</title><rect x="1044.5" y="1891.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1047.5" y="1902.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1044.5" y="1875.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1047.5" y="1886.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (40 samples, 4.21%)</title><rect x="1045.8" y="1891.0" width="49.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1048.8" y="1902.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (40 samples, 4.21%)</title><rect x="1045.8" y="1875.0" width="49.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1048.8" y="1886.0">Phase..</text>
</g>
<g>
<title>Node::is_CFG() const (1 samples, 0.11%)</title><rect x="1045.8" y="1859.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1048.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1047.0" y="1859.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.0" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.32%)</title><rect x="1048.3" y="1859.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.3" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (31 samples, 3.27%)</title><rect x="1052.0" y="1859.0" width="38.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1055.0" y="1870.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (29 samples, 3.06%)</title><rect x="1054.5" y="1843.0" width="36.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.5" y="1854.0">Pha..</text>
</g>
<g>
<title>MultiNode::is_CFG() const (1 samples, 0.11%)</title><rect x="1055.7" y="1827.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.7" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (27 samples, 2.85%)</title><rect x="1057.0" y="1827.0" width="33.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1060.0" y="1838.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (26 samples, 2.74%)</title><rect x="1058.2" y="1811.0" width="32.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1061.2" y="1822.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.11%)</title><rect x="1090.5" y="1859.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1093.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.11%)</title><rect x="1090.5" y="1843.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1093.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.11%)</title><rect x="1090.5" y="1827.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1093.5" y="1838.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.11%)</title><rect x="1090.5" y="1811.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1093.5" y="1822.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1090.5" y="1795.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1093.5" y="1806.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.21%)</title><rect x="1091.8" y="1859.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1094.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.21%)</title><rect x="1091.8" y="1843.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1094.8" y="1854.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1091.8" y="1827.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.8" y="1838.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.11%)</title><rect x="1091.8" y="1811.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1094.8" y="1822.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1093.0" y="1827.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.0" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.11%)</title><rect x="1093.0" y="1811.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1096.0" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1795.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.0" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1779.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.0" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1763.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1096.0" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1747.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.0" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1731.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.0" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1715.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.0" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1699.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1096.0" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1683.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1096.0" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1667.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.0" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1651.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.0" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1635.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1096.0" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1619.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1096.0" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1603.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.0" y="1614.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1093.0" y="1587.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.0" y="1598.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1093.0" y="1571.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1096.0" y="1582.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.11%)</title><rect x="1094.3" y="1859.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.3" y="1870.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (2 samples, 0.21%)</title><rect x="1095.5" y="1891.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1098.5" y="1902.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.21%)</title><rect x="1095.5" y="1875.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.21%)</title><rect x="1095.5" y="1859.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.5" y="1870.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1095.5" y="1843.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1098.5" y="1854.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.11%)</title><rect x="1095.5" y="1827.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.5" y="1838.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.11%)</title><rect x="1095.5" y="1811.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.5" y="1822.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.11%)</title><rect x="1095.5" y="1795.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.5" y="1806.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1096.7" y="1843.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1099.7" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.11%)</title><rect x="1096.7" y="1827.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1099.7" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1096.7" y="1811.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1099.7" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1096.7" y="1795.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1099.7" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1096.7" y="1779.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1099.7" y="1790.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1096.7" y="1763.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1099.7" y="1774.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1096.7" y="1747.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1099.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (13 samples, 1.37%)</title><rect x="1098.0" y="1891.0" width="16.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1101.0" y="1902.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (13 samples, 1.37%)</title><rect x="1098.0" y="1875.0" width="16.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1101.0" y="1886.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1099.2" y="1859.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.2" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.11%)</title><rect x="1099.2" y="1843.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.2" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (1 samples, 0.11%)</title><rect x="1099.2" y="1827.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1102.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (11 samples, 1.16%)</title><rect x="1100.5" y="1859.0" width="13.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.5" y="1870.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (11 samples, 1.16%)</title><rect x="1100.5" y="1843.0" width="13.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.5" y="1854.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1827.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.5" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1811.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1103.5" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1795.0" width="3.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.5" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1779.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.5" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1763.0" width="3.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.5" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1747.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.5" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1100.5" y="1731.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.5" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1715.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1103.5" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1699.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1683.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.5" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1667.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.5" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1651.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.5" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1635.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.5" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1619.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.5" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1603.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.5" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1587.0" width="2.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.5" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1571.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.5" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1555.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1539.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.5" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1523.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1103.5" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1507.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1103.5" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1491.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.5" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1475.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.5" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1459.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.5" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1443.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.5" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1427.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1103.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1411.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.5" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1395.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.5" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1379.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1363.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1347.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.5" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1331.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1103.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1315.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1299.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1103.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1283.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1267.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1251.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1235.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1103.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1100.5" y="1219.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1203.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1187.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1103.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1171.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1103.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1155.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1103.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1139.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1103.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1123.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1103.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1107.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1103.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1091.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1075.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1059.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1043.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1103.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1027.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1103.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1100.5" y="1011.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1203.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.7" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1187.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.7" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1171.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.7" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1155.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.7" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1139.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.7" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1123.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.7" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1107.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1091.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.7" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1075.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.7" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1059.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1104.7" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1043.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.7" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1027.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.7" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="1011.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1104.7" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="995.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1104.7" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="979.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.7" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="963.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1104.7" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="947.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.7" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="931.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.7" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="915.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.7" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="899.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.7" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1101.7" y="883.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.7" y="894.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1101.7" y="867.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1104.7" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1715.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.0" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1699.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.0" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1683.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1106.0" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1667.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.0" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1651.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1106.0" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1635.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.0" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1619.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.0" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1603.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1106.0" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1587.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.0" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1571.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.0" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1555.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1106.0" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1539.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1106.0" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1523.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.0" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1507.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.0" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1491.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.0" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1475.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.0" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1459.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.0" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1443.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.0" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1427.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.0" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1411.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.0" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1395.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.0" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1379.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1106.0" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1363.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.0" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1103.0" y="1347.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1106.0" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (8 samples, 0.84%)</title><rect x="1104.2" y="1827.0" width="10.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1107.2" y="1838.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (2 samples, 0.21%)</title><rect x="1104.2" y="1811.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1107.2" y="1822.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (2 samples, 0.21%)</title><rect x="1104.2" y="1795.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1107.2" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.63%)</title><rect x="1106.7" y="1811.0" width="7.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.7" y="1822.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1106.7" y="1795.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.7" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1779.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1109.7" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1763.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1109.7" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1747.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1109.7" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1731.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.7" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1715.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1109.7" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1699.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.7" y="1710.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1683.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1667.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.7" y="1678.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1651.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1109.7" y="1662.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1635.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.7" y="1646.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1619.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.7" y="1630.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1603.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.7" y="1614.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1587.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.7" y="1598.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1571.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.7" y="1582.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1555.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.7" y="1566.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1539.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.7" y="1550.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1523.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1109.7" y="1534.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1507.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1109.7" y="1518.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1491.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1109.7" y="1502.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1475.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.7" y="1486.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1459.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1109.7" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1443.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1109.7" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1427.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1109.7" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1106.7" y="1411.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.7" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1107.9" y="1779.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1110.9" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1107.9" y="1763.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1110.9" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1107.9" y="1747.0" width="2.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.9" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1107.9" y="1731.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.9" y="1742.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1107.9" y="1715.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1110.9" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1109.2" y="1731.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.2" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1109.2" y="1715.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.2" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1109.2" y="1699.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1112.2" y="1710.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1109.2" y="1683.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1112.2" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1110.4" y="1795.0" width="3.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1113.4" y="1806.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.32%)</title><rect x="1110.4" y="1779.0" width="3.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1113.4" y="1790.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1110.4" y="1763.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.4" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1110.4" y="1747.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1113.4" y="1758.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1110.4" y="1731.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1113.4" y="1742.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1110.4" y="1715.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1113.4" y="1726.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1111.7" y="1699.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="1710.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1111.7" y="1683.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.7" y="1694.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1112.9" y="1763.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.9" y="1774.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1112.9" y="1747.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1115.9" y="1758.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1112.9" y="1731.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1115.9" y="1742.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1114.2" y="1891.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1117.2" y="1902.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.11%)</title><rect x="1115.4" y="1891.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1118.4" y="1902.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (20 samples, 2.11%)</title><rect x="1116.6" y="1891.0" width="24.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1119.6" y="1902.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.21%)</title><rect x="1116.6" y="1875.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1119.6" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1119.1" y="1875.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1122.1" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 1.37%)</title><rect x="1120.4" y="1875.0" width="16.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1123.4" y="1886.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 1.37%)</title><rect x="1120.4" y="1859.0" width="16.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1123.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 1.26%)</title><rect x="1121.6" y="1843.0" width="14.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1124.6" y="1854.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.11%)</title><rect x="1121.6" y="1827.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1124.6" y="1838.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.11%)</title><rect x="1121.6" y="1811.0" width="1.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1124.6" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.11%)</title><rect x="1122.9" y="1827.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.9" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.11%)</title><rect x="1122.9" y="1811.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.9" y="1822.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 1.05%)</title><rect x="1124.1" y="1827.0" width="12.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1127.1" y="1838.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.21%)</title><rect x="1136.5" y="1875.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.5" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.21%)</title><rect x="1139.0" y="1875.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="1886.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.21%)</title><rect x="1139.0" y="1859.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1142.0" y="1870.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.21%)</title><rect x="1139.0" y="1843.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.0" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.21%)</title><rect x="1139.0" y="1827.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.0" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1811.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1142.0" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1795.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1142.0" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1779.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.0" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1763.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.0" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1747.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.0" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1731.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.0" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1715.0" width="2.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.0" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1699.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="1710.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1139.0" y="1683.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.0" y="1694.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1667.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.0" y="1678.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1651.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.0" y="1662.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1635.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.0" y="1646.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1619.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.0" y="1630.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1603.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.0" y="1614.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1587.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.0" y="1598.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1571.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.0" y="1582.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1555.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.0" y="1566.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1539.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.0" y="1550.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1139.0" y="1523.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.0" y="1534.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1139.0" y="1507.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.0" y="1518.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1140.3" y="1667.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.3" y="1678.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1140.3" y="1651.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1143.3" y="1662.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (26 samples, 2.74%)</title><rect x="1141.5" y="1891.0" width="32.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.5" y="1902.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (26 samples, 2.74%)</title><rect x="1141.5" y="1875.0" width="32.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.5" y="1886.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1141.5" y="1859.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1141.5" y="1843.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.5" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.11%)</title><rect x="1141.5" y="1827.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.5" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1141.5" y="1811.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.5" y="1822.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (2 samples, 0.21%)</title><rect x="1142.8" y="1859.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.8" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (5 samples, 0.53%)</title><rect x="1145.2" y="1859.0" width="6.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.2" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (9 samples, 0.95%)</title><rect x="1151.5" y="1859.0" width="11.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.5" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.21%)</title><rect x="1160.2" y="1843.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.2" y="1854.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1160.2" y="1827.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.2" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1161.4" y="1827.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.4" y="1838.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (3 samples, 0.32%)</title><rect x="1162.6" y="1859.0" width="3.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.6" y="1870.0"></text>
</g>
<g>
<title>MemNode::optimize_memory_chain(Node*, TypePtr const*, Node*, PhaseGVN*) (1 samples, 0.11%)</title><rect x="1162.6" y="1843.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1165.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::optimize_simple_memory_chain(Node*, TypeOopPtr const*, Node*, PhaseGVN*) (1 samples, 0.11%)</title><rect x="1162.6" y="1827.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.6" y="1838.0"></text>
</g>
<g>
<title>Node::is_dead_loop_safe() const (1 samples, 0.11%)</title><rect x="1163.9" y="1843.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.9" y="1854.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const (1 samples, 0.11%)</title><rect x="1165.1" y="1843.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.1" y="1854.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1166.4" y="1859.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1169.4" y="1870.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1166.4" y="1843.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.4" y="1854.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.11%)</title><rect x="1166.4" y="1827.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.4" y="1838.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1166.4" y="1811.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.4" y="1822.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (5 samples, 0.53%)</title><rect x="1167.6" y="1859.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.6" y="1870.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (4 samples, 0.42%)</title><rect x="1167.6" y="1843.0" width="5.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1170.6" y="1854.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.42%)</title><rect x="1167.6" y="1827.0" width="5.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.6" y="1838.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.42%)</title><rect x="1167.6" y="1811.0" width="5.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.6" y="1822.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (4 samples, 0.42%)</title><rect x="1167.6" y="1795.0" width="5.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.6" y="1806.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.32%)</title><rect x="1167.6" y="1779.0" width="3.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1170.6" y="1790.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1167.6" y="1763.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1170.6" y="1774.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.21%)</title><rect x="1167.6" y="1747.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.6" y="1758.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1167.6" y="1731.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.6" y="1742.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1167.6" y="1715.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.6" y="1726.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1167.6" y="1699.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.6" y="1710.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1167.6" y="1683.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.6" y="1694.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1167.6" y="1667.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.6" y="1678.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1168.9" y="1731.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1171.9" y="1742.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1168.9" y="1715.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1171.9" y="1726.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1170.1" y="1763.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.1" y="1774.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1170.1" y="1747.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.1" y="1758.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1171.3" y="1779.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.3" y="1790.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1171.3" y="1763.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.3" y="1774.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1172.6" y="1843.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.6" y="1854.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.11%)</title><rect x="1172.6" y="1827.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.6" y="1838.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1172.6" y="1811.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="1822.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1172.6" y="1795.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1175.6" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (2 samples, 0.21%)</title><rect x="1173.8" y="1891.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="1902.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (2 samples, 0.21%)</title><rect x="1173.8" y="1875.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.8" y="1886.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*) (1 samples, 0.11%)</title><rect x="1173.8" y="1859.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.8" y="1870.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1843.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.8" y="1854.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1827.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="1838.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1811.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.8" y="1822.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1795.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.8" y="1806.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1779.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1790.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1763.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="1774.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1747.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1176.8" y="1758.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1731.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="1742.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1715.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1176.8" y="1726.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1699.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1710.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1683.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.8" y="1694.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1667.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.8" y="1678.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1651.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.8" y="1662.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1635.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1176.8" y="1646.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1619.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1630.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1603.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.8" y="1614.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1587.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="1598.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1571.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="1582.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1555.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.8" y="1566.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1539.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="1550.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1523.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.8" y="1534.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1507.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1518.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1491.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.8" y="1502.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem_phi(Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*, Node_Stack*, int) (1 samples, 0.11%)</title><rect x="1173.8" y="1475.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1176.8" y="1486.0"></text>
</g>
<g>
<title>ciField::compute_type() (1 samples, 0.11%)</title><rect x="1175.1" y="1859.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.1" y="1870.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.11%)</title><rect x="1175.1" y="1843.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.1" y="1854.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.11%)</title><rect x="1175.1" y="1827.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.1" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (10 samples, 1.05%)</title><rect x="1176.3" y="1907.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1918.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (10 samples, 1.05%)</title><rect x="1176.3" y="1891.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1902.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (10 samples, 1.05%)</title><rect x="1176.3" y="1875.0" width="12.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1886.0"></text>
</g>
<g>
<title>Parse::do_one_block() (10 samples, 1.05%)</title><rect x="1176.3" y="1859.0" width="12.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.3" y="1870.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (10 samples, 1.05%)</title><rect x="1176.3" y="1843.0" width="12.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1854.0"></text>
</g>
<g>
<title>Parse::do_call() (9 samples, 0.95%)</title><rect x="1176.3" y="1827.0" width="11.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="1838.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.84%)</title><rect x="1176.3" y="1811.0" width="10.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="1822.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.84%)</title><rect x="1176.3" y="1795.0" width="10.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1806.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.84%)</title><rect x="1176.3" y="1779.0" width="10.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1790.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.84%)</title><rect x="1176.3" y="1763.0" width="10.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.3" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.84%)</title><rect x="1176.3" y="1747.0" width="10.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1758.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.84%)</title><rect x="1176.3" y="1731.0" width="10.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1742.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1715.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1726.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1699.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1710.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1683.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="1694.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1667.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1651.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1662.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1635.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1179.3" y="1646.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1619.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1630.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1603.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="1614.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1587.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1598.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1571.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1179.3" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1555.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1566.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1539.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1523.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1507.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="1518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1491.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="1502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1475.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1459.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="1470.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1443.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="1454.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1427.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.3" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1411.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1395.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1379.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1363.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1347.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1179.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1331.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1179.3" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1315.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.3" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1299.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1179.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1283.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1267.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1251.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1179.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1235.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1219.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.3" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1203.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1187.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1171.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1155.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1139.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1176.3" y="1123.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.3" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1176.3" y="1107.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1176.3" y="1091.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1176.3" y="1075.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1176.3" y="1059.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1176.3" y="1043.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.3" y="1054.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1176.3" y="1027.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="1038.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1176.3" y="1011.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.3" y="1022.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1176.3" y="995.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1176.3" y="979.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1179.3" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1176.3" y="963.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.3" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1176.3" y="947.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.3" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::Block(ciTypeFlow*, ciBlock*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1176.3" y="931.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1179.3" y="942.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (7 samples, 0.74%)</title><rect x="1177.6" y="1715.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1726.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.74%)</title><rect x="1177.6" y="1699.0" width="8.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="1710.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.74%)</title><rect x="1177.6" y="1683.0" width="8.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.6" y="1694.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.74%)</title><rect x="1177.6" y="1667.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="1678.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.74%)</title><rect x="1177.6" y="1651.0" width="8.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.6" y="1662.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.74%)</title><rect x="1177.6" y="1635.0" width="8.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.6" y="1646.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.74%)</title><rect x="1177.6" y="1619.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="1630.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.74%)</title><rect x="1177.6" y="1603.0" width="8.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.6" y="1614.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.74%)</title><rect x="1177.6" y="1587.0" width="8.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1598.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.74%)</title><rect x="1177.6" y="1571.0" width="8.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.6" y="1582.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.74%)</title><rect x="1177.6" y="1555.0" width="8.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1566.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.74%)</title><rect x="1177.6" y="1539.0" width="8.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.6" y="1550.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.74%)</title><rect x="1177.6" y="1523.0" width="8.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.6" y="1534.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.74%)</title><rect x="1177.6" y="1507.0" width="8.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.6" y="1518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.74%)</title><rect x="1177.6" y="1491.0" width="8.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.6" y="1502.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.11%)</title><rect x="1177.6" y="1475.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.6" y="1486.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.11%)</title><rect x="1177.6" y="1459.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.6" y="1470.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.11%)</title><rect x="1177.6" y="1443.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1180.6" y="1454.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.11%)</title><rect x="1177.6" y="1427.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.6" y="1438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 0.63%)</title><rect x="1178.8" y="1475.0" width="7.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="1486.0"></text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 0.63%)</title><rect x="1178.8" y="1459.0" width="7.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1470.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 0.63%)</title><rect x="1178.8" y="1443.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.8" y="1454.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.53%)</title><rect x="1178.8" y="1427.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.8" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1178.8" y="1411.0" width="2.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.8" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1178.8" y="1395.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1178.8" y="1379.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1178.8" y="1363.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1178.8" y="1347.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.21%)</title><rect x="1178.8" y="1331.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="1315.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.8" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="1299.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="1283.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="1267.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="1251.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="1235.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="1219.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.8" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="1203.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="1187.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.8" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="1171.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="1155.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="1139.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="1150.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="1123.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.8" y="1134.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="1107.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="1091.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.8" y="1102.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="1075.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="1059.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="1043.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="1054.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.8" y="1027.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="1038.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.8" y="1011.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.8" y="995.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="1006.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.8" y="979.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.8" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.8" y="963.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="974.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.8" y="947.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.8" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1178.8" y="931.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1178.8" y="915.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1181.8" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1178.8" y="899.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.8" y="910.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.11%)</title><rect x="1178.8" y="883.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.8" y="894.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.11%)</title><rect x="1178.8" y="867.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.8" y="878.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.11%)</title><rect x="1178.8" y="851.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.8" y="862.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.11%)</title><rect x="1178.8" y="835.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.8" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.11%)</title><rect x="1178.8" y="819.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.8" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.11%)</title><rect x="1178.8" y="803.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.8" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.1" y="1315.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.1" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.1" y="1299.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.1" y="1283.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.1" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.1" y="1267.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.1" y="1251.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.1" y="1235.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.1" y="1246.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1180.1" y="1219.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="1230.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1180.1" y="1203.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.1" y="1214.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.11%)</title><rect x="1180.1" y="1187.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.1" y="1198.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.11%)</title><rect x="1180.1" y="1171.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.1" y="1182.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.11%)</title><rect x="1180.1" y="1155.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.1" y="1166.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.11%)</title><rect x="1180.1" y="1139.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.1" y="1150.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.11%)</title><rect x="1180.1" y="1123.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.1" y="1134.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.11%)</title><rect x="1180.1" y="1107.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="1118.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1180.1" y="1091.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.1" y="1102.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1180.1" y="1075.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.1" y="1086.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.11%)</title><rect x="1180.1" y="1059.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.1" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1180.1" y="1043.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.1" y="1054.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1180.1" y="1027.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.1" y="1038.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1181.3" y="1411.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.32%)</title><rect x="1181.3" y="1395.0" width="3.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="1406.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.32%)</title><rect x="1181.3" y="1379.0" width="3.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1390.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.32%)</title><rect x="1181.3" y="1363.0" width="3.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1184.3" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.32%)</title><rect x="1181.3" y="1347.0" width="3.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.32%)</title><rect x="1181.3" y="1331.0" width="3.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.32%)</title><rect x="1181.3" y="1315.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1326.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1181.3" y="1299.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1310.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1181.3" y="1283.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1294.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1181.3" y="1267.0" width="2.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.3" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1181.3" y="1251.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1181.3" y="1235.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.21%)</title><rect x="1181.3" y="1219.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1230.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.3" y="1203.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.3" y="1214.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1181.3" y="1187.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.3" y="1198.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1181.3" y="1171.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1181.3" y="1155.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1181.3" y="1139.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1181.3" y="1123.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="1134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.3" y="1107.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1118.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1181.3" y="1091.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.3" y="1102.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1181.3" y="1075.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.3" y="1086.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1181.3" y="1059.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1181.3" y="1043.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1181.3" y="1027.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.3" y="1038.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.3" y="1011.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.3" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1181.3" y="995.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.3" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1181.3" y="979.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1181.3" y="963.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.3" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1181.3" y="947.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.3" y="958.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1181.3" y="931.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.3" y="942.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1181.3" y="915.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.3" y="926.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.11%)</title><rect x="1181.3" y="899.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.3" y="910.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.11%)</title><rect x="1181.3" y="883.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.3" y="894.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.11%)</title><rect x="1181.3" y="867.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.3" y="878.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.11%)</title><rect x="1181.3" y="851.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.3" y="862.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1181.3" y="835.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.3" y="846.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1181.3" y="819.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.3" y="830.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="1203.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.5" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.5" y="1187.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.5" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.5" y="1171.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.5" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.5" y="1155.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.5" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.5" y="1139.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.5" y="1150.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.8" y="1299.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.8" y="1283.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.8" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.8" y="1267.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.8" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.8" y="1251.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.8" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.8" y="1235.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.8" y="1219.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.8" y="1203.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.8" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.8" y="1187.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.8" y="1171.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.8" y="1155.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.8" y="1139.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.8" y="1123.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.8" y="1134.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1183.8" y="1107.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.8" y="1118.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1183.8" y="1091.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="1102.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1183.8" y="1075.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.8" y="1086.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1183.8" y="1059.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1070.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.11%)</title><rect x="1183.8" y="1043.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.8" y="1054.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.11%)</title><rect x="1183.8" y="1027.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="1038.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.11%)</title><rect x="1183.8" y="1011.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.8" y="1022.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1185.0" y="1427.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1188.0" y="1438.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1185.0" y="1411.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.0" y="1422.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1185.0" y="1395.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.0" y="1406.0"></text>
</g>
<g>
<title>AddPNode::Identity(PhaseGVN*) (1 samples, 0.11%)</title><rect x="1185.0" y="1379.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.0" y="1390.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1185.0" y="1363.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.0" y="1374.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1185.0" y="1347.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.0" y="1358.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.3" y="1811.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="1822.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1186.3" y="1795.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1806.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1186.3" y="1779.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="1790.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1186.3" y="1763.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="1774.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1186.3" y="1747.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="1758.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1186.3" y="1731.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="1742.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1186.3" y="1715.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="1726.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1186.3" y="1699.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.3" y="1710.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1186.3" y="1683.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.3" y="1694.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1186.3" y="1667.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.3" y="1678.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1186.3" y="1651.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="1662.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1186.3" y="1635.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.3" y="1646.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1186.3" y="1619.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.3" y="1630.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1186.3" y="1603.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="1614.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1186.3" y="1587.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.3" y="1598.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1186.3" y="1571.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="1582.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1186.3" y="1555.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="1566.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1186.3" y="1539.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.3" y="1550.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1186.3" y="1523.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="1534.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.11%)</title><rect x="1186.3" y="1507.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1518.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(LinkInfo const&amp;) (1 samples, 0.11%)</title><rect x="1186.3" y="1491.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="1502.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(LinkInfo const&amp;, Thread*) (1 samples, 0.11%)</title><rect x="1186.3" y="1475.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.3" y="1486.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.11%)</title><rect x="1186.3" y="1459.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.3" y="1470.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.11%)</title><rect x="1186.3" y="1443.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.308] (1 samples, 0.11%)</title><rect x="1186.3" y="1427.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.3" y="1438.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="1827.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.5" y="1838.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="1811.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.5" y="1822.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.11%)</title><rect x="1187.5" y="1795.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.5" y="1806.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1187.5" y="1779.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.5" y="1790.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="1187.5" y="1763.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.5" y="1774.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.11%)</title><rect x="1187.5" y="1747.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.5" y="1758.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.11%)</title><rect x="1187.5" y="1731.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.5" y="1742.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.11%)</title><rect x="1187.5" y="1715.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.5" y="1726.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.11%)</title><rect x="1187.5" y="1699.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="1710.0"></text>
</g>
<g>
<title>ciField::ciField(fieldDescriptor*) (1 samples, 0.11%)</title><rect x="1187.5" y="1683.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.5" y="1694.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.11%)</title><rect x="1188.8" y="1955.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="1966.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::select_task(CompileQueue*) (1 samples, 0.11%)</title><rect x="1188.8" y="1939.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.8" y="1950.0"></text>
</g>
</g>
</svg>
