<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1478" onload="init(evt)" viewBox="0 0 1200 1478" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1461"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1461"> </text>
<g id="frames">
<g>
<title>all (194 samples, 100.00%)</title><rect x="10.0" y="1427.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1438.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (15 samples, 7.73%)</title><rect x="10.0" y="1411.0" width="91.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1422.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (15 samples, 7.73%)</title><rect x="10.0" y="1395.0" width="91.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1406.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.maybeCommitAsync (1 samples, 0.52%)</title><rect x="10.0" y="1379.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CommitManager.commitAsync (1 samples, 0.52%)</title><rect x="10.0" y="1363.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.commitAsync (1 samples, 0.52%)</title><rect x="10.0" y="1347.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.commitOffsetsAsync (1 samples, 0.52%)</title><rect x="10.0" y="1331.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.52%)</title><rect x="10.0" y="1315.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.52%)</title><rect x="10.0" y="1299.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.52%)</title><rect x="10.0" y="1283.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.52%)</title><rect x="10.0" y="1267.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="10.0" y="1251.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.52%)</title><rect x="10.0" y="1235.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest$Builder.build (1 samples, 0.52%)</title><rect x="10.0" y="1219.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/OffsetCommitRequest.&lt;init&gt; (1 samples, 0.52%)</title><rect x="10.0" y="1203.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.&lt;init&gt; (1 samples, 0.52%)</title><rect x="10.0" y="1187.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (14 samples, 7.22%)</title><rect x="16.1" y="1379.0" width="85.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.1" y="1390.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.52%)</title><rect x="16.1" y="1363.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="19.1" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.52%)</title><rect x="16.1" y="1347.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.52%)</title><rect x="16.1" y="1331.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.1" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$333/47972235.accept (1 samples, 0.52%)</title><rect x="16.1" y="1315.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.1" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.52%)</title><rect x="16.1" y="1299.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.1" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.52%)</title><rect x="16.1" y="1283.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.1" y="1294.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.52%)</title><rect x="16.1" y="1267.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="19.1" y="1278.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 2.06%)</title><rect x="22.2" y="1363.0" width="24.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.2" y="1374.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$332/1004332087.accept (4 samples, 2.06%)</title><rect x="22.2" y="1347.0" width="24.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.2" y="1358.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 2.06%)</title><rect x="22.2" y="1331.0" width="24.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="1342.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (4 samples, 2.06%)</title><rect x="22.2" y="1315.0" width="24.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.2" y="1326.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (4 samples, 2.06%)</title><rect x="22.2" y="1299.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.2" y="1310.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (4 samples, 2.06%)</title><rect x="22.2" y="1283.0" width="24.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.2" y="1294.0">c..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (4 samples, 2.06%)</title><rect x="22.2" y="1267.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.2" y="1278.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 2.06%)</title><rect x="22.2" y="1251.0" width="24.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.2" y="1262.0">j..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.64%)</title><rect x="46.5" y="1363.0" width="54.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="49.5" y="1374.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 4.64%)</title><rect x="46.5" y="1347.0" width="54.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="49.5" y="1358.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (8 samples, 4.12%)</title><rect x="46.5" y="1331.0" width="48.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="49.5" y="1342.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 3.09%)</title><rect x="46.5" y="1315.0" width="36.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="49.5" y="1326.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (6 samples, 3.09%)</title><rect x="46.5" y="1299.0" width="36.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="49.5" y="1310.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.maybeThrowAnyException (2 samples, 1.03%)</title><rect x="52.6" y="1283.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="55.6" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.clearErrorsAndMaybeThrowException (2 samples, 1.03%)</title><rect x="52.6" y="1267.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="55.6" y="1278.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (2 samples, 1.03%)</title><rect x="52.6" y="1251.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.6" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$$Lambda$126/49516183.get (2 samples, 1.03%)</title><rect x="52.6" y="1235.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="55.6" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer$$Lambda$329/388278855.shouldBlock (1 samples, 0.52%)</title><rect x="64.7" y="1283.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="67.7" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.lambda$pollForFetches$1 (1 samples, 0.52%)</title><rect x="64.7" y="1267.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="67.7" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.hasAvailableFetches (1 samples, 0.52%)</title><rect x="64.7" y="1251.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="67.7" y="1262.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.52%)</title><rect x="64.7" y="1235.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="67.7" y="1246.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.52%)</title><rect x="64.7" y="1219.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="67.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 1.03%)</title><rect x="70.8" y="1283.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="73.8" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 1.03%)</title><rect x="70.8" y="1267.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="73.8" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 1.03%)</title><rect x="70.8" y="1251.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.8" y="1262.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 1.03%)</title><rect x="70.8" y="1235.0" width="12.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="73.8" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 1.03%)</title><rect x="70.8" y="1219.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="73.8" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (2 samples, 1.03%)</title><rect x="70.8" y="1203.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="73.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.52%)</title><rect x="76.9" y="1187.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="79.9" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.responseData (1 samples, 0.52%)</title><rect x="76.9" y="1171.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="79.9" y="1182.0"></text>
</g>
<g>
<title>java/util/ArrayList.forEach (1 samples, 0.52%)</title><rect x="76.9" y="1155.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="79.9" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse$$Lambda$349/1714625938.accept (1 samples, 0.52%)</title><rect x="76.9" y="1139.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.9" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.lambda$responseData$1 (1 samples, 0.52%)</title><rect x="76.9" y="1123.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.9" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (2 samples, 1.03%)</title><rect x="83.0" y="1315.0" width="12.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="86.0" y="1326.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.52%)</title><rect x="83.0" y="1299.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.0" y="1310.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="83.0" y="1283.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.0" y="1294.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.52%)</title><rect x="83.0" y="1267.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="86.0" y="1278.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.52%)</title><rect x="83.0" y="1251.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="86.0" y="1262.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.52%)</title><rect x="83.0" y="1235.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="86.0" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.52%)</title><rect x="89.1" y="1299.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="92.1" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.52%)</title><rect x="89.1" y="1283.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.1" y="1294.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.52%)</title><rect x="89.1" y="1267.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.1" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.52%)</title><rect x="89.1" y="1251.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="92.1" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.52%)</title><rect x="89.1" y="1235.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="92.1" y="1246.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.52%)</title><rect x="95.2" y="1331.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.2" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.52%)</title><rect x="95.2" y="1315.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.2" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.52%)</title><rect x="95.2" y="1299.0" width="6.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.2" y="1310.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.52%)</title><rect x="95.2" y="1283.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.2" y="1294.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.52%)</title><rect x="95.2" y="1267.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.2" y="1278.0"></text>
</g>
<g>
<title>java/util/stream/StreamOpFlag.fromCharacteristics (1 samples, 0.52%)</title><rect x="95.2" y="1251.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.2" y="1262.0"></text>
</g>
<g>
<title>java/lang/Thread.run (91 samples, 46.91%)</title><rect x="101.2" y="1411.0" width="553.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="104.2" y="1422.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (91 samples, 46.91%)</title><rect x="101.2" y="1395.0" width="553.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="104.2" y="1406.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (91 samples, 46.91%)</title><rect x="101.2" y="1379.0" width="553.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="104.2" y="1390.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/1615989682.run (86 samples, 44.33%)</title><rect x="101.2" y="1363.0" width="523.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="104.2" y="1374.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$35..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (86 samples, 44.33%)</title><rect x="101.2" y="1347.0" width="523.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="104.2" y="1358.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$put..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (86 samples, 44.33%)</title><rect x="101.2" y="1331.0" width="523.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.2" y="1342.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (86 samples, 44.33%)</title><rect x="101.2" y="1315.0" width="523.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="104.2" y="1326.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedule..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (2 samples, 1.03%)</title><rect x="113.4" y="1299.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="116.4" y="1310.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 1.03%)</title><rect x="113.4" y="1283.0" width="12.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="116.4" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.03%)</title><rect x="113.4" y="1267.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.4" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 1.03%)</title><rect x="113.4" y="1251.0" width="12.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.4" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="119.5" y="1235.0" width="6.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="122.5" y="1246.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="119.5" y="1219.0" width="6.1" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="122.5" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (6 samples, 3.09%)</title><rect x="125.6" y="1299.0" width="36.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="128.6" y="1310.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="156.0" y="1283.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.0" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="156.0" y="1267.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.0" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="156.0" y="1251.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="159.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="156.0" y="1235.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="159.0" y="1246.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$367/58342689.accept (1 samples, 0.52%)</title><rect x="156.0" y="1219.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.0" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (1 samples, 0.52%)</title><rect x="156.0" y="1203.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.52%)</title><rect x="156.0" y="1187.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.52%)</title><rect x="156.0" y="1171.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="159.0" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="156.0" y="1155.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.0" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="156.0" y="1139.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="159.0" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$354/404661302.accept (1 samples, 0.52%)</title><rect x="156.0" y="1123.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.0" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (16 samples, 8.25%)</title><rect x="162.1" y="1299.0" width="97.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.1" y="1310.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (16 samples, 8.25%)</title><rect x="162.1" y="1283.0" width="97.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="165.1" y="1294.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (16 samples, 8.25%)</title><rect x="162.1" y="1267.0" width="97.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.1" y="1278.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 8.25%)</title><rect x="162.1" y="1251.0" width="97.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.1" y="1262.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (16 samples, 8.25%)</title><rect x="162.1" y="1235.0" width="97.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.1" y="1246.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (16 samples, 8.25%)</title><rect x="162.1" y="1219.0" width="97.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.1" y="1230.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (4 samples, 2.06%)</title><rect x="162.1" y="1203.0" width="24.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.1" y="1214.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (10 samples, 5.15%)</title><rect x="186.4" y="1203.0" width="60.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="189.4" y="1214.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationConfig.isEnabled (1 samples, 0.52%)</title><rect x="186.4" y="1187.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="189.4" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 1.03%)</title><rect x="192.5" y="1187.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.5" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.03%)</title><rect x="192.5" y="1171.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="195.5" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 1.03%)</title><rect x="192.5" y="1155.0" width="12.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="195.5" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.52%)</title><rect x="198.6" y="1139.0" width="6.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="201.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (6 samples, 3.09%)</title><rect x="204.6" y="1187.0" width="36.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.6" y="1198.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.09%)</title><rect x="204.6" y="1171.0" width="36.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.6" y="1182.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 1.55%)</title><rect x="204.6" y="1155.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.6" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.55%)</title><rect x="204.6" y="1139.0" width="18.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.6" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.52%)</title><rect x="204.6" y="1123.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.6" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 1.03%)</title><rect x="210.7" y="1123.0" width="12.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="213.7" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 1.03%)</title><rect x="210.7" y="1107.0" width="12.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="213.7" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 1.03%)</title><rect x="210.7" y="1091.0" width="12.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="213.7" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 1.03%)</title><rect x="210.7" y="1075.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.7" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (3 samples, 1.55%)</title><rect x="222.9" y="1155.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="225.9" y="1166.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (3 samples, 1.55%)</title><rect x="222.9" y="1139.0" width="18.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="225.9" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 1.03%)</title><rect x="229.0" y="1123.0" width="12.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="1134.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.52%)</title><rect x="229.0" y="1107.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="232.0" y="1118.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.52%)</title><rect x="229.0" y="1091.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="232.0" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.52%)</title><rect x="229.0" y="1075.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="232.0" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.52%)</title><rect x="229.0" y="1059.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.52%)</title><rect x="229.0" y="1043.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.0" y="1054.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.52%)</title><rect x="229.0" y="1027.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="232.0" y="1038.0"></text>
</g>
<g>
<title>sun/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.52%)</title><rect x="229.0" y="1011.0" width="6.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="232.0" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.52%)</title><rect x="235.1" y="1107.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="238.1" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.52%)</title><rect x="235.1" y="1091.0" width="6.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.1" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="235.1" y="1075.0" width="6.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.1" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.52%)</title><rect x="241.1" y="1187.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.1" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (2 samples, 1.03%)</title><rect x="247.2" y="1203.0" width="12.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.2" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (2 samples, 1.03%)</title><rect x="247.2" y="1187.0" width="12.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="250.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (2 samples, 1.03%)</title><rect x="247.2" y="1171.0" width="12.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.2" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 1.03%)</title><rect x="247.2" y="1155.0" width="12.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 1.03%)</title><rect x="247.2" y="1139.0" width="12.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.2" y="1150.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (60 samples, 30.93%)</title><rect x="259.4" y="1299.0" width="364.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="262.4" y="1310.0">com/linecorp/decaton/processor/runtime/internal/Pr..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.52%)</title><rect x="265.5" y="1283.0" width="6.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="268.5" y="1294.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="265.5" y="1267.0" width="6.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="268.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (11 samples, 5.67%)</title><rect x="271.5" y="1283.0" width="67.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="274.5" y="1294.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (11 samples, 5.67%)</title><rect x="271.5" y="1267.0" width="67.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.5" y="1278.0">org/slf..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (10 samples, 5.15%)</title><rect x="277.6" y="1251.0" width="60.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="280.6" y="1262.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 2.06%)</title><rect x="277.6" y="1235.0" width="24.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="280.6" y="1246.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 2.06%)</title><rect x="277.6" y="1219.0" width="24.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="280.6" y="1230.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (4 samples, 2.06%)</title><rect x="277.6" y="1203.0" width="24.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="280.6" y="1214.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 2.06%)</title><rect x="277.6" y="1187.0" width="24.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="280.6" y="1198.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.55%)</title><rect x="302.0" y="1235.0" width="18.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="305.0" y="1246.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.52%)</title><rect x="314.1" y="1219.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.1" y="1230.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.52%)</title><rect x="314.1" y="1203.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.1" y="1214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.55%)</title><rect x="320.2" y="1235.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="323.2" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (1 samples, 0.52%)</title><rect x="332.4" y="1219.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="335.4" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.52%)</title><rect x="332.4" y="1203.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.4" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.52%)</title><rect x="338.5" y="1283.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="341.5" y="1294.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.52%)</title><rect x="338.5" y="1267.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="341.5" y="1278.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (7 samples, 3.61%)</title><rect x="344.5" y="1283.0" width="42.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="347.5" y="1294.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (7 samples, 3.61%)</title><rect x="344.5" y="1267.0" width="42.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.5" y="1278.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (4 samples, 2.06%)</title><rect x="350.6" y="1251.0" width="24.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="353.6" y="1262.0">c..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.55%)</title><rect x="356.7" y="1235.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="359.7" y="1246.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.55%)</title><rect x="356.7" y="1219.0" width="18.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="359.7" y="1230.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (2 samples, 1.03%)</title><rect x="362.8" y="1203.0" width="12.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="365.8" y="1214.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (2 samples, 1.03%)</title><rect x="362.8" y="1187.0" width="12.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.8" y="1198.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 1.03%)</title><rect x="362.8" y="1171.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.8" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 1.03%)</title><rect x="362.8" y="1155.0" width="12.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="365.8" y="1166.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 1.03%)</title><rect x="362.8" y="1139.0" width="12.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="365.8" y="1150.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.52%)</title><rect x="368.9" y="1123.0" width="6.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="371.9" y="1134.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.52%)</title><rect x="368.9" y="1107.0" width="6.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="371.9" y="1118.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (2 samples, 1.03%)</title><rect x="374.9" y="1251.0" width="12.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="377.9" y="1262.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (2 samples, 1.03%)</title><rect x="374.9" y="1235.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="377.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.52%)</title><rect x="381.0" y="1219.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.0" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.52%)</title><rect x="381.0" y="1203.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="384.0" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.52%)</title><rect x="381.0" y="1187.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="384.0" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (38 samples, 19.59%)</title><rect x="387.1" y="1283.0" width="231.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="390.1" y="1294.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (38 samples, 19.59%)</title><rect x="387.1" y="1267.0" width="231.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="390.1" y="1278.0">com/linecorp/decaton/processor/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$274/740188340.process (35 samples, 18.04%)</title><rect x="387.1" y="1251.0" width="212.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="390.1" y="1262.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (35 samples, 18.04%)</title><rect x="387.1" y="1235.0" width="212.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="390.1" y="1246.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (35 samples, 18.04%)</title><rect x="387.1" y="1219.0" width="212.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="390.1" y="1230.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (34 samples, 17.53%)</title><rect x="387.1" y="1203.0" width="206.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="390.1" y="1214.0">com/linecorp/decaton/benchm..</text>
</g>
<g>
<title>java/lang/Thread.sleep (32 samples, 16.49%)</title><rect x="393.2" y="1187.0" width="194.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="396.2" y="1198.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (30 samples, 15.46%)</title><rect x="405.4" y="1171.0" width="182.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="408.4" y="1182.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.52%)</title><rect x="411.4" y="1155.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="414.4" y="1166.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.52%)</title><rect x="417.5" y="1155.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="420.5" y="1166.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.52%)</title><rect x="423.6" y="1155.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="426.6" y="1166.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (26 samples, 13.40%)</title><rect x="429.7" y="1155.0" width="158.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="432.7" y="1166.0">os::sleep(Thread*, l..</text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 2.06%)</title><rect x="460.1" y="1139.0" width="24.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="463.1" y="1150.0">_..</text>
</g>
<g>
<title>__pthread_cond_timedwait (12 samples, 6.19%)</title><rect x="484.4" y="1139.0" width="73.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="487.4" y="1150.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.52%)</title><rect x="557.4" y="1139.0" width="6.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="560.4" y="1150.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.52%)</title><rect x="563.5" y="1139.0" width="6.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="566.5" y="1150.0"></text>
</g>
<g>
<title>_init (1 samples, 0.52%)</title><rect x="569.6" y="1139.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="572.6" y="1150.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.52%)</title><rect x="575.7" y="1139.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="578.7" y="1150.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="581.8" y="1139.0" width="6.0" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="584.8" y="1150.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.52%)</title><rect x="587.8" y="1187.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="590.8" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.52%)</title><rect x="593.9" y="1203.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="596.9" y="1214.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.52%)</title><rect x="593.9" y="1187.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="596.9" y="1198.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.52%)</title><rect x="593.9" y="1171.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="596.9" y="1182.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.52%)</title><rect x="600.0" y="1251.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="603.0" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.52%)</title><rect x="600.0" y="1235.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="603.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.52%)</title><rect x="600.0" y="1219.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="603.0" y="1230.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.52%)</title><rect x="606.1" y="1251.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="609.1" y="1262.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.52%)</title><rect x="606.1" y="1235.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="609.1" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.52%)</title><rect x="606.1" y="1219.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="609.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.52%)</title><rect x="606.1" y="1203.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="609.1" y="1214.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.52%)</title><rect x="606.1" y="1187.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="609.1" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="612.2" y="1251.0" width="6.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="618.2" y="1283.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="621.2" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="618.2" y="1267.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="621.2" y="1278.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="618.2" y="1251.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="621.2" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="618.2" y="1235.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="621.2" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.52%)</title><rect x="618.2" y="1219.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="621.2" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.52%)</title><rect x="618.2" y="1203.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="621.2" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.52%)</title><rect x="624.3" y="1363.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="627.3" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="624.3" y="1347.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="627.3" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.52%)</title><rect x="624.3" y="1331.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.3" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.52%)</title><rect x="624.3" y="1315.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="627.3" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (4 samples, 2.06%)</title><rect x="630.4" y="1363.0" width="24.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.4" y="1374.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (4 samples, 2.06%)</title><rect x="630.4" y="1347.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="633.4" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 1.03%)</title><rect x="642.6" y="1331.0" width="12.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.6" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 1.03%)</title><rect x="642.6" y="1315.0" width="12.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.6" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 1.03%)</title><rect x="642.6" y="1299.0" width="12.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="645.6" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 1.03%)</title><rect x="642.6" y="1283.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.6" y="1294.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.52%)</title><rect x="654.7" y="1411.0" width="6.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="657.7" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (2 samples, 1.03%)</title><rect x="660.8" y="1411.0" width="12.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.8" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (1 samples, 0.52%)</title><rect x="660.8" y="1395.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.8" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (1 samples, 0.52%)</title><rect x="660.8" y="1379.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.isUnavailable (1 samples, 0.52%)</title><rect x="660.8" y="1363.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="663.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.connectionFailed (1 samples, 0.52%)</title><rect x="660.8" y="1347.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="663.8" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.isDisconnected (1 samples, 0.52%)</title><rect x="660.8" y="1331.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.8" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.52%)</title><rect x="660.8" y="1315.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.8" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="660.8" y="1299.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.8" y="1310.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.52%)</title><rect x="666.9" y="1395.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.52%)</title><rect x="666.9" y="1379.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="669.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.52%)</title><rect x="666.9" y="1363.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="669.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleTimedOutConnections (1 samples, 0.52%)</title><rect x="666.9" y="1347.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="669.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/ClusterConnectionStates.nodesWithConnectionSetupTimeout (1 samples, 0.52%)</title><rect x="666.9" y="1331.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="669.9" y="1342.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.52%)</title><rect x="666.9" y="1315.0" width="6.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="669.9" y="1326.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.52%)</title><rect x="666.9" y="1299.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="669.9" y="1310.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.52%)</title><rect x="666.9" y="1283.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="669.9" y="1294.0"></text>
</g>
<g>
<title>start_thread (85 samples, 43.81%)</title><rect x="673.0" y="1411.0" width="517.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="676.0" y="1422.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (85 samples, 43.81%)</title><rect x="673.0" y="1395.0" width="517.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="676.0" y="1406.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 5.15%)</title><rect x="673.0" y="1379.0" width="60.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="676.0" y="1390.0">GangWo..</text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 1.03%)</title><rect x="673.0" y="1363.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="676.0" y="1374.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 1.03%)</title><rect x="673.0" y="1347.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="676.0" y="1358.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.52%)</title><rect x="673.0" y="1331.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="676.0" y="1342.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.52%)</title><rect x="679.1" y="1331.0" width="6.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="682.1" y="1342.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (8 samples, 4.12%)</title><rect x="685.2" y="1363.0" width="48.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="688.2" y="1374.0">G1Pa..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (8 samples, 4.12%)</title><rect x="685.2" y="1347.0" width="48.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="688.2" y="1358.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (8 samples, 4.12%)</title><rect x="685.2" y="1331.0" width="48.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="688.2" y="1342.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (7 samples, 3.61%)</title><rect x="691.2" y="1315.0" width="42.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="694.2" y="1326.0">G1Pa..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.52%)</title><rect x="727.7" y="1299.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="730.7" y="1310.0"></text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (1 samples, 0.52%)</title><rect x="727.7" y="1283.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="730.7" y="1294.0"></text>
</g>
<g>
<title>JavaThread::run() (75 samples, 38.66%)</title><rect x="733.8" y="1379.0" width="456.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="736.8" y="1390.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (75 samples, 38.66%)</title><rect x="733.8" y="1363.0" width="456.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="736.8" y="1374.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (75 samples, 38.66%)</title><rect x="733.8" y="1347.0" width="456.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="736.8" y="1358.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (75 samples, 38.66%)</title><rect x="733.8" y="1331.0" width="456.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="736.8" y="1342.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (73 samples, 37.63%)</title><rect x="733.8" y="1315.0" width="444.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="736.8" y="1326.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (73 samples, 37.63%)</title><rect x="733.8" y="1299.0" width="444.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="736.8" y="1310.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (45 samples, 23.20%)</title><rect x="733.8" y="1283.0" width="273.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="736.8" y="1294.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.52%)</title><rect x="733.8" y="1267.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="736.8" y="1278.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.52%)</title><rect x="733.8" y="1251.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="736.8" y="1262.0"></text>
</g>
<g>
<title>MachNode::alignment_required() const (1 samples, 0.52%)</title><rect x="733.8" y="1235.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="736.8" y="1246.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 1.03%)</title><rect x="739.9" y="1267.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="742.9" y="1278.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.52%)</title><rect x="746.0" y="1251.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="749.0" y="1262.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.52%)</title><rect x="746.0" y="1235.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="749.0" y="1246.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 2.58%)</title><rect x="752.1" y="1267.0" width="30.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="755.1" y="1278.0">Ma..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.52%)</title><rect x="752.1" y="1251.0" width="6.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="755.1" y="1262.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.52%)</title><rect x="752.1" y="1235.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="755.1" y="1246.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="752.1" y="1219.0" width="6.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="755.1" y="1230.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 2.06%)</title><rect x="758.1" y="1251.0" width="24.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="761.1" y="1262.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.52%)</title><rect x="758.1" y="1235.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="761.1" y="1246.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 1.03%)</title><rect x="764.2" y="1235.0" width="12.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.2" y="1246.0"></text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.52%)</title><rect x="764.2" y="1219.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="767.2" y="1230.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.52%)</title><rect x="764.2" y="1203.0" width="6.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="767.2" y="1214.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.52%)</title><rect x="770.3" y="1219.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.3" y="1230.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.52%)</title><rect x="770.3" y="1203.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="773.3" y="1214.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.52%)</title><rect x="770.3" y="1187.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="773.3" y="1198.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="770.3" y="1171.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.3" y="1182.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.52%)</title><rect x="770.3" y="1155.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="773.3" y="1166.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.52%)</title><rect x="776.4" y="1235.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="779.4" y="1246.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.52%)</title><rect x="776.4" y="1219.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="779.4" y="1230.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.52%)</title><rect x="782.5" y="1267.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="785.5" y="1278.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.52%)</title><rect x="782.5" y="1251.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="785.5" y="1262.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.52%)</title><rect x="782.5" y="1235.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="785.5" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (36 samples, 18.56%)</title><rect x="788.6" y="1267.0" width="218.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="791.6" y="1278.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.52%)</title><rect x="794.6" y="1251.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="797.6" y="1262.0"></text>
</g>
<g>
<title>MachTypeNode::bottom_type() const (1 samples, 0.52%)</title><rect x="800.7" y="1251.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.7" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.03%)</title><rect x="806.8" y="1251.0" width="12.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="809.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.52%)</title><rect x="812.9" y="1235.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="815.9" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.52%)</title><rect x="812.9" y="1219.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="815.9" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.52%)</title><rect x="819.0" y="1251.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="822.0" y="1262.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.52%)</title><rect x="819.0" y="1235.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="822.0" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="819.0" y="1219.0" width="6.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="822.0" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.55%)</title><rect x="825.1" y="1251.0" width="18.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="828.1" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 3.61%)</title><rect x="843.3" y="1251.0" width="42.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="846.3" y="1262.0">Phas..</text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.52%)</title><rect x="873.7" y="1235.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="876.7" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.52%)</title><rect x="879.8" y="1235.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="882.8" y="1246.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="879.8" y="1219.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="882.8" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 1.03%)</title><rect x="885.9" y="1251.0" width="12.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="888.9" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (2 samples, 1.03%)</title><rect x="885.9" y="1235.0" width="12.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="888.9" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.55%)</title><rect x="898.0" y="1251.0" width="18.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="901.0" y="1262.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.52%)</title><rect x="910.2" y="1235.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="913.2" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.52%)</title><rect x="916.3" y="1251.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="919.3" y="1262.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 2.06%)</title><rect x="922.4" y="1251.0" width="24.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="925.4" y="1262.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.52%)</title><rect x="934.5" y="1235.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.5" y="1246.0"></text>
</g>
<g>
<title>PhaseChaitin::use_prior_register(Node*, unsigned int, Node*, Block*, Node_List&amp;, Node_List&amp;) (1 samples, 0.52%)</title><rect x="934.5" y="1219.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="937.5" y="1230.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) (1 samples, 0.52%)</title><rect x="940.6" y="1235.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.6" y="1246.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 1.03%)</title><rect x="946.7" y="1251.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="949.7" y="1262.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.03%)</title><rect x="946.7" y="1235.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="949.7" y="1246.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 1.03%)</title><rect x="946.7" y="1219.0" width="12.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="949.7" y="1230.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 1.03%)</title><rect x="946.7" y="1203.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="949.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 1.03%)</title><rect x="958.9" y="1251.0" width="12.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.9" y="1262.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="964.9" y="1235.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="967.9" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.06%)</title><rect x="971.0" y="1251.0" width="24.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.0" y="1262.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.52%)</title><rect x="983.2" y="1235.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.2" y="1246.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.52%)</title><rect x="989.3" y="1235.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="992.3" y="1246.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.52%)</title><rect x="989.3" y="1219.0" width="6.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="992.3" y="1230.0"></text>
</g>
<g>
<title>addL_mem_rRegNode::ideal_Opcode() const (1 samples, 0.52%)</title><rect x="995.4" y="1251.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.4" y="1262.0"></text>
</g>
<g>
<title>find_hihghest_bit(unsigned int) (1 samples, 0.52%)</title><rect x="1001.4" y="1251.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1004.4" y="1262.0"></text>
</g>
<g>
<title>Compile::Optimize() (22 samples, 11.34%)</title><rect x="1007.5" y="1283.0" width="133.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1010.5" y="1294.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.52%)</title><rect x="1007.5" y="1267.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1010.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (16 samples, 8.25%)</title><rect x="1013.6" y="1267.0" width="97.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1016.6" y="1278.0">PhaseIdealL..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.52%)</title><rect x="1019.7" y="1251.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1022.7" y="1262.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.52%)</title><rect x="1019.7" y="1235.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1022.7" y="1246.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.52%)</title><rect x="1019.7" y="1219.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1022.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.52%)</title><rect x="1019.7" y="1203.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1022.7" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1019.7" y="1187.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.7" y="1198.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.52%)</title><rect x="1025.8" y="1251.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.8" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 4.64%)</title><rect x="1031.9" y="1251.0" width="54.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1034.9" y="1262.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (8 samples, 4.12%)</title><rect x="1037.9" y="1235.0" width="48.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1040.9" y="1246.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.52%)</title><rect x="1050.1" y="1219.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1053.1" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (5 samples, 2.58%)</title><rect x="1056.2" y="1219.0" width="30.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1059.2" y="1230.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 1.03%)</title><rect x="1074.4" y="1203.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1077.4" y="1214.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.52%)</title><rect x="1086.6" y="1251.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.6" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 1.55%)</title><rect x="1092.7" y="1251.0" width="18.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1095.7" y="1262.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.52%)</title><rect x="1092.7" y="1235.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1095.7" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.52%)</title><rect x="1092.7" y="1219.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.7" y="1230.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 1.03%)</title><rect x="1098.8" y="1235.0" width="12.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.8" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 1.03%)</title><rect x="1098.8" y="1219.0" width="12.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.8" y="1230.0"></text>
</g>
<g>
<title>AddNode::Identity(PhaseTransform*) (1 samples, 0.52%)</title><rect x="1104.8" y="1203.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1107.8" y="1214.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.52%)</title><rect x="1104.8" y="1187.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1107.8" y="1198.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.52%)</title><rect x="1104.8" y="1171.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.8" y="1182.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 2.58%)</title><rect x="1110.9" y="1267.0" width="30.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1113.9" y="1278.0">Ph..</text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 2.58%)</title><rect x="1110.9" y="1251.0" width="30.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.9" y="1262.0">Ph..</text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1117.0" y="1235.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.0" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="1219.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1120.0" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="1203.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1120.0" y="1214.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.52%)</title><rect x="1117.0" y="1187.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1120.0" y="1198.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1123.1" y="1235.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.1" y="1246.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.52%)</title><rect x="1123.1" y="1219.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.1" y="1230.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.52%)</title><rect x="1123.1" y="1203.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.1" y="1214.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.52%)</title><rect x="1123.1" y="1187.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.1" y="1198.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1129.2" y="1235.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1132.2" y="1246.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.52%)</title><rect x="1129.2" y="1219.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1132.2" y="1230.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.52%)</title><rect x="1129.2" y="1203.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.2" y="1214.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.52%)</title><rect x="1129.2" y="1187.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.2" y="1198.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.52%)</title><rect x="1135.3" y="1235.0" width="6.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.3" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 3.09%)</title><rect x="1141.3" y="1283.0" width="36.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.3" y="1294.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 3.09%)</title><rect x="1141.3" y="1267.0" width="36.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="1278.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (6 samples, 3.09%)</title><rect x="1141.3" y="1251.0" width="36.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="1262.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (6 samples, 3.09%)</title><rect x="1141.3" y="1235.0" width="36.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="1246.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (6 samples, 3.09%)</title><rect x="1141.3" y="1219.0" width="36.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.3" y="1230.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.58%)</title><rect x="1141.3" y="1203.0" width="30.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.3" y="1214.0">Pa..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 2.58%)</title><rect x="1141.3" y="1187.0" width="30.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.3" y="1198.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 2.58%)</title><rect x="1141.3" y="1171.0" width="30.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.3" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 2.58%)</title><rect x="1141.3" y="1155.0" width="30.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 2.58%)</title><rect x="1141.3" y="1139.0" width="30.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.3" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 2.58%)</title><rect x="1141.3" y="1123.0" width="30.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.3" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 2.58%)</title><rect x="1141.3" y="1107.0" width="30.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.3" y="1118.0">Pa..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1141.3" y="1091.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.3" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1141.3" y="1075.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.3" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.52%)</title><rect x="1141.3" y="1059.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.3" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.52%)</title><rect x="1141.3" y="1043.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.3" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.52%)</title><rect x="1141.3" y="1027.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.52%)</title><rect x="1141.3" y="1011.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.3" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1141.3" y="995.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.3" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1141.3" y="979.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.52%)</title><rect x="1141.3" y="963.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.3" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.52%)</title><rect x="1141.3" y="947.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.52%)</title><rect x="1141.3" y="931.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.3" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.52%)</title><rect x="1141.3" y="915.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.3" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.52%)</title><rect x="1141.3" y="899.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.3" y="910.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.52%)</title><rect x="1141.3" y="883.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.3" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.52%)</title><rect x="1141.3" y="867.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.3" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="1091.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.4" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="1075.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.4" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="1059.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="1043.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="1027.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.4" y="1011.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.4" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="995.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.4" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="979.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.4" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1147.4" y="963.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1147.4" y="947.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1147.4" y="931.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1147.4" y="915.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.4" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1147.4" y="899.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1147.4" y="883.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.4" y="894.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.52%)</title><rect x="1147.4" y="867.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.4" y="878.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.52%)</title><rect x="1147.4" y="851.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.4" y="862.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="835.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="846.0"></text>
</g>
<g>
<title>GraphKit::make_runtime_call(int, TypeFunc const*, unsigned char*, char const*, TypePtr const*, Node*, Node*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.52%)</title><rect x="1147.4" y="819.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="830.0"></text>
</g>
<g>
<title>GraphKit::add_safepoint_edges(SafePointNode*, bool) (1 samples, 0.52%)</title><rect x="1147.4" y="803.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.4" y="814.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.52%)</title><rect x="1147.4" y="787.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.55%)</title><rect x="1153.5" y="1091.0" width="18.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.5" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.55%)</title><rect x="1153.5" y="1075.0" width="18.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.5" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.55%)</title><rect x="1153.5" y="1059.0" width="18.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1156.5" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.55%)</title><rect x="1153.5" y="1043.0" width="18.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.5" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.55%)</title><rect x="1153.5" y="1027.0" width="18.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.5" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.55%)</title><rect x="1153.5" y="1011.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.5" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.55%)</title><rect x="1153.5" y="995.0" width="18.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.5" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.55%)</title><rect x="1153.5" y="979.0" width="18.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.5" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.55%)</title><rect x="1153.5" y="963.0" width="18.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.5" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.55%)</title><rect x="1153.5" y="947.0" width="18.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.5" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.55%)</title><rect x="1153.5" y="931.0" width="18.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.5" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.55%)</title><rect x="1153.5" y="915.0" width="18.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.55%)</title><rect x="1153.5" y="899.0" width="18.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="910.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.5" y="883.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.5" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1159.6" y="883.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1159.6" y="867.0" width="12.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1162.6" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1159.6" y="851.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1159.6" y="835.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1159.6" y="819.0" width="12.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.6" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1159.6" y="803.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1159.6" y="787.0" width="12.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.6" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1159.6" y="771.0" width="12.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.6" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1159.6" y="755.0" width="12.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.6" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1159.6" y="739.0" width="12.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.6" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1159.6" y="723.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.6" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1159.6" y="707.0" width="12.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1162.6" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1159.6" y="691.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1159.6" y="675.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1159.6" y="659.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.6" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1159.6" y="643.0" width="12.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1162.6" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1159.6" y="627.0" width="12.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 1.03%)</title><rect x="1159.6" y="611.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.6" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.03%)</title><rect x="1159.6" y="595.0" width="12.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1162.6" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.03%)</title><rect x="1159.6" y="579.0" width="12.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1162.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.03%)</title><rect x="1159.6" y="563.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 1.03%)</title><rect x="1159.6" y="547.0" width="12.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1162.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 1.03%)</title><rect x="1159.6" y="531.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1162.6" y="542.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.52%)</title><rect x="1159.6" y="515.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1162.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1165.7" y="515.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1165.7" y="499.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1165.7" y="483.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1165.7" y="467.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1168.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1165.7" y="451.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1165.7" y="435.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1165.7" y="419.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1165.7" y="403.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1165.7" y="387.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1165.7" y="371.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1165.7" y="355.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1168.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1165.7" y="339.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1165.7" y="323.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1168.7" y="334.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.52%)</title><rect x="1165.7" y="307.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1168.7" y="318.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.52%)</title><rect x="1165.7" y="291.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="302.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.52%)</title><rect x="1165.7" y="275.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.7" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.52%)</title><rect x="1165.7" y="259.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.7" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.52%)</title><rect x="1165.7" y="243.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.7" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1165.7" y="227.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1168.7" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.52%)</title><rect x="1165.7" y="211.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.7" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.52%)</title><rect x="1165.7" y="195.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1168.7" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.52%)</title><rect x="1165.7" y="179.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="190.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.52%)</title><rect x="1165.7" y="163.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1165.7" y="147.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1165.7" y="131.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1168.7" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.52%)</title><rect x="1165.7" y="115.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.7" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.52%)</title><rect x="1165.7" y="99.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.7" y="110.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1165.7" y="83.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1168.7" y="94.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle, ciSymbol*) (1 samples, 0.52%)</title><rect x="1165.7" y="67.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.7" y="78.0"></text>
</g>
<g>
<title>SignatureStream::as_symbol(Thread*) (1 samples, 0.52%)</title><rect x="1165.7" y="51.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.7" y="62.0"></text>
</g>
<g>
<title>SymbolTable::lookup(Symbol const*, int, int, Thread*) (1 samples, 0.52%)</title><rect x="1165.7" y="35.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1168.7" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.52%)</title><rect x="1171.8" y="1203.0" width="6.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.8" y="1214.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.52%)</title><rect x="1171.8" y="1187.0" width="6.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.8" y="1198.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency) (1 samples, 0.52%)</title><rect x="1171.8" y="1171.0" width="6.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.8" y="1182.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 1.03%)</title><rect x="1177.8" y="1315.0" width="12.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="1326.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 1.03%)</title><rect x="1177.8" y="1299.0" width="12.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.8" y="1310.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 1.03%)</title><rect x="1177.8" y="1283.0" width="12.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.8" y="1294.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.03%)</title><rect x="1177.8" y="1267.0" width="12.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.8" y="1278.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.52%)</title><rect x="1177.8" y="1251.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1180.8" y="1262.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1177.8" y="1235.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.8" y="1246.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1177.8" y="1219.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.8" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::setup_start_block(int, BlockBegin*, BlockBegin*, ValueStack*) (1 samples, 0.52%)</title><rect x="1177.8" y="1203.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1180.8" y="1214.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.52%)</title><rect x="1183.9" y="1251.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.9" y="1262.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.52%)</title><rect x="1183.9" y="1235.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="1246.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.52%)</title><rect x="1183.9" y="1219.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="1230.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(LIR_OpList*, IntervalWalker*) (1 samples, 0.52%)</title><rect x="1183.9" y="1203.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.9" y="1214.0"></text>
</g>
<g>
<title>LinearScan::split_child_at_op_id(Interval*, int, LIR_OpVisitState::OprMode) (1 samples, 0.52%)</title><rect x="1183.9" y="1187.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.9" y="1198.0"></text>
</g>
</g>
</svg>
