<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (916 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (221 samples, 24.13%)</title><rect x="10.0" y="963.0" width="284.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="974.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (221 samples, 24.13%)</title><rect x="10.0" y="947.0" width="284.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="958.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (221 samples, 24.13%)</title><rect x="10.0" y="931.0" width="284.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="942.0">com/linecorp/decaton/processor/runtime..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (1 samples, 0.11%)</title><rect x="10.0" y="915.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (1 samples, 0.11%)</title><rect x="10.0" y="899.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="10.0" y="883.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="10.0" y="867.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="10.0" y="851.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="10.0" y="835.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="10.0" y="819.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="10.0" y="803.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.11%)</title><rect x="10.0" y="787.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="10.0" y="771.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="13.0" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (7 samples, 0.76%)</title><rect x="11.3" y="915.0" width="9.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="14.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (7 samples, 0.76%)</title><rect x="11.3" y="899.0" width="9.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.3" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (7 samples, 0.76%)</title><rect x="11.3" y="883.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.3" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$337/47972235.accept (7 samples, 0.76%)</title><rect x="11.3" y="867.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.3" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (7 samples, 0.76%)</title><rect x="11.3" y="851.0" width="9.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.3" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (7 samples, 0.76%)</title><rect x="11.3" y="835.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="14.3" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (6 samples, 0.66%)</title><rect x="12.6" y="819.0" width="7.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.6" y="830.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (180 samples, 19.65%)</title><rect x="20.3" y="915.0" width="231.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="23.3" y="926.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$336/1004332087.accept (177 samples, 19.32%)</title><rect x="20.3" y="899.0" width="228.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.3" y="910.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (176 samples, 19.21%)</title><rect x="21.6" y="883.0" width="226.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="24.6" y="894.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (161 samples, 17.58%)</title><rect x="21.6" y="867.0" width="207.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.6" y="878.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (161 samples, 17.58%)</title><rect x="21.6" y="851.0" width="207.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="24.6" y="862.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (160 samples, 17.47%)</title><rect x="22.9" y="835.0" width="206.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.9" y="846.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (160 samples, 17.47%)</title><rect x="22.9" y="819.0" width="206.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.9" y="830.0">java/util/concurrent/Execut..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (160 samples, 17.47%)</title><rect x="22.9" y="803.0" width="206.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.9" y="814.0">java/util/concurrent/Thread..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (160 samples, 17.47%)</title><rect x="22.9" y="787.0" width="206.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.9" y="798.0">java/util/concurrent/Linked..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (123 samples, 13.43%)</title><rect x="65.4" y="771.0" width="158.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.4" y="782.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 2.95%)</title><rect x="65.4" y="755.0" width="34.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.4" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 2.95%)</title><rect x="65.4" y="739.0" width="34.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.4" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (27 samples, 2.95%)</title><rect x="65.4" y="723.0" width="34.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.66%)</title><rect x="100.2" y="755.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="103.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (6 samples, 0.66%)</title><rect x="100.2" y="739.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="103.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (3 samples, 0.33%)</title><rect x="100.2" y="723.0" width="3.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="103.2" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (3 samples, 0.33%)</title><rect x="100.2" y="707.0" width="3.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="103.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.33%)</title><rect x="104.0" y="723.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="107.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (90 samples, 9.83%)</title><rect x="107.9" y="755.0" width="115.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.9" y="766.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (90 samples, 9.83%)</title><rect x="107.9" y="739.0" width="115.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="110.9" y="750.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (88 samples, 9.61%)</title><rect x="107.9" y="723.0" width="113.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="110.9" y="734.0">java/util/conc..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (88 samples, 9.61%)</title><rect x="107.9" y="707.0" width="113.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="110.9" y="718.0">java/util/conc..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (87 samples, 9.50%)</title><rect x="109.2" y="691.0" width="112.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="112.2" y="702.0">sun/misc/Unsaf..</text>
</g>
<g>
<title>Unsafe_Unpark (79 samples, 8.62%)</title><rect x="110.5" y="675.0" width="101.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="113.5" y="686.0">Unsafe_Unpark</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="113.1" y="659.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="116.1" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (3 samples, 0.33%)</title><rect x="114.3" y="659.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="117.3" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (53 samples, 5.79%)</title><rect x="118.2" y="659.0" width="68.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="121.2" y="670.0">__pthre..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (5 samples, 0.55%)</title><rect x="186.5" y="659.0" width="6.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="189.5" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (15 samples, 1.64%)</title><rect x="192.9" y="659.0" width="19.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="195.9" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (5 samples, 0.55%)</title><rect x="212.2" y="675.0" width="6.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="215.2" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.22%)</title><rect x="218.7" y="675.0" width="2.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="221.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.22%)</title><rect x="221.3" y="723.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="224.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (4 samples, 0.44%)</title><rect x="223.8" y="771.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="226.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.44%)</title><rect x="223.8" y="755.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="226.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (4 samples, 0.44%)</title><rect x="223.8" y="739.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="226.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.44%)</title><rect x="223.8" y="723.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="226.8" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (11 samples, 1.20%)</title><rect x="229.0" y="867.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="232.0" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (11 samples, 1.20%)</title><rect x="229.0" y="851.0" width="14.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="232.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.22%)</title><rect x="240.6" y="835.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.22%)</title><rect x="240.6" y="819.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.22%)</title><rect x="240.6" y="803.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.6" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.22%)</title><rect x="240.6" y="787.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.22%)</title><rect x="240.6" y="771.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="243.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.22%)</title><rect x="240.6" y="755.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.33%)</title><rect x="243.2" y="867.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.2" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.33%)</title><rect x="243.2" y="851.0" width="3.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="246.2" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.33%)</title><rect x="243.2" y="835.0" width="3.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="246.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.22%)</title><rect x="244.5" y="819.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="247.5" y="830.0"></text>
</g>
<g>
<title>java/util/Objects.equals (2 samples, 0.22%)</title><rect x="244.5" y="803.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="247.0" y="867.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="250.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="247.0" y="851.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="250.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="247.0" y="835.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="250.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.11%)</title><rect x="247.0" y="819.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.0" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="247.0" y="803.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="250.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.11%)</title><rect x="247.0" y="787.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="250.0" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.33%)</title><rect x="248.3" y="899.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.3" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.33%)</title><rect x="248.3" y="883.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="251.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.33%)</title><rect x="248.3" y="867.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.33%)</title><rect x="248.3" y="851.0" width="3.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="251.3" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.11%)</title><rect x="250.9" y="835.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.60%)</title><rect x="252.2" y="915.0" width="42.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="255.2" y="926.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (33 samples, 3.60%)</title><rect x="252.2" y="899.0" width="42.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="255.2" y="910.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (24 samples, 2.62%)</title><rect x="252.2" y="883.0" width="30.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="255.2" y="894.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.11%)</title><rect x="252.2" y="867.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="255.2" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.11%)</title><rect x="252.2" y="851.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="255.2" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (23 samples, 2.51%)</title><rect x="253.5" y="867.0" width="29.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="256.5" y="878.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (23 samples, 2.51%)</title><rect x="253.5" y="851.0" width="29.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="256.5" y="862.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (21 samples, 2.29%)</title><rect x="253.5" y="835.0" width="27.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="256.5" y="846.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 2.29%)</title><rect x="253.5" y="819.0" width="27.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="256.5" y="830.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (12 samples, 1.31%)</title><rect x="256.0" y="803.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="259.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (4 samples, 0.44%)</title><rect x="265.1" y="787.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (4 samples, 0.44%)</title><rect x="265.1" y="771.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.1" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (4 samples, 0.44%)</title><rect x="265.1" y="755.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="268.1" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (4 samples, 0.44%)</title><rect x="265.1" y="739.0" width="5.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.1" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (4 samples, 0.44%)</title><rect x="265.1" y="723.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="268.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (4 samples, 0.44%)</title><rect x="265.1" y="707.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.1" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (4 samples, 0.44%)</title><rect x="265.1" y="691.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.1" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.11%)</title><rect x="270.2" y="787.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="273.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.11%)</title><rect x="270.2" y="771.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="270.2" y="755.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="273.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="270.2" y="739.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="273.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.11%)</title><rect x="270.2" y="723.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="273.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (1 samples, 0.11%)</title><rect x="270.2" y="707.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="273.2" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.11%)</title><rect x="270.2" y="691.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.2" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (7 samples, 0.76%)</title><rect x="271.5" y="803.0" width="9.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.76%)</title><rect x="271.5" y="787.0" width="9.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.76%)</title><rect x="271.5" y="771.0" width="9.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="274.5" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.76%)</title><rect x="271.5" y="755.0" width="9.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="274.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.11%)</title><rect x="280.5" y="835.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.11%)</title><rect x="280.5" y="819.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="283.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="280.5" y="803.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="283.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="280.5" y="787.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="283.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.partitionLag (1 samples, 0.11%)</title><rect x="281.8" y="835.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.11%)</title><rect x="283.1" y="883.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.11%)</title><rect x="283.1" y="867.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="286.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (1 samples, 0.11%)</title><rect x="283.1" y="851.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="286.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.11%)</title><rect x="283.1" y="835.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="286.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.11%)</title><rect x="283.1" y="819.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="286.1" y="830.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="283.1" y="803.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="286.1" y="814.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.11%)</title><rect x="283.1" y="787.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.1" y="798.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.11%)</title><rect x="283.1" y="771.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="286.1" y="782.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.11%)</title><rect x="283.1" y="755.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.1" y="766.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.11%)</title><rect x="283.1" y="739.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="286.1" y="750.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="283.1" y="723.0" width="1.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="286.1" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (6 samples, 0.66%)</title><rect x="284.4" y="883.0" width="7.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="287.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.44%)</title><rect x="284.4" y="867.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="287.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (4 samples, 0.44%)</title><rect x="284.4" y="851.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (3 samples, 0.33%)</title><rect x="284.4" y="835.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="287.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.11%)</title><rect x="284.4" y="819.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="287.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.11%)</title><rect x="284.4" y="803.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="287.4" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="284.4" y="787.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="287.4" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="284.4" y="771.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="287.4" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$IdleExpiryManager.update (1 samples, 0.11%)</title><rect x="285.7" y="819.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="288.7" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.11%)</title><rect x="285.7" y="803.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="288.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.11%)</title><rect x="287.0" y="819.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="290.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.maybeBeginClientReauthentication (1 samples, 0.11%)</title><rect x="287.0" y="803.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="290.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.11%)</title><rect x="288.3" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="291.3" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.selectNow (1 samples, 0.11%)</title><rect x="288.3" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="291.3" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.11%)</title><rect x="288.3" y="803.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="291.3" y="814.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.11%)</title><rect x="288.3" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="291.3" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.updateSelectedKeys (1 samples, 0.11%)</title><rect x="288.3" y="771.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="291.3" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="288.3" y="755.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="291.3" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="288.3" y="739.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="291.3" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (2 samples, 0.22%)</title><rect x="289.5" y="867.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (2 samples, 0.22%)</title><rect x="289.5" y="851.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="292.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (2 samples, 0.22%)</title><rect x="289.5" y="835.0" width="2.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="292.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (2 samples, 0.22%)</title><rect x="289.5" y="819.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="292.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (2 samples, 0.22%)</title><rect x="289.5" y="803.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="292.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData$FetchPartition.&lt;init&gt; (1 samples, 0.11%)</title><rect x="289.5" y="787.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest.&lt;init&gt; (1 samples, 0.11%)</title><rect x="290.8" y="787.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="293.8" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.11%)</title><rect x="292.1" y="883.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.11%)</title><rect x="292.1" y="867.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.11%)</title><rect x="292.1" y="851.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.11%)</title><rect x="292.1" y="835.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.11%)</title><rect x="292.1" y="819.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="295.1" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (1 samples, 0.11%)</title><rect x="293.4" y="883.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="296.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.11%)</title><rect x="293.4" y="867.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="296.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.11%)</title><rect x="293.4" y="851.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="296.4" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="293.4" y="835.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="296.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.11%)</title><rect x="293.4" y="819.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="296.4" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (598 samples, 65.28%)</title><rect x="294.7" y="963.0" width="770.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="297.7" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (598 samples, 65.28%)</title><rect x="294.7" y="947.0" width="770.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="297.7" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (598 samples, 65.28%)</title><rect x="294.7" y="931.0" width="770.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="297.7" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/1615989682.run (390 samples, 42.58%)</title><rect x="294.7" y="915.0" width="502.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="297.7" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (390 samples, 42.58%)</title><rect x="294.7" y="899.0" width="502.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="297.7" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (388 samples, 42.36%)</title><rect x="294.7" y="883.0" width="499.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="297.7" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (388 samples, 42.36%)</title><rect x="294.7" y="867.0" width="499.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="297.7" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.sched..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.87%)</title><rect x="302.4" y="851.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="305.4" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.87%)</title><rect x="302.4" y="835.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="305.4" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (8 samples, 0.87%)</title><rect x="302.4" y="819.0" width="10.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.4" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="302.4" y="803.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="305.4" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.76%)</title><rect x="303.7" y="803.0" width="9.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="306.7" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.55%)</title><rect x="306.3" y="787.0" width="6.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="309.3" y="798.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.55%)</title><rect x="306.3" y="771.0" width="6.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="309.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (37 samples, 4.04%)</title><rect x="312.7" y="851.0" width="47.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="315.7" y="862.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.62%)</title><rect x="329.5" y="835.0" width="30.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="332.5" y="846.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (24 samples, 2.62%)</title><rect x="329.5" y="819.0" width="30.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="332.5" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (24 samples, 2.62%)</title><rect x="329.5" y="803.0" width="30.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="332.5" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.22%)</title><rect x="329.5" y="787.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="332.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.22%)</title><rect x="329.5" y="771.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.22%)</title><rect x="329.5" y="755.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.5" y="766.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="330.8" y="739.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="333.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 2.40%)</title><rect x="332.1" y="787.0" width="28.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="335.1" y="798.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$367/1380839401.accept (21 samples, 2.29%)</title><rect x="333.3" y="771.0" width="27.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.3" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (21 samples, 2.29%)</title><rect x="333.3" y="755.0" width="27.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.3" y="766.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (20 samples, 2.18%)</title><rect x="333.3" y="739.0" width="25.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="336.3" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (18 samples, 1.97%)</title><rect x="335.9" y="723.0" width="23.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="338.9" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (18 samples, 1.97%)</title><rect x="335.9" y="707.0" width="23.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="338.9" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (8 samples, 0.87%)</title><rect x="335.9" y="691.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="338.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (8 samples, 0.87%)</title><rect x="335.9" y="675.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.9" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$355/1725385729.accept (1 samples, 0.11%)</title><rect x="342.4" y="659.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="345.4" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$354/404661302.accept (1 samples, 0.11%)</title><rect x="343.6" y="659.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="346.6" y="670.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="344.9" y="659.0" width="1.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="347.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 1.09%)</title><rect x="346.2" y="691.0" width="12.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="349.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (10 samples, 1.09%)</title><rect x="346.2" y="675.0" width="12.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="349.2" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.compareAndSetForkJoinTaskTag (2 samples, 0.22%)</title><rect x="356.5" y="659.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="359.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.11%)</title><rect x="359.1" y="739.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="362.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (105 samples, 11.46%)</title><rect x="360.4" y="851.0" width="135.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="363.4" y="862.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (105 samples, 11.46%)</title><rect x="360.4" y="835.0" width="135.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="363.4" y="846.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (105 samples, 11.46%)</title><rect x="360.4" y="819.0" width="135.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.4" y="830.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (105 samples, 11.46%)</title><rect x="360.4" y="803.0" width="135.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="363.4" y="814.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (105 samples, 11.46%)</title><rect x="360.4" y="787.0" width="135.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="363.4" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (105 samples, 11.46%)</title><rect x="360.4" y="771.0" width="135.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="363.4" y="782.0">com/fasterxml/jac..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.98%)</title><rect x="369.4" y="755.0" width="11.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="372.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.98%)</title><rect x="369.4" y="739.0" width="11.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="372.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (21 samples, 2.29%)</title><rect x="381.0" y="755.0" width="27.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.0" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (21 samples, 2.29%)</title><rect x="381.0" y="739.0" width="27.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="384.0" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (21 samples, 2.29%)</title><rect x="381.0" y="723.0" width="27.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="384.0" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (20 samples, 2.18%)</title><rect x="381.0" y="707.0" width="25.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.0" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (20 samples, 2.18%)</title><rect x="381.0" y="691.0" width="25.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="384.0" y="702.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.11%)</title><rect x="406.8" y="707.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (1 samples, 0.11%)</title><rect x="406.8" y="691.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.11%)</title><rect x="406.8" y="675.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="409.8" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="406.8" y="659.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="409.8" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="406.8" y="643.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="409.8" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="406.8" y="627.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="409.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="406.8" y="611.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="409.8" y="622.0"></text>
</g>
<g>
<title>G1SATBCardTableModRefBS::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.11%)</title><rect x="406.8" y="595.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="409.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (64 samples, 6.99%)</title><rect x="408.1" y="755.0" width="82.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.1" y="766.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (5 samples, 0.55%)</title><rect x="408.1" y="739.0" width="6.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.55%)</title><rect x="408.1" y="723.0" width="6.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.1" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="413.2" y="707.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="416.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.22%)</title><rect x="414.5" y="739.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="417.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="414.5" y="723.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="417.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.11%)</title><rect x="415.8" y="723.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (9 samples, 0.98%)</title><rect x="417.1" y="739.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (7 samples, 0.76%)</title><rect x="419.7" y="723.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.7" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="419.7" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="422.7" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="419.7" y="691.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="422.7" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="419.7" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="422.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (6 samples, 0.66%)</title><rect x="420.9" y="707.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="423.9" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (6 samples, 0.66%)</title><rect x="420.9" y="691.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="423.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (4 samples, 0.44%)</title><rect x="423.5" y="675.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="426.5" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (48 samples, 5.24%)</title><rect x="428.7" y="739.0" width="61.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="431.7" y="750.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (48 samples, 5.24%)</title><rect x="428.7" y="723.0" width="61.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.7" y="734.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (18 samples, 1.97%)</title><rect x="432.5" y="707.0" width="23.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="435.5" y="718.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.66%)</title><rect x="446.7" y="691.0" width="7.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="449.7" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.66%)</title><rect x="446.7" y="675.0" width="7.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="449.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.66%)</title><rect x="446.7" y="659.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="449.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWSOrEnd (1 samples, 0.11%)</title><rect x="454.4" y="691.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="457.4" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (27 samples, 2.95%)</title><rect x="455.7" y="707.0" width="34.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.7" y="718.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (27 samples, 2.95%)</title><rect x="455.7" y="691.0" width="34.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="458.7" y="702.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (27 samples, 2.95%)</title><rect x="455.7" y="675.0" width="34.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.7" y="686.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (7 samples, 0.76%)</title><rect x="457.0" y="659.0" width="9.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="460.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.11%)</title><rect x="458.3" y="643.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.44%)</title><rect x="459.6" y="643.0" width="5.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.44%)</title><rect x="459.6" y="627.0" width="5.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="462.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.44%)</title><rect x="459.6" y="611.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="462.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.33%)</title><rect x="460.9" y="595.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.33%)</title><rect x="460.9" y="579.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.9" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (2 samples, 0.22%)</title><rect x="462.2" y="563.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="465.2" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer._verifyLongName (2 samples, 0.22%)</title><rect x="462.2" y="547.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="465.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.11%)</title><rect x="464.7" y="643.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.55%)</title><rect x="466.0" y="659.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="469.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (3 samples, 0.33%)</title><rect x="468.6" y="643.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="471.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.33%)</title><rect x="468.6" y="627.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="471.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (3 samples, 0.33%)</title><rect x="468.6" y="611.0" width="3.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="471.6" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (3 samples, 0.33%)</title><rect x="468.6" y="595.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.6" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.11%)</title><rect x="472.5" y="659.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="475.5" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (6 samples, 0.66%)</title><rect x="473.8" y="659.0" width="7.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (6 samples, 0.66%)</title><rect x="473.8" y="643.0" width="7.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (6 samples, 0.66%)</title><rect x="473.8" y="627.0" width="7.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (6 samples, 0.66%)</title><rect x="473.8" y="611.0" width="7.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="476.8" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (6 samples, 0.66%)</title><rect x="473.8" y="595.0" width="7.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="476.8" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.44%)</title><rect x="476.3" y="579.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="479.3" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (2 samples, 0.22%)</title><rect x="478.9" y="563.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.33%)</title><rect x="481.5" y="659.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.5" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.33%)</title><rect x="481.5" y="643.0" width="3.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="484.5" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.33%)</title><rect x="481.5" y="627.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.33%)</title><rect x="485.3" y="659.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="488.3" y="670.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor1.newInstance (1 samples, 0.11%)</title><rect x="489.2" y="659.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="492.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (4 samples, 0.44%)</title><rect x="490.5" y="755.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (4 samples, 0.44%)</title><rect x="490.5" y="739.0" width="5.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="493.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (4 samples, 0.44%)</title><rect x="490.5" y="723.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="493.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeBindings.isEmpty (1 samples, 0.11%)</title><rect x="490.5" y="707.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._findWellKnownSimple (1 samples, 0.11%)</title><rect x="491.8" y="707.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="494.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (2 samples, 0.22%)</title><rect x="493.1" y="707.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.22%)</title><rect x="493.1" y="691.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="496.1" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (226 samples, 24.67%)</title><rect x="495.7" y="851.0" width="291.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="498.7" y="862.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.44%)</title><rect x="507.2" y="835.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="510.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.44%)</title><rect x="507.2" y="819.0" width="5.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="510.2" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (38 samples, 4.15%)</title><rect x="512.4" y="835.0" width="49.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="515.4" y="846.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (38 samples, 4.15%)</title><rect x="512.4" y="819.0" width="49.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="515.4" y="830.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (35 samples, 3.82%)</title><rect x="516.3" y="803.0" width="45.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="519.3" y="814.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (14 samples, 1.53%)</title><rect x="521.4" y="787.0" width="18.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="524.4" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (13 samples, 1.42%)</title><rect x="522.7" y="771.0" width="16.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="525.7" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (13 samples, 1.42%)</title><rect x="522.7" y="755.0" width="16.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="525.7" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (13 samples, 1.42%)</title><rect x="522.7" y="739.0" width="16.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="525.7" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="539.5" y="787.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.5" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="539.5" y="771.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="542.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="539.5" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.11%)</title><rect x="539.5" y="739.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.5" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (16 samples, 1.75%)</title><rect x="540.7" y="787.0" width="20.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="543.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (4 samples, 0.44%)</title><rect x="554.9" y="771.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="557.9" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.44%)</title><rect x="554.9" y="755.0" width="5.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="557.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (1 samples, 0.11%)</title><rect x="560.1" y="771.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="563.1" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.44%)</title><rect x="561.4" y="835.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="564.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="561.4" y="819.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="564.4" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="561.4" y="803.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="564.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="561.4" y="787.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="564.4" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="561.4" y="771.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="564.4" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="561.4" y="755.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="564.4" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.11%)</title><rect x="561.4" y="739.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="564.4" y="750.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="561.4" y="723.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="564.4" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="561.4" y="707.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="564.4" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.11%)</title><rect x="561.4" y="691.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="564.4" y="702.0"></text>
</g>
<g>
<title>Monitor::owned_by_self() const (1 samples, 0.11%)</title><rect x="561.4" y="675.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="564.4" y="686.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.33%)</title><rect x="562.6" y="819.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="565.6" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (120 samples, 13.10%)</title><rect x="566.5" y="835.0" width="154.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="569.5" y="846.0">com/linecorp/decaton..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (111 samples, 12.12%)</title><rect x="566.5" y="819.0" width="143.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="569.5" y="830.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (36 samples, 3.93%)</title><rect x="578.1" y="803.0" width="46.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="581.1" y="814.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (21 samples, 2.29%)</title><rect x="588.4" y="787.0" width="27.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="591.4" y="798.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (20 samples, 2.18%)</title><rect x="589.7" y="771.0" width="25.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="592.7" y="782.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (9 samples, 0.98%)</title><rect x="598.7" y="755.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="601.7" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (9 samples, 0.98%)</title><rect x="598.7" y="739.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="601.7" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.98%)</title><rect x="598.7" y="723.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="601.7" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (8 samples, 0.87%)</title><rect x="598.7" y="707.0" width="10.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="601.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.22%)</title><rect x="600.0" y="691.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="603.0" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.22%)</title><rect x="600.0" y="675.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="603.0" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.22%)</title><rect x="600.0" y="659.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="603.0" y="670.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.11%)</title><rect x="601.3" y="643.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="604.3" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.55%)</title><rect x="602.6" y="691.0" width="6.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="605.6" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (4 samples, 0.44%)</title><rect x="603.9" y="675.0" width="5.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="606.9" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (3 samples, 0.33%)</title><rect x="603.9" y="659.0" width="3.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="606.9" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (3 samples, 0.33%)</title><rect x="603.9" y="643.0" width="3.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="606.9" y="654.0"></text>
</g>
<g>
<title>G1AllocRegion::retire(bool) (1 samples, 0.11%)</title><rect x="603.9" y="627.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="606.9" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.11%)</title><rect x="603.9" y="611.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.9" y="622.0"></text>
</g>
<g>
<title>G1CollectorPolicy::add_region_to_incremental_cset_lhs(HeapRegion*) (1 samples, 0.11%)</title><rect x="603.9" y="595.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="606.9" y="606.0"></text>
</g>
<g>
<title>OtherRegionsTable::occupied() const (1 samples, 0.11%)</title><rect x="603.9" y="579.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="606.9" y="590.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.11%)</title><rect x="605.2" y="627.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="608.2" y="638.0"></text>
</g>
<g>
<title>VM_Operation::evaluate_concurrently() const (1 samples, 0.11%)</title><rect x="606.4" y="627.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="609.4" y="638.0"></text>
</g>
<g>
<title>G1OffsetTableContigSpace::free() const (1 samples, 0.11%)</title><rect x="607.7" y="659.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="610.7" y="670.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray_nozero(BasicType, int, Thread*) (1 samples, 0.11%)</title><rect x="609.0" y="707.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="612.0" y="718.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 0.33%)</title><rect x="610.3" y="755.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="613.3" y="766.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="614.2" y="755.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="617.2" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (7 samples, 0.76%)</title><rect x="615.5" y="787.0" width="9.0" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="618.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 0.44%)</title><rect x="624.5" y="803.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="627.5" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.11%)</title><rect x="624.5" y="787.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="627.5" y="798.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.11%)</title><rect x="624.5" y="771.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="627.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 0.33%)</title><rect x="625.8" y="787.0" width="3.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="628.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.11%)</title><rect x="625.8" y="771.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="628.8" y="782.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.11%)</title><rect x="625.8" y="755.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="628.8" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="625.8" y="739.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="628.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="625.8" y="723.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="628.8" y="734.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.22%)</title><rect x="627.1" y="771.0" width="2.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="630.1" y="782.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (62 samples, 6.77%)</title><rect x="629.6" y="803.0" width="79.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="632.6" y="814.0">org/slf4j..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (61 samples, 6.66%)</title><rect x="630.9" y="787.0" width="78.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="633.9" y="798.0">ch/qos/lo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (16 samples, 1.75%)</title><rect x="630.9" y="771.0" width="20.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="633.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (10 samples, 1.09%)</title><rect x="638.6" y="755.0" width="12.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="641.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (10 samples, 1.09%)</title><rect x="638.6" y="739.0" width="12.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (10 samples, 1.09%)</title><rect x="638.6" y="723.0" width="12.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.22%)</title><rect x="651.5" y="771.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="654.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.22%)</title><rect x="651.5" y="755.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="654.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.22%)</title><rect x="651.5" y="739.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="654.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.11%)</title><rect x="652.8" y="723.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="655.8" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (43 samples, 4.69%)</title><rect x="654.1" y="771.0" width="55.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="657.1" y="782.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (35 samples, 3.82%)</title><rect x="664.4" y="755.0" width="45.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="667.4" y="766.0">java..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.11%)</title><rect x="667.0" y="739.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.0" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (6 samples, 0.66%)</title><rect x="668.3" y="739.0" width="7.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="671.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (6 samples, 0.66%)</title><rect x="668.3" y="723.0" width="7.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (26 samples, 2.84%)</title><rect x="676.0" y="739.0" width="33.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="679.0" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (5 samples, 0.55%)</title><rect x="690.2" y="723.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="693.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (8 samples, 0.87%)</title><rect x="696.6" y="723.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="699.6" y="734.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.22%)</title><rect x="706.9" y="723.0" width="2.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="709.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.98%)</title><rect x="709.5" y="819.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="712.5" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.98%)</title><rect x="709.5" y="803.0" width="11.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="712.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.98%)</title><rect x="709.5" y="787.0" width="11.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="712.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (9 samples, 0.98%)</title><rect x="709.5" y="771.0" width="11.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="712.5" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.66%)</title><rect x="713.4" y="755.0" width="7.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="716.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.55%)</title><rect x="714.7" y="739.0" width="6.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="717.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (44 samples, 4.80%)</title><rect x="721.1" y="835.0" width="56.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="724.1" y="846.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (43 samples, 4.69%)</title><rect x="722.4" y="819.0" width="55.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="725.4" y="830.0">com/l..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="725.0" y="803.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="728.0" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="725.0" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.0" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="725.0" y="771.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="728.0" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="725.0" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="728.0" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.11%)</title><rect x="725.0" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="728.0" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$274/740188340.process (25 samples, 2.73%)</title><rect x="726.2" y="803.0" width="32.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="729.2" y="814.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (24 samples, 2.62%)</title><rect x="727.5" y="787.0" width="30.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="730.5" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (22 samples, 2.40%)</title><rect x="727.5" y="771.0" width="28.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="730.5" y="782.0">co..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="745.6" y="755.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="748.6" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.11%)</title><rect x="745.6" y="739.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="748.6" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.11%)</title><rect x="745.6" y="723.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="748.6" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.11%)</title><rect x="745.6" y="707.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="748.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.11%)</title><rect x="745.6" y="691.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="748.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.11%)</title><rect x="745.6" y="675.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (7 samples, 0.76%)</title><rect x="746.9" y="755.0" width="9.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="749.9" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.55%)</title><rect x="749.4" y="739.0" width="6.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="752.4" y="750.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.55%)</title><rect x="749.4" y="723.0" width="6.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="752.4" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.22%)</title><rect x="755.9" y="771.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.9" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="757.2" y="755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="760.2" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.11%)</title><rect x="757.2" y="739.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.2" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="757.2" y="723.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (5 samples, 0.55%)</title><rect x="758.4" y="803.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="761.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.11%)</title><rect x="763.6" y="787.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="766.6" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.11%)</title><rect x="764.9" y="803.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="767.9" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.11%)</title><rect x="764.9" y="787.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.11%)</title><rect x="764.9" y="771.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="767.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.11%)</title><rect x="764.9" y="755.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="767.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.11%)</title><rect x="764.9" y="739.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="767.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.11%)</title><rect x="764.9" y="723.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (1 samples, 0.11%)</title><rect x="764.9" y="707.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.9" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.11%)</title><rect x="766.2" y="803.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="769.2" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.11%)</title><rect x="766.2" y="787.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.2" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/260840925.linkToTargetMethod (2 samples, 0.22%)</title><rect x="767.5" y="803.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="770.5" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1032986144.invokeStatic_L_L (2 samples, 0.22%)</title><rect x="767.5" y="787.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="770.5" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$361/1457572999.get$Lambda (2 samples, 0.22%)</title><rect x="767.5" y="771.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="770.5" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (4 samples, 0.44%)</title><rect x="770.0" y="803.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="773.0" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.subList (1 samples, 0.11%)</title><rect x="770.0" y="787.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="773.0" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="770.0" y="771.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="773.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="770.0" y="755.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="773.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="770.0" y="739.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="773.0" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.11%)</title><rect x="770.0" y="723.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="773.0" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.33%)</title><rect x="771.3" y="787.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="774.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.22%)</title><rect x="775.2" y="803.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="778.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.22%)</title><rect x="775.2" y="787.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.22%)</title><rect x="775.2" y="771.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.22%)</title><rect x="775.2" y="755.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="778.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.22%)</title><rect x="775.2" y="739.0" width="2.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="778.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.22%)</title><rect x="775.2" y="723.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.2" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$361/1457572999.accept (2 samples, 0.22%)</title><rect x="775.2" y="707.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.76%)</title><rect x="777.8" y="835.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.76%)</title><rect x="777.8" y="819.0" width="9.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.76%)</title><rect x="777.8" y="803.0" width="9.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.22%)</title><rect x="777.8" y="787.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.22%)</title><rect x="777.8" y="771.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="780.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniCompletion.claim (2 samples, 0.22%)</title><rect x="777.8" y="755.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$363/1523495789.accept (1 samples, 0.11%)</title><rect x="779.1" y="739.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="782.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (5 samples, 0.55%)</title><rect x="780.3" y="787.0" width="6.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="783.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$363/1523495789.accept (5 samples, 0.55%)</title><rect x="780.3" y="771.0" width="6.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="783.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (5 samples, 0.55%)</title><rect x="780.3" y="755.0" width="6.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="783.3" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.55%)</title><rect x="780.3" y="739.0" width="6.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.3" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.55%)</title><rect x="780.3" y="723.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="783.3" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.55%)</title><rect x="780.3" y="707.0" width="6.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="783.3" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.55%)</title><rect x="780.3" y="691.0" width="6.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="783.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.44%)</title><rect x="781.6" y="675.0" width="5.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="784.6" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.66%)</title><rect x="786.8" y="851.0" width="7.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="789.8" y="862.0"></text>
</g>
<g>
<title>[vdso] (6 samples, 0.66%)</title><rect x="786.8" y="835.0" width="7.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="789.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.22%)</title><rect x="794.5" y="883.0" width="2.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="797.5" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.44%)</title><rect x="797.1" y="915.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="800.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.44%)</title><rect x="797.1" y="899.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="800.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.44%)</title><rect x="797.1" y="883.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.1" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (1 samples, 0.11%)</title><rect x="801.0" y="867.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (204 samples, 22.27%)</title><rect x="802.2" y="915.0" width="262.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="805.2" y="926.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (204 samples, 22.27%)</title><rect x="802.2" y="899.0" width="262.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="805.2" y="910.0">java/util/concurrent/LinkedBlocking..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (189 samples, 20.63%)</title><rect x="821.6" y="883.0" width="243.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="824.6" y="894.0">java/util/concurrent/locks/Abstr..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (21 samples, 2.29%)</title><rect x="838.3" y="867.0" width="27.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="841.3" y="878.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (2 samples, 0.22%)</title><rect x="865.4" y="867.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.22%)</title><rect x="865.4" y="851.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.4" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.22%)</title><rect x="865.4" y="835.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.22%)</title><rect x="865.4" y="819.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="868.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.22%)</title><rect x="865.4" y="803.0" width="2.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.4" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (153 samples, 16.70%)</title><rect x="867.9" y="867.0" width="197.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.9" y="878.0">java/util/concurrent/locks..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (137 samples, 14.96%)</title><rect x="888.6" y="851.0" width="176.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="891.6" y="862.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.11%)</title><rect x="895.0" y="835.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="898.0" y="846.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.11%)</title><rect x="896.3" y="835.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="899.3" y="846.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (1 samples, 0.11%)</title><rect x="897.6" y="835.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="900.6" y="846.0"></text>
</g>
<g>
<title>Unsafe_Park (126 samples, 13.76%)</title><rect x="898.9" y="835.0" width="162.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="901.9" y="846.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.22%)</title><rect x="901.4" y="819.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="904.4" y="830.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (1 samples, 0.11%)</title><rect x="904.0" y="819.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="907.0" y="830.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.11%)</title><rect x="905.3" y="819.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="908.3" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (8 samples, 0.87%)</title><rect x="906.6" y="819.0" width="10.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="909.6" y="830.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.22%)</title><rect x="910.5" y="803.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="913.5" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="910.5" y="787.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="913.5" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.11%)</title><rect x="911.7" y="787.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="914.7" y="798.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="913.0" y="803.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="916.0" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.22%)</title><rect x="914.3" y="803.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="917.3" y="814.0"></text>
</g>
<g>
<title>__lll_lock_wait (5 samples, 0.55%)</title><rect x="916.9" y="819.0" width="6.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="919.9" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (43 samples, 4.69%)</title><rect x="923.3" y="819.0" width="55.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="926.3" y="830.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (56 samples, 6.11%)</title><rect x="978.7" y="819.0" width="72.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="981.7" y="830.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.44%)</title><rect x="1050.9" y="819.0" width="5.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1053.9" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.22%)</title><rect x="1056.0" y="819.0" width="2.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1059.0" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.11%)</title><rect x="1058.6" y="819.0" width="1.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1061.6" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.11%)</title><rect x="1059.9" y="819.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1062.9" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (3 samples, 0.33%)</title><rect x="1061.2" y="835.0" width="3.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1064.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.11%)</title><rect x="1065.0" y="963.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1068.0" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.11%)</title><rect x="1065.0" y="947.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.0" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.11%)</title><rect x="1065.0" y="931.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1068.0" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.11%)</title><rect x="1065.0" y="915.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1068.0" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.11%)</title><rect x="1065.0" y="899.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1068.0" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.11%)</title><rect x="1065.0" y="883.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1068.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.11%)</title><rect x="1065.0" y="867.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1068.0" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.11%)</title><rect x="1065.0" y="851.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1068.0" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.11%)</title><rect x="1065.0" y="835.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.0" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.11%)</title><rect x="1065.0" y="819.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1068.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.topicIds (1 samples, 0.11%)</title><rect x="1065.0" y="803.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1068.0" y="814.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.11%)</title><rect x="1065.0" y="787.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1068.0" y="798.0"></text>
</g>
<g>
<title>start_thread (96 samples, 10.48%)</title><rect x="1066.3" y="963.0" width="123.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1069.3" y="974.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (96 samples, 10.48%)</title><rect x="1066.3" y="947.0" width="123.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1069.3" y="958.0">java_start(Thre..</text>
</g>
<g>
<title>GangWorker::loop() (21 samples, 2.29%)</title><rect x="1066.3" y="931.0" width="27.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1069.3" y="942.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (21 samples, 2.29%)</title><rect x="1066.3" y="915.0" width="27.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1069.3" y="926.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (5 samples, 0.55%)</title><rect x="1066.3" y="899.0" width="6.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1069.3" y="910.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.55%)</title><rect x="1066.3" y="883.0" width="6.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1069.3" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (4 samples, 0.44%)</title><rect x="1072.8" y="899.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1075.8" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.22%)</title><rect x="1072.8" y="883.0" width="2.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1075.8" y="894.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (2 samples, 0.22%)</title><rect x="1072.8" y="867.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1075.8" y="878.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, KlassClosure*, bool) (2 samples, 0.22%)</title><rect x="1072.8" y="851.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.8" y="862.0"></text>
</g>
<g>
<title>G1KlassScanClosure::do_klass(Klass*) (2 samples, 0.22%)</title><rect x="1072.8" y="835.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1075.8" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.22%)</title><rect x="1075.3" y="883.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1078.3" y="894.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (2 samples, 0.22%)</title><rect x="1075.3" y="867.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1078.3" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (12 samples, 1.31%)</title><rect x="1077.9" y="899.0" width="15.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1080.9" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (12 samples, 1.31%)</title><rect x="1077.9" y="883.0" width="15.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1080.9" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (12 samples, 1.31%)</title><rect x="1077.9" y="867.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1080.9" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (12 samples, 1.31%)</title><rect x="1077.9" y="851.0" width="15.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1080.9" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (12 samples, 1.31%)</title><rect x="1077.9" y="835.0" width="15.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1080.9" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (12 samples, 1.31%)</title><rect x="1077.9" y="819.0" width="15.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1080.9" y="830.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (8 samples, 0.87%)</title><rect x="1081.8" y="803.0" width="10.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1084.8" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (3 samples, 0.33%)</title><rect x="1086.9" y="787.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.9" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1089.5" y="771.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1092.5" y="782.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.11%)</title><rect x="1090.8" y="787.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.8" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_nv(oopDesc*, FilterOutOfRegionClosure*) (1 samples, 0.11%)</title><rect x="1092.1" y="803.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1095.1" y="814.0"></text>
</g>
<g>
<title>JavaThread::run() (74 samples, 8.08%)</title><rect x="1093.4" y="931.0" width="95.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.4" y="942.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (74 samples, 8.08%)</title><rect x="1093.4" y="915.0" width="95.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.4" y="926.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (74 samples, 8.08%)</title><rect x="1093.4" y="899.0" width="95.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1096.4" y="910.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (74 samples, 8.08%)</title><rect x="1093.4" y="883.0" width="95.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1096.4" y="894.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (74 samples, 8.08%)</title><rect x="1093.4" y="867.0" width="95.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1096.4" y="878.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (74 samples, 8.08%)</title><rect x="1093.4" y="851.0" width="95.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.4" y="862.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (34 samples, 3.71%)</title><rect x="1093.4" y="835.0" width="43.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1096.4" y="846.0">Comp..</text>
</g>
<g>
<title>Compile::Output() (2 samples, 0.22%)</title><rect x="1093.4" y="819.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.4" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.11%)</title><rect x="1093.4" y="803.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1096.4" y="814.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.11%)</title><rect x="1094.7" y="803.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1097.7" y="814.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.11%)</title><rect x="1094.7" y="787.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1097.7" y="798.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.11%)</title><rect x="1094.7" y="771.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1097.7" y="782.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.11%)</title><rect x="1094.7" y="755.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.7" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.66%)</title><rect x="1096.0" y="819.0" width="7.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1099.0" y="830.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.11%)</title><rect x="1096.0" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.0" y="814.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.55%)</title><rect x="1097.2" y="803.0" width="6.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.2" y="814.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.11%)</title><rect x="1099.8" y="787.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1102.8" y="798.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.22%)</title><rect x="1101.1" y="787.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.1" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.22%)</title><rect x="1101.1" y="771.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1104.1" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.11%)</title><rect x="1101.1" y="755.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.1" y="766.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.11%)</title><rect x="1102.4" y="755.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.4" y="766.0"></text>
</g>
<g>
<title>TypeOopPtr::get_con() const (1 samples, 0.11%)</title><rect x="1102.4" y="739.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.11%)</title><rect x="1103.7" y="819.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1106.7" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.11%)</title><rect x="1103.7" y="803.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.7" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1103.7" y="787.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1106.7" y="798.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.11%)</title><rect x="1103.7" y="771.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1106.7" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (25 samples, 2.73%)</title><rect x="1105.0" y="819.0" width="32.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1108.0" y="830.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.11%)</title><rect x="1105.0" y="803.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.0" y="814.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.11%)</title><rect x="1106.3" y="803.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.3" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (4 samples, 0.44%)</title><rect x="1107.6" y="803.0" width="5.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1110.6" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.33%)</title><rect x="1107.6" y="787.0" width="3.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1110.6" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.11%)</title><rect x="1111.4" y="787.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.4" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1111.4" y="771.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1114.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.11%)</title><rect x="1112.7" y="803.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (4 samples, 0.44%)</title><rect x="1114.0" y="803.0" width="5.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1117.0" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (3 samples, 0.33%)</title><rect x="1119.1" y="803.0" width="3.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1122.1" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.11%)</title><rect x="1120.4" y="787.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1123.4" y="798.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.11%)</title><rect x="1121.7" y="787.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1124.7" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 0.33%)</title><rect x="1123.0" y="803.0" width="3.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1126.0" y="814.0"></text>
</g>
<g>
<title>MachNode::in_RegMask(unsigned int) const (1 samples, 0.11%)</title><rect x="1123.0" y="787.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.0" y="798.0"></text>
</g>
<g>
<title>MachNode::mach_constant_base_node_input() const (1 samples, 0.11%)</title><rect x="1124.3" y="787.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1127.3" y="798.0"></text>
</g>
<g>
<title>indirectOper::in_RegMask(int) const (1 samples, 0.11%)</title><rect x="1125.6" y="787.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1128.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.22%)</title><rect x="1126.9" y="803.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.9" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.22%)</title><rect x="1126.9" y="787.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1129.9" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.11%)</title><rect x="1129.5" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.5" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.11%)</title><rect x="1129.5" y="787.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.11%)</title><rect x="1129.5" y="771.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.5" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.11%)</title><rect x="1130.7" y="803.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1133.7" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1130.7" y="787.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.7" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.11%)</title><rect x="1132.0" y="803.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.0" y="814.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.22%)</title><rect x="1133.3" y="803.0" width="2.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1136.3" y="814.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1134.6" y="787.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.6" y="798.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.11%)</title><rect x="1135.9" y="803.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1138.9" y="814.0"></text>
</g>
<g>
<title>Compile::Optimize() (32 samples, 3.49%)</title><rect x="1137.2" y="835.0" width="41.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.2" y="846.0">Com..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.11%)</title><rect x="1137.2" y="819.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.2" y="830.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1137.2" y="803.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.2" y="814.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) (1 samples, 0.11%)</title><rect x="1137.2" y="787.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1140.2" y="798.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.11%)</title><rect x="1138.5" y="819.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.5" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1138.5" y="803.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.5" y="814.0"></text>
</g>
<g>
<title>LoadBNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1138.5" y="787.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.11%)</title><rect x="1139.8" y="819.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.11%)</title><rect x="1139.8" y="803.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ideal_graph(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;Node*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1139.8" y="787.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::optimize_ptr_compare(Node*) (1 samples, 0.11%)</title><rect x="1139.8" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="782.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.11%)</title><rect x="1141.0" y="819.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="830.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (22 samples, 2.40%)</title><rect x="1142.3" y="819.0" width="28.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.3" y="830.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1142.3" y="803.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (16 samples, 1.75%)</title><rect x="1143.6" y="803.0" width="20.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (14 samples, 1.53%)</title><rect x="1146.2" y="787.0" width="18.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.11%)</title><rect x="1148.8" y="771.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.8" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (11 samples, 1.20%)</title><rect x="1150.1" y="771.0" width="14.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (3 samples, 0.33%)</title><rect x="1160.4" y="755.0" width="3.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1163.4" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.11%)</title><rect x="1164.2" y="803.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.11%)</title><rect x="1164.2" y="787.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.33%)</title><rect x="1165.5" y="803.0" width="3.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1168.5" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.11%)</title><rect x="1168.1" y="787.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_region(Node*, Node*) (1 samples, 0.11%)</title><rect x="1168.1" y="771.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1171.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::set_idom(Node*, Node*, unsigned int) (1 samples, 0.11%)</title><rect x="1168.1" y="755.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.1" y="766.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.11%)</title><rect x="1168.1" y="739.0" width="1.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1171.1" y="750.0"></text>
</g>
<g>
<title>ProjNode::is_CFG() const (1 samples, 0.11%)</title><rect x="1169.4" y="803.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.4" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.55%)</title><rect x="1170.7" y="819.0" width="6.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.55%)</title><rect x="1170.7" y="803.0" width="6.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.7" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1170.7" y="787.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.7" y="798.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.11%)</title><rect x="1170.7" y="771.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1170.7" y="755.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1173.7" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1170.7" y="739.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.7" y="750.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1172.0" y="787.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="798.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1172.0" y="771.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.0" y="782.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1173.3" y="787.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1176.3" y="798.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.22%)</title><rect x="1174.5" y="787.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (2 samples, 0.22%)</title><rect x="1174.5" y="771.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1177.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="755.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="739.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="723.0" width="2.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1177.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="707.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="691.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="675.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1177.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="659.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1177.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.22%)</title><rect x="1174.5" y="643.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1177.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1174.5" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1174.5" y="611.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1177.5" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1174.5" y="595.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.5" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1174.5" y="579.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.5" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.11%)</title><rect x="1175.8" y="627.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1178.8" y="638.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1175.8" y="611.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.8" y="622.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.11%)</title><rect x="1177.1" y="819.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.1" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1177.1" y="803.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1180.1" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1177.1" y="787.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="798.0"></text>
</g>
<g>
<title>AddNode::Value(PhaseTransform*) const (1 samples, 0.11%)</title><rect x="1177.1" y="771.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.1" y="782.0"></text>
</g>
<g>
<title>AddNode::add_of_identity(Type const*, Type const*) const (1 samples, 0.11%)</title><rect x="1177.1" y="755.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.1" y="766.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1177.1" y="739.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.1" y="750.0"></text>
</g>
<g>
<title>TypeLong::xmeet(Type const*) const (1 samples, 0.11%)</title><rect x="1177.1" y="723.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="734.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1177.1" y="707.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.1" y="718.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1177.1" y="691.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.66%)</title><rect x="1178.4" y="835.0" width="7.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.66%)</title><rect x="1178.4" y="819.0" width="7.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.55%)</title><rect x="1178.4" y="803.0" width="6.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.55%)</title><rect x="1178.4" y="787.0" width="6.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.55%)</title><rect x="1178.4" y="771.0" width="6.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.55%)</title><rect x="1178.4" y="755.0" width="6.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.33%)</title><rect x="1178.4" y="739.0" width="3.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.33%)</title><rect x="1178.4" y="723.0" width="3.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.33%)</title><rect x="1178.4" y="707.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.33%)</title><rect x="1178.4" y="691.0" width="3.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.33%)</title><rect x="1178.4" y="675.0" width="3.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.33%)</title><rect x="1178.4" y="659.0" width="3.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.4" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1178.4" y="643.0" width="2.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1178.4" y="627.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1178.4" y="611.0" width="2.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1178.4" y="595.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1178.4" y="579.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.4" y="563.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.4" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.4" y="547.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.4" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.4" y="531.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.4" y="515.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.4" y="499.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.4" y="483.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.4" y="467.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.4" y="451.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1181.4" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.4" y="435.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.4" y="419.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1181.4" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.4" y="403.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.4" y="387.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.4" y="371.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.4" y="355.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.4" y="339.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.4" y="323.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.4" y="307.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.4" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.4" y="291.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.4" y="275.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.4" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.4" y="259.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.4" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.4" y="243.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.4" y="227.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.4" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.4" y="211.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.4" y="195.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.4" y="179.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.4" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.4" y="163.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.4" y="147.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1178.4" y="131.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.4" y="142.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1178.4" y="115.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.4" y="126.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1178.4" y="99.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.4" y="110.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1178.4" y="83.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="94.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1178.4" y="67.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.4" y="78.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1178.4" y="51.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1181.4" y="62.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.11%)</title><rect x="1178.4" y="35.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.4" y="46.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.11%)</title><rect x="1179.7" y="563.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.11%)</title><rect x="1179.7" y="547.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="558.0"></text>
</g>
<g>
<title>GraphKit::store_oop(Node*, Node*, Node*, TypePtr const*, Node*, TypeOopPtr const*, BasicType, bool, MemNode::MemOrd) (1 samples, 0.11%)</title><rect x="1179.7" y="531.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.7" y="542.0"></text>
</g>
<g>
<title>GraphKit::g1_write_barrier_pre(bool, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) (1 samples, 0.11%)</title><rect x="1179.7" y="515.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="526.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.11%)</title><rect x="1179.7" y="499.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.7" y="510.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1179.7" y="483.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.7" y="494.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1179.7" y="467.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.0" y="643.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.0" y="627.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.0" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1181.0" y="611.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1181.0" y="595.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.0" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1181.0" y="579.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.0" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1181.0" y="563.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1181.0" y="547.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.0" y="531.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1181.0" y="515.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.0" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1181.0" y="499.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.0" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1181.0" y="483.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.0" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1181.0" y="467.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.0" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1181.0" y="451.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.0" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1181.0" y="435.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.0" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1181.0" y="419.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="430.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.11%)</title><rect x="1181.0" y="403.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.0" y="414.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.11%)</title><rect x="1181.0" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.0" y="398.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1181.0" y="371.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.0" y="382.0"></text>
</g>
<g>
<title>ProjNode::Opcode() const (1 samples, 0.11%)</title><rect x="1181.0" y="355.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.0" y="366.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.3" y="739.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.3" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.3" y="723.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.3" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1182.3" y="707.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1182.3" y="691.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1182.3" y="675.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1182.3" y="659.0" width="2.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.3" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.22%)</title><rect x="1182.3" y="643.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.22%)</title><rect x="1182.3" y="627.0" width="2.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.3" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.22%)</title><rect x="1182.3" y="611.0" width="2.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.3" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.22%)</title><rect x="1182.3" y="595.0" width="2.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.3" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.22%)</title><rect x="1182.3" y="579.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.22%)</title><rect x="1182.3" y="563.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.3" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.22%)</title><rect x="1182.3" y="547.0" width="2.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.3" y="558.0"></text>
</g>
<g>
<title>GraphKit::record_profiled_arguments_for_speculation(ciMethod*, Bytecodes::Code) (1 samples, 0.11%)</title><rect x="1182.3" y="531.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.3" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.6" y="531.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.6" y="515.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.6" y="499.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.6" y="483.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.6" y="467.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.6" y="451.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.6" y="435.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.6" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.6" y="419.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.6" y="403.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.6" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.6" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.6" y="355.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.6" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.6" y="323.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.6" y="307.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.6" y="291.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.6" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.6" y="275.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.6" y="259.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.6" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.6" y="243.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.6" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.6" y="227.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.6" y="211.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.6" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.6" y="195.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.6" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.6" y="179.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="190.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.11%)</title><rect x="1183.6" y="163.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.6" y="174.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.11%)</title><rect x="1183.6" y="147.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.6" y="158.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.11%)</title><rect x="1183.6" y="131.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.6" y="142.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1183.6" y="115.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.6" y="126.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1183.6" y="99.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.6" y="110.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1183.6" y="83.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.6" y="94.0"></text>
</g>
<g>
<title>TypeInt::eq(Type const*) const (1 samples, 0.11%)</title><rect x="1183.6" y="67.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.6" y="78.0"></text>
</g>
<g>
<title>ciMethod::get_osr_flow_analysis(int) (1 samples, 0.11%)</title><rect x="1184.8" y="803.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="814.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1184.8" y="787.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1184.8" y="771.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1184.8" y="755.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.8" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1184.8" y="739.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::Block::successors(ciBytecodeStream*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1184.8" y="723.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.8" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::get_block_for(int, ciTypeFlow::JsrSet*, ciTypeFlow::CreateOption) (1 samples, 0.11%)</title><rect x="1184.8" y="707.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>GrowableArray&lt;ciTypeFlow::Block*&gt;::GrowableArray(Arena*, int, int, ciTypeFlow::Block* const&amp;) (1 samples, 0.11%)</title><rect x="1184.8" y="691.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="702.0"></text>
</g>
<g>
<title>GenericGrowableArray::raw_allocate(int) (1 samples, 0.11%)</title><rect x="1184.8" y="675.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.8" y="686.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.22%)</title><rect x="1186.1" y="835.0" width="2.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.1" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1187.4" y="819.0" width="1.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1190.4" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.11%)</title><rect x="1188.7" y="931.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.11%)</title><rect x="1188.7" y="915.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.7" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.11%)</title><rect x="1188.7" y="899.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1191.7" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.11%)</title><rect x="1188.7" y="883.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="894.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.11%)</title><rect x="1188.7" y="867.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.11%)</title><rect x="1188.7" y="851.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.7" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(EvacuationInfo&amp;) (1 samples, 0.11%)</title><rect x="1188.7" y="835.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.7" y="846.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.11%)</title><rect x="1188.7" y="819.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.7" y="830.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (1 samples, 0.11%)</title><rect x="1188.7" y="803.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.7" y="814.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (1 samples, 0.11%)</title><rect x="1188.7" y="787.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.7" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.11%)</title><rect x="1188.7" y="771.0" width="1.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1191.7" y="782.0"></text>
</g>
</g>
</svg>
