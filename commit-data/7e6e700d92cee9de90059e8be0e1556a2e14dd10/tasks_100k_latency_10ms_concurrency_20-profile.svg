<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1606" onload="init(evt)" viewBox="0 0 1200 1606" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1589"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1589"> </text>
<g id="frames">
<g>
<title>all (192 samples, 100.00%)</title><rect x="10.0" y="1555.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1566.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.52%)</title><rect x="10.0" y="1539.0" width="6.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (13 samples, 6.77%)</title><rect x="16.1" y="1539.0" width="79.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1550.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (13 samples, 6.77%)</title><rect x="16.1" y="1523.0" width="79.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1534.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (13 samples, 6.77%)</title><rect x="16.1" y="1507.0" width="79.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.1" y="1518.0">com/linec..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 1.04%)</title><rect x="16.1" y="1491.0" width="12.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.1" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 1.04%)</title><rect x="16.1" y="1475.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.1" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 1.04%)</title><rect x="16.1" y="1459.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.1" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/1583415125.accept (2 samples, 1.04%)</title><rect x="16.1" y="1443.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.1" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 1.04%)</title><rect x="16.1" y="1427.0" width="12.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 1.04%)</title><rect x="16.1" y="1411.0" width="12.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.1" y="1422.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.52%)</title><rect x="22.3" y="1395.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="25.3" y="1406.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/CompositeTimer.record (1 samples, 0.52%)</title><rect x="28.4" y="1491.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.4" y="1502.0"></text>
</g>
<g>
<title>io/micrometer/core/instrument/composite/AbstractCompositeMeter.forEachChild (1 samples, 0.52%)</title><rect x="28.4" y="1475.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.4" y="1486.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (3 samples, 1.56%)</title><rect x="34.6" y="1491.0" width="18.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="37.6" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1812257353.accept (3 samples, 1.56%)</title><rect x="34.6" y="1475.0" width="18.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="37.6" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (3 samples, 1.56%)</title><rect x="34.6" y="1459.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="37.6" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 1.04%)</title><rect x="34.6" y="1443.0" width="12.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="37.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 1.04%)</title><rect x="34.6" y="1427.0" width="12.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="37.6" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.04%)</title><rect x="34.6" y="1411.0" width="12.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="37.6" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.04%)</title><rect x="34.6" y="1395.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="37.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="46.9" y="1443.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="49.9" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.52%)</title><rect x="46.9" y="1427.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="49.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.65%)</title><rect x="53.0" y="1491.0" width="43.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.0" y="1502.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (7 samples, 3.65%)</title><rect x="53.0" y="1475.0" width="43.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.0" y="1486.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (5 samples, 2.60%)</title><rect x="59.2" y="1459.0" width="30.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.2" y="1470.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.04%)</title><rect x="59.2" y="1443.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.2" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (2 samples, 1.04%)</title><rect x="59.2" y="1427.0" width="12.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.2" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 1.04%)</title><rect x="59.2" y="1411.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="62.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 1.04%)</title><rect x="59.2" y="1395.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.2" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.52%)</title><rect x="59.2" y="1379.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.2" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.52%)</title><rect x="59.2" y="1363.0" width="6.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="62.2" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.52%)</title><rect x="65.3" y="1379.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.3" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.52%)</title><rect x="65.3" y="1363.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.3" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.52%)</title><rect x="65.3" y="1347.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="68.3" y="1358.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.52%)</title><rect x="65.3" y="1331.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="68.3" y="1342.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.52%)</title><rect x="65.3" y="1315.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="68.3" y="1326.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.clearInterrupt (1 samples, 0.52%)</title><rect x="65.3" y="1299.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="68.3" y="1310.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.drain (1 samples, 0.52%)</title><rect x="65.3" y="1283.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="68.3" y="1294.0"></text>
</g>
<g>
<title>__read (1 samples, 0.52%)</title><rect x="65.3" y="1267.0" width="6.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="68.3" y="1278.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (3 samples, 1.56%)</title><rect x="71.5" y="1443.0" width="18.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="74.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.52%)</title><rect x="71.5" y="1427.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="74.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (2 samples, 1.04%)</title><rect x="77.6" y="1427.0" width="12.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="80.6" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 1.04%)</title><rect x="77.6" y="1411.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="80.6" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.04%)</title><rect x="77.6" y="1395.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.6" y="1406.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.52%)</title><rect x="77.6" y="1379.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="80.6" y="1390.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.52%)</title><rect x="77.6" y="1363.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="80.6" y="1374.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.52%)</title><rect x="77.6" y="1347.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.6" y="1358.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.52%)</title><rect x="77.6" y="1331.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.6" y="1342.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.52%)</title><rect x="77.6" y="1315.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="80.6" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (1 samples, 0.52%)</title><rect x="83.8" y="1379.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.52%)</title><rect x="89.9" y="1459.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.9" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.52%)</title><rect x="89.9" y="1443.0" width="6.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.9" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.52%)</title><rect x="89.9" y="1427.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.9" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="89.9" y="1411.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="92.9" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.52%)</title><rect x="89.9" y="1395.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="92.9" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.52%)</title><rect x="89.9" y="1379.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.9" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.52%)</title><rect x="89.9" y="1363.0" width="6.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="92.9" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.52%)</title><rect x="89.9" y="1347.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="92.9" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/FetchRequestData.write (1 samples, 0.52%)</title><rect x="89.9" y="1331.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.9" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$482/107448940.accept (1 samples, 0.52%)</title><rect x="96.0" y="1539.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.0" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (1 samples, 0.52%)</title><rect x="96.0" y="1523.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="99.0" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.52%)</title><rect x="96.0" y="1507.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="99.0" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.52%)</title><rect x="96.0" y="1491.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="99.0" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="96.0" y="1475.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.0" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="96.0" y="1459.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="99.0" y="1470.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.52%)</title><rect x="96.0" y="1443.0" width="6.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="99.0" y="1454.0"></text>
</g>
<g>
<title>java/lang/Thread.run (90 samples, 46.88%)</title><rect x="102.2" y="1539.0" width="553.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="105.2" y="1550.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (90 samples, 46.88%)</title><rect x="102.2" y="1523.0" width="553.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.2" y="1534.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (90 samples, 46.88%)</title><rect x="102.2" y="1507.0" width="553.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="105.2" y="1518.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$469/435138069.run (87 samples, 45.31%)</title><rect x="102.2" y="1491.0" width="534.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="105.2" y="1502.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$469/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (87 samples, 45.31%)</title><rect x="102.2" y="1475.0" width="534.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="105.2" y="1486.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTa..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (87 samples, 45.31%)</title><rect x="102.2" y="1459.0" width="534.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.2" y="1470.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (87 samples, 45.31%)</title><rect x="102.2" y="1443.0" width="534.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.2" y="1454.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleTh..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.52%)</title><rect x="108.3" y="1427.0" width="6.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="111.3" y="1438.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.52%)</title><rect x="108.3" y="1411.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="111.3" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.52%)</title><rect x="108.3" y="1395.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.3" y="1406.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.52%)</title><rect x="108.3" y="1379.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="111.3" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (5 samples, 2.60%)</title><rect x="114.5" y="1427.0" width="30.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="117.5" y="1438.0">co..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.60%)</title><rect x="114.5" y="1411.0" width="30.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="117.5" y="1422.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (5 samples, 2.60%)</title><rect x="114.5" y="1395.0" width="30.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.5" y="1406.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.56%)</title><rect x="126.8" y="1379.0" width="18.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="129.8" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.52%)</title><rect x="126.8" y="1363.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="129.8" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.04%)</title><rect x="132.9" y="1363.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.9" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$482/107448940.accept (2 samples, 1.04%)</title><rect x="132.9" y="1347.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="135.9" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (2 samples, 1.04%)</title><rect x="132.9" y="1331.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="135.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 1.04%)</title><rect x="132.9" y="1315.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 1.04%)</title><rect x="132.9" y="1299.0" width="12.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="135.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="139.1" y="1283.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.1" y="1294.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.52%)</title><rect x="139.1" y="1267.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.1" y="1278.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="139.1" y="1251.0" width="6.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="142.1" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (19 samples, 9.90%)</title><rect x="145.2" y="1427.0" width="116.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="148.2" y="1438.0">com/linecorp/d..</text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.04%)</title><rect x="145.2" y="1411.0" width="12.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="148.2" y="1422.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.04%)</title><rect x="145.2" y="1395.0" width="12.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="148.2" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$138/1408695561.extract (17 samples, 8.85%)</title><rect x="157.5" y="1411.0" width="104.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="160.5" y="1422.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (17 samples, 8.85%)</title><rect x="157.5" y="1395.0" width="104.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1406.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 8.85%)</title><rect x="157.5" y="1379.0" width="104.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.5" y="1390.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (17 samples, 8.85%)</title><rect x="157.5" y="1363.0" width="104.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.5" y="1374.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (17 samples, 8.85%)</title><rect x="157.5" y="1347.0" width="104.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="160.5" y="1358.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (6 samples, 3.12%)</title><rect x="157.5" y="1331.0" width="36.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="1342.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.52%)</title><rect x="169.8" y="1315.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.8" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.52%)</title><rect x="169.8" y="1299.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="172.8" y="1310.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.52%)</title><rect x="169.8" y="1283.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="172.8" y="1294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.52%)</title><rect x="169.8" y="1267.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="172.8" y="1278.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.52%)</title><rect x="169.8" y="1251.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="172.8" y="1262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.52%)</title><rect x="169.8" y="1235.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="172.8" y="1246.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.52%)</title><rect x="169.8" y="1219.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="172.8" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.56%)</title><rect x="175.9" y="1315.0" width="18.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="178.9" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.56%)</title><rect x="175.9" y="1299.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.9" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 1.04%)</title><rect x="175.9" y="1283.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="178.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (2 samples, 1.04%)</title><rect x="175.9" y="1267.0" width="12.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="178.9" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (1 samples, 0.52%)</title><rect x="188.2" y="1283.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="191.2" y="1294.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.52%)</title><rect x="188.2" y="1267.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="191.2" y="1278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.52%)</title><rect x="188.2" y="1251.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="191.2" y="1262.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.52%)</title><rect x="188.2" y="1235.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="191.2" y="1246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.52%)</title><rect x="188.2" y="1219.0" width="6.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="191.2" y="1230.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.52%)</title><rect x="188.2" y="1203.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="191.2" y="1214.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.52%)</title><rect x="188.2" y="1187.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="191.2" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 5.73%)</title><rect x="194.4" y="1331.0" width="67.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="197.4" y="1342.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.52%)</title><rect x="194.4" y="1315.0" width="6.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="197.4" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (10 samples, 5.21%)</title><rect x="200.5" y="1315.0" width="61.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.5" y="1326.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (10 samples, 5.21%)</title><rect x="200.5" y="1299.0" width="61.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="203.5" y="1310.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (5 samples, 2.60%)</title><rect x="206.7" y="1283.0" width="30.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="209.7" y="1294.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.52%)</title><rect x="206.7" y="1267.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="209.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.52%)</title><rect x="206.7" y="1251.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="209.7" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.52%)</title><rect x="206.7" y="1235.0" width="6.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="209.7" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (1 samples, 0.52%)</title><rect x="206.7" y="1219.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="209.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.52%)</title><rect x="206.7" y="1203.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="209.7" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.56%)</title><rect x="212.8" y="1267.0" width="18.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="215.8" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (2 samples, 1.04%)</title><rect x="219.0" y="1251.0" width="12.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (2 samples, 1.04%)</title><rect x="219.0" y="1235.0" width="12.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="222.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (2 samples, 1.04%)</title><rect x="219.0" y="1219.0" width="12.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (2 samples, 1.04%)</title><rect x="219.0" y="1203.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.52%)</title><rect x="231.2" y="1267.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.2" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.52%)</title><rect x="231.2" y="1251.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="234.2" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.08%)</title><rect x="237.4" y="1283.0" width="24.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.4" y="1294.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.08%)</title><rect x="237.4" y="1267.0" width="24.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="240.4" y="1278.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.08%)</title><rect x="237.4" y="1251.0" width="24.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="240.4" y="1262.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.52%)</title><rect x="237.4" y="1235.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="240.4" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.52%)</title><rect x="237.4" y="1219.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.4" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.52%)</title><rect x="237.4" y="1203.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.4" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.52%)</title><rect x="243.5" y="1235.0" width="6.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="246.5" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.52%)</title><rect x="243.5" y="1219.0" width="6.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="246.5" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.52%)</title><rect x="243.5" y="1203.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="246.5" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.52%)</title><rect x="243.5" y="1187.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="246.5" y="1198.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.52%)</title><rect x="243.5" y="1171.0" width="6.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="246.5" y="1182.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.52%)</title><rect x="243.5" y="1155.0" width="6.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.5" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (1 samples, 0.52%)</title><rect x="243.5" y="1139.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="246.5" y="1150.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 1.04%)</title><rect x="249.7" y="1235.0" width="12.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="252.7" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 1.04%)</title><rect x="249.7" y="1219.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="252.7" y="1230.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="255.8" y="1203.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="258.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (61 samples, 31.77%)</title><rect x="262.0" y="1427.0" width="374.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="265.0" y="1438.0">com/linecorp/decaton/processor/runtime/internal/Pro..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.52%)</title><rect x="262.0" y="1411.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="265.0" y="1422.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.52%)</title><rect x="262.0" y="1395.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="265.0" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (4 samples, 2.08%)</title><rect x="268.1" y="1411.0" width="24.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="271.1" y="1422.0">c..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.08%)</title><rect x="268.1" y="1395.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.1" y="1406.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (4 samples, 2.08%)</title><rect x="268.1" y="1379.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="271.1" y="1390.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="274.3" y="1363.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="277.3" y="1374.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.52%)</title><rect x="274.3" y="1347.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.3" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.52%)</title><rect x="274.3" y="1331.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.3" y="1342.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (2 samples, 1.04%)</title><rect x="280.4" y="1363.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.4" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (2 samples, 1.04%)</title><rect x="280.4" y="1347.0" width="12.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.4" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 1.04%)</title><rect x="280.4" y="1331.0" width="12.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="283.4" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 1.56%)</title><rect x="292.7" y="1411.0" width="18.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="295.7" y="1422.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.04%)</title><rect x="298.9" y="1395.0" width="12.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="301.9" y="1406.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.04%)</title><rect x="298.9" y="1379.0" width="12.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="301.9" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (16 samples, 8.33%)</title><rect x="311.1" y="1411.0" width="98.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="314.1" y="1422.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (15 samples, 7.81%)</title><rect x="311.1" y="1395.0" width="92.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.1" y="1406.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (9 samples, 4.69%)</title><rect x="311.1" y="1379.0" width="55.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="314.1" y="1390.0">com/l..</text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.52%)</title><rect x="354.2" y="1363.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="357.2" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.52%)</title><rect x="354.2" y="1347.0" width="6.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="357.2" y="1358.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.52%)</title><rect x="354.2" y="1331.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="357.2" y="1342.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.52%)</title><rect x="354.2" y="1315.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="357.2" y="1326.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.52%)</title><rect x="354.2" y="1299.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="357.2" y="1310.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.52%)</title><rect x="360.3" y="1363.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="363.3" y="1374.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.12%)</title><rect x="366.5" y="1379.0" width="36.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="369.5" y="1390.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (4 samples, 2.08%)</title><rect x="378.7" y="1363.0" width="24.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="381.7" y="1374.0">c..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.52%)</title><rect x="384.9" y="1347.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.9" y="1358.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (2 samples, 1.04%)</title><rect x="391.0" y="1347.0" width="12.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="394.0" y="1358.0"></text>
</g>
<g>
<title>java/util/HashMap.put (2 samples, 1.04%)</title><rect x="391.0" y="1331.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="394.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.52%)</title><rect x="391.0" y="1315.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="394.0" y="1326.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.52%)</title><rect x="391.0" y="1299.0" width="6.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="394.0" y="1310.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.52%)</title><rect x="391.0" y="1283.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="394.0" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.52%)</title><rect x="397.2" y="1315.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.2" y="1326.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.52%)</title><rect x="397.2" y="1299.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="400.2" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.52%)</title><rect x="403.3" y="1395.0" width="6.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="406.3" y="1406.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.52%)</title><rect x="403.3" y="1379.0" width="6.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="406.3" y="1390.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (1 samples, 0.52%)</title><rect x="403.3" y="1363.0" width="6.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="406.3" y="1374.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.52%)</title><rect x="403.3" y="1347.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="406.3" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (34 samples, 17.71%)</title><rect x="409.5" y="1411.0" width="208.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="412.5" y="1422.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (34 samples, 17.71%)</title><rect x="409.5" y="1395.0" width="208.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.5" y="1406.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$396/643706904.process (30 samples, 15.63%)</title><rect x="409.5" y="1379.0" width="184.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.5" y="1390.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (30 samples, 15.63%)</title><rect x="409.5" y="1363.0" width="184.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="412.5" y="1374.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (28 samples, 14.58%)</title><rect x="415.6" y="1347.0" width="172.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="418.6" y="1358.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (28 samples, 14.58%)</title><rect x="415.6" y="1331.0" width="172.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="418.6" y="1342.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (27 samples, 14.06%)</title><rect x="415.6" y="1315.0" width="166.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="418.6" y="1326.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (26 samples, 13.54%)</title><rect x="415.6" y="1299.0" width="159.8" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="418.6" y="1310.0">JVM_Sleep</text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.52%)</title><rect x="415.6" y="1283.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="418.6" y="1294.0"></text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (1 samples, 0.52%)</title><rect x="421.8" y="1283.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="424.8" y="1294.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.52%)</title><rect x="421.8" y="1267.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="424.8" y="1278.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.04%)</title><rect x="427.9" y="1283.0" width="12.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="430.9" y="1294.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (7 samples, 3.65%)</title><rect x="440.2" y="1283.0" width="43.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="443.2" y="1294.0">__pt..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.52%)</title><rect x="483.2" y="1283.0" width="6.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="486.2" y="1294.0"></text>
</g>
<g>
<title>_init (1 samples, 0.52%)</title><rect x="489.4" y="1283.0" width="6.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="492.4" y="1294.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 1.04%)</title><rect x="495.5" y="1283.0" width="12.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="498.5" y="1294.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (11 samples, 5.73%)</title><rect x="507.8" y="1283.0" width="67.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="510.8" y="1294.0">os::sle..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 2.08%)</title><rect x="526.2" y="1267.0" width="24.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="529.2" y="1278.0">M..</text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 1.56%)</title><rect x="532.4" y="1251.0" width="18.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="535.4" y="1262.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 2.08%)</title><rect x="550.8" y="1267.0" width="24.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="553.8" y="1278.0">_..</text>
</g>
<g>
<title>[vdso] (4 samples, 2.08%)</title><rect x="550.8" y="1251.0" width="24.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="553.8" y="1262.0">[..</text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.52%)</title><rect x="575.4" y="1299.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="578.4" y="1310.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.52%)</title><rect x="581.6" y="1315.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="584.6" y="1326.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.52%)</title><rect x="581.6" y="1299.0" width="6.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="584.6" y="1310.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.52%)</title><rect x="587.7" y="1347.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.52%)</title><rect x="587.7" y="1331.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="590.7" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.52%)</title><rect x="593.9" y="1379.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.9" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.52%)</title><rect x="593.9" y="1363.0" width="6.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.9" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.52%)</title><rect x="593.9" y="1347.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.52%)</title><rect x="593.9" y="1331.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="596.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.52%)</title><rect x="593.9" y="1315.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="596.9" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="593.9" y="1299.0" width="6.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="596.9" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.56%)</title><rect x="600.0" y="1379.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="603.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.56%)</title><rect x="600.0" y="1363.0" width="18.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="603.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.04%)</title><rect x="606.1" y="1347.0" width="12.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="609.1" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.52%)</title><rect x="606.1" y="1331.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="609.1" y="1342.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="606.1" y="1315.0" width="6.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="609.1" y="1326.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.52%)</title><rect x="612.3" y="1331.0" width="6.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="615.3" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$479/230583944.accept (1 samples, 0.52%)</title><rect x="612.3" y="1315.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="615.3" y="1326.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.52%)</title><rect x="612.3" y="1299.0" width="6.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="615.3" y="1310.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.56%)</title><rect x="618.4" y="1411.0" width="18.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="621.4" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 1.56%)</title><rect x="618.4" y="1395.0" width="18.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.4" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.56%)</title><rect x="618.4" y="1379.0" width="18.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="621.4" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.52%)</title><rect x="618.4" y="1363.0" width="6.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="621.4" y="1374.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.52%)</title><rect x="618.4" y="1347.0" width="6.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="621.4" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.04%)</title><rect x="624.6" y="1363.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="627.6" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/1181923517.accept (2 samples, 1.04%)</title><rect x="624.6" y="1347.0" width="12.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="627.6" y="1358.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (2 samples, 1.04%)</title><rect x="624.6" y="1331.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="627.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 1.04%)</title><rect x="624.6" y="1315.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="627.6" y="1326.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.04%)</title><rect x="624.6" y="1299.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="627.6" y="1310.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.04%)</title><rect x="624.6" y="1283.0" width="12.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="627.6" y="1294.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.04%)</title><rect x="624.6" y="1267.0" width="12.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="627.6" y="1278.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.04%)</title><rect x="624.6" y="1251.0" width="12.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="627.6" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3 samples, 1.56%)</title><rect x="636.9" y="1491.0" width="18.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="639.9" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 1.04%)</title><rect x="643.0" y="1475.0" width="12.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.0" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.52%)</title><rect x="643.0" y="1459.0" width="6.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.0" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.52%)</title><rect x="643.0" y="1443.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.0" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="643.0" y="1427.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.0" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.52%)</title><rect x="649.2" y="1459.0" width="6.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="652.2" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.52%)</title><rect x="649.2" y="1443.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="652.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.52%)</title><rect x="649.2" y="1427.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.52%)</title><rect x="649.2" y="1411.0" width="6.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="652.2" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.52%)</title><rect x="655.3" y="1539.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.3" y="1550.0"></text>
</g>
<g>
<title>start_thread (86 samples, 44.79%)</title><rect x="661.5" y="1539.0" width="528.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="664.5" y="1550.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (86 samples, 44.79%)</title><rect x="661.5" y="1523.0" width="528.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="664.5" y="1534.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (86 samples, 44.79%)</title><rect x="661.5" y="1507.0" width="528.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.5" y="1518.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 6.77%)</title><rect x="661.5" y="1491.0" width="79.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="664.5" y="1502.0">GangWorke..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 6.77%)</title><rect x="661.5" y="1475.0" width="79.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="664.5" y="1486.0">G1ParTask..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 5.21%)</title><rect x="661.5" y="1459.0" width="61.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="664.5" y="1470.0">G1ParE..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (7 samples, 3.65%)</title><rect x="679.9" y="1443.0" width="43.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="682.9" y="1454.0">G1Pa..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 2.08%)</title><rect x="698.3" y="1427.0" width="24.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="701.3" y="1438.0">G..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.52%)</title><rect x="716.8" y="1411.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="719.8" y="1422.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 1.56%)</title><rect x="722.9" y="1459.0" width="18.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="725.9" y="1470.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 1.56%)</title><rect x="722.9" y="1443.0" width="18.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="725.9" y="1454.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 1.56%)</title><rect x="722.9" y="1427.0" width="18.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="725.9" y="1438.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (3 samples, 1.56%)</title><rect x="722.9" y="1411.0" width="18.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="725.9" y="1422.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (3 samples, 1.56%)</title><rect x="722.9" y="1395.0" width="18.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="725.9" y="1406.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (3 samples, 1.56%)</title><rect x="722.9" y="1379.0" width="18.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="725.9" y="1390.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.52%)</title><rect x="735.2" y="1363.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="738.2" y="1374.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (73 samples, 38.02%)</title><rect x="741.4" y="1491.0" width="448.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="744.4" y="1502.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (73 samples, 38.02%)</title><rect x="741.4" y="1475.0" width="448.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="744.4" y="1486.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (73 samples, 38.02%)</title><rect x="741.4" y="1459.0" width="448.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="744.4" y="1470.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (70 samples, 36.46%)</title><rect x="741.4" y="1443.0" width="430.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="744.4" y="1454.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, Directiv..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (70 samples, 36.46%)</title><rect x="741.4" y="1427.0" width="430.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.4" y="1438.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool,..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 21.35%)</title><rect x="741.4" y="1411.0" width="251.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="744.4" y="1422.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.52%)</title><rect x="741.4" y="1395.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="744.4" y="1406.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.52%)</title><rect x="741.4" y="1379.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="744.4" y="1390.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.52%)</title><rect x="741.4" y="1363.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="744.4" y="1374.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (1 samples, 0.52%)</title><rect x="741.4" y="1347.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="744.4" y="1358.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.08%)</title><rect x="747.5" y="1395.0" width="24.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="750.5" y="1406.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.52%)</title><rect x="747.5" y="1379.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="750.5" y="1390.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.52%)</title><rect x="747.5" y="1363.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="750.5" y="1374.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.56%)</title><rect x="753.6" y="1379.0" width="18.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="756.6" y="1390.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.56%)</title><rect x="753.6" y="1363.0" width="18.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="756.6" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 1.56%)</title><rect x="772.1" y="1395.0" width="18.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="775.1" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 1.56%)</title><rect x="772.1" y="1379.0" width="18.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="775.1" y="1390.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.52%)</title><rect x="772.1" y="1363.0" width="6.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="775.1" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.52%)</title><rect x="772.1" y="1347.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="775.1" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 1.04%)</title><rect x="778.2" y="1363.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="781.2" y="1374.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.52%)</title><rect x="778.2" y="1347.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="781.2" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::lower_pressure(Block*, unsigned int, LRG&amp;, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.52%)</title><rect x="778.2" y="1331.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="781.2" y="1342.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.52%)</title><rect x="784.4" y="1347.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.4" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::fixup_flow() (1 samples, 0.52%)</title><rect x="790.5" y="1395.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="793.5" y="1406.0"></text>
</g>
<g>
<title>PhaseCFG::insert_goto_at(unsigned int, unsigned int) (1 samples, 0.52%)</title><rect x="790.5" y="1379.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="793.5" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (32 samples, 16.67%)</title><rect x="796.7" y="1395.0" width="196.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="799.7" y="1406.0">PhaseChaitin::Register_All..</text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.52%)</title><rect x="796.7" y="1379.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="799.7" y="1390.0"></text>
</g>
<g>
<title>JVMState::is_monitor_use(unsigned int) const (1 samples, 0.52%)</title><rect x="802.8" y="1379.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="805.8" y="1390.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.52%)</title><rect x="809.0" y="1379.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="812.0" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 1.04%)</title><rect x="815.1" y="1379.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="818.1" y="1390.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="821.3" y="1363.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="824.3" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.52%)</title><rect x="827.4" y="1379.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="830.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.52%)</title><rect x="827.4" y="1363.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.4" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 1.56%)</title><rect x="833.5" y="1379.0" width="18.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="836.5" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.52%)</title><rect x="845.8" y="1363.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="848.8" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.52%)</title><rect x="845.8" y="1347.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="848.8" y="1358.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.52%)</title><rect x="845.8" y="1331.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="848.8" y="1342.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (9 samples, 4.69%)</title><rect x="852.0" y="1379.0" width="55.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="855.0" y="1390.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.52%)</title><rect x="858.1" y="1363.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="861.1" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.56%)</title><rect x="864.3" y="1363.0" width="18.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="867.3" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (4 samples, 2.08%)</title><rect x="882.7" y="1363.0" width="24.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="885.7" y="1374.0">P..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.52%)</title><rect x="888.9" y="1347.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.9" y="1358.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (2 samples, 1.04%)</title><rect x="895.0" y="1347.0" width="12.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="898.0" y="1358.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.56%)</title><rect x="907.3" y="1379.0" width="18.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="910.3" y="1390.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.52%)</title><rect x="913.4" y="1363.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="916.4" y="1374.0"></text>
</g>
<g>
<title>TypeLong::make(long) (1 samples, 0.52%)</title><rect x="919.6" y="1363.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="922.6" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.52%)</title><rect x="925.7" y="1379.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="928.7" y="1390.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (5 samples, 2.60%)</title><rect x="931.9" y="1379.0" width="30.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="934.9" y="1390.0">Ph..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.52%)</title><rect x="950.3" y="1363.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="953.3" y="1374.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.47] (1 samples, 0.52%)</title><rect x="956.5" y="1363.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="959.5" y="1374.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (3 samples, 1.56%)</title><rect x="962.6" y="1379.0" width="18.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="965.6" y="1390.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.52%)</title><rect x="962.6" y="1363.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.6" y="1374.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 1.04%)</title><rect x="968.8" y="1363.0" width="12.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="971.8" y="1374.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.52%)</title><rect x="968.8" y="1347.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="971.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.52%)</title><rect x="974.9" y="1347.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="977.9" y="1358.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 1.04%)</title><rect x="981.0" y="1379.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.0" y="1390.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.52%)</title><rect x="987.2" y="1363.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="990.2" y="1374.0"></text>
</g>
<g>
<title>Compile::Optimize() (24 samples, 12.50%)</title><rect x="993.3" y="1411.0" width="147.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="996.3" y="1422.0">Compile::Optimize()</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (9 samples, 4.69%)</title><rect x="993.3" y="1395.0" width="55.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="996.3" y="1406.0">Compi..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (8 samples, 4.17%)</title><rect x="993.3" y="1379.0" width="49.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="996.3" y="1390.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.52%)</title><rect x="993.3" y="1363.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="996.3" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 2.08%)</title><rect x="999.5" y="1363.0" width="24.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1002.5" y="1374.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 1.04%)</title><rect x="1005.6" y="1347.0" width="12.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1008.6" y="1358.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.52%)</title><rect x="1005.6" y="1331.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1008.6" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.52%)</title><rect x="1011.8" y="1331.0" width="6.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1014.8" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.52%)</title><rect x="1011.8" y="1315.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1014.8" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.52%)</title><rect x="1017.9" y="1347.0" width="6.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1020.9" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.52%)</title><rect x="1024.1" y="1363.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1027.1" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.52%)</title><rect x="1024.1" y="1347.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1027.1" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.52%)</title><rect x="1024.1" y="1331.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1027.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1024.1" y="1315.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1027.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.52%)</title><rect x="1030.2" y="1363.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1033.2" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.52%)</title><rect x="1036.4" y="1363.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1039.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.52%)</title><rect x="1036.4" y="1347.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1039.4" y="1358.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1036.4" y="1331.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1039.4" y="1342.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.52%)</title><rect x="1036.4" y="1315.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1039.4" y="1326.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="1042.5" y="1379.0" width="6.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1045.5" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 1.04%)</title><rect x="1048.6" y="1395.0" width="12.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1051.6" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 1.04%)</title><rect x="1048.6" y="1379.0" width="12.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.6" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.52%)</title><rect x="1048.6" y="1363.0" width="6.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.6" y="1374.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.52%)</title><rect x="1048.6" y="1347.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.6" y="1358.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.52%)</title><rect x="1048.6" y="1331.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1051.6" y="1342.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.52%)</title><rect x="1048.6" y="1315.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.6" y="1326.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.52%)</title><rect x="1048.6" y="1299.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.6" y="1310.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.70] (1 samples, 0.52%)</title><rect x="1048.6" y="1283.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.6" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1363.0" width="6.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1057.8" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1347.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1057.8" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1331.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1057.8" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1315.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.8" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1299.0" width="6.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1057.8" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1283.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1057.8" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1267.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1057.8" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1251.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1057.8" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.52%)</title><rect x="1054.8" y="1235.0" width="6.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1057.8" y="1246.0"></text>
</g>
<g>
<title>PhiNode::unique_input(PhaseTransform*, bool) (1 samples, 0.52%)</title><rect x="1054.8" y="1219.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.8" y="1230.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.52%)</title><rect x="1060.9" y="1395.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1063.9" y="1406.0"></text>
</g>
<g>
<title>CmpPNode::sub(Type const*, Type const*) const (1 samples, 0.52%)</title><rect x="1060.9" y="1379.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1063.9" y="1390.0"></text>
</g>
<g>
<title>TypePtr::singleton() const (1 samples, 0.52%)</title><rect x="1060.9" y="1363.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.9" y="1374.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.52%)</title><rect x="1067.1" y="1395.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1070.1" y="1406.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.52%)</title><rect x="1067.1" y="1379.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1070.1" y="1390.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.52%)</title><rect x="1067.1" y="1363.0" width="6.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1070.1" y="1374.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.52%)</title><rect x="1067.1" y="1347.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1070.1" y="1358.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.52%)</title><rect x="1067.1" y="1331.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1070.1" y="1342.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.52%)</title><rect x="1067.1" y="1315.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.1" y="1326.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.52%)</title><rect x="1073.2" y="1395.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1076.2" y="1406.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.52%)</title><rect x="1073.2" y="1379.0" width="6.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1076.2" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 3.12%)</title><rect x="1079.4" y="1395.0" width="36.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.4" y="1406.0">Pha..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.52%)</title><rect x="1079.4" y="1379.0" width="6.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1082.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1079.4" y="1363.0" width="6.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1082.4" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1079.4" y="1347.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1082.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 2.60%)</title><rect x="1085.5" y="1379.0" width="30.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1088.5" y="1390.0">Ph..</text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.52%)</title><rect x="1091.7" y="1363.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1094.7" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.56%)</title><rect x="1097.8" y="1363.0" width="18.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1100.8" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.52%)</title><rect x="1097.8" y="1347.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.8" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 1.04%)</title><rect x="1104.0" y="1347.0" width="12.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1107.0" y="1358.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.52%)</title><rect x="1110.1" y="1331.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1113.1" y="1342.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.52%)</title><rect x="1116.2" y="1395.0" width="6.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1119.2" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.52%)</title><rect x="1116.2" y="1379.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1119.2" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 1.04%)</title><rect x="1122.4" y="1395.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.4" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 1.04%)</title><rect x="1122.4" y="1379.0" width="12.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.4" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.52%)</title><rect x="1122.4" y="1363.0" width="6.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.4" y="1374.0"></text>
</g>
<g>
<title>Node::del_req(unsigned int) (1 samples, 0.52%)</title><rect x="1122.4" y="1347.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.4" y="1358.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.52%)</title><rect x="1128.5" y="1363.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1131.5" y="1374.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.52%)</title><rect x="1128.5" y="1347.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1131.5" y="1358.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.52%)</title><rect x="1128.5" y="1331.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1131.5" y="1342.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.52%)</title><rect x="1134.7" y="1395.0" width="6.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1137.7" y="1406.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.52%)</title><rect x="1134.7" y="1379.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.7" y="1390.0"></text>
</g>
<g>
<title>ProjNode::size_of() const (1 samples, 0.52%)</title><rect x="1134.7" y="1363.0" width="6.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1137.7" y="1374.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.52%)</title><rect x="1140.8" y="1411.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.8" y="1422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.08%)</title><rect x="1147.0" y="1411.0" width="24.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="1422.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.08%)</title><rect x="1147.0" y="1395.0" width="24.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="1406.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.08%)</title><rect x="1147.0" y="1379.0" width="24.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.0" y="1390.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.08%)</title><rect x="1147.0" y="1363.0" width="24.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.0" y="1374.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.08%)</title><rect x="1147.0" y="1347.0" width="24.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="1358.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.08%)</title><rect x="1147.0" y="1331.0" width="24.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="1342.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.08%)</title><rect x="1147.0" y="1315.0" width="24.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.0" y="1326.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.08%)</title><rect x="1147.0" y="1299.0" width="24.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="1310.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.08%)</title><rect x="1147.0" y="1283.0" width="24.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="1294.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.08%)</title><rect x="1147.0" y="1267.0" width="24.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="1278.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.08%)</title><rect x="1147.0" y="1251.0" width="24.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="1262.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.08%)</title><rect x="1147.0" y="1235.0" width="24.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.0" y="1246.0">P..</text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (4 samples, 2.08%)</title><rect x="1147.0" y="1219.0" width="24.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="1230.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.08%)</title><rect x="1147.0" y="1203.0" width="24.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="1214.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.08%)</title><rect x="1147.0" y="1187.0" width="24.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1150.0" y="1198.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.08%)</title><rect x="1147.0" y="1171.0" width="24.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="1182.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.08%)</title><rect x="1147.0" y="1155.0" width="24.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.0" y="1166.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.08%)</title><rect x="1147.0" y="1139.0" width="24.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.0" y="1150.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.08%)</title><rect x="1147.0" y="1123.0" width="24.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.0" y="1134.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 2.08%)</title><rect x="1147.0" y="1107.0" width="24.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.0" y="1118.0">P..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 2.08%)</title><rect x="1147.0" y="1091.0" width="24.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.0" y="1102.0">P..</text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 2.08%)</title><rect x="1147.0" y="1075.0" width="24.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1150.0" y="1086.0">P..</text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 2.08%)</title><rect x="1147.0" y="1059.0" width="24.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="1070.0">P..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 2.08%)</title><rect x="1147.0" y="1043.0" width="24.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1150.0" y="1054.0">P..</text>
</g>
<g>
<title>Parse::do_call() (4 samples, 2.08%)</title><rect x="1147.0" y="1027.0" width="24.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="1038.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.56%)</title><rect x="1147.0" y="1011.0" width="18.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.0" y="1022.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.56%)</title><rect x="1147.0" y="995.0" width="18.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.56%)</title><rect x="1147.0" y="979.0" width="18.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="990.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.56%)</title><rect x="1147.0" y="963.0" width="18.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.0" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.56%)</title><rect x="1147.0" y="947.0" width="18.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.56%)</title><rect x="1147.0" y="931.0" width="18.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.0" y="942.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.56%)</title><rect x="1147.0" y="915.0" width="18.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.0" y="926.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.56%)</title><rect x="1147.0" y="899.0" width="18.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.56%)</title><rect x="1147.0" y="883.0" width="18.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.56%)</title><rect x="1147.0" y="867.0" width="18.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.56%)</title><rect x="1147.0" y="851.0" width="18.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.56%)</title><rect x="1147.0" y="835.0" width="18.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1150.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.56%)</title><rect x="1147.0" y="819.0" width="18.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.0" y="830.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.56%)</title><rect x="1147.0" y="803.0" width="18.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.56%)</title><rect x="1147.0" y="787.0" width="18.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.56%)</title><rect x="1147.0" y="771.0" width="18.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.0" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.56%)</title><rect x="1147.0" y="755.0" width="18.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.56%)</title><rect x="1147.0" y="739.0" width="18.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.0" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 1.04%)</title><rect x="1147.0" y="723.0" width="12.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.0" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 1.04%)</title><rect x="1147.0" y="707.0" width="12.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1150.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 1.04%)</title><rect x="1147.0" y="691.0" width="12.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1153.1" y="675.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1153.1" y="659.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1153.1" y="643.0" width="6.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.1" y="627.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1153.1" y="611.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1153.1" y="595.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1153.1" y="579.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1153.1" y="563.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1153.1" y="547.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.1" y="531.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1153.1" y="515.0" width="6.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1153.1" y="499.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1153.1" y="483.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1153.1" y="467.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1153.1" y="451.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.1" y="435.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1153.1" y="419.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1153.1" y="403.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1153.1" y="387.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1153.1" y="371.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1153.1" y="355.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.1" y="339.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1153.1" y="323.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1153.1" y="307.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1153.1" y="291.0" width="6.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1153.1" y="275.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1153.1" y="259.0" width="6.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.1" y="243.0" width="6.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.52%)</title><rect x="1153.1" y="227.0" width="6.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1156.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.52%)</title><rect x="1153.1" y="211.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.52%)</title><rect x="1153.1" y="195.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.52%)</title><rect x="1153.1" y="179.0" width="6.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.52%)</title><rect x="1153.1" y="163.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="174.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.52%)</title><rect x="1153.1" y="147.0" width="6.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1156.1" y="158.0"></text>
</g>
<g>
<title>LibraryCallKit::try_to_inline(int) (1 samples, 0.52%)</title><rect x="1153.1" y="131.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.1" y="142.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_unsafe_access(bool, BasicType, LibraryCallKit::AccessKind, bool) [clone .part.170] (1 samples, 0.52%)</title><rect x="1153.1" y="115.0" width="6.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.1" y="126.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.52%)</title><rect x="1153.1" y="99.0" width="6.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.1" y="110.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.52%)</title><rect x="1153.1" y="83.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.1" y="94.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.52%)</title><rect x="1153.1" y="67.0" width="6.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.1" y="78.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.52%)</title><rect x="1153.1" y="51.0" width="6.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.1" y="62.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.52%)</title><rect x="1153.1" y="35.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.1" y="46.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.52%)</title><rect x="1159.3" y="723.0" width="6.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.3" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::cast_to_exactness(bool) const (1 samples, 0.52%)</title><rect x="1165.4" y="1011.0" width="6.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.4" y="1022.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 1.56%)</title><rect x="1171.6" y="1443.0" width="18.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1454.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (3 samples, 1.56%)</title><rect x="1171.6" y="1427.0" width="18.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.6" y="1438.0"></text>
</g>
<g>
<title>Compilation::compile_method() (3 samples, 1.56%)</title><rect x="1171.6" y="1411.0" width="18.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="1422.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 1.04%)</title><rect x="1171.6" y="1395.0" width="12.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.6" y="1406.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.52%)</title><rect x="1171.6" y="1379.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="1390.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.52%)</title><rect x="1171.6" y="1363.0" width="6.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.6" y="1374.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.52%)</title><rect x="1171.6" y="1347.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="1358.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.52%)</title><rect x="1171.6" y="1331.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="1342.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1171.6" y="1315.0" width="6.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1174.6" y="1326.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1171.6" y="1299.0" width="6.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1174.6" y="1310.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1171.6" y="1283.0" width="6.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.6" y="1294.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1171.6" y="1267.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="1278.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1171.6" y="1251.0" width="6.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.6" y="1262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1171.6" y="1235.0" width="6.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.6" y="1246.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1171.6" y="1219.0" width="6.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.6" y="1230.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.52%)</title><rect x="1171.6" y="1203.0" width="6.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1174.6" y="1214.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1171.6" y="1187.0" width="6.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.6" y="1198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.52%)</title><rect x="1171.6" y="1171.0" width="6.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.6" y="1182.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.52%)</title><rect x="1171.6" y="1155.0" width="6.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.6" y="1166.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.52%)</title><rect x="1171.6" y="1139.0" width="6.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1174.6" y="1150.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.52%)</title><rect x="1177.7" y="1379.0" width="6.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.7" y="1390.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.52%)</title><rect x="1177.7" y="1363.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="1374.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.52%)</title><rect x="1177.7" y="1347.0" width="6.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.7" y="1358.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.52%)</title><rect x="1177.7" y="1331.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="1342.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.52%)</title><rect x="1177.7" y="1315.0" width="6.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="1326.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.52%)</title><rect x="1177.7" y="1299.0" width="6.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="1310.0"></text>
</g>
<g>
<title>LinearScanWalker::find_free_reg(int, int, int, int, bool*) (1 samples, 0.52%)</title><rect x="1177.7" y="1283.0" width="6.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1180.7" y="1294.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples, 0.52%)</title><rect x="1183.9" y="1395.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="1406.0"></text>
</g>
<g>
<title>Dependencies::validate_dependencies(CompileTask*, char**) (1 samples, 0.52%)</title><rect x="1183.9" y="1379.0" width="6.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="1390.0"></text>
</g>
<g>
<title>Dependencies::DepStream::check_klass_dependency(KlassDepChange*) (1 samples, 0.52%)</title><rect x="1183.9" y="1363.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.9" y="1374.0"></text>
</g>
</g>
</svg>
