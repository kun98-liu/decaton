<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1670" onload="init(evt)" viewBox="0 0 1200 1670" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1653"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1653"> </text>
<g id="frames">
<g>
<title>all (887 samples, 100.00%)</title><rect x="10.0" y="1619.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1630.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (203 samples, 22.89%)</title><rect x="10.0" y="1603.0" width="270.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="1614.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (203 samples, 22.89%)</title><rect x="10.0" y="1587.0" width="270.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1598.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (203 samples, 22.89%)</title><rect x="10.0" y="1571.0" width="270.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1582.0">com/linecorp/decaton/processor/runti..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (2 samples, 0.23%)</title><rect x="10.0" y="1555.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (2 samples, 0.23%)</title><rect x="10.0" y="1539.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="1550.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.23%)</title><rect x="10.0" y="1523.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1534.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.23%)</title><rect x="10.0" y="1507.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="1518.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.23%)</title><rect x="10.0" y="1491.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="1502.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.23%)</title><rect x="10.0" y="1475.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="1486.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.23%)</title><rect x="10.0" y="1459.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.11%)</title><rect x="10.0" y="1443.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="10.0" y="1427.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.11%)</title><rect x="10.0" y="1411.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$247/742066862.test (1 samples, 0.11%)</title><rect x="10.0" y="1395.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="1406.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="11.3" y="1443.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="14.3" y="1454.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="11.3" y="1427.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="14.3" y="1438.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="11.3" y="1411.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="14.3" y="1422.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.end (1 samples, 0.11%)</title><rect x="11.3" y="1395.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="14.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (3 samples, 0.34%)</title><rect x="12.7" y="1555.0" width="4.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.7" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (3 samples, 0.34%)</title><rect x="12.7" y="1539.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="15.7" y="1550.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (3 samples, 0.34%)</title><rect x="12.7" y="1523.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="15.7" y="1534.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$241/1934921540.accept (3 samples, 0.34%)</title><rect x="12.7" y="1507.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.34%)</title><rect x="12.7" y="1491.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="15.7" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.34%)</title><rect x="12.7" y="1475.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="15.7" y="1486.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.34%)</title><rect x="12.7" y="1459.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="15.7" y="1470.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (164 samples, 18.49%)</title><rect x="16.7" y="1555.0" width="218.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1566.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1712805323.accept (159 samples, 17.93%)</title><rect x="16.7" y="1539.0" width="211.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="19.7" y="1550.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (159 samples, 17.93%)</title><rect x="16.7" y="1523.0" width="211.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.7" y="1534.0">com/linecorp/decaton/process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (141 samples, 15.90%)</title><rect x="16.7" y="1507.0" width="187.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="19.7" y="1518.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (141 samples, 15.90%)</title><rect x="16.7" y="1491.0" width="187.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="1502.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (140 samples, 15.78%)</title><rect x="18.0" y="1475.0" width="186.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="21.0" y="1486.0">com/linecorp/decaton/pro..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (140 samples, 15.78%)</title><rect x="18.0" y="1459.0" width="186.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.0" y="1470.0">java/util/concurrent/Exe..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (140 samples, 15.78%)</title><rect x="18.0" y="1443.0" width="186.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="1454.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (140 samples, 15.78%)</title><rect x="18.0" y="1427.0" width="186.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.0" y="1438.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (108 samples, 12.18%)</title><rect x="18.0" y="1411.0" width="143.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.0" y="1422.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 1.58%)</title><rect x="18.0" y="1395.0" width="18.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.0" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (14 samples, 1.58%)</title><rect x="18.0" y="1379.0" width="18.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="21.0" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (14 samples, 1.58%)</title><rect x="18.0" y="1363.0" width="18.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.0" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (15 samples, 1.69%)</title><rect x="36.6" y="1395.0" width="20.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="39.6" y="1406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 1.69%)</title><rect x="36.6" y="1379.0" width="20.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="39.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.34%)</title><rect x="52.6" y="1363.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.6" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.23%)</title><rect x="53.9" y="1347.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.9" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 8.91%)</title><rect x="56.6" y="1395.0" width="105.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.6" y="1406.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 8.91%)</title><rect x="56.6" y="1379.0" width="105.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.6" y="1390.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 8.91%)</title><rect x="56.6" y="1363.0" width="105.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="59.6" y="1374.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 8.91%)</title><rect x="56.6" y="1347.0" width="105.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.6" y="1358.0">java/util/con..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (77 samples, 8.68%)</title><rect x="59.2" y="1331.0" width="102.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.2" y="1342.0">jdk/internal..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.11%)</title><rect x="61.9" y="1315.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="64.9" y="1326.0"></text>
</g>
<g>
<title>Unsafe_Unpark (32 samples, 3.61%)</title><rect x="63.2" y="1315.0" width="42.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="66.2" y="1326.0">Unsa..</text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.11%)</title><rect x="65.9" y="1299.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="68.9" y="1310.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples, 0.68%)</title><rect x="67.2" y="1299.0" width="8.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="70.2" y="1310.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.11%)</title><rect x="69.9" y="1283.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="72.9" y="1294.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.34%)</title><rect x="71.2" y="1283.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="74.2" y="1294.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.11%)</title><rect x="75.2" y="1299.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="78.2" y="1310.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.56%)</title><rect x="76.5" y="1299.0" width="6.7" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="79.5" y="1310.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.45%)</title><rect x="83.2" y="1299.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="86.2" y="1310.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.47%)</title><rect x="88.5" y="1299.0" width="17.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="91.5" y="1310.0"></text>
</g>
<g>
<title>__pthread_cond_signal (42 samples, 4.74%)</title><rect x="105.8" y="1315.0" width="55.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="108.8" y="1326.0">__pth..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (32 samples, 3.61%)</title><rect x="161.7" y="1411.0" width="42.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.7" y="1422.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (32 samples, 3.61%)</title><rect x="161.7" y="1395.0" width="42.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.7" y="1406.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.68%)</title><rect x="196.2" y="1379.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="199.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.68%)</title><rect x="196.2" y="1363.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="199.2" y="1374.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (14 samples, 1.58%)</title><rect x="204.2" y="1507.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="207.2" y="1518.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (14 samples, 1.58%)</title><rect x="204.2" y="1491.0" width="18.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.2" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.47%)</title><rect x="205.6" y="1475.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="208.6" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (13 samples, 1.47%)</title><rect x="205.6" y="1459.0" width="17.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="208.6" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (4 samples, 0.45%)</title><rect x="217.5" y="1443.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="220.5" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (4 samples, 0.45%)</title><rect x="217.5" y="1427.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="220.5" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (3 samples, 0.34%)</title><rect x="222.9" y="1507.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="225.9" y="1518.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.34%)</title><rect x="222.9" y="1491.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="225.9" y="1502.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.23%)</title><rect x="222.9" y="1475.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="225.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.23%)</title><rect x="222.9" y="1459.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.9" y="1470.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.11%)</title><rect x="224.2" y="1443.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="227.2" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="225.5" y="1475.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.5" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (1 samples, 0.11%)</title><rect x="225.5" y="1459.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="228.5" y="1470.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (1 samples, 0.11%)</title><rect x="225.5" y="1443.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.5" y="1454.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="225.5" y="1427.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.5" y="1438.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="225.5" y="1411.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.5" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="226.8" y="1507.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.8" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.11%)</title><rect x="226.8" y="1491.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="229.8" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="226.8" y="1475.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="229.8" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.11%)</title><rect x="226.8" y="1459.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.8" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (5 samples, 0.56%)</title><rect x="228.2" y="1539.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.2" y="1550.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (5 samples, 0.56%)</title><rect x="228.2" y="1523.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="231.2" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.56%)</title><rect x="228.2" y="1507.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="231.2" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (5 samples, 0.56%)</title><rect x="228.2" y="1491.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.2" y="1502.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (1 samples, 0.11%)</title><rect x="228.2" y="1475.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="231.2" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (4 samples, 0.45%)</title><rect x="229.5" y="1475.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="232.5" y="1486.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$240/1712805323.accept (1 samples, 0.11%)</title><rect x="233.5" y="1459.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.5" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 3.83%)</title><rect x="234.8" y="1555.0" width="45.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="237.8" y="1566.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (34 samples, 3.83%)</title><rect x="234.8" y="1539.0" width="45.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="237.8" y="1550.0">org/..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.isEmpty (1 samples, 0.11%)</title><rect x="236.2" y="1523.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.2" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 2.37%)</title><rect x="237.5" y="1523.0" width="27.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="1534.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (21 samples, 2.37%)</title><rect x="237.5" y="1507.0" width="27.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="240.5" y="1518.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (21 samples, 2.37%)</title><rect x="237.5" y="1491.0" width="27.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.5" y="1502.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (21 samples, 2.37%)</title><rect x="237.5" y="1475.0" width="27.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.5" y="1486.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (21 samples, 2.37%)</title><rect x="237.5" y="1459.0" width="27.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.5" y="1470.0">o..</text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.56%)</title><rect x="237.5" y="1443.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="240.5" y="1454.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.56%)</title><rect x="237.5" y="1427.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="240.5" y="1438.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.56%)</title><rect x="237.5" y="1411.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="240.5" y="1422.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (5 samples, 0.56%)</title><rect x="237.5" y="1395.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="240.5" y="1406.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (5 samples, 0.56%)</title><rect x="237.5" y="1379.0" width="6.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.11%)</title><rect x="242.8" y="1363.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (8 samples, 0.90%)</title><rect x="244.1" y="1443.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (1 samples, 0.11%)</title><rect x="244.1" y="1427.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="247.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (1 samples, 0.11%)</title><rect x="244.1" y="1411.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="247.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (1 samples, 0.11%)</title><rect x="244.1" y="1395.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="247.1" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (1 samples, 0.11%)</title><rect x="244.1" y="1379.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="247.1" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (1 samples, 0.11%)</title><rect x="244.1" y="1363.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="247.1" y="1374.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.create (1 samples, 0.11%)</title><rect x="244.1" y="1347.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.1" y="1358.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C$Java9ChecksumFactory.create (1 samples, 0.11%)</title><rect x="244.1" y="1331.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.1" y="1342.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.invoke_MT (1 samples, 0.11%)</title><rect x="244.1" y="1315.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="247.1" y="1326.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.68%)</title><rect x="245.5" y="1427.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="248.5" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (6 samples, 0.68%)</title><rect x="245.5" y="1411.0" width="7.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="248.5" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (1 samples, 0.11%)</title><rect x="253.4" y="1427.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="256.4" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (1 samples, 0.11%)</title><rect x="253.4" y="1411.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="256.4" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (1 samples, 0.11%)</title><rect x="253.4" y="1395.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="256.4" y="1406.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (8 samples, 0.90%)</title><rect x="254.8" y="1443.0" width="10.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="257.8" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (7 samples, 0.79%)</title><rect x="256.1" y="1427.0" width="9.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (7 samples, 0.79%)</title><rect x="256.1" y="1411.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.1" y="1422.0"></text>
</g>
<g>
<title>java/util/Optional.of (7 samples, 0.79%)</title><rect x="256.1" y="1395.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="259.1" y="1406.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="262.8" y="1379.0" width="2.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="265.8" y="1390.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (2 samples, 0.23%)</title><rect x="265.4" y="1523.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.4" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.23%)</title><rect x="265.4" y="1507.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.4" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.23%)</title><rect x="265.4" y="1491.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="268.4" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (2 samples, 0.23%)</title><rect x="265.4" y="1475.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.4" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (2 samples, 0.23%)</title><rect x="265.4" y="1459.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.4" y="1470.0"></text>
</g>
<g>
<title>java/util/stream/Collectors.groupingBy (2 samples, 0.23%)</title><rect x="265.4" y="1443.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="268.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (1 samples, 0.11%)</title><rect x="268.1" y="1523.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="271.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.11%)</title><rect x="268.1" y="1507.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="271.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.11%)</title><rect x="268.1" y="1491.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="271.1" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.11%)</title><rect x="268.1" y="1475.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="271.1" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.maybeTriggerWakeup (1 samples, 0.11%)</title><rect x="269.4" y="1523.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="272.4" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (4 samples, 0.45%)</title><rect x="270.7" y="1523.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.7" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (4 samples, 0.45%)</title><rect x="270.7" y="1507.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.7" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedSends (1 samples, 0.11%)</title><rect x="270.7" y="1491.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="273.7" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.lastSent (1 samples, 0.11%)</title><rect x="270.7" y="1475.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/InFlightRequests.requestQueue (1 samples, 0.11%)</title><rect x="270.7" y="1459.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="273.7" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="270.7" y="1443.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="273.7" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="270.7" y="1427.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="273.7" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 0.34%)</title><rect x="272.1" y="1491.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.1" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.23%)</title><rect x="272.1" y="1475.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="275.1" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (2 samples, 0.23%)</title><rect x="272.1" y="1459.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="275.1" y="1470.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.11%)</title><rect x="272.1" y="1443.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="275.1" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.11%)</title><rect x="272.1" y="1427.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="275.1" y="1438.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.11%)</title><rect x="272.1" y="1411.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="275.1" y="1422.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.11%)</title><rect x="272.1" y="1395.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="275.1" y="1406.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.11%)</title><rect x="272.1" y="1379.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.1" y="1390.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.11%)</title><rect x="272.1" y="1363.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="275.1" y="1374.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.11%)</title><rect x="272.1" y="1347.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.1" y="1358.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.11%)</title><rect x="272.1" y="1331.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="275.1" y="1342.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.addToCompletedReceives (1 samples, 0.11%)</title><rect x="273.4" y="1443.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="276.4" y="1454.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.11%)</title><rect x="274.7" y="1475.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="277.7" y="1486.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.11%)</title><rect x="276.1" y="1523.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.1" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/KafkaConsumerMetrics.recordPollStart (2 samples, 0.23%)</title><rect x="277.4" y="1523.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.4" y="1534.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (2 samples, 0.23%)</title><rect x="277.4" y="1507.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="280.4" y="1518.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (2 samples, 0.23%)</title><rect x="277.4" y="1491.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="280.4" y="1502.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.11%)</title><rect x="278.7" y="1475.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.7" y="1486.0"></text>
</g>
<g>
<title>java/lang/Thread.run (527 samples, 59.41%)</title><rect x="280.1" y="1603.0" width="701.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="283.1" y="1614.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (527 samples, 59.41%)</title><rect x="280.1" y="1587.0" width="701.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="283.1" y="1598.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (527 samples, 59.41%)</title><rect x="280.1" y="1571.0" width="701.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="283.1" y="1582.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>__clock_gettime (9 samples, 1.01%)</title><rect x="285.4" y="1555.0" width="12.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="288.4" y="1566.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 1.01%)</title><rect x="285.4" y="1539.0" width="12.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="288.4" y="1550.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (4 samples, 0.45%)</title><rect x="297.4" y="1555.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="300.4" y="1566.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$469/1990587440.run (313 samples, 35.29%)</title><rect x="302.7" y="1555.0" width="416.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="305.7" y="1566.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (313 samples, 35.29%)</title><rect x="302.7" y="1539.0" width="416.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="305.7" y="1550.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (313 samples, 35.29%)</title><rect x="302.7" y="1523.0" width="416.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="305.7" y="1534.0">com/linecorp/decaton/processor/runtime/internal/Processor..</text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.68%)</title><rect x="302.7" y="1507.0" width="8.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="305.7" y="1518.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.56%)</title><rect x="304.0" y="1491.0" width="6.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="307.0" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (307 samples, 34.61%)</title><rect x="310.7" y="1507.0" width="408.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="313.7" y="1518.0">com/linecorp/decaton/processor/runtime/internal/ProcessP..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (2 samples, 0.23%)</title><rect x="314.6" y="1491.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.6" y="1502.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.11%)</title><rect x="317.3" y="1491.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="320.3" y="1502.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.11%)</title><rect x="317.3" y="1475.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="320.3" y="1486.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.11%)</title><rect x="317.3" y="1459.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.3" y="1470.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.11%)</title><rect x="317.3" y="1443.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="320.3" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.11%)</title><rect x="317.3" y="1427.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="320.3" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (33 samples, 3.72%)</title><rect x="318.6" y="1491.0" width="43.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="321.6" y="1502.0">com/..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 3.72%)</title><rect x="318.6" y="1475.0" width="43.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="321.6" y="1486.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (33 samples, 3.72%)</title><rect x="318.6" y="1459.0" width="43.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="321.6" y="1470.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (25 samples, 2.82%)</title><rect x="329.3" y="1443.0" width="33.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="332.3" y="1454.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.34%)</title><rect x="329.3" y="1427.0" width="4.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.3" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/523674020.accept (3 samples, 0.34%)</title><rect x="329.3" y="1411.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="332.3" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (22 samples, 2.48%)</title><rect x="333.3" y="1427.0" width="29.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="336.3" y="1438.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$483/523674020.accept (22 samples, 2.48%)</title><rect x="333.3" y="1411.0" width="29.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="336.3" y="1422.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (22 samples, 2.48%)</title><rect x="333.3" y="1395.0" width="29.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="336.3" y="1406.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$466/113668368.accept (1 samples, 0.11%)</title><rect x="337.3" y="1379.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.3" y="1390.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="338.6" y="1379.0" width="1.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="341.6" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (17 samples, 1.92%)</title><rect x="339.9" y="1379.0" width="22.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="342.9" y="1390.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (17 samples, 1.92%)</title><rect x="339.9" y="1363.0" width="22.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="342.9" y="1374.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (17 samples, 1.92%)</title><rect x="339.9" y="1347.0" width="22.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="342.9" y="1358.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 0.23%)</title><rect x="339.9" y="1331.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="342.9" y="1342.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (15 samples, 1.69%)</title><rect x="342.6" y="1331.0" width="19.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.6" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (78 samples, 8.79%)</title><rect x="362.5" y="1491.0" width="103.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="365.5" y="1502.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$138/1408695561.extract (78 samples, 8.79%)</title><rect x="362.5" y="1475.0" width="103.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="365.5" y="1486.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (78 samples, 8.79%)</title><rect x="362.5" y="1459.0" width="103.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="365.5" y="1470.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (78 samples, 8.79%)</title><rect x="362.5" y="1443.0" width="103.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.5" y="1454.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (78 samples, 8.79%)</title><rect x="362.5" y="1427.0" width="103.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="365.5" y="1438.0">com/linecorp..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (78 samples, 8.79%)</title><rect x="362.5" y="1411.0" width="103.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.5" y="1422.0">com/fasterxm..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (20 samples, 2.25%)</title><rect x="363.9" y="1395.0" width="26.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="366.9" y="1406.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContentReference (1 samples, 0.11%)</title><rect x="363.9" y="1379.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.9" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/ContentReference.construct (1 samples, 0.11%)</title><rect x="363.9" y="1363.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="366.9" y="1374.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="363.9" y="1347.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="366.9" y="1358.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="363.9" y="1331.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="366.9" y="1342.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="363.9" y="1315.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="366.9" y="1326.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="363.9" y="1299.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="366.9" y="1310.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.11%)</title><rect x="363.9" y="1283.0" width="1.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="366.9" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (1 samples, 0.11%)</title><rect x="365.2" y="1379.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.2" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (1 samples, 0.11%)</title><rect x="365.2" y="1363.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.2" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (1 samples, 0.11%)</title><rect x="365.2" y="1347.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="368.2" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.11%)</title><rect x="365.2" y="1331.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="368.2" y="1342.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="365.2" y="1315.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.2" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (18 samples, 2.03%)</title><rect x="366.5" y="1379.0" width="24.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="369.5" y="1390.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (8 samples, 0.90%)</title><rect x="379.8" y="1363.0" width="10.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="382.8" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (8 samples, 0.90%)</title><rect x="379.8" y="1347.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="382.8" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (8 samples, 0.90%)</title><rect x="379.8" y="1331.0" width="10.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="382.8" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (52 samples, 5.86%)</title><rect x="390.5" y="1395.0" width="69.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.5" y="1406.0">com/fas..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (3 samples, 0.34%)</title><rect x="390.5" y="1379.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.5" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3 samples, 0.34%)</title><rect x="390.5" y="1363.0" width="4.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.5" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (4 samples, 0.45%)</title><rect x="394.5" y="1379.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="397.5" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (3 samples, 0.34%)</title><rect x="395.8" y="1363.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="398.8" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (2 samples, 0.23%)</title><rect x="397.1" y="1347.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="400.1" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (4 samples, 0.45%)</title><rect x="399.8" y="1379.0" width="5.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="402.8" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (4 samples, 0.45%)</title><rect x="399.8" y="1363.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="402.8" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (41 samples, 4.62%)</title><rect x="405.1" y="1379.0" width="54.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="408.1" y="1390.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (41 samples, 4.62%)</title><rect x="405.1" y="1363.0" width="54.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="408.1" y="1374.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.24%)</title><rect x="406.4" y="1347.0" width="14.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.4" y="1358.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="406.4" y="1331.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.4" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.34%)</title><rect x="407.8" y="1331.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="410.8" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.34%)</title><rect x="407.8" y="1315.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.8" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.34%)</title><rect x="407.8" y="1299.0" width="4.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="410.8" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.34%)</title><rect x="407.8" y="1283.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.8" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.findName (1 samples, 0.11%)</title><rect x="410.4" y="1267.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="413.4" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (6 samples, 0.68%)</title><rect x="411.8" y="1331.0" width="7.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="414.8" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._verifyNoLeadingZeroes (1 samples, 0.11%)</title><rect x="414.4" y="1315.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="417.4" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (1 samples, 0.11%)</title><rect x="414.4" y="1299.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="417.4" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (3 samples, 0.34%)</title><rect x="415.7" y="1315.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="418.7" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (3 samples, 0.34%)</title><rect x="415.7" y="1299.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.7" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.allocCharBuffer (3 samples, 0.34%)</title><rect x="415.7" y="1283.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.7" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecycler.charBufferLength (3 samples, 0.34%)</title><rect x="415.7" y="1267.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="418.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.11%)</title><rect x="419.7" y="1331.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.7" y="1342.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.11%)</title><rect x="419.7" y="1315.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="422.7" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (29 samples, 3.27%)</title><rect x="421.1" y="1347.0" width="38.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="424.1" y="1358.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (29 samples, 3.27%)</title><rect x="421.1" y="1331.0" width="38.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="424.1" y="1342.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.11%)</title><rect x="421.1" y="1315.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="424.1" y="1326.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (28 samples, 3.16%)</title><rect x="422.4" y="1315.0" width="37.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="425.4" y="1326.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (13 samples, 1.47%)</title><rect x="427.7" y="1299.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="430.7" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._closeObjectScope (1 samples, 0.11%)</title><rect x="427.7" y="1283.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="430.7" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (6 samples, 0.68%)</title><rect x="429.1" y="1283.0" width="7.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="432.1" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (6 samples, 0.68%)</title><rect x="429.1" y="1267.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.1" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (6 samples, 0.68%)</title><rect x="429.1" y="1251.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="432.1" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.findName (3 samples, 0.34%)</title><rect x="429.1" y="1235.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="432.1" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.34%)</title><rect x="433.0" y="1235.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="436.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.11%)</title><rect x="437.0" y="1283.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="440.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.emptyAndGetCurrentSegment (1 samples, 0.11%)</title><rect x="437.0" y="1267.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.buf (1 samples, 0.11%)</title><rect x="437.0" y="1251.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="440.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.23%)</title><rect x="438.4" y="1283.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="441.4" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.23%)</title><rect x="438.4" y="1267.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="441.4" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (2 samples, 0.23%)</title><rect x="438.4" y="1251.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="441.4" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipWS (3 samples, 0.34%)</title><rect x="441.0" y="1283.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (5 samples, 0.56%)</title><rect x="445.0" y="1299.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="448.0" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 0.23%)</title><rect x="449.0" y="1283.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="452.0" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.11%)</title><rect x="449.0" y="1267.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.0" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$IntegerDeserializer.deserialize (1 samples, 0.11%)</title><rect x="449.0" y="1251.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.0" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (1 samples, 0.11%)</title><rect x="449.0" y="1235.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="452.0" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (1 samples, 0.11%)</title><rect x="449.0" y="1219.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="452.0" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsInt (1 samples, 0.11%)</title><rect x="449.0" y="1203.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="452.0" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.11%)</title><rect x="449.0" y="1187.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.0" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.11%)</title><rect x="450.3" y="1267.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="453.3" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.11%)</title><rect x="450.3" y="1251.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.3" y="1262.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (1 samples, 0.11%)</title><rect x="450.3" y="1235.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="453.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (1 samples, 0.11%)</title><rect x="450.3" y="1219.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.3" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (1 samples, 0.11%)</title><rect x="450.3" y="1203.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.3" y="1214.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (1 samples, 0.11%)</title><rect x="450.3" y="1187.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="453.3" y="1198.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (1 samples, 0.11%)</title><rect x="450.3" y="1171.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="453.3" y="1182.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (3 samples, 0.34%)</title><rect x="451.7" y="1299.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.7" y="1310.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (3 samples, 0.34%)</title><rect x="451.7" y="1283.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="454.7" y="1294.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (3 samples, 0.34%)</title><rect x="451.7" y="1267.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="454.7" y="1278.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (3 samples, 0.34%)</title><rect x="451.7" y="1251.0" width="4.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="454.7" y="1262.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (3 samples, 0.34%)</title><rect x="451.7" y="1235.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="454.7" y="1246.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (3 samples, 0.34%)</title><rect x="451.7" y="1219.0" width="4.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="454.7" y="1230.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (3 samples, 0.34%)</title><rect x="455.7" y="1299.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="458.7" y="1310.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.34%)</title><rect x="455.7" y="1283.0" width="4.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="458.7" y="1294.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.23%)</title><rect x="455.7" y="1267.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="458.7" y="1278.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.11%)</title><rect x="458.3" y="1267.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.3" y="1278.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.11%)</title><rect x="458.3" y="1251.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="461.3" y="1262.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.11%)</title><rect x="458.3" y="1235.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="461.3" y="1246.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (5 samples, 0.56%)</title><rect x="459.7" y="1395.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="462.7" y="1406.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (5 samples, 0.56%)</title><rect x="459.7" y="1379.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="462.7" y="1390.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (5 samples, 0.56%)</title><rect x="459.7" y="1363.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.7" y="1374.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (5 samples, 0.56%)</title><rect x="459.7" y="1347.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="462.7" y="1358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (5 samples, 0.56%)</title><rect x="459.7" y="1331.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="462.7" y="1342.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (185 samples, 20.86%)</title><rect x="466.3" y="1491.0" width="246.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="469.3" y="1502.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.45%)</title><rect x="467.6" y="1475.0" width="5.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="470.6" y="1486.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.45%)</title><rect x="467.6" y="1459.0" width="5.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="470.6" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (24 samples, 2.71%)</title><rect x="473.0" y="1475.0" width="31.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="476.0" y="1486.0">co..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (24 samples, 2.71%)</title><rect x="473.0" y="1459.0" width="31.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="476.0" y="1470.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (24 samples, 2.71%)</title><rect x="473.0" y="1443.0" width="31.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="476.0" y="1454.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (9 samples, 1.01%)</title><rect x="474.3" y="1427.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="477.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.23%)</title><rect x="474.3" y="1411.0" width="2.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="477.3" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.23%)</title><rect x="474.3" y="1395.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.3" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.79%)</title><rect x="476.9" y="1411.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.9" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.79%)</title><rect x="476.9" y="1395.0" width="9.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="479.9" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.34%)</title><rect x="486.3" y="1427.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.3" y="1438.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.11%)</title><rect x="487.6" y="1411.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.6" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="487.6" y="1395.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.6" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.11%)</title><rect x="488.9" y="1411.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="491.9" y="1422.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (11 samples, 1.24%)</title><rect x="490.2" y="1427.0" width="14.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="493.2" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.23%)</title><rect x="492.9" y="1411.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="495.9" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (7 samples, 0.79%)</title><rect x="495.6" y="1411.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="498.6" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (7 samples, 0.79%)</title><rect x="495.6" y="1395.0" width="9.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="498.6" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (5 samples, 0.56%)</title><rect x="504.9" y="1475.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="507.9" y="1486.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (5 samples, 0.56%)</title><rect x="504.9" y="1459.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.9" y="1470.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (83 samples, 9.36%)</title><rect x="511.5" y="1475.0" width="110.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="514.5" y="1486.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (75 samples, 8.46%)</title><rect x="511.5" y="1459.0" width="99.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="514.5" y="1470.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (25 samples, 2.82%)</title><rect x="522.2" y="1443.0" width="33.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="525.2" y="1454.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (8 samples, 0.90%)</title><rect x="540.8" y="1427.0" width="10.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="543.8" y="1438.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (8 samples, 0.90%)</title><rect x="540.8" y="1411.0" width="10.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="543.8" y="1422.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (8 samples, 0.90%)</title><rect x="540.8" y="1395.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="543.8" y="1406.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.90%)</title><rect x="540.8" y="1379.0" width="10.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="543.8" y="1390.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.34%)</title><rect x="547.5" y="1363.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="550.5" y="1374.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.11%)</title><rect x="547.5" y="1347.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="550.5" y="1358.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.23%)</title><rect x="548.8" y="1347.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.8" y="1358.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.23%)</title><rect x="548.8" y="1331.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="551.8" y="1342.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.23%)</title><rect x="548.8" y="1315.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="551.8" y="1326.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="548.8" y="1299.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="551.8" y="1310.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.11%)</title><rect x="548.8" y="1283.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="551.8" y="1294.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="550.1" y="1299.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="553.1" y="1310.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.11%)</title><rect x="550.1" y="1283.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="553.1" y="1294.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.11%)</title><rect x="550.1" y="1267.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="553.1" y="1278.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.11%)</title><rect x="550.1" y="1251.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="553.1" y="1262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.34%)</title><rect x="551.4" y="1427.0" width="4.0" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="554.4" y="1438.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (2 samples, 0.23%)</title><rect x="555.4" y="1443.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="558.4" y="1454.0"></text>
</g>
<g>
<title>java/lang/Long.toString (2 samples, 0.23%)</title><rect x="555.4" y="1427.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.4" y="1438.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="555.4" y="1411.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="558.4" y="1422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="555.4" y="1395.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="558.4" y="1406.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="555.4" y="1379.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="558.4" y="1390.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="555.4" y="1363.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.4" y="1374.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="555.4" y="1347.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="558.4" y="1358.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="555.4" y="1331.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="558.4" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.11%)</title><rect x="555.4" y="1315.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="558.4" y="1326.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.11%)</title><rect x="556.8" y="1411.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="559.8" y="1422.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="558.1" y="1443.0" width="2.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="561.1" y="1454.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (38 samples, 4.28%)</title><rect x="560.8" y="1443.0" width="50.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="563.8" y="1454.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (35 samples, 3.95%)</title><rect x="564.7" y="1427.0" width="46.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.7" y="1438.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (15 samples, 1.69%)</title><rect x="564.7" y="1411.0" width="20.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.7" y="1422.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (15 samples, 1.69%)</title><rect x="564.7" y="1395.0" width="20.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="567.7" y="1406.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (6 samples, 0.68%)</title><rect x="576.7" y="1379.0" width="8.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.7" y="1390.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (20 samples, 2.25%)</title><rect x="584.7" y="1411.0" width="26.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="587.7" y="1422.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (20 samples, 2.25%)</title><rect x="584.7" y="1395.0" width="26.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="587.7" y="1406.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.34%)</title><rect x="587.4" y="1379.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="590.4" y="1390.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.34%)</title><rect x="587.4" y="1363.0" width="4.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="590.4" y="1374.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.34%)</title><rect x="587.4" y="1347.0" width="4.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="590.4" y="1358.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.11%)</title><rect x="590.0" y="1331.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="593.0" y="1342.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 1.69%)</title><rect x="591.4" y="1379.0" width="19.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="594.4" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (8 samples, 0.90%)</title><rect x="611.3" y="1459.0" width="10.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="614.3" y="1470.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (8 samples, 0.90%)</title><rect x="611.3" y="1443.0" width="10.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.3" y="1454.0"></text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 0.45%)</title><rect x="611.3" y="1427.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="614.3" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.23%)</title><rect x="611.3" y="1411.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="614.3" y="1422.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.23%)</title><rect x="614.0" y="1411.0" width="2.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="617.0" y="1422.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.get (4 samples, 0.45%)</title><rect x="616.6" y="1427.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="619.6" y="1438.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (4 samples, 0.45%)</title><rect x="616.6" y="1411.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="619.6" y="1422.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.23%)</title><rect x="619.3" y="1395.0" width="2.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="622.3" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (47 samples, 5.30%)</title><rect x="622.0" y="1475.0" width="62.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="625.0" y="1486.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (46 samples, 5.19%)</title><rect x="623.3" y="1459.0" width="61.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.3" y="1470.0">com/li..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (8 samples, 0.90%)</title><rect x="640.6" y="1443.0" width="10.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="643.6" y="1454.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (7 samples, 0.79%)</title><rect x="651.2" y="1443.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="654.2" y="1454.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.11%)</title><rect x="651.2" y="1427.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="654.2" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (6 samples, 0.68%)</title><rect x="652.5" y="1427.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="655.5" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.45%)</title><rect x="660.5" y="1443.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.5" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.45%)</title><rect x="660.5" y="1427.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.5" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.11%)</title><rect x="665.9" y="1443.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="668.9" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.11%)</title><rect x="665.9" y="1427.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="668.9" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$474/1616246881.get$Lambda (1 samples, 0.11%)</title><rect x="665.9" y="1411.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="668.9" y="1422.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.11%)</title><rect x="665.9" y="1395.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="668.9" y="1406.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.11%)</title><rect x="665.9" y="1379.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="668.9" y="1390.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.11%)</title><rect x="665.9" y="1363.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="668.9" y="1374.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.11%)</title><rect x="665.9" y="1347.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="668.9" y="1358.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.11%)</title><rect x="665.9" y="1331.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="668.9" y="1342.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.11%)</title><rect x="665.9" y="1315.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="668.9" y="1326.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.11%)</title><rect x="665.9" y="1299.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="668.9" y="1310.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.11%)</title><rect x="665.9" y="1283.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="668.9" y="1294.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.11%)</title><rect x="665.9" y="1267.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="668.9" y="1278.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.11%)</title><rect x="665.9" y="1251.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="668.9" y="1262.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.11%)</title><rect x="665.9" y="1235.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="668.9" y="1246.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.size (5 samples, 0.56%)</title><rect x="667.2" y="1443.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="670.2" y="1454.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.11%)</title><rect x="668.5" y="1427.0" width="1.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="671.5" y="1438.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.34%)</title><rect x="669.8" y="1427.0" width="4.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="672.8" y="1438.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.34%)</title><rect x="669.8" y="1411.0" width="4.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="672.8" y="1422.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="673.8" y="1443.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.8" y="1454.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.11%)</title><rect x="673.8" y="1427.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="676.8" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.79%)</title><rect x="675.2" y="1443.0" width="9.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="678.2" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.79%)</title><rect x="675.2" y="1427.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="678.2" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.79%)</title><rect x="675.2" y="1411.0" width="9.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="678.2" y="1422.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.11%)</title><rect x="675.2" y="1395.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.2" y="1406.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.11%)</title><rect x="675.2" y="1379.0" width="1.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="678.2" y="1390.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.45%)</title><rect x="676.5" y="1395.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.5" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$474/1616246881.accept (1 samples, 0.11%)</title><rect x="680.5" y="1379.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="683.5" y="1390.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$1 (1 samples, 0.11%)</title><rect x="680.5" y="1363.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.5" y="1374.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.23%)</title><rect x="681.8" y="1395.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="684.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (2 samples, 0.23%)</title><rect x="684.5" y="1475.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="687.5" y="1486.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.11%)</title><rect x="687.1" y="1475.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.1" y="1486.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.11%)</title><rect x="687.1" y="1459.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.1" y="1470.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.11%)</title><rect x="687.1" y="1443.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.1" y="1454.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.11%)</title><rect x="687.1" y="1427.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="690.1" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 2.03%)</title><rect x="688.5" y="1475.0" width="23.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="691.5" y="1486.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 2.03%)</title><rect x="688.5" y="1459.0" width="23.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="691.5" y="1470.0">j..</text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.45%)</title><rect x="695.1" y="1443.0" width="5.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="698.1" y="1454.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.45%)</title><rect x="695.1" y="1427.0" width="5.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="698.1" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (1 samples, 0.11%)</title><rect x="700.4" y="1443.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="703.4" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (8 samples, 0.90%)</title><rect x="701.8" y="1443.0" width="10.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="704.8" y="1454.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.23%)</title><rect x="701.8" y="1427.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="704.8" y="1438.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 0.68%)</title><rect x="704.4" y="1427.0" width="8.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="707.4" y="1438.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$480/453588509.accept (5 samples, 0.56%)</title><rect x="705.8" y="1411.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="708.8" y="1422.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$0 (5 samples, 0.56%)</title><rect x="705.8" y="1395.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="708.8" y="1406.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (5 samples, 0.56%)</title><rect x="705.8" y="1379.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="708.8" y="1390.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (5 samples, 0.56%)</title><rect x="705.8" y="1363.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="708.8" y="1374.0"></text>
</g>
<g>
<title>java/time/Duration.create (5 samples, 0.56%)</title><rect x="705.8" y="1347.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="708.8" y="1358.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.45%)</title><rect x="707.1" y="1331.0" width="5.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="710.1" y="1342.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.34%)</title><rect x="708.4" y="1315.0" width="4.0" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="711.4" y="1326.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.56%)</title><rect x="712.4" y="1491.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="715.4" y="1502.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.56%)</title><rect x="712.4" y="1475.0" width="6.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="715.4" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.23%)</title><rect x="719.1" y="1555.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="722.1" y="1566.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.23%)</title><rect x="719.1" y="1539.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="722.1" y="1550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.23%)</title><rect x="719.1" y="1523.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="722.1" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.23%)</title><rect x="719.1" y="1507.0" width="2.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="722.1" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (195 samples, 21.98%)</title><rect x="721.7" y="1555.0" width="259.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="724.7" y="1566.0">java/util/concurrent/ThreadPoolExec..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (194 samples, 21.87%)</title><rect x="723.1" y="1539.0" width="258.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="726.1" y="1550.0">java/util/concurrent/LinkedBlockin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (153 samples, 17.25%)</title><rect x="751.0" y="1523.0" width="203.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.0" y="1534.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (9 samples, 1.01%)</title><rect x="752.3" y="1507.0" width="12.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="755.3" y="1518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 1.01%)</title><rect x="752.3" y="1491.0" width="12.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="755.3" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (143 samples, 16.12%)</title><rect x="764.3" y="1507.0" width="190.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="767.3" y="1518.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (143 samples, 16.12%)</title><rect x="764.3" y="1491.0" width="190.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="767.3" y="1502.0">jdk/internal/misc/Unsafe...</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.23%)</title><rect x="768.3" y="1475.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="771.3" y="1486.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (2 samples, 0.23%)</title><rect x="770.9" y="1475.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.9" y="1486.0"></text>
</g>
<g>
<title>Unsafe_Park (134 samples, 15.11%)</title><rect x="773.6" y="1475.0" width="178.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="776.6" y="1486.0">Unsafe_Park</text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.11%)</title><rect x="774.9" y="1459.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="777.9" y="1470.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (22 samples, 2.48%)</title><rect x="776.3" y="1459.0" width="29.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="779.3" y="1470.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (11 samples, 1.24%)</title><rect x="784.3" y="1443.0" width="14.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="787.3" y="1454.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.11%)</title><rect x="792.2" y="1427.0" width="1.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="795.2" y="1438.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (2 samples, 0.23%)</title><rect x="793.6" y="1427.0" width="2.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="796.6" y="1438.0"></text>
</g>
<g>
<title>update_get_addr (2 samples, 0.23%)</title><rect x="796.2" y="1427.0" width="2.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="799.2" y="1438.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.45%)</title><rect x="798.9" y="1443.0" width="5.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="801.9" y="1454.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.11%)</title><rect x="804.2" y="1443.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="807.2" y="1454.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (7 samples, 0.79%)</title><rect x="805.5" y="1459.0" width="9.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="808.5" y="1470.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.11%)</title><rect x="814.8" y="1459.0" width="1.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="817.8" y="1470.0"></text>
</g>
<g>
<title>__lll_unlock_wake (36 samples, 4.06%)</title><rect x="816.2" y="1459.0" width="47.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="819.2" y="1470.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (53 samples, 5.98%)</title><rect x="864.1" y="1459.0" width="70.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="867.1" y="1470.0">__pthrea..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.34%)</title><rect x="934.6" y="1459.0" width="4.0" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="937.6" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.23%)</title><rect x="938.6" y="1459.0" width="2.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="941.6" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.11%)</title><rect x="941.2" y="1459.0" width="1.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="944.2" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.45%)</title><rect x="942.6" y="1459.0" width="5.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="945.6" y="1470.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.34%)</title><rect x="947.9" y="1459.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="950.9" y="1470.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.23%)</title><rect x="951.9" y="1475.0" width="2.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="954.9" y="1486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (4 samples, 0.45%)</title><rect x="954.5" y="1523.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.5" y="1534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (4 samples, 0.45%)</title><rect x="954.5" y="1507.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="957.5" y="1518.0"></text>
</g>
<g>
<title>java/lang/Thread.interrupted (4 samples, 0.45%)</title><rect x="954.5" y="1491.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="957.5" y="1502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (16 samples, 1.80%)</title><rect x="959.9" y="1523.0" width="21.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="962.9" y="1534.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (16 samples, 1.80%)</title><rect x="959.9" y="1507.0" width="21.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="962.9" y="1518.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (16 samples, 1.80%)</title><rect x="959.9" y="1491.0" width="21.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.9" y="1502.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (16 samples, 1.80%)</title><rect x="959.9" y="1475.0" width="21.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="962.9" y="1486.0">j..</text>
</g>
<g>
<title>start_thread (157 samples, 17.70%)</title><rect x="981.1" y="1603.0" width="208.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="984.1" y="1614.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (157 samples, 17.70%)</title><rect x="981.1" y="1587.0" width="208.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="984.1" y="1598.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (157 samples, 17.70%)</title><rect x="981.1" y="1571.0" width="208.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="984.1" y="1582.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2 samples, 0.23%)</title><rect x="981.1" y="1555.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="984.1" y="1566.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="981.1" y="1539.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="984.1" y="1550.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.11%)</title><rect x="981.1" y="1523.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.1" y="1534.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.11%)</title><rect x="981.1" y="1507.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="984.1" y="1518.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.11%)</title><rect x="982.5" y="1539.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="985.5" y="1550.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.11%)</title><rect x="982.5" y="1523.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="985.5" y="1534.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.11%)</title><rect x="982.5" y="1507.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="985.5" y="1518.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.11%)</title><rect x="982.5" y="1491.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="985.5" y="1502.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (155 samples, 17.47%)</title><rect x="983.8" y="1555.0" width="206.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.8" y="1566.0">JavaThread::thread_main_inn..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (154 samples, 17.36%)</title><rect x="983.8" y="1539.0" width="204.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.8" y="1550.0">CompileBroker::compiler_thr..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (154 samples, 17.36%)</title><rect x="983.8" y="1523.0" width="204.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.8" y="1534.0">CompileBroker::invoke_compi..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (153 samples, 17.25%)</title><rect x="983.8" y="1507.0" width="203.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.8" y="1518.0">C2Compiler::compile_method(..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (153 samples, 17.25%)</title><rect x="983.8" y="1491.0" width="203.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="986.8" y="1502.0">Compile::Compile(ciEnv*, C2..</text>
</g>
<g>
<title>Compile::Code_Gen() (75 samples, 8.46%)</title><rect x="983.8" y="1475.0" width="99.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="986.8" y="1486.0">Compile::Cod..</text>
</g>
<g>
<title>Compile::Output() (3 samples, 0.34%)</title><rect x="983.8" y="1459.0" width="4.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="986.8" y="1470.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (2 samples, 0.23%)</title><rect x="983.8" y="1443.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="986.8" y="1454.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (2 samples, 0.23%)</title><rect x="983.8" y="1427.0" width="2.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="986.8" y="1438.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.11%)</title><rect x="983.8" y="1411.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="986.8" y="1422.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.11%)</title><rect x="983.8" y="1395.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="986.8" y="1406.0"></text>
</g>
<g>
<title>MachSpillCopyNode::size(PhaseRegAlloc*) const (1 samples, 0.11%)</title><rect x="985.1" y="1411.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="988.1" y="1422.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.11%)</title><rect x="986.5" y="1443.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="989.5" y="1454.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="987.8" y="1459.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="990.8" y="1470.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.11%)</title><rect x="987.8" y="1443.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="990.8" y="1454.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.11%)</title><rect x="987.8" y="1427.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="990.8" y="1438.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.11%)</title><rect x="987.8" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="990.8" y="1422.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 0.68%)</title><rect x="989.1" y="1459.0" width="8.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="992.1" y="1470.0"></text>
</g>
<g>
<title>DecodeNNode::Opcode() const (1 samples, 0.11%)</title><rect x="989.1" y="1443.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.1" y="1454.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (5 samples, 0.56%)</title><rect x="990.5" y="1443.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="993.5" y="1454.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.34%)</title><rect x="991.8" y="1427.0" width="4.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="994.8" y="1438.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.11%)</title><rect x="995.8" y="1427.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.8" y="1438.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="995.8" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="998.8" y="1422.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="995.8" y="1395.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.8" y="1406.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.11%)</title><rect x="995.8" y="1379.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="998.8" y="1390.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.11%)</title><rect x="995.8" y="1363.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.8" y="1374.0"></text>
</g>
<g>
<title>State::_sub_Op_ConL(Node const*) (1 samples, 0.11%)</title><rect x="995.8" y="1347.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="998.8" y="1358.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (1 samples, 0.11%)</title><rect x="997.1" y="1459.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1000.1" y="1470.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (1 samples, 0.11%)</title><rect x="997.1" y="1443.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1000.1" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (6 samples, 0.68%)</title><rect x="998.4" y="1459.0" width="8.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1001.4" y="1470.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.11%)</title><rect x="998.4" y="1443.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1001.4" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::do_DFS(Tarjan*, unsigned int) (1 samples, 0.11%)</title><rect x="998.4" y="1427.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1001.4" y="1438.0"></text>
</g>
<g>
<title>Block_Stack::most_frequent_successor(Block*) (1 samples, 0.11%)</title><rect x="998.4" y="1411.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1001.4" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.56%)</title><rect x="999.8" y="1443.0" width="6.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1002.8" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="999.8" y="1427.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1002.8" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.11%)</title><rect x="999.8" y="1411.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1002.8" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.11%)</title><rect x="1001.1" y="1427.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1004.1" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.11%)</title><rect x="1001.1" y="1411.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1004.1" y="1422.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.11%)</title><rect x="1002.4" y="1427.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1005.4" y="1438.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.11%)</title><rect x="1002.4" y="1411.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1005.4" y="1422.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (1 samples, 0.11%)</title><rect x="1002.4" y="1395.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1005.4" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.11%)</title><rect x="1003.8" y="1427.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1006.8" y="1438.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.11%)</title><rect x="1005.1" y="1427.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1008.1" y="1438.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.11%)</title><rect x="1005.1" y="1411.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.1" y="1422.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1005.1" y="1395.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1008.1" y="1406.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (58 samples, 6.54%)</title><rect x="1006.4" y="1459.0" width="77.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1009.4" y="1470.0">PhaseChai..</text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1006.4" y="1443.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1009.4" y="1454.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.11%)</title><rect x="1007.7" y="1443.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.7" y="1454.0"></text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.11%)</title><rect x="1009.1" y="1443.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.1" y="1454.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.11%)</title><rect x="1010.4" y="1443.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1013.4" y="1454.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (2 samples, 0.23%)</title><rect x="1011.7" y="1443.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1014.7" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.23%)</title><rect x="1014.4" y="1443.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1017.4" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::bias_color(LRG&amp;, int) (1 samples, 0.11%)</title><rect x="1014.4" y="1427.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1017.4" y="1438.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.11%)</title><rect x="1015.7" y="1427.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1018.7" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.11%)</title><rect x="1015.7" y="1411.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1018.7" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 0.34%)</title><rect x="1017.1" y="1443.0" width="3.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1020.1" y="1454.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.23%)</title><rect x="1017.1" y="1427.0" width="2.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1020.1" y="1438.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.11%)</title><rect x="1019.7" y="1427.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.68%)</title><rect x="1021.0" y="1443.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1024.0" y="1454.0"></text>
</g>
<g>
<title>rRegIOper::in_RegMask(int) const (1 samples, 0.11%)</title><rect x="1027.7" y="1427.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1030.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (11 samples, 1.24%)</title><rect x="1029.0" y="1443.0" width="14.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1032.0" y="1454.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.11%)</title><rect x="1030.4" y="1427.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1033.4" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.11%)</title><rect x="1031.7" y="1427.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1034.7" y="1438.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="1031.7" y="1411.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1034.7" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (4 samples, 0.45%)</title><rect x="1033.0" y="1427.0" width="5.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1036.0" y="1438.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.11%)</title><rect x="1035.7" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1038.7" y="1422.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.11%)</title><rect x="1035.7" y="1395.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1038.7" y="1406.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1037.0" y="1411.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1040.0" y="1422.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.23%)</title><rect x="1038.3" y="1427.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1041.3" y="1438.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.11%)</title><rect x="1039.7" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1042.7" y="1422.0"></text>
</g>
<g>
<title>RegMask::is_UP() const (2 samples, 0.23%)</title><rect x="1041.0" y="1427.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1044.0" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.45%)</title><rect x="1043.7" y="1443.0" width="5.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.7" y="1454.0"></text>
</g>
<g>
<title>RegMask::Size() const (2 samples, 0.23%)</title><rect x="1045.0" y="1427.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1048.0" y="1438.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.11%)</title><rect x="1047.7" y="1427.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1050.7" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.11%)</title><rect x="1049.0" y="1443.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1052.0" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.68%)</title><rect x="1050.3" y="1443.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1053.3" y="1454.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.34%)</title><rect x="1054.3" y="1427.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1057.3" y="1438.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (1 samples, 0.11%)</title><rect x="1058.3" y="1443.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1061.3" y="1454.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1058.3" y="1427.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1061.3" y="1438.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1058.3" y="1411.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1061.3" y="1422.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (6 samples, 0.68%)</title><rect x="1059.6" y="1443.0" width="8.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1062.6" y="1454.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.11%)</title><rect x="1059.6" y="1427.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1062.6" y="1438.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.56%)</title><rect x="1061.0" y="1427.0" width="6.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1064.0" y="1438.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (2 samples, 0.23%)</title><rect x="1061.0" y="1411.0" width="2.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1064.0" y="1422.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (2 samples, 0.23%)</title><rect x="1063.6" y="1411.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1066.6" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.11%)</title><rect x="1066.3" y="1411.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1069.3" y="1422.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.23%)</title><rect x="1067.6" y="1443.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1070.6" y="1454.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.23%)</title><rect x="1067.6" y="1427.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1070.6" y="1438.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (2 samples, 0.23%)</title><rect x="1070.3" y="1443.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.3" y="1454.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.11%)</title><rect x="1071.6" y="1427.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1074.6" y="1438.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.11%)</title><rect x="1072.9" y="1443.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1075.9" y="1454.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.11%)</title><rect x="1072.9" y="1427.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.9" y="1438.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.68%)</title><rect x="1074.3" y="1443.0" width="7.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1077.3" y="1454.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.23%)</title><rect x="1078.3" y="1427.0" width="2.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1081.3" y="1438.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.11%)</title><rect x="1079.6" y="1411.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1082.6" y="1422.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, unsigned int, VectorSet&amp;) (1 samples, 0.11%)</title><rect x="1080.9" y="1427.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1083.9" y="1438.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.11%)</title><rect x="1082.2" y="1443.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1085.2" y="1454.0"></text>
</g>
<g>
<title>Compile::Optimize() (65 samples, 7.33%)</title><rect x="1083.6" y="1475.0" width="86.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1086.6" y="1486.0">Compile::O..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (2 samples, 0.23%)</title><rect x="1083.6" y="1459.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.6" y="1470.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (2 samples, 0.23%)</title><rect x="1083.6" y="1443.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.6" y="1454.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&amp;) [clone .part.263] (1 samples, 0.11%)</title><rect x="1084.9" y="1427.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1087.9" y="1438.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.11%)</title><rect x="1086.2" y="1459.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1089.2" y="1470.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_one(PhaseIterGVN&amp;) (1 samples, 0.11%)</title><rect x="1086.2" y="1443.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.2" y="1454.0"></text>
</g>
<g>
<title>LateInlineCallGenerator::do_late_inline() (1 samples, 0.11%)</title><rect x="1086.2" y="1427.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.2" y="1438.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1086.2" y="1411.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1089.2" y="1422.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1086.2" y="1395.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1089.2" y="1406.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1086.2" y="1379.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1089.2" y="1390.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1086.2" y="1363.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.2" y="1374.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1086.2" y="1347.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.2" y="1358.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1086.2" y="1331.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1089.2" y="1342.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1086.2" y="1315.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.2" y="1326.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1086.2" y="1299.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.2" y="1310.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1086.2" y="1283.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.2" y="1294.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1086.2" y="1267.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.2" y="1278.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1086.2" y="1251.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1089.2" y="1262.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1086.2" y="1235.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1089.2" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1086.2" y="1219.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1089.2" y="1230.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1086.2" y="1203.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1089.2" y="1214.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1086.2" y="1187.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.2" y="1198.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1086.2" y="1171.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.2" y="1182.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1086.2" y="1155.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.2" y="1166.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.11%)</title><rect x="1086.2" y="1139.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1089.2" y="1150.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1086.2" y="1123.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1089.2" y="1134.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1086.2" y="1107.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1089.2" y="1118.0"></text>
</g>
<g>
<title>TypeKlassPtr::eq(Type const*) const (1 samples, 0.11%)</title><rect x="1086.2" y="1091.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1089.2" y="1102.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (25 samples, 2.82%)</title><rect x="1087.6" y="1459.0" width="33.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.6" y="1470.0">Co..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (25 samples, 2.82%)</title><rect x="1087.6" y="1443.0" width="33.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.6" y="1454.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1087.6" y="1427.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1090.6" y="1438.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.11%)</title><rect x="1087.6" y="1411.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.6" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.34%)</title><rect x="1088.9" y="1427.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1091.9" y="1438.0"></text>
</g>
<g>
<title>RegionNode::is_CFG() const (1 samples, 0.11%)</title><rect x="1091.6" y="1411.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1094.6" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (13 samples, 1.47%)</title><rect x="1092.9" y="1427.0" width="17.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1095.9" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 1.47%)</title><rect x="1092.9" y="1411.0" width="17.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.9" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (9 samples, 1.01%)</title><rect x="1096.9" y="1395.0" width="12.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1099.9" y="1406.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.11%)</title><rect x="1098.2" y="1379.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.2" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (7 samples, 0.79%)</title><rect x="1099.5" y="1379.0" width="9.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1102.5" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_loop(Node*) const (1 samples, 0.11%)</title><rect x="1108.9" y="1395.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1111.9" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.23%)</title><rect x="1110.2" y="1427.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1113.2" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree_impl(Node*, int) (1 samples, 0.11%)</title><rect x="1111.5" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.5" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (3 samples, 0.34%)</title><rect x="1112.8" y="1427.0" width="4.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1115.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.11%)</title><rect x="1112.8" y="1411.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1115.8" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.11%)</title><rect x="1112.8" y="1395.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.8" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.23%)</title><rect x="1114.2" y="1411.0" width="2.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.2" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.11%)</title><rect x="1114.2" y="1395.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1117.2" y="1406.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1114.2" y="1379.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1117.2" y="1390.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1115.5" y="1395.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1118.5" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.11%)</title><rect x="1115.5" y="1379.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1118.5" y="1390.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.11%)</title><rect x="1116.8" y="1427.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1119.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1118.2" y="1427.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1121.2" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1118.2" y="1411.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1121.2" y="1422.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1118.2" y="1395.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1121.2" y="1406.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.11%)</title><rect x="1118.2" y="1379.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.2" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1363.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1121.2" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1347.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1121.2" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1331.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.2" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1315.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1121.2" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1299.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1121.2" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1283.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.2" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1267.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.2" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1251.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1121.2" y="1262.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1118.2" y="1235.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1121.2" y="1246.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1118.2" y="1219.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1121.2" y="1230.0"></text>
</g>
<g>
<title>resource_free_bytes(char*, unsigned long) (1 samples, 0.11%)</title><rect x="1119.5" y="1427.0" width="1.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1122.5" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (7 samples, 0.79%)</title><rect x="1120.8" y="1459.0" width="9.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1123.8" y="1470.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (7 samples, 0.79%)</title><rect x="1120.8" y="1443.0" width="9.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1123.8" y="1454.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1120.8" y="1427.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1123.8" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.11%)</title><rect x="1120.8" y="1411.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1123.8" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (6 samples, 0.68%)</title><rect x="1122.2" y="1427.0" width="7.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="1438.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (6 samples, 0.68%)</title><rect x="1122.2" y="1411.0" width="7.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.2" y="1422.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1122.2" y="1395.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.2" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1122.2" y="1379.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.2" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1122.2" y="1363.0" width="2.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.2" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1122.2" y="1347.0" width="2.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.2" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1122.2" y="1331.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.2" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1315.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.2" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1299.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.2" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1283.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1267.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1251.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1125.2" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1235.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1219.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1125.2" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1203.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1187.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1171.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.2" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1155.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1139.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1123.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1107.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1091.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1075.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1059.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1043.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1125.2" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1027.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.2" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="1011.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="995.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.2" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="979.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.2" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="963.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="947.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="931.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1125.2" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="915.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1125.2" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="899.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1125.2" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="883.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.2" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="867.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1125.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="851.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="835.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="819.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="803.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1125.2" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="787.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="771.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="755.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1125.2" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="739.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="723.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.2" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="707.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.2" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="691.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1125.2" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="675.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="659.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.2" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="643.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1125.2" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="627.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.2" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="611.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.2" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="595.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.2" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="579.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.2" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="563.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1125.2" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="547.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1125.2" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="531.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="515.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1125.2" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="499.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="483.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.2" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="467.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1125.2" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="451.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="435.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1125.2" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="419.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.2" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="403.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1125.2" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="387.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="371.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="355.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="339.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="323.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1125.2" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="307.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.2" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="291.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="275.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1125.2" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="259.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="243.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="227.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1125.2" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="211.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1125.2" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="195.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1125.2" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="179.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="163.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.2" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="147.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1125.2" y="158.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="131.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="142.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="115.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1125.2" y="126.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="99.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1125.2" y="110.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="83.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.2" y="94.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1122.2" y="67.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.2" y="78.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1122.2" y="51.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1125.2" y="62.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.11%)</title><rect x="1122.2" y="35.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1125.2" y="46.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1315.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1126.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1299.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1283.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1267.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1251.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1235.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1126.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1219.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1203.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1187.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1171.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1155.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1139.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1123.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1107.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1091.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1075.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1126.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1059.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1043.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1027.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="1011.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1126.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="995.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="979.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="963.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="947.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="931.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="915.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="899.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="883.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="867.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1126.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="851.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="835.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1126.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="819.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="803.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="787.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="771.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="755.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="739.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="723.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="707.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="691.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1126.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="675.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="659.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="643.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="627.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="611.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="595.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="579.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="563.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1126.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="547.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="531.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1126.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="515.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1126.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="499.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="483.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="467.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1126.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="451.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1126.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="435.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1126.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="419.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1126.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="403.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="387.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1126.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="371.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1123.5" y="355.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1126.5" y="366.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1123.5" y="339.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1126.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (3 samples, 0.34%)</title><rect x="1124.8" y="1395.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1127.8" y="1406.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1124.8" y="1379.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.8" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1126.1" y="1379.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.1" y="1390.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1126.1" y="1363.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.1" y="1374.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (2 samples, 0.23%)</title><rect x="1126.1" y="1347.0" width="2.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="1358.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1331.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1315.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1129.1" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1299.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1129.1" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1283.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1267.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1251.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1129.1" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1235.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.1" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1219.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.1" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1203.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1129.1" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1187.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1129.1" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1171.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.1" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1155.0" width="1.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1129.1" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1139.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.1" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1123.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.1" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1107.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1129.1" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1126.1" y="1091.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1129.1" y="1102.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1126.1" y="1075.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1129.1" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1331.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.5" y="1342.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1315.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.5" y="1326.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1299.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="1310.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1283.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.5" y="1294.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1267.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.5" y="1278.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1251.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.5" y="1262.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1235.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="1246.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1219.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.5" y="1230.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1203.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.5" y="1214.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1187.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="1198.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1171.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="1182.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1155.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1139.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.5" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1123.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1107.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1091.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1075.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1059.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1043.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1027.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="1011.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.5" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="995.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="1006.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="979.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="963.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="974.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="947.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.5" y="958.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="931.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="915.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.5" y="926.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="899.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="910.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="883.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="894.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="867.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="851.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.5" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="835.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.5" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="819.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.5" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="803.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.5" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="787.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.5" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="771.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.5" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="755.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="739.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.5" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="723.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1130.5" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="707.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="691.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="675.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="659.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.5" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="643.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.5" y="654.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="627.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.5" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="611.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="622.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="595.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.5" y="606.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="579.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="590.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="563.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.5" y="574.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="547.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.5" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="531.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1130.5" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="515.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="526.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="499.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.5" y="510.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="483.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="494.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="467.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.5" y="478.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="451.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.5" y="462.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="435.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1130.5" y="446.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="419.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="430.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="403.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.5" y="414.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="387.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.5" y="398.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="371.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.5" y="382.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="355.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.5" y="366.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="339.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="350.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="323.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="334.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="307.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1130.5" y="318.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="291.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="302.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="275.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.5" y="286.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="259.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.5" y="270.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="243.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.5" y="254.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="227.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.5" y="238.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="211.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.5" y="222.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="195.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.5" y="206.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="179.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.5" y="190.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="163.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="174.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.11%)</title><rect x="1127.5" y="147.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.5" y="158.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1127.5" y="131.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.5" y="142.0"></text>
</g>
<g>
<title>MergeMemNode::set_memory_at(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1128.8" y="1395.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1131.8" y="1406.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.11%)</title><rect x="1128.8" y="1379.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.8" y="1390.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="1128.8" y="1363.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1131.8" y="1374.0"></text>
</g>
<g>
<title>PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN&amp;, LoopOptsMode) (1 samples, 0.11%)</title><rect x="1130.1" y="1459.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.1" y="1470.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.11%)</title><rect x="1130.1" y="1443.0" width="1.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1133.1" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (14 samples, 1.58%)</title><rect x="1131.5" y="1459.0" width="18.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.5" y="1470.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1443.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.5" y="1454.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1427.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="1438.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1411.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1134.5" y="1422.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1395.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.5" y="1406.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1379.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1134.5" y="1390.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1363.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="1374.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1347.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1134.5" y="1358.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1331.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1134.5" y="1342.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1315.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.5" y="1326.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.11%)</title><rect x="1131.5" y="1299.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.5" y="1310.0"></text>
</g>
<g>
<title>IdealLoopTree::remove_safepoints(PhaseIdealLoop*, bool) (1 samples, 0.11%)</title><rect x="1131.5" y="1283.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1134.5" y="1294.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1131.5" y="1267.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1134.5" y="1278.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.11%)</title><rect x="1131.5" y="1251.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1134.5" y="1262.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1131.5" y="1235.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.5" y="1246.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.11%)</title><rect x="1132.8" y="1443.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1135.8" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.45%)</title><rect x="1134.1" y="1443.0" width="5.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1137.1" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.23%)</title><rect x="1136.8" y="1427.0" width="2.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (2 samples, 0.23%)</title><rect x="1136.8" y="1411.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.8" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (4 samples, 0.45%)</title><rect x="1139.4" y="1443.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1142.4" y="1454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.34%)</title><rect x="1140.8" y="1427.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1143.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (3 samples, 0.34%)</title><rect x="1140.8" y="1411.0" width="4.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.8" y="1422.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (2 samples, 0.23%)</title><rect x="1142.1" y="1395.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.1" y="1406.0"></text>
</g>
<g>
<title>PhaseIdealLoop::eliminate_useless_predicates() [clone .part.156] (1 samples, 0.11%)</title><rect x="1144.8" y="1443.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1147.8" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.11%)</title><rect x="1144.8" y="1427.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1147.8" y="1438.0"></text>
</g>
<g>
<title>Node::hash() const (1 samples, 0.11%)</title><rect x="1144.8" y="1411.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1147.8" y="1422.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.34%)</title><rect x="1146.1" y="1443.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.1" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.23%)</title><rect x="1146.1" y="1427.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1149.1" y="1438.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1146.1" y="1411.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.1" y="1422.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1146.1" y="1395.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.1" y="1406.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1147.4" y="1411.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.4" y="1422.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.11%)</title><rect x="1147.4" y="1395.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.4" y="1406.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1379.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1363.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.4" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1347.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.4" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1331.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.4" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1315.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.4" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1299.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.4" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1283.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.4" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1267.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.4" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1251.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.4" y="1262.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1235.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.4" y="1246.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1219.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.4" y="1230.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1203.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.4" y="1214.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1147.4" y="1187.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1150.4" y="1198.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1147.4" y="1171.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.4" y="1182.0"></text>
</g>
<g>
<title>TypeInt::singleton() const (1 samples, 0.11%)</title><rect x="1148.8" y="1427.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (14 samples, 1.58%)</title><rect x="1150.1" y="1459.0" width="18.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1153.1" y="1470.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 1.58%)</title><rect x="1150.1" y="1443.0" width="18.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1153.1" y="1454.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1150.1" y="1427.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1153.1" y="1438.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1150.1" y="1411.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1153.1" y="1422.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1151.4" y="1427.0" width="1.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1154.4" y="1438.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1151.4" y="1411.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1154.4" y="1422.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.11%)</title><rect x="1151.4" y="1395.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.4" y="1406.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.11%)</title><rect x="1151.4" y="1379.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="1390.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.11%)</title><rect x="1151.4" y="1363.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="1374.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.11%)</title><rect x="1151.4" y="1347.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.4" y="1358.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (2 samples, 0.23%)</title><rect x="1152.8" y="1427.0" width="2.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.8" y="1438.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (6 samples, 0.68%)</title><rect x="1155.4" y="1427.0" width="8.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.4" y="1438.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.11%)</title><rect x="1158.1" y="1411.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1161.1" y="1422.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.11%)</title><rect x="1158.1" y="1395.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1161.1" y="1406.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (3 samples, 0.34%)</title><rect x="1159.4" y="1411.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="1422.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.11%)</title><rect x="1159.4" y="1395.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1162.4" y="1406.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.11%)</title><rect x="1160.7" y="1395.0" width="1.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.7" y="1406.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.11%)</title><rect x="1162.1" y="1395.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.1" y="1406.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1163.4" y="1427.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.4" y="1438.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1164.7" y="1427.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.7" y="1438.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.23%)</title><rect x="1166.1" y="1427.0" width="2.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1169.1" y="1438.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (2 samples, 0.23%)</title><rect x="1166.1" y="1411.0" width="2.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.1" y="1422.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1395.0" width="2.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1169.1" y="1406.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1379.0" width="2.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.1" y="1390.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1363.0" width="2.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.1" y="1374.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1347.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.1" y="1358.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1331.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="1342.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1315.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.1" y="1326.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.23%)</title><rect x="1166.1" y="1299.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="1310.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1166.1" y="1283.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.1" y="1294.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1166.1" y="1267.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1169.1" y="1278.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.11%)</title><rect x="1166.1" y="1251.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.1" y="1262.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1166.1" y="1235.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1169.1" y="1246.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1166.1" y="1219.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1169.1" y="1230.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.11%)</title><rect x="1167.4" y="1283.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.4" y="1294.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.11%)</title><rect x="1167.4" y="1267.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.4" y="1278.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.11%)</title><rect x="1168.7" y="1459.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1171.7" y="1470.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.11%)</title><rect x="1168.7" y="1443.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.7" y="1454.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.11%)</title><rect x="1168.7" y="1427.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1171.7" y="1438.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1168.7" y="1411.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.7" y="1422.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.11%)</title><rect x="1168.7" y="1395.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1171.7" y="1406.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.11%)</title><rect x="1168.7" y="1379.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1171.7" y="1390.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1168.7" y="1363.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="1374.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1168.7" y="1347.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.7" y="1358.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.11%)</title><rect x="1170.0" y="1475.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1173.0" y="1486.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.11%)</title><rect x="1171.4" y="1475.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="1486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (11 samples, 1.24%)</title><rect x="1172.7" y="1475.0" width="14.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.7" y="1486.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (11 samples, 1.24%)</title><rect x="1172.7" y="1459.0" width="14.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.7" y="1470.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (11 samples, 1.24%)</title><rect x="1172.7" y="1443.0" width="14.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="1454.0"></text>
</g>
<g>
<title>Parse::do_one_block() (11 samples, 1.24%)</title><rect x="1172.7" y="1427.0" width="14.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="1438.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (11 samples, 1.24%)</title><rect x="1172.7" y="1411.0" width="14.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1175.7" y="1422.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 1.24%)</title><rect x="1172.7" y="1395.0" width="14.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.7" y="1406.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.90%)</title><rect x="1172.7" y="1379.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.7" y="1390.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.90%)</title><rect x="1172.7" y="1363.0" width="10.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.7" y="1374.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.90%)</title><rect x="1172.7" y="1347.0" width="10.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="1358.0"></text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 0.90%)</title><rect x="1172.7" y="1331.0" width="10.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1175.7" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 0.90%)</title><rect x="1172.7" y="1315.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="1326.0"></text>
</g>
<g>
<title>Parse::do_call() (8 samples, 0.90%)</title><rect x="1172.7" y="1299.0" width="10.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="1310.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1172.7" y="1283.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1175.7" y="1294.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1172.7" y="1267.0" width="4.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="1278.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1172.7" y="1251.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="1262.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1172.7" y="1235.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1172.7" y="1219.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.7" y="1230.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.34%)</title><rect x="1172.7" y="1203.0" width="4.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.7" y="1214.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1172.7" y="1187.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="1198.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1172.7" y="1171.0" width="4.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1175.7" y="1182.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1172.7" y="1155.0" width="4.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.7" y="1166.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1172.7" y="1139.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.7" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1172.7" y="1123.0" width="4.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.7" y="1134.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1172.7" y="1107.0" width="2.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1175.7" y="1118.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1172.7" y="1091.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.7" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1172.7" y="1075.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1172.7" y="1059.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1175.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1172.7" y="1043.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1172.7" y="1027.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1172.7" y="1011.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.7" y="1022.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1172.7" y="995.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1175.7" y="1006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1172.7" y="979.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.7" y="990.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1174.0" y="1091.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1177.0" y="1102.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1174.0" y="1075.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.0" y="1086.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.11%)</title><rect x="1174.0" y="1059.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1177.0" y="1070.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1174.0" y="1043.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1177.0" y="1054.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.11%)</title><rect x="1174.0" y="1027.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1177.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1175.4" y="1107.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.4" y="1118.0"></text>
</g>
<g>
<title>Parse::dynamic_branch_prediction(float&amp;, BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1175.4" y="1091.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.4" y="1102.0"></text>
</g>
<g>
<title>ciMethod::scale_count(int, float) (1 samples, 0.11%)</title><rect x="1175.4" y="1075.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1178.4" y="1086.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (5 samples, 0.56%)</title><rect x="1176.7" y="1283.0" width="6.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1179.7" y="1294.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.11%)</title><rect x="1176.7" y="1267.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.7" y="1278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1176.7" y="1251.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.7" y="1262.0"></text>
</g>
<g>
<title>BoolNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1176.7" y="1235.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.7" y="1246.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1178.0" y="1267.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1178.0" y="1251.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1178.0" y="1235.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1178.0" y="1219.0" width="4.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1178.0" y="1203.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.34%)</title><rect x="1178.0" y="1187.0" width="4.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1181.0" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1178.0" y="1171.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1178.0" y="1155.0" width="4.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1181.0" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1178.0" y="1139.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1178.0" y="1123.0" width="4.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1181.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1178.0" y="1107.0" width="4.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.34%)</title><rect x="1178.0" y="1091.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.0" y="1102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1178.0" y="1075.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.0" y="1086.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1178.0" y="1059.0" width="1.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1181.0" y="1070.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1178.0" y="1043.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.0" y="1054.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1178.0" y="1027.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1181.0" y="1038.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1178.0" y="1011.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1181.0" y="1022.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1178.0" y="995.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.0" y="1006.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1178.0" y="979.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1181.0" y="990.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1178.0" y="963.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1181.0" y="974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.11%)</title><rect x="1178.0" y="947.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.11%)</title><rect x="1178.0" y="931.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1178.0" y="915.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1181.0" y="926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1178.0" y="899.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1181.0" y="910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1178.0" y="883.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1181.0" y="894.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.11%)</title><rect x="1178.0" y="867.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.0" y="878.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.11%)</title><rect x="1178.0" y="851.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1181.0" y="862.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.11%)</title><rect x="1178.0" y="835.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.0" y="846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.23%)</title><rect x="1179.4" y="1075.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.23%)</title><rect x="1179.4" y="1059.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.23%)</title><rect x="1179.4" y="1043.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.23%)</title><rect x="1179.4" y="1027.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.4" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.23%)</title><rect x="1179.4" y="1011.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.4" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1179.4" y="995.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1179.4" y="979.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.4" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1179.4" y="963.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.4" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1179.4" y="947.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.4" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1179.4" y="931.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1179.4" y="915.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.4" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1179.4" y="899.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1179.4" y="883.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.4" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1179.4" y="867.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.4" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1179.4" y="851.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1182.4" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1179.4" y="835.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.4" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1179.4" y="819.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1179.4" y="803.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="814.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1179.4" y="787.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.4" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1179.4" y="771.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1179.4" y="755.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1182.4" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1179.4" y="739.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1179.4" y="723.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1179.4" y="707.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1179.4" y="691.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.4" y="702.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.11%)</title><rect x="1179.4" y="675.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.4" y="686.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.11%)</title><rect x="1179.4" y="659.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.4" y="670.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.11%)</title><rect x="1179.4" y="643.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.4" y="654.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1179.4" y="627.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.4" y="638.0"></text>
</g>
<g>
<title>ConstraintCastNode::Value(PhaseGVN*) const (1 samples, 0.11%)</title><rect x="1179.4" y="611.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.4" y="622.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.11%)</title><rect x="1179.4" y="595.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.4" y="606.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.11%)</title><rect x="1179.4" y="579.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.4" y="590.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.11%)</title><rect x="1179.4" y="563.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.4" y="574.0"></text>
</g>
<g>
<title>TypeAry::cleanup_speculative() const (1 samples, 0.11%)</title><rect x="1179.4" y="547.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.4" y="558.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.11%)</title><rect x="1179.4" y="531.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.4" y="542.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.11%)</title><rect x="1179.4" y="515.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.4" y="526.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="979.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="963.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="947.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="931.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="915.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="899.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="883.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="867.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="851.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="835.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="819.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="803.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="787.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="798.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="771.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="755.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="739.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="723.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="707.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="691.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="675.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="659.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="643.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="627.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="611.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="595.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="579.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="563.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.7" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="547.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="531.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="515.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="499.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="483.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="467.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="451.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="435.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="419.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="403.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="387.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="371.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="355.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="339.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="323.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="307.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="291.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="275.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="286.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="259.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="270.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="243.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="254.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1180.7" y="227.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1180.7" y="211.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1180.7" y="195.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1180.7" y="179.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="190.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1180.7" y="163.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="174.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1180.7" y="147.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="158.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.11%)</title><rect x="1180.7" y="131.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="142.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1180.7" y="115.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1183.7" y="126.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1180.7" y="99.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="110.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="1267.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="1278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="1251.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="1262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.0" y="1235.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.0" y="1219.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1185.0" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.0" y="1203.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="1214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.0" y="1187.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="1198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.0" y="1171.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="1182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="1155.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.0" y="1139.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1185.0" y="1150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.0" y="1123.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.0" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.0" y="1107.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="1118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.0" y="1091.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="1102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.0" y="1075.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="1059.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.0" y="1043.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.0" y="1027.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.0" y="1011.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.0" y="995.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.0" y="979.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="963.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.0" y="947.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.0" y="931.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.0" y="915.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.0" y="899.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.0" y="883.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.0" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="867.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.0" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.0" y="851.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.0" y="835.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.0" y="819.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.0" y="803.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1185.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1182.0" y="787.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1182.0" y="771.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.0" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1182.0" y="755.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1182.0" y="739.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1182.0" y="723.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1182.0" y="707.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1182.0" y="691.0" width="1.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.11%)</title><rect x="1182.0" y="675.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>Parse::merge_memory_edges(MergeMemNode*, int, bool) (1 samples, 0.11%)</title><rect x="1182.0" y="659.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.0" y="670.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1182.0" y="643.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="654.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.11%)</title><rect x="1182.0" y="627.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.0" y="638.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.11%)</title><rect x="1182.0" y="611.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1185.0" y="622.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.11%)</title><rect x="1182.0" y="595.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="606.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1183.3" y="1379.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="1390.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1183.3" y="1363.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.3" y="1374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1183.3" y="1347.0" width="4.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="1358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1183.3" y="1331.0" width="4.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="1342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1183.3" y="1315.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1183.3" y="1299.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1186.3" y="1310.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.34%)</title><rect x="1183.3" y="1283.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="1294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1183.3" y="1267.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="1278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1183.3" y="1251.0" width="4.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.3" y="1262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1183.3" y="1235.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="1246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1183.3" y="1219.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="1230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1183.3" y="1203.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="1214.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.34%)</title><rect x="1183.3" y="1187.0" width="4.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="1198.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.34%)</title><rect x="1183.3" y="1171.0" width="4.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.3" y="1182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.34%)</title><rect x="1183.3" y="1155.0" width="4.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="1166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.34%)</title><rect x="1183.3" y="1139.0" width="4.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1186.3" y="1150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.34%)</title><rect x="1183.3" y="1123.0" width="4.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="1134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.34%)</title><rect x="1183.3" y="1107.0" width="4.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="1118.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.23%)</title><rect x="1183.3" y="1091.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="1102.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1183.3" y="1075.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.3" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1183.3" y="1059.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.3" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1183.3" y="1043.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.3" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1183.3" y="1027.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1183.3" y="1011.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.3" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1183.3" y="995.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.3" y="1006.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.11%)</title><rect x="1183.3" y="979.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.3" y="990.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.11%)</title><rect x="1183.3" y="963.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="974.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.11%)</title><rect x="1183.3" y="947.0" width="1.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.3" y="958.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.11%)</title><rect x="1183.3" y="931.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.11%)</title><rect x="1183.3" y="915.0" width="1.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="926.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1183.3" y="899.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.3" y="910.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.11%)</title><rect x="1183.3" y="883.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="894.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1183.3" y="867.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.3" y="878.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_putstatic(ciBytecodeStream*) (1 samples, 0.11%)</title><rect x="1183.3" y="851.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.3" y="862.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.11%)</title><rect x="1183.3" y="835.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.3" y="846.0"></text>
</g>
<g>
<title>ciField::will_link(ciMethod*, Bytecodes::Code) (1 samples, 0.11%)</title><rect x="1183.3" y="819.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>LinkResolver::resolve_field(fieldDescriptor&amp;, LinkInfo const&amp;, Bytecodes::Code, bool, Thread*) (1 samples, 0.11%)</title><rect x="1183.3" y="803.0" width="1.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.11%)</title><rect x="1183.3" y="787.0" width="1.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.11%)</title><rect x="1183.3" y="771.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>constantPoolHandle::~constantPoolHandle() (1 samples, 0.11%)</title><rect x="1183.3" y="755.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.7" y="1075.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.7" y="1059.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.7" y="1043.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.7" y="1027.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.7" y="1011.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.7" y="995.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1187.7" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.7" y="979.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.7" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.7" y="963.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1187.7" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.11%)</title><rect x="1184.7" y="947.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.11%)</title><rect x="1184.7" y="931.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.11%)</title><rect x="1184.7" y="915.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.11%)</title><rect x="1184.7" y="899.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.7" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.11%)</title><rect x="1184.7" y="883.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.11%)</title><rect x="1184.7" y="867.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.7" y="878.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.11%)</title><rect x="1184.7" y="851.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.7" y="862.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.11%)</title><rect x="1184.7" y="835.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="846.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.11%)</title><rect x="1184.7" y="819.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.7" y="830.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.11%)</title><rect x="1184.7" y="803.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.7" y="814.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.11%)</title><rect x="1184.7" y="787.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.11%)</title><rect x="1186.0" y="1091.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.0" y="1102.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.11%)</title><rect x="1186.0" y="1075.0" width="1.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.0" y="1086.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.11%)</title><rect x="1186.0" y="1059.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="1070.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.11%)</title><rect x="1186.0" y="1043.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.0" y="1054.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.11%)</title><rect x="1186.0" y="1027.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.0" y="1038.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.11%)</title><rect x="1187.3" y="1507.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="1518.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.11%)</title><rect x="1187.3" y="1491.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="1502.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.11%)</title><rect x="1187.3" y="1475.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.3" y="1486.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.11%)</title><rect x="1187.3" y="1459.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.3" y="1470.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.11%)</title><rect x="1187.3" y="1443.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.3" y="1454.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.11%)</title><rect x="1187.3" y="1427.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.3" y="1438.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.11%)</title><rect x="1187.3" y="1411.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="1422.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.11%)</title><rect x="1187.3" y="1395.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.3" y="1406.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.11%)</title><rect x="1187.3" y="1379.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.3" y="1390.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.11%)</title><rect x="1187.3" y="1363.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.3" y="1374.0"></text>
</g>
<g>
<title>LinearScanWalker::free_collect_inactive_fixed(Interval*) (1 samples, 0.11%)</title><rect x="1187.3" y="1347.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.3" y="1358.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.11%)</title><rect x="1188.7" y="1539.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.7" y="1550.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.11%)</title><rect x="1188.7" y="1523.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.7" y="1534.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.11%)</title><rect x="1188.7" y="1507.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.7" y="1518.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (1 samples, 0.11%)</title><rect x="1188.7" y="1491.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1191.7" y="1502.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.11%)</title><rect x="1188.7" y="1475.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.7" y="1486.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.11%)</title><rect x="1188.7" y="1459.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1191.7" y="1470.0"></text>
</g>
</g>
</svg>
