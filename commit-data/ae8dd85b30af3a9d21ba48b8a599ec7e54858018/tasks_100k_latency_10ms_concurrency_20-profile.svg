<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="901"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="901"> </text>
<g id="frames">
<g>
<title>all (176 samples, 100.00%)</title><rect x="10.0" y="867.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="878.0">all</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (15 samples, 8.52%)</title><rect x="10.0" y="851.0" width="100.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="862.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (15 samples, 8.52%)</title><rect x="10.0" y="835.0" width="100.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="846.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (15 samples, 8.52%)</title><rect x="10.0" y="819.0" width="100.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="830.0">com/linecorp..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.57%)</title><rect x="10.0" y="803.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsResumed (1 samples, 0.57%)</title><rect x="10.0" y="787.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 2.84%)</title><rect x="16.7" y="803.0" width="33.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="814.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$332/1106944126.accept (5 samples, 2.84%)</title><rect x="16.7" y="787.0" width="33.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.7" y="798.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 2.84%)</title><rect x="16.7" y="771.0" width="33.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.7" y="782.0">co..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (3 samples, 1.70%)</title><rect x="16.7" y="755.0" width="20.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (3 samples, 1.70%)</title><rect x="16.7" y="739.0" width="20.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="19.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (3 samples, 1.70%)</title><rect x="16.7" y="723.0" width="20.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="19.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (3 samples, 1.70%)</title><rect x="16.7" y="707.0" width="20.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 1.70%)</title><rect x="16.7" y="691.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 1.70%)</title><rect x="16.7" y="675.0" width="20.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="19.7" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (1 samples, 0.57%)</title><rect x="36.8" y="755.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="39.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (1 samples, 0.57%)</title><rect x="36.8" y="739.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="39.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="36.8" y="723.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="39.8" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="36.8" y="707.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="39.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="43.5" y="755.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="46.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.57%)</title><rect x="43.5" y="739.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="46.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="43.5" y="723.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="46.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.57%)</title><rect x="43.5" y="707.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="46.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.57%)</title><rect x="43.5" y="691.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="46.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.11%)</title><rect x="50.2" y="803.0" width="60.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="53.2" y="814.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 5.11%)</title><rect x="50.2" y="787.0" width="60.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.2" y="798.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 5.11%)</title><rect x="50.2" y="771.0" width="60.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.2" y="782.0">org/ap..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.84%)</title><rect x="50.2" y="755.0" width="33.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="53.2" y="766.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.84%)</title><rect x="50.2" y="739.0" width="33.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.2" y="750.0">or..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.lock (1 samples, 0.57%)</title><rect x="50.2" y="723.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.2" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.70%)</title><rect x="56.9" y="723.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (3 samples, 1.70%)</title><rect x="56.9" y="707.0" width="20.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="59.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 1.14%)</title><rect x="56.9" y="691.0" width="13.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="59.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.57%)</title><rect x="56.9" y="675.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.57%)</title><rect x="56.9" y="659.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.9" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.57%)</title><rect x="56.9" y="643.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.9" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.57%)</title><rect x="56.9" y="627.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="59.9" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.57%)</title><rect x="56.9" y="611.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="59.9" y="622.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.57%)</title><rect x="56.9" y="595.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.9" y="606.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.57%)</title><rect x="56.9" y="579.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.9" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (1 samples, 0.57%)</title><rect x="56.9" y="563.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.9" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.57%)</title><rect x="56.9" y="547.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.9" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.57%)</title><rect x="56.9" y="531.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.9" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.57%)</title><rect x="56.9" y="515.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.9" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.57%)</title><rect x="56.9" y="499.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="59.9" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="56.9" y="483.0" width="6.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="59.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.57%)</title><rect x="63.6" y="675.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="66.6" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.57%)</title><rect x="63.6" y="659.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.6" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.57%)</title><rect x="63.6" y="643.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.6" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.57%)</title><rect x="63.6" y="627.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.6" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.57%)</title><rect x="63.6" y="611.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.6" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.57%)</title><rect x="63.6" y="595.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.6" y="606.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.57%)</title><rect x="63.6" y="579.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="66.6" y="590.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.57%)</title><rect x="63.6" y="563.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="66.6" y="574.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.57%)</title><rect x="63.6" y="547.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.6" y="558.0"></text>
</g>
<g>
<title>sun/nio/ch/IOVecWrapper.putBase (1 samples, 0.57%)</title><rect x="63.6" y="531.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="66.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.57%)</title><rect x="70.3" y="691.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.3" y="702.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.57%)</title><rect x="70.3" y="675.0" width="6.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="73.3" y="686.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.57%)</title><rect x="70.3" y="659.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="73.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.57%)</title><rect x="70.3" y="643.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="73.3" y="654.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.poll (1 samples, 0.57%)</title><rect x="70.3" y="627.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="73.3" y="638.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollArrayWrapper.epollWait (1 samples, 0.57%)</title><rect x="70.3" y="611.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="73.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.57%)</title><rect x="77.0" y="723.0" width="6.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="80.0" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.57%)</title><rect x="77.0" y="707.0" width="6.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="80.0" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.57%)</title><rect x="77.0" y="691.0" width="6.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="80.0" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NodeApiVersions.latestUsableVersion (1 samples, 0.57%)</title><rect x="77.0" y="675.0" width="6.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="80.0" y="686.0"></text>
</g>
<g>
<title>java/util/EnumMap.containsKey (1 samples, 0.57%)</title><rect x="77.0" y="659.0" width="6.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="80.0" y="670.0"></text>
</g>
<g>
<title>java/util/EnumMap.isValidKey (1 samples, 0.57%)</title><rect x="77.0" y="643.0" width="6.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="80.0" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (4 samples, 2.27%)</title><rect x="83.8" y="755.0" width="26.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="86.8" y="766.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.addAll (1 samples, 0.57%)</title><rect x="83.8" y="739.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="86.8" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (3 samples, 1.70%)</title><rect x="90.5" y="739.0" width="20.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="93.5" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (2 samples, 1.14%)</title><rect x="90.5" y="723.0" width="13.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.5" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (2 samples, 1.14%)</title><rect x="90.5" y="707.0" width="13.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (2 samples, 1.14%)</title><rect x="90.5" y="691.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.5" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (1 samples, 0.57%)</title><rect x="103.9" y="723.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="106.9" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (1 samples, 0.57%)</title><rect x="103.9" y="707.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="106.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.57%)</title><rect x="103.9" y="691.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="106.9" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.57%)</title><rect x="103.9" y="675.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="106.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.57%)</title><rect x="103.9" y="659.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="106.9" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (87 samples, 49.43%)</title><rect x="110.6" y="851.0" width="583.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="113.6" y="862.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (87 samples, 49.43%)</title><rect x="110.6" y="835.0" width="583.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="113.6" y="846.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (87 samples, 49.43%)</title><rect x="110.6" y="819.0" width="583.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="113.6" y="830.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/1272860830.run (85 samples, 48.30%)</title><rect x="110.6" y="803.0" width="569.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="113.6" y="814.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$357/12728..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63 (85 samples, 48.30%)</title><rect x="110.6" y="787.0" width="569.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.6" y="798.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$63</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (85 samples, 48.30%)</title><rect x="110.6" y="771.0" width="569.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.6" y="782.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (85 samples, 48.30%)</title><rect x="110.6" y="755.0" width="569.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.6" y="766.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenPro..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.57%)</title><rect x="110.6" y="739.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="113.6" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.57%)</title><rect x="117.3" y="739.0" width="6.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.3" y="750.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.57%)</title><rect x="117.3" y="723.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="120.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.57%)</title><rect x="117.3" y="707.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="120.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.57%)</title><rect x="117.3" y="691.0" width="6.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="120.3" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (12 samples, 6.82%)</title><rect x="124.0" y="739.0" width="80.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="127.0" y="750.0">com/linec..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 6.82%)</title><rect x="124.0" y="723.0" width="80.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="127.0" y="734.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (12 samples, 6.82%)</title><rect x="124.0" y="707.0" width="80.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="127.0" y="718.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 3.98%)</title><rect x="157.5" y="691.0" width="46.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="160.5" y="702.0">java..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.57%)</title><rect x="157.5" y="675.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.57%)</title><rect x="157.5" y="659.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="160.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.57%)</title><rect x="157.5" y="643.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="160.5" y="654.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.57%)</title><rect x="157.5" y="627.0" width="6.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="160.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (6 samples, 3.41%)</title><rect x="164.2" y="675.0" width="40.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.2" y="686.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$368/1773667418.accept (6 samples, 3.41%)</title><rect x="164.2" y="659.0" width="40.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="167.2" y="670.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (6 samples, 3.41%)</title><rect x="164.2" y="643.0" width="40.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="167.2" y="654.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (6 samples, 3.41%)</title><rect x="164.2" y="627.0" width="40.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="167.2" y="638.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (6 samples, 3.41%)</title><rect x="164.2" y="611.0" width="40.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="167.2" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (6 samples, 3.41%)</title><rect x="164.2" y="595.0" width="40.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.2" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (2 samples, 1.14%)</title><rect x="164.2" y="579.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="167.2" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (2 samples, 1.14%)</title><rect x="164.2" y="563.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="167.2" y="574.0"></text>
</g>
<g>
<title>itable stub (2 samples, 1.14%)</title><rect x="164.2" y="547.0" width="13.4" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="167.2" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 2.27%)</title><rect x="177.6" y="579.0" width="26.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="180.6" y="590.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$354/538934597.accept (1 samples, 0.57%)</title><rect x="197.7" y="563.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.7" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (14 samples, 7.95%)</title><rect x="204.4" y="739.0" width="93.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.4" y="750.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (14 samples, 7.95%)</title><rect x="204.4" y="723.0" width="93.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="207.4" y="734.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (14 samples, 7.95%)</title><rect x="204.4" y="707.0" width="93.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.4" y="718.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.95%)</title><rect x="204.4" y="691.0" width="93.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="207.4" y="702.0">com/linecor..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (14 samples, 7.95%)</title><rect x="204.4" y="675.0" width="93.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.4" y="686.0">com/linecor..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (14 samples, 7.95%)</title><rect x="204.4" y="659.0" width="93.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="207.4" y="670.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (5 samples, 2.84%)</title><rect x="204.4" y="643.0" width="33.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="207.4" y="654.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (5 samples, 2.84%)</title><rect x="204.4" y="627.0" width="33.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="207.4" y="638.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (5 samples, 2.84%)</title><rect x="204.4" y="611.0" width="33.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="207.4" y="622.0">co..</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="217.8" y="595.0" width="6.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="220.8" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="217.8" y="579.0" width="6.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="220.8" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 1.14%)</title><rect x="224.5" y="595.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="227.5" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 1.14%)</title><rect x="224.5" y="579.0" width="13.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="227.5" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 1.14%)</title><rect x="224.5" y="563.0" width="13.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="227.5" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 1.14%)</title><rect x="224.5" y="547.0" width="13.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="227.5" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 1.14%)</title><rect x="224.5" y="531.0" width="13.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="227.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (8 samples, 4.55%)</title><rect x="238.0" y="643.0" width="53.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.0" y="654.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.57%)</title><rect x="238.0" y="627.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.57%)</title><rect x="238.0" y="611.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.0" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.57%)</title><rect x="238.0" y="595.0" width="6.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="241.0" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.57%)</title><rect x="238.0" y="579.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="241.0" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (1 samples, 0.57%)</title><rect x="244.7" y="627.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="247.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (1 samples, 0.57%)</title><rect x="244.7" y="611.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="247.7" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (1 samples, 0.57%)</title><rect x="244.7" y="595.0" width="6.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="247.7" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (1 samples, 0.57%)</title><rect x="244.7" y="579.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.7" y="590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (1 samples, 0.57%)</title><rect x="244.7" y="563.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.7" y="574.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.57%)</title><rect x="244.7" y="547.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="247.7" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::new_store_pre_barrier(JavaThread*, oopDesc*) (1 samples, 0.57%)</title><rect x="244.7" y="531.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="247.7" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::can_elide_initializing_store_barrier(oopDesc*) (1 samples, 0.57%)</title><rect x="244.7" y="515.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="247.7" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (6 samples, 3.41%)</title><rect x="251.4" y="627.0" width="40.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.4" y="638.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (6 samples, 3.41%)</title><rect x="251.4" y="611.0" width="40.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.4" y="622.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.14%)</title><rect x="251.4" y="595.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="254.4" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (4 samples, 2.27%)</title><rect x="264.8" y="595.0" width="26.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="267.8" y="606.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (4 samples, 2.27%)</title><rect x="264.8" y="579.0" width="26.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.8" y="590.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (4 samples, 2.27%)</title><rect x="264.8" y="563.0" width="26.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="267.8" y="574.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 1.14%)</title><rect x="264.8" y="547.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="267.8" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.57%)</title><rect x="271.5" y="531.0" width="6.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="274.5" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (2 samples, 1.14%)</title><rect x="278.2" y="547.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="281.2" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (2 samples, 1.14%)</title><rect x="278.2" y="531.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.2" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.14%)</title><rect x="278.2" y="515.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="281.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (2 samples, 1.14%)</title><rect x="278.2" y="499.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="281.2" y="510.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (2 samples, 1.14%)</title><rect x="278.2" y="483.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.2" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.57%)</title><rect x="291.6" y="643.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.57%)</title><rect x="291.6" y="627.0" width="6.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.6" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.57%)</title><rect x="291.6" y="611.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.6" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.57%)</title><rect x="291.6" y="595.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.57%)</title><rect x="291.6" y="579.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="294.6" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (55 samples, 31.25%)</title><rect x="298.3" y="739.0" width="368.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="301.3" y="750.0">com/linecorp/decaton/processor/runtime/internal/Pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (7 samples, 3.98%)</title><rect x="298.3" y="723.0" width="46.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="301.3" y="734.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (1 samples, 0.57%)</title><rect x="311.7" y="707.0" width="6.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="314.7" y="718.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (4 samples, 2.27%)</title><rect x="318.4" y="707.0" width="26.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="321.4" y="718.0">o..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (3 samples, 1.70%)</title><rect x="325.1" y="691.0" width="20.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.1" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (3 samples, 1.70%)</title><rect x="325.1" y="675.0" width="20.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.1" y="686.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (3 samples, 1.70%)</title><rect x="325.1" y="659.0" width="20.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="328.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.70%)</title><rect x="325.1" y="643.0" width="20.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="328.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (11 samples, 6.25%)</title><rect x="345.2" y="723.0" width="73.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="348.2" y="734.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 6.25%)</title><rect x="345.2" y="707.0" width="73.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.2" y="718.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (5 samples, 2.84%)</title><rect x="345.2" y="691.0" width="33.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="348.2" y="702.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (5 samples, 2.84%)</title><rect x="345.2" y="675.0" width="33.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="348.2" y="686.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (4 samples, 2.27%)</title><rect x="345.2" y="659.0" width="26.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="348.2" y="670.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (3 samples, 1.70%)</title><rect x="351.9" y="643.0" width="20.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.9" y="654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (3 samples, 1.70%)</title><rect x="351.9" y="627.0" width="20.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.9" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (3 samples, 1.70%)</title><rect x="351.9" y="611.0" width="20.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="354.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 1.70%)</title><rect x="351.9" y="595.0" width="20.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="354.9" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 1.70%)</title><rect x="351.9" y="579.0" width="20.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="354.9" y="590.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 1.70%)</title><rect x="351.9" y="563.0" width="20.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="354.9" y="574.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.57%)</title><rect x="351.9" y="547.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="354.9" y="558.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.57%)</title><rect x="358.6" y="547.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="361.6" y="558.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.57%)</title><rect x="358.6" y="531.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="361.6" y="542.0"></text>
</g>
<g>
<title>nmethod::is_nmethod() const (1 samples, 0.57%)</title><rect x="365.3" y="547.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="368.3" y="558.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.57%)</title><rect x="372.0" y="659.0" width="6.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="375.0" y="670.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (6 samples, 3.41%)</title><rect x="378.8" y="691.0" width="40.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="381.8" y="702.0">org..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (6 samples, 3.41%)</title><rect x="378.8" y="675.0" width="40.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="381.8" y="686.0">ch/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (1 samples, 0.57%)</title><rect x="378.8" y="659.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="381.8" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.57%)</title><rect x="378.8" y="643.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="381.8" y="654.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (1 samples, 0.57%)</title><rect x="378.8" y="627.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="381.8" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.57%)</title><rect x="378.8" y="611.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="381.8" y="622.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (5 samples, 2.84%)</title><rect x="385.5" y="659.0" width="33.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.5" y="670.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 2.84%)</title><rect x="385.5" y="643.0" width="33.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="388.5" y="654.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.putVal (4 samples, 2.27%)</title><rect x="392.2" y="627.0" width="26.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="395.2" y="638.0">j..</text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.57%)</title><rect x="412.3" y="611.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.3" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (33 samples, 18.75%)</title><rect x="419.0" y="723.0" width="221.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="422.0" y="734.0">com/linecorp/decaton/processo..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (6 samples, 3.41%)</title><rect x="419.0" y="707.0" width="40.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="422.0" y="718.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (27 samples, 15.34%)</title><rect x="459.2" y="707.0" width="181.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="462.2" y="718.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$274/1396189999.process (21 samples, 11.93%)</title><rect x="472.6" y="691.0" width="140.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="475.6" y="702.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (21 samples, 11.93%)</title><rect x="472.6" y="675.0" width="140.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="475.6" y="686.0">com/linecorp/decat..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (21 samples, 11.93%)</title><rect x="472.6" y="659.0" width="140.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.6" y="670.0">com/linecorp/decat..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 1.14%)</title><rect x="472.6" y="643.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="475.6" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 1.14%)</title><rect x="472.6" y="627.0" width="13.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="475.6" y="638.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 1.14%)</title><rect x="472.6" y="611.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="475.6" y="622.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 1.14%)</title><rect x="472.6" y="595.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="475.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.57%)</title><rect x="479.3" y="579.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="482.3" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.57%)</title><rect x="479.3" y="563.0" width="6.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="482.3" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (16 samples, 9.09%)</title><rect x="486.0" y="643.0" width="107.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.0" y="654.0">com/linecorp/..</text>
</g>
<g>
<title>java/lang/Thread.sleep (16 samples, 9.09%)</title><rect x="486.0" y="627.0" width="107.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="489.0" y="638.0">java/lang/Thr..</text>
</g>
<g>
<title>JVM_Sleep (13 samples, 7.39%)</title><rect x="499.4" y="611.0" width="87.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="502.4" y="622.0">JVM_Sleep</text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.57%)</title><rect x="499.4" y="595.0" width="6.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="502.4" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.57%)</title><rect x="499.4" y="579.0" width="6.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="502.4" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.57%)</title><rect x="506.1" y="595.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="509.1" y="606.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (11 samples, 6.25%)</title><rect x="512.8" y="595.0" width="73.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="515.8" y="606.0">os::slee..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.57%)</title><rect x="526.3" y="579.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.3" y="590.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.14%)</title><rect x="533.0" y="579.0" width="13.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="536.0" y="590.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.14%)</title><rect x="533.0" y="563.0" width="13.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="536.0" y="574.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 1.14%)</title><rect x="546.4" y="579.0" width="13.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="549.4" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (4 samples, 2.27%)</title><rect x="559.8" y="579.0" width="26.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="562.8" y="590.0">_..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.57%)</title><rect x="586.6" y="611.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="589.6" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.70%)</title><rect x="593.3" y="643.0" width="20.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="596.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (1 samples, 0.57%)</title><rect x="613.4" y="691.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.4" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.57%)</title><rect x="613.4" y="675.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.4" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (1 samples, 0.57%)</title><rect x="613.4" y="659.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="616.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.57%)</title><rect x="613.4" y="643.0" width="6.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="616.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.57%)</title><rect x="613.4" y="627.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="616.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.57%)</title><rect x="613.4" y="611.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="616.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.57%)</title><rect x="620.1" y="691.0" width="6.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.14%)</title><rect x="626.8" y="691.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="629.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 1.14%)</title><rect x="626.8" y="675.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="629.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.14%)</title><rect x="626.8" y="659.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="629.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.57%)</title><rect x="626.8" y="643.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="629.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.57%)</title><rect x="626.8" y="627.0" width="6.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="629.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.57%)</title><rect x="626.8" y="611.0" width="6.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="629.8" y="622.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.57%)</title><rect x="626.8" y="595.0" width="6.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="629.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.57%)</title><rect x="633.5" y="643.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.5" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$363/528063517.accept (1 samples, 0.57%)</title><rect x="633.5" y="627.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="636.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.lambda$pushDownStream$79 (1 samples, 0.57%)</title><rect x="633.5" y="611.0" width="6.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.5" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.27%)</title><rect x="640.2" y="723.0" width="26.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.2" y="734.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (4 samples, 2.27%)</title><rect x="640.2" y="707.0" width="26.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.2" y="718.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 1.14%)</title><rect x="653.6" y="691.0" width="13.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="656.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 1.14%)</title><rect x="653.6" y="675.0" width="13.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="656.6" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$365/151391148.accept (2 samples, 1.14%)</title><rect x="653.6" y="659.0" width="13.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="656.6" y="670.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$58 (2 samples, 1.14%)</title><rect x="653.6" y="643.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="656.6" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (2 samples, 1.14%)</title><rect x="653.6" y="627.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="656.6" y="638.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (2 samples, 1.14%)</title><rect x="653.6" y="611.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.6" y="622.0"></text>
</g>
<g>
<title>java/time/Duration.create (2 samples, 1.14%)</title><rect x="653.6" y="595.0" width="13.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="656.6" y="606.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 1.14%)</title><rect x="653.6" y="579.0" width="13.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="656.6" y="590.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.14%)</title><rect x="653.6" y="563.0" width="13.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="656.6" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 1.14%)</title><rect x="667.0" y="739.0" width="13.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="670.0" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 1.14%)</title><rect x="667.0" y="723.0" width="13.5" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="670.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (1 samples, 0.57%)</title><rect x="680.5" y="803.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="683.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.57%)</title><rect x="680.5" y="787.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="683.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.57%)</title><rect x="680.5" y="771.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.57%)</title><rect x="680.5" y="755.0" width="6.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="683.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1 samples, 0.57%)</title><rect x="687.2" y="803.0" width="6.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="690.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.57%)</title><rect x="687.2" y="787.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="690.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.57%)</title><rect x="687.2" y="771.0" width="6.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="690.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.57%)</title><rect x="687.2" y="755.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.57%)</title><rect x="687.2" y="739.0" width="6.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="690.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.57%)</title><rect x="687.2" y="723.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="690.2" y="734.0"></text>
</g>
<g>
<title>start_thread (74 samples, 42.05%)</title><rect x="693.9" y="851.0" width="496.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="696.9" y="862.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (74 samples, 42.05%)</title><rect x="693.9" y="835.0" width="496.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="696.9" y="846.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (14 samples, 7.95%)</title><rect x="693.9" y="819.0" width="93.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="696.9" y="830.0">GangWorker:..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 7.95%)</title><rect x="693.9" y="803.0" width="93.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="696.9" y="814.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (14 samples, 7.95%)</title><rect x="693.9" y="787.0" width="93.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="696.9" y="798.0">G1ParEvacua..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (14 samples, 7.95%)</title><rect x="693.9" y="771.0" width="93.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="696.9" y="782.0">G1ParScanTh..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (10 samples, 5.68%)</title><rect x="720.7" y="755.0" width="67.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="723.7" y="766.0">G1ParSc..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (5 samples, 2.84%)</title><rect x="754.2" y="739.0" width="33.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="757.2" y="750.0">In..</text>
</g>
<g>
<title>OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::push(StarTask) (2 samples, 1.14%)</title><rect x="774.3" y="723.0" width="13.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="777.3" y="734.0"></text>
</g>
<g>
<title>JavaThread::run() (60 samples, 34.09%)</title><rect x="787.7" y="819.0" width="402.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="790.7" y="830.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (60 samples, 34.09%)</title><rect x="787.7" y="803.0" width="402.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="790.7" y="814.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (60 samples, 34.09%)</title><rect x="787.7" y="787.0" width="402.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="790.7" y="798.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (59 samples, 33.52%)</title><rect x="787.7" y="771.0" width="395.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="790.7" y="782.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (58 samples, 32.95%)</title><rect x="787.7" y="755.0" width="388.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="790.7" y="766.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (58 samples, 32.95%)</title><rect x="787.7" y="739.0" width="388.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="790.7" y="750.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int,..</text>
</g>
<g>
<title>Compile::Code_Gen() (33 samples, 18.75%)</title><rect x="787.7" y="723.0" width="221.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.7" y="734.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.57%)</title><rect x="787.7" y="707.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="790.7" y="718.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.57%)</title><rect x="787.7" y="691.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="790.7" y="702.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.57%)</title><rect x="794.4" y="707.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.4" y="718.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.57%)</title><rect x="794.4" y="691.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="797.4" y="702.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.57%)</title><rect x="794.4" y="675.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="797.4" y="686.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 2.27%)</title><rect x="801.1" y="707.0" width="26.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="804.1" y="718.0">M..</text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.57%)</title><rect x="801.1" y="691.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="804.1" y="702.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 1.70%)</title><rect x="807.8" y="691.0" width="20.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="810.8" y="702.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.57%)</title><rect x="807.8" y="675.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="810.8" y="686.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.57%)</title><rect x="814.5" y="675.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.5" y="686.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.57%)</title><rect x="814.5" y="659.0" width="6.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="817.5" y="670.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.57%)</title><rect x="814.5" y="643.0" width="6.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="817.5" y="654.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.57%)</title><rect x="814.5" y="627.0" width="6.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="817.5" y="638.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.57%)</title><rect x="814.5" y="611.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="817.5" y="622.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.57%)</title><rect x="814.5" y="595.0" width="6.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.5" y="606.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.57%)</title><rect x="814.5" y="579.0" width="6.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="817.5" y="590.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.57%)</title><rect x="814.5" y="563.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="817.5" y="574.0"></text>
</g>
<g>
<title>xorL_rRegNode::Expand(State*, Node_List&amp;, Node*) (1 samples, 0.57%)</title><rect x="814.5" y="547.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="817.5" y="558.0"></text>
</g>
<g>
<title>MachProjNode::MachProjNode(Node*, unsigned int, RegMask const&amp;, unsigned int) (1 samples, 0.57%)</title><rect x="814.5" y="531.0" width="6.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="817.5" y="542.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.57%)</title><rect x="814.5" y="515.0" width="6.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="817.5" y="526.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.57%)</title><rect x="821.3" y="675.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="824.3" y="686.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (1 samples, 0.57%)</title><rect x="828.0" y="707.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="831.0" y="718.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.57%)</title><rect x="828.0" y="691.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="831.0" y="702.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.57%)</title><rect x="828.0" y="675.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="831.0" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (26 samples, 14.77%)</title><rect x="834.7" y="707.0" width="174.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="837.7" y="718.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>Node::rematerialize() const (1 samples, 0.57%)</title><rect x="834.7" y="691.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="837.7" y="702.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.57%)</title><rect x="841.4" y="691.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="844.4" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.57%)</title><rect x="848.1" y="691.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="851.1" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.57%)</title><rect x="848.1" y="675.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.1" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="848.1" y="659.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="851.1" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.70%)</title><rect x="854.8" y="691.0" width="20.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="857.8" y="702.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="854.8" y="675.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="857.8" y="686.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 1.14%)</title><rect x="861.5" y="675.0" width="13.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.5" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="868.2" y="659.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="871.2" y="670.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (2 samples, 1.14%)</title><rect x="874.9" y="691.0" width="13.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="877.9" y="702.0"></text>
</g>
<g>
<title>loadConPNode::rule() const (1 samples, 0.57%)</title><rect x="881.6" y="675.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="884.6" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (6 samples, 3.41%)</title><rect x="888.3" y="691.0" width="40.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="891.3" y="702.0">Pha..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 1.14%)</title><rect x="888.3" y="675.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="891.3" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.70%)</title><rect x="901.7" y="675.0" width="20.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="904.7" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="915.1" y="659.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="918.1" y="670.0"></text>
</g>
<g>
<title>loadConINode::rule() const (1 samples, 0.57%)</title><rect x="921.8" y="675.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="924.8" y="686.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 1.14%)</title><rect x="928.5" y="691.0" width="13.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="931.5" y="702.0"></text>
</g>
<g>
<title>MachProjNode::bottom_type() const (1 samples, 0.57%)</title><rect x="935.2" y="675.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="938.2" y="686.0"></text>
</g>
<g>
<title>loadConI0Node::bottom_type() const (1 samples, 0.57%)</title><rect x="935.2" y="659.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="938.2" y="670.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.57%)</title><rect x="935.2" y="643.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="938.2" y="654.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.57%)</title><rect x="935.2" y="627.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="938.2" y="638.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 1.14%)</title><rect x="941.9" y="691.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="944.9" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.57%)</title><rect x="948.6" y="675.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="951.6" y="686.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.57%)</title><rect x="955.3" y="691.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="958.3" y="702.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.57%)</title><rect x="955.3" y="675.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="958.3" y="686.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.57%)</title><rect x="955.3" y="659.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="958.3" y="670.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.57%)</title><rect x="955.3" y="643.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="958.3" y="654.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.57%)</title><rect x="962.0" y="691.0" width="6.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="965.0" y="702.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.57%)</title><rect x="968.8" y="691.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="971.8" y="702.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.57%)</title><rect x="968.8" y="675.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="971.8" y="686.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="968.8" y="659.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="971.8" y="670.0"></text>
</g>
<g>
<title>Chunk::operator new(unsigned long, AllocFailStrategy::AllocFailEnum, unsigned long) (1 samples, 0.57%)</title><rect x="968.8" y="643.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.8" y="654.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.57%)</title><rect x="968.8" y="627.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="971.8" y="638.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 2.27%)</title><rect x="975.5" y="691.0" width="26.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="978.5" y="702.0">P..</text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.57%)</title><rect x="975.5" y="675.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="978.5" y="686.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.57%)</title><rect x="982.2" y="675.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.2" y="686.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 1.14%)</title><rect x="988.9" y="675.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="991.9" y="686.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.57%)</title><rect x="995.6" y="659.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="998.6" y="670.0"></text>
</g>
<g>
<title>ShouldNotReachHereNode::oper_input_base() const (1 samples, 0.57%)</title><rect x="1002.3" y="691.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1005.3" y="702.0"></text>
</g>
<g>
<title>Compile::Optimize() (19 samples, 10.80%)</title><rect x="1009.0" y="723.0" width="127.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1012.0" y="734.0">Compile::Optimiz..</text>
</g>
<g>
<title>PhaseCCP::do_transform() (2 samples, 1.14%)</title><rect x="1009.0" y="707.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1012.0" y="718.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.57%)</title><rect x="1009.0" y="691.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1012.0" y="702.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.57%)</title><rect x="1015.7" y="691.0" width="6.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1018.7" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 6.25%)</title><rect x="1022.4" y="707.0" width="73.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1025.4" y="718.0">PhaseIde..</text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1022.4" y="691.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1025.4" y="702.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1022.4" y="675.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1025.4" y="686.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1022.4" y="659.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1025.4" y="670.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.57%)</title><rect x="1022.4" y="643.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1025.4" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.57%)</title><rect x="1029.1" y="691.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1032.1" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (9 samples, 5.11%)</title><rect x="1035.8" y="691.0" width="60.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1038.8" y="702.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (9 samples, 5.11%)</title><rect x="1035.8" y="675.0" width="60.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1038.8" y="686.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.57%)</title><rect x="1035.8" y="659.0" width="6.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1038.8" y="670.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (8 samples, 4.55%)</title><rect x="1042.5" y="659.0" width="53.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1045.5" y="670.0">Phase..</text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.57%)</title><rect x="1096.1" y="707.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1099.1" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.57%)</title><rect x="1096.1" y="691.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.1" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.70%)</title><rect x="1102.8" y="707.0" width="20.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1105.8" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.70%)</title><rect x="1102.8" y="691.0" width="20.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.8" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.57%)</title><rect x="1102.8" y="675.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1105.8" y="686.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.57%)</title><rect x="1102.8" y="659.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1105.8" y="670.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.57%)</title><rect x="1102.8" y="643.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.8" y="654.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.57%)</title><rect x="1102.8" y="627.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1105.8" y="638.0"></text>
</g>
<g>
<title>TypeOopPtr::klass() const (1 samples, 0.57%)</title><rect x="1102.8" y="611.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1105.8" y="622.0"></text>
</g>
<g>
<title>ProjNode::hash() const (1 samples, 0.57%)</title><rect x="1109.5" y="675.0" width="6.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1112.5" y="686.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.57%)</title><rect x="1116.2" y="675.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1119.2" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.57%)</title><rect x="1116.2" y="659.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.2" y="670.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.57%)</title><rect x="1116.2" y="643.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1119.2" y="654.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.57%)</title><rect x="1116.2" y="627.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1119.2" y="638.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (2 samples, 1.14%)</title><rect x="1123.0" y="707.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1126.0" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.57%)</title><rect x="1123.0" y="691.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1126.0" y="702.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.57%)</title><rect x="1123.0" y="675.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1126.0" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.57%)</title><rect x="1123.0" y="659.0" width="6.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1126.0" y="670.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (1 samples, 0.57%)</title><rect x="1129.7" y="691.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1132.7" y="702.0"></text>
</g>
<g>
<title>TypeNode::hash() const (1 samples, 0.57%)</title><rect x="1129.7" y="675.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1132.7" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.70%)</title><rect x="1136.4" y="723.0" width="20.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1139.4" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.70%)</title><rect x="1136.4" y="707.0" width="20.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.4" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.70%)</title><rect x="1136.4" y="691.0" width="20.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.70%)</title><rect x="1136.4" y="675.0" width="20.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.4" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.70%)</title><rect x="1136.4" y="659.0" width="20.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.70%)</title><rect x="1136.4" y="643.0" width="20.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1139.4" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.70%)</title><rect x="1136.4" y="627.0" width="20.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.4" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.70%)</title><rect x="1136.4" y="611.0" width="20.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.70%)</title><rect x="1136.4" y="595.0" width="20.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.4" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.70%)</title><rect x="1136.4" y="579.0" width="20.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.70%)</title><rect x="1136.4" y="563.0" width="20.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.4" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.70%)</title><rect x="1136.4" y="547.0" width="20.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.4" y="558.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1136.4" y="531.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.4" y="542.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1136.4" y="515.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.4" y="526.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1136.4" y="499.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.4" y="510.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1136.4" y="483.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.4" y="494.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1136.4" y="467.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.4" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1136.4" y="451.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.4" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1136.4" y="435.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.4" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1136.4" y="419.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1139.4" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.57%)</title><rect x="1136.4" y="403.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.4" y="414.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.57%)</title><rect x="1136.4" y="387.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.4" y="398.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1136.4" y="371.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1139.4" y="382.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1136.4" y="355.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="366.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1136.4" y="339.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.4" y="350.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.57%)</title><rect x="1136.4" y="323.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.4" y="334.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1136.4" y="307.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.4" y="318.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.57%)</title><rect x="1136.4" y="291.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1139.4" y="302.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1143.1" y="531.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1143.1" y="515.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1143.1" y="499.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1143.1" y="483.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1143.1" y="467.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1143.1" y="451.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1143.1" y="435.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1143.1" y="419.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1143.1" y="403.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1143.1" y="387.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1143.1" y="371.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1143.1" y="355.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="366.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.57%)</title><rect x="1143.1" y="339.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="350.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.57%)</title><rect x="1143.1" y="323.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1146.1" y="334.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.57%)</title><rect x="1143.1" y="307.0" width="6.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.57%)</title><rect x="1143.1" y="291.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.57%)</title><rect x="1143.1" y="275.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1143.1" y="259.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="270.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.57%)</title><rect x="1143.1" y="243.0" width="6.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1143.1" y="227.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1146.1" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.57%)</title><rect x="1143.1" y="211.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="222.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.57%)</title><rect x="1143.1" y="195.0" width="6.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1143.1" y="179.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1143.1" y="163.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="174.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.57%)</title><rect x="1143.1" y="147.0" width="6.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1146.1" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1143.1" y="131.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.57%)</title><rect x="1143.1" y="115.0" width="6.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="126.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.57%)</title><rect x="1143.1" y="99.0" width="6.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.57%)</title><rect x="1143.1" y="83.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="94.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.57%)</title><rect x="1143.1" y="67.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.1" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::find_instance_or_array_klass(Symbol*, Handle, Handle, Thread*) (1 samples, 0.57%)</title><rect x="1143.1" y="51.0" width="6.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.1" y="62.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::loader_data(oopDesc*) (1 samples, 0.57%)</title><rect x="1143.1" y="35.0" width="6.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="531.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="515.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="499.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.8" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="483.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="467.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="451.0" width="6.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1152.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="435.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1152.8" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="419.0" width="6.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.8" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="403.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.8" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="387.0" width="6.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="371.0" width="6.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1152.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="355.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="339.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.8" y="350.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="323.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="307.0" width="6.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="291.0" width="6.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1152.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.57%)</title><rect x="1149.8" y="275.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.57%)</title><rect x="1149.8" y="259.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.57%)</title><rect x="1149.8" y="243.0" width="6.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.57%)</title><rect x="1149.8" y="227.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1152.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.57%)</title><rect x="1149.8" y="211.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.57%)</title><rect x="1149.8" y="195.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="206.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.57%)</title><rect x="1149.8" y="179.0" width="6.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1152.8" y="190.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.57%)</title><rect x="1149.8" y="163.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.8" y="174.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.57%)</title><rect x="1149.8" y="147.0" width="6.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.8" y="158.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 1.14%)</title><rect x="1156.5" y="723.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1159.5" y="734.0"></text>
</g>
<g>
<title>VectorSet::operator&lt;&lt;=(unsigned int) (1 samples, 0.57%)</title><rect x="1163.2" y="707.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.2" y="718.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.57%)</title><rect x="1169.9" y="723.0" width="6.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.9" y="734.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.57%)</title><rect x="1169.9" y="707.0" width="6.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.9" y="718.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.57%)</title><rect x="1176.6" y="755.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="766.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.57%)</title><rect x="1176.6" y="739.0" width="6.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.6" y="750.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.57%)</title><rect x="1176.6" y="723.0" width="6.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="734.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.57%)</title><rect x="1176.6" y="707.0" width="6.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="718.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.57%)</title><rect x="1176.6" y="691.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="702.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.57%)</title><rect x="1176.6" y="675.0" width="6.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1179.6" y="686.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (1 samples, 0.57%)</title><rect x="1176.6" y="659.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1179.6" y="670.0"></text>
</g>
<g>
<title>BitMap::~BitMap() (1 samples, 0.57%)</title><rect x="1176.6" y="643.0" width="6.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1179.6" y="654.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.57%)</title><rect x="1183.3" y="771.0" width="6.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.3" y="782.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.57%)</title><rect x="1183.3" y="755.0" width="6.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.3" y="766.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.57%)</title><rect x="1183.3" y="739.0" width="6.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.3" y="750.0"></text>
</g>
<g>
<title>NMethodSweeper::process_nmethod(nmethod*) (1 samples, 0.57%)</title><rect x="1183.3" y="723.0" width="6.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.3" y="734.0"></text>
</g>
</g>
</svg>
