<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="741"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="741"> </text>
<g id="frames">
<g>
<title>all (962 samples, 100.00%)</title><rect x="10.0" y="707.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="718.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (3 samples, 0.31%)</title><rect x="10.0" y="691.0" width="3.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (1 samples, 0.10%)</title><rect x="10.0" y="675.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.21%)</title><rect x="11.2" y="675.0" width="2.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.2" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.21%)</title><rect x="11.2" y="659.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.2" y="670.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.10%)</title><rect x="11.2" y="643.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.2" y="654.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.10%)</title><rect x="11.2" y="627.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.2" y="638.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="12.5" y="643.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="15.5" y="654.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.10%)</title><rect x="12.5" y="627.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.5" y="638.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.10%)</title><rect x="12.5" y="611.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="13.7" y="691.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="16.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="13.7" y="675.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="16.7" y="686.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (1 samples, 0.10%)</title><rect x="13.7" y="659.0" width="1.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="16.7" y="670.0"></text>
</g>
<g>
<title>[unknown_Java] (2 samples, 0.21%)</title><rect x="14.9" y="691.0" width="2.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="17.9" y="702.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="14.9" y="675.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.9" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="16.1" y="675.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.1" y="686.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="16.1" y="659.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.1" y="670.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (1 samples, 0.10%)</title><rect x="16.1" y="643.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.1" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (260 samples, 27.03%)</title><rect x="17.4" y="691.0" width="318.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="20.4" y="702.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (260 samples, 27.03%)</title><rect x="17.4" y="675.0" width="318.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="20.4" y="686.0">com/linecorp/decaton/processor/runtime/Proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (254 samples, 26.40%)</title><rect x="21.0" y="659.0" width="311.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="24.0" y="670.0">com/linecorp/decaton/processor/runtime/int..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.pausePartitions (2 samples, 0.21%)</title><rect x="22.3" y="643.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="25.3" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsPause (2 samples, 0.21%)</title><rect x="22.3" y="627.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.3" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.21%)</title><rect x="22.3" y="611.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="25.3" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.21%)</title><rect x="22.3" y="595.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="25.3" y="606.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.21%)</title><rect x="22.3" y="579.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="25.3" y="590.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="22.3" y="563.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.3" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="22.3" y="547.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="25.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="22.3" y="531.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="25.3" y="542.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.10%)</title><rect x="22.3" y="515.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="25.3" y="526.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.10%)</title><rect x="22.3" y="499.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="25.3" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="23.5" y="531.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.52%)</title><rect x="24.7" y="643.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="27.7" y="654.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.52%)</title><rect x="24.7" y="627.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="27.7" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (5 samples, 0.52%)</title><rect x="24.7" y="611.0" width="6.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="27.7" y="622.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/2052330235.accept (4 samples, 0.42%)</title><rect x="25.9" y="595.0" width="5.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="606.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (4 samples, 0.42%)</title><rect x="25.9" y="579.0" width="5.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.9" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.31%)</title><rect x="27.2" y="563.0" width="3.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.2" y="574.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.31%)</title><rect x="27.2" y="547.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.2" y="558.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (203 samples, 21.10%)</title><rect x="30.9" y="643.0" width="249.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.9" y="654.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/1079135283.accept (197 samples, 20.48%)</title><rect x="30.9" y="627.0" width="241.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.9" y="638.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (197 samples, 20.48%)</title><rect x="30.9" y="611.0" width="241.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.9" y="622.0">com/linecorp/decaton/processor/r..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (166 samples, 17.26%)</title><rect x="30.9" y="595.0" width="203.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.9" y="606.0">com/linecorp/decaton/proces..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (159 samples, 16.53%)</title><rect x="37.0" y="579.0" width="195.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.0" y="590.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (159 samples, 16.53%)</title><rect x="37.0" y="563.0" width="195.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.0" y="574.0">com/linecorp/decaton/proc..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (159 samples, 16.53%)</title><rect x="37.0" y="547.0" width="195.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.0" y="558.0">java/util/concurrent/Exec..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (159 samples, 16.53%)</title><rect x="37.0" y="531.0" width="195.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.0" y="542.0">java/util/concurrent/Thre..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (159 samples, 16.53%)</title><rect x="37.0" y="515.0" width="195.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.0" y="526.0">java/util/concurrent/Link..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (131 samples, 13.62%)</title><rect x="37.0" y="499.0" width="160.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.0" y="510.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (131 samples, 13.62%)</title><rect x="37.0" y="483.0" width="160.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="40.0" y="494.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (131 samples, 13.62%)</title><rect x="37.0" y="467.0" width="160.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.0" y="478.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (131 samples, 13.62%)</title><rect x="37.0" y="451.0" width="160.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.0" y="462.0">java/util/concurrent..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (131 samples, 13.62%)</title><rect x="37.0" y="435.0" width="160.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.0" y="446.0">java/util/concurrent..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (106 samples, 11.02%)</title><rect x="67.7" y="419.0" width="130.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="70.7" y="430.0">jdk/internal/mis..</text>
</g>
<g>
<title>Unsafe_Unpark (39 samples, 4.05%)</title><rect x="71.3" y="403.0" width="47.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="74.3" y="414.0">Unsa..</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="78.7" y="387.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="81.7" y="398.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="79.9" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="82.9" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (2 samples, 0.21%)</title><rect x="81.1" y="387.0" width="2.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="84.1" y="398.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (3 samples, 0.31%)</title><rect x="83.6" y="387.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="86.6" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.10%)</title><rect x="87.3" y="387.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="90.3" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.52%)</title><rect x="88.5" y="387.0" width="6.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="91.5" y="398.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.10%)</title><rect x="94.6" y="387.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="97.6" y="398.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.31%)</title><rect x="95.9" y="387.0" width="3.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="98.9" y="398.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.10%)</title><rect x="99.5" y="387.0" width="1.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="102.5" y="398.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.31%)</title><rect x="100.8" y="387.0" width="3.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="103.8" y="398.0"></text>
</g>
<g>
<title>pthread_mutex_lock (12 samples, 1.25%)</title><rect x="104.4" y="387.0" width="14.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="107.4" y="398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (64 samples, 6.65%)</title><rect x="119.2" y="403.0" width="78.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="122.2" y="414.0">__pthread..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (28 samples, 2.91%)</title><rect x="197.7" y="499.0" width="34.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="200.7" y="510.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (28 samples, 2.91%)</title><rect x="197.7" y="483.0" width="34.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.7" y="494.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (28 samples, 2.91%)</title><rect x="197.7" y="467.0" width="34.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.7" y="478.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (28 samples, 2.91%)</title><rect x="197.7" y="451.0" width="34.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="200.7" y="462.0">ja..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/TaskRequest.&lt;init&gt; (2 samples, 0.21%)</title><rect x="232.0" y="579.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="235.0" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (19 samples, 1.98%)</title><rect x="234.5" y="595.0" width="23.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.5" y="606.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (19 samples, 1.98%)</title><rect x="234.5" y="579.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.5" y="590.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.98%)</title><rect x="234.5" y="563.0" width="23.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="237.5" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (19 samples, 1.98%)</title><rect x="234.5" y="547.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="237.5" y="558.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.31%)</title><rect x="254.1" y="531.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="257.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.31%)</title><rect x="254.1" y="515.0" width="3.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (6 samples, 0.62%)</title><rect x="257.8" y="595.0" width="7.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.8" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.62%)</title><rect x="257.8" y="579.0" width="7.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="260.8" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="257.8" y="563.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="260.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.42%)</title><rect x="260.2" y="563.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.hashCode (4 samples, 0.42%)</title><rect x="260.2" y="547.0" width="4.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="263.2" y="558.0"></text>
</g>
<g>
<title>java/util/Objects.hashCode (4 samples, 0.42%)</title><rect x="260.2" y="531.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="263.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.42%)</title><rect x="260.2" y="515.0" width="4.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.2" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.42%)</title><rect x="260.2" y="499.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="263.2" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.62%)</title><rect x="265.1" y="595.0" width="7.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 0.62%)</title><rect x="265.1" y="579.0" width="7.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 0.31%)</title><rect x="268.8" y="563.0" width="3.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="271.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (3 samples, 0.31%)</title><rect x="268.8" y="547.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="271.8" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (6 samples, 0.62%)</title><rect x="272.5" y="627.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="275.5" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (6 samples, 0.62%)</title><rect x="272.5" y="611.0" width="7.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="275.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.31%)</title><rect x="272.5" y="595.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="275.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.31%)</title><rect x="272.5" y="579.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="275.5" y="590.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (2 samples, 0.21%)</title><rect x="272.5" y="563.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="275.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.next (1 samples, 0.10%)</title><rect x="274.9" y="563.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="277.9" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueIterator.next (1 samples, 0.10%)</title><rect x="274.9" y="547.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="277.9" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="274.9" y="531.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="277.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (3 samples, 0.31%)</title><rect x="276.2" y="595.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.2" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (43 samples, 4.47%)</title><rect x="279.9" y="643.0" width="52.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="282.9" y="654.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (43 samples, 4.47%)</title><rect x="279.9" y="627.0" width="52.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="282.9" y="638.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (26 samples, 2.70%)</title><rect x="281.1" y="611.0" width="31.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="284.1" y="622.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (26 samples, 2.70%)</title><rect x="281.1" y="595.0" width="31.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="284.1" y="606.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.add (1 samples, 0.10%)</title><rect x="281.1" y="579.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.addRecords (1 samples, 0.10%)</title><rect x="281.1" y="563.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="284.1" y="574.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.10%)</title><rect x="281.1" y="547.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch$$Lambda$473/864148869.accept (1 samples, 0.10%)</title><rect x="281.1" y="531.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="284.1" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetch.lambda$addRecords$0 (1 samples, 0.10%)</title><rect x="281.1" y="515.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="284.1" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.10%)</title><rect x="281.1" y="499.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="284.1" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="281.1" y="483.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="284.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (25 samples, 2.60%)</title><rect x="282.3" y="579.0" width="30.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="285.3" y="590.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (22 samples, 2.29%)</title><rect x="282.3" y="563.0" width="27.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="285.3" y="574.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (22 samples, 2.29%)</title><rect x="282.3" y="547.0" width="27.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="285.3" y="558.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (11 samples, 1.14%)</title><rect x="288.4" y="531.0" width="13.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.4" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.94%)</title><rect x="289.7" y="515.0" width="11.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="292.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (9 samples, 0.94%)</title><rect x="289.7" y="499.0" width="11.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="292.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (9 samples, 0.94%)</title><rect x="289.7" y="483.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="292.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (9 samples, 0.94%)</title><rect x="289.7" y="467.0" width="11.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="292.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (4 samples, 0.42%)</title><rect x="295.8" y="451.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="298.8" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (1 samples, 0.10%)</title><rect x="300.7" y="515.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.7" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.uncompressedIterator (1 samples, 0.10%)</title><rect x="300.7" y="499.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.&lt;init&gt; (1 samples, 0.10%)</title><rect x="300.7" y="483.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="303.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="300.7" y="467.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="303.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.baseOffset (1 samples, 0.10%)</title><rect x="300.7" y="451.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (6 samples, 0.62%)</title><rect x="301.9" y="531.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="304.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (6 samples, 0.62%)</title><rect x="301.9" y="515.0" width="7.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="304.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (6 samples, 0.62%)</title><rect x="301.9" y="499.0" width="7.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="304.9" y="510.0"></text>
</g>
<g>
<title>java/util/Optional.of (6 samples, 0.62%)</title><rect x="301.9" y="483.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="304.9" y="494.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="308.1" y="467.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="311.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2100 (2 samples, 0.21%)</title><rect x="309.3" y="563.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="312.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLag (2 samples, 0.21%)</title><rect x="309.3" y="547.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="312.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (2 samples, 0.21%)</title><rect x="309.3" y="531.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="312.3" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (2 samples, 0.21%)</title><rect x="309.3" y="515.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.21%)</title><rect x="309.3" y="499.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.21%)</title><rect x="309.3" y="483.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="311.7" y="563.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="314.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.10%)</title><rect x="311.7" y="547.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="314.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (4 samples, 0.42%)</title><rect x="313.0" y="611.0" width="4.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.0" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (2 samples, 0.21%)</title><rect x="313.0" y="595.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="316.0" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsIfNeeded (2 samples, 0.21%)</title><rect x="313.0" y="579.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="316.0" y="590.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="313.0" y="563.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="316.0" y="574.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="313.0" y="547.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="316.0" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="313.0" y="531.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="316.0" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="313.0" y="515.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="316.0" y="526.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="313.0" y="499.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="316.0" y="510.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.10%)</title><rect x="313.0" y="483.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="316.0" y="494.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="313.0" y="467.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="316.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validateOffsetsAsync (1 samples, 0.10%)</title><rect x="314.2" y="563.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="317.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.regroupFetchPositionsByLeader (1 samples, 0.10%)</title><rect x="314.2" y="547.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.2" y="558.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="314.2" y="531.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="317.2" y="542.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="314.2" y="515.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.2" y="526.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="314.2" y="499.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="317.2" y="510.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="314.2" y="483.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.poll (2 samples, 0.21%)</title><rect x="315.4" y="595.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="318.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.coordinatorUnknownAndUnreadySync (2 samples, 0.21%)</title><rect x="315.4" y="579.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="318.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.coordinatorUnknown (2 samples, 0.21%)</title><rect x="315.4" y="563.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.checkAndGetCoordinator (2 samples, 0.21%)</title><rect x="315.4" y="547.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="318.4" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.21%)</title><rect x="317.9" y="611.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="320.9" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.10%)</title><rect x="317.9" y="595.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="320.9" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.10%)</title><rect x="317.9" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$FairSync.tryAcquire (1 samples, 0.10%)</title><rect x="317.9" y="563.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="320.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="319.1" y="595.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="322.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="319.1" y="579.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="322.1" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="319.1" y="563.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="322.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="319.1" y="547.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="322.1" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.52%)</title><rect x="320.3" y="611.0" width="6.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="323.3" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (5 samples, 0.52%)</title><rect x="320.3" y="595.0" width="6.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="323.3" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (5 samples, 0.52%)</title><rect x="320.3" y="579.0" width="6.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.3" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="320.3" y="563.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="323.3" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.shouldRecord (1 samples, 0.10%)</title><rect x="320.3" y="547.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="323.3" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (4 samples, 0.42%)</title><rect x="321.6" y="563.0" width="4.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="324.6" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (4 samples, 0.42%)</title><rect x="321.6" y="547.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="324.6" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (4 samples, 0.42%)</title><rect x="321.6" y="531.0" width="4.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="324.6" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (4 samples, 0.42%)</title><rect x="321.6" y="515.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="324.6" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (4 samples, 0.42%)</title><rect x="321.6" y="499.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="324.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (2 samples, 0.21%)</title><rect x="321.6" y="483.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="324.6" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.21%)</title><rect x="321.6" y="467.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.21%)</title><rect x="321.6" y="451.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="324.6" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.21%)</title><rect x="321.6" y="435.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="324.6" y="446.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.21%)</title><rect x="321.6" y="419.0" width="2.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="324.6" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.21%)</title><rect x="321.6" y="403.0" width="2.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="324.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.21%)</title><rect x="321.6" y="387.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="324.6" y="398.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.21%)</title><rect x="321.6" y="371.0" width="2.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="324.6" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (2 samples, 0.21%)</title><rect x="324.0" y="483.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="327.0" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.21%)</title><rect x="324.0" y="467.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="327.0" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.21%)</title><rect x="324.0" y="451.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="327.0" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (2 samples, 0.21%)</title><rect x="324.0" y="435.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="327.0" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.10%)</title><rect x="324.0" y="419.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="327.0" y="430.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.10%)</title><rect x="324.0" y="403.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.0" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.10%)</title><rect x="324.0" y="387.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="327.0" y="398.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="324.0" y="371.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="327.0" y="382.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.10%)</title><rect x="325.2" y="419.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="328.2" y="430.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.10%)</title><rect x="325.2" y="403.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.2" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.10%)</title><rect x="325.2" y="387.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="328.2" y="398.0"></text>
</g>
<g>
<title>fdval (1 samples, 0.10%)</title><rect x="325.2" y="371.0" width="1.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="328.2" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (5 samples, 0.52%)</title><rect x="326.5" y="611.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="329.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="326.5" y="595.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.send (1 samples, 0.10%)</title><rect x="326.5" y="579.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.put (1 samples, 0.10%)</title><rect x="326.5" y="563.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="329.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.add (1 samples, 0.10%)</title><rect x="326.5" y="547.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (4 samples, 0.42%)</title><rect x="327.7" y="595.0" width="4.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (2 samples, 0.21%)</title><rect x="327.7" y="579.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="330.7" y="590.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap.forEach (1 samples, 0.10%)</title><rect x="327.7" y="563.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="330.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.fetchablePartitions (1 samples, 0.10%)</title><rect x="328.9" y="563.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="331.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.forEach (1 samples, 0.10%)</title><rect x="328.9" y="547.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="331.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.10%)</title><rect x="330.1" y="579.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="333.1" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.preferredReadReplica (1 samples, 0.10%)</title><rect x="330.1" y="563.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.1" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.validatePositionsOnMetadataChange (1 samples, 0.10%)</title><rect x="331.4" y="579.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="334.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata.updateVersion (1 samples, 0.10%)</title><rect x="331.4" y="563.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="334.4" y="574.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (2 samples, 0.21%)</title><rect x="332.6" y="659.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="335.6" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.21%)</title><rect x="332.6" y="643.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="335.6" y="654.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.21%)</title><rect x="332.6" y="627.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="335.6" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.21%)</title><rect x="332.6" y="611.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="335.6" y="622.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.21%)</title><rect x="332.6" y="595.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="335.6" y="606.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (2 samples, 0.21%)</title><rect x="332.6" y="579.0" width="2.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="335.6" y="590.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.forEachRemaining (1 samples, 0.10%)</title><rect x="332.6" y="563.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="335.6" y="574.0"></text>
</g>
<g>
<title>java/util/Spliterator.getExactSizeIfKnown (1 samples, 0.10%)</title><rect x="333.8" y="563.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="336.8" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap$EntrySpliterator.characteristics (1 samples, 0.10%)</title><rect x="333.8" y="547.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="336.8" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="335.1" y="659.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="338.1" y="670.0"></text>
</g>
<g>
<title>java/lang/Thread.run (664 samples, 69.02%)</title><rect x="336.3" y="691.0" width="814.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="339.3" y="702.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (664 samples, 69.02%)</title><rect x="336.3" y="675.0" width="814.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="339.3" y="686.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (664 samples, 69.02%)</title><rect x="336.3" y="659.0" width="814.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="339.3" y="670.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1427696444.run (421 samples, 43.76%)</title><rect x="337.5" y="643.0" width="516.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.5" y="654.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$4..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (421 samples, 43.76%)</title><rect x="337.5" y="627.0" width="516.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="340.5" y="638.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$pu..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (421 samples, 43.76%)</title><rect x="337.5" y="611.0" width="516.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="340.5" y="622.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (421 samples, 43.76%)</title><rect x="337.5" y="595.0" width="516.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="340.5" y="606.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.schedul..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (48 samples, 4.99%)</title><rect x="347.3" y="579.0" width="58.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="350.3" y="590.0">com/li..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (48 samples, 4.99%)</title><rect x="347.3" y="563.0" width="58.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="350.3" y="574.0">java/u..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (48 samples, 4.99%)</title><rect x="347.3" y="547.0" width="58.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="350.3" y="558.0">java/u..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (1 samples, 0.10%)</title><rect x="365.7" y="531.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="368.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (32 samples, 3.33%)</title><rect x="366.9" y="531.0" width="39.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="369.9" y="542.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (2 samples, 0.21%)</title><rect x="366.9" y="515.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="369.9" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$481/896641107.accept (2 samples, 0.21%)</title><rect x="366.9" y="499.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="369.9" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (30 samples, 3.12%)</title><rect x="369.4" y="515.0" width="36.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="372.4" y="526.0">jav..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$481/896641107.accept (30 samples, 3.12%)</title><rect x="369.4" y="499.0" width="36.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="372.4" y="510.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (30 samples, 3.12%)</title><rect x="369.4" y="483.0" width="36.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="372.4" y="494.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (30 samples, 3.12%)</title><rect x="369.4" y="467.0" width="36.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.4" y="478.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (30 samples, 3.12%)</title><rect x="369.4" y="451.0" width="36.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.4" y="462.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (28 samples, 2.91%)</title><rect x="371.9" y="435.0" width="34.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="374.9" y="446.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (12 samples, 1.25%)</title><rect x="371.9" y="419.0" width="14.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="374.9" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$475/987025688.accept (1 samples, 0.10%)</title><rect x="379.2" y="403.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.2" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$474/1578115899.accept (1 samples, 0.10%)</title><rect x="380.4" y="403.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="383.4" y="414.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.42%)</title><rect x="381.7" y="403.0" width="4.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="384.7" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (16 samples, 1.66%)</title><rect x="386.6" y="419.0" width="19.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="389.6" y="430.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (2 samples, 0.21%)</title><rect x="406.2" y="579.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="409.2" y="590.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (2 samples, 0.21%)</title><rect x="406.2" y="563.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.2" y="574.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (2 samples, 0.21%)</title><rect x="406.2" y="547.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="409.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="406.2" y="531.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="409.2" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.21%)</title><rect x="406.2" y="515.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="409.2" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (121 samples, 12.58%)</title><rect x="408.6" y="579.0" width="148.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.6" y="590.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (121 samples, 12.58%)</title><rect x="408.6" y="563.0" width="148.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.6" y="574.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (121 samples, 12.58%)</title><rect x="408.6" y="547.0" width="148.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="411.6" y="558.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 12.58%)</title><rect x="408.6" y="531.0" width="148.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.6" y="542.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (121 samples, 12.58%)</title><rect x="408.6" y="515.0" width="148.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="411.6" y="526.0">com/linecorp/decato..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (121 samples, 12.58%)</title><rect x="408.6" y="499.0" width="148.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.6" y="510.0">com/fasterxml/jacks..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (48 samples, 4.99%)</title><rect x="408.6" y="483.0" width="58.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="411.6" y="494.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (9 samples, 0.94%)</title><rect x="408.6" y="467.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="411.6" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (9 samples, 0.94%)</title><rect x="408.6" y="451.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="411.6" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (9 samples, 0.94%)</title><rect x="408.6" y="435.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.6" y="446.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (9 samples, 0.94%)</title><rect x="408.6" y="419.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.6" y="430.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (9 samples, 0.94%)</title><rect x="408.6" y="403.0" width="11.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.6" y="414.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.42%)</title><rect x="414.8" y="387.0" width="4.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="417.8" y="398.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.31%)</title><rect x="416.0" y="371.0" width="3.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="419.0" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (39 samples, 4.05%)</title><rect x="419.7" y="467.0" width="47.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="422.7" y="478.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (39 samples, 4.05%)</title><rect x="419.7" y="451.0" width="47.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="422.7" y="462.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="419.7" y="435.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="422.7" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="419.7" y="419.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="422.7" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="419.7" y="403.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="422.7" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="419.7" y="387.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="422.7" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="419.7" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="422.7" y="382.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="419.7" y="355.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="422.7" y="366.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="419.7" y="339.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="422.7" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (38 samples, 3.95%)</title><rect x="420.9" y="435.0" width="46.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="423.9" y="446.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="420.9" y="419.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="423.9" y="430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="420.9" y="403.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="423.9" y="414.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="420.9" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="423.9" y="398.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="420.9" y="371.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="423.9" y="382.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="420.9" y="355.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="423.9" y="366.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="420.9" y="339.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="423.9" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="420.9" y="323.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="423.9" y="334.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="420.9" y="307.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="423.9" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="420.9" y="291.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="423.9" y="302.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.10%)</title><rect x="420.9" y="275.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="423.9" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (37 samples, 3.85%)</title><rect x="422.1" y="419.0" width="45.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="425.1" y="430.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (28 samples, 2.91%)</title><rect x="423.4" y="403.0" width="34.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.4" y="414.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (28 samples, 2.91%)</title><rect x="423.4" y="387.0" width="34.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="426.4" y="398.0">co..</text>
</g>
<g>
<title>__clock_gettime (9 samples, 0.94%)</title><rect x="446.7" y="371.0" width="11.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="449.7" y="382.0"></text>
</g>
<g>
<title>[vdso] (9 samples, 0.94%)</title><rect x="446.7" y="355.0" width="11.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="449.7" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.21%)</title><rect x="457.7" y="403.0" width="2.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.7" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.&lt;init&gt; (2 samples, 0.21%)</title><rect x="457.7" y="387.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.7" y="398.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="458.9" y="371.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="461.9" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (6 samples, 0.62%)</title><rect x="460.2" y="403.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="463.2" y="414.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="466.3" y="387.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="469.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (66 samples, 6.86%)</title><rect x="467.5" y="483.0" width="81.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="470.5" y="494.0">com/faste..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (7 samples, 0.73%)</title><rect x="467.5" y="467.0" width="8.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="470.5" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.73%)</title><rect x="467.5" y="451.0" width="8.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="470.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.10%)</title><rect x="474.9" y="435.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="477.9" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (14 samples, 1.46%)</title><rect x="476.1" y="467.0" width="17.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.1" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (8 samples, 0.83%)</title><rect x="483.5" y="451.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="486.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.42%)</title><rect x="484.7" y="435.0" width="4.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="487.7" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (4 samples, 0.42%)</title><rect x="484.7" y="419.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="487.7" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.10%)</title><rect x="488.4" y="403.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.4" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (3 samples, 0.31%)</title><rect x="489.6" y="435.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="492.6" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (3 samples, 0.31%)</title><rect x="489.6" y="419.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="492.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (3 samples, 0.31%)</title><rect x="489.6" y="403.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="492.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (3 samples, 0.31%)</title><rect x="489.6" y="387.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="492.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.createDeserializationContext (3 samples, 0.31%)</title><rect x="493.3" y="467.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="496.3" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.createInstance (3 samples, 0.31%)</title><rect x="493.3" y="451.0" width="3.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="496.3" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext$Impl.&lt;init&gt; (3 samples, 0.31%)</title><rect x="493.3" y="435.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.3" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.&lt;init&gt; (3 samples, 0.31%)</title><rect x="493.3" y="419.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="496.3" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DeserializationContext.&lt;init&gt; (3 samples, 0.31%)</title><rect x="493.3" y="403.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="496.3" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/DatabindContext.&lt;init&gt; (3 samples, 0.31%)</title><rect x="493.3" y="387.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="496.3" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (42 samples, 4.37%)</title><rect x="497.0" y="467.0" width="51.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="500.0" y="478.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (42 samples, 4.37%)</title><rect x="497.0" y="451.0" width="51.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="500.0" y="462.0">com/f..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (11 samples, 1.14%)</title><rect x="498.2" y="435.0" width="13.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="501.2" y="446.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (2 samples, 0.21%)</title><rect x="498.2" y="419.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="501.2" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (2 samples, 0.21%)</title><rect x="498.2" y="403.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="501.2" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.10%)</title><rect x="499.4" y="387.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="502.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.10%)</title><rect x="500.6" y="419.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="503.6" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.10%)</title><rect x="500.6" y="403.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="503.6" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.10%)</title><rect x="500.6" y="387.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="503.6" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (7 samples, 0.73%)</title><rect x="501.9" y="419.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="504.9" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (1 samples, 0.10%)</title><rect x="510.5" y="419.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="513.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (1 samples, 0.10%)</title><rect x="510.5" y="403.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="513.5" y="414.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (30 samples, 3.12%)</title><rect x="511.7" y="435.0" width="36.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="514.7" y="446.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (30 samples, 3.12%)</title><rect x="511.7" y="419.0" width="36.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="514.7" y="430.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (29 samples, 3.01%)</title><rect x="512.9" y="403.0" width="35.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="515.9" y="414.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (9 samples, 0.94%)</title><rect x="517.8" y="387.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="520.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (4 samples, 0.42%)</title><rect x="521.5" y="371.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="524.5" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (4 samples, 0.42%)</title><rect x="521.5" y="355.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.5" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (4 samples, 0.42%)</title><rect x="521.5" y="339.0" width="4.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="524.5" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (3 samples, 0.31%)</title><rect x="522.7" y="323.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="525.7" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.21%)</title><rect x="526.4" y="371.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="529.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.21%)</title><rect x="526.4" y="355.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="529.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="527.6" y="339.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.6" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.73%)</title><rect x="528.9" y="387.0" width="8.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="531.9" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.52%)</title><rect x="531.3" y="371.0" width="6.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="534.3" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.52%)</title><rect x="531.3" y="355.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.3" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (5 samples, 0.52%)</title><rect x="531.3" y="339.0" width="6.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="534.3" y="350.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (5 samples, 0.52%)</title><rect x="531.3" y="323.0" width="6.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="534.3" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (5 samples, 0.52%)</title><rect x="531.3" y="307.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="534.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsLong (5 samples, 0.52%)</title><rect x="531.3" y="291.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="534.3" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseLong (5 samples, 0.52%)</title><rect x="531.3" y="275.0" width="6.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="534.3" y="286.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/NumberInput.parseInt (5 samples, 0.52%)</title><rect x="531.3" y="259.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="534.3" y="270.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (4 samples, 0.42%)</title><rect x="537.4" y="387.0" width="4.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="540.4" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (4 samples, 0.42%)</title><rect x="537.4" y="371.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="540.4" y="382.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (4 samples, 0.42%)</title><rect x="537.4" y="355.0" width="4.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="540.4" y="366.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (4 samples, 0.42%)</title><rect x="537.4" y="339.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="540.4" y="350.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (4 samples, 0.42%)</title><rect x="537.4" y="323.0" width="4.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="540.4" y="334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (4 samples, 0.42%)</title><rect x="537.4" y="307.0" width="4.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="540.4" y="318.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeConstructorAccessorImpl.newInstance (4 samples, 0.42%)</title><rect x="537.4" y="291.0" width="4.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="540.4" y="302.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (2 samples, 0.21%)</title><rect x="542.3" y="387.0" width="2.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="545.3" y="398.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.21%)</title><rect x="542.3" y="371.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="545.3" y="382.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="542.3" y="355.0" width="1.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="545.3" y="366.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="543.6" y="355.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="546.6" y="366.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.10%)</title><rect x="543.6" y="339.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="546.6" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.10%)</title><rect x="543.6" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="546.6" y="334.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.startBuilding (3 samples, 0.31%)</title><rect x="544.8" y="387.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="547.8" y="398.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.&lt;init&gt; (3 samples, 0.31%)</title><rect x="544.8" y="371.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="547.8" y="382.0"></text>
</g>
<g>
<title>Klass::klass_holder() const (1 samples, 0.10%)</title><rect x="544.8" y="355.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="547.8" y="366.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.21%)</title><rect x="546.0" y="355.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="549.0" y="366.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.10%)</title><rect x="547.3" y="339.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="550.3" y="350.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="547.3" y="323.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="550.3" y="334.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="547.3" y="307.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="550.3" y="318.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (7 samples, 0.73%)</title><rect x="548.5" y="483.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="551.5" y="494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (7 samples, 0.73%)</title><rect x="548.5" y="467.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="551.5" y="478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (7 samples, 0.73%)</title><rect x="548.5" y="451.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.5" y="462.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (7 samples, 0.73%)</title><rect x="548.5" y="435.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="551.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (7 samples, 0.73%)</title><rect x="548.5" y="419.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="551.5" y="430.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createRootContext (2 samples, 0.21%)</title><rect x="554.6" y="403.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.6" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (239 samples, 24.84%)</title><rect x="557.1" y="579.0" width="293.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="560.1" y="590.0">com/linecorp/decaton/processor/runtime/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="558.3" y="563.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="561.3" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="558.3" y="547.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="561.3" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="558.3" y="531.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="561.3" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="558.3" y="515.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="561.3" y="526.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="558.3" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="561.3" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (44 samples, 4.57%)</title><rect x="559.5" y="563.0" width="54.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="562.5" y="574.0">com/l..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (44 samples, 4.57%)</title><rect x="559.5" y="547.0" width="54.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="562.5" y="558.0">org/s..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (44 samples, 4.57%)</title><rect x="559.5" y="531.0" width="54.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="562.5" y="542.0">ch/qo..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (22 samples, 2.29%)</title><rect x="560.7" y="515.0" width="27.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="563.7" y="526.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (9 samples, 0.94%)</title><rect x="576.7" y="499.0" width="11.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="579.7" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.94%)</title><rect x="576.7" y="483.0" width="11.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="579.7" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (21 samples, 2.18%)</title><rect x="587.7" y="515.0" width="25.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.7" y="526.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.31%)</title><rect x="589.0" y="499.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="592.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.remove (17 samples, 1.77%)</title><rect x="592.6" y="499.0" width="20.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="595.6" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (5 samples, 0.52%)</title><rect x="592.6" y="483.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="595.6" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (12 samples, 1.25%)</title><rect x="598.8" y="483.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="601.8" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (4 samples, 0.42%)</title><rect x="613.5" y="563.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.5" y="574.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (4 samples, 0.42%)</title><rect x="613.5" y="547.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="616.5" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (100 samples, 10.40%)</title><rect x="618.4" y="563.0" width="122.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="621.4" y="574.0">com/linecorp/de..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="620.9" y="547.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="623.9" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="620.9" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="623.9" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="620.9" y="515.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="623.9" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="620.9" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="623.9" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="620.9" y="483.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="623.9" y="494.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="620.9" y="467.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="623.9" y="478.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="620.9" y="451.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.9" y="462.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="620.9" y="435.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="623.9" y="446.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="620.9" y="419.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="623.9" y="430.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="620.9" y="403.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="623.9" y="414.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (88 samples, 9.15%)</title><rect x="622.1" y="547.0" width="107.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="625.1" y="558.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (27 samples, 2.81%)</title><rect x="633.1" y="531.0" width="33.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.1" y="542.0">co..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (26 samples, 2.70%)</title><rect x="633.1" y="515.0" width="31.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.1" y="526.0">ja..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (7 samples, 0.73%)</title><rect x="642.9" y="499.0" width="8.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.9" y="510.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (7 samples, 0.73%)</title><rect x="642.9" y="483.0" width="8.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.9" y="494.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.73%)</title><rect x="642.9" y="467.0" width="8.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="645.9" y="478.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.42%)</title><rect x="646.6" y="451.0" width="4.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="649.6" y="462.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.31%)</title><rect x="647.8" y="435.0" width="3.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="650.8" y="446.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.31%)</title><rect x="647.8" y="419.0" width="3.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="650.8" y="430.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.31%)</title><rect x="647.8" y="403.0" width="3.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="650.8" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.31%)</title><rect x="647.8" y="387.0" width="3.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="650.8" y="398.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.21%)</title><rect x="647.8" y="371.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="650.8" y="382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="649.1" y="355.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="652.1" y="366.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.10%)</title><rect x="649.1" y="339.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="652.1" y="350.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.10%)</title><rect x="649.1" y="323.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="652.1" y="334.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.10%)</title><rect x="649.1" y="307.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="652.1" y="318.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.10%)</title><rect x="650.3" y="371.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="653.3" y="382.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.10%)</title><rect x="650.3" y="355.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="653.3" y="366.0"></text>
</g>
<g>
<title>jbyte_arraycopy (3 samples, 0.31%)</title><rect x="651.5" y="499.0" width="3.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="654.5" y="510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (8 samples, 0.83%)</title><rect x="655.2" y="499.0" width="9.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="658.2" y="510.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.10%)</title><rect x="665.0" y="515.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.0" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.10%)</title><rect x="665.0" y="499.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="668.0" y="510.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.10%)</title><rect x="665.0" y="483.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="668.0" y="494.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="665.0" y="467.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="668.0" y="478.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="665.0" y="451.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="668.0" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.10%)</title><rect x="665.0" y="435.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="668.0" y="446.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="665.0" y="419.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="668.0" y="430.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="665.0" y="403.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="668.0" y="414.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.10%)</title><rect x="666.2" y="531.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="669.2" y="542.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="667.5" y="531.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="670.5" y="542.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (50 samples, 5.20%)</title><rect x="668.7" y="531.0" width="61.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="671.7" y="542.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (49 samples, 5.09%)</title><rect x="669.9" y="515.0" width="60.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="672.9" y="526.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (30 samples, 3.12%)</title><rect x="669.9" y="499.0" width="36.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="672.9" y="510.0">ch/..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (12 samples, 1.25%)</title><rect x="692.0" y="483.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="695.0" y="494.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (12 samples, 1.25%)</title><rect x="692.0" y="467.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="695.0" y="478.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (19 samples, 1.98%)</title><rect x="706.7" y="499.0" width="23.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="709.7" y="510.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (19 samples, 1.98%)</title><rect x="706.7" y="483.0" width="23.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="709.7" y="494.0">j..</text>
</g>
<g>
<title>java/util/HashMap.hash (2 samples, 0.21%)</title><rect x="706.7" y="467.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="709.7" y="478.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.21%)</title><rect x="706.7" y="451.0" width="2.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="709.7" y="462.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (2 samples, 0.21%)</title><rect x="706.7" y="435.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="709.7" y="446.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (17 samples, 1.77%)</title><rect x="709.2" y="467.0" width="20.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="712.2" y="478.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (3 samples, 0.31%)</title><rect x="726.3" y="451.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="729.3" y="462.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.31%)</title><rect x="726.3" y="435.0" width="3.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="729.3" y="446.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.31%)</title><rect x="726.3" y="419.0" width="3.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="729.3" y="430.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.21%)</title><rect x="727.6" y="403.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="730.6" y="414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.21%)</title><rect x="727.6" y="387.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="730.6" y="398.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="727.6" y="371.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="730.6" y="382.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.10%)</title><rect x="727.6" y="355.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="730.6" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="728.8" y="371.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="731.8" y="382.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="728.8" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="731.8" y="366.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (6 samples, 0.62%)</title><rect x="730.0" y="547.0" width="7.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="733.0" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (6 samples, 0.62%)</title><rect x="730.0" y="531.0" width="7.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="733.0" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (6 samples, 0.62%)</title><rect x="730.0" y="515.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="733.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.62%)</title><rect x="730.0" y="499.0" width="7.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="733.0" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.52%)</title><rect x="730.0" y="483.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="733.0" y="494.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="736.2" y="483.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="739.2" y="494.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.31%)</title><rect x="737.4" y="547.0" width="3.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="740.4" y="558.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (74 samples, 7.69%)</title><rect x="741.1" y="563.0" width="90.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="744.1" y="574.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (74 samples, 7.69%)</title><rect x="741.1" y="547.0" width="90.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="744.1" y="558.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/645873265.process (15 samples, 1.56%)</title><rect x="743.5" y="531.0" width="18.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="746.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (15 samples, 1.56%)</title><rect x="743.5" y="515.0" width="18.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="746.5" y="526.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="743.5" y="499.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="746.5" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (6 samples, 0.62%)</title><rect x="744.7" y="499.0" width="7.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="747.7" y="510.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.42%)</title><rect x="747.2" y="483.0" width="4.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="750.2" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (5 samples, 0.52%)</title><rect x="752.1" y="499.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="755.1" y="510.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.21%)</title><rect x="752.1" y="483.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="755.1" y="494.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (2 samples, 0.21%)</title><rect x="752.1" y="467.0" width="2.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="755.1" y="478.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (2 samples, 0.21%)</title><rect x="752.1" y="451.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="755.1" y="462.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (1 samples, 0.10%)</title><rect x="754.6" y="483.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="757.6" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task.getProducedTime (1 samples, 0.10%)</title><rect x="754.6" y="467.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="757.6" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (2 samples, 0.21%)</title><rect x="755.8" y="483.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.21%)</title><rect x="755.8" y="467.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="758.8" y="478.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (2 samples, 0.21%)</title><rect x="758.2" y="499.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="761.2" y="510.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="759.5" y="483.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="762.5" y="494.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="760.7" y="499.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="763.7" y="510.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (1 samples, 0.10%)</title><rect x="761.9" y="531.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="764.9" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/DecatonTask.&lt;init&gt; (6 samples, 0.62%)</title><rect x="763.1" y="531.0" width="7.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="766.1" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (1 samples, 0.10%)</title><rect x="769.3" y="515.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="772.3" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (8 samples, 0.83%)</title><rect x="770.5" y="531.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="773.5" y="542.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (7 samples, 0.73%)</title><rect x="770.5" y="515.0" width="8.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="773.5" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (1 samples, 0.10%)</title><rect x="779.1" y="515.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (1 samples, 0.10%)</title><rect x="780.3" y="531.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.3" y="542.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (1 samples, 0.10%)</title><rect x="780.3" y="515.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="783.3" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (13 samples, 1.35%)</title><rect x="781.5" y="531.0" width="16.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="784.5" y="542.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="796.3" y="515.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.3" y="526.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (1 samples, 0.10%)</title><rect x="796.3" y="499.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="799.3" y="510.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (9 samples, 0.94%)</title><rect x="797.5" y="531.0" width="11.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="800.5" y="542.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (7 samples, 0.73%)</title><rect x="798.7" y="515.0" width="8.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.7" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.elementData (7 samples, 0.73%)</title><rect x="798.7" y="499.0" width="8.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="801.7" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (5 samples, 0.52%)</title><rect x="798.7" y="483.0" width="6.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="801.7" y="494.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.52%)</title><rect x="798.7" y="467.0" width="6.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="801.7" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.21%)</title><rect x="804.8" y="483.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="807.8" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="807.3" y="515.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.3" y="526.0"></text>
</g>
<g>
<title>java/util/ArrayList.get (1 samples, 0.10%)</title><rect x="807.3" y="499.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.3" y="510.0"></text>
</g>
<g>
<title>java/util/Objects.checkIndex (1 samples, 0.10%)</title><rect x="807.3" y="483.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.3" y="494.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (5 samples, 0.52%)</title><rect x="808.5" y="531.0" width="6.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.5" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.21%)</title><rect x="808.5" y="515.0" width="2.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="811.5" y="526.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="809.8" y="499.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="812.8" y="510.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="809.8" y="483.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="812.8" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="809.8" y="467.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="812.8" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="809.8" y="451.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="812.8" y="462.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.10%)</title><rect x="809.8" y="435.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="812.8" y="446.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (3 samples, 0.31%)</title><rect x="811.0" y="515.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.0" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.21%)</title><rect x="814.7" y="531.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="817.7" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.73%)</title><rect x="817.1" y="531.0" width="8.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="820.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.73%)</title><rect x="817.1" y="515.0" width="8.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="820.1" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (7 samples, 0.73%)</title><rect x="817.1" y="499.0" width="8.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="820.1" y="510.0"></text>
</g>
<g>
<title>_new_instance_Java (1 samples, 0.10%)</title><rect x="817.1" y="483.0" width="1.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="820.1" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (4 samples, 0.42%)</title><rect x="818.3" y="483.0" width="4.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="821.3" y="494.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl$$Lambda$478/1874749080.accept (1 samples, 0.10%)</title><rect x="819.6" y="467.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="822.6" y="478.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.21%)</title><rect x="820.8" y="467.0" width="2.4" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="823.8" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.10%)</title><rect x="823.2" y="483.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="826.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (1 samples, 0.10%)</title><rect x="824.5" y="483.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="827.5" y="494.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.52%)</title><rect x="825.7" y="531.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="828.7" y="542.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.52%)</title><rect x="825.7" y="515.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="828.7" y="526.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.10%)</title><rect x="831.8" y="563.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.8" y="574.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (1 samples, 0.10%)</title><rect x="831.8" y="547.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="834.8" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.46%)</title><rect x="833.1" y="563.0" width="17.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="836.1" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (14 samples, 1.46%)</title><rect x="833.1" y="547.0" width="17.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.1" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (14 samples, 1.46%)</title><rect x="833.1" y="531.0" width="17.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (3 samples, 0.31%)</title><rect x="833.1" y="515.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="836.1" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$479/2066672430.accept (1 samples, 0.10%)</title><rect x="835.5" y="499.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.5" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (9 samples, 0.94%)</title><rect x="836.7" y="515.0" width="11.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="839.7" y="526.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$479/2066672430.accept (9 samples, 0.94%)</title><rect x="836.7" y="499.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="839.7" y="510.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.42%)</title><rect x="841.6" y="483.0" width="4.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="844.6" y="494.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.42%)</title><rect x="841.6" y="467.0" width="4.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="844.6" y="478.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.10%)</title><rect x="846.5" y="483.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="849.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.unipush (2 samples, 0.21%)</title><rect x="847.8" y="515.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.8" y="526.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.31%)</title><rect x="850.2" y="579.0" width="3.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="853.2" y="590.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.21%)</title><rect x="851.5" y="563.0" width="2.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="854.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1 samples, 0.10%)</title><rect x="853.9" y="643.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="856.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (3 samples, 0.31%)</title><rect x="855.1" y="643.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="858.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.31%)</title><rect x="855.1" y="627.0" width="3.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.31%)</title><rect x="855.1" y="611.0" width="3.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="858.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (238 samples, 24.74%)</title><rect x="858.8" y="643.0" width="291.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="861.8" y="654.0">java/util/concurrent/ThreadPoolExecutor..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (237 samples, 24.64%)</title><rect x="860.0" y="627.0" width="290.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.0" y="638.0">java/util/concurrent/LinkedBlockingQueu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (215 samples, 22.35%)</title><rect x="863.7" y="611.0" width="263.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="866.7" y="622.0">java/util/concurrent/locks/Abstract..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (2 samples, 0.21%)</title><rect x="868.6" y="595.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="871.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.21%)</title><rect x="868.6" y="579.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="871.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1 samples, 0.10%)</title><rect x="871.1" y="595.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="874.1" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="871.1" y="579.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.1" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="871.1" y="563.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="874.1" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="871.1" y="547.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="874.1" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="871.1" y="531.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="874.1" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="871.1" y="515.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.1" y="526.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.10%)</title><rect x="871.1" y="499.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="874.1" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (19 samples, 1.98%)</title><rect x="872.3" y="595.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="875.3" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.83%)</title><rect x="895.6" y="595.0" width="9.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="898.6" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.83%)</title><rect x="895.6" y="579.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="898.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.21%)</title><rect x="903.0" y="563.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="906.0" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (11 samples, 1.14%)</title><rect x="905.4" y="595.0" width="13.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="908.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (11 samples, 1.14%)</title><rect x="905.4" y="579.0" width="13.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (170 samples, 17.67%)</title><rect x="918.9" y="595.0" width="208.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.9" y="606.0">java/util/concurrent/locks/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (169 samples, 17.57%)</title><rect x="920.1" y="579.0" width="207.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="923.1" y="590.0">jdk/internal/misc/Unsafe.park</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (1 samples, 0.10%)</title><rect x="921.4" y="563.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="924.4" y="574.0"></text>
</g>
<g>
<title>Unsafe_Park (164 samples, 17.05%)</title><rect x="922.6" y="563.0" width="201.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="925.6" y="574.0">Unsafe_Park</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.10%)</title><rect x="925.1" y="547.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="928.1" y="558.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.31%)</title><rect x="926.3" y="547.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="929.3" y="558.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (27 samples, 2.81%)</title><rect x="930.0" y="547.0" width="33.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="933.0" y="558.0">Pa..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (11 samples, 1.14%)</title><rect x="941.0" y="531.0" width="13.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="944.0" y="542.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (5 samples, 0.52%)</title><rect x="947.1" y="515.0" width="6.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="950.1" y="526.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="953.3" y="515.0" width="1.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="956.3" y="526.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="954.5" y="531.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="957.5" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.21%)</title><rect x="955.7" y="531.0" width="2.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="958.7" y="542.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (3 samples, 0.31%)</title><rect x="958.2" y="531.0" width="3.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="961.2" y="542.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="961.9" y="531.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="964.9" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.347] (3 samples, 0.31%)</title><rect x="963.1" y="547.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="966.1" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.346] (4 samples, 0.42%)</title><rect x="966.8" y="547.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="969.8" y="558.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="971.7" y="547.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="974.7" y="558.0"></text>
</g>
<g>
<title>__lll_unlock_wake (39 samples, 4.05%)</title><rect x="972.9" y="547.0" width="47.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="975.9" y="558.0">__ll..</text>
</g>
<g>
<title>__pthread_cond_wait (69 samples, 7.17%)</title><rect x="1020.7" y="547.0" width="84.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1023.7" y="558.0">__pthread_..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.42%)</title><rect x="1105.4" y="547.0" width="4.9" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1108.4" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.31%)</title><rect x="1110.3" y="547.0" width="3.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1113.3" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="1114.0" y="547.0" width="1.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1117.0" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.31%)</title><rect x="1115.2" y="547.0" width="3.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1118.2" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="1118.9" y="547.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1121.9" y="558.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="1120.1" y="547.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="1123.1" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1121.3" y="547.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1124.3" y="558.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="1122.5" y="547.0" width="1.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.5" y="558.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.21%)</title><rect x="1123.8" y="563.0" width="2.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1126.8" y="574.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.10%)</title><rect x="1126.2" y="563.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1129.2" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (18 samples, 1.87%)</title><rect x="1127.4" y="611.0" width="22.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1130.4" y="622.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (18 samples, 1.87%)</title><rect x="1127.4" y="595.0" width="22.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1130.4" y="606.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 1.87%)</title><rect x="1127.4" y="579.0" width="22.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1130.4" y="590.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (18 samples, 1.87%)</title><rect x="1127.4" y="563.0" width="22.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1130.4" y="574.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.10%)</title><rect x="1149.5" y="611.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1152.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.10%)</title><rect x="1150.7" y="691.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1153.7" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.pollNoWakeup (1 samples, 0.10%)</title><rect x="1150.7" y="675.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1153.7" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (1 samples, 0.10%)</title><rect x="1150.7" y="659.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1153.7" y="670.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (1 samples, 0.10%)</title><rect x="1150.7" y="643.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1153.7" y="654.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (1 samples, 0.10%)</title><rect x="1150.7" y="627.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.7" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (1 samples, 0.10%)</title><rect x="1150.7" y="611.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1153.7" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (1 samples, 0.10%)</title><rect x="1150.7" y="595.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1153.7" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1150.7" y="579.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1153.7" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.10%)</title><rect x="1150.7" y="563.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1153.7" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.10%)</title><rect x="1150.7" y="547.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1153.7" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchResponse.responseData (1 samples, 0.10%)</title><rect x="1150.7" y="531.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1153.7" y="542.0"></text>
</g>
<g>
<title>start_thread (31 samples, 3.22%)</title><rect x="1152.0" y="691.0" width="38.0" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1155.0" y="702.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (31 samples, 3.22%)</title><rect x="1152.0" y="675.0" width="38.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1155.0" y="686.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (31 samples, 3.22%)</title><rect x="1152.0" y="659.0" width="38.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1155.0" y="670.0">Thr..</text>
</g>
<g>
<title>GangWorker::loop() (6 samples, 0.62%)</title><rect x="1152.0" y="643.0" width="7.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1155.0" y="654.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (1 samples, 0.10%)</title><rect x="1152.0" y="627.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.0" y="638.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.10%)</title><rect x="1152.0" y="611.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1155.0" y="622.0"></text>
</g>
<g>
<title>SparsePRT::clear() (1 samples, 0.10%)</title><rect x="1152.0" y="595.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.0" y="606.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (5 samples, 0.52%)</title><rect x="1153.2" y="627.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.2" y="638.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.21%)</title><rect x="1153.2" y="611.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.2" y="622.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.21%)</title><rect x="1153.2" y="595.0" width="2.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.2" y="606.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.21%)</title><rect x="1153.2" y="579.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.2" y="590.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.10%)</title><rect x="1154.4" y="563.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.4" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.31%)</title><rect x="1155.7" y="611.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1158.7" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.21%)</title><rect x="1155.7" y="595.0" width="2.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1158.7" y="606.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.21%)</title><rect x="1155.7" y="579.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1158.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (2 samples, 0.21%)</title><rect x="1155.7" y="563.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1158.7" y="574.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (2 samples, 0.21%)</title><rect x="1155.7" y="547.0" width="2.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1158.7" y="558.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (2 samples, 0.21%)</title><rect x="1155.7" y="531.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1158.7" y="542.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="1156.9" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.9" y="526.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.10%)</title><rect x="1158.1" y="595.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1161.1" y="606.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.10%)</title><rect x="1158.1" y="579.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1161.1" y="590.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (24 samples, 2.49%)</title><rect x="1159.3" y="643.0" width="29.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1162.3" y="654.0">Ja..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (24 samples, 2.49%)</title><rect x="1159.3" y="627.0" width="29.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="638.0">Co..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (24 samples, 2.49%)</title><rect x="1159.3" y="611.0" width="29.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1162.3" y="622.0">Co..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (22 samples, 2.29%)</title><rect x="1159.3" y="595.0" width="27.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.3" y="606.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (22 samples, 2.29%)</title><rect x="1159.3" y="579.0" width="27.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1162.3" y="590.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (10 samples, 1.04%)</title><rect x="1159.3" y="563.0" width="12.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.3" y="574.0"></text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1159.3" y="547.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1162.3" y="558.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="1159.3" y="531.0" width="1.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1162.3" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.31%)</title><rect x="1160.6" y="547.0" width="3.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="558.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.31%)</title><rect x="1160.6" y="531.0" width="3.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1163.6" y="542.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1160.6" y="515.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.6" y="526.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1161.8" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1164.8" y="526.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.10%)</title><rect x="1163.0" y="515.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.0" y="526.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1163.0" y="499.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.0" y="510.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1163.0" y="483.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1166.0" y="494.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (6 samples, 0.62%)</title><rect x="1164.2" y="547.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1167.2" y="558.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1164.2" y="531.0" width="1.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1167.2" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (1 samples, 0.10%)</title><rect x="1165.5" y="531.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1168.5" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (1 samples, 0.10%)</title><rect x="1166.7" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1169.7" y="542.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.10%)</title><rect x="1167.9" y="531.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1170.9" y="542.0"></text>
</g>
<g>
<title>rRegNOper::type() const (1 samples, 0.10%)</title><rect x="1167.9" y="515.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.9" y="526.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.10%)</title><rect x="1169.1" y="531.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1172.1" y="542.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.10%)</title><rect x="1169.1" y="515.0" width="1.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.1" y="526.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1169.1" y="499.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.1" y="510.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.10%)</title><rect x="1170.4" y="531.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="542.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1170.4" y="515.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1173.4" y="526.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.10%)</title><rect x="1170.4" y="499.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1173.4" y="510.0"></text>
</g>
<g>
<title>Compile::Optimize() (8 samples, 0.83%)</title><rect x="1171.6" y="563.0" width="9.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.6" y="574.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (1 samples, 0.10%)</title><rect x="1171.6" y="547.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.6" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (1 samples, 0.10%)</title><rect x="1171.6" y="531.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.6" y="542.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1171.6" y="515.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1174.6" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*, bool) (1 samples, 0.10%)</title><rect x="1171.6" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.6" y="510.0"></text>
</g>
<g>
<title>PhaseIdealLoop::has_local_phi_input(Node*) (1 samples, 0.10%)</title><rect x="1171.6" y="483.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.6" y="494.0"></text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) [clone .part.267] (1 samples, 0.10%)</title><rect x="1172.8" y="547.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.8" y="558.0"></text>
</g>
<g>
<title>Type::remove_speculative() const (1 samples, 0.10%)</title><rect x="1172.8" y="531.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.8" y="542.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1174.1" y="547.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.1" y="558.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1174.1" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1177.1" y="542.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.21%)</title><rect x="1175.3" y="547.0" width="2.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.3" y="558.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1176.5" y="531.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.5" y="542.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.10%)</title><rect x="1176.5" y="515.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="526.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.10%)</title><rect x="1176.5" y="499.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1179.5" y="510.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1176.5" y="483.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1179.5" y="494.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.10%)</title><rect x="1177.7" y="547.0" width="1.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="558.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.10%)</title><rect x="1177.7" y="531.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.7" y="542.0"></text>
</g>
<g>
<title>TypeOopPtr::singleton() const (1 samples, 0.10%)</title><rect x="1177.7" y="515.0" width="1.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.7" y="526.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (1 samples, 0.10%)</title><rect x="1179.0" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.0" y="558.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1179.0" y="531.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.0" y="542.0"></text>
</g>
<g>
<title>CatchProjNode::Opcode() const (1 samples, 0.10%)</title><rect x="1179.0" y="515.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.0" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1180.2" y="547.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1183.2" y="558.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1180.2" y="531.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1183.2" y="542.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1180.2" y="515.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.2" y="526.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1180.2" y="499.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.2" y="510.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1180.2" y="483.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.2" y="494.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1180.2" y="467.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.2" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.42%)</title><rect x="1181.4" y="563.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1184.4" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.42%)</title><rect x="1181.4" y="547.0" width="4.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.4" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.42%)</title><rect x="1181.4" y="531.0" width="4.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.4" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.42%)</title><rect x="1181.4" y="515.0" width="4.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1184.4" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.42%)</title><rect x="1181.4" y="499.0" width="4.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1184.4" y="510.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.42%)</title><rect x="1181.4" y="483.0" width="4.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.4" y="494.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (2 samples, 0.21%)</title><rect x="1181.4" y="467.0" width="2.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1184.4" y="478.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.21%)</title><rect x="1181.4" y="451.0" width="2.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.4" y="462.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.21%)</title><rect x="1181.4" y="435.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.21%)</title><rect x="1181.4" y="419.0" width="2.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.4" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.21%)</title><rect x="1181.4" y="403.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1184.4" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.21%)</title><rect x="1181.4" y="387.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.4" y="398.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.21%)</title><rect x="1181.4" y="371.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.4" y="382.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.21%)</title><rect x="1181.4" y="355.0" width="2.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1184.4" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (2 samples, 0.21%)</title><rect x="1181.4" y="339.0" width="2.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.4" y="350.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (2 samples, 0.21%)</title><rect x="1181.4" y="323.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1184.4" y="334.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (2 samples, 0.21%)</title><rect x="1181.4" y="307.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.4" y="318.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (2 samples, 0.21%)</title><rect x="1181.4" y="291.0" width="2.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.4" y="302.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (2 samples, 0.21%)</title><rect x="1181.4" y="275.0" width="2.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1184.4" y="286.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1181.4" y="259.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.4" y="270.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.10%)</title><rect x="1181.4" y="243.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.4" y="254.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.10%)</title><rect x="1181.4" y="227.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1184.4" y="238.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1182.6" y="259.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.6" y="270.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1182.6" y="243.0" width="1.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.6" y="254.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (1 samples, 0.10%)</title><rect x="1182.6" y="227.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.6" y="238.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.10%)</title><rect x="1182.6" y="211.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.21%)</title><rect x="1183.9" y="467.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="478.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.21%)</title><rect x="1183.9" y="451.0" width="2.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.21%)</title><rect x="1183.9" y="435.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.21%)</title><rect x="1183.9" y="419.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.21%)</title><rect x="1183.9" y="403.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.9" y="414.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.9" y="387.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.9" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.9" y="371.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="382.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.9" y="355.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="366.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.9" y="339.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.9" y="323.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="334.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.9" y="307.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.9" y="318.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.9" y="291.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="302.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1183.9" y="275.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="286.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1183.9" y="259.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.9" y="270.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1183.9" y="243.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="254.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1183.9" y="227.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="238.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1183.9" y="211.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.9" y="222.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1183.9" y="195.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.9" y="206.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1183.9" y="179.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.9" y="190.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1183.9" y="163.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="174.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1183.9" y="147.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="158.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1183.9" y="131.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.9" y="142.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1183.9" y="115.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="126.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1183.9" y="99.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.9" y="110.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1183.9" y="83.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.9" y="94.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.10%)</title><rect x="1183.9" y="67.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.9" y="78.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.10%)</title><rect x="1183.9" y="51.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.9" y="62.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (1 samples, 0.10%)</title><rect x="1183.9" y="35.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.9" y="46.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.10%)</title><rect x="1185.1" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.1" y="398.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="371.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.1" y="382.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="355.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.1" y="366.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.10%)</title><rect x="1185.1" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.1" y="350.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1185.1" y="323.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.1" y="334.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1185.1" y="307.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="318.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1185.1" y="291.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.1" y="302.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.10%)</title><rect x="1185.1" y="275.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.1" y="286.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.21%)</title><rect x="1186.3" y="595.0" width="2.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.3" y="606.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.21%)</title><rect x="1186.3" y="579.0" width="2.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.3" y="590.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.21%)</title><rect x="1186.3" y="563.0" width="2.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="574.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.21%)</title><rect x="1186.3" y="547.0" width="2.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="558.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (1 samples, 0.10%)</title><rect x="1186.3" y="531.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1189.3" y="542.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1186.3" y="515.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="526.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1186.3" y="499.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="510.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1186.3" y="483.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.3" y="494.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1186.3" y="467.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.3" y="478.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1186.3" y="451.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.3" y="462.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.3" y="435.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.3" y="446.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.3" y="419.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="430.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.3" y="403.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.3" y="414.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1186.3" y="387.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.3" y="398.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1186.3" y="371.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.3" y="382.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.3" y="355.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="366.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.3" y="339.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.3" y="350.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.3" y="323.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="334.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1186.3" y="307.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="318.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1186.3" y="291.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.3" y="302.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1186.3" y="275.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.3" y="286.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.3" y="259.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.3" y="270.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1186.3" y="243.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.3" y="254.0"></text>
</g>
<g>
<title>GraphBuilder::profile_invocation(ciMethod*, ValueStack*) (1 samples, 0.10%)</title><rect x="1186.3" y="227.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.3" y="238.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.10%)</title><rect x="1187.5" y="531.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.5" y="542.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.10%)</title><rect x="1187.5" y="515.0" width="1.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.5" y="526.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (1 samples, 0.10%)</title><rect x="1187.5" y="499.0" width="1.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.5" y="510.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) [clone .constprop.234] (1 samples, 0.10%)</title><rect x="1187.5" y="483.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="494.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (1 samples, 0.10%)</title><rect x="1187.5" y="467.0" width="1.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.5" y="478.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_free_reg(Interval*) (1 samples, 0.10%)</title><rect x="1187.5" y="451.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.5" y="462.0"></text>
</g>
<g>
<title>LinearScanWalker::split_before_usage(Interval*, int, int) (1 samples, 0.10%)</title><rect x="1187.5" y="435.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.5" y="446.0"></text>
</g>
<g>
<title>Interval::split(int) (1 samples, 0.10%)</title><rect x="1187.5" y="419.0" width="1.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.5" y="430.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="643.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.8" y="654.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="627.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.8" y="638.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (1 samples, 0.10%)</title><rect x="1188.8" y="611.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="622.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="595.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1191.8" y="606.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="579.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="563.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.8" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (1 samples, 0.10%)</title><rect x="1188.8" y="547.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.8" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (1 samples, 0.10%)</title><rect x="1188.8" y="531.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="542.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (1 samples, 0.10%)</title><rect x="1188.8" y="515.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1191.8" y="526.0"></text>
</g>
</g>
</svg>
