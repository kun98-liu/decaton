<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1349"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1349"> </text>
<g id="frames">
<g>
<title>all (265 samples, 100.00%)</title><rect x="10.0" y="1315.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1326.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.38%)</title><rect x="10.0" y="1299.0" width="4.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1310.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.38%)</title><rect x="10.0" y="1283.0" width="4.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1294.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.38%)</title><rect x="14.5" y="1299.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="17.5" y="1310.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.38%)</title><rect x="14.5" y="1283.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="17.5" y="1294.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (17 samples, 6.42%)</title><rect x="18.9" y="1299.0" width="75.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="21.9" y="1310.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (17 samples, 6.42%)</title><rect x="18.9" y="1283.0" width="75.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="1294.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 6.04%)</title><rect x="18.9" y="1267.0" width="71.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="21.9" y="1278.0">com/line..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (2 samples, 0.75%)</title><rect x="18.9" y="1251.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.9" y="1262.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (2 samples, 0.75%)</title><rect x="18.9" y="1235.0" width="8.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="21.9" y="1246.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (2 samples, 0.75%)</title><rect x="18.9" y="1219.0" width="8.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.9" y="1230.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$244/2138203099.accept (2 samples, 0.75%)</title><rect x="18.9" y="1203.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.9" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (2 samples, 0.75%)</title><rect x="18.9" y="1187.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="21.9" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (2 samples, 0.75%)</title><rect x="18.9" y="1171.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="21.9" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (2 samples, 0.75%)</title><rect x="18.9" y="1155.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="21.9" y="1166.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (5 samples, 1.89%)</title><rect x="27.8" y="1251.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.8" y="1262.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$243/752666949.accept (5 samples, 1.89%)</title><rect x="27.8" y="1235.0" width="22.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="30.8" y="1246.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (5 samples, 1.89%)</title><rect x="27.8" y="1219.0" width="22.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.8" y="1230.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRecord (1 samples, 0.38%)</title><rect x="27.8" y="1203.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.8" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.38%)</title><rect x="27.8" y="1187.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="30.8" y="1198.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.38%)</title><rect x="27.8" y="1171.0" width="4.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="30.8" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.38%)</title><rect x="27.8" y="1155.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.8" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.38%)</title><rect x="27.8" y="1139.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.38%)</title><rect x="27.8" y="1123.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.8" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.38%)</title><rect x="27.8" y="1107.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.38%)</title><rect x="27.8" y="1091.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.8" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.38%)</title><rect x="27.8" y="1075.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.8" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.38%)</title><rect x="27.8" y="1059.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.8" y="1070.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.75%)</title><rect x="32.3" y="1203.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="35.3" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.75%)</title><rect x="32.3" y="1187.0" width="8.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="35.3" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.75%)</title><rect x="32.3" y="1171.0" width="8.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="35.3" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.75%)</title><rect x="32.3" y="1155.0" width="8.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="35.3" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (2 samples, 0.75%)</title><rect x="41.2" y="1203.0" width="8.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="44.2" y="1214.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.75%)</title><rect x="41.2" y="1187.0" width="8.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="44.2" y="1198.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.75%)</title><rect x="41.2" y="1171.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.40%)</title><rect x="50.1" y="1251.0" width="40.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.1" y="1262.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (9 samples, 3.40%)</title><rect x="50.1" y="1235.0" width="40.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.1" y="1246.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (7 samples, 2.64%)</title><rect x="50.1" y="1219.0" width="31.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="53.1" y="1230.0">or..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.38%)</title><rect x="50.1" y="1203.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.1" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.38%)</title><rect x="50.1" y="1187.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.1" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Heartbeat.timeToNextHeartbeat (1 samples, 0.38%)</title><rect x="50.1" y="1171.0" width="4.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.1" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.51%)</title><rect x="54.5" y="1203.0" width="17.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="57.5" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (4 samples, 1.51%)</title><rect x="54.5" y="1187.0" width="17.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="57.5" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.75%)</title><rect x="54.5" y="1171.0" width="8.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.5" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.38%)</title><rect x="54.5" y="1155.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="57.5" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.38%)</title><rect x="54.5" y="1139.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="57.5" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.38%)</title><rect x="54.5" y="1123.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="57.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/RequestHeader.apiKey (1 samples, 0.38%)</title><rect x="54.5" y="1107.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="57.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ApiKeys.forId (1 samples, 0.38%)</title><rect x="54.5" y="1091.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="57.5" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="54.5" y="1075.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.5" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="54.5" y="1059.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.5" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.38%)</title><rect x="59.0" y="1155.0" width="4.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.0" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.38%)</title><rect x="59.0" y="1139.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="62.0" y="1150.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.38%)</title><rect x="59.0" y="1123.0" width="4.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="62.0" y="1134.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.38%)</title><rect x="59.0" y="1107.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.0" y="1118.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.38%)</title><rect x="59.0" y="1091.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="62.0" y="1102.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.38%)</title><rect x="59.0" y="1075.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.0" y="1086.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="59.0" y="1059.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.0" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="59.0" y="1043.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.0" y="1054.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (2 samples, 0.75%)</title><rect x="63.4" y="1171.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (2 samples, 0.75%)</title><rect x="63.4" y="1155.0" width="8.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (2 samples, 0.75%)</title><rect x="63.4" y="1139.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (2 samples, 0.75%)</title><rect x="63.4" y="1123.0" width="8.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="66.4" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.38%)</title><rect x="63.4" y="1107.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="66.4" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$1.onSuccess (1 samples, 0.38%)</title><rect x="63.4" y="1091.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="66.4" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.handleResponse (1 samples, 0.38%)</title><rect x="63.4" y="1075.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="66.4" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.verifyIncrementalFetchResponsePartitions (1 samples, 0.38%)</title><rect x="63.4" y="1059.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.4" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler.findMissing (1 samples, 0.38%)</title><rect x="63.4" y="1043.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.4" y="1054.0"></text>
</g>
<g>
<title>java/util/LinkedHashMap$LinkedKeySet.contains (1 samples, 0.38%)</title><rect x="63.4" y="1027.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="1038.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.38%)</title><rect x="63.4" y="1011.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="66.4" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="63.4" y="995.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.4" y="1006.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (1 samples, 0.38%)</title><rect x="67.9" y="1107.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.9" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.38%)</title><rect x="67.9" y="1091.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.9" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$CoordinatorResponseHandler.onSuccess (1 samples, 0.38%)</title><rect x="67.9" y="1075.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.9" y="1086.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.38%)</title><rect x="67.9" y="1059.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="70.9" y="1070.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator$OffsetCommitResponseHandler.handle (1 samples, 0.38%)</title><rect x="67.9" y="1043.0" width="4.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="70.9" y="1054.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.38%)</title><rect x="67.9" y="1027.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="70.9" y="1038.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (1 samples, 0.38%)</title><rect x="72.3" y="1203.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="75.3" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.38%)</title><rect x="72.3" y="1187.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="75.3" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.38%)</title><rect x="72.3" y="1171.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="75.3" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.38%)</title><rect x="72.3" y="1155.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="75.3" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (1 samples, 0.38%)</title><rect x="72.3" y="1139.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="75.3" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (1 samples, 0.38%)</title><rect x="72.3" y="1123.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="75.3" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (1 samples, 0.38%)</title><rect x="72.3" y="1107.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="75.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.38%)</title><rect x="72.3" y="1091.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="75.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.38%)</title><rect x="76.8" y="1203.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="79.8" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.38%)</title><rect x="76.8" y="1187.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="79.8" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.38%)</title><rect x="81.2" y="1219.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.2" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (1 samples, 0.38%)</title><rect x="81.2" y="1203.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="84.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (1 samples, 0.38%)</title><rect x="81.2" y="1187.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.38%)</title><rect x="81.2" y="1171.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (1 samples, 0.38%)</title><rect x="81.2" y="1155.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="84.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (1 samples, 0.38%)</title><rect x="81.2" y="1139.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="84.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.write (1 samples, 0.38%)</title><rect x="81.2" y="1123.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="84.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkSend.writeTo (1 samples, 0.38%)</title><rect x="81.2" y="1107.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="84.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/ByteBufferSend.writeTo (1 samples, 0.38%)</title><rect x="81.2" y="1091.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.write (1 samples, 0.38%)</title><rect x="81.2" y="1075.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="84.2" y="1086.0"></text>
</g>
<g>
<title>java/nio/channels/SocketChannel.write (1 samples, 0.38%)</title><rect x="81.2" y="1059.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="84.2" y="1070.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.38%)</title><rect x="81.2" y="1043.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="84.2" y="1054.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.38%)</title><rect x="81.2" y="1027.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.2" y="1038.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.38%)</title><rect x="81.2" y="1011.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="84.2" y="1022.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.offerLastTemporaryDirectBuffer (1 samples, 0.38%)</title><rect x="81.2" y="995.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="84.2" y="1006.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.38%)</title><rect x="81.2" y="979.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="84.2" y="990.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="81.2" y="963.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.2" y="974.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (1 samples, 0.38%)</title><rect x="81.2" y="947.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="84.2" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.38%)</title><rect x="85.7" y="1219.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.7" y="1230.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.38%)</title><rect x="85.7" y="1203.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.7" y="1214.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.maybeHandlePropertyReload (1 samples, 0.38%)</title><rect x="90.2" y="1267.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="93.2" y="1278.0"></text>
</g>
<g>
<title>java/lang/Thread.run (131 samples, 49.43%)</title><rect x="94.6" y="1299.0" width="583.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="97.6" y="1310.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (131 samples, 49.43%)</title><rect x="94.6" y="1283.0" width="583.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="97.6" y="1294.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (131 samples, 49.43%)</title><rect x="94.6" y="1267.0" width="583.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="97.6" y="1278.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/1512198263.run (128 samples, 48.30%)</title><rect x="99.1" y="1251.0" width="569.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="102.1" y="1262.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$476/15121..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1 (128 samples, 48.30%)</title><rect x="99.1" y="1235.0" width="569.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="102.1" y="1246.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$1</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (128 samples, 48.30%)</title><rect x="99.1" y="1219.0" width="569.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="102.1" y="1230.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (127 samples, 47.92%)</title><rect x="99.1" y="1203.0" width="565.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="102.1" y="1214.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenPr..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.38%)</title><rect x="121.3" y="1187.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.3" y="1198.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (1 samples, 0.38%)</title><rect x="121.3" y="1171.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="124.3" y="1182.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (1 samples, 0.38%)</title><rect x="121.3" y="1155.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="124.3" y="1166.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (1 samples, 0.38%)</title><rect x="121.3" y="1139.0" width="4.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="124.3" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.put (1 samples, 0.38%)</title><rect x="121.3" y="1123.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="124.3" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (1 samples, 0.38%)</title><rect x="121.3" y="1107.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="124.3" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (6 samples, 2.26%)</title><rect x="125.8" y="1187.0" width="26.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="128.8" y="1198.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.26%)</title><rect x="125.8" y="1171.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.8" y="1182.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (6 samples, 2.26%)</title><rect x="125.8" y="1155.0" width="26.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.8" y="1166.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (3 samples, 1.13%)</title><rect x="139.1" y="1139.0" width="13.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="142.1" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (3 samples, 1.13%)</title><rect x="139.1" y="1123.0" width="13.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="142.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$484/1261999494.accept (3 samples, 1.13%)</title><rect x="139.1" y="1107.0" width="13.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="142.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$0 (3 samples, 1.13%)</title><rect x="139.1" y="1091.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.1" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (3 samples, 1.13%)</title><rect x="139.1" y="1075.0" width="13.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="142.1" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (3 samples, 1.13%)</title><rect x="139.1" y="1059.0" width="13.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="142.1" y="1070.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (3 samples, 1.13%)</title><rect x="139.1" y="1043.0" width="13.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="142.1" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.38%)</title><rect x="139.1" y="1027.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="142.1" y="1038.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.75%)</title><rect x="143.6" y="1027.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="146.6" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (25 samples, 9.43%)</title><rect x="152.5" y="1187.0" width="111.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.5" y="1198.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$140/1868805237.extract (25 samples, 9.43%)</title><rect x="152.5" y="1171.0" width="111.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.5" y="1182.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$0 (25 samples, 9.43%)</title><rect x="152.5" y="1155.0" width="111.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="155.5" y="1166.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.43%)</title><rect x="152.5" y="1139.0" width="111.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="155.5" y="1150.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (25 samples, 9.43%)</title><rect x="152.5" y="1123.0" width="111.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.5" y="1134.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (25 samples, 9.43%)</title><rect x="152.5" y="1107.0" width="111.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="155.5" y="1118.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (11 samples, 4.15%)</title><rect x="152.5" y="1091.0" width="49.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="155.5" y="1102.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (4 samples, 1.51%)</title><rect x="152.5" y="1075.0" width="17.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.5" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (4 samples, 1.51%)</title><rect x="152.5" y="1059.0" width="17.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="155.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (4 samples, 1.51%)</title><rect x="152.5" y="1043.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.51%)</title><rect x="152.5" y="1027.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.5" y="1038.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.51%)</title><rect x="152.5" y="1011.0" width="17.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.5" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (7 samples, 2.64%)</title><rect x="170.3" y="1075.0" width="31.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="173.3" y="1086.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (7 samples, 2.64%)</title><rect x="170.3" y="1059.0" width="31.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="173.3" y="1070.0">co..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.75%)</title><rect x="170.3" y="1043.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="173.3" y="1054.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.75%)</title><rect x="170.3" y="1027.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="173.3" y="1038.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.75%)</title><rect x="170.3" y="1011.0" width="8.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="173.3" y="1022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.75%)</title><rect x="170.3" y="995.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="173.3" y="1006.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.75%)</title><rect x="170.3" y="979.0" width="8.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="173.3" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (5 samples, 1.89%)</title><rect x="179.2" y="1043.0" width="22.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.2" y="1054.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (5 samples, 1.89%)</title><rect x="179.2" y="1027.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.2" y="1038.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserMinimalBase.&lt;init&gt; (5 samples, 1.89%)</title><rect x="179.2" y="1011.0" width="22.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.2" y="1022.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser.&lt;init&gt; (5 samples, 1.89%)</title><rect x="179.2" y="995.0" width="22.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="182.2" y="1006.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (13 samples, 4.91%)</title><rect x="201.5" y="1091.0" width="57.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="204.5" y="1102.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (1 samples, 0.38%)</title><rect x="201.5" y="1075.0" width="4.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.5" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.38%)</title><rect x="201.5" y="1059.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.5" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (1 samples, 0.38%)</title><rect x="205.9" y="1075.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="208.9" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.38%)</title><rect x="205.9" y="1059.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.9" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.38%)</title><rect x="205.9" y="1043.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.9" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.38%)</title><rect x="205.9" y="1027.0" width="4.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="208.9" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.38%)</title><rect x="205.9" y="1011.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="208.9" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.38%)</title><rect x="205.9" y="995.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="208.9" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (11 samples, 4.15%)</title><rect x="210.4" y="1075.0" width="49.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="213.4" y="1086.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (11 samples, 4.15%)</title><rect x="210.4" y="1059.0" width="49.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="1070.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.75%)</title><rect x="210.4" y="1043.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="213.4" y="1054.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.38%)</title><rect x="210.4" y="1027.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="213.4" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.38%)</title><rect x="210.4" y="1011.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="213.4" y="1022.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.38%)</title><rect x="210.4" y="995.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="213.4" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (1 samples, 0.38%)</title><rect x="214.8" y="1027.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="217.8" y="1038.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (9 samples, 3.40%)</title><rect x="219.3" y="1043.0" width="40.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="222.3" y="1054.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (9 samples, 3.40%)</title><rect x="219.3" y="1027.0" width="40.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.3" y="1038.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (8 samples, 3.02%)</title><rect x="223.7" y="1011.0" width="35.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="226.7" y="1022.0">com..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.75%)</title><rect x="241.5" y="995.0" width="9.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="244.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.38%)</title><rect x="246.0" y="979.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="249.0" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.38%)</title><rect x="246.0" y="963.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="249.0" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.38%)</title><rect x="246.0" y="947.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="249.0" y="958.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.38%)</title><rect x="246.0" y="931.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="249.0" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (1 samples, 0.38%)</title><rect x="250.5" y="995.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.5" y="1006.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (1 samples, 0.38%)</title><rect x="250.5" y="979.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="253.5" y="990.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.38%)</title><rect x="250.5" y="963.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="253.5" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.38%)</title><rect x="250.5" y="947.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.5" y="958.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.38%)</title><rect x="250.5" y="931.0" width="4.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="253.5" y="942.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (1 samples, 0.38%)</title><rect x="254.9" y="995.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.9" y="1006.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="254.9" y="979.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="257.9" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.38%)</title><rect x="254.9" y="963.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="257.9" y="974.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.38%)</title><rect x="259.4" y="1091.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="262.4" y="1102.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.38%)</title><rect x="259.4" y="1075.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="262.4" y="1086.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (1 samples, 0.38%)</title><rect x="259.4" y="1059.0" width="4.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="262.4" y="1070.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (1 samples, 0.38%)</title><rect x="259.4" y="1043.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="262.4" y="1054.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.38%)</title><rect x="259.4" y="1027.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.4" y="1038.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (90 samples, 33.96%)</title><rect x="263.8" y="1187.0" width="400.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="266.8" y="1198.0">com/linecorp/decaton/processor/runtime/internal/Process..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (19 samples, 7.17%)</title><rect x="263.8" y="1171.0" width="84.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="266.8" y="1182.0">com/lineco..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (19 samples, 7.17%)</title><rect x="263.8" y="1155.0" width="84.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="266.8" y="1166.0">org/slf4j/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (19 samples, 7.17%)</title><rect x="263.8" y="1139.0" width="84.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.8" y="1150.0">ch/qos/log..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (6 samples, 2.26%)</title><rect x="281.6" y="1123.0" width="26.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="284.6" y="1134.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (4 samples, 1.51%)</title><rect x="281.6" y="1107.0" width="17.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="284.6" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (4 samples, 1.51%)</title><rect x="281.6" y="1091.0" width="17.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="284.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (2 samples, 0.75%)</title><rect x="299.4" y="1107.0" width="8.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="302.4" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (2 samples, 0.75%)</title><rect x="299.4" y="1091.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="302.4" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 1.13%)</title><rect x="308.3" y="1123.0" width="13.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.38%)</title><rect x="317.2" y="1107.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="320.2" y="1118.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (6 samples, 2.26%)</title><rect x="321.7" y="1123.0" width="26.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="324.7" y="1134.0">j..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.26%)</title><rect x="321.7" y="1107.0" width="26.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="324.7" y="1118.0">j..</text>
</g>
<g>
<title>java/util/HashMap.removeNode (6 samples, 2.26%)</title><rect x="321.7" y="1091.0" width="26.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="324.7" y="1102.0">j..</text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.38%)</title><rect x="344.0" y="1075.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="347.0" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (12 samples, 4.53%)</title><rect x="348.4" y="1171.0" width="53.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="351.4" y="1182.0">com/l..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (11 samples, 4.15%)</title><rect x="348.4" y="1155.0" width="49.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="351.4" y="1166.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (3 samples, 1.13%)</title><rect x="348.4" y="1139.0" width="13.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="351.4" y="1150.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (1 samples, 0.38%)</title><rect x="357.3" y="1123.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="360.3" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.38%)</title><rect x="357.3" y="1107.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="360.3" y="1118.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.38%)</title><rect x="357.3" y="1091.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.3" y="1102.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.38%)</title><rect x="357.3" y="1075.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="360.3" y="1086.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.38%)</title><rect x="357.3" y="1059.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="360.3" y="1070.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.38%)</title><rect x="357.3" y="1043.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="360.3" y="1054.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="357.3" y="1027.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="360.3" y="1038.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.38%)</title><rect x="357.3" y="1011.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="360.3" y="1022.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.38%)</title><rect x="361.8" y="1139.0" width="4.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="364.8" y="1150.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (7 samples, 2.64%)</title><rect x="366.2" y="1139.0" width="31.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="369.2" y="1150.0">or..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (7 samples, 2.64%)</title><rect x="366.2" y="1123.0" width="31.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="369.2" y="1134.0">ch..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.51%)</title><rect x="366.2" y="1107.0" width="17.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="369.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (3 samples, 1.13%)</title><rect x="370.7" y="1091.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="373.7" y="1102.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (3 samples, 1.13%)</title><rect x="370.7" y="1075.0" width="13.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="373.7" y="1086.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (3 samples, 1.13%)</title><rect x="384.0" y="1107.0" width="13.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="387.0" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.13%)</title><rect x="384.0" y="1091.0" width="13.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="387.0" y="1102.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="384.0" y="1075.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="387.0" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.38%)</title><rect x="384.0" y="1059.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="387.0" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.38%)</title><rect x="384.0" y="1043.0" width="4.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="387.0" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.75%)</title><rect x="388.5" y="1075.0" width="8.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="391.5" y="1086.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/DecatonProperties.get (1 samples, 0.38%)</title><rect x="397.4" y="1155.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.4" y="1166.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.tryGet (1 samples, 0.38%)</title><rect x="397.4" y="1139.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="400.4" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.38%)</title><rect x="397.4" y="1123.0" width="4.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="400.4" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.38%)</title><rect x="397.4" y="1107.0" width="4.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="400.4" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.38%)</title><rect x="397.4" y="1091.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="400.4" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (57 samples, 21.51%)</title><rect x="401.8" y="1171.0" width="253.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="404.8" y="1182.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (57 samples, 21.51%)</title><rect x="401.8" y="1155.0" width="253.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="404.8" y="1166.0">com/linecorp/decaton/processor/run..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$402/457016912.process (42 samples, 15.85%)</title><rect x="415.2" y="1139.0" width="187.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.2" y="1150.0">com/linecorp/decaton/ben..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$1 (40 samples, 15.09%)</title><rect x="424.1" y="1123.0" width="178.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="427.1" y="1134.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (40 samples, 15.09%)</title><rect x="424.1" y="1107.0" width="178.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="427.1" y="1118.0">com/linecorp/decaton/be..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (38 samples, 14.34%)</title><rect x="424.1" y="1091.0" width="169.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="427.1" y="1102.0">com/linecorp/decaton/b..</text>
</g>
<g>
<title>java/lang/Thread.sleep (36 samples, 13.58%)</title><rect x="428.6" y="1075.0" width="160.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="431.6" y="1086.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (35 samples, 13.21%)</title><rect x="428.6" y="1059.0" width="155.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="431.6" y="1070.0">JVM_Sleep</text>
</g>
<g>
<title>JavaThreadSleepState::JavaThreadSleepState(JavaThread*) (2 samples, 0.75%)</title><rect x="428.6" y="1043.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="431.6" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) [clone .constprop.254] (2 samples, 0.75%)</title><rect x="437.5" y="1043.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="440.5" y="1054.0"></text>
</g>
<g>
<title>__lll_unlock_wake (4 samples, 1.51%)</title><rect x="446.4" y="1043.0" width="17.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="449.4" y="1054.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (9 samples, 3.40%)</title><rect x="464.2" y="1043.0" width="40.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="467.2" y="1054.0">__p..</text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.38%)</title><rect x="504.3" y="1043.0" width="4.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="507.3" y="1054.0"></text>
</g>
<g>
<title>_init (2 samples, 0.75%)</title><rect x="508.7" y="1043.0" width="8.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="511.7" y="1054.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.75%)</title><rect x="517.6" y="1043.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="520.6" y="1054.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (13 samples, 4.91%)</title><rect x="526.5" y="1043.0" width="57.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="529.5" y="1054.0">os::sl..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 1.13%)</title><rect x="535.4" y="1027.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="538.4" y="1038.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.38%)</title><rect x="548.8" y="1027.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="551.8" y="1038.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 1.51%)</title><rect x="553.2" y="1027.0" width="17.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="556.2" y="1038.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 1.13%)</title><rect x="557.7" y="1011.0" width="13.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="560.7" y="1022.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.38%)</title><rect x="571.1" y="1027.0" width="4.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="574.1" y="1038.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (2 samples, 0.75%)</title><rect x="575.5" y="1027.0" width="8.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="578.5" y="1038.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.253] (1 samples, 0.38%)</title><rect x="584.4" y="1059.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="587.4" y="1070.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.38%)</title><rect x="588.9" y="1075.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="591.9" y="1086.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.38%)</title><rect x="588.9" y="1059.0" width="4.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="591.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.75%)</title><rect x="593.3" y="1091.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="596.3" y="1102.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (8 samples, 3.02%)</title><rect x="602.2" y="1139.0" width="35.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="605.2" y="1150.0">com..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (8 samples, 3.02%)</title><rect x="602.2" y="1123.0" width="35.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="605.2" y="1134.0">com..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.38%)</title><rect x="637.8" y="1139.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.8" y="1150.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.38%)</title><rect x="637.8" y="1123.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="640.8" y="1134.0"></text>
</g>
<g>
<title>java/util/ArrayList.isEmpty (1 samples, 0.38%)</title><rect x="637.8" y="1107.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.8" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.38%)</title><rect x="642.3" y="1139.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.3" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.38%)</title><rect x="642.3" y="1123.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.3" y="1134.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.38%)</title><rect x="642.3" y="1107.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="645.3" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.38%)</title><rect x="642.3" y="1091.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="645.3" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (2 samples, 0.75%)</title><rect x="646.8" y="1139.0" width="8.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="649.8" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.75%)</title><rect x="655.7" y="1171.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.7" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.75%)</title><rect x="655.7" y="1155.0" width="8.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="658.7" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.75%)</title><rect x="655.7" y="1139.0" width="8.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="658.7" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.newIncompleteFuture (1 samples, 0.38%)</title><rect x="655.7" y="1123.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.7" y="1134.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.38%)</title><rect x="655.7" y="1107.0" width="4.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="658.7" y="1118.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.38%)</title><rect x="660.1" y="1123.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.1" y="1134.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$481/1459350048.accept (1 samples, 0.38%)</title><rect x="660.1" y="1107.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.1" y="1118.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.38%)</title><rect x="664.6" y="1203.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="667.6" y="1214.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.38%)</title><rect x="664.6" y="1187.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="667.6" y="1198.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.38%)</title><rect x="664.6" y="1171.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="667.6" y="1182.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.38%)</title><rect x="664.6" y="1155.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="667.6" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.38%)</title><rect x="664.6" y="1139.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="667.6" y="1150.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.38%)</title><rect x="664.6" y="1123.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="667.6" y="1134.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.38%)</title><rect x="664.6" y="1107.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="667.6" y="1118.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.38%)</title><rect x="664.6" y="1091.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="667.6" y="1102.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.38%)</title><rect x="664.6" y="1075.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="667.6" y="1086.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.75%)</title><rect x="669.0" y="1251.0" width="8.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="672.0" y="1262.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.75%)</title><rect x="669.0" y="1235.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.0" y="1246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.75%)</title><rect x="669.0" y="1219.0" width="8.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.0" y="1230.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.75%)</title><rect x="669.0" y="1203.0" width="8.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="672.0" y="1214.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.75%)</title><rect x="669.0" y="1187.0" width="8.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="672.0" y="1198.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.75%)</title><rect x="669.0" y="1171.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="672.0" y="1182.0"></text>
</g>
<g>
<title>start_thread (115 samples, 43.40%)</title><rect x="677.9" y="1299.0" width="512.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="680.9" y="1310.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (115 samples, 43.40%)</title><rect x="677.9" y="1283.0" width="512.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="680.9" y="1294.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (115 samples, 43.40%)</title><rect x="677.9" y="1267.0" width="512.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="680.9" y="1278.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (9 samples, 3.40%)</title><rect x="677.9" y="1251.0" width="40.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="680.9" y="1262.0">Gan..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (6 samples, 2.26%)</title><rect x="677.9" y="1235.0" width="26.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="680.9" y="1246.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.38%)</title><rect x="677.9" y="1219.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="680.9" y="1230.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.38%)</title><rect x="677.9" y="1203.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="680.9" y="1214.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (5 samples, 1.89%)</title><rect x="682.4" y="1219.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="685.4" y="1230.0">G..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (5 samples, 1.89%)</title><rect x="682.4" y="1203.0" width="22.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="685.4" y="1214.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (5 samples, 1.89%)</title><rect x="682.4" y="1187.0" width="22.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="685.4" y="1198.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (5 samples, 1.89%)</title><rect x="682.4" y="1171.0" width="22.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="685.4" y="1182.0">D..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (5 samples, 1.89%)</title><rect x="682.4" y="1155.0" width="22.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="685.4" y="1166.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (5 samples, 1.89%)</title><rect x="682.4" y="1139.0" width="22.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="685.4" y="1150.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.75%)</title><rect x="691.3" y="1123.0" width="8.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="694.3" y="1134.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.38%)</title><rect x="700.2" y="1123.0" width="4.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="703.2" y="1134.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 1.13%)</title><rect x="704.6" y="1235.0" width="13.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="707.6" y="1246.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 1.13%)</title><rect x="704.6" y="1219.0" width="13.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="707.6" y="1230.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) (2 samples, 0.75%)</title><rect x="704.6" y="1203.0" width="8.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="707.6" y="1214.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.75%)</title><rect x="704.6" y="1187.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="707.6" y="1198.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.38%)</title><rect x="704.6" y="1171.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="707.6" y="1182.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.38%)</title><rect x="709.1" y="1171.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="712.1" y="1182.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.38%)</title><rect x="709.1" y="1155.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="712.1" y="1166.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.38%)</title><rect x="709.1" y="1139.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="712.1" y="1150.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.38%)</title><rect x="713.5" y="1203.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="716.5" y="1214.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.38%)</title><rect x="713.5" y="1187.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="716.5" y="1198.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.38%)</title><rect x="713.5" y="1171.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="716.5" y="1182.0"></text>
</g>
<g>
<title>__pthread_cond_wait (1 samples, 0.38%)</title><rect x="713.5" y="1155.0" width="4.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="716.5" y="1166.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (106 samples, 40.00%)</title><rect x="718.0" y="1251.0" width="472.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="721.0" y="1262.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (105 samples, 39.62%)</title><rect x="718.0" y="1235.0" width="467.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="721.0" y="1246.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (105 samples, 39.62%)</title><rect x="718.0" y="1219.0" width="467.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="721.0" y="1230.0">CompileBroker::invoke_compiler_on_method(CompileTask*)</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (100 samples, 37.74%)</title><rect x="718.0" y="1203.0" width="445.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="721.0" y="1214.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveS..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (100 samples, 37.74%)</title><rect x="718.0" y="1187.0" width="445.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="721.0" y="1198.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, b..</text>
</g>
<g>
<title>Compile::Code_Gen() (66 samples, 24.91%)</title><rect x="718.0" y="1171.0" width="293.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="721.0" y="1182.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (3 samples, 1.13%)</title><rect x="718.0" y="1155.0" width="13.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="721.0" y="1166.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (3 samples, 1.13%)</title><rect x="718.0" y="1139.0" width="13.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="721.0" y="1150.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (1 samples, 0.38%)</title><rect x="726.9" y="1123.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="729.9" y="1134.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (2 samples, 0.75%)</title><rect x="731.4" y="1155.0" width="8.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="734.4" y="1166.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (2 samples, 0.75%)</title><rect x="731.4" y="1139.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="734.4" y="1150.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (2 samples, 0.75%)</title><rect x="731.4" y="1123.0" width="8.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="734.4" y="1134.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.38%)</title><rect x="731.4" y="1107.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="734.4" y="1118.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.38%)</title><rect x="735.8" y="1107.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="738.8" y="1118.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.26%)</title><rect x="740.3" y="1155.0" width="26.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="743.3" y="1166.0">M..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.38%)</title><rect x="740.3" y="1139.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="743.3" y="1150.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (1 samples, 0.38%)</title><rect x="744.7" y="1139.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="747.7" y="1150.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 1.51%)</title><rect x="749.2" y="1139.0" width="17.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="752.2" y="1150.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 1.13%)</title><rect x="753.6" y="1123.0" width="13.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="756.6" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 1.89%)</title><rect x="767.0" y="1155.0" width="22.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="770.0" y="1166.0">P..</text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 1.89%)</title><rect x="767.0" y="1139.0" width="22.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="770.0" y="1150.0">P..</text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="767.0" y="1123.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="770.0" y="1134.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (1 samples, 0.38%)</title><rect x="767.0" y="1107.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="770.0" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (2 samples, 0.75%)</title><rect x="771.4" y="1123.0" width="8.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="774.4" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.38%)</title><rect x="771.4" y="1107.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="774.4" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.38%)</title><rect x="775.9" y="1107.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="778.9" y="1118.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.38%)</title><rect x="775.9" y="1091.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="778.9" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.75%)</title><rect x="780.3" y="1123.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="783.3" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="780.3" y="1107.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="783.3" y="1118.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="780.3" y="1091.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="783.3" y="1102.0"></text>
</g>
<g>
<title>PhaseLive::freeset(Block*) (1 samples, 0.38%)</title><rect x="784.8" y="1107.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="787.8" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (50 samples, 18.87%)</title><rect x="789.2" y="1155.0" width="222.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="792.2" y="1166.0">PhaseChaitin::Register_Alloca..</text>
</g>
<g>
<title>Chunk::next_chop() (1 samples, 0.38%)</title><rect x="789.2" y="1139.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="792.2" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.38%)</title><rect x="793.7" y="1139.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="796.7" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.38%)</title><rect x="798.2" y="1139.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="801.2" y="1150.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.38%)</title><rect x="798.2" y="1123.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="801.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (3 samples, 1.13%)</title><rect x="802.6" y="1139.0" width="13.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="805.6" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="807.1" y="1123.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="810.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.38%)</title><rect x="811.5" y="1123.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="814.5" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="811.5" y="1107.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="814.5" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (8 samples, 3.02%)</title><rect x="816.0" y="1139.0" width="35.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="819.0" y="1150.0">Pha..</text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.38%)</title><rect x="833.8" y="1123.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="836.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.75%)</title><rect x="838.2" y="1123.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="841.2" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.38%)</title><rect x="838.2" y="1107.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="841.2" y="1118.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.38%)</title><rect x="842.7" y="1107.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="845.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.38%)</title><rect x="847.1" y="1123.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="850.1" y="1134.0"></text>
</g>
<g>
<title>MachSafePointNode::jvms() const (1 samples, 0.38%)</title><rect x="847.1" y="1107.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="850.1" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (12 samples, 4.53%)</title><rect x="851.6" y="1139.0" width="53.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="854.6" y="1150.0">Phase..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="873.8" y="1123.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="876.8" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.38%)</title><rect x="878.3" y="1123.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="881.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 1.13%)</title><rect x="882.8" y="1123.0" width="13.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="885.8" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="891.7" y="1107.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.7" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.75%)</title><rect x="896.1" y="1123.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="899.1" y="1134.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.38%)</title><rect x="900.6" y="1107.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="903.6" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (2 samples, 0.75%)</title><rect x="905.0" y="1139.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="908.0" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (3 samples, 1.13%)</title><rect x="913.9" y="1139.0" width="13.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="916.9" y="1150.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.90] (1 samples, 0.38%)</title><rect x="927.3" y="1139.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="930.3" y="1150.0"></text>
</g>
<g>
<title>RegMask::is_bound_pair() const (1 samples, 0.38%)</title><rect x="927.3" y="1123.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="930.3" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 2.26%)</title><rect x="931.7" y="1139.0" width="26.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="934.7" y="1150.0">P..</text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 1.13%)</title><rect x="945.1" y="1123.0" width="13.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="948.1" y="1134.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.47] (1 samples, 0.38%)</title><rect x="954.0" y="1107.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="957.0" y="1118.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.47] (1 samples, 0.38%)</title><rect x="954.0" y="1091.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="957.0" y="1102.0"></text>
</g>
<g>
<title>Node::disconnect_inputs(Node*, Compile*) (1 samples, 0.38%)</title><rect x="954.0" y="1075.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.0" y="1086.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (4 samples, 1.51%)</title><rect x="958.5" y="1139.0" width="17.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="961.5" y="1150.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.38%)</title><rect x="958.5" y="1123.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.5" y="1134.0"></text>
</g>
<g>
<title>PhaseCFG::is_uncommon(Block const*) (1 samples, 0.38%)</title><rect x="962.9" y="1123.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="965.9" y="1134.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.75%)</title><rect x="967.4" y="1123.0" width="8.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="970.4" y="1134.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.38%)</title><rect x="971.8" y="1107.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="974.8" y="1118.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (3 samples, 1.13%)</title><rect x="976.3" y="1139.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="979.3" y="1150.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.75%)</title><rect x="980.7" y="1123.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="983.7" y="1134.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (4 samples, 1.51%)</title><rect x="989.6" y="1139.0" width="17.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.6" y="1150.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.38%)</title><rect x="1003.0" y="1123.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.0" y="1134.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.38%)</title><rect x="1003.0" y="1107.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1006.0" y="1118.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.38%)</title><rect x="1003.0" y="1091.0" width="4.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1006.0" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.38%)</title><rect x="1007.4" y="1139.0" width="4.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1010.4" y="1150.0"></text>
</g>
<g>
<title>Compile::Optimize() (25 samples, 9.43%)</title><rect x="1011.9" y="1171.0" width="111.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.9" y="1182.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.356] (10 samples, 3.77%)</title><rect x="1011.9" y="1155.0" width="44.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1014.9" y="1166.0">Comp..</text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (10 samples, 3.77%)</title><rect x="1011.9" y="1139.0" width="44.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1014.9" y="1150.0">Phas..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.38%)</title><rect x="1011.9" y="1123.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.13%)</title><rect x="1016.3" y="1123.0" width="13.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1019.3" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.75%)</title><rect x="1029.7" y="1123.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.7" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (2 samples, 0.75%)</title><rect x="1029.7" y="1107.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1032.7" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.38%)</title><rect x="1029.7" y="1091.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1032.7" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (1 samples, 0.38%)</title><rect x="1034.2" y="1091.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1037.2" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.38%)</title><rect x="1034.2" y="1075.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1037.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (1 samples, 0.38%)</title><rect x="1038.6" y="1123.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1041.6" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sort(IdealLoopTree*, IdealLoopTree*) (1 samples, 0.38%)</title><rect x="1038.6" y="1107.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1041.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (2 samples, 0.75%)</title><rect x="1043.1" y="1123.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.1" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.75%)</title><rect x="1043.1" y="1107.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1046.1" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (2 samples, 0.75%)</title><rect x="1043.1" y="1091.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.1" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_internal(Node*, Node*) const [clone .part.148] (1 samples, 0.38%)</title><rect x="1047.5" y="1075.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1050.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const [clone .isra.130] (1 samples, 0.38%)</title><rect x="1047.5" y="1059.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1050.5" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.38%)</title><rect x="1052.0" y="1123.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1055.0" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.38%)</title><rect x="1052.0" y="1107.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1055.0" y="1118.0"></text>
</g>
<g>
<title>AddNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1052.0" y="1091.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.0" y="1102.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.38%)</title><rect x="1052.0" y="1075.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1055.0" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (3 samples, 1.13%)</title><rect x="1056.4" y="1155.0" width="13.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.4" y="1166.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (3 samples, 1.13%)</title><rect x="1056.4" y="1139.0" width="13.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1059.4" y="1150.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.38%)</title><rect x="1056.4" y="1123.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1059.4" y="1134.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.38%)</title><rect x="1056.4" y="1107.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.4" y="1118.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.38%)</title><rect x="1056.4" y="1091.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1059.4" y="1102.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.38%)</title><rect x="1056.4" y="1075.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1059.4" y="1086.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.38%)</title><rect x="1056.4" y="1059.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1059.4" y="1070.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) [clone .constprop.70] (1 samples, 0.38%)</title><rect x="1056.4" y="1043.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.4" y="1054.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.38%)</title><rect x="1056.4" y="1027.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1059.4" y="1038.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.38%)</title><rect x="1056.4" y="1011.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1059.4" y="1022.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.38%)</title><rect x="1056.4" y="995.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1059.4" y="1006.0"></text>
</g>
<g>
<title>LinkResolver::resolve_virtual_call_or_null(Klass*, LinkInfo const&amp;) (1 samples, 0.38%)</title><rect x="1056.4" y="979.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1059.4" y="990.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_virtual_method(CallInfo&amp;, methodHandle const&amp;, Klass*, Handle, Klass*, bool, Thread*) (1 samples, 0.38%)</title><rect x="1056.4" y="963.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1059.4" y="974.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.38%)</title><rect x="1056.4" y="947.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1059.4" y="958.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.38%)</title><rect x="1056.4" y="931.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1059.4" y="942.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1060.9" y="1123.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1063.9" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::add_java_object_edges(JavaObjectNode*, bool) [clone .constprop.272] (1 samples, 0.38%)</title><rect x="1060.9" y="1107.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1063.9" y="1118.0"></text>
</g>
<g>
<title>ConnectionGraph::add_base(FieldNode*, PointsToNode*) [clone .isra.201] (1 samples, 0.38%)</title><rect x="1060.9" y="1091.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1063.9" y="1102.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1065.3" y="1123.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1068.3" y="1134.0"></text>
</g>
<g>
<title>ConnectionGraph::move_inst_mem(Node*, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.38%)</title><rect x="1065.3" y="1107.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1068.3" y="1118.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.38%)</title><rect x="1069.8" y="1155.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1072.8" y="1166.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.38%)</title><rect x="1069.8" y="1139.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.8" y="1150.0"></text>
</g>
<g>
<title>PhaseCCP::transform_once(Node*) (1 samples, 0.38%)</title><rect x="1069.8" y="1123.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.8" y="1134.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize() (6 samples, 2.26%)</title><rect x="1074.2" y="1155.0" width="26.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1077.2" y="1166.0">P..</text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1139.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1077.2" y="1150.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1123.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.2" y="1134.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1107.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1077.2" y="1118.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1091.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1077.2" y="1102.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1075.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1077.2" y="1086.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1059.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1077.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_pre_post_loops(IdealLoopTree*, Node_List&amp;, bool) (1 samples, 0.38%)</title><rect x="1074.2" y="1043.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1077.2" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::insert_post_loop(IdealLoopTree*, Node_List&amp;, CountedLoopNode*, CountedLoopEndNode*, Node*&amp;, Node*, CountedLoopNode*&amp;) (1 samples, 0.38%)</title><rect x="1074.2" y="1027.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1077.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (1 samples, 0.38%)</title><rect x="1074.2" y="1011.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1077.2" y="1022.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.38%)</title><rect x="1074.2" y="995.0" width="4.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1077.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.38%)</title><rect x="1078.7" y="1139.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1081.7" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.38%)</title><rect x="1083.1" y="1139.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1086.1" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 1.13%)</title><rect x="1087.6" y="1139.0" width="13.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1090.6" y="1150.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 1.13%)</title><rect x="1087.6" y="1123.0" width="13.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1090.6" y="1134.0"></text>
</g>
<g>
<title>Node::unique_ctrl_out() const (1 samples, 0.38%)</title><rect x="1087.6" y="1107.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1090.6" y="1118.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.75%)</title><rect x="1092.0" y="1107.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1095.0" y="1118.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.250] (1 samples, 0.38%)</title><rect x="1092.0" y="1091.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.0" y="1102.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.38%)</title><rect x="1092.0" y="1075.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1095.0" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.38%)</title><rect x="1096.5" y="1091.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1099.5" y="1102.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (4 samples, 1.51%)</title><rect x="1100.9" y="1155.0" width="17.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.9" y="1166.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (4 samples, 1.51%)</title><rect x="1100.9" y="1139.0" width="17.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1103.9" y="1150.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.75%)</title><rect x="1100.9" y="1123.0" width="8.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.9" y="1134.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.38%)</title><rect x="1100.9" y="1107.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1103.9" y="1118.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.38%)</title><rect x="1100.9" y="1091.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1103.9" y="1102.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.38%)</title><rect x="1100.9" y="1075.0" width="4.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1103.9" y="1086.0"></text>
</g>
<g>
<title>split_if(IfNode*, PhaseIterGVN*) (1 samples, 0.38%)</title><rect x="1105.4" y="1107.0" width="4.4" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1108.4" y="1118.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.75%)</title><rect x="1109.8" y="1123.0" width="9.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1112.8" y="1134.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.38%)</title><rect x="1118.8" y="1155.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1121.8" y="1166.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.38%)</title><rect x="1118.8" y="1139.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1121.8" y="1150.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1118.8" y="1123.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1121.8" y="1134.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1123.2" y="1171.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1126.2" y="1182.0"></text>
</g>
<g>
<title>LoadINode::Opcode() const (1 samples, 0.38%)</title><rect x="1123.2" y="1155.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1126.2" y="1166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 2.64%)</title><rect x="1127.7" y="1171.0" width="31.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="1182.0">Pa..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 2.64%)</title><rect x="1127.7" y="1155.0" width="31.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.7" y="1166.0">Pa..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 2.64%)</title><rect x="1127.7" y="1139.0" width="31.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="1150.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 2.64%)</title><rect x="1127.7" y="1123.0" width="31.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="1134.0">Pa..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 2.64%)</title><rect x="1127.7" y="1107.0" width="31.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="1118.0">Pa..</text>
</g>
<g>
<title>Parse::do_call() (5 samples, 1.89%)</title><rect x="1127.7" y="1091.0" width="22.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1130.7" y="1102.0">P..</text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.13%)</title><rect x="1127.7" y="1075.0" width="13.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="1086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.13%)</title><rect x="1127.7" y="1059.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.13%)</title><rect x="1127.7" y="1043.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1130.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.13%)</title><rect x="1127.7" y="1027.0" width="13.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.13%)</title><rect x="1127.7" y="1011.0" width="13.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="1022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.13%)</title><rect x="1127.7" y="995.0" width="13.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.7" y="979.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1130.7" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.7" y="963.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.7" y="947.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1130.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.7" y="931.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1127.7" y="915.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1130.7" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1127.7" y="899.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="910.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.7" y="883.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1130.7" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.7" y="867.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.7" y="851.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.7" y="835.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.7" y="819.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1127.7" y="803.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1127.7" y="787.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.7" y="771.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1130.7" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.7" y="755.0" width="4.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1130.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.7" y="739.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.7" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.7" y="723.0" width="4.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1130.7" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1127.7" y="707.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1127.7" y="691.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1130.7" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.7" y="675.0" width="4.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.7" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.7" y="659.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1130.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.7" y="643.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.7" y="627.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1127.7" y="611.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1127.7" y="595.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1127.7" y="579.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1130.7" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1127.7" y="563.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1130.7" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1127.7" y="547.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1127.7" y="531.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.7" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1127.7" y="515.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.7" y="526.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1127.7" y="499.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1127.7" y="483.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.7" y="494.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.38%)</title><rect x="1127.7" y="467.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="478.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="451.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1130.7" y="462.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="435.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="446.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="419.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.7" y="430.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool) (1 samples, 0.38%)</title><rect x="1127.7" y="403.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1130.7" y="414.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1127.7" y="387.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1130.7" y="398.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1127.7" y="371.0" width="4.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1130.7" y="382.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1127.7" y="355.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.7" y="366.0"></text>
</g>
<g>
<title>Type::higher_equal(Type const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="339.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1130.7" y="350.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="323.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1130.7" y="334.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="307.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1130.7" y="318.0"></text>
</g>
<g>
<title>TypePtr::xmeet_speculative(TypePtr const*) const (1 samples, 0.38%)</title><rect x="1127.7" y="291.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1130.7" y="302.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1132.1" y="979.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.1" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1132.1" y="963.0" width="8.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1135.1" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1132.1" y="947.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.1" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1132.1" y="931.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.1" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1132.1" y="915.0" width="8.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1135.1" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1132.1" y="899.0" width="8.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1135.1" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1132.1" y="883.0" width="8.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1135.1" y="894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1132.1" y="867.0" width="8.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1135.1" y="878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1132.1" y="851.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1132.1" y="835.0" width="8.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1132.1" y="819.0" width="8.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.1" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1132.1" y="803.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.1" y="814.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1132.1" y="787.0" width="8.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.1" y="798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1132.1" y="771.0" width="8.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1135.1" y="782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1132.1" y="755.0" width="8.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1132.1" y="739.0" width="8.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1135.1" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1132.1" y="723.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1135.1" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1132.1" y="707.0" width="8.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1135.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1132.1" y="691.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.1" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1132.1" y="675.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.1" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1132.1" y="659.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.75%)</title><rect x="1132.1" y="643.0" width="8.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1135.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.75%)</title><rect x="1132.1" y="627.0" width="8.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.75%)</title><rect x="1132.1" y="611.0" width="8.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.75%)</title><rect x="1132.1" y="595.0" width="8.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1135.1" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.75%)</title><rect x="1132.1" y="579.0" width="8.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.1" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.75%)</title><rect x="1132.1" y="563.0" width="8.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1135.1" y="574.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.38%)</title><rect x="1132.1" y="547.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1135.1" y="558.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) (1 samples, 0.38%)</title><rect x="1132.1" y="531.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1135.1" y="542.0"></text>
</g>
<g>
<title>GraphKit::replace_in_map(Node*, Node*) [clone .part.179] (1 samples, 0.38%)</title><rect x="1132.1" y="515.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1135.1" y="526.0"></text>
</g>
<g>
<title>Node::set_req(unsigned int, Node*) (1 samples, 0.38%)</title><rect x="1132.1" y="499.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1135.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1136.6" y="547.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1139.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1136.6" y="531.0" width="4.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1139.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1136.6" y="515.0" width="4.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1139.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1136.6" y="499.0" width="4.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1139.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1136.6" y="483.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1136.6" y="467.0" width="4.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1136.6" y="451.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1136.6" y="435.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1136.6" y="419.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1136.6" y="403.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1139.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1136.6" y="387.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1139.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1136.6" y="371.0" width="4.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1139.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1136.6" y="355.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1139.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1136.6" y="339.0" width="4.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1136.6" y="323.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1136.6" y="307.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1136.6" y="291.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1139.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1136.6" y="275.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1139.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1136.6" y="259.0" width="4.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1139.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1136.6" y="243.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1136.6" y="227.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1136.6" y="211.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1139.6" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1136.6" y="195.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.6" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1136.6" y="179.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.6" y="190.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1136.6" y="163.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.6" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1136.6" y="147.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1139.6" y="158.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1136.6" y="131.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1139.6" y="142.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1136.6" y="115.0" width="4.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1139.6" y="126.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1136.6" y="99.0" width="4.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.6" y="110.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1136.6" y="83.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1139.6" y="94.0"></text>
</g>
<g>
<title>GraphKit::set_map_clone(SafePointNode*) (1 samples, 0.38%)</title><rect x="1136.6" y="67.0" width="4.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1139.6" y="78.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.38%)</title><rect x="1136.6" y="51.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1139.6" y="62.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.38%)</title><rect x="1136.6" y="35.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1139.6" y="46.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1141.0" y="1075.0" width="4.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.0" y="1086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1141.0" y="1059.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.0" y="1070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1141.0" y="1043.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1144.0" y="1054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1141.0" y="1027.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="1038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1141.0" y="1011.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.0" y="1022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1141.0" y="995.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="1006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1141.0" y="979.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.0" y="990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1141.0" y="963.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.0" y="974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1141.0" y="947.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1144.0" y="958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1141.0" y="931.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.0" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1141.0" y="915.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.0" y="926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1141.0" y="899.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.0" y="910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1141.0" y="883.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.0" y="894.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1141.0" y="867.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1141.0" y="851.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.0" y="862.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1141.0" y="835.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1141.0" y="819.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.0" y="830.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1141.0" y="803.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1141.0" y="787.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="798.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.38%)</title><rect x="1141.0" y="771.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.0" y="782.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.38%)</title><rect x="1141.0" y="755.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="766.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.38%)</title><rect x="1141.0" y="739.0" width="4.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.38%)</title><rect x="1141.0" y="723.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.0" y="734.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.38%)</title><rect x="1141.0" y="707.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.0" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.38%)</title><rect x="1141.0" y="691.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1141.0" y="675.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1141.0" y="659.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.0" y="670.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.38%)</title><rect x="1141.0" y="643.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.0" y="654.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.38%)</title><rect x="1141.0" y="627.0" width="4.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.0" y="638.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.38%)</title><rect x="1141.0" y="611.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.0" y="622.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.38%)</title><rect x="1141.0" y="595.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.0" y="606.0"></text>
</g>
<g>
<title>GraphKit::store_to_memory(Node*, Node*, Node*, BasicType, int, MemNode::MemOrd, bool, bool, bool, bool) (1 samples, 0.38%)</title><rect x="1141.0" y="579.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.0" y="590.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.38%)</title><rect x="1141.0" y="563.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.0" y="574.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.38%)</title><rect x="1141.0" y="547.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.0" y="558.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.160] (1 samples, 0.38%)</title><rect x="1141.0" y="531.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.0" y="542.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1141.0" y="515.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.0" y="526.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1141.0" y="499.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.0" y="510.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.38%)</title><rect x="1141.0" y="483.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="494.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) [clone .part.151] (1 samples, 0.38%)</title><rect x="1141.0" y="467.0" width="4.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="478.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.38%)</title><rect x="1141.0" y="451.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="462.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.38%)</title><rect x="1145.5" y="1075.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1148.5" y="1086.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1145.5" y="1059.0" width="4.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1148.5" y="1070.0"></text>
</g>
<g>
<title>ConstantPool::klass_at_if_loaded(constantPoolHandle const&amp;, int) (1 samples, 0.38%)</title><rect x="1145.5" y="1043.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.5" y="1054.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(Klass*, Klass*, bool, Thread*) (1 samples, 0.38%)</title><rect x="1145.5" y="1027.0" width="4.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="1038.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.38%)</title><rect x="1145.5" y="1011.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.5" y="1022.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.38%)</title><rect x="1145.5" y="995.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1148.5" y="1006.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.38%)</title><rect x="1149.9" y="1091.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.9" y="1102.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.38%)</title><rect x="1149.9" y="1075.0" width="4.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.9" y="1086.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.38%)</title><rect x="1149.9" y="1059.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.9" y="1070.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.38%)</title><rect x="1149.9" y="1043.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="1054.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.129] (1 samples, 0.38%)</title><rect x="1149.9" y="1027.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.9" y="1038.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.38%)</title><rect x="1149.9" y="1011.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.9" y="1022.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.38%)</title><rect x="1149.9" y="995.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.9" y="1006.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields() (1 samples, 0.38%)</title><rect x="1149.9" y="979.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1152.9" y="990.0"></text>
</g>
<g>
<title>ciInstanceKlass::compute_nonstatic_fields_impl(GrowableArray&lt;ciField*&gt;*) (1 samples, 0.38%)</title><rect x="1149.9" y="963.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.9" y="974.0"></text>
</g>
<g>
<title>fieldDescriptor::reinitialize(InstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1149.9" y="947.0" width="4.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1152.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_new() (1 samples, 0.38%)</title><rect x="1154.4" y="1091.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1157.4" y="1102.0"></text>
</g>
<g>
<title>GraphKit::new_instance(Node*, Node*, Node**, bool) (1 samples, 0.38%)</title><rect x="1154.4" y="1075.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1157.4" y="1086.0"></text>
</g>
<g>
<title>GraphKit::set_output_for_allocation(AllocateNode*, TypeOopPtr const*, bool) (1 samples, 0.38%)</title><rect x="1154.4" y="1059.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1157.4" y="1070.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.38%)</title><rect x="1158.8" y="1171.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.8" y="1182.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.38%)</title><rect x="1158.8" y="1155.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.8" y="1166.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (4 samples, 1.51%)</title><rect x="1163.3" y="1203.0" width="17.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="1214.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (4 samples, 1.51%)</title><rect x="1163.3" y="1187.0" width="17.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1166.3" y="1198.0"></text>
</g>
<g>
<title>Compilation::compile_method() (4 samples, 1.51%)</title><rect x="1163.3" y="1171.0" width="17.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="1182.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (4 samples, 1.51%)</title><rect x="1163.3" y="1155.0" width="17.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="1166.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.94] (3 samples, 1.13%)</title><rect x="1163.3" y="1139.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="1150.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (3 samples, 1.13%)</title><rect x="1163.3" y="1123.0" width="13.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="1134.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (3 samples, 1.13%)</title><rect x="1163.3" y="1107.0" width="13.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="1118.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (3 samples, 1.13%)</title><rect x="1163.3" y="1091.0" width="13.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="1102.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 1.13%)</title><rect x="1163.3" y="1075.0" width="13.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1166.3" y="1086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.75%)</title><rect x="1163.3" y="1059.0" width="8.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.3" y="1070.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1163.3" y="1043.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="1054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.38%)</title><rect x="1163.3" y="1027.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="1038.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1163.3" y="1011.0" width="4.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.3" y="1022.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.38%)</title><rect x="1163.3" y="995.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.3" y="1006.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1163.3" y="979.0" width="4.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1166.3" y="990.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.38%)</title><rect x="1163.3" y="963.0" width="4.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.3" y="974.0"></text>
</g>
<g>
<title>SymbolTable::lookup(int, char const*, int, unsigned int) (1 samples, 0.38%)</title><rect x="1163.3" y="947.0" width="4.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1166.3" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.7" y="1043.0" width="4.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.7" y="1054.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="1027.0" width="4.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.7" y="1038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="1011.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1170.7" y="1022.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.7" y="995.0" width="4.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.7" y="1006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.7" y="979.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1170.7" y="990.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.7" y="963.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1170.7" y="974.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="947.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.7" y="958.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.38%)</title><rect x="1167.7" y="931.0" width="4.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1170.7" y="942.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.38%)</title><rect x="1167.7" y="915.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1170.7" y="926.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.38%)</title><rect x="1167.7" y="899.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.38%)</title><rect x="1167.7" y="883.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_declared_method_holder() (1 samples, 0.38%)</title><rect x="1167.7" y="867.0" width="4.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.38%)</title><rect x="1167.7" y="851.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>ciInstanceKlass::loader() (1 samples, 0.38%)</title><rect x="1167.7" y="835.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1170.7" y="846.0"></text>
</g>
<g>
<title>ValueStack::ValueStack(ValueStack*, ValueStack::Kind, int) (1 samples, 0.38%)</title><rect x="1172.2" y="1059.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.2" y="1070.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.38%)</title><rect x="1172.2" y="1043.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.2" y="1054.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.38%)</title><rect x="1172.2" y="1027.0" width="4.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1175.2" y="1038.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.38%)</title><rect x="1176.6" y="1139.0" width="4.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.6" y="1150.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (1 samples, 0.38%)</title><rect x="1176.6" y="1123.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="1134.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (1 samples, 0.38%)</title><rect x="1176.6" y="1107.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1179.6" y="1118.0"></text>
</g>
<g>
<title>LIRGenerator::do_If(If*) (1 samples, 0.38%)</title><rect x="1176.6" y="1091.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.6" y="1102.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*) (1 samples, 0.38%)</title><rect x="1181.1" y="1203.0" width="4.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1184.1" y="1214.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (1 samples, 0.38%)</title><rect x="1181.1" y="1187.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.1" y="1198.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_object(oopDesc*) (1 samples, 0.38%)</title><rect x="1181.1" y="1171.0" width="4.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.1" y="1182.0"></text>
</g>
<g>
<title>ciObject::ciObject(Handle) (1 samples, 0.38%)</title><rect x="1181.1" y="1155.0" width="4.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.1" y="1166.0"></text>
</g>
<g>
<title>JNIHandles::make_local(oopDesc*) (1 samples, 0.38%)</title><rect x="1181.1" y="1139.0" width="4.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.1" y="1150.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.38%)</title><rect x="1181.1" y="1123.0" width="4.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1184.1" y="1134.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.38%)</title><rect x="1185.5" y="1235.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="1246.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1219.0" width="4.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.5" y="1230.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (1 samples, 0.38%)</title><rect x="1185.5" y="1203.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="1214.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, _jvmtiAddrLocationMap**, int*) (1 samples, 0.38%)</title><rect x="1185.5" y="1187.0" width="4.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.5" y="1198.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.38%)</title><rect x="1185.5" y="1171.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.5" y="1182.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.38%)</title><rect x="1185.5" y="1155.0" width="4.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1188.5" y="1166.0"></text>
</g>
</g>
</svg>
