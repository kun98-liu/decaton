<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (217 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>[unknown] (1 samples, 0.46%)</title><rect x="10.0" y="1011.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>__vsnprintf (1 samples, 0.46%)</title><rect x="10.0" y="995.0" width="5.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>vfprintf (1 samples, 0.46%)</title><rect x="10.0" y="979.0" width="5.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>[unknown_Java] (1 samples, 0.46%)</title><rect x="15.4" y="1011.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="18.4" y="1022.0"></text>
</g>
<g>
<title>Interpreter (1 samples, 0.46%)</title><rect x="15.4" y="995.0" width="5.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="18.4" y="1006.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (16 samples, 7.37%)</title><rect x="20.9" y="1011.0" width="87.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="23.9" y="1022.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (16 samples, 7.37%)</title><rect x="20.9" y="995.0" width="87.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.9" y="1006.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (16 samples, 7.37%)</title><rect x="20.9" y="979.0" width="87.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="23.9" y="990.0">com/lineco..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.46%)</title><rect x="20.9" y="963.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="23.9" y="974.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.resume (1 samples, 0.46%)</title><rect x="20.9" y="947.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="23.9" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (1 samples, 0.46%)</title><rect x="26.3" y="963.0" width="5.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="29.3" y="974.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (1 samples, 0.46%)</title><rect x="26.3" y="947.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="29.3" y="958.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (1 samples, 0.46%)</title><rect x="26.3" y="931.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.3" y="942.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$334/95865826.accept (1 samples, 0.46%)</title><rect x="26.3" y="915.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="29.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (1 samples, 0.46%)</title><rect x="26.3" y="899.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="29.3" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (1 samples, 0.46%)</title><rect x="26.3" y="883.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.3" y="894.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (1 samples, 0.46%)</title><rect x="26.3" y="867.0" width="5.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="29.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (4 samples, 1.84%)</title><rect x="31.8" y="963.0" width="21.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.8" y="974.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$331/553961340.accept (4 samples, 1.84%)</title><rect x="31.8" y="947.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="34.8" y="958.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (4 samples, 1.84%)</title><rect x="31.8" y="931.0" width="21.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.8" y="942.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (1 samples, 0.46%)</title><rect x="31.8" y="915.0" width="5.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.8" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (1 samples, 0.46%)</title><rect x="31.8" y="899.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.8" y="910.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (1 samples, 0.46%)</title><rect x="31.8" y="883.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (1 samples, 0.46%)</title><rect x="31.8" y="867.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="34.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.46%)</title><rect x="31.8" y="851.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="34.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.46%)</title><rect x="31.8" y="835.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.46%)</title><rect x="31.8" y="819.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="31.8" y="803.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.46%)</title><rect x="31.8" y="787.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.46%)</title><rect x="31.8" y="771.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="34.8" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (2 samples, 0.92%)</title><rect x="37.2" y="915.0" width="10.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.2" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (2 samples, 0.92%)</title><rect x="37.2" y="899.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.2" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.46%)</title><rect x="48.1" y="915.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.1" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (1 samples, 0.46%)</title><rect x="48.1" y="899.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.1" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (1 samples, 0.46%)</title><rect x="48.1" y="883.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="51.1" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.46%)</title><rect x="48.1" y="867.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="48.1" y="851.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="51.1" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.61%)</title><rect x="53.5" y="963.0" width="54.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.5" y="974.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (10 samples, 4.61%)</title><rect x="53.5" y="947.0" width="54.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.5" y="958.0">org/a..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (9 samples, 4.15%)</title><rect x="53.5" y="931.0" width="48.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.5" y="942.0">org/..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.30%)</title><rect x="53.5" y="915.0" width="27.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.5" y="926.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (5 samples, 2.30%)</title><rect x="53.5" y="899.0" width="27.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="56.5" y="910.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (3 samples, 1.38%)</title><rect x="53.5" y="883.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="56.5" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.handleCompletedReceives (1 samples, 0.46%)</title><rect x="53.5" y="867.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.5" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.parseResponse (1 samples, 0.46%)</title><rect x="53.5" y="851.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.5" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractResponse.parseResponse (1 samples, 0.46%)</title><rect x="53.5" y="835.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/ResponseHeader.parse (1 samples, 0.46%)</title><rect x="53.5" y="819.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.&lt;init&gt; (1 samples, 0.46%)</title><rect x="53.5" y="803.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.5" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/message/ResponseHeaderData.read (1 samples, 0.46%)</title><rect x="53.5" y="787.0" width="5.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/ByteBufferAccessor.readInt (1 samples, 0.46%)</title><rect x="53.5" y="771.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="56.5" y="782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getInt (1 samples, 0.46%)</title><rect x="53.5" y="755.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.92%)</title><rect x="58.9" y="867.0" width="10.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (1 samples, 0.46%)</title><rect x="58.9" y="851.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.9" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.46%)</title><rect x="58.9" y="835.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.9" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (1 samples, 0.46%)</title><rect x="58.9" y="819.0" width="5.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="61.9" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (1 samples, 0.46%)</title><rect x="58.9" y="803.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.9" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (1 samples, 0.46%)</title><rect x="58.9" y="787.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="61.9" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (1 samples, 0.46%)</title><rect x="58.9" y="771.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="61.9" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (1 samples, 0.46%)</title><rect x="58.9" y="755.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="61.9" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (1 samples, 0.46%)</title><rect x="58.9" y="739.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="61.9" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (1 samples, 0.46%)</title><rect x="58.9" y="723.0" width="5.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="61.9" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (1 samples, 0.46%)</title><rect x="58.9" y="707.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="61.9" y="718.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.read0 (1 samples, 0.46%)</title><rect x="58.9" y="691.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="61.9" y="702.0"></text>
</g>
<g>
<title>__read (1 samples, 0.46%)</title><rect x="58.9" y="675.0" width="5.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="61.9" y="686.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (1 samples, 0.46%)</title><rect x="64.4" y="851.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.4" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.46%)</title><rect x="64.4" y="835.0" width="5.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.4" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.46%)</title><rect x="64.4" y="819.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="67.4" y="830.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.46%)</title><rect x="64.4" y="803.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="67.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.checkDisconnects (1 samples, 0.46%)</title><rect x="69.8" y="883.0" width="5.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="72.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.nodes (1 samples, 0.46%)</title><rect x="69.8" y="867.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="72.8" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.46%)</title><rect x="75.3" y="883.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="78.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="75.3" y="867.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="78.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="75.3" y="851.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="75.3" y="835.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="78.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (1 samples, 0.46%)</title><rect x="75.3" y="819.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="78.3" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (1 samples, 0.46%)</title><rect x="75.3" y="803.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="78.3" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (1 samples, 0.46%)</title><rect x="75.3" y="787.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="78.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (2 samples, 0.92%)</title><rect x="80.7" y="915.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="83.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.poll (1 samples, 0.46%)</title><rect x="80.7" y="899.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="83.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Node.casItem (1 samples, 0.46%)</title><rect x="80.7" y="883.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="83.7" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1 samples, 0.46%)</title><rect x="86.1" y="899.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.1" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (1 samples, 0.46%)</title><rect x="86.1" y="883.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1 samples, 0.46%)</title><rect x="86.1" y="867.0" width="5.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (2 samples, 0.92%)</title><rect x="91.6" y="915.0" width="10.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.6" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (2 samples, 0.92%)</title><rect x="91.6" y="899.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="94.6" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/FetchSessionHandler$Builder.build (1 samples, 0.46%)</title><rect x="91.6" y="883.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="94.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$PartitionData.equals (1 samples, 0.46%)</title><rect x="91.6" y="867.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="94.6" y="878.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.46%)</title><rect x="91.6" y="851.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="94.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.selectReadReplica (1 samples, 0.46%)</title><rect x="97.0" y="883.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.0" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (1 samples, 0.46%)</title><rect x="102.4" y="931.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="105.4" y="942.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (1 samples, 0.46%)</title><rect x="102.4" y="915.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="105.4" y="926.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (1 samples, 0.46%)</title><rect x="102.4" y="899.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="105.4" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (1 samples, 0.46%)</title><rect x="102.4" y="883.0" width="5.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="105.4" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.46%)</title><rect x="102.4" y="867.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="105.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/FetchRequest$Builder.build (1 samples, 0.46%)</title><rect x="102.4" y="851.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="105.4" y="862.0"></text>
</g>
<g>
<title>java/lang/Thread.run (117 samples, 53.92%)</title><rect x="107.9" y="1011.0" width="636.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="110.9" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (117 samples, 53.92%)</title><rect x="107.9" y="995.0" width="636.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="110.9" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (117 samples, 53.92%)</title><rect x="107.9" y="979.0" width="636.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="110.9" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/1801262339.run (109 samples, 50.23%)</title><rect x="124.2" y="963.0" width="592.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.2" y="974.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/18012623..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (109 samples, 50.23%)</title><rect x="124.2" y="947.0" width="592.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="127.2" y="958.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (109 samples, 50.23%)</title><rect x="124.2" y="931.0" width="592.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="127.2" y="942.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (109 samples, 50.23%)</title><rect x="124.2" y="915.0" width="592.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="127.2" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (3 samples, 1.38%)</title><rect x="135.1" y="899.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.1" y="910.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (3 samples, 1.38%)</title><rect x="135.1" y="883.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="138.1" y="894.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 1.38%)</title><rect x="135.1" y="867.0" width="16.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="138.1" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 1.38%)</title><rect x="135.1" y="851.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="138.1" y="862.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.92%)</title><rect x="140.5" y="835.0" width="10.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="143.5" y="846.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.92%)</title><rect x="140.5" y="819.0" width="10.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="143.5" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (4 samples, 1.84%)</title><rect x="151.4" y="899.0" width="21.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="154.4" y="910.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.92%)</title><rect x="162.3" y="883.0" width="10.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="165.3" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.92%)</title><rect x="162.3" y="867.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.3" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.92%)</title><rect x="162.3" y="851.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="165.3" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.92%)</title><rect x="162.3" y="835.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="165.3" y="846.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$372/331922917.accept (2 samples, 0.92%)</title><rect x="162.3" y="819.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (2 samples, 0.92%)</title><rect x="162.3" y="803.0" width="10.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="165.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (2 samples, 0.92%)</title><rect x="162.3" y="787.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="165.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.92%)</title><rect x="162.3" y="771.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="165.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.92%)</title><rect x="162.3" y="755.0" width="10.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.46%)</title><rect x="162.3" y="739.0" width="5.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.46%)</title><rect x="162.3" y="723.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="165.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (1 samples, 0.46%)</title><rect x="167.7" y="739.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="170.7" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (20 samples, 9.22%)</title><rect x="173.1" y="899.0" width="108.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.1" y="910.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (20 samples, 9.22%)</title><rect x="173.1" y="883.0" width="108.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.1" y="894.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (20 samples, 9.22%)</title><rect x="173.1" y="867.0" width="108.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="176.1" y="878.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.22%)</title><rect x="173.1" y="851.0" width="108.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="176.1" y="862.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (20 samples, 9.22%)</title><rect x="173.1" y="835.0" width="108.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.1" y="846.0">com/linecorp/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (20 samples, 9.22%)</title><rect x="173.1" y="819.0" width="108.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.1" y="830.0">com/fasterxml..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (9 samples, 4.15%)</title><rect x="173.1" y="803.0" width="49.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="176.1" y="814.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (6 samples, 2.76%)</title><rect x="173.1" y="787.0" width="32.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.1" y="798.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (6 samples, 2.76%)</title><rect x="173.1" y="771.0" width="32.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="176.1" y="782.0">co..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (2 samples, 0.92%)</title><rect x="194.9" y="755.0" width="10.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.9" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.92%)</title><rect x="194.9" y="739.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="197.9" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.92%)</title><rect x="194.9" y="723.0" width="10.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="197.9" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.92%)</title><rect x="194.9" y="707.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="197.9" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.92%)</title><rect x="194.9" y="691.0" width="10.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="197.9" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (3 samples, 1.38%)</title><rect x="205.8" y="787.0" width="16.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="208.8" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (3 samples, 1.38%)</title><rect x="205.8" y="771.0" width="16.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="208.8" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.92%)</title><rect x="211.2" y="755.0" width="10.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.92%)</title><rect x="211.2" y="739.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="214.2" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonParser$Feature.enabledIn (1 samples, 0.46%)</title><rect x="211.2" y="723.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="214.2" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="211.2" y="707.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="214.2" y="718.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.46%)</title><rect x="211.2" y="691.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="214.2" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="211.2" y="675.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="214.2" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.46%)</title><rect x="211.2" y="659.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="214.2" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (1 samples, 0.46%)</title><rect x="216.6" y="723.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="219.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (11 samples, 5.07%)</title><rect x="222.1" y="803.0" width="59.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.1" y="814.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (2 samples, 0.92%)</title><rect x="222.1" y="787.0" width="10.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="225.1" y="798.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="227.5" y="771.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.5" y="782.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (1 samples, 0.46%)</title><rect x="227.5" y="755.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="230.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (1 samples, 0.46%)</title><rect x="227.5" y="739.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="230.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.&lt;init&gt; (1 samples, 0.46%)</title><rect x="227.5" y="723.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (9 samples, 4.15%)</title><rect x="232.9" y="787.0" width="49.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="235.9" y="798.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (9 samples, 4.15%)</title><rect x="232.9" y="771.0" width="49.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.9" y="782.0">com/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 1.84%)</title><rect x="232.9" y="755.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.9" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (3 samples, 1.38%)</title><rect x="238.4" y="739.0" width="16.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="241.4" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (5 samples, 2.30%)</title><rect x="254.7" y="755.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="257.7" y="766.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (5 samples, 2.30%)</title><rect x="254.7" y="739.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="257.7" y="750.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (5 samples, 2.30%)</title><rect x="254.7" y="723.0" width="27.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="257.7" y="734.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (1 samples, 0.46%)</title><rect x="260.1" y="707.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (1 samples, 0.46%)</title><rect x="260.1" y="691.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="263.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (1 samples, 0.46%)</title><rect x="260.1" y="675.0" width="5.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="263.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (1 samples, 0.46%)</title><rect x="260.1" y="659.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.46%)</title><rect x="260.1" y="643.0" width="5.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="263.1" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.46%)</title><rect x="265.6" y="707.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.6" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.46%)</title><rect x="265.6" y="691.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.6" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="265.6" y="675.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="268.6" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (1 samples, 0.46%)</title><rect x="265.6" y="659.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="268.6" y="670.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (1 samples, 0.46%)</title><rect x="265.6" y="643.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="268.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.92%)</title><rect x="271.0" y="707.0" width="10.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="274.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.92%)</title><rect x="271.0" y="691.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (2 samples, 0.92%)</title><rect x="271.0" y="675.0" width="10.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="274.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (2 samples, 0.92%)</title><rect x="271.0" y="659.0" width="10.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="274.0" y="670.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (2 samples, 0.92%)</title><rect x="271.0" y="643.0" width="10.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="274.0" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="271.0" y="627.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="274.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.46%)</title><rect x="271.0" y="611.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="274.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.46%)</title><rect x="271.0" y="595.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="274.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.46%)</title><rect x="271.0" y="579.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="274.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.46%)</title><rect x="271.0" y="563.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="274.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long, unsigned char, unsigned int*, unsigned int*) (1 samples, 0.46%)</title><rect x="271.0" y="547.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="274.0" y="558.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.46%)</title><rect x="271.0" y="531.0" width="5.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="274.0" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.46%)</title><rect x="271.0" y="515.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="274.0" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, bool, bool) (1 samples, 0.46%)</title><rect x="271.0" y="499.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="274.0" y="510.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.46%)</title><rect x="276.5" y="627.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.5" y="638.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (80 samples, 36.87%)</title><rect x="281.9" y="899.0" width="435.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="284.9" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipel..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (12 samples, 5.53%)</title><rect x="287.3" y="883.0" width="65.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="290.3" y="894.0">com/lin..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (11 samples, 5.07%)</title><rect x="292.8" y="867.0" width="59.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="295.8" y="878.0">org/sl..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (11 samples, 5.07%)</title><rect x="292.8" y="851.0" width="59.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="295.8" y="862.0">ch/qos..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (2 samples, 0.92%)</title><rect x="292.8" y="835.0" width="10.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="295.8" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.92%)</title><rect x="303.6" y="835.0" width="10.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="306.6" y="846.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.92%)</title><rect x="303.6" y="819.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="306.6" y="830.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.92%)</title><rect x="303.6" y="803.0" width="10.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="306.6" y="814.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (2 samples, 0.92%)</title><rect x="303.6" y="787.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="306.6" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (2 samples, 0.92%)</title><rect x="303.6" y="771.0" width="10.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="306.6" y="782.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (7 samples, 3.23%)</title><rect x="314.5" y="835.0" width="38.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="317.5" y="846.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.remove (6 samples, 2.76%)</title><rect x="320.0" y="819.0" width="32.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="323.0" y="830.0">ja..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (1 samples, 0.46%)</title><rect x="330.8" y="803.0" width="5.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="333.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (3 samples, 1.38%)</title><rect x="336.3" y="803.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="339.3" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (21 samples, 9.68%)</title><rect x="352.6" y="883.0" width="114.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="355.6" y="894.0">com/linecorp/d..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (20 samples, 9.22%)</title><rect x="352.6" y="867.0" width="108.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="355.6" y="878.0">com/linecorp/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (8 samples, 3.69%)</title><rect x="352.6" y="851.0" width="43.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.6" y="862.0">com/..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (3 samples, 1.38%)</title><rect x="374.3" y="835.0" width="16.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="377.3" y="846.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (3 samples, 1.38%)</title><rect x="374.3" y="819.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="377.3" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="374.3" y="803.0" width="5.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="377.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.46%)</title><rect x="374.3" y="787.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="377.3" y="798.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.46%)</title><rect x="374.3" y="771.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="377.3" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (1 samples, 0.46%)</title><rect x="379.8" y="803.0" width="5.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="382.8" y="814.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (1 samples, 0.46%)</title><rect x="379.8" y="787.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="382.8" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.46%)</title><rect x="379.8" y="771.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="382.8" y="782.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.46%)</title><rect x="379.8" y="755.0" width="5.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="382.8" y="766.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (1 samples, 0.46%)</title><rect x="385.2" y="803.0" width="5.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="388.2" y="814.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.46%)</title><rect x="390.6" y="835.0" width="5.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="393.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (4 samples, 1.84%)</title><rect x="396.1" y="851.0" width="21.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="399.1" y="862.0">j..</text>
</g>
<g>
<title>java/lang/Integer.toString (1 samples, 0.46%)</title><rect x="396.1" y="835.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="399.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Integer.getChars (1 samples, 0.46%)</title><rect x="396.1" y="819.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="399.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Long.toString (3 samples, 1.38%)</title><rect x="401.5" y="835.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.5" y="846.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (3 samples, 1.38%)</title><rect x="401.5" y="819.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="404.5" y="830.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (8 samples, 3.69%)</title><rect x="417.8" y="851.0" width="43.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.8" y="862.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (8 samples, 3.69%)</title><rect x="417.8" y="835.0" width="43.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="420.8" y="846.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (4 samples, 1.84%)</title><rect x="417.8" y="819.0" width="21.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="420.8" y="830.0">c..</text>
</g>
<g>
<title>java/lang/ThreadLocal.set (4 samples, 1.84%)</title><rect x="417.8" y="803.0" width="21.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="420.8" y="814.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (4 samples, 1.84%)</title><rect x="417.8" y="787.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.8" y="798.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (4 samples, 1.84%)</title><rect x="417.8" y="771.0" width="21.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.8" y="782.0">j..</text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (4 samples, 1.84%)</title><rect x="439.6" y="819.0" width="21.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="442.6" y="830.0">j..</text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 1.38%)</title><rect x="445.0" y="803.0" width="16.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="448.0" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (3 samples, 1.38%)</title><rect x="445.0" y="787.0" width="16.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="448.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.46%)</title><rect x="450.5" y="771.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="453.5" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.46%)</title><rect x="455.9" y="771.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (1 samples, 0.46%)</title><rect x="461.3" y="867.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.3" y="878.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (1 samples, 0.46%)</title><rect x="461.3" y="851.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="464.3" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.46%)</title><rect x="461.3" y="835.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="461.3" y="819.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.3" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.46%)</title><rect x="461.3" y="803.0" width="5.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="464.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="461.3" y="787.0" width="5.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="464.3" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (46 samples, 21.20%)</title><rect x="466.8" y="883.0" width="250.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.8" y="894.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (46 samples, 21.20%)</title><rect x="466.8" y="867.0" width="250.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="469.8" y="878.0">com/linecorp/decaton/processor/ru..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$273/949159335.process (39 samples, 17.97%)</title><rect x="477.6" y="851.0" width="212.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.6" y="862.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (39 samples, 17.97%)</title><rect x="477.6" y="835.0" width="212.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.6" y="846.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (39 samples, 17.97%)</title><rect x="477.6" y="819.0" width="212.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="480.6" y="830.0">com/linecorp/decaton/benchma..</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.38%)</title><rect x="477.6" y="803.0" width="16.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="480.6" y="814.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (3 samples, 1.38%)</title><rect x="477.6" y="787.0" width="16.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.6" y="798.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (3 samples, 1.38%)</title><rect x="477.6" y="771.0" width="16.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="480.6" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (2 samples, 0.92%)</title><rect x="483.1" y="755.0" width="10.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="486.1" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (36 samples, 16.59%)</title><rect x="494.0" y="803.0" width="195.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="497.0" y="814.0">com/linecorp/decaton/benc..</text>
</g>
<g>
<title>java/lang/Thread.sleep (34 samples, 15.67%)</title><rect x="504.8" y="787.0" width="184.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="507.8" y="798.0">java/lang/Thread.sleep</text>
</g>
<g>
<title>JVM_Sleep (29 samples, 13.36%)</title><rect x="532.0" y="771.0" width="157.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="535.0" y="782.0">JVM_Sleep</text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 1.38%)</title><rect x="553.8" y="755.0" width="16.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="556.8" y="766.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.92%)</title><rect x="570.1" y="755.0" width="10.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="573.1" y="766.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="575.5" y="739.0" width="5.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="578.5" y="750.0"></text>
</g>
<g>
<title>os::sleep(Thread*, long, bool) (20 samples, 9.22%)</title><rect x="581.0" y="755.0" width="108.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="584.0" y="766.0">os::sleep(Thr..</text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.46%)</title><rect x="602.7" y="739.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.7" y="750.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.46%)</title><rect x="602.7" y="723.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="605.7" y="734.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) (1 samples, 0.46%)</title><rect x="608.2" y="739.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="611.2" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.46%)</title><rect x="608.2" y="723.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="611.2" y="734.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.46%)</title><rect x="608.2" y="707.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="611.2" y="718.0"></text>
</g>
<g>
<title>__lll_unlock_wake (1 samples, 0.46%)</title><rect x="608.2" y="691.0" width="5.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="611.2" y="702.0"></text>
</g>
<g>
<title>__lll_unlock_wake (2 samples, 0.92%)</title><rect x="613.6" y="739.0" width="10.9" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="616.6" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (10 samples, 4.61%)</title><rect x="624.5" y="739.0" width="54.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="627.5" y="750.0">__pth..</text>
</g>
<g>
<title>os::PlatformEvent::park(long) (1 samples, 0.46%)</title><rect x="678.8" y="739.0" width="5.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="681.8" y="750.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="684.3" y="739.0" width="5.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="687.3" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (3 samples, 1.38%)</title><rect x="689.7" y="851.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="692.7" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.&lt;init&gt; (2 samples, 0.92%)</title><rect x="695.2" y="835.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="698.2" y="846.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.46%)</title><rect x="706.0" y="851.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="709.0" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.46%)</title><rect x="706.0" y="835.0" width="5.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="709.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.get (1 samples, 0.46%)</title><rect x="711.5" y="851.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="714.5" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (5 samples, 2.30%)</title><rect x="716.9" y="963.0" width="27.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="719.9" y="974.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (3 samples, 1.38%)</title><rect x="722.4" y="947.0" width="16.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="725.4" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.46%)</title><rect x="722.4" y="931.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="725.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (1 samples, 0.46%)</title><rect x="722.4" y="915.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.46%)</title><rect x="722.4" y="899.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="725.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.46%)</title><rect x="722.4" y="883.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="725.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.46%)</title><rect x="722.4" y="867.0" width="5.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="725.4" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.92%)</title><rect x="727.8" y="931.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.8" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.92%)</title><rect x="727.8" y="915.0" width="10.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="730.8" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.92%)</title><rect x="727.8" y="899.0" width="10.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="730.8" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (2 samples, 0.92%)</title><rect x="727.8" y="883.0" width="10.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="730.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runStateOf (1 samples, 0.46%)</title><rect x="738.7" y="947.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="741.7" y="958.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator$HeartbeatThread.run (1 samples, 0.46%)</title><rect x="744.1" y="1011.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="747.1" y="1022.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.46%)</title><rect x="744.1" y="995.0" width="5.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.1" y="1006.0"></text>
</g>
<g>
<title>JVM_MonitorWait (1 samples, 0.46%)</title><rect x="744.1" y="979.0" width="5.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="747.1" y="990.0"></text>
</g>
<g>
<title>ObjectMonitor::wait(long, bool, Thread*) (1 samples, 0.46%)</title><rect x="744.1" y="963.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="747.1" y="974.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.46%)</title><rect x="744.1" y="947.0" width="5.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="747.1" y="958.0"></text>
</g>
<g>
<title>start_thread (81 samples, 37.33%)</title><rect x="749.5" y="1011.0" width="440.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="752.5" y="1022.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (81 samples, 37.33%)</title><rect x="749.5" y="995.0" width="440.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="752.5" y="1006.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (13 samples, 5.99%)</title><rect x="749.5" y="979.0" width="70.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="752.5" y="990.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (13 samples, 5.99%)</title><rect x="749.5" y="963.0" width="70.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="752.5" y="974.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (13 samples, 5.99%)</title><rect x="749.5" y="947.0" width="70.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="752.5" y="958.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 5.53%)</title><rect x="749.5" y="931.0" width="65.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="752.5" y="942.0">G1ParSc..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 2.30%)</title><rect x="776.7" y="915.0" width="27.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="779.7" y="926.0">G..</text>
</g>
<g>
<title>InstanceKlass::oop_oop_iterate_backwards_nv(oopDesc*, G1ParScanClosure*) (1 samples, 0.46%)</title><rect x="793.0" y="899.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="796.0" y="910.0"></text>
</g>
<g>
<title>InstanceKlass::vtable_length() const (1 samples, 0.46%)</title><rect x="798.5" y="899.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="801.5" y="910.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (2 samples, 0.92%)</title><rect x="803.9" y="915.0" width="10.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="806.9" y="926.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.46%)</title><rect x="814.8" y="931.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="817.8" y="942.0"></text>
</g>
<g>
<title>JavaThread::run() (68 samples, 31.34%)</title><rect x="820.2" y="979.0" width="369.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="823.2" y="990.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (68 samples, 31.34%)</title><rect x="820.2" y="963.0" width="369.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="823.2" y="974.0">JavaThread::thread_main_inner()</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (68 samples, 31.34%)</title><rect x="820.2" y="947.0" width="369.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.2" y="958.0">CompileBroker::compiler_thread_loop()</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (67 samples, 30.88%)</title><rect x="820.2" y="931.0" width="364.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="823.2" y="942.0">CompileBroker::invoke_compiler_on_method(CompileTa..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (65 samples, 29.95%)</title><rect x="820.2" y="915.0" width="353.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="823.2" y="926.0">C2Compiler::compile_method(ciEnv*, ciMethod*, int)</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (65 samples, 29.95%)</title><rect x="820.2" y="899.0" width="353.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="823.2" y="910.0">Compile::Compile(ciEnv*, C2Compiler*, ciMethod*,..</text>
</g>
<g>
<title>Compile::Code_Gen() (41 samples, 18.89%)</title><rect x="820.2" y="883.0" width="223.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="823.2" y="894.0">Compile::Code_Gen()</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.46%)</title><rect x="820.2" y="867.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="823.2" y="878.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.46%)</title><rect x="820.2" y="851.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.2" y="862.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.46%)</title><rect x="820.2" y="835.0" width="5.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="823.2" y="846.0"></text>
</g>
<g>
<title>Compile::scratch_emit_size(Node const*) (1 samples, 0.46%)</title><rect x="820.2" y="819.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="823.2" y="830.0"></text>
</g>
<g>
<title>decodeHeapOop_not_nullNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.46%)</title><rect x="820.2" y="803.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="823.2" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.46%)</title><rect x="825.7" y="867.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="828.7" y="878.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.46%)</title><rect x="825.7" y="851.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="828.7" y="862.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.46%)</title><rect x="825.7" y="835.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="828.7" y="846.0"></text>
</g>
<g>
<title>Matcher::match() (6 samples, 2.76%)</title><rect x="831.1" y="867.0" width="32.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="834.1" y="878.0">Ma..</text>
</g>
<g>
<title>Matcher::xform(Node*, int) (6 samples, 2.76%)</title><rect x="831.1" y="851.0" width="32.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="834.1" y="862.0">Ma..</text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.46%)</title><rect x="836.5" y="835.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="839.5" y="846.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (4 samples, 1.84%)</title><rect x="842.0" y="835.0" width="21.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="845.0" y="846.0">M..</text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.46%)</title><rect x="847.4" y="819.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="850.4" y="830.0"></text>
</g>
<g>
<title>HaltNode::match_edge(unsigned int) const (1 samples, 0.46%)</title><rect x="847.4" y="803.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="850.4" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (2 samples, 0.92%)</title><rect x="852.9" y="819.0" width="10.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="855.9" y="830.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (2 samples, 0.92%)</title><rect x="852.9" y="803.0" width="10.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="855.9" y="814.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.46%)</title><rect x="858.3" y="787.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="861.3" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (2 samples, 0.92%)</title><rect x="863.7" y="867.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="866.7" y="878.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.46%)</title><rect x="863.7" y="851.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="866.7" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (1 samples, 0.46%)</title><rect x="869.2" y="851.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="872.2" y="862.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.46%)</title><rect x="869.2" y="835.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="872.2" y="846.0"></text>
</g>
<g>
<title>PhaseCFG::sched_call(Block*, unsigned int, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, MachCallNode*, VectorSet&amp;) (1 samples, 0.46%)</title><rect x="869.2" y="819.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="872.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (31 samples, 14.29%)</title><rect x="874.6" y="867.0" width="168.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="877.6" y="878.0">PhaseChaitin::Register..</text>
</g>
<g>
<title>PhaseChaitin::Select() (1 samples, 0.46%)</title><rect x="874.6" y="851.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="877.6" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="874.6" y="835.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="877.6" y="846.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.92%)</title><rect x="880.0" y="851.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="883.0" y="862.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.92%)</title><rect x="880.0" y="835.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="883.0" y="846.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="885.5" y="819.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="888.5" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 2.30%)</title><rect x="890.9" y="851.0" width="27.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="893.9" y="862.0">P..</text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (10 samples, 4.61%)</title><rect x="918.1" y="851.0" width="54.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="921.1" y="862.0">Phase..</text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 2.76%)</title><rect x="939.9" y="835.0" width="32.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="942.9" y="846.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 1.38%)</title><rect x="956.2" y="819.0" width="16.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="959.2" y="830.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.46%)</title><rect x="972.5" y="851.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="975.5" y="862.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (1 samples, 0.46%)</title><rect x="977.9" y="851.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="980.9" y="862.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.92%)</title><rect x="983.4" y="851.0" width="10.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="986.4" y="862.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.92%)</title><rect x="983.4" y="835.0" width="10.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="986.4" y="846.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.92%)</title><rect x="983.4" y="819.0" width="10.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="986.4" y="830.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.46%)</title><rect x="983.4" y="803.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="986.4" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.46%)</title><rect x="988.8" y="803.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.8" y="814.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (1 samples, 0.46%)</title><rect x="994.2" y="851.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.2" y="862.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.46%)</title><rect x="994.2" y="835.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="997.2" y="846.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 2.76%)</title><rect x="999.7" y="851.0" width="32.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1002.7" y="862.0">Ph..</text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.92%)</title><rect x="1016.0" y="835.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1019.0" y="846.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.46%)</title><rect x="1026.9" y="835.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1029.9" y="846.0"></text>
</g>
<g>
<title>__memset_sse2 (2 samples, 0.92%)</title><rect x="1032.3" y="851.0" width="10.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1035.3" y="862.0"></text>
</g>
<g>
<title>Compile::Optimize() (16 samples, 7.37%)</title><rect x="1043.2" y="883.0" width="87.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1046.2" y="894.0">Compile::O..</text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.46%)</title><rect x="1043.2" y="867.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.2" y="878.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.46%)</title><rect x="1043.2" y="851.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1046.2" y="862.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.46%)</title><rect x="1043.2" y="835.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1046.2" y="846.0"></text>
</g>
<g>
<title>ConnectionGraph::process_call_arguments(CallNode*) (1 samples, 0.46%)</title><rect x="1043.2" y="819.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.2" y="830.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.46%)</title><rect x="1043.2" y="803.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1046.2" y="814.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.46%)</title><rect x="1043.2" y="787.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.2" y="798.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.46%)</title><rect x="1043.2" y="771.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.2" y="782.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.46%)</title><rect x="1043.2" y="755.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1046.2" y="766.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.46%)</title><rect x="1043.2" y="739.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.2" y="750.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.46%)</title><rect x="1043.2" y="723.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1046.2" y="734.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.46%)</title><rect x="1043.2" y="707.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.2" y="718.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.46%)</title><rect x="1043.2" y="691.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1046.2" y="702.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.46%)</title><rect x="1043.2" y="675.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1046.2" y="686.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.46%)</title><rect x="1043.2" y="659.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1046.2" y="670.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1043.2" y="643.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1046.2" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1043.2" y="627.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1046.2" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1043.2" y="611.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1043.2" y="595.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1046.2" y="606.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.46%)</title><rect x="1043.2" y="579.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1046.2" y="590.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, KlassHandle&amp;, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="1043.2" y="563.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1046.2" y="574.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_static_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.46%)</title><rect x="1043.2" y="547.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1046.2" y="558.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="1043.2" y="531.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1046.2" y="542.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Handle, Handle, bool, Thread*) (1 samples, 0.46%)</title><rect x="1043.2" y="515.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1046.2" y="526.0"></text>
</g>
<g>
<title>SystemDictionary::add_loader_constraint(Symbol*, Handle, Handle, Thread*) (1 samples, 0.46%)</title><rect x="1043.2" y="499.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1046.2" y="510.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*, ClassLoaderData*) (1 samples, 0.46%)</title><rect x="1043.2" y="483.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.2" y="494.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (11 samples, 5.07%)</title><rect x="1048.6" y="867.0" width="59.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.6" y="878.0">PhaseI..</text>
</g>
<g>
<title>ParmNode::is_CFG() const (1 samples, 0.46%)</title><rect x="1048.6" y="851.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1051.6" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (1 samples, 0.46%)</title><rect x="1054.1" y="851.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1057.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.46%)</title><rect x="1054.1" y="835.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1057.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 2.76%)</title><rect x="1059.5" y="851.0" width="32.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1062.5" y="862.0">Ph..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (5 samples, 2.30%)</title><rect x="1064.9" y="835.0" width="27.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.9" y="846.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (4 samples, 1.84%)</title><rect x="1070.4" y="819.0" width="21.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1073.4" y="830.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (2 samples, 0.92%)</title><rect x="1081.2" y="803.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1084.2" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.92%)</title><rect x="1092.1" y="851.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1095.1" y="862.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (2 samples, 0.92%)</title><rect x="1092.1" y="835.0" width="10.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.1" y="846.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.46%)</title><rect x="1097.6" y="819.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1100.6" y="830.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.46%)</title><rect x="1097.6" y="803.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1100.6" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.46%)</title><rect x="1103.0" y="851.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1106.0" y="862.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.46%)</title><rect x="1103.0" y="835.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1106.0" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1103.0" y="819.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.0" y="830.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.46%)</title><rect x="1103.0" y="803.0" width="5.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1106.0" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 1.38%)</title><rect x="1108.4" y="867.0" width="16.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.4" y="878.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 1.38%)</title><rect x="1108.4" y="851.0" width="16.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1111.4" y="862.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1108.4" y="835.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1111.4" y="846.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1113.9" y="835.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1116.9" y="846.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (1 samples, 0.46%)</title><rect x="1113.9" y="819.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1116.9" y="830.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.46%)</title><rect x="1119.3" y="835.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1122.3" y="846.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.46%)</title><rect x="1119.3" y="819.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1122.3" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1119.3" y="803.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.3" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.46%)</title><rect x="1119.3" y="787.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1122.3" y="798.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.46%)</title><rect x="1119.3" y="771.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1122.3" y="782.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.46%)</title><rect x="1119.3" y="755.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1122.3" y="766.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.46%)</title><rect x="1124.7" y="867.0" width="5.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1127.7" y="878.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 3.69%)</title><rect x="1130.2" y="883.0" width="43.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.2" y="894.0">Pars..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 3.69%)</title><rect x="1130.2" y="867.0" width="43.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1133.2" y="878.0">Pars..</text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 3.69%)</title><rect x="1130.2" y="851.0" width="43.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.2" y="862.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_block() (8 samples, 3.69%)</title><rect x="1130.2" y="835.0" width="43.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.2" y="846.0">Pars..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (8 samples, 3.69%)</title><rect x="1130.2" y="819.0" width="43.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.2" y="830.0">Pars..</text>
</g>
<g>
<title>Parse::do_call() (8 samples, 3.69%)</title><rect x="1130.2" y="803.0" width="43.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.2" y="814.0">Pars..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1130.2" y="787.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.2" y="798.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1130.2" y="771.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1133.2" y="782.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1130.2" y="755.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1133.2" y="766.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1130.2" y="739.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.2" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1130.2" y="723.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.2" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1130.2" y="707.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.2" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1130.2" y="691.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1133.2" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1130.2" y="675.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1133.2" y="686.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1130.2" y="659.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1133.2" y="670.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1130.2" y="643.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.2" y="654.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.46%)</title><rect x="1130.2" y="627.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.2" y="638.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1130.2" y="611.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.2" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1130.2" y="595.0" width="5.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1133.2" y="606.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1130.2" y="579.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="590.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1130.2" y="563.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1133.2" y="574.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1130.2" y="547.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.2" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.46%)</title><rect x="1130.2" y="531.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.2" y="542.0"></text>
</g>
<g>
<title>SymbolTable::lookup(char const*, int, Thread*) (1 samples, 0.46%)</title><rect x="1130.2" y="515.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 3.23%)</title><rect x="1135.6" y="787.0" width="38.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1138.6" y="798.0">Par..</text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 3.23%)</title><rect x="1135.6" y="771.0" width="38.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.6" y="782.0">Par..</text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 3.23%)</title><rect x="1135.6" y="755.0" width="38.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1138.6" y="766.0">Par..</text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 3.23%)</title><rect x="1135.6" y="739.0" width="38.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1138.6" y="750.0">Par..</text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 3.23%)</title><rect x="1135.6" y="723.0" width="38.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.6" y="734.0">Par..</text>
</g>
<g>
<title>Parse::do_call() (7 samples, 3.23%)</title><rect x="1135.6" y="707.0" width="38.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1138.6" y="718.0">Par..</text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1135.6" y="691.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1135.6" y="675.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1138.6" y="686.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1135.6" y="659.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="670.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1135.6" y="643.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="654.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1135.6" y="627.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.6" y="638.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1135.6" y="611.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.6" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1135.6" y="595.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1135.6" y="579.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1138.6" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1135.6" y="563.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.46%)</title><rect x="1135.6" y="547.0" width="5.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.6" y="558.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.46%)</title><rect x="1135.6" y="531.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1138.6" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1135.6" y="515.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.6" y="526.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1135.6" y="499.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1138.6" y="510.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1135.6" y="483.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="494.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method_or_null(KlassHandle, Symbol*, Symbol*, KlassHandle, bool) (1 samples, 0.46%)</title><rect x="1135.6" y="467.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1138.6" y="478.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_virtual_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, Thread*) (1 samples, 0.46%)</title><rect x="1135.6" y="451.0" width="5.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.6" y="462.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(methodHandle&amp;, KlassHandle, Symbol*, Symbol*, KlassHandle, bool, bool, Thread*) (1 samples, 0.46%)</title><rect x="1135.6" y="435.0" width="5.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="446.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(KlassHandle, KlassHandle, KlassHandle, methodHandle, Thread*) (1 samples, 0.46%)</title><rect x="1135.6" y="419.0" width="5.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.6" y="430.0"></text>
</g>
<g>
<title>Reflection::verify_field_access(Klass*, Klass*, Klass*, AccessFlags, bool, bool) (1 samples, 0.46%)</title><rect x="1135.6" y="403.0" width="5.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.6" y="414.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass*) (1 samples, 0.46%)</title><rect x="1135.6" y="387.0" width="5.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.6" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.38%)</title><rect x="1141.1" y="691.0" width="16.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.1" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.38%)</title><rect x="1141.1" y="675.0" width="16.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.38%)</title><rect x="1141.1" y="659.0" width="16.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.1" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.38%)</title><rect x="1141.1" y="643.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.38%)</title><rect x="1141.1" y="627.0" width="16.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.38%)</title><rect x="1141.1" y="611.0" width="16.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1144.1" y="622.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1141.1" y="595.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.1" y="606.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1141.1" y="579.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.1" y="590.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1141.1" y="563.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.1" y="574.0"></text>
</g>
<g>
<title>InlineTree::should_not_inline(ciMethod*, ciMethod*, JVMState*, WarmCallInfo*) (1 samples, 0.46%)</title><rect x="1141.1" y="547.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.1" y="558.0"></text>
</g>
<g>
<title>is_init_with_ea(ciMethod*, ciMethod*, Compile*) (1 samples, 0.46%)</title><rect x="1141.1" y="531.0" width="5.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1144.1" y="542.0"></text>
</g>
<g>
<title>ciMethod::is_initializer() const (1 samples, 0.46%)</title><rect x="1141.1" y="515.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1144.1" y="526.0"></text>
</g>
<g>
<title>Method::is_initializer() const (1 samples, 0.46%)</title><rect x="1141.1" y="499.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1146.5" y="595.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.5" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1146.5" y="579.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.5" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1146.5" y="563.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1146.5" y="547.0" width="10.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.5" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1146.5" y="531.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.92%)</title><rect x="1146.5" y="515.0" width="10.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.5" y="526.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1146.5" y="499.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.5" y="510.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1146.5" y="483.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.5" y="494.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1146.5" y="467.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.5" y="478.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1146.5" y="451.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1149.5" y="462.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1146.5" y="435.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.5" y="446.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1146.5" y="419.0" width="5.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.5" y="430.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1146.5" y="403.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1149.5" y="414.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1146.5" y="387.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.5" y="398.0"></text>
</g>
<g>
<title>ciType::is_classless() const (1 samples, 0.46%)</title><rect x="1146.5" y="371.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.5" y="382.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1151.9" y="499.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1151.9" y="483.0" width="5.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1154.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.46%)</title><rect x="1151.9" y="467.0" width="5.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1154.9" y="478.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.46%)</title><rect x="1151.9" y="451.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="462.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseTransform*) (1 samples, 0.46%)</title><rect x="1151.9" y="435.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.9" y="446.0"></text>
</g>
<g>
<title>PhiNode::is_diamond_phi(bool) const (1 samples, 0.46%)</title><rect x="1151.9" y="419.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.9" y="430.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 1.38%)</title><rect x="1157.4" y="691.0" width="16.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 1.38%)</title><rect x="1157.4" y="675.0" width="16.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 1.38%)</title><rect x="1157.4" y="659.0" width="16.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1160.4" y="670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 1.38%)</title><rect x="1157.4" y="643.0" width="16.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1160.4" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 1.38%)</title><rect x="1157.4" y="627.0" width="16.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 1.38%)</title><rect x="1157.4" y="611.0" width="16.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.4" y="622.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 1.38%)</title><rect x="1157.4" y="595.0" width="16.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.4" y="606.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.46%)</title><rect x="1157.4" y="579.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1160.4" y="590.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.46%)</title><rect x="1157.4" y="563.0" width="5.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.4" y="574.0"></text>
</g>
<g>
<title>TypeTuple::make_range(ciSignature*) (1 samples, 0.46%)</title><rect x="1157.4" y="547.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.4" y="558.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.46%)</title><rect x="1157.4" y="531.0" width="5.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1160.4" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1162.8" y="579.0" width="10.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1162.8" y="563.0" width="10.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1162.8" y="547.0" width="10.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1162.8" y="531.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1162.8" y="515.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.8" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.92%)</title><rect x="1162.8" y="499.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1165.8" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.92%)</title><rect x="1162.8" y="483.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.92%)</title><rect x="1162.8" y="467.0" width="10.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1165.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.92%)</title><rect x="1162.8" y="451.0" width="10.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.92%)</title><rect x="1162.8" y="435.0" width="10.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1165.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.92%)</title><rect x="1162.8" y="419.0" width="10.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.8" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.92%)</title><rect x="1162.8" y="403.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.8" y="414.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="387.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="398.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.46%)</title><rect x="1162.8" y="371.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="382.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.46%)</title><rect x="1162.8" y="355.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="366.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.46%)</title><rect x="1162.8" y="339.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="350.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.46%)</title><rect x="1162.8" y="323.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1165.8" y="334.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1162.8" y="307.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1165.8" y="318.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.46%)</title><rect x="1162.8" y="291.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="302.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1162.8" y="275.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="286.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.46%)</title><rect x="1162.8" y="259.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.8" y="270.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.46%)</title><rect x="1162.8" y="243.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.8" y="254.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1162.8" y="227.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="238.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1162.8" y="211.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="222.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.46%)</title><rect x="1162.8" y="195.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.8" y="206.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1162.8" y="179.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="190.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.46%)</title><rect x="1162.8" y="163.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="174.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="147.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1165.8" y="158.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle, ciSymbol*, bool) (1 samples, 0.46%)</title><rect x="1162.8" y="131.0" width="5.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.8" y="142.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1162.8" y="115.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1165.8" y="126.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.46%)</title><rect x="1162.8" y="99.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1165.8" y="110.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(KlassHandle) (1 samples, 0.46%)</title><rect x="1162.8" y="83.0" width="5.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1165.8" y="94.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(KlassHandle) (1 samples, 0.46%)</title><rect x="1162.8" y="67.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.8" y="78.0"></text>
</g>
<g>
<title>ciObjectFactory::get_symbol(Symbol*) (1 samples, 0.46%)</title><rect x="1162.8" y="51.0" width="5.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.8" y="62.0"></text>
</g>
<g>
<title>Atomic::inc(short volatile*) (1 samples, 0.46%)</title><rect x="1162.8" y="35.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1165.8" y="46.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1168.2" y="387.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.2" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1168.2" y="371.0" width="5.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1171.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1168.2" y="355.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1168.2" y="339.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1171.2" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1168.2" y="323.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1171.2" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1168.2" y="307.0" width="5.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.2" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1168.2" y="291.0" width="5.5" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1171.2" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1168.2" y="275.0" width="5.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1171.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.46%)</title><rect x="1168.2" y="259.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.46%)</title><rect x="1168.2" y="243.0" width="5.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1171.2" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.46%)</title><rect x="1168.2" y="227.0" width="5.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.2" y="238.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.46%)</title><rect x="1168.2" y="211.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="222.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.46%)</title><rect x="1168.2" y="195.0" width="5.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.2" y="206.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.46%)</title><rect x="1168.2" y="179.0" width="5.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1171.2" y="190.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.46%)</title><rect x="1168.2" y="163.0" width="5.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1171.2" y="174.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.46%)</title><rect x="1168.2" y="147.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1171.2" y="158.0"></text>
</g>
<g>
<title>JVMState::clone_shallow(Compile*) const (1 samples, 0.46%)</title><rect x="1168.2" y="131.0" width="5.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1171.2" y="142.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (2 samples, 0.92%)</title><rect x="1173.7" y="915.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1176.7" y="926.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (2 samples, 0.92%)</title><rect x="1173.7" y="899.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="910.0"></text>
</g>
<g>
<title>Compilation::compile_method() (2 samples, 0.92%)</title><rect x="1173.7" y="883.0" width="10.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="894.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (2 samples, 0.92%)</title><rect x="1173.7" y="867.0" width="10.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="878.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.46%)</title><rect x="1173.7" y="851.0" width="5.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1176.7" y="862.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.46%)</title><rect x="1173.7" y="835.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.7" y="846.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.46%)</title><rect x="1173.7" y="819.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1176.7" y="830.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.46%)</title><rect x="1173.7" y="803.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.7" y="814.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.46%)</title><rect x="1173.7" y="787.0" width="5.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1176.7" y="798.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.46%)</title><rect x="1173.7" y="771.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1176.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1173.7" y="755.0" width="5.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.7" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1173.7" y="739.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.7" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.46%)</title><rect x="1173.7" y="723.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.46%)</title><rect x="1173.7" y="707.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.7" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.46%)</title><rect x="1173.7" y="691.0" width="5.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.46%)</title><rect x="1173.7" y="675.0" width="5.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1176.7" y="686.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.46%)</title><rect x="1173.7" y="659.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.7" y="670.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.46%)</title><rect x="1179.1" y="851.0" width="5.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="862.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.46%)</title><rect x="1179.1" y="835.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="846.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (1 samples, 0.46%)</title><rect x="1179.1" y="819.0" width="5.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.1" y="830.0"></text>
</g>
<g>
<title>LinearScan::add_temp(LIR_OprDesc*, int, IntervalUseKind) (1 samples, 0.46%)</title><rect x="1179.1" y="803.0" width="5.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.1" y="814.0"></text>
</g>
<g>
<title>CompileQueue::get() (1 samples, 0.46%)</title><rect x="1184.6" y="931.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.6" y="942.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.46%)</title><rect x="1184.6" y="915.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="926.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.46%)</title><rect x="1184.6" y="899.0" width="5.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1187.6" y="910.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.46%)</title><rect x="1184.6" y="883.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.6" y="894.0"></text>
</g>
</g>
</svg>
