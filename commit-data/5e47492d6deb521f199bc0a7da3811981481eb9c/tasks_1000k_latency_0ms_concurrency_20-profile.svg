<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1013"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1013"> </text>
<g id="frames">
<g>
<title>all (1,020 samples, 100.00%)</title><rect x="10.0" y="979.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="990.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.10%)</title><rect x="10.0" y="963.0" width="1.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="11.2" y="963.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.2" y="974.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.10%)</title><rect x="11.2" y="947.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="14.2" y="958.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.run (197 samples, 19.31%)</title><rect x="12.3" y="963.0" width="227.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="15.3" y="974.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription.consumeLoop (197 samples, 19.31%)</title><rect x="12.3" y="947.0" width="227.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="15.3" y="958.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.poll (197 samples, 19.31%)</title><rect x="12.3" y="931.0" width="227.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="942.0">com/linecorp/decaton/processor..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager.resumePartitions (1 samples, 0.10%)</title><rect x="12.3" y="915.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.partitionsNeedsResume (1 samples, 0.10%)</title><rect x="12.3" y="899.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="15.3" y="910.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.10%)</title><rect x="12.3" y="883.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="15.3" y="894.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.10%)</title><rect x="12.3" y="867.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="15.3" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.10%)</title><rect x="12.3" y="851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="15.3" y="862.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.10%)</title><rect x="12.3" y="835.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="15.3" y="846.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.10%)</title><rect x="12.3" y="819.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="15.3" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updatePartitionsStatus (5 samples, 0.49%)</title><rect x="13.5" y="915.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="16.5" y="926.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.updateHighWatermarks (5 samples, 0.49%)</title><rect x="13.5" y="899.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.5" y="910.0"></text>
</g>
<g>
<title>java/util/HashMap$Values.forEach (4 samples, 0.39%)</title><rect x="14.6" y="883.0" width="4.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="17.6" y="894.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts$$Lambda$332/1456851573.accept (3 samples, 0.29%)</title><rect x="15.8" y="867.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.8" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.updateHighWatermark (3 samples, 0.29%)</title><rect x="15.8" y="851.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.8" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.updateHighWatermark (3 samples, 0.29%)</title><rect x="15.8" y="835.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.8" y="846.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.29%)</title><rect x="15.8" y="819.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (1 samples, 0.10%)</title><rect x="19.3" y="915.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.3" y="926.0"></text>
</g>
<g>
<title>java/lang/Iterable.forEach (159 samples, 15.59%)</title><rect x="20.4" y="915.0" width="184.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="926.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ConsumeManager$$Lambda$331/150583814.accept (156 samples, 15.29%)</title><rect x="20.4" y="899.0" width="180.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="23.4" y="910.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler.receive (156 samples, 15.29%)</title><rect x="20.4" y="883.0" width="180.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="894.0">com/linecorp/decaton/pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.addRequest (142 samples, 13.92%)</title><rect x="20.4" y="867.0" width="164.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="23.4" y="878.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionProcessor.addTask (142 samples, 13.92%)</title><rect x="20.4" y="851.0" width="164.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="862.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.putTask (142 samples, 13.92%)</title><rect x="20.4" y="835.0" width="164.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="23.4" y="846.0">com/linecorp/decaton/..</text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.execute (142 samples, 13.92%)</title><rect x="20.4" y="819.0" width="164.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="23.4" y="830.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (142 samples, 13.92%)</title><rect x="20.4" y="803.0" width="164.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="23.4" y="814.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (142 samples, 13.92%)</title><rect x="20.4" y="787.0" width="164.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="23.4" y="798.0">java/util/concurrent/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (106 samples, 10.39%)</title><rect x="62.1" y="771.0" width="122.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.1" y="782.0">java/util/concu..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 1.47%)</title><rect x="62.1" y="755.0" width="17.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="65.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (15 samples, 1.47%)</title><rect x="62.1" y="739.0" width="17.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (15 samples, 1.47%)</title><rect x="62.1" y="723.0" width="17.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="65.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.39%)</title><rect x="79.4" y="755.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (4 samples, 0.39%)</title><rect x="79.4" y="739.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (1 samples, 0.10%)</title><rect x="80.6" y="723.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="83.6" y="734.0"></text>
</g>
<g>
<title>g1_post_barrier_slow Runtime1 stub (1 samples, 0.10%)</title><rect x="80.6" y="707.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="83.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.20%)</title><rect x="81.7" y="723.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="84.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (87 samples, 8.53%)</title><rect x="84.0" y="755.0" width="100.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="87.0" y="766.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (87 samples, 8.53%)</title><rect x="84.0" y="739.0" width="100.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="87.0" y="750.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.10%)</title><rect x="84.0" y="723.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="87.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (86 samples, 8.43%)</title><rect x="85.2" y="723.0" width="99.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="88.2" y="734.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (86 samples, 8.43%)</title><rect x="85.2" y="707.0" width="99.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.2" y="718.0">java/util/co..</text>
</g>
<g>
<title>sun/misc/Unsafe.unpark (86 samples, 8.43%)</title><rect x="85.2" y="691.0" width="99.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="88.2" y="702.0">sun/misc/Uns..</text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="85.2" y="675.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="88.2" y="686.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="86.4" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="89.4" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (73 samples, 7.16%)</title><rect x="87.5" y="675.0" width="84.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="90.5" y="686.0">Unsafe_Unp..</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.20%)</title><rect x="88.7" y="659.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="91.7" y="670.0"></text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.10%)</title><rect x="91.0" y="659.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="94.0" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (4 samples, 0.39%)</title><rect x="92.1" y="659.0" width="4.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="95.1" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_signal (50 samples, 4.90%)</title><rect x="96.8" y="659.0" width="57.8" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="99.8" y="670.0">__pthr..</text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (2 samples, 0.20%)</title><rect x="154.6" y="659.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="157.6" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_lock (13 samples, 1.27%)</title><rect x="156.9" y="659.0" width="15.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="159.9" y="670.0"></text>
</g>
<g>
<title>__lll_unlock_wake (8 samples, 0.78%)</title><rect x="172.0" y="675.0" width="9.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="175.0" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.29%)</title><rect x="181.2" y="675.0" width="3.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="184.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContext.registerOffset (7 samples, 0.69%)</title><rect x="184.7" y="867.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="187.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl.reportFetchedOffset (7 samples, 0.69%)</title><rect x="184.7" y="851.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="187.7" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.69%)</title><rect x="184.7" y="835.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="187.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (7 samples, 0.69%)</title><rect x="184.7" y="819.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="187.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="190.5" y="803.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="193.5" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.20%)</title><rect x="190.5" y="787.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="193.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="190.5" y="771.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="193.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/PartitionContexts.get (5 samples, 0.49%)</title><rect x="192.8" y="867.0" width="5.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="195.8" y="878.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.49%)</title><rect x="192.8" y="851.0" width="5.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="195.8" y="862.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (5 samples, 0.49%)</title><rect x="192.8" y="835.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.8" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (2 samples, 0.20%)</title><rect x="196.3" y="819.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="199.3" y="830.0"></text>
</g>
<g>
<title>java/util/Objects.equals (2 samples, 0.20%)</title><rect x="196.3" y="803.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="199.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="197.4" y="787.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="200.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="198.6" y="867.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="201.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (2 samples, 0.20%)</title><rect x="198.6" y="851.0" width="2.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="201.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (2 samples, 0.20%)</title><rect x="198.6" y="835.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="201.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (2 samples, 0.20%)</title><rect x="198.6" y="819.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (2 samples, 0.20%)</title><rect x="198.6" y="803.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="201.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (3 samples, 0.29%)</title><rect x="200.9" y="899.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="203.9" y="910.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (3 samples, 0.29%)</title><rect x="200.9" y="883.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="203.9" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.29%)</title><rect x="200.9" y="867.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="203.9" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/ConsumerRecords$ConcatenatedIterable$1.makeNext (3 samples, 0.29%)</title><rect x="200.9" y="851.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="203.9" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.hasNext (1 samples, 0.10%)</title><rect x="203.2" y="835.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.04%)</title><rect x="204.4" y="915.0" width="35.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="207.4" y="926.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (31 samples, 3.04%)</title><rect x="204.4" y="899.0" width="35.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="207.4" y="910.0">org..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (21 samples, 2.06%)</title><rect x="204.4" y="883.0" width="24.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="207.4" y="894.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerCoordinator.timeToNextPoll (1 samples, 0.10%)</title><rect x="204.4" y="867.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="207.4" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/AbstractCoordinator.timeToNextHeartbeat (1 samples, 0.10%)</title><rect x="204.4" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="207.4" y="862.0"></text>
</g>
<g>
<title>monitorenter_nofpu Runtime1 stub (1 samples, 0.10%)</title><rect x="204.4" y="835.0" width="1.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="207.4" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.collectFetch (20 samples, 1.96%)</title><rect x="205.5" y="867.0" width="23.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="208.5" y="878.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (20 samples, 1.96%)</title><rect x="205.5" y="851.0" width="23.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.5" y="862.0">o..</text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1900 (17 samples, 1.67%)</title><rect x="205.5" y="835.0" width="19.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="208.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (17 samples, 1.67%)</title><rect x="205.5" y="819.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="208.5" y="830.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="207.8" y="803.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="210.8" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (9 samples, 0.88%)</title><rect x="209.0" y="803.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="212.0" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (5 samples, 0.49%)</title><rect x="213.6" y="787.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="216.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (5 samples, 0.49%)</title><rect x="213.6" y="771.0" width="5.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="216.6" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (5 samples, 0.49%)</title><rect x="213.6" y="755.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="216.6" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (5 samples, 0.49%)</title><rect x="213.6" y="739.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="216.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (5 samples, 0.49%)</title><rect x="213.6" y="723.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="216.6" y="734.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (5 samples, 0.49%)</title><rect x="213.6" y="707.0" width="5.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="216.6" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (5 samples, 0.49%)</title><rect x="213.6" y="691.0" width="5.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="216.6" y="702.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (5 samples, 0.49%)</title><rect x="219.4" y="803.0" width="5.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (4 samples, 0.39%)</title><rect x="220.5" y="787.0" width="4.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="223.5" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (4 samples, 0.39%)</title><rect x="220.5" y="771.0" width="4.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.5" y="782.0"></text>
</g>
<g>
<title>java/util/Optional.of (4 samples, 0.39%)</title><rect x="220.5" y="755.0" width="4.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="223.5" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.access$2200 (1 samples, 0.10%)</title><rect x="225.2" y="835.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="228.2" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$FetchManagerMetrics.recordPartitionLead (1 samples, 0.10%)</title><rect x="225.2" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="228.2" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.record (1 samples, 0.10%)</title><rect x="225.2" y="803.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.2" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Sensor.recordInternal (1 samples, 0.10%)</title><rect x="225.2" y="787.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="228.2" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.record (1 samples, 0.10%)</title><rect x="225.2" y="771.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.2" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/SampledStat.current (1 samples, 0.10%)</title><rect x="225.2" y="755.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.2" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/stats/Min.update (1 samples, 0.10%)</title><rect x="225.2" y="739.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="228.2" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isAssigned (1 samples, 0.10%)</title><rect x="226.3" y="835.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="229.3" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/common/internals/PartitionStates.contains (1 samples, 0.10%)</title><rect x="226.3" y="819.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="229.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.10%)</title><rect x="226.3" y="803.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="229.3" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.10%)</title><rect x="226.3" y="787.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="229.3" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/TopicPartition.equals (1 samples, 0.10%)</title><rect x="226.3" y="771.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="229.3" y="782.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.10%)</title><rect x="226.3" y="755.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.3" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.position (1 samples, 0.10%)</title><rect x="227.5" y="835.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.5" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.isFetchable (1 samples, 0.10%)</title><rect x="227.5" y="819.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="230.5" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateAssignmentMetadataIfNeeded (1 samples, 0.10%)</title><rect x="228.6" y="883.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="231.6" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (1 samples, 0.10%)</title><rect x="229.8" y="883.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="232.8" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.hasPendingRequests (2 samples, 0.20%)</title><rect x="231.0" y="883.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.10%)</title><rect x="231.0" y="867.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="234.0" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.10%)</title><rect x="231.0" y="851.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="234.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.10%)</title><rect x="231.0" y="835.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="234.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.10%)</title><rect x="231.0" y="819.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="234.0" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$UnsentRequests.hasRequests (1 samples, 0.10%)</title><rect x="232.1" y="867.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.1" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.isEmpty (1 samples, 0.10%)</title><rect x="232.1" y="851.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="235.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.first (1 samples, 0.10%)</title><rect x="232.1" y="835.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.1" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.transmitSends (5 samples, 0.49%)</title><rect x="233.3" y="883.0" width="5.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.3" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (2 samples, 0.20%)</title><rect x="233.3" y="867.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.3" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (2 samples, 0.20%)</title><rect x="233.3" y="851.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.3" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (2 samples, 0.20%)</title><rect x="233.3" y="835.0" width="2.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (1 samples, 0.10%)</title><rect x="233.3" y="819.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.3" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.10%)</title><rect x="233.3" y="803.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="236.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="233.3" y="787.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="236.3" y="798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="233.3" y="771.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="236.3" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (1 samples, 0.10%)</title><rect x="234.4" y="819.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.4" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector$SelectorMetrics.recordBytesReceived (1 samples, 0.10%)</title><rect x="234.4" y="803.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.4" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/metrics/Metrics.getSensor (1 samples, 0.10%)</title><rect x="234.4" y="787.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="237.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.10%)</title><rect x="234.4" y="771.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="237.4" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (1 samples, 0.10%)</title><rect x="234.4" y="755.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.4" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (3 samples, 0.29%)</title><rect x="235.6" y="867.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="238.6" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.send (3 samples, 0.29%)</title><rect x="235.6" y="851.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.6" y="862.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.29%)</title><rect x="235.6" y="835.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.6" y="846.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.doSend (3 samples, 0.29%)</title><rect x="235.6" y="819.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.6" y="830.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.send (1 samples, 0.10%)</title><rect x="235.6" y="803.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="238.6" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.setSend (1 samples, 0.10%)</title><rect x="235.6" y="787.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="238.6" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.addInterestOps (1 samples, 0.10%)</title><rect x="235.6" y="771.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.6" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.10%)</title><rect x="235.6" y="755.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.6" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.10%)</title><rect x="235.6" y="739.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="238.6" y="750.0"></text>
</g>
<g>
<title>org/apache/kafka/common/requests/AbstractRequest.toSend (2 samples, 0.20%)</title><rect x="236.7" y="803.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="239.7" y="814.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildRequestSend (2 samples, 0.20%)</title><rect x="236.7" y="787.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.7" y="798.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.buildSend (2 samples, 0.20%)</title><rect x="236.7" y="771.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="782.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.build (2 samples, 0.20%)</title><rect x="236.7" y="755.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.7" y="766.0"></text>
</g>
<g>
<title>org/apache/kafka/common/protocol/SendBuilder.flushPendingSend (2 samples, 0.20%)</title><rect x="236.7" y="739.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="239.7" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.toArray (2 samples, 0.20%)</title><rect x="236.7" y="723.0" width="2.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="239.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="237.9" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.9" y="718.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.sendFetches (1 samples, 0.10%)</title><rect x="239.1" y="883.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="242.1" y="894.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.prepareFetchRequests (1 samples, 0.10%)</title><rect x="239.1" y="867.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="242.1" y="878.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchablePartitions (1 samples, 0.10%)</title><rect x="239.1" y="851.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="242.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue.iterator (1 samples, 0.10%)</title><rect x="239.1" y="835.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="242.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentLinkedQueue$Itr.&lt;init&gt; (1 samples, 0.10%)</title><rect x="239.1" y="819.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="242.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (632 samples, 61.96%)</title><rect x="240.2" y="963.0" width="731.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.2" y="974.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (632 samples, 61.96%)</title><rect x="240.2" y="947.0" width="731.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.2" y="958.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (632 samples, 61.96%)</title><rect x="240.2" y="931.0" width="731.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="243.2" y="942.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/342590257.run (404 samples, 39.61%)</title><rect x="241.4" y="915.0" width="467.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="244.4" y="926.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$L..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.lambda$putTask$64 (404 samples, 39.61%)</title><rect x="241.4" y="899.0" width="467.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.4" y="910.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.la..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.processTask (404 samples, 39.61%)</title><rect x="241.4" y="883.0" width="467.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="244.4" y="894.0">com/linecorp/decaton/processor/runtime/internal/ProcessorUnit.pr..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.scheduleThenProcess (404 samples, 39.61%)</title><rect x="241.4" y="867.0" width="467.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="244.4" y="878.0">com/linecorp/decaton/processor/runtime/internal/ProcessPipeline...</text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="249.5" y="851.0" width="1.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="252.5" y="862.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="249.5" y="835.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="252.5" y="846.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.10%)</title><rect x="250.6" y="851.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="253.6" y="862.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (10 samples, 0.98%)</title><rect x="251.8" y="851.0" width="11.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="254.8" y="862.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (10 samples, 0.98%)</title><rect x="251.8" y="835.0" width="11.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="254.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (10 samples, 0.98%)</title><rect x="251.8" y="819.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="254.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (10 samples, 0.98%)</title><rect x="251.8" y="803.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="254.8" y="814.0"></text>
</g>
<g>
<title>__clock_gettime (8 samples, 0.78%)</title><rect x="254.1" y="787.0" width="9.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="257.1" y="798.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="255.3" y="771.0" width="8.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="258.3" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completeWith (32 samples, 3.14%)</title><rect x="263.4" y="851.0" width="37.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="266.4" y="862.0">com..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 3.14%)</title><rect x="263.4" y="835.0" width="37.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="266.4" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (32 samples, 3.14%)</title><rect x="263.4" y="819.0" width="37.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="266.4" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (22 samples, 2.16%)</title><rect x="274.9" y="803.0" width="25.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="277.9" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (1 samples, 0.10%)</title><rect x="274.9" y="787.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="277.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (1 samples, 0.10%)</title><rect x="274.9" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="277.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (1 samples, 0.10%)</title><rect x="274.9" y="755.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="277.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (21 samples, 2.06%)</title><rect x="276.1" y="787.0" width="24.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="279.1" y="798.0">j..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl$$Lambda$374/1588596768.accept (21 samples, 2.06%)</title><rect x="276.1" y="771.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="279.1" y="782.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.lambda$completeWith$20 (21 samples, 2.06%)</title><rect x="276.1" y="755.0" width="24.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="279.1" y="766.0">c..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (19 samples, 1.86%)</title><rect x="276.1" y="739.0" width="22.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="279.1" y="750.0">j..</text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (14 samples, 1.37%)</title><rect x="281.9" y="723.0" width="16.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="284.9" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/ProcessorSubscription$Handler$$Lambda$354/1797324427.accept (2 samples, 0.20%)</title><rect x="283.0" y="707.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="286.0" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$353/2002078049.accept (1 samples, 0.10%)</title><rect x="285.3" y="707.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="288.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (10 samples, 0.98%)</title><rect x="286.5" y="707.0" width="11.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="289.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (10 samples, 0.98%)</title><rect x="286.5" y="691.0" width="11.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="289.5" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/OutOfOrderCommitControl$$Lambda$353/2002078049.accept (2 samples, 0.20%)</title><rect x="295.7" y="675.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="298.7" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (2 samples, 0.20%)</title><rect x="298.1" y="739.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="301.1" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.extract (121 samples, 11.86%)</title><rect x="300.4" y="851.0" width="140.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.4" y="862.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$46/524241174.extract (121 samples, 11.86%)</title><rect x="300.4" y="835.0" width="140.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.4" y="846.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$init$13 (121 samples, 11.86%)</title><rect x="300.4" y="819.0" width="140.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="303.4" y="830.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (120 samples, 11.76%)</title><rect x="300.4" y="803.0" width="138.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="303.4" y="814.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Task$KafkaDeserializer.deserialize (120 samples, 11.76%)</title><rect x="300.4" y="787.0" width="138.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="303.4" y="798.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (120 samples, 11.76%)</title><rect x="300.4" y="771.0" width="138.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="303.4" y="782.0">com/fasterxml/jac..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (25 samples, 2.45%)</title><rect x="300.4" y="755.0" width="28.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="303.4" y="766.0">co..</text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="306.2" y="739.0" width="1.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="309.2" y="750.0"></text>
</g>
<g>
<title>__clock_gettime (2 samples, 0.20%)</title><rect x="307.3" y="739.0" width="2.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="310.3" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="307.3" y="723.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="310.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (3 samples, 0.29%)</title><rect x="309.6" y="739.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="312.6" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (3 samples, 0.29%)</title><rect x="309.6" y="723.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="312.6" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (3 samples, 0.29%)</title><rect x="309.6" y="707.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.6" y="718.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.29%)</title><rect x="309.6" y="691.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.6" y="702.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (3 samples, 0.29%)</title><rect x="309.6" y="675.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="312.6" y="686.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.29%)</title><rect x="309.6" y="659.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="312.6" y="670.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (3 samples, 0.29%)</title><rect x="309.6" y="643.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="312.6" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (14 samples, 1.37%)</title><rect x="313.1" y="739.0" width="16.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="316.1" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.constructParser (4 samples, 0.39%)</title><rect x="324.7" y="723.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="327.7" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.detectEncoding (2 samples, 0.20%)</title><rect x="324.7" y="707.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="327.7" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.10%)</title><rect x="324.7" y="691.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="327.7" y="702.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.10%)</title><rect x="324.7" y="675.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="327.7" y="686.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="324.7" y="659.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="327.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="324.7" y="643.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="327.7" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.handleBOM (1 samples, 0.10%)</title><rect x="325.8" y="691.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="328.8" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.&lt;init&gt; (2 samples, 0.20%)</title><rect x="327.0" y="707.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.0" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.&lt;init&gt; (2 samples, 0.20%)</title><rect x="327.0" y="691.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="330.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/io/IOContext.constructTextBuffer (2 samples, 0.20%)</title><rect x="327.0" y="675.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="330.0" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="327.0" y="659.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="330.0" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (84 samples, 8.24%)</title><rect x="329.3" y="755.0" width="97.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="332.3" y="766.0">com/fasterx..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._findRootDeserializer (8 samples, 0.78%)</title><rect x="329.3" y="739.0" width="9.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (8 samples, 0.78%)</title><rect x="329.3" y="723.0" width="9.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.3" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (2 samples, 0.20%)</title><rect x="335.1" y="707.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="338.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/SimpleType.equals (1 samples, 0.10%)</title><rect x="337.4" y="707.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="340.4" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._initForReading (10 samples, 0.98%)</title><rect x="338.5" y="739.0" width="11.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="341.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (4 samples, 0.39%)</title><rect x="345.5" y="723.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="348.5" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.39%)</title><rect x="345.5" y="707.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="348.5" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/JsonReadContext.createChildObjectContext (3 samples, 0.29%)</title><rect x="346.6" y="691.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="349.6" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.20%)</title><rect x="347.8" y="675.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="350.8" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.20%)</title><rect x="347.8" y="659.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="350.8" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (2 samples, 0.20%)</title><rect x="347.8" y="643.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="350.8" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="349.0" y="627.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="352.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.readRootValue (66 samples, 6.47%)</title><rect x="350.1" y="739.0" width="76.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="353.1" y="750.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (66 samples, 6.47%)</title><rect x="350.1" y="723.0" width="76.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="353.1" y="734.0">com/fast..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (17 samples, 1.67%)</title><rect x="350.1" y="707.0" width="19.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.1" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (12 samples, 1.18%)</title><rect x="350.1" y="691.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (12 samples, 1.18%)</title><rect x="350.1" y="675.0" width="13.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="353.1" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (12 samples, 1.18%)</title><rect x="350.1" y="659.0" width="13.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="353.1" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (5 samples, 0.49%)</title><rect x="364.0" y="691.0" width="5.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="367.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (49 samples, 4.80%)</title><rect x="369.8" y="707.0" width="56.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="372.8" y="718.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (49 samples, 4.80%)</title><rect x="369.8" y="691.0" width="56.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="372.8" y="702.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (49 samples, 4.80%)</title><rect x="369.8" y="675.0" width="56.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="372.8" y="686.0">com/fa..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.nextToken (21 samples, 2.06%)</title><rect x="374.4" y="659.0" width="24.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.4" y="670.0">c..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._nextTokenNotInObject (4 samples, 0.39%)</title><rect x="377.9" y="643.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parseName (9 samples, 0.88%)</title><rect x="382.5" y="643.0" width="10.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="385.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName (9 samples, 0.88%)</title><rect x="382.5" y="627.0" width="10.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="385.5" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseMediumName2 (9 samples, 0.88%)</title><rect x="382.5" y="611.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.5" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (7 samples, 0.69%)</title><rect x="384.8" y="595.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="387.8" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._parsePosNumber (2 samples, 0.20%)</title><rect x="392.9" y="643.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.9" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon (2 samples, 0.20%)</title><rect x="395.2" y="643.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="398.2" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser._skipColon2 (2 samples, 0.20%)</title><rect x="395.2" y="627.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/UTF8StreamJsonParser.parseLongName (1 samples, 0.10%)</title><rect x="397.5" y="643.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="400.5" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (7 samples, 0.69%)</title><rect x="398.7" y="659.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="401.7" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (5 samples, 0.49%)</title><rect x="401.0" y="643.0" width="5.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="404.0" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="401.0" y="627.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="404.0" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="401.0" y="611.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="404.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="401.0" y="595.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="404.0" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="401.0" y="579.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="404.0" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="401.0" y="563.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="404.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.39%)</title><rect x="402.2" y="627.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="405.2" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/NumberDeserializers$LongDeserializer.deserialize (4 samples, 0.39%)</title><rect x="402.2" y="611.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="405.2" y="622.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (4 samples, 0.39%)</title><rect x="402.2" y="595.0" width="4.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="405.2" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (10 samples, 0.98%)</title><rect x="406.8" y="659.0" width="11.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="409.8" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (10 samples, 0.98%)</title><rect x="406.8" y="643.0" width="11.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="409.8" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (10 samples, 0.98%)</title><rect x="406.8" y="627.0" width="11.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="409.8" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (10 samples, 0.98%)</title><rect x="406.8" y="611.0" width="11.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="409.8" y="622.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (10 samples, 0.98%)</title><rect x="406.8" y="595.0" width="11.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="409.8" y="606.0"></text>
</g>
<g>
<title>sun/reflect/DelegatingConstructorAccessorImpl.newInstance (5 samples, 0.49%)</title><rect x="412.6" y="579.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.6" y="590.0"></text>
</g>
<g>
<title>sun/reflect/GeneratedConstructorAccessor2.newInstance (2 samples, 0.20%)</title><rect x="416.1" y="563.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="419.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.findCreatorProperty (7 samples, 0.69%)</title><rect x="418.4" y="659.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.4" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.69%)</title><rect x="418.4" y="643.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="421.4" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.69%)</title><rect x="418.4" y="627.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="421.4" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (11 samples, 1.08%)</title><rect x="426.5" y="755.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="429.5" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (2 samples, 0.20%)</title><rect x="426.5" y="739.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="429.5" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (9 samples, 0.88%)</title><rect x="428.8" y="739.0" width="10.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="431.8" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromClass (9 samples, 0.88%)</title><rect x="428.8" y="723.0" width="10.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.8" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/util/LRUMap.get (9 samples, 0.88%)</title><rect x="428.8" y="707.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="431.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (9 samples, 0.88%)</title><rect x="428.8" y="691.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="431.8" y="702.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata$TaskMetadataBuilder.build (1 samples, 0.10%)</title><rect x="439.2" y="803.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.2" y="814.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="439.2" y="787.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="442.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="439.2" y="771.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="442.2" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.process (225 samples, 22.06%)</title><rect x="440.4" y="851.0" width="260.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.4" y="862.0">com/linecorp/decaton/processor/runt..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.close (40 samples, 3.92%)</title><rect x="441.5" y="835.0" width="46.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.5" y="846.0">com/..</text>
</g>
<g>
<title>org/slf4j/MDC.remove (40 samples, 3.92%)</title><rect x="441.5" y="819.0" width="46.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="444.5" y="830.0">org/..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.remove (40 samples, 3.92%)</title><rect x="441.5" y="803.0" width="46.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.5" y="814.0">ch/q..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (7 samples, 0.69%)</title><rect x="445.0" y="787.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="448.0" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (7 samples, 0.69%)</title><rect x="445.0" y="771.0" width="8.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="448.0" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (7 samples, 0.69%)</title><rect x="445.0" y="755.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="448.0" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (7 samples, 0.69%)</title><rect x="445.0" y="739.0" width="8.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="448.0" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="453.1" y="787.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="456.1" y="798.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="453.1" y="771.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="456.1" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="453.1" y="755.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="456.1" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.remove (29 samples, 2.84%)</title><rect x="454.2" y="787.0" width="33.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="457.2" y="798.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.remove (9 samples, 0.88%)</title><rect x="477.4" y="771.0" width="10.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="480.4" y="782.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (2 samples, 0.20%)</title><rect x="478.5" y="755.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="481.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="480.8" y="755.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="483.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.removeNode (4 samples, 0.39%)</title><rect x="482.0" y="755.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="485.0" y="766.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="486.6" y="755.0" width="1.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="489.6" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (7 samples, 0.69%)</title><rect x="487.8" y="835.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="490.8" y="846.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (7 samples, 0.69%)</title><rect x="487.8" y="819.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="490.8" y="830.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.loggingContext (119 samples, 11.67%)</title><rect x="495.9" y="835.0" width="137.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="498.9" y="846.0">com/linecorp/deca..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/LoggingContext.&lt;init&gt; (107 samples, 10.49%)</title><rect x="499.4" y="819.0" width="123.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.4" y="830.0">com/linecorp/de..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/TaskMetadata.toString (32 samples, 3.14%)</title><rect x="506.3" y="803.0" width="37.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.3" y="814.0">com..</text>
</g>
<g>
<title>java/lang/StringBuilder.append (19 samples, 1.86%)</title><rect x="517.9" y="787.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="520.9" y="798.0">j..</text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (15 samples, 1.47%)</title><rect x="522.5" y="771.0" width="17.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="525.5" y="782.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (6 samples, 0.59%)</title><rect x="527.1" y="755.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="530.1" y="766.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.expandCapacity (6 samples, 0.59%)</title><rect x="527.1" y="739.0" width="7.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="530.1" y="750.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (6 samples, 0.59%)</title><rect x="527.1" y="723.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="530.1" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.59%)</title><rect x="527.1" y="707.0" width="7.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="530.1" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (2 samples, 0.20%)</title><rect x="527.1" y="691.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="530.1" y="702.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.10%)</title><rect x="527.1" y="675.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="530.1" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="528.3" y="675.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="531.3" y="686.0"></text>
</g>
<g>
<title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.10%)</title><rect x="528.3" y="659.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="531.3" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.10%)</title><rect x="528.3" y="643.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="531.3" y="654.0"></text>
</g>
<g>
<title>OopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="528.3" y="627.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="531.3" y="638.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.29%)</title><rect x="529.4" y="691.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="532.4" y="702.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (2 samples, 0.20%)</title><rect x="530.6" y="675.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="533.6" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.20%)</title><rect x="530.6" y="659.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="533.6" y="670.0"></text>
</g>
<g>
<title>nmethod::get_deopt_original_pc(frame const*) (1 samples, 0.10%)</title><rect x="532.9" y="691.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="535.9" y="702.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (2 samples, 0.20%)</title><rect x="534.1" y="755.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="537.1" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="536.4" y="755.0" width="3.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="539.4" y="766.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (3 samples, 0.29%)</title><rect x="539.8" y="787.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="542.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (6 samples, 0.59%)</title><rect x="543.3" y="803.0" width="7.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Long.toString (6 samples, 0.59%)</title><rect x="543.3" y="787.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.3" y="798.0"></text>
</g>
<g>
<title>java/lang/Long.getChars (6 samples, 0.59%)</title><rect x="543.3" y="771.0" width="7.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="546.3" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.20%)</title><rect x="550.3" y="803.0" width="2.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="553.3" y="814.0"></text>
</g>
<g>
<title>org/slf4j/MDC.put (61 samples, 5.98%)</title><rect x="552.6" y="803.0" width="70.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="555.6" y="814.0">org/slf4..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.put (61 samples, 5.98%)</title><rect x="552.6" y="787.0" width="70.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="555.6" y="798.0">ch/qos/l..</text>
</g>
<g>
<title>ch/qos/logback/classic/util/LogbackMDCAdapter.getAndSetLastOperation (5 samples, 0.49%)</title><rect x="552.6" y="771.0" width="5.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.6" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (5 samples, 0.49%)</title><rect x="552.6" y="755.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="555.6" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$100 (5 samples, 0.49%)</title><rect x="552.6" y="739.0" width="5.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="555.6" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.49%)</title><rect x="552.6" y="723.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="555.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.20%)</title><rect x="558.4" y="771.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="561.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (2 samples, 0.20%)</title><rect x="558.4" y="755.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="561.4" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.20%)</title><rect x="558.4" y="739.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="561.4" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (2 samples, 0.20%)</title><rect x="558.4" y="723.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="561.4" y="734.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.put (54 samples, 5.29%)</title><rect x="560.7" y="771.0" width="62.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="563.7" y="782.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.put (52 samples, 5.10%)</title><rect x="563.0" y="755.0" width="60.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="566.0" y="766.0">java/u..</text>
</g>
<g>
<title>java/util/HashMap.putVal (28 samples, 2.75%)</title><rect x="590.7" y="739.0" width="32.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="593.7" y="750.0">ja..</text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="610.4" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.4" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (9 samples, 0.88%)</title><rect x="611.6" y="723.0" width="10.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="614.6" y="734.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.10%)</title><rect x="622.0" y="723.0" width="1.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="625.0" y="734.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/AbstractDecatonProperties.get (9 samples, 0.88%)</title><rect x="623.1" y="819.0" width="10.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="626.1" y="830.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.get (9 samples, 0.88%)</title><rect x="623.1" y="803.0" width="10.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="626.1" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.get (9 samples, 0.88%)</title><rect x="623.1" y="787.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="626.1" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (8 samples, 0.78%)</title><rect x="623.1" y="771.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="626.1" y="782.0"></text>
</g>
<g>
<title>__clock_gettime (4 samples, 0.39%)</title><rect x="627.8" y="755.0" width="4.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="630.8" y="766.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.39%)</title><rect x="627.8" y="739.0" width="4.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="630.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.10%)</title><rect x="632.4" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.4" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.push (39 samples, 3.82%)</title><rect x="633.5" y="835.0" width="45.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="636.5" y="846.0">com/..</text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.pushDownStream (39 samples, 3.82%)</title><rect x="633.5" y="819.0" width="45.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="636.5" y="830.0">com/..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="633.5" y="803.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="636.5" y="814.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="633.5" y="787.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="636.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="633.5" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="636.5" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="633.5" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="636.5" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="633.5" y="739.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="636.5" y="750.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner$$Lambda$273/1951872388.process (19 samples, 1.86%)</title><rect x="634.7" y="803.0" width="22.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.7" y="814.0">c..</text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/DecatonRunner.lambda$null$14 (18 samples, 1.76%)</title><rect x="635.9" y="787.0" width="20.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording.process (17 samples, 1.67%)</title><rect x="635.9" y="771.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.9" y="782.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="638.2" y="755.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="641.2" y="766.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.isTraceEnabled (1 samples, 0.10%)</title><rect x="638.2" y="739.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.2" y="750.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.callTurboFilters (1 samples, 0.10%)</title><rect x="638.2" y="723.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.2" y="734.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/LoggerContext.getTurboFilterChainDecision_0_3OrMore (1 samples, 0.10%)</title><rect x="638.2" y="707.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.size (1 samples, 0.10%)</title><rect x="638.2" y="691.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.getArray (1 samples, 0.10%)</title><rect x="638.2" y="675.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.2" y="686.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/Recording$ChildRecording.process (9 samples, 0.88%)</title><rect x="639.3" y="755.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.3" y="766.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.69%)</title><rect x="641.6" y="739.0" width="8.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="644.6" y="750.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="641.6" y="723.0" width="8.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="644.6" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (5 samples, 0.49%)</title><rect x="649.7" y="755.0" width="5.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="652.7" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/benchmark/ResourceTracker.track (1 samples, 0.10%)</title><rect x="655.5" y="771.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="658.5" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.10%)</title><rect x="655.5" y="755.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.5" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (1 samples, 0.10%)</title><rect x="655.5" y="739.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="658.5" y="750.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.10%)</title><rect x="655.5" y="723.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.5" y="734.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (1 samples, 0.10%)</title><rect x="655.5" y="707.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="658.5" y="718.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.completedCompletion (5 samples, 0.49%)</title><rect x="656.7" y="803.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.7" y="814.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/CompletionImpl.complete (5 samples, 0.49%)</title><rect x="656.7" y="787.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.complete (5 samples, 0.49%)</title><rect x="656.7" y="771.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.7" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessingContextImpl.&lt;init&gt; (3 samples, 0.29%)</title><rect x="662.5" y="803.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.5" y="814.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (3 samples, 0.29%)</title><rect x="662.5" y="787.0" width="3.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="665.5" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="665.9" y="803.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="668.9" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.isEmpty (1 samples, 0.10%)</title><rect x="665.9" y="787.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="668.9" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="667.1" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.1" y="814.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (1 samples, 0.10%)</title><rect x="667.1" y="787.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="670.1" y="798.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (6 samples, 0.59%)</title><rect x="668.3" y="803.0" width="6.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="671.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="671.7" y="787.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="674.7" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="671.7" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="674.7" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="671.7" y="755.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.7" y="766.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.subList (2 samples, 0.20%)</title><rect x="672.9" y="787.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="675.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.29%)</title><rect x="675.2" y="803.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (3 samples, 0.29%)</title><rect x="675.2" y="787.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="678.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postComplete (1 samples, 0.10%)</title><rect x="677.5" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.5" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils.timer (1 samples, 0.10%)</title><rect x="678.7" y="835.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="681.7" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="678.7" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="681.7" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="678.7" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="681.7" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="678.7" y="787.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="681.7" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="678.7" y="771.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.7" y="782.0"></text>
</g>
<g>
<title>G1DefaultAllocator::mutator_alloc_region(unsigned char) (1 samples, 0.10%)</title><rect x="678.7" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="681.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.76%)</title><rect x="679.8" y="835.0" width="20.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.whenComplete (18 samples, 1.76%)</title><rect x="679.8" y="819.0" width="20.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="682.8" y="830.0"></text>
</g>
<g>
<title>__clock_gettime (3 samples, 0.29%)</title><rect x="683.3" y="803.0" width="3.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="686.3" y="814.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.20%)</title><rect x="684.5" y="787.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="687.5" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenCompleteStage (11 samples, 1.08%)</title><rect x="686.8" y="803.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="689.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture$UniWhenComplete.tryFire (7 samples, 0.69%)</title><rect x="686.8" y="787.0" width="8.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="689.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.postFire (7 samples, 0.69%)</title><rect x="686.8" y="771.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="689.8" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.cleanStack (7 samples, 0.69%)</title><rect x="686.8" y="755.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="689.8" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$372/258715921.accept (4 samples, 0.39%)</title><rect x="687.9" y="739.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="690.9" y="750.0"></text>
</g>
<g>
<title>itable stub (2 samples, 0.20%)</title><rect x="692.5" y="739.0" width="2.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="695.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/CompletableFuture.uniWhenComplete (4 samples, 0.39%)</title><rect x="694.9" y="787.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.9" y="798.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline$$Lambda$372/258715921.accept (4 samples, 0.39%)</title><rect x="694.9" y="771.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.9" y="782.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessPipeline.lambda$process$59 (4 samples, 0.39%)</title><rect x="694.9" y="755.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.9" y="766.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/Utils$Timer.duration (4 samples, 0.39%)</title><rect x="694.9" y="739.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="697.9" y="750.0"></text>
</g>
<g>
<title>java/time/Duration.ofNanos (4 samples, 0.39%)</title><rect x="694.9" y="723.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="697.9" y="734.0"></text>
</g>
<g>
<title>java/time/Duration.create (4 samples, 0.39%)</title><rect x="694.9" y="707.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.9" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (1 samples, 0.10%)</title><rect x="698.3" y="691.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="701.3" y="702.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.10%)</title><rect x="698.3" y="675.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="701.3" y="686.0"></text>
</g>
<g>
<title>org/slf4j/MDC.remove (1 samples, 0.10%)</title><rect x="699.5" y="803.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="702.5" y="814.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (7 samples, 0.69%)</title><rect x="700.6" y="851.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="703.6" y="862.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.69%)</title><rect x="700.6" y="835.0" width="8.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="703.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.88%)</title><rect x="708.7" y="915.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.7" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.88%)</title><rect x="708.7" y="899.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="711.7" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (9 samples, 0.88%)</title><rect x="708.7" y="883.0" width="10.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="711.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (9 samples, 0.88%)</title><rect x="708.7" y="867.0" width="10.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="711.7" y="878.0"></text>
</g>
<g>
<title>com/linecorp/decaton/processor/runtime/internal/ProcessorUnit$$Lambda$356/342590257.run (1 samples, 0.10%)</title><rect x="718.0" y="851.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="721.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (218 samples, 21.37%)</title><rect x="719.2" y="915.0" width="252.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="722.2" y="926.0">java/util/concurrent/ThreadPoolExe..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (217 samples, 21.27%)</title><rect x="720.3" y="899.0" width="251.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="723.3" y="910.0">java/util/concurrent/LinkedBlocki..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (200 samples, 19.61%)</title><rect x="720.3" y="883.0" width="231.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="723.3" y="894.0">java/util/concurrent/locks/Abst..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (11 samples, 1.08%)</title><rect x="731.9" y="867.0" width="12.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="734.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (10 samples, 0.98%)</title><rect x="744.6" y="867.0" width="11.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="747.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (10 samples, 0.98%)</title><rect x="744.6" y="851.0" width="11.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="747.6" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.98%)</title><rect x="744.6" y="835.0" width="11.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="747.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.98%)</title><rect x="744.6" y="819.0" width="11.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="747.6" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.10%)</title><rect x="756.2" y="867.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="759.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (1 samples, 0.10%)</title><rect x="756.2" y="851.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (168 samples, 16.47%)</title><rect x="757.3" y="867.0" width="194.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="760.3" y="878.0">java/util/concurrent/lock..</text>
</g>
<g>
<title>sun/misc/Unsafe.park (168 samples, 16.47%)</title><rect x="757.3" y="851.0" width="194.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="760.3" y="862.0">sun/misc/Unsafe.park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="764.3" y="835.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="767.3" y="846.0"></text>
</g>
<g>
<title>JavaThread::thread_from_jni_environment(JNIEnv_*) (1 samples, 0.10%)</title><rect x="765.4" y="835.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="768.4" y="846.0"></text>
</g>
<g>
<title>JfrBackend::is_event_enabled(TraceEventId) (1 samples, 0.10%)</title><rect x="766.6" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="769.6" y="846.0"></text>
</g>
<g>
<title>Unsafe_Park (156 samples, 15.29%)</title><rect x="767.7" y="835.0" width="180.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="770.7" y="846.0">Unsafe_Park</text>
</g>
<g>
<title>HandleMarkCleaner::~HandleMarkCleaner() (1 samples, 0.10%)</title><rect x="771.2" y="819.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="774.2" y="830.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (16 samples, 1.57%)</title><rect x="772.4" y="819.0" width="18.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="775.4" y="830.0"></text>
</g>
<g>
<title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.20%)</title><rect x="780.5" y="803.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="783.5" y="814.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.10%)</title><rect x="780.5" y="787.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="783.5" y="798.0"></text>
</g>
<g>
<title>pthread_getspecific (1 samples, 0.10%)</title><rect x="781.6" y="787.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="784.6" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.10%)</title><rect x="782.8" y="803.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="785.8" y="814.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (6 samples, 0.59%)</title><rect x="783.9" y="803.0" width="7.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="786.9" y="814.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (1 samples, 0.10%)</title><rect x="790.9" y="819.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="793.9" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (2 samples, 0.20%)</title><rect x="792.0" y="819.0" width="2.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="795.0" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_from_native(JavaThreadState) (2 samples, 0.20%)</title><rect x="794.4" y="819.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="797.4" y="830.0"></text>
</g>
<g>
<title>_L_unlock_738 (1 samples, 0.10%)</title><rect x="796.7" y="819.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="799.7" y="830.0"></text>
</g>
<g>
<title>__lll_lock_wait (7 samples, 0.69%)</title><rect x="797.8" y="819.0" width="8.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="800.8" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (45 samples, 4.41%)</title><rect x="805.9" y="819.0" width="52.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="808.9" y="830.0">__lll..</text>
</g>
<g>
<title>__pthread_cond_wait (47 samples, 4.61%)</title><rect x="858.0" y="819.0" width="54.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="861.0" y="830.0">__pth..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (11 samples, 1.08%)</title><rect x="912.4" y="819.0" width="12.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="915.4" y="830.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.20%)</title><rect x="925.1" y="819.0" width="2.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="928.1" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.29%)</title><rect x="927.4" y="819.0" width="3.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="930.4" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (11 samples, 1.08%)</title><rect x="930.9" y="819.0" width="12.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="933.9" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="943.6" y="819.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="946.6" y="830.0"></text>
</g>
<g>
<title>pthread_getspecific (2 samples, 0.20%)</title><rect x="945.9" y="819.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="948.9" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.10%)</title><rect x="948.2" y="835.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="951.2" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.20%)</title><rect x="949.4" y="835.0" width="2.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="952.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.20%)</title><rect x="951.7" y="883.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="954.7" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.10%)</title><rect x="954.0" y="883.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="957.0" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.10%)</title><rect x="954.0" y="867.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="957.0" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="954.0" y="851.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="957.0" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="954.0" y="835.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="957.0" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::common_mem_allocate_init(KlassHandle, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="954.0" y="819.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="957.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::allocate_from_tlab_slow(KlassHandle, Thread*, unsigned long) (1 samples, 0.10%)</title><rect x="954.0" y="803.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="957.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long) (1 samples, 0.10%)</title><rect x="954.0" y="787.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="957.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 1.37%)</title><rect x="955.2" y="883.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="958.2" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 1.37%)</title><rect x="955.2" y="867.0" width="16.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="958.2" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 1.37%)</title><rect x="955.2" y="851.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="958.2" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (14 samples, 1.37%)</title><rect x="955.2" y="835.0" width="16.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="958.2" y="846.0"></text>
</g>
<g>
<title>start_thread (189 samples, 18.53%)</title><rect x="971.4" y="963.0" width="218.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="974.4" y="974.0">start_thread</text>
</g>
<g>
<title>java_start(Thread*) (189 samples, 18.53%)</title><rect x="971.4" y="947.0" width="218.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="974.4" y="958.0">java_start(Thread*)</text>
</g>
<g>
<title>GangWorker::loop() (16 samples, 1.57%)</title><rect x="971.4" y="931.0" width="18.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="974.4" y="942.0"></text>
</g>
<g>
<title>G1ParPreserveCMReferentsTask::work(unsigned int) (2 samples, 0.20%)</title><rect x="971.4" y="915.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.4" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (2 samples, 0.20%)</title><rect x="971.4" y="899.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="974.4" y="910.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="971.4" y="883.0" width="2.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="974.4" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (14 samples, 1.37%)</title><rect x="973.7" y="915.0" width="16.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="976.7" y="926.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (4 samples, 0.39%)</title><rect x="973.7" y="899.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="976.7" y="910.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (1 samples, 0.10%)</title><rect x="973.7" y="883.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="976.7" y="894.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.10%)</title><rect x="974.8" y="883.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="977.8" y="894.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.20%)</title><rect x="976.0" y="883.0" width="2.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="979.0" y="894.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(OopClosure*, OopClosure*, CLDClosure*, CLDClosure*, bool, unsigned int) (2 samples, 0.20%)</title><rect x="978.3" y="899.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.3" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(OopClosure*, CLDClosure*, CLDClosure*, CLDClosure*, CodeBlobClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="978.3" y="883.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="981.3" y="894.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="978.3" y="867.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="981.3" y="878.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CLDClosure*, CodeBlobClosure*) (1 samples, 0.10%)</title><rect x="978.3" y="851.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.3" y="862.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, CLDClosure*, RegisterMap const*, bool) (1 samples, 0.10%)</title><rect x="978.3" y="835.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="981.3" y="846.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="978.3" y="819.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="981.3" y="830.0"></text>
</g>
<g>
<title>InstanceKlass::mask_for(methodHandle, int, InterpreterOopMap*) (1 samples, 0.10%)</title><rect x="978.3" y="803.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="981.3" y="814.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle, int, InterpreterOopMap*) const (1 samples, 0.10%)</title><rect x="978.3" y="787.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="981.3" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(OopClosure*, OopClosure*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.10%)</title><rect x="979.5" y="883.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="982.5" y="894.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopClosure*) (1 samples, 0.10%)</title><rect x="979.5" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="982.5" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::scan_remembered_sets(G1ParPushHeapRSClosure*, OopClosure*, unsigned int) (8 samples, 0.78%)</title><rect x="980.6" y="899.0" width="9.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="983.6" y="910.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParPushHeapRSClosure*, CodeBlobClosure*, unsigned int) (8 samples, 0.78%)</title><rect x="980.6" y="883.0" width="9.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.6" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, DirtyCardQueue*, bool, unsigned int) (8 samples, 0.78%)</title><rect x="980.6" y="867.0" width="9.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="983.6" y="878.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, int, bool) (8 samples, 0.78%)</title><rect x="980.6" y="851.0" width="9.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="983.6" y="862.0"></text>
</g>
<g>
<title>RefineRecordRefsIntoCSCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (8 samples, 0.78%)</title><rect x="980.6" y="835.0" width="9.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="983.6" y="846.0"></text>
</g>
<g>
<title>G1RemSet::refine_card(signed char*, unsigned int, bool) (8 samples, 0.78%)</title><rect x="980.6" y="819.0" width="9.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="983.6" y="830.0"></text>
</g>
<g>
<title>FilterOutOfRegionClosure::FilterOutOfRegionClosure(HeapRegion*, OopClosure*) (1 samples, 0.10%)</title><rect x="981.8" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="984.8" y="814.0"></text>
</g>
<g>
<title>HeapRegion::oops_on_card_seq_iterate_careful(MemRegion, FilterOutOfRegionClosure*, bool, signed char*) (6 samples, 0.59%)</title><rect x="982.9" y="803.0" width="7.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="985.9" y="814.0"></text>
</g>
<g>
<title>G1BlockOffsetArrayContigSpace::block_start_unsafe(void const*) (1 samples, 0.10%)</title><rect x="986.4" y="787.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="989.4" y="798.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (1 samples, 0.10%)</title><rect x="987.5" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="990.5" y="798.0"></text>
</g>
<g>
<title>ObjArrayKlass::oop_oop_iterate_nv_m(oopDesc*, FilterOutOfRegionClosure*, MemRegion) (1 samples, 0.10%)</title><rect x="988.7" y="787.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="991.7" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (172 samples, 16.86%)</title><rect x="989.9" y="931.0" width="198.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="992.9" y="942.0">JavaThread::run()</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (172 samples, 16.86%)</title><rect x="989.9" y="915.0" width="198.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.9" y="926.0">JavaThread::thread_main_in..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (172 samples, 16.86%)</title><rect x="989.9" y="899.0" width="198.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.9" y="910.0">CompileBroker::compiler_th..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (172 samples, 16.86%)</title><rect x="989.9" y="883.0" width="198.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="992.9" y="894.0">CompileBroker::invoke_comp..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (171 samples, 16.76%)</title><rect x="989.9" y="867.0" width="197.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="992.9" y="878.0">C2Compiler::compile_method..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (171 samples, 16.76%)</title><rect x="989.9" y="851.0" width="197.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.9" y="862.0">Compile::Compile(ciEnv*, C..</text>
</g>
<g>
<title>Compile::Code_Gen() (69 samples, 6.76%)</title><rect x="989.9" y="835.0" width="79.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="992.9" y="846.0">Compile::..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="989.9" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="992.9" y="830.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.10%)</title><rect x="989.9" y="803.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="992.9" y="814.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="989.9" y="787.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.9" y="798.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.10%)</title><rect x="989.9" y="771.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="992.9" y="782.0"></text>
</g>
<g>
<title>__memmove_ssse3_back (1 samples, 0.10%)</title><rect x="989.9" y="755.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="992.9" y="766.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (4 samples, 0.39%)</title><rect x="991.0" y="819.0" width="4.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="994.0" y="830.0"></text>
</g>
<g>
<title>Compile::Process_OopMap_Node(MachNode*, int) (1 samples, 0.10%)</title><rect x="992.2" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="995.2" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="992.2" y="787.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="995.2" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="992.2" y="771.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="995.2" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, ciMethod*, int, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.10%)</title><rect x="993.3" y="803.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.3" y="814.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.10%)</title><rect x="993.3" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="996.3" y="798.0"></text>
</g>
<g>
<title>MachSpillCopyNode::implementation(CodeBuffer*, PhaseRegAlloc*, bool, outputStream*) const (1 samples, 0.10%)</title><rect x="994.5" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="997.5" y="814.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.10%)</title><rect x="994.5" y="787.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="997.5" y="798.0"></text>
</g>
<g>
<title>Matcher::match() (9 samples, 0.88%)</title><rect x="995.6" y="819.0" width="10.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="998.6" y="830.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (7 samples, 0.69%)</title><rect x="995.6" y="803.0" width="8.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="998.6" y="814.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.29%)</title><rect x="1000.3" y="787.0" width="3.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1003.3" y="798.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (2 samples, 0.20%)</title><rect x="1001.4" y="771.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1004.4" y="782.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.10%)</title><rect x="1001.4" y="755.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1004.4" y="766.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.10%)</title><rect x="1002.6" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1005.6" y="766.0"></text>
</g>
<g>
<title>State::_sub_Op_CastP2X(Node const*) (1 samples, 0.10%)</title><rect x="1002.6" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1005.6" y="750.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.10%)</title><rect x="1003.7" y="803.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1006.7" y="814.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.10%)</title><rect x="1004.9" y="803.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1007.9" y="814.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (1 samples, 0.10%)</title><rect x="1006.1" y="819.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1009.1" y="830.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.10%)</title><rect x="1006.1" y="803.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1009.1" y="814.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1006.1" y="787.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1009.1" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (3 samples, 0.29%)</title><rect x="1007.2" y="819.0" width="3.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1010.2" y="830.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (3 samples, 0.29%)</title><rect x="1007.2" y="803.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1010.2" y="814.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1007.2" y="787.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1010.2" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1008.4" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1011.4" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.10%)</title><rect x="1008.4" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.4" y="782.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.10%)</title><rect x="1008.4" y="755.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1011.4" y="766.0"></text>
</g>
<g>
<title>MachNode::get_base_and_disp(long&amp;, TypePtr const*&amp;) const (1 samples, 0.10%)</title><rect x="1008.4" y="739.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1011.4" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;) (1 samples, 0.10%)</title><rect x="1009.5" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1012.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (51 samples, 5.00%)</title><rect x="1010.7" y="819.0" width="59.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1013.7" y="830.0">PhaseC..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1010.7" y="803.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1013.7" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.49%)</title><rect x="1011.8" y="803.0" width="5.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1014.8" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.20%)</title><rect x="1014.2" y="787.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1017.2" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (1 samples, 0.10%)</title><rect x="1016.5" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1019.5" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (1 samples, 0.10%)</title><rect x="1017.6" y="803.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1020.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (10 samples, 0.98%)</title><rect x="1018.8" y="803.0" width="11.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.8" y="814.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (1 samples, 0.10%)</title><rect x="1029.2" y="787.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1032.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (8 samples, 0.78%)</title><rect x="1030.4" y="803.0" width="9.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1033.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.29%)</title><rect x="1036.1" y="787.0" width="3.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1039.1" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1039.6" y="803.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1042.6" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1039.6" y="787.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1042.6" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.39%)</title><rect x="1040.8" y="803.0" width="4.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1043.8" y="814.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.10%)</title><rect x="1041.9" y="787.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1044.9" y="798.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(int) (1 samples, 0.10%)</title><rect x="1043.1" y="787.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1046.1" y="798.0"></text>
</g>
<g>
<title>RegMask::is_vector(unsigned int) (1 samples, 0.10%)</title><rect x="1044.2" y="787.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1047.2" y="798.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (1 samples, 0.10%)</title><rect x="1045.4" y="803.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1048.4" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (4 samples, 0.39%)</title><rect x="1046.5" y="803.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.5" y="814.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (2 samples, 0.20%)</title><rect x="1048.9" y="787.0" width="2.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1051.9" y="798.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (2 samples, 0.20%)</title><rect x="1051.2" y="803.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1054.2" y="814.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (2 samples, 0.20%)</title><rect x="1051.2" y="787.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1054.2" y="798.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (2 samples, 0.20%)</title><rect x="1051.2" y="771.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.2" y="782.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1051.2" y="755.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1054.2" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1051.2" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1054.2" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (1 samples, 0.10%)</title><rect x="1052.3" y="755.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1055.3" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.20%)</title><rect x="1053.5" y="803.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1056.5" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1054.6" y="787.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1057.6" y="798.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (3 samples, 0.29%)</title><rect x="1055.8" y="803.0" width="3.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1058.8" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1058.1" y="787.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1061.1" y="798.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.88%)</title><rect x="1059.3" y="803.0" width="10.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1062.3" y="814.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1062.7" y="787.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1065.7" y="798.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (5 samples, 0.49%)</title><rect x="1063.9" y="787.0" width="5.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1066.9" y="798.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1068.5" y="771.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.5" y="782.0"></text>
</g>
<g>
<title>Compile::Optimize() (93 samples, 9.12%)</title><rect x="1069.7" y="835.0" width="107.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1072.7" y="846.0">Compile::Opti..</text>
</g>
<g>
<title>Compile::remove_speculative_types(PhaseIterGVN&amp;) (1 samples, 0.10%)</title><rect x="1069.7" y="819.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1072.7" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_speculative_types() (1 samples, 0.10%)</title><rect x="1069.7" y="803.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1072.7" y="814.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.10%)</title><rect x="1069.7" y="787.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1072.7" y="798.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1069.7" y="771.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1072.7" y="782.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1069.7" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.7" y="766.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.10%)</title><rect x="1069.7" y="739.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.7" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (2 samples, 0.20%)</title><rect x="1070.8" y="819.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.8" y="830.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (2 samples, 0.20%)</title><rect x="1070.8" y="803.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1073.8" y="814.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;) (2 samples, 0.20%)</title><rect x="1070.8" y="787.0" width="2.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.8" y="798.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="771.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.8" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="755.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1073.8" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="739.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.8" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="723.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.8" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="707.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.8" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="691.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1073.8" y="702.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="675.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1073.8" y="686.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="659.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1073.8" y="670.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1070.8" y="643.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1073.8" y="654.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.10%)</title><rect x="1070.8" y="627.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.8" y="638.0"></text>
</g>
<g>
<title>ConnectionGraph::split_AddP(Node*, Node*) (1 samples, 0.10%)</title><rect x="1072.0" y="771.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.0" y="782.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1072.0" y="755.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.0" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1072.0" y="739.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1075.0" y="750.0"></text>
</g>
<g>
<title>TypeInstPtr::xdual() const (1 samples, 0.10%)</title><rect x="1072.0" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.0" y="734.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1072.0" y="707.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1075.0" y="718.0"></text>
</g>
<g>
<title>ciMetadata::is_loaded() const (1 samples, 0.10%)</title><rect x="1072.0" y="691.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1075.0" y="702.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.10%)</title><rect x="1073.2" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1076.2" y="830.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1073.2" y="803.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1076.2" y="814.0"></text>
</g>
<g>
<title>TypeInt::filter_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1073.2" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1076.2" y="798.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.10%)</title><rect x="1073.2" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1076.2" y="782.0"></text>
</g>
<g>
<title>TypeInt::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1073.2" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1076.2" y="766.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1073.2" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1076.2" y="750.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.10%)</title><rect x="1073.2" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1076.2" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (72 samples, 7.06%)</title><rect x="1074.3" y="819.0" width="83.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1077.3" y="830.0">PhaseIdea..</text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.20%)</title><rect x="1074.3" y="803.0" width="2.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1077.3" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (6 samples, 0.59%)</title><rect x="1076.6" y="803.0" width="7.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1079.6" y="814.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (2 samples, 0.20%)</title><rect x="1081.3" y="787.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1084.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.49%)</title><rect x="1083.6" y="803.0" width="5.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1086.6" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (3 samples, 0.29%)</title><rect x="1084.7" y="787.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1087.7" y="798.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (1 samples, 0.10%)</title><rect x="1088.2" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1091.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (55 samples, 5.39%)</title><rect x="1089.4" y="803.0" width="63.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1092.4" y="814.0">PhaseId..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (54 samples, 5.29%)</title><rect x="1090.5" y="787.0" width="62.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1093.5" y="798.0">PhaseI..</text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (5 samples, 0.49%)</title><rect x="1095.1" y="771.0" width="5.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (45 samples, 4.41%)</title><rect x="1100.9" y="771.0" width="52.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1103.9" y="782.0">Phase..</text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.10%)</title><rect x="1139.1" y="755.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1139.1" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1142.1" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (10 samples, 0.98%)</title><rect x="1140.3" y="755.0" width="11.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.3" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1151.8" y="755.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_depth(Node*) const (1 samples, 0.10%)</title><rect x="1151.8" y="739.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1154.8" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.29%)</title><rect x="1153.0" y="803.0" width="3.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.0" y="814.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.10%)</title><rect x="1153.0" y="787.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.0" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) (1 samples, 0.10%)</title><rect x="1153.0" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="782.0"></text>
</g>
<g>
<title>Dict::operator[](void const*) const (1 samples, 0.10%)</title><rect x="1153.0" y="755.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.0" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1154.1" y="787.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1157.1" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.10%)</title><rect x="1154.1" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.1" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1154.1" y="755.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1157.1" y="766.0"></text>
</g>
<g>
<title>RegionNode::Opcode() const (1 samples, 0.10%)</title><rect x="1155.3" y="787.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1158.3" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1156.5" y="803.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.5" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1156.5" y="787.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="798.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1156.5" y="771.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1159.5" y="782.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1156.5" y="755.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1159.5" y="766.0"></text>
</g>
<g>
<title>MemNode::adr_type() const (1 samples, 0.10%)</title><rect x="1156.5" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1159.5" y="750.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.10%)</title><rect x="1156.5" y="723.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.5" y="734.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.10%)</title><rect x="1156.5" y="707.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.5" y="718.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1156.5" y="691.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1159.5" y="702.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypeOopPtr const*, int) (1 samples, 0.10%)</title><rect x="1156.5" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1159.5" y="686.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (15 samples, 1.47%)</title><rect x="1157.6" y="819.0" width="17.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1160.6" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (14 samples, 1.37%)</title><rect x="1158.8" y="803.0" width="16.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.8" y="814.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (2 samples, 0.20%)</title><rect x="1158.8" y="787.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.8" y="798.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1158.8" y="771.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1161.8" y="782.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.10%)</title><rect x="1159.9" y="771.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="782.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1159.9" y="755.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1162.9" y="766.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1159.9" y="739.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1162.9" y="750.0"></text>
</g>
<g>
<title>LoadNode::Value(PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1161.1" y="787.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1164.1" y="798.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.10%)</title><rect x="1161.1" y="771.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.1" y="782.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) (1 samples, 0.10%)</title><rect x="1161.1" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.1" y="766.0"></text>
</g>
<g>
<title>LoadRangeNode::Opcode() const (1 samples, 0.10%)</title><rect x="1162.2" y="787.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.2" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (4 samples, 0.39%)</title><rect x="1163.4" y="787.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.4" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1165.7" y="771.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1168.7" y="782.0"></text>
</g>
<g>
<title>PhiNode::hash() const (1 samples, 0.10%)</title><rect x="1165.7" y="755.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.7" y="766.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.10%)</title><rect x="1165.7" y="739.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.7" y="750.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1166.9" y="771.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1169.9" y="782.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.10%)</title><rect x="1166.9" y="755.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1169.9" y="766.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (3 samples, 0.29%)</title><rect x="1168.0" y="787.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1168.0" y="771.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1171.0" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.10%)</title><rect x="1168.0" y="755.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.0" y="766.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.10%)</title><rect x="1168.0" y="739.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.0" y="750.0"></text>
</g>
<g>
<title>RegionNode::is_unreachable_region(PhaseGVN*) const (2 samples, 0.20%)</title><rect x="1169.2" y="771.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.2" y="782.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (3 samples, 0.29%)</title><rect x="1171.5" y="787.0" width="3.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.5" y="798.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (3 samples, 0.29%)</title><rect x="1171.5" y="771.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.5" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (3 samples, 0.29%)</title><rect x="1171.5" y="755.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1174.5" y="766.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1171.5" y="739.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1174.5" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.20%)</title><rect x="1171.5" y="723.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.5" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="707.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.5" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="691.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.5" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="675.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1174.5" y="686.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="659.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1174.5" y="670.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="643.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.5" y="654.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="627.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1174.5" y="638.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="611.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.5" y="622.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1171.5" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.5" y="606.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1171.5" y="579.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1174.5" y="590.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.10%)</title><rect x="1172.6" y="707.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.6" y="718.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1172.6" y="691.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.6" y="702.0"></text>
</g>
<g>
<title>Unique_Node_List::push(Node*) (1 samples, 0.10%)</title><rect x="1173.8" y="739.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.8" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.10%)</title><rect x="1175.0" y="819.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.0" y="830.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1175.0" y="803.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1178.0" y="814.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1175.0" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1178.0" y="798.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1175.0" y="771.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1178.0" y="782.0"></text>
</g>
<g>
<title>__memset_sse2 (1 samples, 0.10%)</title><rect x="1176.1" y="819.0" width="1.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1179.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.69%)</title><rect x="1177.3" y="835.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.3" y="846.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.69%)</title><rect x="1177.3" y="819.0" width="8.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="830.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.69%)</title><rect x="1177.3" y="803.0" width="8.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.3" y="814.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.69%)</title><rect x="1177.3" y="787.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="798.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.69%)</title><rect x="1177.3" y="771.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="782.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.69%)</title><rect x="1177.3" y="755.0" width="8.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1180.3" y="766.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.69%)</title><rect x="1177.3" y="739.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="750.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.69%)</title><rect x="1177.3" y="723.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1180.3" y="734.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.69%)</title><rect x="1177.3" y="707.0" width="8.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1180.3" y="718.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.69%)</title><rect x="1177.3" y="691.0" width="8.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1180.3" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.69%)</title><rect x="1177.3" y="675.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.3" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.69%)</title><rect x="1177.3" y="659.0" width="8.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="670.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.10%)</title><rect x="1177.3" y="643.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="654.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.10%)</title><rect x="1177.3" y="627.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="638.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.10%)</title><rect x="1177.3" y="611.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.3" y="622.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.10%)</title><rect x="1177.3" y="595.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="606.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.10%)</title><rect x="1177.3" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="590.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1177.3" y="563.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.3" y="574.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.10%)</title><rect x="1177.3" y="547.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="558.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1177.3" y="531.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="542.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.10%)</title><rect x="1177.3" y="515.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1180.3" y="526.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.10%)</title><rect x="1177.3" y="499.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1180.3" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1177.3" y="483.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1180.3" y="494.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1177.3" y="467.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.3" y="478.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.10%)</title><rect x="1177.3" y="451.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.3" y="462.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1177.3" y="435.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.3" y="446.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1177.3" y="419.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1180.3" y="430.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1177.3" y="403.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1180.3" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1178.4" y="643.0" width="4.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.4" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1178.4" y="627.0" width="4.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1181.4" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1178.4" y="611.0" width="4.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.4" y="622.0"></text>
</g>
<g>
<title>GraphKit::add_predicate_impl(Deoptimization::DeoptReason, int) (1 samples, 0.10%)</title><rect x="1178.4" y="595.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.4" y="606.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.10%)</title><rect x="1178.4" y="579.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.4" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1179.6" y="595.0" width="3.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.6" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1179.6" y="579.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="590.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1179.6" y="563.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="574.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.6" y="547.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.6" y="558.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.6" y="531.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.6" y="515.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.6" y="499.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1182.6" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.6" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.6" y="494.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.6" y="467.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1182.6" y="478.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.6" y="451.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1182.6" y="462.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1179.6" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1179.6" y="419.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1179.6" y="403.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1179.6" y="387.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.6" y="398.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1179.6" y="371.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1182.6" y="382.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1179.6" y="355.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1182.6" y="366.0"></text>
</g>
<g>
<title>GraphKit::set_edges_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.10%)</title><rect x="1179.6" y="339.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1182.6" y="350.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.10%)</title><rect x="1179.6" y="323.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.6" y="334.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1179.6" y="307.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.6" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="547.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="558.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="531.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="515.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.7" y="499.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.7" y="483.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.7" y="467.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.7" y="451.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.7" y="435.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="419.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1183.7" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.7" y="403.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.7" y="387.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.7" y="371.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1183.7" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.7" y="355.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.7" y="339.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="323.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1183.7" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.7" y="307.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.7" y="291.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1183.7" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.7" y="275.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.7" y="259.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.7" y="243.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1180.7" y="227.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1180.7" y="211.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.7" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1180.7" y="195.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1180.7" y="179.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.7" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1180.7" y="163.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1183.7" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1180.7" y="147.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="158.0"></text>
</g>
<g>
<title>Compile::optimize_inlining(ciMethod*, int, ciInstanceKlass*, ciMethod*, TypeOopPtr const*, bool) (1 samples, 0.10%)</title><rect x="1180.7" y="131.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="142.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.10%)</title><rect x="1180.7" y="115.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="126.0"></text>
</g>
<g>
<title>ciMethod::resolve_invoke(ciKlass*, ciKlass*, bool) (1 samples, 0.10%)</title><rect x="1180.7" y="99.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="110.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1180.7" y="83.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="94.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.10%)</title><rect x="1180.7" y="67.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="78.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1180.7" y="51.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="62.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.10%)</title><rect x="1181.9" y="547.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="558.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.9" y="531.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.9" y="542.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.10%)</title><rect x="1181.9" y="515.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1184.9" y="526.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(InstanceKlass*, InstanceKlass*, Symbol*, Symbol*, Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1181.9" y="499.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1184.9" y="510.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessability(KlassHandle, KlassHandle, Thread*) (1 samples, 0.10%)</title><rect x="1181.9" y="483.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1184.9" y="494.0"></text>
</g>
<g>
<title>InstanceKlass::is_same_class_package(Klass*) (1 samples, 0.10%)</title><rect x="1181.9" y="467.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1184.9" y="478.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1183.1" y="643.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1183.1" y="627.0" width="2.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1183.1" y="611.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1183.1" y="595.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1183.1" y="579.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1183.1" y="563.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="574.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1183.1" y="547.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="558.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1183.1" y="531.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="542.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1183.1" y="515.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1183.1" y="499.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="510.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1183.1" y="483.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1183.1" y="467.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1183.1" y="451.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.1" y="462.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.20%)</title><rect x="1183.1" y="435.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="446.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.20%)</title><rect x="1183.1" y="419.0" width="2.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="430.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.20%)</title><rect x="1183.1" y="403.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.1" y="414.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.20%)</title><rect x="1183.1" y="387.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.20%)</title><rect x="1183.1" y="371.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1186.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.20%)</title><rect x="1183.1" y="355.0" width="2.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="366.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="339.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.1" y="350.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.1" y="323.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="334.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.1" y="307.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.1" y="291.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.1" y="275.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1183.1" y="259.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1183.1" y="243.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1183.1" y="227.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1183.1" y="211.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1183.1" y="195.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1183.1" y="179.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.1" y="190.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.10%)</title><rect x="1183.1" y="163.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="174.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**) (1 samples, 0.10%)</title><rect x="1183.1" y="147.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1186.1" y="158.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="339.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="323.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="307.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="291.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.2" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="275.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="259.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="270.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="243.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="254.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="227.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="238.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="211.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.2" y="222.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="195.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.2" y="206.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="179.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.2" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="163.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="174.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1184.2" y="147.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.2" y="158.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1184.2" y="131.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.2" y="142.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1184.2" y="115.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.2" y="126.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1184.2" y="99.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="110.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1184.2" y="83.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.2" y="94.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1184.2" y="67.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.2" y="78.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1184.2" y="51.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="62.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1184.2" y="35.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1187.2" y="46.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*) (2 samples, 0.20%)</title><rect x="1185.4" y="835.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1188.4" y="846.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1185.4" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.4" y="830.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1186.5" y="819.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="830.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1187.7" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (1 samples, 0.10%)</title><rect x="1187.7" y="851.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1187.7" y="835.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1187.7" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>Compilation::build_hir() (1 samples, 0.10%)</title><rect x="1187.7" y="803.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (1 samples, 0.10%)</title><rect x="1187.7" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (1 samples, 0.10%)</title><rect x="1187.7" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (1 samples, 0.10%)</title><rect x="1187.7" y="755.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.10%)</title><rect x="1187.7" y="739.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.10%)</title><rect x="1187.7" y="723.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.10%)</title><rect x="1187.7" y="707.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1187.7" y="691.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, Bytecodes::Code, Instruction*) (1 samples, 0.10%)</title><rect x="1187.7" y="675.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="686.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.10%)</title><rect x="1187.7" y="659.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.7" y="670.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.10%)</title><rect x="1187.7" y="643.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="654.0"></text>
</g>
<g>
<title>BlockListBuilder::set_leaders() (1 samples, 0.10%)</title><rect x="1187.7" y="627.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.7" y="638.0"></text>
</g>
<g>
<title>ciMethod::bci_block_start() (1 samples, 0.10%)</title><rect x="1187.7" y="611.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.7" y="622.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.10%)</title><rect x="1187.7" y="595.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.7" y="606.0"></text>
</g>
<g>
<title>VMThread::run() (1 samples, 0.10%)</title><rect x="1188.8" y="931.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1191.8" y="942.0"></text>
</g>
<g>
<title>VMThread::loop() (1 samples, 0.10%)</title><rect x="1188.8" y="915.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.8" y="926.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.10%)</title><rect x="1188.8" y="899.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.8" y="910.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (1 samples, 0.10%)</title><rect x="1188.8" y="883.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.8" y="894.0"></text>
</g>
<g>
<title>VM_G1IncCollectionPause::doit() (1 samples, 0.10%)</title><rect x="1188.8" y="867.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.8" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.10%)</title><rect x="1188.8" y="851.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.8" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(HeapRegion*, EvacuationInfo&amp;) (1 samples, 0.10%)</title><rect x="1188.8" y="835.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="846.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool, bool, bool) (1 samples, 0.10%)</title><rect x="1188.8" y="819.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked() (1 samples, 0.10%)</title><rect x="1188.8" y="803.0" width="1.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.8" y="814.0"></text>
</g>
<g>
<title>OtherRegionsTable::clear() (1 samples, 0.10%)</title><rect x="1188.8" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.8" y="798.0"></text>
</g>
</g>
</svg>
